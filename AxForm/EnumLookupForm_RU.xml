<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>EnumLookupForm_RU</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class EnumLookupForm_RU extends FormRun
    {
        EnumLookup_RU   enumLookup;
        int             choice;
        boolean         afterRun;
}
]]></Source>
			</Method>
			<Method>
				<Name>choice</Name>
				<Source><![CDATA[
            str choice()
    {
        return controlTables.getItem(choice).text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeForm</Name>
				<Source><![CDATA[
        void closeForm()
    {
        element.closeSelect(this.choice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        #define.itemHeight(14)
    void init()
    {
        container       enumElements;
        SysDictEnum     dictEnum;
        int             i;
        int             itemCount;

        void addItem(str _text, int _idx)
        {
            FormListItem    formListItem;
            formListItem = new FormListItem(_text);
            formListItem.idx(_idx);
            controlTables.addItem(formListItem);

            if (_text == enumLookup.parmCtrl().text())
            {
                choice = _idx;
            }
        }

        if (element.args() && element.args().caller())
        {
            enumLookup = element.args().caller();
        }

        if (!enumLookup || classidget(enumLookup) != classnum(EnumLookup_RU))
        {
            throw error(Error::missingParameter(element));
        }

        enumElements    = enumLookup.parmEnumElements();
        dictEnum        = new SysDictEnum(enumLookup.parmEnumId());
        itemCount       = conlen(enumElements)?conlen(enumElements):dictEnum.values();

        super();

        element.design().widthValue(enumLookup.parmCtrl().widthValue());

        if (conlen(enumElements))
        {
            for (i = 1; i <= itemCount; i++)
            {
                addItem((enumLookup.parmShowLabel() ? dictEnum.value2Label(conpeek(enumElements, i)) : dictEnum.value2Symbol(conpeek(enumElements, i))), i - 1);
            }
        }
        else
        {
            for (i = 0; i < itemCount; i++)
            {
                addItem((enumLookup.parmShowLabel() ? dictEnum.index2Label(i) : dictEnum.index2Symbol(i)), i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        void run()
    {
        super();

        element.selectListItem("@SYS9678", "@SYS9678");
        element.selectMode(controlTables);

        afterRun = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectListItem</Name>
				<Source><![CDATA[
        #define.FormWidthDiff(20)
    void selectListItem(str _formText, str _columnText)
    {
        FormListColumn      formListColumn;
        FormListItem        formListItem;

        formListColumn = new FormListColumn("", 1);
        controlTables.addColumn(1, formListColumn);

        formListColumn.width(controlTables.widthValue() - #FormWidthDiff);
        controlTables.setColumn(0, formListColumn);

        formListItem = controlTables.getItem(choice);
        if (formListItem)
        {
            formListItem.stateFocus(true);
            formListItem.stateSelected(true);
            controlTables.setItem(formListItem);
        }
        controlTables.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
        int task(int p1)
    {
        int ret;

        ret = super(p1);

        switch (p1)
        {
            case 288 :  element.closeForm();
                        break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ControlTables</Name>
				<Type>ListView</Type>
				<Methods>
					<Method>
						<Name>activateItem</Name>
						<Source><![CDATA[
                void activateItem(int idx)
        {
            super(idx);

            if (afterRun)
                element.closeForm();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
                void selectionChanged(int idx, anytype Data)
        {
            super(idx, Data);

            choice = idx;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS11584</Caption>
		<Frame xmlns="">None</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormListViewControl">
				<Name>ControlTables</Name>
				<AlignControl>Yes</AlignControl>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ListView</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Border>None</Border>
				<ColumnHeader>No</ColumnHeader>
				<ItemAlign>Left</ItemAlign>
				<OneClickActivate>Yes</OneClickActivate>
				<ShowSelAlways>No</ShowSelAlways>
				<TwoClickActivate>Yes</TwoClickActivate>
				<ViewType>Report</ViewType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>