<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenseSplit</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenseSplit extends FormRun
{
    TrvExpenseSplitVisibilityManager        trvExpenseSplitVisibilityManager;
    TrvExpTrans                             splitHeaderExpense;
    TrvCostTypeEDT                          splitHeaderCostType;
    HcmWorkerRecId                          creatingWorkerRecId;
    DataAreaId                              splitHeaderDataAreaId;
    TrvTransactionCurrencyAmount            expenseLineTotalAmount;
    TrvTransactionCurrencyAmount            expenseLineRemainingAmount;
    Query									expenseSplitQuery;
    boolean									autoInsertAfterPersonalLine = false;
    const str                               percentAmountViewKey = 'TrvExpenseSplitPercentAmount';

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the dataset based on the calling table.
    /// </summary>
    public void init()
    {
        Args args = element.args();
        if (args && args.record() && args.dataset() == tableNum(TrvExpTrans))
        {
            splitHeaderExpense = element.args().record();
        }

        super();

        if (splitHeaderExpense && splitHeaderExpense.isCreditCardTransaction() && splitHeaderExpense.ApprovalStatus == TrvAppStatus::Create)
        {
            this.design().caption(strFmt("@Expense:SplitExpenseCaption", splitHeaderExpense.CostType));
            
            splitHeaderCostType = splitHeaderExpense.CostType;
            expenseLineTotalAmount = splitHeaderExpense.CreditCardTransactionCurrencyAmount;
            splitHeaderDataAreaId = splitHeaderExpense.ReferenceDataAreaId;
            creatingWorkerRecId = splitHeaderExpense.CreatingWorker;

            // Create an originating split line matching the original expense to drive the user experience better.
            if (!TrvExpTransSplit::splitLinesExistForAnExpense(splitHeaderExpense.RecId))
            {
                TrvExpTransSplit::createSplitHeaderOriginatingLine(splitHeaderExpense);
            }
            
            expenseLineRemainingAmount = TrvExpTransSplit::remainingExpenseAmount(splitHeaderExpense.RecId, expenseLineTotalAmount);
            this.remainingExpenseLineAmount(expenseLineRemainingAmount);
        }
		else
        {
            throw error ("@SYS22996");
        }

        // Init visibility controller for expense fields.
        trvExpenseSplitVisibilityManager = new TrvExpenseSplitVisibilityManager(splitHeaderExpense, this, TrvExpTransSplit_DS.name());
        trvExpenseSplitVisibilityManager.setFieldVisibilities();

        this.initSplitByPercentAmountSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByAmountSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display settings for split amount and allocation factor when split by is based on amount.
    /// </summary>
    private void splitByAmountSettings()
    {
        ExpenseSplit_SplitAllocationFactor.visible(false);
        ExpenseSplit_SplitAmount.allowEdit(true);
        
        element.configurationHelper().saveConfigurationValue(percentAmountViewKey, enum2Str(PercentAmount::Amount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByPercentSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display settings for split amount and allocation factor when split by is based on percent.
    /// </summary>
    private void splitByPercentSettings()
    {
        ExpenseSplit_SplitAllocationFactor.visible(true);
        ExpenseSplit_SplitAmount.allowEdit(false);

        element.configurationHelper().saveConfigurationValue(percentAmountViewKey, enum2Str(PercentAmount::Percent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectFieldSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Project fields display settings based on category and legal entity.
    /// </summary>
    private void projectFieldSettings()
    {
        boolean enableProjectFields = splitHeaderDataAreaId != trvExpTransSplit.InterCompanyLE || trvExpTransSplit.isCategoryIntegratedWithProject();

        ExpenseSplit_ProjId.allowEdit(enableProjectFields);
        ExpenseSplit_ProjActivityNumber.allowEdit(enableProjectFields);
        ExpenseSplit_ProjStatusId.allowEdit(enableProjectFields);
        ExpenseSplit_ProjStatusId.mandatory(trvExpTransSplit.ProjId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalExpenseLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets total expense amount that is available for split.
    /// </summary>
    /// <param name = "_totalExpenseLineAmount">Total expense amount</param>
    /// <returns>
	/// Total expense amount available for split.
	/// </returns>
    private TrvTransactionCurrencyAmount totalExpenseLineAmount(TrvTransactionCurrencyAmount _totalExpenseLineAmount)
    {
        TotalExpenseAmount.realValue(_totalExpenseLineAmount);

        return TotalExpenseAmount.realValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expense currency code.
    /// </summary>
    /// <param name = "_expenseCurrencyCode">
	/// Currency code of the expense.
	/// </param>
    /// <returns>
	/// Expense currency code.
	/// </returns>
    private TrvCurrencyCode expenseCurrencyCode(TrvCurrencyCode _expenseCurrencyCode = '')
    {
        if (_expenseCurrencyCode != '')
        {
            ExpenseCurrency.text(_expenseCurrencyCode);
        }

        return ExpenseCurrency.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingExpenseLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Amount available for split.
    /// </summary>
    /// <param name = "_remainingExpenseLineAmount">
	/// Remaining expense line amount.
	/// </param>
    /// <returns>
	/// Expense amount that is available for split.
	/// </returns>
    private TrvTransactionCurrencyAmount remainingExpenseLineAmount(TrvTransactionCurrencyAmount _remainingExpenseLineAmount)
    {
        RemainingSplitAmount.realValue(_remainingExpenseLineAmount);
        RemainingSplitPercentage.realValue((_remainingExpenseLineAmount / expenseLineTotalAmount) * 100);

        return RemainingSplitAmount.realValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitByPercentAmountSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form to show the percent or amount based fields.
    /// </summary>
    private void initSplitByPercentAmountSettings()
    {
        str splitByDetails = element.configurationHelper().getConfigurationValue(percentAmountViewKey);

        switch(splitByDetails)
        {
            case enum2Str(PercentAmount::Amount):
                ExpenseSplitBy.selection(PercentAmount::Amount);
                this.splitByAmountSettings();
                break;

            case enum2Str(PercentAmount::Percent):
                ExpenseSplitBy.selection(PercentAmount::Percent);
                this.splitByPercentSettings();
                break;

            default:
                ExpenseSplitBy.selection(PercentAmount::Amount);
                this.splitByAmountSettings();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDetailsJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant form to view more details of the record.
    /// </summary>
    /// <param name = "menuItem">
    /// The menu item that opens the form for more details.
    /// </param>
    /// <param name = "record">
    /// The record to view details.
    /// </param>
    private void viewDetailsJumpRef(str menuItem, Common record)
    {
        MenuFunction    menuFunction    = new MenuFunction(menuItem, MenuItemType::Display);
        Args            args            = new Args();
        FormRun         formRun;

        args.lookupRecord(record);
        args.caller(element);
        
        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumedSplitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the split amount that has been consumed so far.
    /// </summary>
    /// <returns>
	/// Consumed split amount.
	/// </returns>
    private TrvTransactionCurrencyAmount getConsumedSplitAmount()
    {
		if (!expenseSplitQuery)
        {
            // Copy the query
            expenseSplitQuery = new Query(TrvExpTransSplit_ds.queryRun().query());
 
            QueryBuildDataSource qbds = expenseSplitQuery.dataSourceTable(tableNum(TrvExpTransSplit));
 
            // Sum split amount
            qbds.addSelectionField(fieldNum(TrvExpTransSplit, SplitAmount), SelectionField::Sum);
        }
 
        QueryRun qr = new QueryRun(expenseSplitQuery);
       
        // Run the query
        qr.next();
 
        // Get the data
        TrvExpTransSplit consumedSplit = qr.get(tableNum(TrvExpTransSplit));
        
        return consumedSplit.SplitAmount;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TrvExpTransSplit</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the split header recid and legal entity values from the split header.
        /// </summary>
        public void initValue()
        {
            TrvExpTransSplit.initFromSplitHeader(splitHeaderExpense);
            
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the split datasource data with the ones relevant to the split header.
        /// </summary>
        public void executeQuery()
        {
            QueryBuildRange recIdRange;

            this.query().dataSourceName(tableStr(TrvExpTransSplit)).clearDynalinks();
            recIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTransSplit)), fieldnum(TrvExpTransSplit, SplitHeaderRecId));
            recIdRange.value(queryValue(splitHeaderExpense.RecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update remaining split amount and project fields settings.
        /// </summary>
        /// <returns>
		/// True when in case of no errors; otherwise, false.
		/// </returns>
        public int active()
        {
            int ret;
        
			ret = super();
        
            expenseLineRemainingAmount = expenseLineTotalAmount - element.getConsumedSplitAmount();
            element.remainingExpenseLineAmount(expenseLineRemainingAmount);
            ExpenseSplit_CostType.allowEdit(TrvExpTransSplit.IsOriginatingLine == NoYes::No);
            element.projectFieldSettings();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateLineAndOriginatingLineAmount</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the current line and also the originating line amount.
        /// </summary>
        public void updateLineAndOriginatingLineAmount()
        {
            TrvExpTransSplit    splitOriginatingLine;

            if (trvExpTransSplit.CostType != '' && trvExpTransSplit.SplitAmount != 0 && trvExpTransSplit.SplitAllocationFactor != 0)
            {
                ttsbegin;
                trvExpTransSplit_ds.write();
                 
                //
                // After updating current line get the amount for originating line based on this calculation.
                // Total amount available for split minus consumed split amount excluding the originating line.
                // Now update this amount to the originating line.
                //

                splitOriginatingLine = TrvExpTransSplit::splitHeaderOriginatingLineExists(splitHeaderExpense.RecId);

                if (splitOriginatingLine)
                {
                    TrvTransactionCurrencyAmount amountForOriginatingLine = expenseLineTotalAmount - (element.getConsumedSplitAmount() - splitOriginatingLine.SplitAmount);

                    if ((expenseLineTotalAmount > 0 && amountForOriginatingLine < 0)
                        || (expenseLineTotalAmount < 0 && amountForOriginatingLine > 0))
                    {
                        throw error("@Expense:IncorrectSplit");
                    }
                    splitOriginatingLine.selectForUpdate(true);
                    splitOriginatingLine.SplitAmount = amountForOriginatingLine;
                    splitOriginatingLine.SplitAllocationFactor = abs ((amountForOriginatingLine / expenseLineTotalAmount) * 100);

                    splitOriginatingLine.write();
                    trvExpTransSplit_ds.research(true);
                }

                TrvTransactionCurrencyAmount remainingAmountForSplit = expenseLineTotalAmount - element.getConsumedSplitAmount();
                element.remainingExpenseLineAmount(remainingAmountForSplit);

                ttscommit;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update remaining expense line amount after deleting a split line.
        /// </summary>
        public void delete()
        {
            super();
            
            expenseLineRemainingAmount = expenseLineTotalAmount - element.getConsumedSplitAmount();
            element.remainingExpenseLineAmount(expenseLineRemainingAmount);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validations before saving a split line.
        /// </summary>
        /// <returns>
        /// True when in case of no errors; otherwise, false.
		/// </returns>
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = super();
            
            ret = ret && TrvExpTransSplit.validateAmountSign(expenseLineTotalAmount);
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CostType</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// List of categories.
            /// </summary>
            /// <param name = "_formControl">
			/// Control performing the lookup.
			/// </param>
            /// <param name = "_filterStr">
			/// The filter string.
			/// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::CreditCardExpense);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update project field settings and create a filler line if necessary.
            /// </summary>
            public void modified()
            {
                super();

                element.projectFieldSettings();
                
                TrvExpTransSplit_ds.updateLineAndOriginatingLineAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InterCompanyLE</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update project field settings and create a filler line if necessary.
            /// </summary>
            public void modified()
            {
                super();
                
                ExpenseSplit_ProjStatusId.mandatory(TrvExpTransSplit.ProjId != '');
                
                element.projectFieldSettings();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// List of legal entities.
            /// </summary>
            /// <param name = "_formControl">
			/// Control performing the lookup.
			/// </param>
            /// <param name = "_filterStr">
			/// The filter string.
			/// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseLookupHelper::createInterCompanyLegalEntityLookup(_formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project line property in the specific legal entity.
            /// </summary>
            /// <param name = "_formControl">
			/// The control performing the lookup.
			/// </param>
            /// <param name = "_filterStr">
			/// The filter string.
			/// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany(trvExpTransSplit.legalEntityName())
                {
                    HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(trvExpTransSplit.ProjId));
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project line property form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(trvExpTransSplit.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(ProjLineProperty), ProjLineProperty::find(trvExpTransSplit.ProjStatusId));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project id, restricting the query to currently running projects.
            /// </summary>
            /// <param name = "_formControl">
			/// The control performing the lookup.
			/// </param>
            /// <param name = "_filterStr">
			/// The filter string.
			/// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLookup(splitHeaderExpense.CreatingWorker, _formControl, 
                    trvExpTransSplit.CostType, trvExpTransSplit.legalEntityName(), splitHeaderExpense.LegalEntity);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sets the 'visible' and 'mandatory' property of Inter company project category field.
            /// </summary>
            public void modified()
            {
                super();

                ExpenseSplit_ProjStatusId.mandatory(trvExpTransSplit.ProjId != '');
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project details form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                MenuFunction    menuFunction    = new MenuFunction(menuItemDisplayStr(ProjTable), MenuItemType::Display);
                Args            args            = new Args();
                FormRun         formRun;
                ProjTable       projTable;

                // Change company to the legal entity of the expense.
                changecompany(trvExpTransSplit.legalEntityName())
                {
                    projTable = ProjTable::find(trvExpTransSplit.ProjId);
                    args.lookupRecord(projTable);
                    
                    formRun = menuFunction.create(args);
                    formRun.run();
                    formRun.wait();
                }

            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjStatusId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project line property in the specific legal entity.
            /// </summary>
            /// <param name = "_formControl">
			/// The control performing the lookup.
			/// </param>
            /// <param name = "_filterStr">
			/// The filter string.
			/// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLinePropertyLookup(_formControl, trvExpTransSplit.legalEntityName());
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project line property form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(trvExpTransSplit.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(ProjLineProperty), ProjLineProperty::find(trvExpTransSplit.ProjStatusId));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SplitAllocationFactor</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update split amount and create a filler split line if necessary.
            /// </summary>
            public void modified()
            {
                super();
                trvExpTransSplit.SplitAmount = (trvExpTransSplit.SplitAllocationFactor * expenseLineTotalAmount) / 100;

                TrvExpTransSplit_ds.updateLineAndOriginatingLineAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SplitAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update split allocation factor and create a filler split line if necessary.
            /// </summary>
            public void modified()
            {
                super();
                trvExpTransSplit.SplitAllocationFactor = abs ((trvExpTransSplit.SplitAmount / expenseLineTotalAmount) * 100);

                TrvExpTransSplit_ds.updateLineAndOriginatingLineAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvExpTrans</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the datasource with the split header expense recid.
        /// </summary>
        public void executeQuery()
        {
            QueryBuildRange recIdRange;

            this.query().dataSourceName(tableStr(TrvExpTrans)).clearDynalinks();
            recIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, RecId));
            recIdRange.value(queryValue(splitHeaderExpense.RecId));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ExpenseSplitBy</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the amount and percent visibility based on the split by selection.
        /// </summary>
        /// <returns>
		/// True if there are no errors; otherwise, false.
		/// </returns>
        public int selectionChange()
        {
            int ret;
    
            ret = super();

            switch (ExpenseSplitBy.selection())
            {
                case PercentAmount::Amount :
                    element.splitByAmountSettings();
                    break;

                case PercentAmount::Percent :
                    element.splitByPercentSettings();
                    break;

                default:
                    element.splitByAmountSettings();
                    break;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OkButtonControl</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Create or update split lines in the expense lines (TrvExpTrans) table.
        /// </summary>
        public void clicked()
        {
            TrvTransactionCurrencyAmount consumedSplitAmount = element.getConsumedSplitAmount();

            if (expenseLineTotalAmount != consumedSplitAmount)
            {
                TrvTransactionCurrencyAmount remainingExpenseSplitAmount = expenseLineTotalAmount - consumedSplitAmount;
                element.remainingExpenseLineAmount(remainingExpenseSplitAmount);

                throw error(strFmt("@Expense:SplitIncomplete", remainingExpenseSplitAmount, strFmt("%1%", RemainingSplitPercentage.realValue())));
            }
            else if (!TrvExpTransSplit::splitLineExistsMatchingHeaderCostType(splitHeaderCostType, splitHeaderExpense.RecId))
            {
                throw error("@Expense:SplitCostTypeMatch");
            }
            else if (!TrvExpTransSplitHelper::allSplitLineAllocated(splitHeaderExpense.RecId))
            {
                throw error("@Expense:SplitLineNoAllocationException");
            }
            else
            {
                TrvExpTransSplitHelper::createOrUpdateSplitLines(splitHeaderExpense.RecId);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTransSplit</Name>
			<Table>TrvExpTransSplit</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOriginatingLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitAllocationFactor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitHeaderRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTrans</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Expense:SplitExpenseTitle</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ExpenseLineDetailsSection</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ExpenseSplitBy</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>PercentAmount</EnumType>
						<Label>@Expense:SplitExpenseBy</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SplitHeaderExpNumber</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ExpNumber</DataField>
						<DataSource>TrvExpTrans</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>SplitDetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SplitDetailsTabPage</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>SplitExpenseGridActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>SplitExpenseGridButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>SplitAddButton</Name>
												<HelpText>@Expense:SplitAddButton</HelpText>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
												<Text>@SYS2055</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>SplitRemoveButton</Name>
												<HelpText>@Expense:SplitRemoveButton</HelpText>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ExpenseSplitGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExpenseSplit_SplitAllocationFactor</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SplitAllocationFactor</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
										<NoOfDecimals>2</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExpenseSplit_SplitAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SplitAmount</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpenseSplit_CostType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostType</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpenseSplit_InterCompanyLE</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>InterCompanyLE</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpenseSplit_ProjId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpenseSplit_ProjActivityNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjActivityNumber</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExpenseSplit_ProjStatusId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjStatusId</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ExpenseSplit_IsOriginatingLine</Name>
										<Enabled>No</Enabled>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>IsOriginatingLine</DataField>
										<DataSource>TrvExpTransSplit</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TrvExpTransSplit</DataSource>
								<Style>Tabular</Style>
							</AxFormControl>
						</Controls>
						<Caption>Expense split details</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ExpenseSplitTotals</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalExpenseAmount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreditCardTransactionCurrencyAmount</DataField>
						<DataSource>TrvExpTrans</DataSource>
						<Label>@Expense:SplitAvailableAmount</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ExpenseCurrency</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreditCardTransactionCurrency</DataField>
						<DataSource>TrvExpTrans</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>RemainingSplitAmount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>TrvTransactionCurrencyAmount</ExtendedDataType>
						<Label>@Expense:RemainingSplitAmount</Label>
						<ShowZero>Yes</ShowZero>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>RemainingSplitPercentage</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>AllocationFactor</ExtendedDataType>
						<Label>@Expense:SplitRemainingPercentage</Label>
						<NoOfDecimals>2</NoOfDecimals>
						<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Caption>@SYS8311</Caption>
				<Style>DialogContent</Style>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>SplitExpenseButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButtonControl</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<Text>@SYS10133</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButtonControl</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS301990</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>