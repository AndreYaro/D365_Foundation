<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRCustPaymTable</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class MCRCustPaymTable extends FormRun
{
    // manages a list of payments
    MCRCustPaymTotals           mcrCustPaymTotals;

    boolean                     formAllowEdit;
    SalesTable                  salesTable;

    // save off the table ID.
    TableID                     mcrContinuityCustHeaderID;

    boolean                     payDown;

    MCRSalesOrderTotals         mcrSalesOrderTotals;

    Map                          externalGiftCardMap = new Map(Types::Int64, Types::Class);

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.args().record().TableId == tableNum(SalesTable))
            {
                salesTable = element.args().record();

                if (payDown)
                {
                    // If pay down need to write the cust trans open
                    // for the pay down - this is the only way to settle and
                    // cancel the payments - if paying down on an invoiced order
                    ret = mcrCustPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays,
                                                            false,
                                                            true,
                                                            0);

                    if (!ret)
                    {
                        MCRCustPaymTable_ds.executeQuery();
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Args args = this.args();

        super();

        payDown = false;

        // Construct a payment totals instance, which is used to perform operations
        //  on a set of payments.
        if (args.record())
        {
            // The payment totals instance will operate on
            // payments associated with the record passed as an argument.
            mcrCustPaymTotals = MCRCustPaymTotals::construct(args.record().TableID, args.record().RecId);

            // if the return summary form was called from MCRReturnInquiry form,
            // then set the formAllow edit to false.
            if (args.parm() == 'InquiryOnly')
            {
                formAllowEdit = false;
            }
            else if (args.parm() == 'InstallmentPayDown')
            {
                formAllowEdit = true;
                payDown = true;
            }
            else
            {
                formAllowEdit = mcrCustPaymTotals.allowEdit();
            }

            if (args.dataset() == tableNum(SalesTable))
            {
                salesTable = args.record();
                MCRCustPaymInstallment.enabled(salesTable.mcrIsCallCenter());
                mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);

                // Retrieve payments records that match either the Cust or Invoice account on the sales order.
                MCRCustPaymTable_DS.query(MCRCustPaymTable::getPaymentsQueryUsingCustAccountOnSalesOrder(salesTable));
            }
            else if (element.args().record().TableId == tableNum(MCRContinuityCustHeader))
            {
                // Save off the table ID.
                MCRContinuityCustHeaderID = tableNum(MCRContinuityCustHeader);
            }
        }

        MCRCustPaymTable_DS.allowEdit(false);
        MCRCustPaymTable_DS.allowCreate(formAllowEdit);

        // this form requires a payment totals object object to function properly
        if (!mcrCustPaymTotals)
        {
            throw error(strfmt("@MCR10663", element.name()) + "  " + "@MCR10664");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays this form.
    /// </summary>
    public void run()
    {
        super();

        // If the sales total has changed, then payment amounts may need to be
        //  updated.  Update the payment records prior to executing the query.
        if (MCRCustPaymTable)
        {
            MCRCustPaymTable.recalculateAmounts();
        }

        // calculate and update "totals" fields
        element.updateTotalsControls();

        // calculate and update customer credit limit fields
        element.updateCreditLimitControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditLimitControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and displays the customer credit limit.
    /// </summary>
    public void updateCreditLimitControls()
    {
        CustTable custTable = CustTable::find(mcrCustPaymTotals.getInvoiceAccount());

        if (custTable
            && (custTable.creditMax
            || custTable.mandatoryCreditLimit))
        {
            CustCreditLimit_NoLimit.visible(false);

            CustCreditLimit.visible(true);
            CustCreditLimitCurrency.visible(true);

            CustCreditLimit.realValue(custTable.CreditMax);

            // credit limits are stored in the company default currency
            CustCreditLimitCurrency.text(Ledger::accountingCurrency(CompanyInfo::current()));
        }
        else    // no limit
        {
            CustCreditLimit_NoLimit.visible(true);

            CustCreditLimit.visible(false);
            CustCreditLimitCurrency.visible(false);

            CustCreditLimit_NoLimit.text("@MCR11201");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymTypeControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates properties of form controls based upon the payment type of the
    ///     active payment.
    /// </summary>
    public void updatePaymTypeControls()
    {
        // hide/disable controls
        CreditCardGroup.visible(false);
        CheckGroup.visible(false);
        GiftCardGroup.visible(false);
        OnAccountGroup.visible(false);
        NSFCancel.enabled(false);
        LoyaltyCardGroup.visible(false);

        if (mcrCustPaymTable && mcrCustPaymTable.isExternalGiftCardPayment())
        {
            EditBtn.enabled(!(mcrCustPaymTable.IsPrepay && mcrCustPaymTable.Status == MCRCustPaymStatus::Paid));
        }

        // show/enable controls for the payment type
        switch (mcrCustPaymTable.CustPaymType)
        {
            case MCRCustPaymType::CreditCard:

                CreditCardGroup.visible(true);

                break;

            case MCRCustPaymType::Check:

                CheckGroup.visible(true);

                if (mcrCustPaymTable.PostedAmount != 0 && mcrCustPaymTable.Amount != 0)
                {
                    NSFCancel.enabled(true);
                }

                break;

            // The gift cert group to be visible for gift cards as well.
            case MCRCustPaymType::GiftCard:

                GiftCardGroup.visible(true);

                break;

            case MCRCustPaymType::LoyaltyCard:

                LoyaltyCardGroup.visible(true);

                break;

            case MCRCustPaymType::OnAccount:

                OnAccountGroup.visible(true);
                break;
        }

        // "skip" percentage amount field if not editable
        PaymGrid_PercentAmount.skip(
            !mcrCustPaymTable_ds.object(PaymGrid_PercentAmount.dataField()).allowEdit()
            && formAllowEdit);

        // For continuity orders, multiple payments are not allowed
        // So if the payment screen is being invoked from continuity, disallow
        // addition of multiple payments if a payment already exists.
        if (mcrContinuityCustHeaderID)
        {
            if (MCRCustPaymTable::findByRefRecIDRefTableID(this.args().record().RecId,
                                                            this.args().record().TableId, false))
            {
                // Record exists
                mcrCustPaymTable_ds.allowCreate(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalsControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and displays totals (sales total, payment total, balance,
    ///     and currency).
    /// </summary>
    public void updateTotalsControls()
    {
        AmountCur  currentOrderSalesTotal = mcrCustPaymTotals.getTotalSalesAmount();
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        if (salesTable
            && MCRInstallmentPlanSalesTable::installmentEnabled())
        {
            mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
            SalesTotal_InstBilling.realValue(mcrSalesOrderTotals.getInstallmentEligibleTotal());
            SalesTotal_PayNow.realValue(currentOrderSalesTotal - SalesTotal_InstBilling.realValue());
            PaymentTotal.realValue(mcrCustPaymTotals.getTotalPaymAmount(false)
                                                + mcrInstallmentPlanSalesTable.sumTotalAmount(salesTable));
        }
        else
        {
            PaymentTotal.realValue(mcrCustPaymTotals.getTotalPaymAmount(false));
        }

        SalesTotal.realValue(currentOrderSalesTotal);
        Balance.realValue(SalesTotal.realValue() - PaymentTotal.realValue());

        Currency.text(mcrCustPaymTotals.getCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrModify</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the SalesTable.mcrModify() method from MCRCustPaymTable form.
    /// This method will revert the Order status to force it to be completed again.
    /// </summary>
    private void mcrModify()
    {
        FormRun callerForm = element.args().caller();

        if (callerForm)
        {
            if (callerForm.name() == formStr(SalesTable))
            {
                callerForm.doRefresh();
                callerForm.mcrModify();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Store the external gift card in the memory map.
    /// </summary>
    /// <param name = "_externalGiftCard">The retail external gift card that is to be added to the memory map.</param>
    [Hookable(false)]
    public void setExternalGiftCard(RetailExternalGiftCard _externalGiftCard)
    {
        externalGiftCardMap.insert(_externalGiftCard.RetailExternalGiftCardRecId, _externalGiftCard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the external gift card from the memory map.
    /// </summary>
    /// <param name = "_recId">The Retail external gift card RecId.</param>
    /// <returns>The external gift card.</returns>
    [Hookable(false)]
    public RetailExternalGiftCard getExternalGiftCard(int64 _recId)
    {
        RetailExternalGiftCard retailExternalGiftCard = null;

        if (externalGiftCardMap.exists(_recId))
        {
            retailExternalGiftCard = externalGiftCardMap.lookup(_recId);
        }
        return retailExternalGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetAllExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get map of all external gift cards stored in memory.
    /// </summary>
    /// <returns>Map of external gift cards/</returns>
    [Hookable(false)]
    public Map mcrGetAllExternalGiftCard()
    {
        return externalGiftCardMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExternalGiftCard</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void removeExternalGiftCard(Int64 _recId)
    {
        if (externalGiftCardMap.exists(_recId))
        {
            externalGiftCardMap.remove(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingBalance</Name>
				<Source><![CDATA[
    private real getRemainingBalance()
    {
        return Balance.realValue();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>MCRCustPaymTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            MCRCustPaymTable_ds.cacheAddMethod(tableMethodStr(MCRCustPaymTable, editCreditCard), false);
            MCRCustPaymTable_ds.cacheAddMethod(tableMethodStr(MCRCustPaymTable, displayName), false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            // Set the currency code on the mcrCustPaymTable
            mcrCustPaymTable.CurrencyCode = mcrCustPaymTotals.getCurrency();

            super(_append);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            if (MCRCustPaymTable)
            {
                MCRCustPaymTable.recalculateAmounts();
                MCRCustPaymTable_ds.research(true);
            }

            element.updatePaymTypeControls();
            element.updateTotalsControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean             ret;
            CreditCardAuthTrans creditCardAuthTrans;
            SalesId             salesId;
            boolean             voidSucceeded;
            DialogButton        dialogResult;

            if (!formAllowEdit)
            {
                ret = false;
                error("@MCR30299");
            }
            else
            {
                ret = mcrCustPaymTable.isCancelPaymAllowed(true);

                if (ret && mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted)
                {
                    SalesTable salesTableRecord = SalesTable::findRecId(mcrCustPaymTable.RefRecId);

                    DialogButton res =  McrCustPaymHelper::askToContinueIfPickedOrPackedLinesButNotInvoiced(salesTableRecord);
        
                    if (res != DialogButton::Yes)
                    {
                        ret = false;
                    }
                }

                //If the payment record has already been authorized,
                //the payment needs to be voided before being deleted.
                if (ret
                    && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard
                    && mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized)
                {
                    salesId = mcrCustPaymTable.salesTable().SalesId;
                    CreditCardAuthTrans::updateExpiredApproval(salesId);

                    select creditCardAuthTrans
                        where creditCardAuthTrans.MCRPaymRecId == mcrCustPaymTable.RecId
                        && creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize
                        && !creditCardAuthTrans.ApprovalExpired
                        && !creditCardAuthTrans.ApprovalVoid
                        && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;
                    if(creditCardAuthTrans.RecId != 0)
                    {
                        voidSucceeded = CreditCardProcess::doVoidAuth(creditCardAuthTrans, false);
                        if (!voidSucceeded)
                        {
                            dialogResult = Box::yesNo("@MCR4410739", //The voiding of the credit card payment failed.  Do you still want to delete the payment?
                            DialogButton::Yes,
                            "@MCR4410740");
                            if (dialogResult == DialogButton::No)
                            {
                                ret = false;
                            }
                        }
                    }
                }
                else if (ret && mcrCustPaymTable.isExternalGiftCardPayment()
                    && mcrCustPaymTable.Status == MCRCustPaymStatus::Paid)
                {

                    // External gift card does not support refund offset with new gift card (system generated)
                    warning(strFmt('@Retail:RefundCannotBeAppliedExternalGiftCard', mcrCustPaymTable.CurrencyCode, mcrCustPaymTable.Amount));
                    MCRSalesLine::addExternalGiftCardItem(mcrCustPaymTable);
                    ret = false;

                    FormRun callerForm = element.args().caller();

                    if (callerForm)
                    {
                        if (callerForm.name() == formStr(SalesTable))
                        {
                            callerForm.doRefresh();
                        }
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Allows or disallows editing of fields based upon the state of the
        ///     active record.
        /// </summary>
        /// <returns>
        ///     The integer passed back from the super.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();

            // allow/disallow editing of fields for the current record
            mcrCustPaymTable.setAllowEditInDataSource();

            // update properties of controls based upon the payment type
            element.updatePaymTypeControls();

            MCRCustPaymTable_ds.allowDelete(formAllowEdit
                                            && (mcrCustPaymTable.PostedAmount ? false : true));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Re-selects the previously active record after re-executing the query.
        /// </summary>
        public void executeQuery()
        {
            boolean allowEdit;
            Args args = element.args();

            if (args.callerName() == formStr(SalesTable))
            {
                salesTable = args.record();

                if (salesTable)
                {
                    this.queryBuildDataSource().findRange(fieldNum(MCRCustPaymTable, RefTableId)).value(SysQuery::value(salesTable.TableId));
                    this.queryBuildDataSource().findRange(fieldNum(MCRCustPaymTable, RefRecId)).value(SysQuery::value(salesTable.RecId));
                    this.queryBuildDataSource().findRange(fieldNum(MCRCustPaymTable, CustAccount)).value(SysQuery::value(salesTable.InvoiceAccount));
                }
            }

            super();

            // Reconstruct the cust paym totals to ensure that the totals are being
            // pulled in from the active sales order record
            mcrCustPaymTotals = MCRCustPaymTotals::construct(args.record().TableID, args.record().RecId);

            // allow/disallow editing of payments
            allowEdit = mcrCustPaymTotals.allowEdit();
            if (args.parm() != 'InstallmentPayDown')
            {
                mcrCustPaymTable_ds.allowEdit(false);
                mcrCustPaymTable_ds.allowCreate(allowEdit && formAllowEdit);
            }

            // update totals
            element.updateTotalsControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            #define.Authorize(1)
            #define.AuthHistory(2)
            #define.Void(3)
            CreditCardAuthTrans ccaTrans;

            super();

            ccaTrans = CreditCardAuthTrans::mcrFindLatest(mcrCustPaymTable.RecId);
            CreditCard.enabled(ccaTrans.RecId > 0 || (mcrCustPaymTable.isExternalGiftCardPayment()));

            // We will always hide and disable Authorization history.
            CreditCard.controlNum(#AuthHistory).visible(false);
            CreditCard.controlNum(#AuthHistory).enabled(false);

            if (MCRCustPaymTable.Status == MCRCustPaymStatus::Authorized)
            {
                // Disable the Authorize menu.
                // This prevents unnecessary re-authorizations.
                CreditCard.controlNum(#Authorize).enabled(false);

                if (RetailPaymentsDisableVoidAuthOnIncrementalCaptureToggle::instance().isEnabled())
                {
                    // If an incremental capture amount exists, then disable the Void menu.
                    // This will help the user avoid issues such as refunding the amount for a line that was already invoiced.
                    // The user could use the 'Cancel' option to issue refunds for any yet to be invoiced lines.
                    CreditCardVoidAuth.enabled(McrCustPaymHelper::isPaymentVoidAllowed(mcrCustPaymTable, salesTable));
                }
                else
                {
                    // Since the flight is disabled, continue to keep the Void menu enabled.
                    CreditCard.controlNum(#Void).enabled(true);
                }
            }
            else
            {
                // Disable Void Authorization menuitem
                CreditCard.controlNum(#Void).enabled(false);

                // Enable Authorization menuitem if status is NotSubmitted
                boolean isAuthorizeEnabled = MCRCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted ? true : false;
                CreditCard.controlNum(#Authorize).enabled(isAuthorizeEnabled);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Amount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Recalculates all payment amounts and totals.
            /// </summary>
            public void modified()
            {
                super();

                // one or more payments were updated -- refresh datasource
                mcrCustPaymTable_ds.research(true);

                element.updateTotalsControls();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CheckNumber</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Calls logic to recalculate amounts.
            /// </summary>
            /// <remarks>
            ///     If the amount was entered and no check number
            ///     was entered, validate write method in recalculateAmounts
            ///     would fail.  So submitPayments would never get set,
            ///     so the check payment would not get posted when
            ///     this form closed.
            /// </remarks>
            public void modified()
            {
                super();

                //element.recalculateAmounts();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>IsPrepay</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Refreshes the datasource.
            /// </summary>
            /// <remarks>
            ///     This field is displayed in multiple controls, and the datasource must be
            ///     refreshed to update all controls.
            /// </remarks>
            public void modified()
            {
                super();

                mcrCustPaymTable_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PercentAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Recalculates all payment amounts and totals after a payment's
            ///     percentage amount is modified.
            /// </summary>
            public void modified()
            {
                super();

                // one or more payments were updated -- refresh datasource
                mcrCustPaymTable_ds.research(true);

                element.updateTotalsControls();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AddBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays the customer payments form, to allow the user to
        ///     add a payment for the calling record.
        /// </summary>
        void clicked()
        {
            args paymentArgs;

            FormRun paymentFormRun;

            paymentArgs = new Args();
            // Pass calling record to the payment creation form
            paymentArgs.record(element.args().record());
            paymentArgs.caller(element);

            paymentFormRun = new MenuFunction(menuItemDisplayStr(MCRCustPaym), MenuItemType::Display).create(paymentArgs);

            paymentFormRun.run();
            paymentFormRun.wait();

            MCRCustPaymTable_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NSFCancel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            MCRCustPaymTable::cancelPaym(mcrCustPaymTable.RecId);

            // recalculate amounts as percentages of sales total
            MCRCustPaymTable.recalculateAmounts();

            // refresh data
            mcrCustPaymTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MCRCustPaymInstallment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            args paymentArgs;

            FormRun paymentFormRun;

            paymentArgs = new Args();
            // Pass calling args to the installment form
            paymentArgs.record(element.args().record());
            paymentArgs.parm(element.args().parm());

            paymentFormRun = new MenuFunction(menuItemDisplayStr(MCRCustPaymInstallment), MenuItemType::Display).create(paymentArgs);
            paymentFormRun.run();
            paymentFormRun.wait();

            MCRCustPaymTable.recalculateAmounts();

            // calculate and update "totals" fields
            element.updateTotalsControls();

            MCRCustPaymTable_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreditCard_M_editCreditCard</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            CreditCardCust::lookupCreditCard(this, MCRCustPaymTable.CustAccount, MCRCustPaymTable.PaymInfoRecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>MCRCustPaymTable</Name>
			<Table>MCRCustPaymTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CardTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Channel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CheckAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CheckNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CustPaymType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>isPlanRefund</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>IsPrepay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>NumAuthRetry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>OnAccountAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>OrigRefundRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymInfoRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymInfoTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymSchedID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PostedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TenderTypeId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowEdit>No</AllowEdit>
			<CounterField>LineNum</CounterField>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS10719</Caption>
		<DataSource xmlns="">MCRCustPaymTable</DataSource>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<NewRecordAction xmlns="">AddBtn</NewRecordAction>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPaneOrder</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>AddBtn</Name>
								<ElementPosition>477218588</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS2318</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>EditBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DataSource>MCRCustPaymTable</DataSource>
								<MenuItemName>MCRCustPaym</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS2475</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>DetailButtonEvent</Name>
								<ElementPosition>1670265058</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>MCRCustPaymDetail</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>MCRCustPaymDetailAuthorize</Name>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>MCRCustPaymDetailAuthorize</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>NSFCancel</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1193046470</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@MCR25409</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>CreditCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS116961</HelpText>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CreditCardPreauthorize</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>MCRCustPaymTable</DataSource>
										<MenuItemName>CreditCardPreauthorize</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<Primary>Yes</Primary>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CreditCardAuthTrans</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>MCRCustPaymTable</DataSource>
										<MenuItemName>CreditCardAuthTrans</MenuItemName>
										<Text>@SYS317472</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>CreditCardVoidAuth</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>MCRCustPaymTable</DataSource>
										<MenuItemName>CreditCardVoidAuth</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<Text>@MCR25489</Text>
									</AxFormControl>
								</Controls>
								<NeedsRecord>Yes</NeedsRecord>
								<Primary>Yes</Primary>
								<ShowShortCut>No</ShowShortCut>
								<Text>@SYS101746</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroupOrder</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>MCRCustPaymInstallment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@MCR31245</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>PaymGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>PaymGrid</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Skip>Yes</Skip>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PaymGrid_TenderTypeId</Name>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>TenderTypeId</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PaymGrid_M_displayName</Name>
						<AllowEdit>No</AllowEdit>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayName</DataMethod>
						<DataSource>MCRCustPaymTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PaymGrid_PercentAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PercentAmount</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>PaymGrid_Amount</Name>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Amount</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>PaymGrid_Status</Name>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Status</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataGroup>Main</DataGroup>
				<DataSource>MCRCustPaymTable</DataSource>
				<MultiSelect>No</MultiSelect>
				<Style>Tabular</Style>
				<VisibleRows>8</VisibleRows>
				<VisibleRowsMode>Fixed</VisibleRowsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FooterGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Totals</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SalesTotal</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>536870910</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Label>@MCR10906</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PaymentTotal</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Label>@SYS24946</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Balance</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Label>@SYS53076</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Currency</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612730</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CurrencyCode</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Breakable>No</Breakable>
						<Caption>@SYS8311</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Payment</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Status</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Status</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DetailedStatus</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayDetailedStatus</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>MCRCustPaymTable_PostedAmount</Name>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>PostedAmount</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<Caption>@SYS828</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CreditCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MCRCustPaymTable_CardTypeId</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CardTypeId</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CreditCard_M_editCreditCard</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editCreditCard</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@MCR20754</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CheckGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CheckNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CheckNumber</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@MCR12176</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GiftCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCard_M_DisplayGiftCardNumMasked</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getGiftCardNumberMasked</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>GiftCard_M_DisplayAvailableBalance</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayGiftCardAvailableBalance</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<Label>@MCR11164</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>OnAccountGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustCreditLimit_NoLimit</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS1532</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CustCreditLimit</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<ExtendedDataType>AmountMST</ExtendedDataType>
								<Label>@SYS1532</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CustCreditLimitCurrency</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>CurrencyCode</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS50040</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InstallmentEligible</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048188</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SalesTotal_InstBilling</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Label>@MCR30877</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SalesTotal_PayNow</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>12</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<Label>@MCR30876</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@MCR30647</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LoyaltyCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LoyaltyCard_M_DisplayCardNumMasked</Name>
								<HelpText>@RET4542</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getLoyaltyCardNumberMasked</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@RET4337</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>