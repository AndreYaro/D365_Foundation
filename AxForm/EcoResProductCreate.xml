<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>EcoResProductCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class EcoResProductCreate extends FormRun implements RetailIProductKit, EcoResIProductCrossTableData
{
    NumberSeqStringControlHelper    numberSeqProduct;
    NumberSeqStringControlHelper    numberSeqItem;

    EcoResProduct                   createdEcoResProduct;

    SysFormEnumComboBox             productSubtypeComboBox;
    SysRecordTmpTemplate            sysRecordTmpTemplate;
    EcoResProductTemplateManager    productTemplateManager; 

    boolean                         closedOK;
    boolean                         productNumberUsed;
    boolean                         itemIdUsed;

    container                       data2Controls;
    boolean                         moreFieldsVisible;

    EcoResProductData               productData;

    CompanyId                       companyIdInit;
    Set                             allowedProductSubtypes;

    boolean                         applyingTemplate;

    // <GEERU>
    #ISOCountryRegionCodes
    // </GEERU>

    #define.CurrentVersion(1)
    #localmacro.CurrentList
            moreFieldsVisible
        #endmacro

}
]]></Source>
			</Method>
			<Method>
				<Name>applyTemplate</Name>
				<Source><![CDATA[
    protected void applyTemplate()
    {
        EcoResProductTemplateApplyManagerUtils utils;
        InventTable                            inventTable;

        if (this.productData().identification().isReleasedProduct() && sysRecordTmpTemplate.Data)
        {
            inventTable = InventTable::findByProduct(createdEcoResProduct.RecId);

            utils = EcoResProductTemplateApplyManagerUtils::newDefault();
            utils.applyTemplate(
                sysRecordTmpTemplate.Data,
                inventTable.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyingTemplate</Name>
				<Source><![CDATA[
    public boolean applyingTemplate()
    {
        return applyingTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        if (!closedOK)
        {
            if (numberSeqProduct)
            {
                numberSeqProduct.cancel();
            }
            if (numberSeqItem)
            {
                numberSeqItem.cancel();
            }
        }
        else
        {
            xSysLastValue::saveLast(this);
            if (!createdEcoResProduct)
            {
                return;
            }

            FormRun caller = this.args().caller() as FormRun;
            InventTable inventTable = InventTable::findByProduct(createdEcoResProduct.RecId);

            if (inventTable)
            {
                if (caller && caller.name() == formStr(EcoResProductDetailsExtended))
                {
                    // The form is already open, ensure it is in details view and editable
                    this.setContextOnCaller(caller, inventTable);
                    this.setCallerFormInDetailsAndEditMode(caller);
                }
                else
                {
                    element.openReleasedProductDetailsForm(inventTable);
                }
            }
            else
            {
                if (caller && caller.name() == formStr(EcoResProductDetails))
                {
                    // The form is already open, ensure it is in details view and editable
                    this.setContextOnCaller(caller, createdEcoResProduct);
                    this.setCallerFormInDetailsAndEditMode(caller);
                }
                else
                {
                    this.openProductDetailsForm();
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContextOnCaller</Name>
				<Source><![CDATA[
    private void setContextOnCaller(FormRun _caller, Common _contextRecord)
    {
        if(_caller && formHasMethod(_caller, identifierstr(setContext)))
        {
            _caller.setContext(_contextRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData2Controls</Name>
				<Source><![CDATA[
    protected void createData2Controls()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE, #isoSA]))
        {
            data2Controls = [
                       [identifierStr(Purch), [[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, PurchUnitId)],
                                 [fieldNum(InventTableModule, TaxItemGroupId), formControlStr(EcoResProductCreate, PurchTaxItemGroupId)],
                                 [fieldNum(InventTableModule, TaxWithholdCalculate_TH), formControlStr(EcoResProductCreate, Purch_TaxWithholdCalculate)],
                                 [fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH), formControlStr(EcoResProductCreate, Purch_TaxWithholdItemGroup)]]],
                       [identifierStr(Invent),[[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, InventUnitId)]]],
                       [identifierStr(Sales), [[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, SalesUnitId)],
                                 [fieldNum(InventTableModule, TaxItemGroupId), formControlStr(EcoResProductCreate, SalesTaxItemGroupId)],
                                 [fieldNum(InventTableModule, TaxWithholdCalculate_TH), formControlStr(EcoResProductCreate, Sales_TaxWithholdCalculate)],
                                 [fieldNum(InventTableModule, TaxWithholdItemGroupHeading_TH), formControlStr(EcoResProductCreate, Sales_TaxWithholdItemGroup)]]],
                       [tableStr(InventTable), [[fieldNum(InventTable, bomUnitId), formControlStr(EcoResProductCreate, BOMUnitId)]]],
                       [tableStr(EcoResStorageDimensionGroupItem), [[fieldNum(EcoResStorageDimensionGroupItem, StorageDimensionGroup), formControlStr(EcoResProductCreate, StorageDimensionGroup)]]],
                       [tableStr(EcoResTrackingDimensionGroupItem), [[fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup), formControlStr(EcoResProductCreate, TrackingDimensionGroup)]]],
                       [tableStr(InventItemGroupItem), [[fieldNum(InventItemGroupItem, ItemGroupId), formControlStr(EcoResProductCreate, ItemGroupId)]]],
                       [tableStr(InventModelGroupItem), [[fieldNum(InventModelGroupItem, ModelGroupId), formControlStr(EcoResProductCreate, ModelGroupId)]]],
                       [tableStr(InventTable), [[fieldNum(InventTable, ItemBuyerGroupId), formControlStr(EcoResProductCreate, BuyerGroupId)]]],
                       [tableStr(InventTable), [[fieldNum(InventTable, PrimaryVendorId), formControlStr(EcoResProductCreate, PrimaryVendorId)]]],
                       [identifierStr(Purch), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, PurchasePrice)]]],
                       [identifierStr(Sales), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, SalesPrice)]]],
                       [identifierStr(Invent), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, InventoryPrice)]]]
            ];
        }
        else
        {
            data2Controls = [[identifierStr(Purch), [[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, PurchUnitId)],
                             [fieldNum(InventTableModule, TaxItemGroupId), formControlStr(EcoResProductCreate, PurchTaxItemGroupId)]]],
                             [identifierStr(Invent),[[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, InventUnitId)]]],
                             [identifierStr(Sales), [[fieldNum(InventTableModule, UnitId), formControlStr(EcoResProductCreate, SalesUnitId)],
                             [fieldNum(InventTableModule, TaxItemGroupId), formControlStr(EcoResProductCreate, SalesTaxItemGroupId)]]],
                             [tableStr(InventTable), [[fieldNum(InventTable, bomUnitId), formControlStr(EcoResProductCreate, BOMUnitId)]]],
                             [tableStr(EcoResStorageDimensionGroupItem), [[fieldNum(EcoResStorageDimensionGroupItem, StorageDimensionGroup), formControlStr(EcoResProductCreate, StorageDimensionGroup)]]],
                             [tableStr(EcoResTrackingDimensionGroupItem), [[fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup), formControlStr(EcoResProductCreate, TrackingDimensionGroup)]]],
                             [tableStr(InventItemGroupItem), [[fieldNum(InventItemGroupItem, ItemGroupId), formControlStr(EcoResProductCreate, ItemGroupId)]]],
                             [tableStr(InventModelGroupItem), [[fieldNum(InventModelGroupItem, ModelGroupId), formControlStr(EcoResProductCreate, ModelGroupId)]]],
                             [tableStr(InventTable), [[fieldNum(InventTable, ItemBuyerGroupId), formControlStr(EcoResProductCreate, BuyerGroupId)]]],
                             [tableStr(InventTable), [[fieldNum(InventTable, PrimaryVendorId), formControlStr(EcoResProductCreate, PrimaryVendorId)]]],
                             [identifierStr(Purch), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, PurchasePrice)]]],
                             [identifierStr(Sales), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, SalesPrice)]]],
                             [identifierStr(Invent), [[fieldNum(InventTableModule, Price), formControlStr(EcoResProductCreate, InventoryPrice)]]]
            ];
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            data2Controls = conIns(data2Controls,
                                    conLen(data2Controls) + 1,
                                    [tableStr(WHSReservationHierarchyItem), [[fieldNum(WHSReservationHierarchyItem, ReservationHierarchy), formControlStr(EcoResProductCreate, WHSReservationHierarchy)]]],
                                    [tableStr(WHSInventTable), [[fieldNum(WHSInventTable, UOMSeqGroupId), formControlStr(EcoResProductCreate, WHSUOMSequenceGroupId)]]]);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            isConfigurationkeyEnabled(configurationKeyNum(RAsset)))
        {
            data2Controls = conIns(data2Controls,
                                   conLen(data2Controls) + 1,
                                   [tableStr(InventTable), [[fieldNum(InventTable, AssetGroupId_RU), formControlStr(EcoResProductCreate, RAssetGroupId)]]]);
        }

        data2Controls = conIns(data2Controls,
                                conLen(data2Controls) + 1,
                                [tableStr(EcoResProductDimensionGroupProduct), [[fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup), formControlStr(EcoResProductCreate, ProductDimensionGroup)]]]);
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductkit</Name>
				<Source><![CDATA[
    private void createProductkit()
    {
        FormRun     caller;
        Args        callerArgs;

        caller      = this.args().caller() as FormRun;
        callerArgs  = caller ? caller.args() : null;

        // if create new product form is opened for creating a released product then uncheck the isproductkit option, as a new kit can not be created and released without being approved.
        if (this.args().menuItemName() == menuitemDisplayStr(EcoResProductCreateRelease))
        {
            // Set the productIsRetailKit checkbox control
            this.productData().retail().parmIsRetailKit(false); // Kit checkbox is NOT selected
            productIsRetailKit.allowEdit(false);  // Kit checkbox is read-only
        }

        // if create new product form is opened from product kit context menu then set the iskitproduct checkbox.
        if (callerArgs && callerArgs.menuItemName() == menuitemDisplayStr(RetailKitListPage))
        {
            // Set the productIsRetailKit checkbox control
            this.productData().retail().parmIsRetailKit(true); // Kit checkbox IS selected
            productIsRetailKit.allowEdit(false); // Kit checkbox is read-only
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLayoutForProductSubType</Name>
				<Source><![CDATA[
    public void updateLayoutForProductSubType(EcoResProductSubtype _ecoResProductSubtype)
    {
        this.productData().identification().parmProductSubType(_ecoResProductSubtype);
        this.setMasterControlsVisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductSubtypeComboBox</Name>
				<Source><![CDATA[
    private void createProductSubtypeComboBox()
    {
        this.initAllowedProductSubTypes();

        productSubtypeComboBox = SysFormEnumComboBox::newParameters(
            this,
            element.controlId(formControlStr(EcoResProductCreate, Types_ProductSubtype)),
            enumNum(EcoResProductSubtype),
            allowedProductSubtypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableWHSReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables or disables the WHSReservationHierarchy control.
    /// </summary>
    public void enableDisableWHSReservationHierarchy()
    {
        EcoResStorageDimensionGroup  whsStorageDimensionGroup;
        boolean                      enabled;

        if (!isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            return;
        }

        enabled = this.productData().referenceGroups().parmStorageDimensionGroupRecId()  != 0
               && this.productData().referenceGroups().parmTrackingDimensionGroupRecId() != 0;

        if (enabled)
        {
            select firstonly IsWarehouseWHSEnabled from whsStorageDimensionGroup
                where whsStorageDimensionGroup.RecId == this.productData().referenceGroups().parmStorageDimensionGroupRecId();

            enabled = whsStorageDimensionGroup.IsWarehouseWHSEnabled;
        }

        whsReservationHierarchy.enabled(enabled);
        WHSUOMSequenceGroupId.enabled(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMoreFields</Name>
				<Source><![CDATA[
    private void fillMoreFields()
    {
        if (!sysRecordTmpTemplate.Data)
        {
            return;
        }
        this.templateRecords2Controls(this.templateData2TemplateRecords());
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleTemplateSelected</Name>
				<Source><![CDATA[
    public void handleTemplateSelected(SysRecordTmpTemplate _sysRecordTmpTemplate)
    {
        sysRecordTmpTemplate = _sysRecordTmpTemplate;
        this.fillMoreFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        //this is to prevent adding text based on dynalinked record to the form's caption.
        this.args().record(null);

        closedOK            = false;
        productNumberUsed   = false;
        itemIdUsed          = false;

        this.initProductData();
        this.createProductSubtypeComboBox();

        super();

        xSysLastValue::getLast(this);
        this.createData2Controls();
        this.initNumberSequences();
        this.setCaption();
        this.setPerCompanyControlsVisible();
        this.setMoreFieldsVisible();

        this.setCategoryDropdownVisible();
        this.setCategoryDropdownMandatory();
        this.setIdentificationNameMandatoryForKits();
        this.setTypes_ProductServiceTypeVisible();
        // <GEERU>
        this.setRAssetGroupIdVisible();
        // </GEERU>

        companyIdInit   = curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComboSelection</Name>
				<Source><![CDATA[
    private void setComboSelection(FormComboBoxControl _comboBox, anytype _enumValue)
    {
        _comboBox.selection(_enumValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultProductDataValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product data with the default values.
    /// </summary>
    protected void initDefaultProductDataValues()
    {
        EcoResProductCrossTableManager::defaultProductType(element);
        EcoResProductCrossTableManager::defaultProductSubType(element);
        EcoResProductCrossTableManager::defaultVariantConfigurationTechnology(element);
        EcoResProductCrossTableManager::defaultInventoryUnitSymbol(element);
        EcoResProductCrossTableManager::defaultSalesUnitSymbol(element);
        EcoResProductCrossTableManager::defaultPurchaseUnitSymbol(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSequences</Name>
				<Source><![CDATA[
    private void initNumberSequences()
    {
        this.numberSeqProduct().newNumber();
        if (this.productData().identification().isReleasedProduct())
        {
            this.numberSeqItem().newNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        moreFieldsVisible = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPdsVendorCheckFromInventModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the AVL fields on the <c>InventTable</c> record that are inherited from the model group.
    /// </summary>
    public void initPdsVendorCheckFromInventModelGroup()
    {
        InventTable item;

        ttsbegin;
        // update the AVL list
        item = InventTable::findByProduct(createdEcoResProduct.RecId, true);
        if (item.RecId)
        {
            item.initPdsVendorCheckFromInventModelGroup();
            item.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrimaryVendorProductId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init 'Primary Vendor Product Id' for standard and master product.
    /// If all dimensions are blank the 'vendor product Id' entry is added for the standard and master products hence AllBlank dimensions is a valid entry.
    /// </summary>
    private void initPrimaryVendorProductId()
    {
        if (PrimaryVendorId.text() != '' && PrimaryVendorProductId.text() != '')
        {
            CustVendExternalItem custVendExternalItem;
            custVendExternalItem.ModuleType = ModuleInventPurchSalesVendCustGroup::Vend;
            custVendExternalItem.CustVendRelation = PrimaryVendorId.text();
            custVendExternalItem.ItemId = ItemIdentification_ItemId.text();
            custVendExternalItem.ExternalItemId = PrimaryVendorProductId.text();
            custVendExternalItem.InventDimId = InventDim::inventDimIdBlank(); // AllBlank

            if (custVendExternalItem.validateWrite())
            {
                custVendExternalItem.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductData</Name>
				<Source><![CDATA[
    protected void initProductData()
    {
        productData = EcoResProductData::construct(this.getReleaseProductToCompany());

        // Subscribe
        this.productData().identification().productTypeChanged += eventhandler(this.onProductTypeChanged);
        this.productData().identification().productSubTypeChanged += eventhandler(this.onProductSubTypeChanged);
        this.productData().identification().productServiceTypeChanged += eventhandler(this.onProductServiceTypeChanged);
        this.productData().identification().productNumberChanged += eventhandler(this.onProductNumberChanged);
        this.productData().identification().productNameChanged += eventhandler(this.onProductNameChanged);
        this.productData().identification().productSearchNameChanged += eventhandler(this.onProductSearchNameChanged);
        this.productData().identification().isCatchWeightProductChanged += eventhandler(this.onIsCatchWeightProductChanged);
        this.productData().identification().companySpecificData().itemIdChanged += eventhandler(this.onItemIdChanged);
        this.productData().identification().companySpecificData().searchNameChanged += eventhandler(this.onSearchNameChanged);
        this.productData().unitsOfMeasure().inventoryUnitSymbolChanged += eventhandler(this.onInventoryUnitSymbolChanged);
        this.productData().unitsOfMeasure().purchaseUnitSymbolChanged += eventhandler(this.onPurchaseUnitSymbolChanged);
        this.productData().unitsOfMeasure().salesUnitSymbolChanged += eventhandler(this.onSalesUnitSymbolChanged);
        this.productData().unitsOfMeasure().bomUnitSymbolChanged += eventhandler(this.onBOMUnitSymbolChanged);
        this.productData().referenceGroups().itemGroupIdChanged += eventhandler(this.onItemGroupIdChanged);
        this.productData().referenceGroups().itemModelGroupIdChanged += eventhandler(this.onItemModelGroupIdChanged);
        this.productData().referenceGroups().storageDimensionGroupChanged += eventhandler(this.onStorageDimensionGroupChanged);
        this.productData().referenceGroups().trackingDimensionGroupChanged += eventhandler(this.onTrackingDimensionGroupChanged);
        this.productData().variant().configurationTechnologyChanged += eventhandler(this.onConfigurationTechnologyChanged);
        this.productData().variant().productDimensionGroupChanged += eventhandler(this.onProductDimensionGroupChanged);
        this.productData().retail().isRetailKitChanged += eventhandler(this.onIsRetailKitChanged);
        this.productData().retail().retailCategoryChanged += eventhandler(this.onRetailCategoryChanged);
        this.productData().taxation().salesTaxItemGroupIdChanged += eventhandler(this.onSalesTaxItemGroupIdChanged);
        this.productData().taxation().purchaseTaxItemGroupIdChanged += eventhandler(this.onPurchaseTaxItemGroupIdChanged);
        this.productData().referenceGroups().itemBuyerGroupIdChanged += eventhandler(this.onItemBuyerGroupIdChanged);
        this.productData().vendor().itemPrimaryVendorIdChanged += eventhandler(this.onItemPrimaryVendorIdChanged);
        this.productData().prices().purchasePriceChanged += eventhandler(this.onPurchasePriceChanged);
        this.productData().prices().salesPriceChanged += eventhandler(this.onSalesPriceChanged);
        this.productData().prices().inventoryPriceChanged += eventhandler(this.onInventoryPriceChanged);
        this.productData().referenceGroups().whsUOMSeqGroupIdChanged += eventhandler(this.onWHSUOMSequenceGroupIdChanged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReleaseProductToCompany</Name>
				<Source><![CDATA[
    protected boolean getReleaseProductToCompany()
    {
        //find out if we need to release product to a company after creation
        boolean releaseProductToCompany  = this.args()
                                && enumNum(EcoResReleaseProductToCompany) == this.args().parmEnumType()
                                && EcoResReleaseProductToCompany::Yes == this.args().parmEnum();

        return releaseProductToCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllowedProductSubTypes</Name>
				<Source><![CDATA[
    protected void initAllowedProductSubTypes()
    {
        allowedProductSubtypes = new Set(Types::Enum);

        EcoResProductListPage ecoResProductListPage = EcoResProductListPage::Products;

        FormRun caller  = this.args().caller() as FormRun;
        Args callerArgs = caller ? caller.args() : null;
        if (callerArgs && callerArgs.parmEnumType() == enumNum(EcoResProductListPage))
        {
            ecoResProductListPage = callerArgs.parmEnum();
        }

        boolean allowProductMastersOnly = ecoResProductListPage == EcoResProductListPage::ProductMasters;
        boolean allowDistinctProductsOnly = ecoResProductListPage == EcoResProductListPage::DistinctProducts;
        if (allowDistinctProductsOnly)
        {
            allowedProductSubtypes.add(EcoResProductSubtype::Product);
        }
        else if (allowProductMastersOnly)
        {
            allowedProductSubtypes.add(EcoResProductSubtype::ProductMaster);
        }
        else
        {
            allowedProductSubtypes.add(EcoResProductSubtype::Product);
            allowedProductSubtypes.add(EcoResProductSubtype::ProductMaster);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductTypeChanged(EcoResProductIdentificationData _identification, EcoResProductType _productType)
    {
        this.setComboSelection(Types_ProductType, _productType);

        if (!this.applyingTemplate())
        {
            EcoResProductCrossTableManager::defaultIsCatchWeightProduct(element);
            element.enableCWProduct();
            EcoResProductCrossTableManager::defaultProductServiceType(element);
            element.updateServiceTypeControl(_identification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductSubTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductSubTypeChanged(EcoResProductIdentificationData _identification, EcoResProductSubType _productSubType)
    {
        productSubtypeComboBox.select(_productSubType);

        if (!this.applyingTemplate())
        {
            createdEcoResProduct = EcoResProductCrossTableManager::makeProductRecord(this);
            EcoResProductCrossTableManager::defaultVariantConfigurationTechnology(this);
            this.setMasterControlsVisible();
            element.updateServiceTypeControl(_identification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductServiceTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductServiceTypeChanged(
        EcoResProductIdentificationData _identification, 
        EcoResProductServiceType _productServiceType)
    {
        if (_productServiceType == EcoResProductServiceType::Warranty
            && !EcoResProductServiceWarranty::canBeWarrantyProduct(
            element.productData().identification()))
        {
            checkFailed("@Warranty:WarrantyCreationCheckError");
        }
        else
        {
            this.setComboSelection(Types_ProductServiceType, _productServiceType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductNumberChanged</Name>
				<Source><![CDATA[
    protected void onProductNumberChanged(EcoResProductIdentificationData _identification, EcoResProductNumber _productNumber)
    {
        Identification_ProductNumber.text(_productNumber);

        if (!this.applyingTemplate())
        {
            EcoResProductCrossTableManager::defaultItemId(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductNameChanged</Name>
				<Source><![CDATA[
    protected void onProductNameChanged(EcoResProductIdentificationData _identification, EcoResProductName _productName)
    {
        Identification_Name.text(_productName);

        if (!this.applyingTemplate())
        {
            EcoResProductCrossTableManager::defaultProductSearchName(this);
            EcoResProductCrossTableManager::defaultSearchName(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductSearchNameChanged</Name>
				<Source><![CDATA[
    protected void onProductSearchNameChanged(EcoResProductIdentificationData _identification, EcoResProductSearchName _productSearchName)
    {
        Identification_SearchName.text(_productSearchName);

        if (!this.applyingTemplate())
        {
            EcoResProductCrossTableManager::defaultSearchName(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsCatchWeightProductChanged</Name>
				<Source><![CDATA[
    protected void onIsCatchWeightProductChanged(EcoResProductIdentificationData _identification, PdsCWProduct _isCatchWeightProduct)
    {
        PdsCWProduct_PdsCWProduct.checked(_isCatchWeightProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemIdChanged</Name>
				<Source><![CDATA[
    protected void onItemIdChanged(EcoResProductIdentificationData _identification, ItemId _itemId)
    {
        ItemIdentification_ItemId.text(_itemId);

        if (!this.applyingTemplate())
        {
            EcoResProductCrossTableManager::defaultProductNumber(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSearchNameChanged</Name>
				<Source><![CDATA[
    protected void onSearchNameChanged(EcoResProductIdentificationData _identification, ItemNameAlias _searchName)
    {
        ItemIdentification_NameAlias.text(_searchName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventoryUnitSymbolChanged</Name>
				<Source><![CDATA[
    protected void onInventoryUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol)
    {
        InventUnitId.text(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPurchaseUnitSymbolChanged</Name>
				<Source><![CDATA[
    protected void onPurchaseUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol)
    {
        PurchUnitId.text(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesUnitSymbolChanged</Name>
				<Source><![CDATA[
    protected void onSalesUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol)
    {
        SalesUnitId.text(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBOMUnitSymbolChanged</Name>
				<Source><![CDATA[
    protected void onBOMUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol)
    {
        BOMUnitId.text(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onItemGroupIdChanged(EcoResProductIdentificationData _identification, ItemGroupId _itemGroupId)
    {
        ItemGroupId.text(_itemGroupId);

        if (!this.applyingTemplate())
        {
            this.setTaxItemGroups();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemModelGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onItemModelGroupIdChanged(EcoResProductIdentificationData _identification, InventModelGroupId _itemModelGroupId)
    {
        ModelGroupId.text(_itemModelGroupId);

        if (!this.applyingTemplate())
        {
            this.setBomUnitId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onProductDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _productDimGroupRecId)
    {
        ProductDimensionGroup.value(_productDimGroupRecId);

        if (!this.applyingTemplate())
        {
            // only default active dimensions, this will prevent the dimension validation error while allowing setting all dimensions in Product Categories.
            // set dimensions here because 'Product Dimension Group' field's modified method will also trigger this changed event handler.
            EcoResProductDimGroupSetup ecoResProductDimGroupSetup = EcoResProductDimGroupSetup::newDimensionGroup(_productDimGroupRecId);
            boolean sizeActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventSizeId)).isActive();
            boolean colorActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventColorId)).isActive();
            boolean styleActive = ecoResProductDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventStyleId)).isActive();

            // clear dimension groups first
            element.productData().variant().clearVariantDimensions();

            if (colorActive)
            {
                EcoResProductCrossTableManager::defaultColorGroupId(this);
            }

            if (sizeActive)
            {
                EcoResProductCrossTableManager::defaultSizeGroupId(this);
            }

            if (styleActive)
            {
                EcoResProductCrossTableManager::defaultStyleGroupId(this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onStorageDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onStorageDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _storageDimGroupRecId)
    {
        StorageDimensionGroup.value(_storageDimGroupRecId);

        if (!this.applyingTemplate())
        {
            this.enableDisableWHSReservationHierarchy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTrackingDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onTrackingDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _trackingDimGroupRecId)
    {
        TrackingDimensionGroup.value(_trackingDimGroupRecId);

        if (!this.applyingTemplate())
        {
            this.enableDisableWHSReservationHierarchy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onConfigurationTechnologyChanged</Name>
				<Source><![CDATA[
    protected void onConfigurationTechnologyChanged(EcoResProductIdentificationData _identification, EcoResVariantConfigurationTechnologyType _configurationTechnology)
    {
        this.setComboSelection(VariantConfigurationTechnology, _configurationTechnology);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsRetailKitChanged</Name>
				<Source><![CDATA[
    protected void onIsRetailKitChanged(EcoResProductIdentificationData _identification, boolean _isRetailKit)
    {
        ProductisRetailKit.checked(_isRetailKit);

        if (!this.applyingTemplate())
        {
            this.setProductKitProductConfiguration();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRetailCategoryChanged</Name>
				<Source><![CDATA[
    protected void onRetailCategoryChanged(EcoResProductIdentificationData _identification, RecId _retailCategoryRecId)
    {
        CategoryReferenceGroup.value(_retailCategoryRecId);

        if (!this.applyingTemplate())
        {
            this.setCategory(EcoResCategory::find(_retailCategoryRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesTaxItemGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onSalesTaxItemGroupIdChanged(EcoResProductIdentificationData _identification, TaxItemGroup _salesTaxItemGroupId)
    {
        SalesTaxItemGroupId.text(_salesTaxItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPurchaseTaxItemGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onPurchaseTaxItemGroupIdChanged(EcoResProductIdentificationData _identification, TaxItemGroup _purchaseTaxItemGroupId)
    {
        PurchTaxItemGroupId.text(_purchaseTaxItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemBuyerGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onItemBuyerGroupIdChanged(EcoResProductIdentificationData _identification, ItemBuyerGroupId _itemBuyerGroupId)
    {
        BuyerGroupId.text(_itemBuyerGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onWHSUOMSequenceGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onWHSUOMSequenceGroupIdChanged(EcoResProductIdentificationData _identification, WHSUOMSeqGroupId _WHSUOMSequenceGroupId)
    {
        WHSUOMSequenceGroupId.text(_WHSUOMSequenceGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemPrimaryVendorIdChanged</Name>
				<Source><![CDATA[
    protected void onItemPrimaryVendorIdChanged(EcoResProductIdentificationData _identification, ItemPrimaryVendId _itemPrimaryVendorId)
    {
        PrimaryVendorId.text(_itemPrimaryVendorId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPurchasePriceChanged</Name>
				<Source><![CDATA[
    protected void onPurchasePriceChanged(EcoResProductIdentificationData _identification, Price _purchasePrice)
    {
        PurchasePrice.realValue(_purchasePrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesPriceChanged</Name>
				<Source><![CDATA[
    protected void onSalesPriceChanged(EcoResProductIdentificationData _identification, Price _salesPrice)
    {
        SalesPrice.realValue(_salesPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventoryPriceChanged</Name>
				<Source><![CDATA[
    protected void onInventoryPriceChanged(EcoResProductIdentificationData _identification, Price _inventoryPrice)
    {
        InventoryPrice.realValue(_inventoryPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    public boolean isStocked()
    {
        boolean isStocked = false;

        if (this.productData().referenceGroups().parmItemModelGroupId())
        {
            InventModelGroup inventModelGroup = InventModelGroup::find(this.productData().referenceGroups().parmItemModelGroupId());
            isStocked = inventModelGroup.isStocked();
        }

        return isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventoryUnitId</Name>
				<Source><![CDATA[
    public void lookupInventoryUnitId(FormStringControl _formStringControl)
    {
        //for inventory unit id do not show conversion tab as the inventory unit is "base" for other units
        UnitOfMeasureLookup::lookup(
            _formStringControl,
            '',
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNonInventoryUnitId</Name>
				<Source><![CDATA[
    public void lookupNonInventoryUnitId(FormStringControl _formStringControl)
    {
        //for non inventory unit show conversion tab and use inventory unit as a base for conversion
        UnitOfMeasureLookup::lookup(
            _formStringControl,
            '',
            true,
            UnitOfMeasure::unitOfMeasureIdBySymbol(this.productData().unitsOfMeasure().parmInventoryUnitSymbol()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqItem</Name>
				<Source><![CDATA[
    NumberSeqStringControlHelper numberSeqItem()
    {
        if (!numberSeqItem)
        {
            numberSeqItem = NumberSeqStringControlHelper::newStringControl(
                InventParameters::numRefItemId().NumberSequenceId,
                itemIdentification_ItemId,
                tableNum(InventTable),
                fieldNum(InventTable, ItemId));

            if (numberSeqItem.isNumberSequenceManual())
            {
                // we want to treat a manual item ID number as no number sequence
                // because we don't want item ID field to be set to blank when number sequence is manual
                // as this overrides in some scenarios the value of the field intialized from product number
                numberSeqItem.parmNumberSequenceId(0);
            }
        }

        return numberSeqItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqProduct</Name>
				<Source><![CDATA[
    NumberSeqStringControlHelper numberSeqProduct()
    {
        if (!numberSeqProduct)
        {
            numberSeqProduct = NumberSeqStringControlHelper::newStringControl(
                EcoResProductParameters::numRefProductNumber().NumberSequenceId,
                identification_ProductNumber,
                tableNum(EcoResProductIdentifier),
                fieldNum(EcoResProductIdentifier, ProductNumber));
        }
        return numberSeqProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postWrite</Name>
				<Source><![CDATA[
    private void postWrite()
    {
        this.updateCallers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTemplateManager</Name>
				<Source><![CDATA[
    private EcoResProductTemplateManager productTemplateManager()
    {
        if (!productTemplateManager)
        {
            productTemplateManager = EcoResProductTemplateManager::construct();
        }

        return productTemplateManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductToCompany</Name>
				<Source><![CDATA[
    protected void releaseProductToCompany()
    {
        if (this.productData().identification().isReleasedProduct())
        {
            EcoResProductReleaseManager::releaseProductWithLegalEntityData(
                createdEcoResProduct.RecId,
                CompanyInfo::findDataArea(curext()).RecId,
                this.productData().identification().companySpecificData().parmItemId(),
                this.productData().identification().companySpecificData().parmSearchName(),
                this.productData().taxation().parmPurchaseTaxItemGroupId(),
                this.productData().taxation().parmSalesTaxItemGroupId());

            this.numberSeqItem().write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        this.initDefaultProductDataValues();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.createProductkit();
        }
        createdEcoResProduct = EcoResProductCrossTableManager::makeProductRecord(element);
        this.setMasterControlsVisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    private anytype getEnumValue(FormComboBoxControl _comboBox)
    {
        SysDictEnum enum = new SysDictEnum(_comboBox.enumType());
        return enum.name2Value(_comboBox.getText(_comboBox.selection()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBomUnitId</Name>
				<Source><![CDATA[
    public void setBomUnitId()
    {
        boolean isStocked = element.isStocked();

        if (!isStocked)
        {
            this.productData().unitsOfMeasure().parmBOMUnitSymbol('');
        }
        else
        {
            if (!this.productData().unitsOfMeasure().parmBOMUnitSymbol())
            {
                this.productData().unitsOfMeasure().parmBOMUnitSymbol(this.productData().unitsOfMeasure().parmInventoryUnitSymbol());
            }
        }

        bomUnitId.allowEdit(isStocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerFormInDetailsAndEditMode</Name>
				<Source><![CDATA[
    private void setCallerFormInDetailsAndEditMode(FormRun caller)
    {
        caller.viewOptionHelper().setViewOption(FormViewOption::Details);
        caller.viewEditModeHelper().setViewEditMode(ViewEditMode::Edit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    private void setCaption()
    {
        this.design().caption(this.productData().identification().isReleasedProduct() ? "@SYS333127" : "@SYS333128");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategory</Name>
				<Source><![CDATA[
    public void setCategory(EcoResCategory _category)
    {
        EcoResProductCrossTableManager::defaultItemModelGroupId(this);
        EcoResProductCrossTableManager::defaultItemGroupId(this);

        EcoResProductCrossTableManager::defaultProductDimensionGroupName(this);
        EcoResProductCrossTableManager::defaultGlobalStorageDimensionGroupName(this);
        EcoResProductCrossTableManager::defaultGlobalTrackingDimensionGroupName(this);
        EcoResProductCrossTableManager::defaultStorageDimensionGroupName(this);
        EcoResProductCrossTableManager::defaultTrackingDimensionGroupName(this);

        EcoResProductCrossTableManager::defaultInventoryUnitSymbol(this);
        EcoResProductCrossTableManager::defaultPurchaseUnitSymbol(this);
        EcoResProductCrossTableManager::defaultSalesUnitSymbol(this);
        EcoResProductCrossTableManager::defaultBOMUnitSymbol(this);

        EcoResProductCrossTableManager::defaultPurchaseTaxItemGroupId(this);
        EcoResProductCrossTableManager::defaultSalesTaxItemGroupId(this);

        EcoResProductCrossTableManager::defaultBuyerGroupId(this);
        EcoResProductCrossTableManager::defaultPrimaryVendorId(this);
        EcoResProductCrossTableManager::defaultPurchasePrice(this);
        EcoResProductCrossTableManager::defaultSalesPrice(this);
        EcoResProductCrossTableManager::defaultInventoryPrice(this);

        if (this.productData().identification().isReleasedProduct())
        {
            element.enableDisableWHSReservationHierarchy();
            
            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(_category.RecId, CompanyInfo::current());
                whsReservationHierarchy.value(retailAttributesLegalEntityLookup.ReservationHierarchy);

                if (!RetailMerchandisingKillSwitch::disableAutoPopulateUnitSequenceGroupIdDefinedInCategory())
                {
                    EcoResProductCrossTableManager::defaultWHSUOMSeqGroupId(this);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryDropdownVisible</Name>
				<Source><![CDATA[
    private void setCategoryDropdownVisible()
    {
        boolean isEnabled = isConfigurationkeyEnabled(configurationKeyNum(Retail))
                                && EcoResCategoryHierarchyRole::existRole(EcoResCategoryNamedHierarchyRole::Retail);

        categoryReferenceGroup.enabled(isEnabled);
        categoryReferenceGroup.visible(isEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryDropdownMandatory</Name>
				<Source><![CDATA[
    private void setCategoryDropdownMandatory()
    {
        if (this.args().caller())
        {
            Args callerArgs = this.args().caller().args();
            if (callerArgs
                && categoryReferenceGroup.enabled()
                && categoryReferenceGroup.visible()
                && (callerArgs.menuItemName() == menuItemDisplayStr(RetailProductsByCategory) || callerArgs.menuItemName() == menuItemDisplayStr(RetailReleasedProductsByCategory)))
            {
                categoryReferenceGroup.mandatory(true);
            }
            else
            {
                categoryReferenceGroup.mandatory(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIdentificationNameMandatoryForKits</Name>
				<Source><![CDATA[
    private void setIdentificationNameMandatoryForKits()
    {
        if (this.args().caller())
        {
            Args callerArgs = this.args().caller().args();

            if (callerArgs
                && Identification_Name.enabled()
                && Identification_Name.visible()
                && (   callerArgs.menuItemName() == menuItemDisplayStr(RetailKitListPage) 
                    || callerArgs.menuItemName() == menuItemDisplayStr(EcoResKitsPerCompanyListPage)))
            {
                Identification_Name.mandatory(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTypes_ProductServiceTypeVisible</Name>
				<Source><![CDATA[
    private void setTypes_ProductServiceTypeVisible()
    {
        if(EcoResProductServiceTypeFeatureExposure::isProductServiceTypeFeatureEnabled())
        {
            Types_ProductServiceType.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMasterControlsVisible</Name>
				<Source><![CDATA[
    public void setMasterControlsVisible()
    {
        boolean isProductMaster = this.productData().identification().parmProductSubType() == EcoResProductSubtype::ProductMaster;

        variants.visible(isProductMaster);

        ProductDimensionGroup.mandatory(isProductMaster);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            this.setRetailKitCheckboxVisible(isProductMaster);
        }

        this.updateLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMoreFieldsVisible</Name>
				<Source><![CDATA[
    public void setMoreFieldsVisible()
    {
        #define.MoreLabel("@SYS191195")
        #define.LessLabel("@SYS191193")
        #define.EmbeddedResource(2)
        boolean isCountryRegionGB_IE_SA = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE, #isoSA]);

        if (this.productData().identification().isReleasedProduct())
        {
            RAssetGroup.visible(true);
            ReferenceGroups.visible(true);
            UnitsOfMeasures.visible(true);
            SalesTaxation.visible(true);
            PurchaseTaxation.visible(true);
            Vendor.visible(true);
            Prices.visible(true);
            this.updateLayout();
        }

        Purch_TaxWithholdCalculate.visible(isCountryRegionGB_IE_SA);
        Purch_TaxWithholdItemGroup.visible(isCountryRegionGB_IE_SA);
        Sales_TaxWithholdCalculate.visible(isCountryRegionGB_IE_SA);
        Sales_TaxWithholdItemGroup.visible(isCountryRegionGB_IE_SA);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPerCompanyControlsVisible</Name>
				<Source><![CDATA[
    private void setPerCompanyControlsVisible()
    {
        SysRecordTemplateStorageUser        storageUser;
        SysRecordTemplateStorageCompany     storageCompany;
        InventTable                         inventTable;
        boolean                             administrationVisible = false;
        boolean                             isReleasedProduct = this.productData().identification().isReleasedProduct();

        itemIdentification.visible(isReleasedProduct);
        ItemIdGroup.visible(isReleasedProduct);

        ItemIdentification_ItemId.mandatory(isReleasedProduct);

        if (isReleasedProduct)
        {
            storageUser             = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::User) as SysRecordTemplateStorageUser;
            storageCompany          = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::Company) as SysRecordTemplateStorageCompany;
            administrationVisible   = storageUser.get() != conNull() || storageCompany.get() != conNull();
        }
        administration.visible(administrationVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductKitProductConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the first available Active configuration product dimension group for Kit.
    /// </summary>
    public void setProductKitProductConfiguration()
    {
        this.setBomUnitId();   // Ensure that BOMUnitId is blank for non inventoried items
        this.enableCWProduct();
        EcoResProductCrossTableManager::defaultProductDimensionGroupName(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRAssetGroupIdVisible</Name>
				<Source><![CDATA[
    private void setRAssetGroupIdVisible()
    {
        rAssetGroup.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                            isConfigurationkeyEnabled(configurationKeyNum(RAsset)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailKitCheckboxVisible</Name>
				<Source><![CDATA[
    private void setRetailKitCheckboxVisible(boolean setkit)
    {
        if (this.args().menuItemName() != menuitemDisplayStr(EcoResProductCreateRelease))
        {
            // Ignore request when create new product form is opened
            // for creating a released product as a new kit can not be created and
            // released without being approved.

            // Make visible/invisible and enabled as specified unless
            productIsRetailKit.visible(setkit);
            productisRetailKit.enabled(setkit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroups</Name>
				<Source><![CDATA[
    public void setTaxItemGroups()
    {
        if (this.productData().referenceGroups().parmItemGroupId())
        {
            InventItemGroup inventItemGroup = InventItemGroup::find(this.productData().referenceGroups().parmItemGroupId());

            this.productData().taxation().parmPurchaseTaxItemGroupId(inventItemGroup.TaxItemGroupIdPurch);
            this.productData().taxation().parmSalesTaxItemGroupId(inventItemGroup.TaxItemGroupIdSales);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItemIdUsageInfo</Name>
				<Source><![CDATA[
    public void showItemIdUsageInfo(ItemId _itemId = itemIdentification_ItemId.text())
    {
        //don't do anything if an item ID field is locked for edit
        if (!this.numberSeqItem().controlAllowEdit())
        {
            return;
        }

        itemIdUsed  = false;
        if (_itemId)
        {
            itemIdUsed = InventTable::exist(_itemId);
        }

        this.updateDialogCommitSection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProductNumberUsageInfo</Name>
				<Source><![CDATA[
    public void showProductNumberUsageInfo(EcoResProductNumber _productNumber = identification_ProductNumber.text())
    {
        //don't do anything if a product number field is locked for edit
        if (!this.numberSeqProduct().controlAllowEdit())
        {
            return;
        }

        productNumberUsed = false;
        if (_productNumber)
        {
            productNumberUsed =
                EcoResProductIdentifier::existsByProductNumber(_productNumber);
        }

        this.updateDialogCommitSection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateData2TemplateRecords</Name>
				<Source><![CDATA[
    private Map templateData2TemplateRecords()
    {
        Common                      record;
        List                        dataSourcesNameList;
        ListEnumerator              dataSourcesNameListEnumerator;
        SysRecordTemplate           recordTemplate;
        boolean                     requiresTemplateValuesSpecification = true;
        Map                         templateRecordsMap;
        str                         dataSourceName;
        SysRecordTemplateFactory    sysRecordTemplateFactory = SysRecordTemplateFactory::construct();

        // This is to get the list that is in sync with the template data.
        this.productTemplateManager().parmSysRecordTemplateData(sysRecordTmpTemplate.data);

        dataSourcesNameList = this.productTemplateManager().dataSourcesNameList();

        templateRecordsMap              = new Map(Types::String, Types::Record);
        dataSourcesNameListEnumerator   = dataSourcesNameList.getEnumerator();
        while (dataSourcesNameListEnumerator.moveNext())
        {
            dataSourceName = dataSourcesNameListEnumerator.current();
            record = null;
            record = this.productTemplateManager().getBufferByDataSourceName(dataSourceName, '');
            recordTemplate = sysRecordTemplateFactory.newRecordTemplateFromCommon(record);
            if (requiresTemplateValuesSpecification)
            {
                recordTemplate.parmRecordTemplateValues(sysRecordTmpTemplate.Data);
                requiresTemplateValuesSpecification = false;
            }
            recordTemplate.createRecord();
            templateRecordsMap.insert(dataSourceName, record);
        }

        return templateRecordsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateRecords2Controls</Name>
				<Source><![CDATA[
    private void templateRecords2Controls(Map _templateRecordsMap)
    {
        int                     i, j;
        str                     dataSourceName;
        container               fields;
        FieldId                 fieldId;
        str                     controlName;
        FormControl             formControl;
        Common                  record;

        applyingTemplate = true;

        try
        {
            for (i = 1; i <= conLen(data2Controls); ++i)
            {
                [dataSourceName, fields] = conPeek(data2Controls, i);
                record = null;
                record = _templateRecordsMap.lookup(dataSourceName);
                for (j = 1; j <= conLen(fields); ++j)
                {
                    [fieldId, controlName] = conPeek(fields, j);
                    formControl = this.control(this.controlId(controlName));
                    boolean assignmentResult = this.assignFieldValueToFormControl(formControl, record, fieldId);
                    
                    if (assignmentResult)
                    {
                        continue;
                    }

                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }
        finally
        {
            this.postTemplateRecordsApply();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFieldValueToFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the record field to the concrete form control.
    /// </summary>
    /// <param name = "_formControl">An instance of the <c>FormControl</c>.</param>
    /// <param name = "_record">The record to be assigned to the specified form control.</param>
    /// <param name = "_fieldId">An instance of the <c>FieldId</c> of the specified record.</param>
    /// <returns>true if the assignment has been successful; otherwise, false.</returns>
    protected boolean assignFieldValueToFormControl(FormControl _formControl, Common _record, FieldId _fieldId)
    {
        if (_formControl is FormStringControl)
        {
            FormStringControl stringControl = _formControl as FormStringControl;
            stringControl.text(_record.(_fieldId));
            stringControl.modified();
            
            return true;
        }
        else if (_formControl is FormReferenceGroupControl)
        {
            FormReferenceGroupControl referenceGroupControl = _formControl as FormReferenceGroupControl;
            referenceGroupControl.value(_record.(_fieldId));
            // temporary: to overcome #3851298 "FormReferenceGroupControl: After calling control.value(XXX), call control.modified() flushes the value set on previous step".
            //referenceGroupControl.modified();

            return true;
        }
        else if (_formControl is FormCheckBoxControl)
        {
            FormCheckBoxControl checkBoxControl = _formControl as FormCheckBoxControl;
            checkBoxControl.value(_record.(_fieldId));
            checkBoxControl.modified();

            return true;
        }
        else if (_formControl is FormRealControl)
        {
            FormRealControl realControl = _formControl as FormRealControl;
            realControl.realValue(_record.(_fieldId));

            return true;
        }
        else if (_formControl is FormComboBoxControl)
        {
            FormComboBoxControl comboBoxControl = _formControl as FormComboBoxControl;
            comboBoxControl.selection(_record.(_fieldId));
            comboBoxControl.modified();

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTemplateRecordsApply</Name>
				<Source><![CDATA[
    private void postTemplateRecordsApply()
    {
        this.postTemplateRecordsApplyActions();

        applyingTemplate = false;

        // temporary: to overcome #3851298 "FormReferenceGroupControl: After calling control.value(XXX), call control.modified() flushes the value set on previous step".
        this.productData().referenceGroups().parmStorageDimensionGroupRecId(StorageDimensionGroup.value());
        this.productData().referenceGroups().parmTrackingDimensionGroupRecId(TrackingDimensionGroup.value());
        this.productData().variant().parmProductDimensionGroupRecId(ProductDimensionGroup.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTemplateRecordsApplyActions</Name>
				<Source><![CDATA[
    protected void postTemplateRecordsApplyActions()
    {
        this.setBomUnitId();   // Ensure that BOMUnitId is blank for non inventoried items
        this.enableDisableWHSReservationHierarchy();    // Ensure that the reservation hierarchy field is properly enabled/disabled
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer tmpVersion = conPeek(_packedClass,1);

        switch (tmpVersion)
        {
            case #CurrentVersion :
                [tmpVersion, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallers</Name>
				<Source><![CDATA[
    public void updateCallers()
    {
        if (element.mustUpdateCallers())
        {
            xArgs args = this.args();

            //set lookup record for caller's args.
            //Lookup record set here will result in refreshing the caller and positioning on the newly created record
            if (args && args.caller() is FormRun)
            {
                FormRun callerFormRun = args.caller() as FormRun;
                FormDataSource rootDataSource = getFirstRootDatasourceOnFormRun(callerFormRun);

                if (callerFormRun.closed() || !rootDataSource)
                {
                    return;
                }

                Common recordToFind;

                //in the Products per Company list page the InventTable table is the master data source
                //so we need an InventTable record in order to position correctly
                if (rootDataSource.table() == tableNum(InventTable))
                {
                    recordToFind = InventTable::findByProduct(createdEcoResProduct.RecId);
                }
                else
                {
                    //standalone instance of EcoResProduct table has to be passed to lookupRecord
                    recordToFind = EcoResProduct::find(createdEcoResProduct.RecId);
                }

                Args callerFormArgs = callerFormRun.args();
                if (callerFormArgs)
                {
                    callerFormRun.args().lookupRecord(recordToFind);
                    rootDataSource.research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDialogCommitSection</Name>
				<Source><![CDATA[
    private void updateDialogCommitSection()
    {
        if (productNumberUsed || itemIdUsed)
        {
            warning("@SYS333130");
        }
        okButton.enabled(!productNumberUsed && !itemIdUsed);
        this.updateLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLayout</Name>
				<Source><![CDATA[
    public void updateLayout()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCWandWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product is not Warehouse management enabled and catch weight enabled.
    /// </summary>
    /// <param name="_isCatchWeightProduct">
    /// Specifies if product is a catch-weight product.
    /// </param>
    /// <param name="_storageDimensionGroupRecId">
    /// A storage dimension group id to validate.
    /// </param>
    /// <returns>
    /// true if the product is not both warehouse management enabled and catch weight enabled; otherwise, false.
    /// </returns>
    public boolean validateCWandWHSEnabled(
        PdsCWProduct                     _isCatchWeightProduct       = pdsCWProduct_PdsCWProduct.value(),
        EcoResStorageDimensionGroupRecId _storageDimensionGroupRecId = storageDimensionGroup.value())
    {
        boolean ret = true;

        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled() 
            && _isCatchWeightProduct)
        {
            EcoResStorageDimensionGroup ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(_storageDimensionGroupRecId);

            if (ecoResStorageDimensionGroup.IsWarehouseWHSEnabled)
            {
                error(strFmt("@WAX5578", ecoResStorageDimensionGroup.Name));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIdentificationControl</Name>
				<Source><![CDATA[
    public boolean validateIdentificationControl(FormStringControl _identificationControl)
    {
        if (_identificationControl.text() == '')
        {
            return checkFailed(strFmt("@SYS84753", extendedTypeId2pname(_identificationControl.extendedDataType())));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRAssetGroupId</Name>
				<Source><![CDATA[
    public boolean validateRAssetGroupId(FormStringControl _formStringControl)
    {
        RAssetMainGroupId  groupId = _formStringControl.text();

        //do not validate if not editable or no value provided
        if (! groupId || ! _formStringControl.allowEdit())
        {
            return true;
        }

        if (!RAssetMainGroup::find(groupId))
        {
            return checkFailed(strFmt(
                "@SYS112224",
                groupId,
                extendedTypeId2pname(_formStringControl.extendedDataType()),
                tableId2pname(tableNum(RAssetMainGroup))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product is a stocked product if the item is Warehouse management enabled.
    /// </summary>
    /// <param name="_itemModelGroupId">
    /// An item model group id to validate.
    /// </param>
    /// <param name="_storageDimensionGroupRecId">
    /// A storage dimension group RecId to validate.
    /// </param>
    /// <returns>
    /// true if the product is not both warehouse management enabled and a non-stocked product; otherwise, false.
    /// </returns>
    public boolean validateStockedProduct(InventModelGroupId _itemModelGroupId = ModelGroupId.text(), RecId _storageDimensionGroupRecId = storageDimensionGroup.value())
    {
        boolean ret = true;

        InventModelGroup inventModelGroup = InventModelGroup::find(_itemModelGroupId);

        if (inventModelGroup.RecId
        &&  !inventModelGroup.isStocked())
        {
            EcoResStorageDimensionGroup ecoResStorageDimensionGroup = EcoResStorageDimensionGroup::find(_storageDimensionGroupRecId);

            if (ecoResStorageDimensionGroup.IsWarehouseWHSEnabled)
            {
                ret = checkFailed("@WAX5667");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxItemGroup</Name>
				<Source><![CDATA[
    public boolean validateTaxItemGroup(FormStringControl _taxItemGroupControl)
    {
        TaxItemGroup    taxItemGroup = _taxItemGroupControl.text();
        str             message;

        //do not validate if not editable or no value provided (tax groups are not mandatory!)
        if (!taxItemGroup || !_taxItemGroupControl.allowEdit())
        {
            return true;
        }
        if (!TaxItemGroupHeading::exist(taxItemGroup))
        {
            message = strFmt(
                "@SYS112224",
                taxItemGroup,
                extendedTypeId2pname(_taxItemGroupControl.extendedDataType()),
                tableId2pname(tableNum(TaxItemGroupHeading)));

            return checkFailed(message);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitId</Name>
				<Source><![CDATA[
    public boolean validateUnitId(FormStringControl _formStringControl, boolean _validateConversion = true)
    {
        UnitOfMeasureRecId  currentUnit;
        UnitOfMeasureSymbol currentUnitId = _formStringControl.text();

        //do not validate if not editable or no value provided (units are not mandatory!)
        if (!currentUnitId || !_formStringControl.allowEdit())
        {
            return true;
        }

        currentUnit = UnitOfMeasure::unitOfMeasureIdBySymbol(currentUnitId);
        if (!currentUnit)
        {
            return checkFailed(strFmt("@SYS4108", currentUnitId));
        }

        if (_validateConversion &&
            !UnitOfMeasureConverter::canBeConverted(
                currentUnit,
                UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitId.text())))
        {
            return checkFailed(strFmt("@SYS28690", currentUnitId, inventUnitId.text()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCannotSetUnitSequenceGroupIdWhenFilterCodeIsRequired</Name>
				<Source><![CDATA[
    public boolean validateCannotSetUnitSequenceGroupIdWhenFilterCodeIsRequired()
    {
        if (WHSUOMSequenceGroupId.text() && 
            WHSFilterParm::find(ItemGroupId.text()).isFilterRequired())
        {
            return checkFailed("@SCM:Error_EcoResProductCreate_CannotSetUnitSequenceGroupIdWhenFilterCodeIsRequired");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (companyIdInit != curext())
        {
            ret = checkFailed(strFmt("@SYS4002764", tableStr(EcoResProduct)));
        }

        ret = identification_ProductNumber.validate() && ret;

        ret = Identification_Name.validate() && ret; // Mandatory for Kits

        ret = CategoryReferenceGroup.validate() && ret;

        if (this.productData().identification().isReleasedProduct())
        {
            ret = itemIdentification_ItemId.validate() && ret;
        }

        ret = ret && this.numberSeqProduct().validateWrite();
        ret = ret && this.numberSeqItem().validateWrite();

        ret = ret && EcoResProductCrossTableManager::validateWrite(element);

        if (createdEcoResProduct.isProductMaster())
        {
            ret =   productDimensionGroup.validate()
                     && EcoResProductDimensionGroupProduct::checkDimensionGroupValidForProduct(
                            createdEcoResProduct, productDimensionGroup.value())
                     && ret;
        }

        //validate units only if creating product per company!
        if (this.productData().identification().isReleasedProduct())
        {
            ret = ret && inventUnitId.validate();
            ret = ret && purchUnitId.validate();
            ret = ret && salesUnitId.validate();
            ret = ret && bomUnitId.validate();

            ret = ret && purchTaxItemGroupId.validate();
            ret = ret && salesTaxItemGroupId.validate();
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                isConfigurationkeyEnabled(configurationKeyNum(RAsset)))
            {
                ret = ret && rAssetGroupId.validate();
            }
            // </GEERU>

            ret = ret && whsReservationHierarchy.validate();
            ret = ret && WHSInvent::checkBatchBlankIssueReceipt(this.productData().referenceGroups().parmStorageDimensionGroupRecId(), this.productData().referenceGroups().parmTrackingDimensionGroupRecId());
            ret = ret && WHSInvent::checkNonPhysicalDims(this.productData().referenceGroups().parmStorageDimensionGroupRecId(), this.productData().referenceGroups().parmTrackingDimensionGroupRecId());
        }

        // <GSA>
        // The Calculate withholding tax option is available only when the product type is Service if country region code is SA.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA])
            && (sales_TaxWithholdCalculate.value() == true || purch_TaxWithholdCalculate.value() == true)
            && this.productData().identification().parmProductType() != EcoResProductType::Service)
        {
            ret = checkFailed("@SYS328665");
        }
        // <GSA>

        if (PdsCWProduct_PdsCWProduct.value()
            && InventModelGroup::find(ModelGroupId.text()).NegativePhysical
            && EcoResStorageDimensionGroup::find(StorageDimensionGroup.value()).IsWarehouseWHSEnabled)
        {
            // Catch weight items cannot have both physical negative inventory and warehousing enabled.
            ret = ret && checkFailed(strFmt("@WAX:Error_NegativeInventoryNotAllowedForWHSCWItems"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public boolean write()
    {
        try
        {
            ttsbegin;

            createdEcoResProduct = EcoResProductCrossTableManager::makeProductRecord(element);
            EcoResProductCrossTableManager::insert(element, createdEcoResProduct);

            this.numberSeqProduct().write();

            //release product
            this.releaseProductToCompany();

            this.applyTemplate();

            this.writeMoreFields();

            //model group record is created on writeMoreFields()
            element.initPdsVendorCheckFromInventModelGroup();

            // init vendor product Id
            element.initPrimaryVendorProductId();

            ttscommit;

            this.postWrite();
        }
        // The error may occur during the release process or during template assignment validation logic.
        // In this case, the local product buffer has to be restored manually, so the user can proceed with the product creation
        catch (Exception::Error)
        {
            createdEcoResProduct = null;
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMoreFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Identifies the modified field for a record.
    /// </summary>
    protected void writeMoreFields()
    {
        str                     dataSourceName;
        container               fields;
        FieldId                 fieldId;
        str                     controlName;

        for (int i = 1; i <= conLen(data2Controls); ++i)
        {
            boolean recordModified  = false;
            [dataSourceName, fields] = conPeek(data2Controls, i);

            InventTable inventTable = InventTable::findByProduct(createdEcoResProduct.RecId);
            Common record = element.getBufferByDataSourceName(dataSourceName, inventTable.ItemId, true);
            
            for (int j = 1; j <= conLen(fields); ++j)
            {
                [fieldId, controlName] = conPeek(fields, j);
                FormControl formControl = this.control(this.controlId(controlName));
                if (formControl is FormStringControl)
                {
                    FormStringControl stringControl = formControl as FormStringControl;
                    if (record.(fieldId) != stringControl.text())
                    {
                        record.(fieldId) = stringControl.text();
                        recordModified = true;
                    }
                }
                else if (formControl is FormReferenceControl)
                {
                    FormReferenceControl referenceControl = formControl as FormReferenceControl;
                    if (record.(fieldId) != referenceControl.value())
                    {
                        record.(fieldId) = referenceControl.value();
                        recordModified = true;
                    }
                }
                else if (formControl is FormCheckBoxControl)
                {
                    FormCheckBoxControl checkBoxControl = formControl as FormCheckBoxControl;
                    if (record.(fieldId) != checkBoxControl.value())
                    {
                        record.(fieldId) = checkBoxControl.value();
                        recordModified = true;
                    }
                }
                else if (formControl is FormRealControl)
                {
                    FormRealControl realControl = formControl as FormRealControl;
                    if (record.(fieldId) != realControl.realValue())
                    {
                        record.(fieldId) = realControl.realValue();
                        recordModified = true;
                    }
                }
                else if(formControl is FormComboBoxControl)
                {
                    FormComboBoxControl comboboxControl = formControl as FormComboBoxControl;
                    if (record.(fieldId) != comboboxControl.selection())
                    {
                        record.(fieldId) = comboboxControl.selection();
                        recordModified = true;
                    }
                }
            }
            if (recordModified)
            {
                this.writeModifiedRecord(record);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeModifiedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the changes for a record that has been modified by the
    /// <c>writeMoreFields</c> method.
    /// </summary>
    /// <param name = "_record">The record that has been modified</param>
    protected void writeModifiedRecord(Common _record)
    {
        if (!_record.validateWrite())
        {
            throw Exception::Error;
        }
        _record.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferByDataSourceNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to get a record that corresponds to the specified <c>EcoResProductDetailsExtended</c> data source and is related to the specified item number.
    /// </summary>
    /// <param name="_formDataSourceName">
    /// An <c>EcoResProductDetailsExtended</c> form data source name.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the found record.</param>
    delegate void getBufferByDataSourceNameDelegate(str _formDataSourceName, ItemId _itemId, boolean _forUpdate, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferByDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data
    /// source and is related to the specified item ID .
    /// </summary>
    /// <param name="_formDataSourceName">
    /// An <c>EcoResProductDetailsExtended</c> form data source name.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record that corresponds to the specified <c>EcoResProductDetailsExtended</c> form data source and
    /// is related to the specified item ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The name of the <c>EcoResProductDetailsExtended</c> form data source is unknown.
    /// </exception>
    private  Common getBufferByDataSourceName(str _formDataSourceName, ItemId _itemId, boolean _forUpdate = false)
    {
        #EcoResProductDetailsExtended

        Common common;
             
        switch (_formDataSourceName)
        {
            case #InventTableDS:
                common  = InventTable::find(_itemId, _forUpdate);
                break;

            case #PurchDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch, _forUpdate);
                break;

            case #InventDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent, _forUpdate);
                break;

            case #SalesDS:
                common  = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales, _forUpdate);
                break;

            case #InventItemLocationDS:
                InventDimId inventDimIdBlank    = InventDim::inventDimIdBlank();
                InventItemLocation inventItemLocation  = InventItemLocation::find(_itemId, inventDimIdBlank, '', _forUpdate);
                inventItemLocation.ItemId       = _itemId;
                inventItemLocation.InventDimId  = inventDimIdBlank;
                common = inventItemLocation;
                break;

            case #EcoResStorageDimensionGroupItemDS:
                EcoResStorageDimensionGroupItem ecoResStorageDimensionGroupItem  = EcoResStorageDimensionGroupItem::findByItem(
                    curExt2dataareaid(tableNum(InventTable)),
                    _itemId,
                    _forUpdate);
                ecoResStorageDimensionGroupItem.ItemId          = _itemId;
                ecoResStorageDimensionGroupItem.ItemDataAreaId  = curExt2dataareaid(tableNum(InventTable));
                common  = ecoResStorageDimensionGroupItem;
                break;

            case #EcoResTrackingDimensionGroupItemDS:
                EcoResTrackingDimensionGroupItem ecoResTrackingDimensionGroupItem  = EcoResTrackingDimensionGroupItem::findByItem(
                    curExt2dataareaid(tableNum(InventTable)),
                    _itemId,
                    _forUpdate);
                ecoResTrackingDimensionGroupItem.ItemId         = _itemId;
                ecoResTrackingDimensionGroupItem.ItemDataAreaId = curExt2dataareaid(tableNum(InventTable));
                common  = ecoResTrackingDimensionGroupItem;
                break;

            case #EcoResProductDimensionGroupProductDS:
                common = EcoResProductDimensionGroupProduct::findByProduct(createdEcoResProduct.RecId, _forUpdate);
                break;

            case #InventItemGroupItemDS:
                InventItemGroupItem inventItemGroupItem  = InventItemGroupItem::findByItemIdLegalEntity(
                    _itemId,
                    curExt2dataareaid(tableNum(InventTable)),
                    _forUpdate);
                inventItemGroupItem.ItemId              = _itemId;
                inventItemGroupItem.ItemDataAreaId      = curExt2dataareaid(tableNum(InventTable));
                inventItemGroupItem.ItemGroupDataAreaId = curExt2dataareaid(tableNum(InventItemGroup));
                common  = inventItemGroupItem;
                break;

            case #InventModelGroupItemDS:
                InventModelGroupItem inventModelGroupItem  = InventModelGroupItem::findByItemIdLegalEntity(
                    _itemId,
                    curExt2dataareaid(tableNum(InventTable)),
                    _forUpdate);
                inventModelGroupItem.ItemId                 = _itemId;
                inventModelGroupItem.ItemDataAreaId         = curExt2dataareaid(tableNum(InventTable));
                inventModelGroupItem.ModelGroupDataAreaId   = curExt2dataareaid(tableNum(InventModelGroup));
                common  = inventModelGroupItem;
                break;

            case #RetailInventTableDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    RetailInventTable retailInventTable = RetailInventTable::find(_itemId, _forUpdate);
                    retailInventTable.itemId    = _itemId;
                    common  = retailInventTable;
                }
                break;

            case #WHSReservationHierarchyItemDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    WHSReservationHierarchyItem whsReservationHierarchyItem = WHSReservationHierarchyItem::findByItem(
                        curExt2dataareaid(tableNum(InventTable)),
                        _itemId,
                        _forUpdate);
                    whsReservationHierarchyItem.ItemDataAreaId  = curExt2dataareaid(tableNum(InventTable));
                    whsReservationHierarchyItem.ItemId          = _itemId;
                    common = whsReservationHierarchyItem;
                }
                break;

            case #WHSInventTableDS:
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    WHSInventTable whsInventTable = WHSInventTable::find(_itemId, _forUpdate);
                    whsInventTable.ItemId = _itemId;
                    common = whsInventTable;
                }
                break;

            case #MCRInventTableDS:
                MCRInventTable mcrInventTable = MCRInventTable::findByItemId(_itemId, _forUpdate);
                mcrInventTable.InventTable = InventTable::find(_itemId).RecId;
                common = mcrInventTable;
                break;

            default:
                EventHandlerResult result = new EventHandlerResult();
                this.getBufferByDataSourceNameDelegate(_formDataSourceName, _itemId, _forUpdate, result);

                if (!result.hasResult())
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                common = result.result();
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCWProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the pdsCWProduct_PdsCWProduct control.
    /// </summary>
    public void enableCWProduct()
    {
        pdsCWProduct_PdsCWProduct.enabled(EcoResProductCrossTableManager::canBeCatchWeightProduct(element));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceTypeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates value and enables / disables of the service type control based on identification.
    /// </summary>
    /// <param name="_identification">
    /// product identification data
    /// </param>
    public void updateServiceTypeControl(EcoResProductIdentificationData _identification)
    {
        if (_identification.parmProductType() == EcoResProductType::Service
            && _identification.parmProductSubType() == EcoResProductSubType::Product)
        {
            Types_ProductServiceType.enabled(true);
        }
        else
        {
            Types_ProductServiceType.enabled(false);
            _identification.parmProductServiceType(EcoResProductServiceType::NotSpecified);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterForKitsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters dimension group for Kit products.
    /// </summary>
    /// <param name="_formReferenceCtrl">
    /// Form reference control for product dimension group control.
    /// </param>
    /// <returns>
    /// Presents the lookup form to the user.
    /// </returns>
    public common filterForKitsOnly(FormReferenceControl _formReferenceCtrl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(EcoResProductDimensionGroup), _formReferenceCtrl, true);
        Query filterDimGrpQuery = new Query();

        sysTableLookup.addLookupField(fieldNum(EcoResProductDimensionGroup, Name));
        sysTableLookup.addLookupField(fieldNum(EcoResProductDimensionGroup, Description));

        EcoResProductDimensionGroup::FilterDimensionGroupForKit(filterDimGrpQuery);

        sysTableLookup.parmQuery(filterDimGrpQuery);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductKit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the current product is a kit.
    /// </summary>
    /// <returns>
    /// true if product is a kit; otherwise, false.
    /// </returns>
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public boolean isProductKit()
    {
        return this.productData().retail().parmIsRetailKit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productData</Name>
				<Source><![CDATA[
    // ======================== Region (EcoResIProductCrossTableData) ======================

    public EcoResProductData productData()
    {
        return productData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowedProductSubTypes</Name>
				<Source><![CDATA[
    public Set parmAllowedProductSubTypes()
    {
        return allowedProductSubtypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUpdateOfExistingProduct</Name>
				<Source><![CDATA[
    public boolean parmIsUpdateOfExistingProduct()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReleased</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public boolean parmIsReleased()
    {
        return this.productData().identification().isReleasedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public LegalEntityDataAreaId parmLegalEntityId()
    {
        return this.productData().identification().companySpecificData().legalEntityId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductType</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public EcoResProductType parmProductType(EcoResProductType _productType = EcoResProductType::Item)
    {
        return this.productData().identification().parmProductType(_productType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductSubType</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public EcoResProductSubType parmProductSubType(EcoResProductSubType _productSubType = EcoResProductSubType::Product)
    {
        return this.productData().identification().parmProductSubType(_productSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductNumber</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public EcoResProductNumber parmProductNumber(EcoResProductNumber _productNumber = '')
    {
        return this.productData().identification().parmProductNumber(_productNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductName parmProductName(EcoResProductName _productName = '')
    {
        return this.productData().identification().parmProductName(_productName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductSearchName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductSearchName parmProductSearchName(EcoResProductSearchName _productSearchName = '')
    {
        return this.productData().identification().parmProductSearchName(_productSearchName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public ItemId parmItemId(ItemId _itemId = '')
    {
        return this.productData().identification().companySpecificData().parmItemId(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public ItemId parmSearchName(ItemNameAlias _searchName = '')
    {
        return this.productData().identification().companySpecificData().parmSearchName(_searchName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantConfigurationTechnology</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResVariantConfigurationTechnologyType parmVariantConfigurationTechnology(
        EcoResVariantConfigurationTechnologyType _configurationTechnology = EcoResVariantConfigurationTechnologyType::PredefinedVariants)
    {
        return this.productData().variant().parmConfigurationTechnology(_configurationTechnology);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCatchWeightProduct</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public PdsCWProduct parmIsCatchWeightProduct(PdsCWProduct _isCatchWeightProduct = NoYes::No)
    {
        return this.productData().identification().parmIsCatchWeightProduct(_isCatchWeightProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', false, 30\11\2017)]
    public ItemGroupId parmItemGroupId(ItemGroupId _itemGroupId = '')
    {
        return this.productData().referenceGroups().parmItemGroupId(_itemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemModelGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public InventModelGroupId parmItemModelGroupId(InventModelGroupId _itemModelGroupId = '')
    {
        return this.productData().referenceGroups().parmItemModelGroupId(_itemModelGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductDimensionGroupName parmProductDimensionGroupName(EcoResProductDimensionGroupName _productDimGroupName = '')
    {
        return this.productData().variant().parmProductDimensionGroupName(_productDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmProductDimensionGroupRecId(RecId _productDimGroupRecId = 0)
    {
        return this.productData().variant().parmProductDimensionGroupRecId(_productDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalStorageDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResStorageDimensionGroupName parmGlobalStorageDimensionGroupName(EcoResStorageDimensionGroupName _storageDimGroupName = '')
    {
        return this.productData().referenceGroups().parmGlobalStorageDimensionGroupName(_storageDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalStorageDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmGlobalStorageDimensionGroupRecId(RecId _storageDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmGlobalStorageDimensionGroupRecId(_storageDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResTrackingDimensionGroupName parmGlobalTrackingDimensionGroupName(EcoResStorageDimensionGroupName _trackingDimGroupName = '')
    {
        return this.productData().referenceGroups().parmGlobalTrackingDimensionGroupName(_trackingDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalTrackingDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmGlobalTrackingDimensionGroupRecId(RecId _trackingDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmGlobalTrackingDimensionGroupRecId(_trackingDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResStorageDimensionGroupName parmStorageDimensionGroupName(EcoResStorageDimensionGroupName _storageDimGroupName = '')
    {
        return this.productData().referenceGroups().parmStorageDimensionGroupName(_storageDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmStorageDimensionGroupRecId(RecId _storageDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmStorageDimensionGroupRecId(_storageDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResTrackingDimensionGroupName parmTrackingDimensionGroupName(EcoResStorageDimensionGroupName _trackingDimGroupName = '')
    {
        return this.productData().referenceGroups().parmTrackingDimensionGroupName(_trackingDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmTrackingDimensionGroupRecId(RecId _trackingDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmTrackingDimensionGroupRecId(_trackingDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchyName</Name>
				<Source><![CDATA[
    // This method is not used. Keeping it only for backward compability, but not moving it to productData().
    [SysObsolete('', true, 30\11\2017)]
    public WHSReservationHierarchyName parmReservationHierarchyName(WHSReservationHierarchyName _reservationHierarchyName = '')
    {
        if (!prmIsDefault(_reservationHierarchyName))
        {
            WHSReservationHierarchy.value(WHSReservationHierarchy::findByName(_reservationHierarchyName).RecId);
            return _reservationHierarchyName;
        }

        return WHSReservationHierarchy::find(WHSReservationHierarchy.value()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetailKit</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public boolean parmIsRetailKit(boolean _isRetailKit = false)
    {
        return this.productData().retail().parmIsRetailKit(_isRetailKit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailCategoryName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResCategoryName parmRetailCategoryName(EcoResCategoryName _retailCategoryName = '')
    {
        return this.productData().retail().parmRetailCategoryName(_retailCategoryName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmInventoryUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        return this.productData().unitsOfMeasure().parmInventoryUnitSymbol(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmPurchaseUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        return this.productData().unitsOfMeasure().parmPurchaseUnitSymbol(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmSalesUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        return this.productData().unitsOfMeasure().parmSalesUnitSymbol(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmBOMUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        return this.productData().unitsOfMeasure().parmBOMUnitSymbol(_unitSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public TaxItemGroup parmSalesTaxItemGroupId(TaxItemGroup _taxItemGroupId = '')
    {
        return this.productData().taxation().parmSalesTaxItemGroupId(_taxItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseTaxItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public TaxItemGroup parmPurchaseTaxItemGroupId(TaxItemGroup _taxItemGroupId = '')
    {
        return this.productData().taxation().parmPurchaseTaxItemGroupId(_taxItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColorGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RetailColorGroupId parmColorGroupId(RetailColorGroupId _colorGroupId = '')
    {
        return this.productData().variant().parmColorGroupId(_colorGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSizeGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RetailSizeGroupId parmSizeGroupId(RetailSizeGroupId _sizeGroupId = '')
    {
        return this.productData().variant().parmSizeGroupId(_sizeGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStyleGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RetailStyleGroupId parmStyleGroupId(RetailStyleGroupId _styleGroupId = '')
    {
        return this.productData().variant().parmStyleGroupId(_styleGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReleasedProductDetailsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the released product details form in edit mode.
    /// </summary>
    /// <param name = "_inventTable">The current instance of the items record.</param>
    [Replaceable]
    protected void openReleasedProductDetailsForm(InventTable _inventTable)
    {
        InventTable::jumpRefItemId(_inventTable.ItemId, OpenMode::Edit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProductDetailsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the product details form in edit mode.
    /// </summary>
    [Replaceable]
    protected void openProductDetailsForm()
    {
        Args args = new Args();
        args.lookupRecord(createdEcoResProduct);

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDetails), MenuItemType::Display);
        menuFunction.formViewOption(FormViewOption::Details);
        menuFunction.openMode(OpenMode::Edit);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateCallers</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Determines whether the lookup record must be set for the caller's arguments.
    /// </summary>
    /// <returns>
    ///		true, if the lookup record for caller's arguments must be set; otherwise, false.
	/// </returns>
    protected boolean mustUpdateCallers()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Types_ProductType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmProductType(element.getEnumValue(this));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Types_ProductSubtype</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmProductSubType(productSubtypeComboBox.selection());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Types_ProductServiceType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            if (ret)
            {
                element.productData().identification().parmProductServiceType(this.selection());
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_ProductNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmProductNumber(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            element.showProductNumberUsageInfo(this.text());
            //don't call super as it will validate if a product exists
            return element.validateIdentificationControl(this) && !productNumberUsed;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_Name</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmProductName(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_SearchName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmProductSearchName(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemIdentification_ItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().companySpecificData().parmItemId(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            element.showItemIdUsageInfo(this.text());
            //don't call super as it will validate if an item exists
            return element.validateIdentificationControl(this) && !itemIdUsed;
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Overrides kernel method for allowing ItemId to not be replaced upon lookup.
        /// </summary>
        /// <returns>The user entered text.</returns>
        public str resolveAmbiguousReference() 
        {
            //Do not call super as super will enforce a replace with the looked up value.
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemIdentification_NameAlias</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            if (ret)
            {
                element.productData().identification().companySpecificData().parmSearchName(this.text());
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CategoryReferenceGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            Common ret;
            EcoResCategoryHierarchy categoryHierarchy;

            EcoResCategoryHierarchyRole categoryRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);
            if (categoryRole)
            {
                categoryHierarchy = EcoResCategoryHierarchy::find(categoryRole.CategoryHierarchy);

                ret = EcoResCategory::lookupCategoryHierarchy(this, categoryHierarchy);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().retail().parmRetailCategoryRecId(this.value());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProductisRetailKit</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().retail().parmIsRetailKit(this.checked());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProductDimensionGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
            EcoResProductDimensionGroup::jumpRef(this.value(), element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup reference for product dimension group.
        /// </summary>
        /// <returns>
        /// Returns the diemsion groups.
        /// </returns>
        public Common lookupReference()
        {
            Common ret;

            if (element.productData().retail().parmIsRetailKit())
            {
                // return Only active Configuration dimension group.
                ret = element.filterForKitsOnly(this);
            }
            else
            {
                // else return all product dimension group.
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates if the current dimension group is valid for kit products.
        /// </summary>
        /// <returns>
        /// true if the dimension group is valid for kits; otherwise, false.
        /// </returns>
        public boolean validate()
        {
            boolean ret = EcoResProductCrossTableManager::validateConfigOnlyProductDimensionGroup(element, EcoResProductDimensionGroup::find(this.value()).Name);

            return ret && super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().variant().parmProductDimensionGroupRecId(this.value());
            }
            
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VariantConfigurationTechnology</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().variant().parmConfigurationTechnology(element.getEnumValue(this));
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PdsCWProduct_PdsCWProduct</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            ret = ret && element.validateCWandWHSEnabled(this.value(), element.productData().referenceGroups().parmStorageDimensionGroupRecId());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().identification().parmIsCatchWeightProduct(this.checked());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TemplateName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            InventTable inventTable;
            SysRecordTemplate::lookupRecordTemplateValues(element, this, inventTable);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RAssetGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;

            ret = super();
            ret = ret && element.validateRAssetGroupId(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ModelGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().referenceGroups().parmItemModelGroupId(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            ret = ret && element.validateStockedProduct(this.text(), element.productData().referenceGroups().parmStorageDimensionGroupRecId());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().referenceGroups().parmItemGroupId(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            ret = ret && element.validateCannotSetUnitSequenceGroupIdWhenFilterCodeIsRequired();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StorageDimensionGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            EcoResStorageDimensionGroup::jumpRef(this.value());
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().referenceGroups().parmStorageDimensionGroupRecId(this.value());
                EcoResProductCrossTableManager::defaultGlobalStorageDimensionGroupName(element);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            ret = ret
                && element.validateCWandWHSEnabled(element.productData().identification().parmIsCatchWeightProduct(), this.value())
                && element.validateStockedProduct(element.productData().referenceGroups().parmItemModelGroupId(), this.value());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrackingDimensionGroup</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            EcoResTrackingDimensionGroup::jumpRef(this.value());
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().referenceGroups().parmTrackingDimensionGroupRecId(this.value());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WHSReservationHierarchy</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            WHSReservationHierarchy::jumpRef(this.value());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean                         ret;
            InventDimGroupSetup             inventDimGroupSetup;
            WHSReservationHierarchyCache    whsReservationHierarchyCache;

            ret = super();

            if (ret && this.value())
            {
                inventDimGroupSetup = InventDimGroupSetup::newDimensionGroups(
                                        0,
                                        element.productData().referenceGroups().parmStorageDimensionGroupRecId(),
                                        element.productData().referenceGroups().parmTrackingDimensionGroupRecId());
                whsReservationHierarchyCache = WHSReservationHierarchyCache::construct();

                // Not using short-circuit evaluation to get all errors with one pass
                ret = WHSInventTableReservationHierarchy::validateBlankIssueReceiptDims(
                        this.value(),
                        inventDimGroupSetup,
                        whsReservationHierarchyCache)
                      && ret;

                ret = WHSInventTableReservationHierarchy::validatePhysicalDimMatchWithHierarchy(
                        this.value(),
                        inventDimGroupSetup,
                        whsReservationHierarchyCache)
                      && ret;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WHSUOMSequenceGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            WHSUOMSeqGroupTable::jumpRef(this.text());
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();
            
            if (ret && this.text())
            {
                if (element.productData().identification().parmIsCatchWeightProduct())
                {
                    ret = checkFailed("@SCM:Error_EcoResProductCreate_CannotSetUnitSequenceGroupIdForCatchWeightItem");
                }
                else
                {
                    ret = WHSUOMSeqGroupTable::validateSequenceGroupForParameters(
                            element.productData().identification().companySpecificData().parmItemId(),
                            this.text(),
                            element.productData().unitsOfMeasure().parmInventoryUnitSymbol());

                    ret = ret && element.validateCannotSetUnitSequenceGroupIdWhenFilterCodeIsRequired();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InventUnitId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupInventoryUnitId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;

            ret = super();
            ret = ret && element.validateUnitId(this, false);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().unitsOfMeasure().parmInventoryUnitSymbol(this.text());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PurchUnitId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupNonInventoryUnitId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;

            ret = super();
            ret = ret && element.validateUnitId(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().unitsOfMeasure().parmPurchaseUnitSymbol(this.text());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesUnitId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupNonInventoryUnitId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         ret;

            ret = super();
            ret = ret && element.validateUnitId(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().unitsOfMeasure().parmSalesUnitSymbol(this.text());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BOMUnitId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            element.lookupNonInventoryUnitId(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            ret = ret && element.validateUnitId(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().unitsOfMeasure().parmBOMUnitSymbol(this.text());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesTaxItemGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            ret = ret && element.validateTaxItemGroup(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().taxation().parmSalesTaxItemGroupId(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Sales_TaxWithholdCalculate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            sales_TaxWithholdItemGroup.allowEdit(this.value());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PurchTaxItemGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            ret = ret && element.validateTaxItemGroup(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                element.productData().taxation().parmPurchaseTaxItemGroupId(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Purch_TaxWithholdCalculate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            purch_TaxWithholdItemGroup.allowEdit(this.value());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (!RetailMerchandisingKillSwitch::disableAutoPopulateUnitSequenceGroupIdDefinedInCategory() 
                && !WHSUOMSequenceGroupId.enabled() && WHSUOMSequenceGroupId.text())
            {
                WHSUOMSequenceGroupId.text("");
            }

            if (element.validateWrite())
            {
                if (element.write())
                {
                    closedOK = true;
                    super();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS333128</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Types</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1176002949</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Types_ProductType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<EnumType>EcoResProductType</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Types_ProductSubtype</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<EnumType>EcoResProductSubtype</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>Types_ProductServiceType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<EnumType>EcoResProductServiceType</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProductNumberGroup</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Identification_ProductNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>EcoResProductNumber</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Caption>@SYS5711</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProductIdentification</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Identification_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>EcoResProductName</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Identification_SearchName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>EcoResProductSearchName</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ItemIdGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemIdentification_ItemId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemId</ExtendedDataType>
								<LookupButton>Never</LookupButton>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Caption>@SYS333129</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ItemIdentification</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemIdentification_NameAlias</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemNameAlias</ExtendedDataType>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CategoryGroup</Name>
						<ElementPosition>1636178016</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>CategoryReferenceGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>Retail</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CategoryReferenceGroup_Name</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
								<Label>@RET5714</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>KitGroup</Name>
						<ConfigurationKey>Retail</ConfigurationKey>
						<ElementPosition>1674525938</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ProductisRetailKit</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>Retail</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@REX1066</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Variants</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1738439142</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ProductDimensionGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensionGroup_Name</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>EcoResProductDimensionGroupRecId</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>VariantConfigurationTechnology</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<EnumType>EcoResVariantConfigurationTechnologyType</EnumType>
								<FastTabSummary>Yes</FastTabSummary>
								<Items />
							</AxFormControl>
						</Controls>
						<Caption>@SYS133901</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PdsCWProduct</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>PdsCWProduct_PdsCWProduct</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PdsCatchWeight</ConfigurationKey>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@PRO446</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Caption>@PRO446</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Administration</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1942961394</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>TemplateName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>10</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<ExtendedDataType>SysRecordTemplateDescription</ExtendedDataType>
								<Label>@SYS322099</Label>
								<LookupButton>Always</LookupButton>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9853</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RAssetGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>RAsset</ConfigurationKey>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>1879048189</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RAssetGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RAssetMainGroupId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@GLS106645</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ReferenceGroups</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ModelGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>InventModelGroupId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemGroupId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>StorageDimensionGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177278</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensionGroup_Name</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>EcoResStorageDimensionGroupRecId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>TrackingDimensionGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TrackingDimensionGroup_Name</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>EcoResTrackingDimensionGroupRecId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>WHSReservationHierarchy</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>WHSandTMS</ConfigurationKey>
								<ElementPosition>1879048189</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WHSReservationHierarchy_Name</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>WHSReservationHierarchyRecId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>WHSUOMSequenceGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>WHSandTMS</ConfigurationKey>
								<Enabled>No</Enabled>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>WHSUOMSeqGroupId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BuyerGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS336003</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>UnitsOfMeasures</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InventUnitId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>429496728</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>InventUnitId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PurchUnitId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>644245092</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>PurchUnit</ExtendedDataType>
								<Label>@SYS22997</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SalesUnitId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993456</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>SalesUnit</ExtendedDataType>
								<Label>@SYS14614</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BOMUnitId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1503238551</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>BOMUnitId</ExtendedDataType>
								<Label>@SYS3622</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS336005</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SalesTaxation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>SalesTaxItemGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TaxItemGroup</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Sales_TaxWithholdCalculate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>GB,IE,SA</CountryRegionCodes>
								<ElementPosition>1670265058</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS81757</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>Sales_TaxWithholdItemGroup</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>GB,IE,SA</CountryRegionCodes>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Sales_TaxWithholdItemGroup_TaxWithholdItemGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>VendCISTaxWithholdItemGroup</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS336004</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PurchaseTaxation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PurchTaxItemGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TaxItemGroup</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Purch_TaxWithholdCalculate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>GB,IE,SA</CountryRegionCodes>
								<ElementPosition>1670265058</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS81758</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS81757</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>Purch_TaxWithholdItemGroup</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>GB,IE,SA</CountryRegionCodes>
								<ElementPosition>1908874352</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Purch_TaxWithholdItemGroup_TaxWithholdItemGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<ExtendedDataType>VendCISTaxWithholdItemGroup</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS336002</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Vendor</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PrimaryVendorId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemPrimaryVendId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PrimaryVendorProductId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>EcoResPrimaryVendorProductId</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS71494</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Prices</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>PurchasePrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Price</ExtendedDataType>
								<Label>@SYS12550</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SalesPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Price</ExtendedDataType>
								<Label>@SYS5755</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>InventoryPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Price</ExtendedDataType>
								<Label>@SYS93994</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS12983</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<ShowShortCut>No</ShowShortCut>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>