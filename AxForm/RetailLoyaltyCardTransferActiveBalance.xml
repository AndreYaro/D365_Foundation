<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailLoyaltyCardTransferActiveBalance</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailLoyaltyCardTransferActiveBalance extends FormRun
{
    private const str titleStr = 'title';
    private const str groupStr = 'group';
    private const str activeStr = 'activePoints';
    private const str pointsStr = 'pointsToTransfer';
    private const int controlWidth = 40;

    private RetailLoyaltyCard rlc;
    private RetailLoyaltyRewardPointAmountQty availablePoints[];
    private Array c = new Array(Types::Class);
    private Array rewardPoints = new Array(Types::Record);

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes form with fields necessary.
    /// </summary>
    public void init()
    {
        QueryBuildDataSource qbdsRewardPoint, qbdsSchemeRewardPoint, qbdsScheme, qbdsLoyaltyGroup, qbdsCardTier;
        super();

        if (element.args())
        {
            if (element.args().record() && element.args().record().TableId == tableNum(RetailLoyaltyCard))
            {
                rlc = element.args().record();
                RetailLoyaltyCard_CardNumber.text(rlc.CardNumber);
            }
        }

        // Add data sources to RetailLoyaltyRewardPoint in order to filter reward points by loyalty card
        qbdsRewardPoint = RetailLoyaltyRewardPoint_ds.query().dataSourceTable(tableNum(RetailLoyaltyRewardPoint));

        qbdsSchemeRewardPoint = qbdsRewardPoint.addDataSource(TableNum(RetailLoyaltySchemeRewardPointView), tableStr(RetailLoyaltySchemeRewardPointView));
        qbdsSchemeRewardPoint.joinMode(JoinMode::ExistsJoin);
        qbdsSchemeRewardPoint.addLink(fieldNum(RetailLoyaltyRewardPoint, RecId), fieldNum(RetailLoyaltySchemeRewardPointView, RewardPoint));

        qbdsScheme = qbdsSchemeRewardPoint.addDataSource(TableNum(RetailLoyaltyScheme), tableStr(RetailLoyaltyScheme));
        qbdsScheme.joinMode(JoinMode::ExistsJoin);
        qbdsScheme.addLink(fieldNum(RetailLoyaltySchemeRewardPointView, LoyaltyScheme), fieldNum(RetailLoyaltyScheme, RecId));

        qbdsLoyaltyGroup = qbdsScheme.addDataSource(TableNum(RetailAffiliation), tableStr(RetailAffiliation));
        qbdsLoyaltyGroup.joinMode(JoinMode::ExistsJoin);
        qbdsLoyaltyGroup.addLink(fieldNum(RetailLoyaltyScheme, Affiliation), fieldNum(RetailAffiliation, RecId));

        qbdsCardTier = qbdsLoyaltyGroup.addDataSource(TableNum(RetailLoyaltyCardTier), tableStr(RetailLoyaltyCardTier));
        qbdsCardTier.joinMode(JoinMode::ExistsJoin);
        qbdsCardTier.addLink(fieldNum(RetailAffiliation, RecId), fieldNum(RetailLoyaltyCardTier, Affiliation));


        // Set up Fields
        this.populateFromRequest();
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFromRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dynamically generates fields for the form based on loyalty programs card is enrolled in.
    /// </summary>
    private void populateFromRequest()
    {
        
        RetailLoyaltyRewardPoint_ds.executeQuery();
        RetailLoyaltyRewardPoint rewardPoint = RetailLoyaltyRewardPoint_ds.getFirst();
        
        FormRealControl tmp;
        FormStaticTextControl heading;
        int i = 1;
        while (rewardPoint)
        {
            // Create reward point id header for each group of fields
            heading = gridtab.addControl(FormControlType::StaticText, titleStr + int2Str(i));
            heading.text(rewardPoint.RewardPointId);
            heading.widthMode(FormWidth::SizeToAvailable);

            // Add a group to contain the fields
            FormGroupControl groupControl = gridtab.addControl(FormControlType::Group, groupStr + int2Str(i));
            groupControl.widthMode(FormWidth::SizeToAvailable);
            groupControl.columnsMode(ColumnsMode::Fixed);
            groupControl.columns(3);

            // Add a field to display the available points to transfer
            tmp = groupControl.addControl(FormControlType::Real, activeStr + int2Str(i));
            tmp.allowEdit(false);
            availablePoints[i] = max(RetailLoyaltyCardRewardPointTrans::calcPoints(rlc, rewardPoint.recid, RetailLoyaltyPointStatusTypeBase::Active),0);
            tmp.realValue(availablePoints[i]);
            tmp.displayLength(controlWidth);
            tmp.label("@Retail:RetailAvailablePoints");

            // Add a field to take user input on how many points to transfer.
            c.value(i, groupControl.addControl(FormControlType::Real, pointsStr + int2Str(i)));
            c.value(i).realValue(0);
            c.value(i).displayLength(controlWidth);
            c.value(i).allowEdit(false);
            c.value(i).label("@Retail:RetailPointsToTransfer");
            c.value(i).allowNegative(false);
            rewardPoints.value(i, rewardPoint);
            
            i += 1;
            rewardPoint = RetailLoyaltyRewardPoint_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTimeControl_validate</Name>
				<Source><![CDATA[
    public boolean runTimeControl_validate(FormRealControl realControl)
    {
        boolean ret;

        ret = realControl.validate(); // Same as calling super in the control::validate
        str number = subStr(realControl.name(), strLen(pointsStr)+1,999);
        if (ret && (realControl.realValue() < 0 || availablePoints[str2Int(number)] < realControl.realValue()))
        {
            ret = checkFailed("@Retail:RetailNotEnoughPointsToTransfer");
        }
        
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Validates that all conditions are met before closing the dialog and transferring points.
    /// </summary>
    public void closeOk()
    {
        RetailTracer::Info('Retail', 'RetailLoyaltyCardTransferActiveBalance', 'Clicked OK');
        boolean ret = true;

        if (!RetailLoyaltyCard_DestCardNumber.validate())
        {
            // validate that destination card is able to receive points
            ret = false;
        }
        else
        {
            for (int i = 1; i <= c.lastIndex() && ret; i++)
            {
                if (!this.runTimeControl_validate(c.value(i)))
                {
                    // validate that fields have valid point values
                    ret = false;
                }
            }
        }

        if (ret)
        { 
            RetailLoyaltyCardNumber src = RetailLoyaltyCard_CardNumber.text();
            RetailLoyaltyCardNumber dest = RetailLoyaltyCard_DestCardNumber.text();
        
            for (int i = 1; i <= c.lastIndex(); i++)
            {
                // for each field control associated with a reward point transfer the point amount requested
                RetailLoyaltyRewardPointsTransfer::transferLoyaltyPointsFromActiveCard(src, dest, rewardPoints.value(i), c.value(i).realValue());
            }
  
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        RetailTracer::Info('Retail', 'RetailLoyaltyCardTransferActiveBalance', 'Clicked Cancel.');
        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailLoyaltyRewardPoint</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource qbdsCardTier;
            QueryBuildDataSource qbdsRewardPoint;
            // Filter reward points to those are associated to the loyalty card
            qbdsCardTier = this.query().dataSourceTable(tableNum(RetailLoyaltyCardTier));
            qbdsCardTier.clearRanges();
            qbdsCardTier.addRange(fieldNum(RetailLoyaltyCardTier, LoyaltyCard)).value(queryValue(rlc.RecId));

            qbdsRewardPoint = this.query().dataSourceTable(tableNum(RetailLoyaltyRewardPoint));
            qbdsRewardPoint.clearRanges();
            qbdsRewardPoint.addRange(fieldNum(RetailLoyaltyRewardPoint, Redeemable)).value(queryValue(1));
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RetailLoyaltyCard_DestCardNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Looks for valid destination cards in datasource.
        /// </summary>
        public void lookup()
        {
            TableLookup_RU          sysTableLookup;
            Query                   query = new Query();
            QueryBuildDataSource    queryBuildDataSource;
            QueryBuildRange         queryBuildRange;

            sysTableLookup = TableLookup_RU::newParameters(tablenum(RetailLoyaltyCard), RetailLoyaltyCard_DestCardNumber);
            queryBuildDataSource = query.addDataSource(tablenum(RetailLoyaltyCard));

            queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailLoyaltyCard, CardTenderType));
            queryBuildRange.value(SysQuery::valueNot(RetailLoyaltyTenderTypeBase::Blocked));
            queryBuildRange.status(RangeStatus::Hidden);

            queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailLoyaltyCard, CardNumber));
            queryBuildRange.value(SysQuery::valueNot(RetailLoyaltyCard_CardNumber.text()));
            queryBuildRange.status(RangeStatus::Hidden);

            sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, CardNumber));
            sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, CardTenderType));
            sysTableLookup.addLookupfield(fieldnum(RetailLoyaltyCard, Party));
        
            sysTableLookup.addSelectionField(fieldnum(RetailLoyaltyCard, CardNumber));

            sysTableLookup.parmQuery(query);
            sysTableLookup.parmUseLookupValue(true);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates card chosen to receive transfer.
        /// </summary>
        /// <returns>ret</returns>
        public boolean validate()
        {
            boolean ret = RetailLoyaltyRewardPointsTransfer::validateDestinationLoyaltyCard(RetailLoyaltyCard_DestCardNumber.text());
            if (RetailLoyaltyCard_DestCardNumber.text() == RetailLoyaltyCard_CardNumber.text()) 
            {
                ret =  checkFailed("@Retail:RetailDestinationMatchesSource");
            }
            if (ret)
            {
                RetailSharedParameters rsp;
                select BlockTransferBetweenDifferentLoyalty from rsp;

                if (rsp.BlockTransferBetweenDifferentLoyalty)
                {
                    RetailLoyaltyCard src, dest;
                    RetailLoyaltyCardTier t1, t2;

                    select RecId from src where src.CardNumber == RetailLoyaltyCard_CardNumber.text();
                    select RecId from dest where dest.CardNumber == RetailLoyaltyCard_DestCardNumber.text();

                    select count(RecId) from t1
                    join t2 where t1.AFFILIATION == t2.AFFILIATION
                        && (t1.LOYALTYCARD == src.RecId && t2.LOYALTYCARD == dest.RecId);
                
                    if (t1.RecId == 0)
                    {
                        ret = checkFailed("@Retail:RetailBlockTransferBetweenDifferentLoyaltyError");
                    }
                }
            }

            for (int i = 1; i <= c.lastIndex(); i++)
            {
                if (!ret)
                {
                    c.value(i).allowEdit(false);
                }
                else
                {
                    c.value(i).allowEdit(true);
                }
            }

            if (!ret)
            {
                FormCheckBoxControl1.allowEdit(false);
            }
            else
            {
                FormCheckBoxControl1.allowEdit(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormCheckBoxControl1</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///	Sets fields to transfer all available points and their editability.
        /// </summary>
        public void clicked()
        {
            RetailTracer::Info('Retail', 'RetailLoyaltyCardTransferActiveBalance', 'Clicked Transfer All');

            for (int i = 1; i <= c.lastIndex(); i++)
            {
                if (!this.value())
                {
                    c.value(i).realValue(availablePoints[i]);
                    c.value(i).allowEdit(false);
                }
                else
                {
                    c.value(i).allowEdit(true);
                }
            }
            
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailLoyaltyCard</Name>
			<Table>RetailLoyaltyCard</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CardNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardTenderType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReplacementCard</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailLoyaltyRewardPoint</Name>
			<Table>RetailLoyaltyRewardPoint</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ExpirationTimeUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpirationTimeValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Redeemable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RedeemRanking</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RewardPointCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RewardPointId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RewardPointType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VestingTimeUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VestingTimeValue</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>Tab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Tab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>CardsTab</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FormGroupControl1</Name>
										<Pattern>FieldsFieldGroups</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>RetailLoyaltyCard_CardNumber</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>RetailLoyaltyCardNumber</ExtendedDataType>
												<Label>@SYS4004418</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>RetailLoyaltyCard_DestCardNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>RetailLoyaltyCardNumber</ExtendedDataType>
												<Label>@SYS4009770</Label>
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
									</AxFormControl>
								</Controls>
								<Caption>@Retail:RetailCards</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>GridTab</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FormCheckBoxControl1</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Retail:RetailTransferAllPoints</Label>
									</AxFormControl>
								</Controls>
								<Caption>@Retail:RetailPointsAvailableToTransfer</Caption>
							</AxFormControl>
						</Controls>
						<Style>FastTabs</Style>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>Command</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKCommandButton</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>