<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenseLineFieldBulkEdit</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenseLineFieldBulkEdit extends FormRun
{
    TrvExpenseLineFieldBulkEdit expenseLineFieldBulkEdit;

    HcmWorkerRecId creatingWorker;
    LegalEntityRecId creatingWorkerLegalEntity;
    SelectableDataArea interCompanyLegalEntityName;

}
]]></Source>
			</Method>
			<Method>
				<Name>updateOkButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable Ok button when an attribute has been selected for bulk edit.
    /// Disable Ok button if no attributes have been selected for bulk edit.
    /// </summary>
    public void updateOkButton()
    {
        OKButton.enabled(CostTypeCheckbox.value() || ProjectCheckbox.value() || AdditionalInformationCheckbox.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (!element.args() || !element.args().record())
        {
            throw error("@SYS22996");
        }

        switch (element.args().dataset())
        {
            case tableNum(TrvExpTrans):
                TrvExpTrans localTrvExpTrans = element.args().record();
                TrvExpTable trvExpTable = TrvExpTable::find(localTrvExpTrans.ExpNumber);

                if (trvExpTable.RecId != 0)
                {
                    creatingWorker = trvExpTable.CreatingWorker;
                    creatingWorkerLegalEntity = trvExpTable.LegalEntity;
                    interCompanyLegalEntityName = trvExpTable.intercompanyLegalEntityName();
                }
                else
                {
                    creatingWorker = localTrvExpTrans.CreatingWorker;
                    creatingWorkerLegalEntity = localTrvExpTrans.LegalEntity;
                    interCompanyLegalEntityName = localTrvExpTrans.InterCompanyLE;
                }

                break;

            default:
                throw error("@SYS22996"); // Form called incorrectly
        }

        List list = new List(Types::Int64);
        FormDataSource fds = FormDataUtil::getFormDataSource(element.args().record());
        for (TrvExpTrans localTrvExpTrans = fds.getFirst(1) ? fds.getFirst(1) : fds.cursor(); localTrvExpTrans; localTrvExpTrans = fds.getNext())
        {
            // Iterate over expense line datasource and add records to be used for bulk editing
            list.addEnd(localTrvExpTrans.RecId);
        }

        // Initialize class
        expenseLineFieldBulkEdit = TrvExpenseLineFieldBulkEdit::construct(list);

        ExpenseIFieldVisibilityFinder fieldVisibilityFinder = this.args().caller() as ExpenseIFieldVisibilityFinder;
        boolean isProjectEditable;
        boolean isAdditionalInformationEditable;

        // Set the visibility of the relevant fields based on the new visibility manager if called from the expense report details form; otherwise, use the old visibility manager
        if (fieldVisibilityFinder)
        {
            isProjectEditable = fieldVisibilityFinder.isFieldVisible(int2Str(fieldNum(TrvExpTrans, ProjId)), tableNum(TrvExpTrans));
            isAdditionalInformationEditable = fieldVisibilityFinder.isFieldVisible(int2Str(fieldNum(TrvExpTrans, AdditionalInformation)), tableNum(TrvExpTrans));
        }
                
        ProjectCheckbox.visible(isProjectEditable);
        ProjectField.visible(isProjectEditable);

        AdditionalInformationCheckbox.visible(isAdditionalInformationEditable);
        AdditionalInformationField.visible(isAdditionalInformationEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields on the class that are presented to the user on the <c>TrvExpenseLineFieldBulkEdit</c> form.
    /// </summary>
    public void initParms()
    {
        // Cost type
        expenseLineFieldBulkEdit.parmEditCostType(CostTypeCheckbox.value());
        expenseLineFieldBulkEdit.parmCostType(CostTypeField.valueStr());

        // Additional information
        expenseLineFieldBulkEdit.parmEditAdditionalInformation(AdditionalInformationCheckbox.value());
        expenseLineFieldBulkEdit.parmAdditionalInformation(AdditionalInformationField.valueStr());

        // Project Id
        expenseLineFieldBulkEdit.parmEditProjId(ProjectCheckbox.value());
        expenseLineFieldBulkEdit.parmProjId(ProjectField.valueStr());
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CostTypeCheckbox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enable or disable CostType field depending on state of CostType checkbox
        /// </summary>
        public void clicked()
        {
            super();

            boolean isCostTypeSelected = CostTypeCheckbox.value();

            element.updateOkButton();

            CostTypeField.allowEdit(isCostTypeSelected);
            CostTypeField.mandatory(isCostTypeSelected);

            if (!isCostTypeSelected)
            {
                // Clear value when project is not selected for bulk edit
                CostTypeField.text('');
            }
            else
            {
                if(Box::yesNo("@Expense:CategoryChangeWarning" , DialogButton::No) == DialogButton::No)
                {
                    CostTypeCheckbox.value(0);

                    element.updateOkButton();
                    CostTypeField.allowEdit(!isCostTypeSelected);
                    CostTypeField.mandatory(!isCostTypeSelected);
                    CostTypeField.text('');
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CostTypeField</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseCategoryLookup(this, TrvCategoryLookupType::CreditCardExpense);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            // Cannot change to an import only category -
            // Form level validation because other forms and entry points can change to
            // an import only category
            TrvCostType localCostType = TrvCostType::find(CostTypeField.valueStr());
            if (localCostType.isImportOnly)
            {
                return checkFailed("@Expense:CannotSelectImportOnlyCategoryForExpenseLine");
            }

            ret = super();

            // Check which lines are valid for selected CostType
            expenseLineFieldBulkEdit.parmCostType(CostTypeField.valueStr());
            expenseLineFieldBulkEdit.validateAllCostType();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectCheckbox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enable or disable project field depending on state of project checkbox
        /// </summary>
        public void clicked()
        {
            super();

            boolean isProjectSelected = ProjectCheckbox.value();

            element.updateOkButton();

            ProjectField.allowEdit(isProjectSelected);

            if (!isProjectSelected)
            {
                // Clear value when project is not selected for bulk edit
                ProjectField.text('');
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectField</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Open project id lookup for the company for the expense report header as lines could be intercompany
            TrvExpenseProjectHelper::createProjectLookup(creatingWorker,
                                                            this,
                                                            "",
                                                            interCompanyLegalEntityName, 
                                                            creatingWorkerLegalEntity);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Check which lines are valid for selected project Id
            expenseLineFieldBulkEdit.parmProjId(ProjectField.valueStr());
            expenseLineFieldBulkEdit.validateAllProjId();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdditionalInformationCheckbox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enable or disable additional information field depending on state of additional information checkbox
        /// </summary>
        public void clicked()
        {
            super();

            boolean isAdditionalInformationSelected = AdditionalInformationCheckbox.value();

            element.updateOkButton();

            AdditionalInformationField.allowEdit(isAdditionalInformationSelected);

            if (!isAdditionalInformationSelected)
            {
                // Clear value when Additional information is not selected for bulk edit
                AdditionalInformationField.text('');
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AdditionalInformationField</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Check which lines are valid for selected additional information
            expenseLineFieldBulkEdit.parmAdditionalInformation(AdditionalInformationField.valueStr());
            expenseLineFieldBulkEdit.validateAllAdditionalInformation();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Perform the bulk edit operation
        /// </summary>
        public void clicked()
        {
            super();

            element.initParms();
            expenseLineFieldBulkEdit.performMassUpdate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS190556</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SecondaryInstructions</Name>
				<AllowEdit>No</AllowEdit>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@Expense:ExpenseLineBulkEditInstructions</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CostType</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>CostTypeCheckbox</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>25</Height>
								<HeightMode>Manual</HeightMode>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS101358</Label>
								<Style>Checkbox</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CostTypeField</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Project</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ProjectCheckbox</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>25</Height>
								<HeightMode>Manual</HeightMode>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS110827</Label>
								<Style>Checkbox</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjectField</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ProjId</ExtendedDataType>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AdditionalInformation</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>AdditionalInformationCheckbox</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>100</Height>
								<HeightMode>Manual</HeightMode>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS101729</Label>
								<Style>Checkbox</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>AdditionalInformationField</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
								<Label>@SYS101729</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CostTypeText</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>CostTypeWarning</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Text>@Expense:CategoryChangeWarning</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS453</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>