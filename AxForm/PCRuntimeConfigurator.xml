<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PCRuntimeConfigurator</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PCRuntimeConfigurator extends FormRun
{
    static private readonly Decimals returnCostPriceDecimals = new SysDictType(extendedTypeNum(ReturnCostPrice)).effectivePrecision();

    PCExecuteVariantConfiguration   executeVariantConfiguration;

    PCProductConfigurationModel     productModel;

    PCRuntimeMode               runtimeMode;

    PCProductConfiguration      productConfiguration;

    // Form parts
    Object attributeTypeDetails;
    Object priceDlvDateCalculation;

    //price and delivery date calculations
    real                        price;
    date                        deliveryDate;

    // For price calculation
    TableId                     sourceLineTableId;
    Common                      sourceDocumentLine;
    ItemId                      itemId;
    EcoResProductName           productName;

    PCRuntimePriceModelInstance  runtimePriceModelInstance;

    boolean                     isRunningInMultiCompany;

    PCRuntimePriceModel         runtimePriceModel;
    PCRuntimePriceBreakdown     runtimePriceBreakdown;

    PCRuntimeModel      runtimeModel;
    PCPriceMethod       priceMethod;

    List                priceElements;
    boolean             isConfigurationCompleted;

    LanguageId translationLanguage;
    LanguageId systemLanguage;

    boolean closeOK;

    boolean allowEdit;

    private PCInstrumentationLogger logger;

}
]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationValues</Name>
				<Source><![CDATA[
    private str getConfigurationValues(PCProductConfiguration _productConfiguration)
    {
        PCConfigurationLoader loader = PCConfigurationLoader::construct();
        loader.load(_productConfiguration);
        return loader.getValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private PCInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = PCInstrumentationLogger::createLogger(formStr(PCRuntimeConfigurator));            
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the delivery date and shows it in the form part.
    /// </summary>
    public void calculateDeliveryDate()
    {
        executeVariantConfiguration.parmConfigurationState(element.getConfigurationState());
        deliveryDate = executeVariantConfiguration.calculateDeliveryDate();
        this.setPriceDlvDateCalculationValues(price, deliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the price and shows it in the form part.
    /// </summary>
    public void calculatePrice()
    {
        executeVariantConfiguration.parmConfigurationState(element.getConfigurationState());
        price = executeVariantConfiguration.calculatePrice();
        this.setPriceDlvDateCalculationValues(price, deliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether price and ship date can be calculated.
    /// </summary>
    /// <returns>
    /// true if price and ship date can be calculated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Used by the <c>PCConfiguratorCalculationSection</c> form part.
    /// </remarks>
    public boolean canCalculateValues()
    {
        return !isRunningInMultiCompany
            && (runtimeMode == PCRuntimeMode::EditVariant || runtimeMode == PCRuntimeMode::NewVariant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks wether configuration has solution.
    /// </summary>
    /// <returns>tur if solution exists; otherwise false</returns>
    public boolean isConfigurationCompleted()
    {
        return isConfigurationCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic after the specified runtime control changed to the given state.
    /// </summary>
    /// <param name = "_runTimeControl">The runtime control</param>
    /// <param name = "_state">The new state</param>
    protected void pcRuntimeControlStateChanged(PCRuntimeControl _runTimeControl, int _state)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlAttributeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic after the specified runtime control had the given attribute changed to the given value.
    /// </summary>
    /// <param name = "_runTimeControl">The runtime control.</param>
    /// <param name = "_name">The name of the attribute.</param>
    /// <param name = "_value">The value of the attribute.</param>
    protected void pcRuntimeControlAttributeChanged(PCRuntimeControl _runTimeControl, str _name, str _value)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlAttributeValueChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic after the specified runtime control had the given attribute value changed.
    /// </summary>
    /// <param name = "_runTimeControl">The runtime control.</param>
    /// <param name = "_instanceId">The instance ID of the attribute.</param>
    /// <param name = "_attributeXPath">The path of the attribute.</param>
    /// <param name = "_previousValue">The previous value of the attribute.</param>
    /// <param name = "_newValue">The new value of the attribute.</param>
    /// <param name = "_attributeValueOrigin">The origin of the attribute value.</param>
    protected void pcRuntimeControlAttributeValueChanged(PCRuntimeControl _runTimeControl, str _instanceId, str _attributeXPath, str _previousValue, str _newValue, Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ValueOrigin _attributeValueOrigin)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlComponentSelectedChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic after the specified runtime control had the given selected component changed.
    /// </summary>
    /// <param name = "_runTimeControl">The runtime control.</param>
    /// <param name = "_instanceId">The instance ID of the component.</param>
    /// <param name = "_solverName">The solver name of the component.</param>
    protected void pcRuntimeControlComponentSelectedChanged(PCRuntimeControl _runTimeControl, str _instanceId, str _solverName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlValidateUserAssignedValueChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional validation logic after the specified runtime control had the given attribute value changed by the user.
    /// </summary>
    /// <param name = "_runTimeControl">The runtime control.</param>
    /// <param name = "_instanceId">The instance ID of the attribute.</param>
    /// <param name = "_previousValue">The previous value of the attribute.</param>
    /// <param name = "_newValue">The new value of the attribute.</param>
    /// <returns>true if the change is valid; otherwise, false.</returns>
    protected boolean pcRuntimeControlValidateUserAssignedValueChange(PCRuntimeControl _runTimeControl, str _instanceId, str _previousValue, str _newValue)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcRuntimeControlGetAttributeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs additional logic when creating a contract to display attribute details.
    /// </summary>
    /// <param name = "_recId">The <c>EcoResCategoryAttribute</c> record ID.</param>
    /// <param name = "_contract">The attribute details information being created.</param>
    protected PCAttributeDetailsContract pcRuntimeControlGetAttributeDetails(int64 _recId, PCAttributeDetailsContract _contract)
    {
        return _contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPriceAndShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the price and ship date values in the associated form part.
    /// </summary>
    public void clearPriceAndShipDate()
    {
        price           = 0;
        deliveryDate    = dateNull();

        this.setPriceValues(price, deliveryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dispose the configurator to free resources when the form is closed.
    /// </summary>
    public void close()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the form when clicking OK if the configuration is complete.
    /// </summary>
    public void closeOk()
    {
        PCAdaptor                       adaptor;
        PCXmlParseConfigurationInstance xmlParseConfigurationInstance;
        
        using (var a = this.logger().runtime().closeOk())
        {
            str solution = PCRuntimeControl.xmlSolution();

            if (!solution)
            {
                using (var ar = this.logger().runtime().requestSolutionCallback())
                {
                    PCRuntimeControl.requestSolutionCallback(true);
                    return;
                }
            }

            if (runtimeMode == PCRuntimeMode::EditTemplate)
            {
                this.prepareToClose();

                adaptor = PCAdaptor::construct();
                adaptor.parmProductConfigurationModel(PCAdaptorProductConfigurationModel::construct(productModel));

                xmlParseConfigurationInstance = PCXmlParseConfigurationInstance::construct();

                xmlParseConfigurationInstance.parse(productModel, productConfiguration, solution, solution, runtimeMode, adaptor);
            }
            else
            {
                this.ConfigurationIsComplete();
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConfigurationIsComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes action based on the status of whether or not the configuration is complete.
    /// </summary>
    private void ConfigurationIsComplete()
    {
        if (runtimeMode == PCRuntimeMode::Test)
        {
            PCRuntimeLibrary::validateGeneration(productModel, PCRuntimeControl.xmlSolution());
        }
        else
        {
            this.prepareToClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePriceBreakdown</Name>
				<Source><![CDATA[
    public void enablePriceBreakdown()
    {
        priceBreakdownButton.visible(PCRuntimePriceMode::supportsAttributeBasedPricing(this.parmPriceMethod(), runtimeMode, this.parmSourceDocumentLine()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurationState</Name>
				<Source><![CDATA[
    public PCConfigurationState getConfigurationState()
    {
        PCConfigurationState configuration = PCConfigurationState::construct();

        configuration.parmBoundValues(PCRuntimeControl.xmlSolution());
        configuration.parmDeliveryDate(this.parmDeliveryDate());
        configuration.parmPrice(this.parmPrice());
        configuration.parmIsClosedOK(closeOK);

        return configuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {        
        using (var a = this.logger().runtime().initForm())
        {
            Args args     = element.args();
            str  xmlModel = args.parm();

            if (!args.record() || !xmlModel || args.parmEnumType() != enumNum(PCRuntimeMode) || !args.parmEnum())
            {
                throw error(Error::missingRecord(funcName()));
            }

            var parser = PCRuntimeXmlParser::construct();
            parser.parse(xmlModel);

            translationLanguage = infolog.language();
            systemLanguage = SystemParameters::getSystemLanguageId();

            PCRuntimeVisitorPriceModel runtimeVisitorPrice = PCRuntimeVisitorPriceModel::Construct();
            runtimeModel = parser.getRuntimeModel();

            runtimeModel.parmRootComponent().accept(runtimeVisitorPrice);
            runtimePriceModel = runtimeVisitorPrice.parmRuntimePriceModel();

            runtimePriceBreakdown = PCRuntimePriceBreakdown::construct();
            runtimePriceBreakdown.parmCurrencyCode(runtimePriceModelInstance.parmCurrency());
            runtimePriceBreakdown.init(runtimeModel, runtimePriceModel, sourceDocumentLine, itemId, productName);

            // Price 0 is regarded as no price by consumers which call parmPrice.
            price           = 0.0;
            deliveryDate    = dateNull();

            productModel = args.record();

            super();

            this.loadArgs(args);

            allowEdit = runtimeMode != PCRuntimeMode::ViewVariant;
        
            PCRuntimeControl.xmlModel(xmlModel);
            if (PCModelCachingForExistingVariantFixedFlight::instance().isEnabled())
            {
                PCRuntimeControl.xmlTemplate(element.getConfigurationValues(productConfiguration));
            }
            PCRuntimeControl.solverStrategy(productModel.getSolverStrategy());
            PCRuntimeControl.columns(productModel.Columns);
            PCRuntimeControl.customAllowEdit(allowEdit);
            PCRuntimeControl.jsonEnabledFeatures(PCRuntimeFeaturesJson::instance().enabledFeatures());

            if (PCTaskRecorderImprovementsFlight::instance().isEnabled())
            {
                PCRuntimeControl.setRuntimeModel(runtimeModel);
            }

            this.initOnlyShowFeasibleValues(PCRuntimeControl.onlyShowFeasibleValues());

            PCRuntimeConfiguratorInfo_DS.create();
            PCRuntimeConfiguratorInfo.insert();

            this.enablePriceBreakdown();

            // Set model details
            this.setModelInformation();
            this.setMainInstruction();

            boolean templateMode = runtimeMode == PCRuntimeMode::ViewTemplate || runtimeMode == PCRuntimeMode::EditTemplate;

            OKButton.enabled(templateMode && allowEdit);

            this.initPriceControls();

            closeOK = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnlyShowFeasibleValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Show only feasible form control value.
    /// </summary>
    /// <param name = "_onlyShowFeasibleValueValue">true if only feasible values should be shown; otherwise, false.</param>
    public void initOnlyShowFeasibleValues(boolean _onlyShowFeasibleValuesValue)
    {
        PCRuntimeControl.onlyShowFeasibleValues(_onlyShowFeasibleValuesValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the contents of the form args.
    /// </summary>
    /// <param name="_args">
    /// The args.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Thrown for wrong args.
    /// </exception>
    private void loadArgs(Args _args)
    {
        Common  lookupRecord = _args.lookupRecord();

        runtimeMode                 = _args.parmEnum();
        executeVariantConfiguration = _args.caller();

        using (var a = this.logger().runtime().loadArgs(runtimeMode))
        {
            switch (runtimeMode)
            {
                case PCRuntimeMode::Test:
                    element.parmSourceLineTableId(tableNum(PCProductConfigurationModel));
                    loadTemplateButton.enabled(true);
                    break;
                case PCRuntimeMode::ViewTemplate,
                PCRuntimeMode::EditTemplate:
                element.parmSourceLineTableId(tableNum(PCTemplateConfiguration));
                    productConfiguration    = lookupRecord as PCProductConfiguration;
                    loadTemplateButton.enabled(false);
                    break;
                case PCRuntimeMode::NewVariant,
                PCRuntimeMode::EditVariant:
                productConfiguration    = lookupRecord as PCProductConfiguration;
                    loadTemplateButton.enabled(true);
                    break;
                case PCRuntimeMode::ViewVariant:
                    productConfiguration    = lookupRecord as PCProductConfiguration;
                    loadTemplateButton.enabled(false);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        // Clearing the lookup record as we don't use it in the form's datasources
        _args.lookupRecord(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceControls</Name>
				<Source><![CDATA[
    public void initPriceControls()
    {
        this.setPriceValues(this.parmPrice(), this.parmDeliveryDate(), true);

        this.enablePriceControls(this.isConfigurationCompleted() && allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePriceControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable controls in the form.
    /// </summary>
    /// <param name="_enable">
    /// A Boolean value determining whether to enable or disable controls.
    /// </param>
    public void enablePriceControls(boolean _enable)
    {
        var canCalculate            = this.canCalculateValues();
        boolean enableCalculateDate = _enable && canCalculate;
        boolean enablePrice         = _enable && canCalculate;
        boolean enablePriceButton   = enablePrice && this.parmPriceMethod() == PCPriceMethod::Cost;

        switch (this.parmSourceLineTableId())
        {
            case tableNum(SalesLine):
                CurrentPrice.enabled(enablePrice);
                calculatePrice.enabled(enablePriceButton);
                CurrentDeliveryDate.enabled(enableCalculateDate);
                calculateDeliveryDate.enabled(enableCalculateDate);
                break;
            case tableNum(SalesQuotationLine):
                CurrentPrice.enabled(enablePrice);
                calculatePrice.enabled(enablePriceButton);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for price and date
    /// </summary>
    /// <param name="_price">The price to show on the info part.</param>
    /// <param name="_date">The ship date to show on the info part.</param>
    /// <param name="_initDefaults">Specifies when the control values should be set with the default values.</param>
    public void setPriceValues(real _price = -1, date _date = dateNull(), boolean _initDefaults = false)
    {
        #define.Nothing('--:--')

        LanguageId locale = (new Session()).PreferredLocale();

        str priceStr = strFmtByLanguage(locale, "{0:N" + int2Str(returnCostPriceDecimals) + "}", _price);
        
        if (priceMethod == PCPriceMethod::Attribute)
        {
            str format = GlobalEx::generateStrConcatFormat(locale);
            priceStr = strFmt(format, priceStr, " ", "( " +Currency::currencyCodeISO(this.parmRuntimePriceModelInstance().parmCurrency()) + " )");
        }

        if (!_initDefaults && (_price > 0 || priceMethod == PCPriceMethod::Attribute))
        {
            PCRuntimeConfiguratorInfo.Price = priceStr;
        }
        else
        {
            PCRuntimeConfiguratorInfo.Price = #Nothing;
        }

        if (_date != dateNull())
        {
            currentDeliveryDate.text(date2StrUsr(_date, DateFlags::FormatAll));
        }
        else
        {
            currentDeliveryDate.text(#Nothing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDate</Name>
				<Source><![CDATA[
    public date parmDeliveryDate(date _deliveryDate = deliveryDate)
    {
        deliveryDate = _deliveryDate;

        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRunningInMultiCompany</Name>
				<Source><![CDATA[
    public boolean parmIsRunningInMultiCompany(boolean _isRunningInMultiCompany = isRunningInMultiCompany)
    {
        using (var a = this.logger().runtime().interCompany(_isRunningInMultiCompany))
        {
            isRunningInMultiCompany = _isRunningInMultiCompany;

            return isRunningInMultiCompany;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public real parmPrice(real _price = price)
    {
        price = _price;

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceMethod</Name>
				<Source><![CDATA[
    public PCPriceMethod parmPriceMethod(PCPriceMethod _priceMethod = priceMethod)
    {
        priceMethod = _priceMethod;

        return priceMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductName</Name>
				<Source><![CDATA[
    public EcoResProductName parmProductName(EcoResProductName _productName = productName)
    {
        productName = _productName;

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimePriceModelInstance</Name>
				<Source><![CDATA[
    public PCRuntimePriceModelInstance parmRuntimePriceModelInstance(PCRuntimePriceModelInstance _runtimePriceModelInstance = runtimePriceModelInstance)
    {
        runtimePriceModelInstance = _runtimePriceModelInstance;

        return runtimePriceModelInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public Common parmSourceDocumentLine(Common _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLineTableId</Name>
				<Source><![CDATA[
    public TableId parmSourceLineTableId(TableId _sourceLineTableId = sourceLineTableId)
    {
        sourceLineTableId = _sourceLineTableId;

        return sourceLineTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareToClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the form for closing by closing form parts.
    /// </summary>
    private void prepareToClose()
    {
        if (PCRuntimePriceMode::supportsAttributeBasedPricing(this.parmPriceMethod(), runtimeMode, this.parmSourceDocumentLine(), true))
        {
            this.savePriceBreakdown();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePriceBreakdown</Name>
				<Source><![CDATA[
    public void savePriceBreakdown()
    {
        runtimePriceBreakdown.savePriceBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentValuesAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current values as XML.
    /// </summary>
    /// <returns>The current values as XML.</returns>
    public str currentValuesAsXML()
    {
        return PCRuntimeControl.xmlCurrentValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainInstruction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the main instruction test according to the run mode.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Exception is thrown for unhandled run mode.
    /// </exception>
    /// <remarks>
    /// This method must be invoked after data sources have been populated since it uses data from them.
    /// </remarks>
    protected void setMainInstruction()
    {
        PCTemplateConfiguration templateConfiguration;

        switch (runtimeMode)
        {
            case PCRuntimeMode::Test:
                element.design().caption(strFmt("@SYS76766", "@SYS118393", productModel.displayName()));
                tabBody.caption(productModel.displayName());
                break;
            case PCRuntimeMode::ViewTemplate,
                PCRuntimeMode::EditTemplate:
                templateConfiguration   = productConfiguration as PCTemplateConfiguration;
                element.design().caption(strFmt("@SYS76766", "@SYS153093", templateConfiguration.displayName()));
                tabBody.caption(templateConfiguration.displayName());
                break;
            case PCRuntimeMode::NewVariant,
                PCRuntimeMode::EditVariant:
                element.design().caption("@SYS40755");
                tabBody.caption("@SYS40755");
                break;
            case PCRuntimeMode::ViewVariant:
                element.design().caption("@SCM:ProductConfigurationViewConfiguredProduct");
                tabBody.caption("@SCM:ProductConfigurationViewConfiguredProduct");
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModelInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the model detailed information in the form.
    /// </summary>
    private void setModelInformation()
    {
        PCProductConfigurationModelTranslation productConfigurationModelTranslation;

        productConfigurationModelTranslation = PCProductConfigurationModelTranslation::findByModelAndLanguage(productModel.RecId, translationLanguage);

        productModelDescription.text(productConfigurationModelTranslation.Description != '' ? productConfigurationModelTranslation.Description : PCProductConfigurationModelTranslation::findByModelAndLanguage(productModel.RecId, systemLanguage).Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCloseOk</Name>
				<Source><![CDATA[
    public void setCloseOk()
    {
        closeOK = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form part with the values.
    /// </summary>
    /// <param name="_price">
    /// The price.
    /// </param>
    public void setPrice(real _price)
    {
        element.parmPrice(_price);
         this.setPriceValues(element.parmPrice(), element.parmDeliveryDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDlvDateCalculationValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form part with the values.
    /// </summary>
    /// <param name="_price">
    /// The price.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    public void setPriceDlvDateCalculationValues(real _price = -1, date _date = dateNull())
    {
        element.setPriceValues(_price, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPriceBreakdown</Name>
				<Source><![CDATA[
    public void showPriceBreakdown()
    {
        runtimePriceBreakdown.showPriceBreakdown();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        const int MaxColumnsForMediumDialog = 1;
        const int MaxColumnsForLargeDialog  = 2;

        if (productModel.columns <= MaxColumnsForMediumDialog)
        {
            element.design().dialogSize(DialogSize::Medium);
        }
        else if (productModel.columns <= MaxColumnsForLargeDialog)
        {
            element.design().dialogSize(DialogSize::Large);
        }
        // else stay Full-sized
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentValuesReadyCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Callback method which is invoked when the current values have been requested and become available. 
    /// </summary>
    public void currentValuesReadyCallback()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestCurrentValues</Name>
				<Source><![CDATA[
    public void requestCurrentValues()
    {
        using (var ar = this.logger().runtime().requestCurrentValuesCallback())
        {
            PCRuntimeControl.requestCurrentValuesCallback(true);
            return;
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CalculatePrice</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.calculatePrice();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CalculateDeliveryDate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.calculateDeliveryDate();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LoadTemplateButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args                    args = new Args();
            Object                  formRun;
            PCTemplateConfiguration templateConfiguration;

            super();

            args.openMode(OpenMode::View);
            formRun = PCModelingLibrary::loadForm(formStr(PCTemplateConfigurationSelection), productModel, this, true, true, args);
            if (formRun.closedOK())
            {
                templateConfiguration = formRun.selectedTemplateConfiguration();
                PCRuntimeControl.xmlTemplate(element.getConfigurationValues(templateConfiguration));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriceBreakdownButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.showPriceBreakdown();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PCRuntimeControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>controlStateChanged</Name>
						<Source><![CDATA[
        public void controlStateChanged(int _state)
        {
            using (var a = element.logger().runtime().controlStateChanged(_state))
            {
                super(_state);

                if (_state == PCRuntimeControlState::Processing)
                {
                    PCRuntimeConfiguratorInfo.Status = "@GLS106022";
                    element.setPriceDlvDateCalculationValues();
                }
                else
                {
                    PCRuntimeConfiguratorInfo.Status = '';
                }

                isConfigurationCompleted = _state == PCRuntimeControlState::Completed;
                boolean templateMode = runtimeMode == PCRuntimeMode::ViewTemplate || runtimeMode == PCRuntimeMode::EditTemplate;
                element.enablePriceControls(isConfigurationCompleted);
                OKButton.enabled((isConfigurationCompleted || templateMode) && allowEdit);

                element.pcRuntimeControlStateChanged(this, _state);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>calculationSummaryChanged</Name>
						<Source><![CDATA[
        public void calculationSummaryChanged(str _args)
        {
            var result = new Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.CalculationSummaryEventArgs();
            Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.CalculationSummaryEventArgs args = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize(_args, result.GetType());

            CLRObject calculationResults;
            CLRObject enumerator;
            Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.CalculationResult calculationResult;

            real        subPrice;
            str         priceStringValue;

            calculationResults  = args.get_Results();
            enumerator          = calculationResults.GetEnumerator();

            runtimePriceModel.clearResults();

            while (enumerator.MoveNext())
            {
                calculationResult = enumerator.get_Current();
                if (calculationResult.get_ConditionValue())
                {
                    priceStringValue    = calculationResult.get_ExpressionValue();
                    subPrice            = str2num(priceStringValue);
                }
                else
                {
                    subPrice = 0;
                }

                runtimePriceModel.updateNode(
                                    calculationResult.get_XPath(),
                                    calculationResult.get_ConditionValue(),
                                    subPrice,
                                    runtimePriceModelInstance);
            }

            element.setPrice(runtimePriceModel.getTotal(runtimePriceModelInstance.parmCurrency()));
        }

]]></Source>
					</Method>
					<Method>
						<Name>solutionReady</Name>
						<Source><![CDATA[
        public void solutionReady()
        {
            element.closeOk();
        }

]]></Source>
					</Method>
					<Method>
						<Name>currentValuesReady</Name>
						<Source><![CDATA[
        public void currentValuesReady()
        {
            element.currentValuesReadyCallback();
        }

]]></Source>
					</Method>
					<Method>
						<Name>configurationError</Name>
						<Source><![CDATA[
        public void configurationError(str _errorJSON)
        {
            using (var a = element.logger().runtime().error())
            {
                var result = new Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.Error();
                Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.Error error = new System.Web.Script.Serialization.JavaScriptSerializer().Deserialize(_errorJSON, result.GetType());

                element.logger().logWarning(_errorJSON);

                warning(PCRuntimeErrorHandler::construct().handleError(error));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getAttributeDetails</Name>
						<Source><![CDATA[
        public PCAttributeDetailsContract getAttributeDetails(int64 _recId)
        {
            EcoResCategoryAttribute     categoryAttribute;
            EcoResAttributeTranslation  translation;

            PCAttributeDetailsContract contract = new PCAttributeDetailsContract();

            if (_recId)
            {
                categoryAttribute = EcoResCategoryAttribute::find(_recId);
                translation = EcoResAttributeTranslation::findByAttributeAndLanguage(categoryAttribute.Attribute, infolog.language());
                contract.parmName(translation.FriendlyName != '' ? translation.FriendlyName : EcoResAttribute::find(categoryAttribute.Attribute).Name);
                contract.parmDescription(translation.Description  != '' ? translation.Description : EcoResAttributeTranslation::findByAttributeAndLanguage(categoryAttribute.Attribute, SystemParameters::getSystemLanguageId()).Description);
            }

            contract = element.pcRuntimeControlGetAttributeDetails(_recId, contract);

            return contract;
        }

]]></Source>
					</Method>
					<Method>
						<Name>attributeChanged</Name>
						<Source><![CDATA[
        public void attributeChanged(str _name, str _value)
        {
            super(_name, _value);

            element.pcRuntimeControlAttributeChanged(this, _name, _value);
        }

]]></Source>
					</Method>
					<Method>
						<Name>componentSelectedChanged</Name>
						<Source><![CDATA[
        public void componentSelectedChanged(str _instanceId, str _solverName)
        {
            super(_instanceId, _solverName);

            element.pcRuntimeControlComponentSelectedChanged(this, _instanceId, _solverName);
        }

]]></Source>
					</Method>
					<Method>
						<Name>attributeValueChanged</Name>
						<Source><![CDATA[
        public void attributeValueChanged(str _instanceId, str _attributeXPath, str _previousValue, str _newValue, int _attributeValueOrigin)
        {
            super(_instanceId, _attributeXPath, _previousValue, _newValue, _attributeValueOrigin);

            element.pcRuntimeControlAttributeValueChanged(this, _instanceId, _attributeXPath, _previousValue, _newValue, _attributeValueOrigin);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateUserAssignedValueChange</Name>
						<Source><![CDATA[
        public boolean validateUserAssignedValueChange(str _instanceId, str _previousValue, str _newValue)
        {
            return super(_instanceId, _previousValue, _newValue)
                && element.pcRuntimeControlValidateUserAssignedValueChange(this, _instanceId, _previousValue, _newValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.setCloseOk();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PCRuntimeConfiguratorInfo</Name>
			<Table>PCRuntimeConfiguratorInfo</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS40755</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>productModelDescription</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ConfiguratorTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>tabPriceDate</Name>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>actionPanePrice</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>calculateGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CalculatePrice</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Read</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<BackgroundColor>WindowBackground</BackgroundColor>
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<NormalImage>Calculate</NormalImage>
												<Style>Link</Style>
												<Text>@SYS40337</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CalculateDeliveryDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Read</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<BackgroundColor>WindowBackground</BackgroundColor>
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<NormalImage>Calculate</NormalImage>
												<Style>Link</Style>
												<Text>@SYS40338</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ControlGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrentPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@SYS146044</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Price</DataField>
										<DataSource>PCRuntimeConfiguratorInfo</DataSource>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@SYS310999</Label>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrentDeliveryDate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS311000</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS304656</Caption>
						<FastTabExpanded>No</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>tabBody</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>536870911</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroup</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>LoadTemplateButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS301846</HelpText>
												<NeededPermission>Create</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS301847</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PriceBreakdownButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS4001914</HelpText>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS4001913</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Caption>@SYS71028</Caption>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl>
								<Name>PCRuntimeControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>PCRuntimeControl</Name>
									<ExtensionComponents />
									<ExtensionProperties />
								</FormControlExtension>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PCRuntimeConfiguratorInfo_Status</Name>
								<Height>0</Height>
								<HeightMode>Manual</HeightMode>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<Visible>No</Visible>
								<Width>0</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Status</DataField>
								<DataSource>PCRuntimeConfiguratorInfo</DataSource>
								<FastTabSummary>Yes</FastTabSummary>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Caption>@SYS312540</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroupCommit</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>