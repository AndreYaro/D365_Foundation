<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjLinePropertySetup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjLinePropertySetup extends FormRun
{
    boolean                             called;
    boolean                             codeProject;
    boolean                             calledFromLineProp;
    TableGroupAll                       projCode;
    TableGroupAll                       categoryCode;
    ProjId                              projId;
    ProjGroupId                         projGroupId;
    ProjCategoryId                      projCategoryId;
    ProjCategoryGroupId                 projCategoryGroupId;
    ProjLinePropertyId                  projLinePropertyId;

}
]]></Source>
			</Method>
			<Method>
				<Name>categoryCodeRange</Name>
				<Source><![CDATA[
    private str categoryCodeRange()
    {
        str                 range;
        ProjCategoryId      categoryId;
        ProjCategoryGroupId categoryGroupId;

        if (projCategoryId)
        {
            categoryId = projCategoryId;
        }
        if (projCategoryGroupId)
        {
            categoryGroupId = projCategoryGroupId;
        }

        switch (categoryCode)
        {
            case TableGroupAll::Table:
                range += strfmt('((%3 == "%4") && (%1 == %2)) || ',
                    fieldstr(ProjLinePropertySetup, CategoryCode),
                    enum2int(TableGroupAll::Table),
                    fieldstr(ProjLinePropertySetup, CategoryRelation),
                    queryValue(categoryId));
                // Fall through

            case TableGroupAll::GroupId:
                range += strfmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldstr(ProjLinePropertySetup, CategoryCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldstr(ProjLinePropertySetup, CategoryRelation),
                    queryValue(categoryGroupId));

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strfmt('(%1 (%2 == %3))',
                    range,
                    fieldstr(ProjLinePropertySetup, CategoryCode),
                    enum2int(TableGroupAll::All));
                // Fall through

            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        element.updateQuery(projLinePropertySetup_ds.query().dataSourceTable(tablenum(ProjLinePropertySetup)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields()
    {
        if (called)
        {
            if (calledFromLineProp)
            {
                projLinePropertySetup.LinePropertyId = projLinePropertyId;
            }
            else if (codeProject)
            {
                switch (projCode)
                {
                    case TableGroupAll::Table:
                        projLinePropertySetup.ProjRelation = projId;
                        break;

                    case TableGroupAll::GroupId:
                        projLinePropertySetup.ProjRelation = projGroupId;
                        break;
                }
                projLinePropertySetup.ProjCode = projCode;
            }
            else
            {
                switch (categoryCode)
                {
                    case TableGroupAll::Table:
                        projLinePropertySetup.CategoryRelation = projCategoryId;
                        break;

                    case TableGroupAll::GroupId:
                        projLinePropertySetup.CategoryRelation = projCategoryGroupId;
                        break;
                }
                projLinePropertySetup.CategoryCode = categoryCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCodeRange</Name>
				<Source><![CDATA[
    private str projCodeRange()
    {
        str         range;
        ProjId      criteriaProjId;
        ProjGroupId criteriaProjGroupId;

        if (projId)
        {
            criteriaProjId = projId;
        }

        if (projGroupId)
        {
            criteriaProjGroupId = projGroupId;
        }

        switch (projCode)
        {
            case TableGroupAll::Table:
                range += strfmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldstr(ProjLinePropertySetup, ProjCode),
                    enum2int(TableGroupAll::Table),
                    fieldstr(ProjLinePropertySetup, ProjRelation),
                    queryValue(criteriaProjId));
                // Fall through

            case TableGroupAll::GroupId:
                range += strfmt('((%1 == %2) && (%3 == "%4")) || ',
                    fieldstr(ProjLinePropertySetup, ProjCode),
                    enum2int(TableGroupAll::GroupId),
                    fieldstr(ProjLinePropertySetup, ProjRelation),
                    queryValue(criteriaProjGroupId));

                // If filtering records for a specific buffer then also include the records that match through
                // the 'All' code. (This range part is included here instead of the next case since that
                // is only used when the range in this method does not apply).
                range = strfmt('(%1 (%2 == %3))',
                    range,
                    fieldstr(ProjLinePropertySetup, ProjCode),
                    enum2int(TableGroupAll::All));
                // Fall through

            case TableGroupAll::All:
                // If code is 'All' then this range does not apply.
                break;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    void updateNow()
    {
        ProjGroup           projGroup;
        ProjCategory        projCategory;
        ProjCategoryGroup   projCategoryGroup;
        ProjTable           projTable;
        ProjLineProperty    projLineProperty;

        if (element.args().caller())
        {
            called = true;
            calledFromLineProp = false;

            switch (element.args().dataset())
            {
                case tablenum(ProjTable):
                    codeProject             = true;
                    projTable               = element.args().record();
                    projId                  = projTable.ProjId;
                    projGroupId             = projTable.ProjGroupId;
                    projCode                = TableGroupAll::Table;
                    break;

                case tablenum(ProjGroup):
                    codeProject             = true;
                    projGroup               = element.args().record();
                    projGroupId             = projGroup.ProjGroupId;
                    projCode                = TableGroupAll::GroupId;
                    break;

                case tablenum(ProjCategory):
                    codeProject             = false;
                    projCategory            = element.args().record();
                    projCategoryId          = projCategory.CategoryId;
                    projCategoryGroupId     = projCategory.CategoryGroupId;
                    categoryCode            = TableGroupAll::Table;
                    break;

                case tablenum(ProjCategoryGroup):
                    codeProject             = false;
                    projCategoryGroup       = element.args().record();
                    projCategoryGroupId     = projCategoryGroup.CategoryGroupId;
                    categoryCode            = TableGroupAll::GroupId;
                    break;

                case tableNum(ProjLineProperty):
                    codeProject             = false;
                    calledFromLineProp      = true;
                    projLineProperty        = element.args().record();
                    projLinePropertyId      = projLineProperty.LinePropertyId;
                    break;
            }

            // Initialize query ranges for the datasource
            element.updateQuery(projLinePropertySetup_ds.query().dataSourceTable(tablenum(ProjLinePropertySetup)));
        }
        else
        {
            called = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    void updateQuery(QueryBuildDataSource   _qbds)
    {
        // Clear existing sorting and ranging
        _qbds.clearDynalinks();
        _qbds.clearSortIndex();
        _qbds.clearRanges();

        if (called)
        {
            if (calledFromLineProp)
            {
                _qbds.addSortIndex(indexNum(ProjLinePropertySetup, CategoryProjIdx));

                _qbds.addRange(fieldnum(ProjLinePropertySetup, LinePropertyId)).value(queryValue(projLinePropertyId));
            }
            else if (codeProject)
            {
                // Set sorting by ProjCategoryIdx
                _qbds.addSortIndex(indexNum(ProjLinePropertySetup, ProjCategoryIdx));

                // Also range by proj code
                _qbds.addRange(fieldnum(ProjLinePropertySetup, ProjCode)).value(element.projCodeRange());
            }
            else
            {
                // Set sorting by CategoryProjIdx
                _qbds.addSortIndex(indexNum(ProjLinePropertySetup, CategoryProjIdx));

                // Also range by category code
                _qbds.addRange(fieldnum(ProjLinePropertySetup, CategoryCode)).value(element.categoryCodeRange());
            }
        }
        else
        {
            // Set sorting by CategoryProjIdx
            _qbds.addSortIndex(indexNum(ProjLinePropertySetup, CategoryProjIdx));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjLinePropertySetup</Name>
				<Methods>
					<Method>
						<Name>enableDebitNoteChk_BR</Name>
						<Source><![CDATA[
        /// <summary>
        /// Debit note set up check box is enabled for expense journals.
        /// </summary>
        Public void enableDebitNoteChk_BR()
        {
            if (BrazilParameters::isEnabled())
            {
                if (ProjLinePropertySetup.canEditDebitNote_BR(CategoryRelationGrid.valueStr()))
                {
                    ProjLinePropertySetup_DebitNote_BR.allowEdit(true);
                }
                else
                {
                    ProjLinePropertySetup.DebitNote_BR = NoYes::No;
                    ProjLinePropertySetup_DebitNote_BR.allowEdit(false);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            element.updateNow();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (ret)
            {
                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, ProjRelation)).allowEdit(projLinePropertySetup.ProjCode != TableGroupAll::All);
                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, ProjRelation)).skip(projLinePropertySetup.ProjCode      == TableGroupAll::All);

                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, CategoryRelation)).allowEdit(projLinePropertySetup.CategoryCode  != TableGroupAll::All);
                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, CategoryRelation)).skip(projLinePropertySetup.CategoryCode       == TableGroupAll::All);
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.enableDebitNoteChk_BR();
            }
            // </GBR>

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            super();

            element.initFields();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CategoryCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, CategoryRelation)).allowEdit(projLinePropertySetup.CategoryCode  != TableGroupAll::All);
                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, CategoryRelation)).skip(projLinePropertySetup.CategoryCode       == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CategoryRelation</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Calling enableDebitNoteChk_BR method().
            /// </summary>
            public void modified()
            {
                super();
                ProjLinePropertySetup_DS.enableDebitNoteChk_BR();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, ProjRelation)).allowEdit(projLinePropertySetup.ProjCode != TableGroupAll::All);
                projLinePropertySetup_ds.object(fieldnum(ProjLinePropertySetup, ProjRelation)).skip(projLinePropertySetup.ProjCode      == TableGroupAll::All);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ProjRelationGrid</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Hides Type field on project or project group lookup form when <c>ProjEnableMultipleContractLinesForProjectFeature</c> is enabled.
        /// </summary>
        public void lookup()
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() && projLinePropertySetup.ProjCode != TableGroupAll::All)
            {
                if (projLinePropertySetup.ProjCode == TableGroupAll::Table)
                {
                    ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(formStr(ProjLinePropertySetup));
                    using (var activityContext = logger.projOpsManagementActivity().projTableLookupContext())
                    {
                        Query query = ProjTableLookup::buildQueryWithRanges([ProjType::None]);
                    
                        SysTableLookup sysTableLookup = ProjTableLookup::createLookup(this, query);
                        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, ProjInvoiceProjId));
                        sysTableLookup.addLookupfield(fieldNum(ProjProjectLookup, ParentId));

                        sysTableLookup.performFormLookup();
                    }
                }
                else if (projLinePropertySetup.ProjCode == TableGroupAll::GroupId)
                {
                    ProjGroup::lookupGroup(this, ProjType::None);
                }
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjLinePropertySetup</Name>
			<Table>ProjLinePropertySetup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitNote_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS336313</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjCodeGrid</Name>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjCode</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjRelationGrid</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjRelation</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CategoryCodeGrid</Name>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryCode</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CategoryRelationGrid</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjLinePropertySetup_CategoryRelationGrid</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryRelation</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>InvoiceStatusIdGrid</Name>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjLinePropertySetup_InvoiceStatusIdGrid</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>LinePropertyId</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ProjLinePropertySetup_DebitNote_BR</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>BR</CountryRegionCodes>
						<ElementPosition>1994091957</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>WindowBackground</BackgroundColor>
						<DataField>DebitNote_BR</DataField>
						<DataSource>ProjLinePropertySetup</DataSource>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>ProjLinePropertySetup</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>