<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetBalancesActualsByPeriods</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetBalancesActualsByPeriods extends FormRun
{
    BudgetCalculateBalance      budgetCalculateBalance;
    BudgetTransactionLine       budgetTransactionLine;
    Query                       budgetTransactionQuery;
    LedgerRecId                 primaryLedgerRecId;

    private const str LedgerDimensionDataSourceName = 'BudgetTransactionLine_1';

}
]]></Source>
			</Method>
			<Method>
				<Name>addQueryFilters</Name>
				<Source><![CDATA[
    private void addQueryFilters()
    {
        QueryFilter             filter;
        QueryBuildDataSource    qbdsHeader;
        QueryBuildDataSource    qbdsLine;

        qbdsHeader = budgetTransactionQuery.dataSourceTable(tableNum(BudgetTransactionHeader));
        qbdsLine = budgetTransactionQuery.dataSourceTable(tableNum(BudgetTransactionLine));

        // Add a query filter for the TransactionStatus field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsHeader, fieldStr(BudgetTransactionHeader, TransactionStatus));
        filter.value(int2str(enum2int(BudgetTransactionStatus::Completed)));

        // Add a query filter for the Ledger field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsHeader, fieldStr(BudgetTransactionHeader, PrimaryLedger));

        // Hide the query filter for the Ledger field.
        // The Ledger field is not exposed to end users because the value is always set to the RecId of the current Ledger and cannot be changed.
        filter.status(RangeStatus::Hidden);

        // Add a query filter for the BudgetTransactionType field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsHeader, fieldStr(BudgetTransactionHeader, BudgetTransactionType));

        // Hide the query filter for the BudgetTransactionType field.
        // The BudgetTransactionType field is not exposed to end users because the value is always set to all
        // types except Encumbrance and PreEncumbrance.
        filter.status(RangeStatus::Hidden);

        // Add a query filter for the BudgetModelId field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsHeader, fieldStr(BudgetTransactionHeader, BudgetModelId));

        // Hide the query filter for the BudgetModelId field.
        // The BudgetModelId field is not exposed to end users because the value is set by the user on the form.
        filter.status(RangeStatus::Hidden);

        // Add a query filter for the header Date field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsHeader, fieldStr(BudgetTransactionHeader, Date));

        // Hide the query filter for the Date field.
        // The Date field is not exposed to end users because the value is set by the user on the form.
        filter.status(RangeStatus::Hidden);

        // Add a query filter for the line Date field.
        filter = budgetTransactionQuery.addQueryFilter(qbdsLine, fieldStr(BudgetTransactionLine, Date));

        // Hide the query filter for the Date field.
        // The Date field is not exposed to end users because the value is set by the user on the form.
        filter.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the period budget and posted ledger amounts based on the settings on the form.
    /// </summary>
    public void calculatePeriodBalances()
    {
        FiscalCalendar fiscalCalendarLocal = FiscalCalendar::findByCalendarId(fiscalCalendar.valueStr());

        if (this.validateParameters())
        {
            // Set the fiscal calendar and fiscal year parameters
            budgetCalculateBalance.parmFiscalCalendarRecId(fiscalCalendarLocal.RecId);
            budgetCalculateBalance.parmStartDate(FiscalCalendarYear::findByCalendarYearName(fiscalCalendarLocal.RecId, fromFiscalYear.valueStr()).StartDate);
            budgetCalculateBalance.parmEndDate(FiscalCalendarYear::findByCalendarYearName(fiscalCalendarLocal.RecId, toFiscalYear.valueStr()).EndDate);

            // Set the budget model parameters
            budgetCalculateBalance.parmBudgetModelId(budgetModel.valueStr());

            if (includeSubmodels.enabled() == true)
            {
                // Use the value from the control to set the parm.
                budgetCalculateBalance.parmIncludeSubModels(includeSubmodels.checked());
            }
            else
            {
                // The control is disabled; set the parm to No.
                budgetCalculateBalance.parmIncludeSubModels(NoYes::No);
            }

            budgetCalculateBalance.parmQuery(budgetTransactionQuery);

            // Calculate the period balances and set the data on the datasource.
            budgetTmpBalance.linkPhysicalTableInstance(budgetCalculateBalance.calculatePeriodBalances());
            budgetTmpBalance_DS.research();
            budgetTmpBalance_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the BudgetBalancesActuals form.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        boolean calculatePeriodBalances = false;

        budgetCalculateBalance = new BudgetCalculateBalance();

        if (element.args().parmObject() &&
            element.args().parmObject() is BudgetCalculateBalance)
        {
            budgetCalculateBalance = element.args().parmObject() as BudgetCalculateBalance;
            calculatePeriodBalances = true;
        }

        switch (element.args().dataset())
        {
            case tableNum(BudgetTransactionLine):
                budgetTransactionLine = element.args().record() as BudgetTransactionLine;
                break;
        }

        super();

        // User access to filters on the grid headers and to the sysquery form replaces the need for the filter pane.
        FormCommandButtonControl showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.visible(false);

        // Initialize the query.
        budgetTransactionQuery = new Query(queryStr(BudgetCalculateBalance));
        budgetTransactionQuery.dataSourceNo(1).clearRanges();
        budgetTransactionQuery.dataSourceNo(2).clearRanges();
        this.addQueryFilters();

        // Don't filter budget amounts by budget type.
        budgetCalculateBalance.parmFilterByBudgetType(NoYes::No);

        // Always calculate ledger account actual balances
        budgetCalculateBalance.parmCalculateLedgerAmounts(NoYes::Yes);

        // Fiscal calendar defaults to the ledger's fiscal calendar.
        fiscalCalendar.text(FiscalCalendar::find(Ledger::fiscalCalendar()).CalendarId);

        // Set the fiscal year default value.
        element.setDefaultFiscalYear(fiscalCalendar.valueStr());

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            primaryLedgerRecId = Ledger::current();
            element.setApportionmentFields();
        }

        // Do not show AmountType, it will be turned on if drill from by focus form
        amountType.visible(false);

        if (calculatePeriodBalances)
        {
            // Set the values on the form.
            budgetModel.text(budgetCalculateBalance.parmBudgetModelId());
            budgetModel.modified();
            includeSubmodels.checked(budgetCalculateBalance.parmIncludeSubModels());

            if (budgetCalculateBalance.parmLedgerDimension() && budgetCalculateBalance.parmDimensionFocus())
            {
                ledgerDimension.visible(true);
                ledgerDimension.value(budgetCalculateBalance.parmLedgerDimension());

                Name dimensionAttributeValueSegmentedNames = BudgetInquiryHelper::getDimensionFocusNameDisplayString(
                    budgetCalculateBalance.parmDimensionFocus(),
                    budgetCalculateBalance.parmLedgerDimension());

                ledgerDimensionName.visible(true);
                ledgerDimensionName.text(dimensionAttributeValueSegmentedNames);
            }
            else
            {
                ledgerDimension.visible(false);
                ledgerDimensionName.visible(false);
            }

            amountType.visible(true);
            amountType.text(enum2Str(budgetCalculateBalance.parmBudgetType()));
            budgetCalculateBalance.parmFilterByBudgetType(NoYes::Yes);

            FiscalYearName fromFiscalYearName = FiscalCalendarYear::findYearByCalendarDate(
                    Ledger::fiscalCalendar(),
                    budgetCalculateBalance.parmStartDate()).yearName();

            if (fromFiscalYearName != '')
            {
                fromFiscalYear.text(fromFiscalYearName);
            }

            FiscalYearName toFiscalYearName = FiscalCalendarYear::findYearByCalendarDate(
                    Ledger::fiscalCalendar(),
                    budgetCalculateBalance.parmEndDate()).yearName();

            if (toFiscalYearName != '')
            {
                toFiscalYear.text(toFiscalYearName);
            }

            if (budgetCalculateBalance.parmDimensionNamesAndValues())
            {
                BudgetTransactionManager::addDimensionCriteriaForAttributeValueSet(
                    budgetTransactionQuery,
                    budgetCalculateBalance.parmDimensionNamesAndValues(),
                    LedgerDimensionDataSourceName);
            }

            this.calculatePeriodBalances();
        }

        if (budgetTransactionLine)
        {
            budgetTmpBalance_DS.linkActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the lookup for the Fiscal year field.
    /// </summary>
    /// <param name="_ctrl">
    /// The form control for which to create the lookup.
    /// </param>
    public void lookupFiscalYear(FormStringControl _ctrl)
    {
        FiscalCalendarYear::lookupFiscalCalendarYear(_ctrl, FiscalCalendar::findByCalendarId(fiscalCalendar.valueStr()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApportionmentFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visiblity of apportionment and preliminary fields on the form based on the <c>UseOnlyApportionment</c> and
    ///  <c>SumPreliminaryBudget</c> checkboxes in <c>BudgetControlConfiguration</c> table.
    /// </summary>
    public void setApportionmentFields()
    {
        boolean isUseOnlyApportionment;
        boolean isSumPreliminaryIncluded;

        isUseOnlyApportionment = BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedgerRecId).UseApportionedAmount;
        isSumPreliminaryIncluded = BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedgerRecId).SumPreliminaryBudget;
        apportionmentAmount.visible(isUseOnlyApportionment);
        isSumPreliminaryIncluded = isSumPreliminaryIncluded && !isUseOnlyApportionment;
        PreliminaryAmount.visible(isSumPreliminaryIncluded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fiscal year form control value to the current fiscal year for the specified fiscal calendar.
    /// </summary>
    /// <param name="_fiscalCalendarID">
    /// The ID of the fiscal calendar for which to find the default fiscal year.
    /// </param>
    public void setDefaultFiscalYear(FiscalCalendarID _fiscalCalendarID)
    {
        FiscalCalendar      fiscalCalendarLocal;
        FiscalCalendarYear  fiscalCalendarYear;

        fiscalCalendarLocal = FiscalCalendar::findByCalendarId(_fiscalCalendarID);

        if (fiscalCalendarLocal)
        {
            if (budgetTransactionLine)
            {
                // Use the date from the budget transaction line to get the fiscal year from the specified fiscal calendar.
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarLocal.RecId, budgetTransactionLine.Date);
            }
            else
            {
                // Use the system date to get the fiscal year from the specified fiscal calendar.
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarLocal.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }

            // Set the fiscal year form control values.
            fromFiscalYear.text(fiscalCalendarYear.yearName());
            toFiscalYear.text(fiscalCalendarYear.yearName());
        }
        else
        {
            // Invalid fiscal calendar; set the fiscal years to blank.
            fromFiscalYear.text('');
            toFiscalYear.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the query can be used to calculate budget and ledger amounts.
    /// </summary>
    /// <returns>true if the query is valid; otherwise, false.</returns>
    public boolean validateBudgetTransactionQuery()
    {
        boolean             isValid = true;
        List                dimensionFilterList;
        DimensionProvider   dimProvider = new DimensionProvider();

        // Find dimension filters on the query. Dimension criteria added by the user (via SysQuery) will be added as filters, not ranges.
        dimensionFilterList = dimProvider.getDimensionFiltersFromQuery(budgetTransactionQuery);

        if (dimensionFilterList.empty())
        {
            // The user is attempting to update the totals and no dimension criteria has been defined.
            isValid = checkFailed("@Budget:BudgetInquiryMissingDimensionValuesWarning");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validateParameters()
    {
        boolean isValid = true;

        if (!budgetModel.valueStr())
        {
            // Budget model was not entered.
            isValid = checkFailed(strfmt("@SYS110217", "@SYS1966"));
        }

        isValid = this.validateBudgetTransactionQuery();

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTmpBalance</Name>
				<Methods>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates the period budget balances when the form is initialized
        /// or the budget transaction line source record is changed by the caller.
        /// </summary>
        public void linkActive()
        {
            DimensionProvider dimensionProvider = new DimensionProvider();

            if (budgetTransactionLine)
            {
                // Set the form values.
                budgetModel.text(budgetTransactionLine.getBudgetTransactionHeader().BudgetModelId);
                budgetModel.modified();

                // Set the fiscal year default value.
                element.setDefaultFiscalYear(fiscalCalendar.valueStr());

                // Remove any existing ledger dimension criteria.
                dimensionProvider.clearDimensionFiltersFromQuery(budgetTransactionQuery);

                // Add ledger dimension criteria for the dimension values on the budget transaction line.
                BudgetTransactionManager::addDimensionCriteriaForLedgerDimension(budgetTransactionQuery, budgetTransactionLine.LedgerDimension, LedgerDimensionDataSourceName);

                // Calculate the balances and populate the datasource.
                element.calculatePeriodBalances();
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the visibility of apportionment fields on form based on budget parameter selection of use only apportionment.
        /// </summary>
        /// <returns>
        /// default int returned from super() call.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                element.setApportionmentFields();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Ensures that the query is ordered by period start date.
        /// </summary>
        public void executeQuery()
        {
            QueryBuildDataSource BudgetTmpBalance_QBDS = this.query().dataSourceTable(tableNum(BudgetTmpBalance));

            BudgetTmpBalance_QBDS.addOrderByField(fieldNum(BudgetTmpBalance, Period), SortOrder::Ascending);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Select_Button</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Run sysQuery to allow entry of additional ranges.
        /// </summary>
        public void clicked()
        {
            // Allow the dimension ranges to be edited.
            SysQueryRun sysQueryRun = new SysQueryRun(budgetTransactionQuery);
            sysQueryRun.promptShowSorting(false);
            sysQueryRun.promptAllowAddDataSource(false);
            sysQueryRun.promptLoadLastUsedQuery(false);
            sysQueryRun.title("@SYS75926");

            if (sysQueryRun.prompt())
            {
                budgetTransactionQuery = sysQueryRun.query();

                // The dimension-specific filters may have changed, and the request details are no longer valid to display.
                ledgerDimension.visible(false);
                ledgerDimensionName.visible(false);
                amountType.visible(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateTotals</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates the period budget and posted ledger amounts based on the settings on the form.
        /// </summary>
        public void clicked()
        {
            super();

            element.calculatePeriodBalances();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the lookup for the budget model field.
        /// </summary>
        public void lookup()
        {
            // Show models that are stopped.
            BudgetModel::lookupBudgetModel(this, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enables the 'include submodels' checkbox if the budget model has submodels.
        /// </summary>
        /// <returns>
        /// The result of the call to the super method.
        /// </returns>
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            includeSubmodels.enabled(BudgetModel::find(HeadingSub::SubModel, this.valueStr()).RecId != 0);

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean         isValid;
            BudgetModelId   budgetModelId;

            isValid = super();

            if (isValid)
            {
                // Ensure the budget model exists, and is the only one selected.
                isValid = BudgetModel::exist(HeadingSub::Heading, this.valueStr(), this.valueStr());
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FiscalCalendar</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the default fiscal years when the fiscal calendar is changed.
        /// </summary>
        /// <returns>
        /// The result of the call to the super method.
        /// </returns>
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            // Set the default fiscal year form controls based on the fiscal calendar that was selected.
            element.setDefaultFiscalYear(this.valueStr());

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FiscalCalendar::lookupFiscalCalendar(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FromFiscalYear</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Performs the lookup for the starting fiscal year.
        /// </summary>
        public void lookup()
        {
            element.lookupFiscalYear(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ToFiscalYear</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Performs the lookup for the ending fiscal year.
        /// </summary>
        public void lookup()
        {
            element.lookupFiscalYear(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpBalance</Name>
			<Table>BudgetTmpBalance</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccumlatedRevisedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccumulatedApportionment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApportionmentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriodRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentOfBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Period</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreliminaryAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevisedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumPreliminaryBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseOnlyApportionment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Variance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VariancePercent</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BottomMargin xmlns="">0</BottomMargin>
		<BottomMarginMode xmlns="">Fixed</BottomMarginMode>
		<Caption xmlns="">@Budget:ActualsVsBudgetByPeriodsCaption</Caption>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">Custom</Pattern>
		<RightMargin xmlns="">0</RightMargin>
		<RightMarginMode xmlns="">Fixed</RightMarginMode>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FilterButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>Select_Button</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Filter</NormalImage>
								<Text>@Budget:BudgetInquiryFilterButtonText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>UpdateTotals</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:BudgetInquiryUpdateTotalsButton</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FiltersAndGridTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FiltersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Filters</Name>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectBudgetModel</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>LedgerDimension</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<EnableFormRef>No</EnableFormRef>
												<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
												<Type>ReferenceGroup</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<ExtendedDataType>LedgerDimensionAccount</ExtendedDataType>
												<ViewEditMode>View</ViewEditMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>LedgerDimensionName</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
												<Label>@SYS92116</Label>
												<ViewEditMode>View</ViewEditMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AmountType</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS87160</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetModel</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>BudgetModelId</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>IncludeSubmodels</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS133169</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
										<Caption>@SYS1966</Caption>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FiscalYear</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FiscalCalendar</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>FiscalCalendarID</ExtendedDataType>
												<Label>@SYS128467</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FromFiscalYear</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>FiscalYearName</ExtendedDataType>
												<Label>@SYS133174</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ToFiscalYear</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>FiscalYearName</ExtendedDataType>
												<Label>@SYS133175</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
										<Caption>@SYS13292</Caption>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryParametersTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsGridTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Periods</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Period</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Period</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OriginalAmount</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>OriginalAmount</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RevisedAmount</Name>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevisedAmount</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ApportionmentAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1380525201</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ApportionmentAmount</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>LedgerAmount</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerAmount</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
										<Label>@Budget:ActualAmount</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Variance</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Variance</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
										<Label>@SYS119030</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PreliminaryAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1960537525</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PreliminaryAmount</DataField>
										<DataSource>BudgetTmpBalance</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTmpBalance</DataSource>
								<GridLinesStyle>Vertical</GridLinesStyle>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryResultsTabPage</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>