<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerTransSettlementReviewCrossYearUtility</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerTransSettlementReviewCrossYearUtility extends FormRun
{
    private FiscalCalendarRecId initialCalendarRecId;

    private TransDate fromDateVal;
    private TransDate toDateVal;
    private DateCode dateCodeVal;
    private FiscalCalendarID calendarName;
    private FiscalYearName fiscalYearName;
    private DimensionSetName dimSetNameVal;
    private DimensionHierarchy dimHier;
    private LedgerTransSettlementReviewCrossYearUtilityParameters ledgerTransSettlementReviewCrossYearUtilityParameters;
    private LedgerTransSettlementReviewCrossYearUtility ledgerTransSettlementReviewCrossYearUtility;
    private Map dimensionControlMap;
    private readonly boolean isAdvancedAwarenessOptsParmEnabled = LedgerTransSettlementAdvancedParameters::isAwarenessParameterEnabled();

    private const int CurrentVersion = 1;

    #LOCALMACRO.CurrentList
        fromDateVal,
        toDateVal,
        dateCodeVal,
        dimSetNameVal,
        calendarName,
        fiscalYearName
    #ENDMACRO

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        initialCalendarRecId = Ledger::fiscalCalendar();

        super();

        this.initDatasources();

        ledgerTransSettlementReviewCrossYearUtilityParameters = LedgerTransSettlementReviewCrossYearUtilityParameters::construct();
        ledgerTransSettlementReviewCrossYearUtilityParameters.parmLedgerTransOpenTmp(LedgerTransOpenTmp_ds.cursor());

        ledgerTransSettlementReviewCrossYearUtility = new LedgerTransSettlementReviewCrossYearUtility();

        this.initParameters();
        this.displayColumns();
        this.initializeDimensionControlMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void close()
    {
        super();

        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FillGrid</Name>
				<Source><![CDATA[
    private void FillGrid()
    {
        UnsettleButton.enabled(true);
        if (element.validateParameters())
        {
            element.updateParameters();

            element.displayFinancialDimensions();

            ledgerTransSettlementReviewCrossYearUtility.runProcess(ledgerTransSettlementReviewCrossYearUtilityParameters);

            element.researchDatasource();

            if (isAdvancedAwarenessOptsParmEnabled)
            {
                if (LedgerTransSettlementReviewCrossYearUtility::hasYearEndCloseBeenRun(fromDateVal))
                {
                    Box::info(strFmt("@GeneralLedger:MarkedTransactionsInClosedYearError", year(fromDateVal)));
                    UnsettleButton.enabled(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    private boolean validateDates(TransDate _fromDate, TransDate _toDate)
    {
        boolean isValid = true;
        FiscalCalendarRecId calendarRecId = Ledger::fiscalCalendar();
        TransDate fromOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _fromDate);
        TransDate toOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _toDate);

        if (!_fromDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (!_toDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (isValid && (_fromDate > _toDate))
        {
            isValid = checkFailed(strfmt("@SYS55013", date2StrUsr(_fromDate, DateFlags::FormatAll), date2StrUsr(_toDate, DateFlags::FormatAll)));
        }

        if (isValid && (fromOpeningStartDate != toOpeningStartDate))
        {
            isValid = checkFailed(strfmt("@SYS28745", year(fromOpeningStartDate), year(toOpeningStartDate)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private boolean validateParameters()
    {
        boolean isValid = element.validateDates(FromDate.dateValue(), ToDate.dateValue());

        if (DimensionSetName.text() == '')
        {
            isValid = checkFailed("@GeneralLedger:LedgerTransSettlementInquiryFinDimSetRequired");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameters</Name>
				<Source><![CDATA[
    private void updateParameters()
    {
        if (ledgerTransSettlementReviewCrossYearUtilityParameters)
        {
            ledgerTransSettlementReviewCrossYearUtilityParameters.parmFromDate(FromDate.dateValue());
            ledgerTransSettlementReviewCrossYearUtilityParameters.parmToDate(ToDate.dateValue());
            ledgerTransSettlementReviewCrossYearUtilityParameters.parmDimensionHierarchy(dimHier);
            ledgerTransSettlementReviewCrossYearUtilityParameters.parmCalendarName(calendarName);
            ledgerTransSettlementReviewCrossYearUtilityParameters.parmFiscalYearName(fiscalYearName);

            fromDateVal = FromDate.dateValue();
            toDateVal = ToDate.dateValue();
            dateCodeVal = DateCode.text();
            dimSetNameVal = DimensionSetName.valueStr();
            fiscalYearName = YearFilter.text();

            FiscalCalendar localFiscalCalendar = FiscalCalendar::find(initialCalendarRecId);
            calendarFilter.text(localFiscalCalendar.CalendarId);

            calendarName = CalendarFilter.text();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasources</Name>
				<Source><![CDATA[
    private void initDatasources()
    {
        QueryBuildDataSource qbds = LedgerTransOpenTmp_ds.query().dataSourceTable(tableNum(LedgerTransOpenTmp));

        if (qbds)
        {
            QueryBuildDataSource davcDS = LedgerTransOpenTmp_ds.query().dataSourceTable(tableNum(DimensionAttributeValueCombination));

            if (davcDS)
            {
                davcDS.clearLinks();
                davcDS.addLink(fieldNum(LedgerTransOpenTmp, LedgerDimension), fieldnum(DimensionAttributeValueCombination, RecId), qbds.name());
                davcDS.joinMode(JoinMode::InnerJoin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayColumns</Name>
				<Source><![CDATA[
    private void displayColumns()
    {
        if (Ledger::reportingCurrency())
        {
            ReportingCurrencyAmountDebit.visible(true);
            ReportingCurrencyAmountCredit.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionHierarchy</Name>
				<Source><![CDATA[
    private void loadDimensionHierarchy()
    {
        DimensionHierarchy prevDimHier = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, dimSetNameVal);

        if (prevDimHier)
        {
            dimHier = prevDimHier;
        }

        if (!dimHier)
        {
            dimHier = DimensionHierarchy::getMainAccountFocus();
        }

        DimensionSetName.text(dimHier.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        xSysLastValue::getLast(this);

        this.loadDimensionHierarchy();

        FromDate.dateValue(fromDateVal);
        ToDate.dateValue(toDateVal);
        DateCode.text(dateCodeVal);
        YearFilter.text(fiscalYearName);
        CalendarFilter.text(calendarName);

    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDatasource</Name>
				<Source><![CDATA[
    private void researchDatasource()
    {
        LedgerTransOpenTmp_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDimensionControlMap</Name>
				<Source><![CDATA[
    private void initializeDimensionControlMap()
    {
        if (dimensionControlMap && dimensionControlMap.elements() > 0)
        {
            MapEnumerator controlEnumerator = dimensionControlMap.getEnumerator();

            while (controlEnumerator.moveNext())
            {
                FormControl dimensionFormControl = element.design().controlName(controlEnumerator.currentValue());

                if (dimensionFormControl)
                {
                    element.design().removeControl(dimensionFormControl.id());
                }
            }
        }

        dimensionControlMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionControl</Name>
				<Source><![CDATA[
    private FormControl addDimensionControl(DimensionAttribute _dimensionAttribute, FormControl _previousControl)
    {
        FormStringControl control = MainGrid.addDataField(
            DimensionAttributeValueCombination_ds.id(),
            fieldName2Id(tableNum(DimensionAttributeValueCombination), _dimensionAttribute.DimensionValueColumnName),
            _previousControl);
        
        control.label(_dimensionAttribute.localizedName());

        dimensionControlMap.insert(_dimensionAttribute.Name, control.name());

        if (_dimensionAttribute.Type == DimensionAttributeType::MainAccount)
        {
            control.visible(false);
        }

        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvisiblePlaceholderControl</Name>
				<Source><![CDATA[
    private void addInvisiblePlaceholderControl(FormControl _precedingControl)
    {
        const str ControlName = 'ToAllowPriorControlsToBeRemoved';
        _precedingControl = MainGrid.addControl(FormControlType::String, ControlName, _precedingControl);
        _precedingControl.visible(false);

        dimensionControlMap.insert(ControlName, _precedingControl.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFinancialDimensions</Name>
				<Source><![CDATA[
    private void displayFinancialDimensions()
    {
        this.initializeDimensionControlMap();

        FormControl precedingControl = MainAccount;

        if (dimHier.RecId)
        {
            int dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(dimHier.RecId);

            for (int i = 1; i <= dimensionHierarchylevelCount; i++)
            {
                DimensionHierarchyLevel dimHierachyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndLevel(dimHier.RecId, i);
                DimensionAttribute dimAttribute = DimensionAttribute::find(dimHierachyLevel.DimensionAttribute);

                precedingControl = this.addDimensionControl(dimAttribute, precedingControl);
            }
        }
        else
        {
            // Workaround as removeControl() is not functioning properly
            this.addInvisiblePlaceholderControl(precedingControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    private void initParmDefault()
    {
        // The method is needed because of the call: xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private identifierName lastValueElementName()
    {
        return formStr(ledgerTransSettlementReviewCrossYearUtility);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    private container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    private boolean unpack(container _packedClass)
    {
        Version version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    private void updateDesign()
    {
        FiscalCalendar localFiscalCalendar = FiscalCalendar::find(initialCalendarRecId);

        calendarFilter.text(localFiscalCalendar.CalendarId);
        if (fiscalYearName != '')
        {
            yearFilter.text(fiscalYearName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFiscalCalendar</Name>
				<Source><![CDATA[
    private void selectFiscalCalendar(FiscalCalendarID _calendarId)
    {
        QueryBuildDataSource fiscalCalendarDataSource = fiscalCalendar_DS.query().dataSourceTable(tableNum(FiscalCalendar));
        QueryBuildRange fiscalCalendarRange = SysQuery::findOrCreateRange(fiscalCalendarDataSource, fieldNum(FiscalCalendar, CalendarId));
        fiscalCalendarRange.value(_calendarId);
            
        FiscalCalendar calendar = FiscalCalendar::findByCalendarId(_calendarId);
        this.setFiscalCalendarYearRange(this.findMostRelevantYear(calendar.RecId));

        fiscalCalendar_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRelevantYear</Name>
				<Source><![CDATA[
    internal FiscalCalendarYearRecId findMostRelevantYear(FiscalCalendarRecId _calendar)
    {
        FiscalCalendarYear year = FiscalCalendarYear::findYearByCalendarDate(_calendar, DateTimeUtil::getToday(DateTimeUtil::getClientMachineTimeZone()));

        if (year.RecId == 0)
        {
            year = FiscalCalendarYear::findMostRecentFiscalCalendar(_calendar);
        }

        return year.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFiscalCalendarYear</Name>
				<Source><![CDATA[
    internal void selectFiscalCalendarYear(FiscalCalendarYearRecId _yearRecId)
    {
        this.setFiscalCalendarYearRange(_yearRecId);

        fiscalCalendarYear_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalCalendarYearRange</Name>
				<Source><![CDATA[
    internal void setFiscalCalendarYearRange(FiscalCalendarYearRecId _yearRecId)
    {
        QueryBuildDataSource fiscalCalendarYearDataSource = fiscalCalendarYear_DS.query().dataSourceTable(tableNum(FiscalCalendarYear));
        QueryBuildRange fiscalCalendarYearRange = SysQuery::findOrCreateRange(fiscalCalendarYearDataSource, fieldNum(FiscalCalendarYear, RecId));
        fiscalCalendarYearRange.value(queryValue(_yearRecId));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>FiscalCalendar</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void executeQuery()
        {                    
            super();
    
            element.updateDesign();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void init()
        {
            super();
        
            QueryBuildRange fiscalCalendarRange = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(FiscalCalendar, CalendarId));
            fiscalCalendarRange.value(FiscalCalendar::find(initialCalendarRecId).CalendarId);
            fiscalCalendarRange.status(RangeStatus::Locked);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>FiscalCalendarYear</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void init()
        {            
            super();
                                                   
            QueryBuildRange fiscalCalendarYearRange = SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(FiscalCalendarYear, RecId));
            fiscalCalendarYearRange.value(queryValue(element.findMostRelevantYear(initialCalendarRecId)));
            fiscalCalendarYearRange.status(RangeStatus::Locked);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>UnsettleButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean canContinue = true;

            if (LedgerTransOpenTmp_ds.anyMarked())
            {
                if (isAdvancedAwarenessOptsParmEnabled)
                {
                    if (Box::yesNo("@GeneralLedger:ReviewCrossYearMessageFeatureOn", DialogButton::No) == DialogButton::Yes)
                    {
                        if (Box::yesNo("@GeneralLedger:ReviewCrossYearSecondMessage", DialogButton::No) == DialogButton::No)
                        {
                            canContinue = false;
                        }
                    }
                    else
                    {
                        canContinue = false;
                    }
                }
                else
                {
                    if (Box::yesNo("@GeneralLedger:ReviewCrossYearMessageFeatureOff", DialogButton::No) == DialogButton::Yes)
                    {
                        if (Box::yesNo("@GeneralLedger:ReviewCrossYearSecondMessage", DialogButton::No) == DialogButton::No)
                        {
                            canContinue = false;
                        }
                    }
                    else
                    {
                        canContinue = false;
                    }
                }

                if (canContinue)
                {
                    LedgerTransOpenTmp ledgerTransOpenTmpUnsettle;
                    super();
 
                    MultiSelectionHelper selectionHelper = MultiSelectionHelper::construct();
                    selectionHelper.parmDataSource(LedgerTransOpenTmp_ds);
                    ledgerTransOpenTmpUnsettle  = selectionHelper.getFirst();
 
                    if (ledgerTransOpenTmpUnsettle.RecId)
                    {
                        while (ledgerTransOpenTmpUnsettle)
                        {
                            StartDate fromOpeningStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(initialCalendarRecId, ledgerTransOpenTmpUnsettle.AccountingDate);
                            boolean yecHasNotRun = LedgerSettleYECValidator::checkYearEndCloseHasNotBeenRun(fromOpeningStartDate);
                            if (yecHasNotRun)
                            {
                                LedgerTransSettlement::deleteSettled(ledgerTransOpenTmpUnsettle.SettlementId);
                            }

                            ledgerTransOpenTmpUnsettle = selectionHelper.getNext();
                        }
                    }

                    element.FillGrid();
                }
            }
            else
            {
                Box::info("@GeneralLedger:ReviewCrossYearSettlementNoRecordsToUnsettleWarning");
            }
       }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CalendarFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();
    
            if (ret)
            {
                element.selectFiscalCalendar(this.valueStr());
            }
            
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            FiscalCalendar::lookupFiscalCalendar(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>YearFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
       [Hookable(false)]
       public void lookup()
        {
            FiscalCalendarYear::lookupFiscalCalendarYear(this, fiscalCalendar.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret = super();
        
            if (ret)
            {
                element.selectFiscalCalendarYear(FiscalCalendarYear::findByCalendarYearName(fiscalCalendar.RecId, this.valueStr()).RecId);

                FiscalCalendarYear fiscalCalendarYearLocal;
                select firstonly StartDate, EndDate, Name from fiscalCalendarYearLocal where fiscalCalendarYearLocal.RecId == FiscalCalendarYear_ds.cursor().RecId;
                
                FromDate.dateValue(fiscalCalendarYearLocal.StartDate);
                ToDate.dateValue(fiscalCalendarYearLocal.EndDate);  
                YearFilter.text(fiscalCalendarYearLocal.Name);

                fromDateVal = FromDate.dateValue();
                toDateVal = ToDate.dateValue();
                fiscalYearName = YearFilter.text();
            }

            element.FillGrid();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean isModified = super();

            DateCode.text('');

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MainAccounts</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            Query lookupQuery = new Query();

            container selectFields = conNull();

            QueryBuildDataSource mainAccountDS = lookupQuery.addDataSource(tableNum(MainAccount));
            MainAccount::addSecureRangeForChartOfAccounts(mainAccountDS);

            QueryBuildDataSource settlementAccountDS = SysQuery::findOrCreateDataSource(lookupQuery, tableNum(LedgerTransSettlementAccount), tableNum(MainAccount));
            settlementAccountDS.joinMode(JoinMode::ExistsJoin);
            settlementAccountDS.addLink(fieldNum(MainAccount, RecId), fieldNum(LedgerTransSettlementAccount, MainAccount));

            lookupQuery.clearAllFields();
            mainAccountDS.addSelectionField(fieldNum(MainAccount, MainAccountId));
            mainAccountDS.addSelectionField(fieldNum(MainAccount, Name));

            selectFields = [tableNum(MainAccount), fieldNum(MainAccount, MainAccountId)];

            SysLookupMultiSelectGrid::lookup(lookupQuery, this, MainAccountMultiSelect, this, selectFields);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DimensionSetName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void lookup()
        {
            DimensionHierarchySupportProvider::lookupDimensionSet(DimensionSetName, true, DimensionFocusBalanceInitializationState::Initialized);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean validate()
        {
            boolean isValid = super();

            dimHier = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, DimensionSetName.text());

            if (dimHier == null)
            {
                isValid = checkFailed(strFmt("@SYS333565", DimensionSetName.text()));
            }

            if (isValid)
            {
                element.FillGrid();
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowTransactions</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            element.FillGrid();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>LedgerTransOpenTmp</Name>
			<Table>LedgerTransOpenTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountDebit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FullyQualifiedAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalAccountEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyCreditAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyDebitAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Text</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmountCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmountDebit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DimensionAttributeValueCombination</Name>
			<Table>DimensionAttributeValueCombination</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountStructure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaForCreation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CombinationHash1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CombinationHash2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CombinationHash3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CombinationHash4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CombinationHash5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HashVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImpliedDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimensionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>LedgerTransOpenTmp</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>FiscalCalendar</Name>
			<Table>FiscalCalendar</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<DelayActive>No</DelayActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>CalendarIdIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>FiscalCalendarYear</Name>
			<Table>FiscalCalendarYear</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>FiscalCalendar</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<Index>CalendarYearNameIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@GeneralLedger:ReviewCrossYearSettlementsLabel</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UnsettleButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>UnsettleButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MultiSelect>Yes</MultiSelect>
								<Text>@GeneralLedger:UnsettleText</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Parameters</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HelpText>@GeneralLedger:UnsettleText</HelpText>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CalendarFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>FiscalCalendarID</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>YearFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>FiscalYearName</ExtendedDataType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateRange</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>FromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FromDate</ExtendedDataType>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ToDate</ExtendedDataType>
								<FastTabSummary>Yes</FastTabSummary>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DateCode</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DateCode</ExtendedDataType>
								<Label>@SYS22526</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Columns>2</Columns>
						<Caption>@SYS41297</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DataToInclude</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MainAccounts</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS129344</Label>
								<LookupButton>Always</LookupButton>
								<LookupOnly>Yes</LookupOnly>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MainAccountMultiSelect</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>MainAccountNum</ExtendedDataType>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DimensionSetName</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DimensionSetName</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SettlementStatus</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>ComboBox</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>LedgerSettlementStatus</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Caption>@GeneralLedger:TrialBalanceListPageCustomFilterTransactionGroupCaption</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ShowTransactions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS50991</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Caption>@SYS7764</Caption>
				<FrameOptionButton>Hide</FrameOptionButton>
				<FrameType>GroupedFieldsLabel</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Filter</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>MainGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>MainGrid</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>MainAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>MainAccountId</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AccountingDate</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingDate</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@SYS128676</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SettleId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SettlementId</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Voucher</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SubledgerVoucher</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Name</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Text</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Text</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Currency</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyCode</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TransactionCurrencyAmountDebit</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyAmountDebit</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:TransactionCurrencyDebit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TransactionCurrencyAmountCredit</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionCurrencyAmountCredit</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:TransactionCurrencyCredit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AccountingCurrencyAmountDebit</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingCurrencyAmountDebit</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:AccountingCurrencyDebit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AccountingCurrencyAmountCredit</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingCurrencyAmountCredit</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:AccountingCurrencyCredit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ReportingCurrencyAmountDebit</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportingCurrencyDebitAmount</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:ReportingCurrencyDebit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ReportingCurrencyAmountCredit</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReportingCurrencyCreditAmount</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Label>@GeneralLedger:ReportingCurrencyCredit</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>Status</Name>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>SettlementStatus</DataField>
						<DataSource>LedgerTransOpenTmp</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataSource>LedgerTransOpenTmp</DataSource>
				<ExportLabel>@GeneralLedger:ReviewCrossYearSettlementsLabel</ExportLabel>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>