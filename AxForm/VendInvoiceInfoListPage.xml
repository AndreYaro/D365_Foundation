<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>VendInvoiceInfoListPage</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

[Form]
public class VendInvoiceInfoListPage
    extends FormRun
    implements OfficeIMenuCustomizer, OfficeITemplateCustomExporter, VendIInvoicePostPrint, VendIInvoiceTotals, IVendInvoiceSimulatedPost, VendorInvoiceIWorkflow
{
    PurchFormLetter_Invoice purchFormLetter;
    PurchEditLinesForm_Invoice vendInvoiceListPageState;
    DocumentStatus documentStatus;
    str gridDefaultAction;
    boolean isLastInvoiceAdvance;
    ParmId parmId;

    // Global functionality variables
    VendInvoiceListFilterHelper filterHelper;
    boolean isGlobalEntry = false;
    Set countryRegions = new Set(Types::String);
    VendInvoiceInfoTable vendInvoiceInfoTableInitial;
    MultiSelectionContext multiSelectionContext;

    // begin print variables
    boolean printInvoice;
    Printout printout;
    boolean usePrintManagement;
    boolean printSalesFormLetter;
    boolean printEUVatInvoice;
    // end print variables
    // <GEERU><GEEU>
    #ISOCountryRegionCodes
    // </GEEU></GEERU>

    boolean isIN;
    boolean isBE;
    boolean isRU;

    private const str VendInvoiceInfoListPageExcelOfficeMenuId = 'VendInvoiceInfoListPageExcelOfficeMenuId';

    // Invoice capture feature recommendation
    private guid recommendationRuleId = guidFromString('Vendor Invoice List page for invoice capture');

}
]]></Source>
			</Method>
			<Method>
				<Name>isRevision_RU</Name>
				<Source><![CDATA[
    private boolean isRevision_RU(VendInvoiceInfoTable _localVendInvoiceInfoTableForPosting)
    {
        return isRU
            && _localVendInvoiceInfoTableForPosting.correctionType_RU() == FactureCorrectionType_RU::Revision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkflowWorkItemTableRanges</Name>
				<Source><![CDATA[
    private void adjustWorkflowWorkItemTableRanges()
    {
        FormDataSource formDataSource = this.dataSource();
        QueryBuildDataSource qbdsWorkFlowWorkItemTable = formDataSource.query().dataSourceTable(tableNum(WorkflowWorkItemTable));
        QueryBuildRange userIdRange = qbdsWorkFlowWorkItemTable.addRange(fieldNum(WorkflowWorkItemTable, UserId));
        userIdRange.value(curUserId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRecIdRanges</Name>
				<Source><![CDATA[
    private void applyRecIdRanges()
    {
        FormDataSource formDataSource = this.dataSource();
        VendInvoiceInfoTable infoTable = element.args().record() as VendInvoiceInfoTable;
        QueryBuildDataSource qbdsVendInvoiceInfoTable = formDataSource.query().dataSourceTable(tableNum(VendInvoiceInfoTable));
        QueryBuildRange recIdRange = qbdsVendInvoiceInfoTable.addRange(fieldNum(VendInvoiceInfoTable, RecId));
        recIdRange.value(queryValue(infoTable.recid));
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdits</Name>
				<Source><![CDATA[
    void allowEdits(boolean _allowEdits)
    {
        vendInvoiceInfoTable_ds.allowEdit(_allowEdits);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditsForHeader</Name>
				<Source><![CDATA[
    void allowEditsForHeader()
    {
        vendInvoiceInfoTable_ds.allowDelete(vendInvoiceListPageState.invoiceHeaderAllowDelete(vendInvoiceInfoTable));
        if (FeatureStateProvider::isFeatureEnabled(ProjInterCompanyVendorInvoiceFeature::instance()))
        {
            vendInvoiceInfoTable_ds.allowDelete(!vendInvoiceInfoTable.checkIfVendInvoiceIsGeneratedFormCustProjInvoice());
        }

        if (VendInvoiceAutomationStateManagement::isInvoiceReadonly(vendInvoiceInfoTable))
        {
            element.allowEdits(false);
            element.enableHeaderActions(false);
        }
        else
        {
            if (vendInvoiceListPageState.invoiceHeaderEditFull(vendInvoiceInfoTable))
            {
                element.allowEdits(true);
                element.enableHeaderActions(true);
            }
            else if (vendInvoiceListPageState.invoiceHeaderEditPartial(vendInvoiceInfoTable))
            {
                element.allowEdits(true);
                element.enableHeaderActions(true);
            }
            else
            {
                element.allowEdits(false);
                element.enableHeaderActions(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEnable</Name>
				<Source><![CDATA[
    void allowEnable()
    {
        boolean enableButtons;

        if (vendInvoiceInfoTable_ds.getFirst())
        {
            enableButtons = true;
        }

        //Enable/Disable any non-new related buttons
        variances.enabled(enableButtons);
        actions.enabled(enableButtons);
        buttonEditInvoice.enabled(enableButtons);
        view.enabled(enableButtons);
        attachmentsGroup.enabled(enableButtons);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAssignedToMyQueues</Name>
				<Source><![CDATA[
    public void applyAssignedToMyQueues()
    {
        FormDataSource formDataSource;
        QueryBuildDataSource qbdsVendInvoiceInfoTable;
        QueryBuildDataSource qbdsWorkFlowItemTable;
        QueryBuildDataSource qbdsWorkflowWorkItemQueue;
        QueryBuildDataSource qbdsWorkflowWorkItemQueueAssignee;
        QueryBuildDataSource qbdsWorkflowQueueDocumentCommonFields;
        QueryBuildRange rangeId;
        QueryBuildRange rangeStatus;
        QueryBuildRange rangeAssignee;
        QueryBuildRange rangeWorkflowQueueDocument;

        formDataSource = this.dataSource();
        qbdsVendInvoiceInfoTable = formDataSource.query().dataSourceTable(tableNum(VendInvoiceInfoTable));
        qbdsWorkflowQueueDocumentCommonFields = qbdsVendInvoiceInfoTable.addDataSource(tableNum(WorkflowQueueDocumentCommonFields));

        qbdsWorkflowQueueDocumentCommonFields.joinMode(JoinMode::ExistsJoin);

        // set the join where clause values
        rangeWorkflowQueueDocument = qbdsWorkflowQueueDocumentCommonFields.addRange(fieldNum(VendInvoiceInfoTable, RecId));
        rangeWorkflowQueueDocument.status(RangeStatus::Hidden);
        rangeWorkflowQueueDocument.value(strFmt('((%1 == %2) || (%3 == %2) && (%4 == %5) || (%6 == %5))',
                                        fieldStr(WorkflowQueueDocumentCommonFields, RefRecId),
                                        'VendInvoiceInfoTable.RecId',
                                        fieldStr(WorkflowQueueDocumentCommonFields, ParentRefRecId),
                                        fieldStr(WorkflowQueueDocumentCommonFields, RefTableId),
                                        'VendInvoiceInfoTable.TableId',
                                        fieldStr(WorkflowQueueDocumentCommonFields, ParentRefTableId)));

        // set the rest of the exist join links
        qbdsWorkFlowItemTable = qbdsWorkflowQueueDocumentCommonFields.addDataSource(tableNum(WorkflowWorkItemTable));
        qbdsWorkFlowItemTable.joinMode(JoinMode::ExistsJoin);
        qbdsWorkFlowItemTable.addLink(fieldNum(WorkflowQueueDocumentCommonFields, WorkflowWorkitem), fieldNum(WorkflowWorkItemTable, RecId));

        qbdsWorkflowWorkItemQueue = qbdsWorkFlowItemTable.addDataSource(tableNum(WorkflowWorkItemQueue));
        qbdsWorkflowWorkItemQueue.joinMode(JoinMode::ExistsJoin);

        qbdsWorkflowWorkItemQueueAssignee = qbdsWorkflowWorkItemQueue.addDataSource(tableNum(WorkflowWorkItemQueueAssignee));
        qbdsWorkflowWorkItemQueueAssignee.joinMode(JoinMode::ExistsJoin);
        qbdsWorkflowWorkItemQueue.addLink(fieldNum(WorkflowWorkItemTable,Queue),fieldNum(WorkflowWorkItemQueue, RecId));
        qbdsWorkflowWorkItemQueueAssignee.addLink(fieldNum(WorkflowWorkItemQueue,RecId),fieldNum(WorkflowWorkItemQueueAssignee, WorkitemQueue));

        // pending work items only
        rangeStatus = qbdsWorkFlowItemTable.addRange(fieldNum(WorkflowWorkItemTable, Status));
        rangeStatus.value(queryValue(WorkflowWorkItemStatus::Pending));
        rangeStatus.status(RangeStatus::Locked);

        // assigned to current user only
        rangeAssignee = qbdsWorkflowWorkItemQueueAssignee.addRange(fieldNum(WorkflowWorkItemQueueAssignee, User));
        rangeAssignee.value(queryValue(curUserId()));
        rangeAssignee.status(RangeStatus::Locked);

        //The Id-range is only used to lock the query from the UI
        rangeId = qbdsWorkFlowItemTable.addRange(fieldNum(WorkflowWorkItemTable, Id));
        rangeId.status(RangeStatus::Locked);
        rangeId.enabled(false);

    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow()
    {
        return vendInvoiceInfoTable.canSubmitToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupPurchParmUpdate</Name>
				<Source><![CDATA[
    private void cleanupPurchParmUpdate()
    {
        if (purchFormLetter && purchFormLetter.parmId() && parmId)
        {
            PurchParmUpdate::deleteWithoutUpdate(purchFormLetter.parmId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.cleanupPurchParmUpdate();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form to edit <c>MarkupTrans</c> table records.
    /// </summary>
    /// <param name="_menuFunction">
    /// A menu function for the form to open.
    /// </param>
    /// <param name="_record">
    /// A record related to the <c>MarkupTrans</c> table records that are to be edited.
    /// </param>
    public void editMarkupTrans(xMenuFunction _menuFunction, Common _record)
    {
        Args args = new Args();

        args.caller(this);
        args.record(_record);
        args.parm(_menuFunction.parameters());
        _menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableGridDefaultAction</Name>
				<Source><![CDATA[
    public void enableGridDefaultAction(boolean _enable)
    {
        if (_enable)
        {
            grid.defaultAction(gridDefaultAction);
        }
        else
        {
            grid.defaultAction('');
        }

        buttonEditInvoice.enabled(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    public void enableHeaderActions(boolean _enable)
    {
        boolean isWorkflowInReview = vendInvoiceInfoTable.isDocumentBeingProcessedInWorklow();

        buttonPageParmTableMiscCharges.enabled(_enable && !isLastInvoiceAdvance);
        buttonPageParmTableAllocate.enabled(_enable && !isLastInvoiceAdvance);
        taxTransSource.enabled(_enable);
        matchDetails.enabled((_enable || isWorkflowInReview) && VendParameters::find().editUseInvoiceMatching() == NoYes::Yes && !isLastInvoiceAdvance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the print management variables.
    /// </summary>
    /// <returns>
    /// A container with the printOut, printFormLetter, printReplySheet, printPriceAmount and usePrintManagement variable values.
    /// </returns>
    public container getPrintVariables()
    {
        return [printInvoice
                ,printout
                ,usePrintManagement
                ,printSalesFormLetter
                ,printEUVatInvoice
                // <GEERU>
                ,purchFormLetter.printFacture_RU()
                ,purchFormLetter.printAcceptanceReport_RU()
                ,purchFormLetter.printInventBaileeReport_RU()
                // </GEERU>
                // <GIN>
                ,purchFormLetter.printExciseFormLetter_IN()
                ,purchFormLetter.printExciseInvoiceAddress_IN()
                // </GIN>
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Args args = this.args();

        if (!args)
        {
            error("@SYS22539");
            this.close();
        }

        // <GIN>
        isIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        isBE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]);
        isRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        multiSelectionContext = args.multiSelectionContext();

        // Because the query that backs this form has a view, when we copy the caller query, the sort order from the query gets thrown away.
        // We are getting around this by passing a special parameter in special cases to indicate that we want to track the initial record value,
        // remove that record, and then later apply the passed record selection.  This retains the originally intended sort order from the query.
        if (strContains(strLwr(args.parm()), 'clearcopycallerquery') && args.copyCallerQuery())
        {
            vendInvoiceInfoTableInitial = args.record();
            args.record(null);
        }

        super();

        // Setup the company filter
        filterHelper = VendInvoiceListFilterHelper::construct(VendInvoiceInfoTable_DS, CompanyFilter, VendInvoiceInfoTable_dataAreaId);

        // If the user has access to more than 1 company, then that user gets access to the global functionality
        if (conLen(filterHelper.parmUserCompanies()) > 1)
        {
            isGlobalEntry = true;
        }

        // Apply the calling form's company filter criteria if the caller proper implements VendIVendInvoiceFilterable
        if (isGlobalEntry)
        {
            VendIVendInvoiceFilterable iVendInvoiceFilterable = args.caller() as VendIVendInvoiceFilterable;
            if (iVendInvoiceFilterable)
            {
                filterHelper.addCompanyCriteria(iVendInvoiceFilterable.getSelectedFilterCriteria());
            }
            filterHelper.addSelectedCompaniesToDataSourceRange();
        }
        filterHelper.setCompanyControlsVisibility();

        this.enableCountryRegion(!isGlobalEntry);
        this.warnOnActivateCompanyChange(false);

        // Remember what is the original default action, to re-enable it later once it is disabled
        gridDefaultAction = grid.defaultAction();

        switch (args.menuItemName())
        {
            case menuitemDisplayStr(VendInvoiceInfoListPage):
                this.adjustWorkflowWorkItemTableRanges();
                break;

            case menuitemDisplayStr(VendInvoiceAssignedToQueuesThatIBelongTo):
                this.applyAssignedToMyQueues();
                break;

			case menuItemDisplayStr(VendInvoiceAssignedToMeInternalExternal):
                if (args.lookupTable() == tableNum(VendInvoiceInfoLine))
                {
                    VendInvoiceInfoLine vendInvoiceInfoLineLoc = VendInvoiceInfoLine::findRecId(str2int64(args.lookupValue()));
                    args.lookupTable(tableNum(VendInvoiceInfoTable));
                    args.lookupField(fieldNum(VendInvoiceInfoTable, RecId));
                    args.lookupValue(int642str(vendInvoiceInfoLineLoc.vendInvoiceInfoTable().RecId));
                }
                break;

            case menuItemDisplayStr(VendRecurrenceInvoiceHistory):
                this.applyRecIdRanges();
                break;
        }

        if (!args.record() && args.lookupRecord())
        {
            args.record(args.lookupRecord());
            args.lookupRecord(null);
        }

        if (isGlobalEntry)
        {
            this.setKnownCountryRegionFieldVisibility();
        }

        this.setKnownFeatureFieldVisibility();
        this.enableBasedOnCompany();

        if (isBE)
        {
            element.initDesign_BE();
        }

        createFromTemplateDropDialog.visible(VendRecurringInvoiceFeature::isEnabled());

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            taxTransSource.visible(false);
            TaxDocumentLauncher.visible(true);
        }
        // </GTE>

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            TaxWithhold.visible(true);
        }

        this.setVisibilityForInvoiceAutomationControls();

        if (!FeatureStateProvider::isFeatureEnabled(InvoiceCaptureFeature::instance()))
        {
            FeatureManagementNotifications::addFeatureRecommendationNotification(InvoiceCaptureFeature::instance(), recommendationRuleId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForInvoiceAutomationControls</Name>
				<Source><![CDATA[
    private void setVisibilityForInvoiceAutomationControls()
    {
        boolean isVendorInvoiceAutomationFeatureEnabled = VendAutomateVendorInvoicesFeature::isEnabled();

        vendInvoiceInfoTable_ds.object(fieldNum(VendInvoiceInfoTable, ReceivedDate)).visible(isVendorInvoiceAutomationFeatureEnabled);
        vendInvoiceInfoTable_ds.object(fieldNum(VendInvoiceInfoTable, ImportedAmount)).visible(isVendorInvoiceAutomationFeatureEnabled);

        buttonSimulatePosting.visible(isVendorInvoiceAutomationFeatureEnabled);
        ResultsOfPostingSimulation.visible(isVendorInvoiceAutomationFeatureEnabled);

        VendParameters vendParameters = VendParameters::find();

        if (isVendorInvoiceAutomationFeatureEnabled && vendParameters.AutomationWorkflowSubmission == NoYes::Yes)
        {
            AutomaticWorkflowSubmissionStatus.visible(true);
        }

        if (isVendorInvoiceAutomationFeatureEnabled
            && vendParameters.AutomationProductReceiptMatching == NoYes::Yes
            && vendParameters.editUseInvoiceMatching() == NoYes::Yes)
        {
            AutomationMatchingStatus.visible(true);
        }

        // Project budget menu item button should be hidden if Enable Project Operations on Dynamics 365 Customer Engagement feature is enabled
        ProjBudgetDisplay.visible(!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForInvoiceAutomationControlsOnInvoiceSelected</Name>
				<Source><![CDATA[
    private void setVisibilityForInvoiceAutomationControlsOnInvoiceSelected()
    {
        boolean isVendInvoiceAutomationFeatureEnabled = VendAutomateVendorInvoicesFeature::isEnabled();

        buttonSimulatePosting.enabled(isVendInvoiceAutomationFeatureEnabled
                && vendInvoiceInfoTable.RequestStatus != VendInvoiceRequestStatus::Approved);

        ResultsOfPostingSimulation.enabled(isVendInvoiceAutomationFeatureEnabled
                && VendInvoiceSimulatedPostResultDetails::findResultDetails(vendInvoiceInfoTable).RecId != 0);

        boolean isAutomaticSubmissionEnabled = VendParameters::find().AutomationWorkflowSubmission == NoYes::Yes;
        boolean isIncludedInProcessAutomation = VendInvoiceAutomationStateManagement::isAutomationInvoice(vendInvoiceInfoTable);

        if (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled())
        {
            VendInvoiceAutomationHistoryTimelineDialog.visible(isIncludedInProcessAutomation 
                && vendInvoiceInfoTable.AutomationStatus != VendInvoiceAutomationStatus::NotApplicable);
            VendInvoiceAutomationHistoryTimelineDialog.text("@AccountsPayable:VendInvoiceAutomationHistoryTimelineDialogLabelV2");
        }
        else
        {
            VendInvoiceAutomationHistoryTimelineDialog.visible(isAutomaticSubmissionEnabled && isIncludedInProcessAutomation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDesign_BE</Name>
				<Source><![CDATA[
    public void initDesign_BE()
    {
        InvoiceChange.visible(vendInvoiceInfoTable.isNonPO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKnownCountryRegionFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// When this form is in global mode, all controls across all country/regions will appear no matter if the user has access to companies in those regions.
    /// This method will display or hide known country/region controls if the user does or does not have access to a company in those country/regions.
    /// </summary>
    private void setKnownCountryRegionFieldVisibility()
    {
        boolean hasBR = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]);

        buttonUpdateQtyAndPriceFromNfe_BR.visible(hasBR);
        buttonHeaderFiscalDocumentText_BR.visible(hasBR);
        vendInvoiceXmlMatch_BR.visible(hasBR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKnownFeatureFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls visibility of known feature fields based on if any company that the current user has access to has those features turned on or not.
    /// This makes for a cleaner user experience if the user has access to multiple companies.
    /// </summary>
    private void setKnownFeatureFieldVisibility()
    {
        boolean isMatchingSetup = false;
        boolean isMatchingApprovalRequired = false;
        boolean isInvoiceGroupingEnabled = false;
        boolean isInvoiceTotalEnabled = false;
        VendParameters vendParameters;

        if (isGlobalEntry && !VendInvoiceInfoListPageGlobalEntryPerfFlight::instance().isEnabled())
        {
            for (int i = 1; i <= conLen(filterHelper.parmUserCompanies()); i++)
            {
                changecompany(conPeek(filterHelper.parmUserCompanies(), i))
                {
                    vendParameters = VendParameters::find();

                    if (!isMatchingSetup && vendParameters.editUseInvoiceMatching())
                    {
                        isMatchingSetup = true;
                    }

                    if (!isMatchingApprovalRequired && vendParameters.editUseInvoiceMatching() && vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::RequireApproval)
                    {
                        isMatchingApprovalRequired = true;
                    }

                    if (!isInvoiceGroupingEnabled && vendParameters.VendInvoiceGroupingEnable)
                    {
                        isInvoiceGroupingEnabled = true;
                    }

                    if (!isInvoiceTotalEnabled && vendParameters.editCalculateInvoiceTotal())
                    {
                        isInvoiceTotalEnabled = true;
                    }

                    if (isMatchingSetup && isMatchingApprovalRequired && isInvoiceGroupingEnabled && isInvoiceTotalEnabled)
                    {
                        break;
                    }
                }
            }
        }
        else
        {
            vendParameters = VendParameters::find();
            isMatchingSetup = vendParameters.editUseInvoiceMatching();
            isMatchingApprovalRequired = isMatchingSetup && vendParameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::RequireApproval;
            isInvoiceGroupingEnabled = vendParameters.VendInvoiceGroupingEnable;
            isInvoiceTotalEnabled = vendParameters.editCalculateInvoiceTotal();
        }

        lastMatchVariance.visible(isMatchingSetup);
        matchApproved.visible(isMatchingApprovalRequired);
        // Make VendInvoiceGroup visible if the AP InvoiceGrouping feature is enabled.
        vendInvoiceInfoTable_VendInvoiceGroup.visible(isInvoiceGroupingEnabled);

        if (!isInvoiceTotalEnabled)
        {
            FormDataSource formDataSource = this.dataSource();
            formDataSource.query().dataSourceTable(tableNum(VendInvoiceTotalAccountingDistributionSum)).enabled(false);
        }
        invoiceTotal.visible(isInvoiceTotalEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBasedOnCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/disables functionality based on the company of the currently selected record(s)
    /// </summary>
    /// <param name = "_dataAreaId">The DataAreaId in which to execute this code.</param>
    public void enableBasedOnCompany(DataAreaId _dataAreaId = curExt())
    {
        changecompany (_dataAreaId)
        {
            VendParameters vendParameters = VendParameters::find();
            PurchParameters purchParameters = PurchParameters::find();

            boolean isFrenchRegulatoryEnabled = PublicSectorUtils::isFrenchRegulatoryEnabled();

            // <GBR>
            boolean enableXmlMatchingButtons = VendInvoiceInfoTable.isNfeNotIssuingNorReversing_BR();
            // </GBR>
            // <GIN>
            isIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
            // </GIN>

            this.initializePurchFormLetter(DocumentStatus::Invoice);

            // <GBR>
            element.enableXmlButtons_BR(enableXmlMatchingButtons);
            buttonHeaderFiscalDocumentText_BR.enabled(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]));
            // </GBR>>

            //Enable match details if use invoice matcing is turned on
            matchDetails.enabled(vendParameters.editUseInvoiceMatching() == NoYes::Yes);

            //Enable policy violation if use invoice matcing is turned on
            policyViolation.enabled(vendParameters.editUseInvoiceMatching() == NoYes::Yes);

            //Enable match button if use invoice matcing is turned on & no PS duplicates allowed
            autoMatch.enabled(vendParameters.editUseInvoiceMatching() == NoYes::Yes && purchParameters.CheckPackingSlip == ReuseVoucher::NoDuplicate);

            // Disable the from Product Receipt button when the commitments feature is enabled.
            vendEditInvoiceFromPackingSlip.enabled(!isFrenchRegulatoryEnabled);
            Maintain_PSN.visible(isFrenchRegulatoryEnabled);

            documentStatus = purchFormLetter.documentStatus();
            vendInvoiceListPageState = PurchEditLinesForm::construct(documentStatus);
            printEUVatButton.visible(vendInvoiceListPageState.showPrintEUVatInvoice());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchFormLetter</Name>
				<Source><![CDATA[
    private void initializePurchFormLetter(DocumentStatus _documentStatus)
    {
        BatchInfo localBatchInfo;
        if (purchFormLetter)
        {
            localBatchInfo = purchFormLetter.BatchInfo();
        }

        purchFormLetter = PurchFormLetter::construct(_documentStatus);

        if (localBatchInfo)
        {
            localBatchInfo.parmRunClass(purchFormLetter);
            purchFormLetter.setBatchInfo(localBatchInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrint</Name>
				<Source><![CDATA[
    private void initPrint()
    {
        purchFormLetter.printFormLetter(printInvoice);
        purchFormLetter.printout(printout);
        purchFormLetter.usePrintManagement(usePrintManagement);
        purchFormLetter.printSalesFormLetter(printSalesFormLetter);
        purchFormLetter.printEUVatInvoice(printEUVatInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchParmUpdate</Name>
				<Source><![CDATA[
    private void initPurchParmUpdate(boolean _forceInit)
    {
        PurchParmUpdate purchParmUpdate;

        if (_forceInit)
        {
            purchFormLetter.purchParmUpdate(null);
            purchFormLetter.parmId('');
        }

        if (purchFormLetter.parmId() != '')
        {
            purchParmUpdate = PurchParmUpdate::find(parmId, true);

            if (purchParmUpdate)
            {
                purchFormLetter.purchParmUpdate(purchParmUpdate);
                return;
            }
        }

        purchFormLetter.initNewPurchParmUpdate();
        parmId = purchFormLetter.parmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the Office integration menu to add the Definition Group Header entity template.
    /// </summary>
    /// <param name = "_menuOptions">The Office integration menu.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var vendorInvoiceHeader = _menuOptions.getOptionsForEntity(tableStr(VendorInvoiceHeaderEntity));

        if (vendorInvoiceHeader)
        {
            vendorInvoiceHeader.includeDefault(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the filters necessary for the Excel template to reflect only the active form data when called from the Office menu.
    /// </summary>
    /// <param name = "_menuItem">The menu item which triggered the Office integration call.</param>
    /// <returns>A map of filters to apply to the Office integration data.</returns>
    [SysObsolete("Code-generated template could not be reuseable due to filter only related to header. Will use the 'add related' functionality to enable filtering of the lines based on the header.", true, 30\6\2020)]
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        Map filtersToApply = null;

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    [SysObsolete("This function call should not be used and will be deprecated together with getInitialTemplateFilters", false, 14\6\2024)]
    public void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        //Required by the OfficeITemplateCustomExporter interface but unused for this scenario
    }

]]></Source>
			</Method>
			<Method>
				<Name>openExcelTemplate</Name>
				<Source><![CDATA[
    private void openExcelTemplate()
    {
        // Variables used for opening Excel template
        DocuTemplateName templateName = resourceStr(VendInvoiceLineEntityTemplate);
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            Map filtersToApply = this.createFiltersForExcelVendorInvoiceEntity(vendInvoiceInfoTable);

            // Generate the workbook using the template and filters
            DocuTemplateRender renderer = new DocuTemplateRender();
            str documentUrl = renderer.renderTemplateToStorage(template, filtersToApply, OfficeTrimmable::construct());

            // Pass the workbook to the user
            if (documentUrl)
            {
                Browser b = new Browser();
                b.navigate(documentUrl, false, false);
            }
            else
            {
                error(strFmt("@ApplicationFoundation:DocuTemplateGenerationFailed", templateName));
            }
        }
        else
        {
            warning(strFmt("@ApplicationFoundation:DocuTemplateNotFound", templateName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiltersForExcelVendorInvoiceEntity</Name>
				<Source><![CDATA[
    private Map createFiltersForExcelVendorInvoiceEntity(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        str lineEntityName = tableStr(VendorInvoiceLineEntity);
        str lineEntityTableRefId = fieldStr(VendorInvoiceLineEntity, HeaderReference);
        str lineEntityDataAreaId = fieldStr(VendorInvoiceLineEntity, dataAreaId);
        str headerEntityName = tableStr(VendorInvoiceHeaderEntity);
        str headerEntityTableRefId = fieldStr(VendorInvoiceHeaderEntity, HeaderReference);
        str headerEntityDataAreaId = fieldStr(VendorInvoiceHeaderEntity, dataAreaId);

        Map filtersToApply = new Map(Types::String, Types::Class);

        // Create lines filter
        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(lineEntityName);

        // Create header filter
        ExportToExcelFilterTreeBuilder lineFilterBuilder = new ExportToExcelFilterTreeBuilder(headerEntityName);

        var filter = filterBuilder.and(
            lineFilterBuilder.areEqual(headerEntityTableRefId, _vendInvoiceInfoTable.TableRefId),
            lineFilterBuilder.areEqual(headerEntityDataAreaId, _vendInvoiceInfoTable.DataAreaId));

        filtersToApply.insert(headerEntityName, filter);

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingInBatch</Name>
				<Source><![CDATA[
    private boolean isPostingInBatch()
    {
        BatchInfo batchInfo = purchFormLetter.BatchInfo();
        return batchInfo && batchInfo.parmBatchExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the selected invoice(s).
    /// </summary>
    void postInvoice()
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        List postedParmIds = new List(Types::String);
        BatchInfo localBatchInfo = purchFormLetter.BatchInfo();

        try
        {
            for (localVendInvoiceInfoTable = vendInvoiceInfoTable_ds.getFirst(true) ? vendInvoiceInfoTable_ds.getFirst(true) : vendInvoiceInfoTable_ds.cursor(); localVendInvoiceInfoTable; localVendInvoiceInfoTable = vendInvoiceInfoTable_ds.getNext())
            {
                // Ensure that we are executing the posting in the correct company.
                changecompany (localVendInvoiceInfoTable.DataAreaId)
                {
                    VendInvoiceInfoTable localVendInvoiceInfoTableForPosting = VendInvoiceInfoTable::find(localVendInvoiceInfoTable.ParmId, localVendInvoiceInfoTable.TableRefId);

                    if (!element.canPostInvoice(localVendInvoiceInfoTableForPosting))
                    {
                        continue;
                    }

                    if (VendInvoiceFromApprovalPostInListPageDateAutoAdjustFlight::instance().isEnabled() &&
                        FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
                    {
                        localVendInvoiceInfoTable.updatePostingDateV2();
                        localVendInvoiceInfoTableForPosting = VendInvoiceInfoTable::find(localVendInvoiceInfoTable.ParmId, localVendInvoiceInfoTable.TableRefId);
                    }

                    //Check for the Invoice if the Invoice is from pool and create the PurchFormLetter Object accordingly
                    if (localVendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
                    {
                        purchFormLetter = purchFormLetter_ApproveJournal::newApprovalFromSavedInvoice(localVendInvoiceInfoTable, null, true, true);
                    }
                    else
                    {
                        if (!VendInvoiceFromApprovalPostInListPageDateAutoAdjustFlight::instance().isEnabled() &&
                            FeatureStateProvider::isFeatureEnabled(VendInvoicePostingDateAutoAdjustmentFeature::instance()))
                        {
                            localVendInvoiceInfoTable.updatePostingDateV2();
                            localVendInvoiceInfoTableForPosting = VendInvoiceInfoTable::find(localVendInvoiceInfoTable.ParmId, localVendInvoiceInfoTable.TableRefId);
                        }
                        purchFormLetter = PurchFormLetter_Invoice::newFromSavedInvoice(localVendInvoiceInfoTable);
                    }

                    this.initPurchParmUpdate(true);
                    this.initPrint();
                    purchFormLetter.proforma(false);

                    postedParmIds.addEnd(purchFormLetter.parmId());

                    boolean runInSandbox = true;

                    purchFormLetter.reArrangeNow(false);

                    localBatchInfo.parmRunClass(purchFormLetter);
                    purchFormLetter.setBatchInfo(localBatchInfo);

                    if (this.isPostingInBatch())
                    {
                        //Move the invoice to active state for posting
                        VendInvoiceInfoTable::moveFromSavedToActive(localVendInvoiceInfoTableForPosting, PurchFormLetter.parmId());

                        if (VendInvoiceSplitDistributionPostFeature::isEnabled())
                        {
                            //Create a batch job for Invoice posting with split distribution
                            SourceDocumentSplitDistributionPostHelper splitDistributionPostHelper = SourceDocumentSplitDistributionPostHelper::construct(localVendInvoiceInfoTableForPosting.SourceDocumentHeader);
                    
                            splitDistributionPostHelper.addTask(purchFormLetter);
                            splitDistributionPostHelper.addDependencyOnDistributionTask(purchFormLetter);
                            splitDistributionPostHelper.submitToBatch();
                        }
                        else
                        {
                            //Create a batch job for Invoice posting
                            purchFormLetter.doBatch();
                        }
                        //Reset the batch header for the next invoice
                        localBatchInfo.resetBatchHeader();
                    }
                    else
                    {
                        purchFormLetter.update(localVendInvoiceInfoTable,
                                            localVendInvoiceInfoTable.Num,
                                            purchFormLetter.transDate(),
                                            PurchUpdate::All,
                                            AccountOrder::None,
                                            purchFormLetter.proforma(),
                                            purchFormLetter.printFormLetter(),
                                            usePrintManagement,
                                            purchFormLetter.creditRemaining(),
                                            conNull(),
                                            runInSandbox);
                    }

                    localVendInvoiceInfoTable.reread();
                    if (localVendInvoiceInfoTable.ParmId != '')
                    {
                        element.createBREForPostedPOInvoice(localVendInvoiceInfoTable);
                    }

                    this.initPurchParmUpdate(true);
                }
            }
        }
        finally
        {
            purchFormLetter.documentPostMessaging(list2Con(postedParmIds), postedParmIds.elements());
            vendInvoiceInfoTable_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBREForPostedPOInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not to create budget register entry for posting of the invoice(s).
    /// </summary>
    protected void createBREForPostedPOInvoice(VendInvoiceInfoTable _localVendInvoiceInfoTableForPosting)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>simulatePosting</Name>
				<Source><![CDATA[
    public void simulatePosting()
    {
        VendInvoiceInfoTable vendInvoiceInfoTableForSimulatePosting = vendInvoiceInfoTable_ds.getFirst(true) ?
            vendInvoiceInfoTable_ds.getFirst(true) : vendInvoiceInfoTable_ds.cursor();
        List invoiceHeaders = new List(Types::Record);

        while (vendInvoiceInfoTableForSimulatePosting)
        {
            vendInvoiceInfoTableForSimulatePosting.updatePostingDateV2();
            invoiceHeaders.addEnd(vendInvoiceInfoTableForSimulatePosting);
            vendInvoiceInfoTableForSimulatePosting = vendInvoiceInfoTable_ds.getNext();
        }

        VendInvoiceSimulatedPostProcessor::construct().simulateMultipleInvoices(invoiceHeaders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to post the invoice.
    /// </summary>
    /// <param name = "_localVendInvoiceInfoTable">
    ///     The selected table record.
    /// </param>
    /// <returns>
    ///     true if the posting can be done; otherwise, false.
    /// </returns>
    protected boolean canPostInvoice(VendInvoiceInfoTable _localVendInvoiceInfoTableForPosting)
    {
        boolean ret = true;

        if (!strLTrim(_localVendInvoiceInfoTableForPosting.Num) && !this.isRevision_RU(_localVendInvoiceInfoTableForPosting))
        {
            ret = false;
            error(purchFormLetter.missingNumber());
        }

        if (ret)
        {
            ret = ret && _localVendInvoiceInfoTableForPosting.checkCreditCorrection();
        }

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            ret = ret && VendInvoiceInfo_PaymentDisbursement::checkPercentageAllocation(VendInvoiceInfoTable::findRecId(_localVendInvoiceInfoTableForPosting.RecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInvoice</Name>
				<Source><![CDATA[
    void printInvoice()
    {
        VendInvoiceInfoTable localVendInvoiceInfoTable;
        BatchInfo localBatchInfo = purchFormLetter.batchInfo();

        try
        {
            for (localVendInvoiceInfoTable = vendInvoiceInfoTable_ds.getFirst(true) ? vendInvoiceInfoTable_ds.getFirst(true) : vendInvoiceInfoTable_ds.cursor(); localVendInvoiceInfoTable; localVendInvoiceInfoTable = vendInvoiceInfoTable_ds.getNext())
            {
                // Ensure that we are executing the printing of the invoice in the correct company.
                changecompany (localVendInvoiceInfoTable.DataAreaId)
                {
                    if (!strLTrim(localVendInvoiceInfoTable.Num) && !this.isRevision_RU(localVendInvoiceInfoTable))
                    {
                        error(purchFormLetter.missingNumber());
                        continue;
                    }

                    if (localVendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
                    {
                        purchFormLetter = purchFormLetter_ApproveJournal::newApprovalFromSavedInvoice(localVendInvoiceInfoTable, null, true, true);
                        this.initPurchParmUpdate(true);
                        this.initPrint();
                        PurchParmUpdate::setProformaValue(ParmId, true);
                    }
                    else
                    {
                        purchFormLetter = PurchFormLetter_Invoice::newFromSavedInvoice(localVendInvoiceInfoTable);
                        this.initPurchParmUpdate(true);
                        this.initPrint();
                    }
                    purchFormLetter.proforma(true);
                    purchFormLetter.reArrangeNow(false);

                    localBatchInfo.parmRunClass(purchFormLetter);
                    purchFormLetter.setBatchInfo(localBatchInfo);

                    if (this.isPostingInBatch())
                    {
                        if (purchFormLetter.checkPrinterSettingsMultiThread())
                        {
                            //Re-read the table buffer as the form query selects few fields
                            VendInvoiceInfoTable localVendInvoiceInfoTableForPosting = VendInvoiceInfoTable::find(localVendInvoiceInfoTable.ParmId, localVendInvoiceInfoTable.TableRefId);

                            //Move the invoice to active state for posting
                            VendInvoiceInfoTable::moveFromSavedToActive(localVendInvoiceInfoTableForPosting, PurchFormLetter.parmId());

                            //Create a batch job for Invoice posting
                            purchFormLetter.doBatch();

                            //Reset the batch header for the next invoice
                            localBatchInfo.resetBatchHeader();
                        }
                    }
                    else
                    {
                        purchFormLetter.update(localVendInvoiceInfoTable,
                                               localVendInvoiceInfoTable.Num,
                                               purchFormLetter.transDate(),
                                               PurchUpdate::All,
                                               AccountOrder::None,
                                               purchFormLetter.proforma(),
                                               purchFormLetter.printFormLetter(),
                                               usePrintManagement);
                    }

                    this.initPurchParmUpdate(true);
                }
            }
        }
        finally
        {
            vendInvoiceInfoTable_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the VendInvoiceInfoTable table data source.
    /// </summary>
    /// <remarks>
    /// Called by child forms when closing due to possibly changed data contained in this table.
    /// </remarks>
    public void refresh()
    {
        // The saved invoice could have been changed so update the grid while retaining the current selected row for the user.
        int pos = vendInvoiceInfoTable_ds.getPosition();
        vendInvoiceInfoTable_ds.research();
        vendInvoiceInfoTable_ds.setPosition(pos);

        this.setKnownCountryRegionFieldVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAfterWorkflowSubmit</Name>
				<Source><![CDATA[
    public void refreshAfterWorkflowSubmit()
    {
        vendInvoiceInfoTable_ds.reread();
        vendInvoiceInfoTable_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBase</Name>
				<Source><![CDATA[
    PurchFormLetter runBase()
    {
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBasePostPrint</Name>
				<Source><![CDATA[
    PurchFormLetter runBasePostPrint()
    {
        return purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        element.allowEnable();
        element.setButtonAccessMultiSelect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccessMultiSelect</Name>
				<Source><![CDATA[
    void setButtonAccessMultiSelect()
    {
        VendInvoiceInfoListPageMultiSelect vendInvoiceInfoListPageMultiSelect = VendInvoiceInfoListPageMultiSelect::determineMultiSelectState(vendInvoiceInfoTable_ds, VendInvoiceInfoTable, vendInvoiceListPageState);

        if (vendInvoiceInfoListPageMultiSelect.parmRecordsMarked())
        {
            boolean shouldBeEnabled = vendInvoiceInfoListPageMultiSelect.parmShouldBeEnabled();
            boolean isInvoiceOpen = vendInvoiceInfoListPageMultiSelect.parmIsInvoiceOpen();
            boolean crossCompaniesMarked = vendInvoiceInfoListPageMultiSelect.parmCrossCompaniesMarked();
            boolean inWorkflowReviewOrRejected = vendInvoiceInfoListPageMultiSelect.parmInWorkflowReviewOrRejected();
            boolean isIncludedInProcessAutomation = vendInvoiceInfoListPageMultiSelect.parmIsIncludedInProcessAutomation();
            boolean workflowPartiallyEnabled = (Workflow::findWorkItemsForCurrentUser(vendInvoiceInfoTable).elements() > 0) || (vendInvoiceInfoTable.RequestStatus != VendInvoiceRequestStatus::InReview);

            if (VendInvoicePostButtonDisableV2Flight::instance().isEnabled())
            {
                InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy  = vendInvoiceInfoTable.purchTable().interCompanyEndPointActionPolicy();

                post.enabled(shouldBeEnabled && !isInvoiceOpen && !isIncludedInProcessAutomation &&
                    ((interCompanyEndpointActionPolicy && interCompanyEndpointActionPolicy.BypassVendorInvoiceWorkflowForIntercompanyVendorInvoices) ||
                    !Workflow::findWorkflowConfigurationToActivate(vendInvoiceInfoTable, workflowTypeStr(VendProcessInvoice)) ||
                    (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved)));
            }
            else
            {
                post.enabled(shouldBeEnabled && !isInvoiceOpen && !isIncludedInProcessAutomation);
            }                     
            parmTableTotals.enabled((shouldBeEnabled && !isInvoiceOpen && workflowPartiallyEnabled) || isIncludedInProcessAutomation);
            element.enableGridDefaultAction(shouldBeEnabled);
            printProForma.enabled(shouldBeEnabled && !isInvoiceOpen);
            vendInvoiceInfoTable_ds.allowDelete(shouldBeEnabled && !inWorkflowReviewOrRejected && !isInvoiceOpen && !isIncludedInProcessAutomation);
            //Enable match details if use invoice matching is turned on
            matchDetails.enabled(!crossCompaniesMarked && VendParameters::find().editUseInvoiceMatching() == NoYes::Yes && !isInvoiceOpen);
            //Enable match button if use invoice matching is turned on & no PS duplicates allowed
            autoMatch.enabled(!crossCompaniesMarked && VendParameters::find().editUseInvoiceMatching() == NoYes::Yes && PurchParameters::find().CheckPackingSlip == ReuseVoucher::NoDuplicate);

            // <GBR>
            boolean enableXmlMatchingButtons = VendInvoiceInfoTable.isNfeNotIssuingNorReversing_BR();

            element.enableXmlButtons_BR(enableXmlMatchingButtons);
            // </GBR>

            matching.enabled(!isIncludedInProcessAutomation);
            buttonSimulatePosting.enabled(!isIncludedInProcessAutomation);
            buttonHeader_BudgetCheckResults.enabled(!isIncludedInProcessAutomation);
            buttonHeader_PerformBudgetCheck.enabled(!isIncludedInProcessAutomation);
            taxTransSource.enabled(!isIncludedInProcessAutomation);
            buttonOpenExcelTemplate.enabled(!isIncludedInProcessAutomation);
            menuItemButton_DistributionsView.enabled(!isIncludedInProcessAutomation);
            actions.enabled(!isIncludedInProcessAutomation);
            variances.enabled(!isIncludedInProcessAutomation);
            charges.enabled(!isIncludedInProcessAutomation);
            vendInvoiceHoldHistory.enabled(!isIncludedInProcessAutomation);
            subLedger.enabled(!isIncludedInProcessAutomation);
        }
        else
        {
            post.enabled(false);
            parmTableTotals.enabled(false);
            printProForma.enabled(false);
            vendInvoiceInfoTable_ds.allowDelete(false);
            element.enableGridDefaultAction(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintAcceptanceReport_RU()
    {
        return vendInvoiceListPageState.showPrintAcceptanceReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintEUVatInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>VendInvoiceInfoListPage</c> form printer settings should contain the Print Intra-community invoice option
    /// </summary>
    /// <returns>
    /// true if it should; otherwise, false.
    /// </returns>
    public boolean showPrintEUVatInvoice()
    {
        return vendInvoiceListPageState.showPrintEUVatInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintFacture_RU</Name>
				<Source><![CDATA[
    public boolean showPrintFacture_RU()
    {
        return vendInvoiceListPageState.showPrintFacture_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintInventBaileeReport_RU()
    {
        return vendInvoiceListPageState.showPrintInventBaileeReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print management variables.
    /// </summary>
    /// <param name="_printInvoice">
    /// A boolean value, to indicate if an invoice report will be printed.
    /// </param>
    /// <param name="_printout">
    /// An enum value, to indicate if information before the system is updated should be printed,
    /// or else if information after the system was updated should be printed.
    /// </param>
    /// <param name="_usePrintManagement">
    /// A boolean value, to indicate if print management will be used.
    /// </param>
    /// <param name="_printSalesFormLetter">
    /// A boolean value, to indicate if sales form letter will be printed.
    /// </param>
    /// <param name="_printEUVatInvoice">
    /// A boolean value, to indicate if intra-community invoice will be printed.
    /// </param>
    /// <param name="_printFacture">
    /// A boolean value, to indicate if a facture will be printed.
    /// </param>
    /// <param name="_printAcceptance">
    /// A boolean value, to indicate if an acceptance report will be printed.
    /// </param>
    /// <param name="_printInventBailee">
    /// A boolean value, to indicate if an acceptance report in store will be printed.
    /// </param>
    /// <param name="_printExciseInvoice">
    /// A boolean value, to indicate if an excise invoice report will be printed.
    /// </param>
    /// <param name="_exciseInvoiceAddress">
    /// An enum value, to indicate whether a company address or warehouse address
    /// will be printed.
    /// </param>
    public void setPrintVariables( boolean _printInvoice,
                                    Printout _printout,
                                    boolean _usePrintManagement,
                                    boolean _printSalesFormLetter,
                                    boolean _printEUVatInvoice,
                                    boolean _printFacture = false,
                                    boolean _printAcceptance = false,
                                    boolean _printInventBailee = false
                                    ,boolean _printExciseInvoice = false
                                    ,ExciseInvoiceAddressType_IN _exciseInvoiceAddress = ExciseInvoiceAddressType_IN::WarehouseAddress
                                    )
    {
        printInvoice = _printInvoice;
        printout = _printout;
        usePrintManagement = _usePrintManagement;
        printSalesFormLetter = _printSalesFormLetter;
        printEUVatInvoice = _printEUVatInvoice;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            purchFormLetter.printFacture_RU(_printFacture);
            purchFormLetter.printAcceptanceReport_RU(_printAcceptance);
            purchFormLetter.printInventBaileeReport_RU(_printInventBailee);
        }
        // </GEERU>
        // <GIN>
        if (isIN)
        {
            purchFormLetter.printExciseFormLetter_IN(_printExciseInvoice);
            purchFormLetter.printExciseInvoiceAddress_IN(_exciseInvoiceAddress);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQty</Name>
				<Source><![CDATA[
    PurchUpdate specQty(PurchUpdate _specQty = PurchUpdate::All)
    {
        // This method is used when calculating totals
        return _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonUpdateQtyAndPriceFromNfe_BR</Name>
				<Source><![CDATA[
    private void enableButtonUpdateQtyAndPriceFromNfe_BR(boolean _enabled)
    {
        ButtonUpdateQtyAndPriceFromNfe_BR.enabled(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonVendInvoiceXmlMatch_BR</Name>
				<Source><![CDATA[
    private void enableButtonVendInvoiceXmlMatch_BR(boolean _enabled)
    {
        buttonVendInvoiceXmlMatch_BR.enabled(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonViewReceivedXml_BR</Name>
				<Source><![CDATA[
    private void enableButtonViewReceivedXml_BR(boolean _enabled)
    {
        buttonViewReceivedXML_BR.enabled(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonViewVendInvoiceXmlMapping_BR</Name>
				<Source><![CDATA[
    private void enableButtonViewVendInvoiceXmlMapping_BR(boolean _enabled)
    {
        VendInvoiceXmlMapping_BR.enabled(_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableXmlButtons_BR</Name>
				<Source><![CDATA[
    private void enableXmlButtons_BR(boolean _enableXmlMatchingButtons)
    {
        element.enableButtonVendInvoiceXmlMatch_BR(_enableXmlMatchingButtons);
        element.enableButtonViewReceivedXml_BR(_enableXmlMatchingButtons);
        element.enableButtonViewVendInvoiceXmlMapping_BR(_enableXmlMatchingButtons);
        element.enableButtonUpdateQtyAndPriceFromNfe_BR(_enableXmlMatchingButtons);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMappingIssuesBetweenNfeXmlxViLines_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the vendor invoice lines could be completely mapped against the NF-e received XML lines
    /// </summary>
    /// <returns>
    /// True if the it was NOT possible to completely map the lines; false otherwise
    /// </returns>
    public boolean hasMappingIssuesBetweenNfeXmlxViLines_BR()
    {
        EFDocAccessKey_BR accessKey = vendInvoiceInfoTable.vendInvoiceInfoTable_W().AccessKey_BR;
        EFDocumentReceivedXmlView_BR receivedXmlView = EFDocumentReceivedXmlView_BR::findByAccessKey(accessKey);
        EFDocRecXmlMappingValidator_BR mapValidator = EFDocRecXmlMappingValidator_BR::construct(receivedXmlView, VendInvoiceInfoTable);

        return !mapValidator.allItemsAreMappedBetweenXmlAndVendorInv();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInvoiceLinesFromNfeXmlLines_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates vendor invoice lines with the values from the NF-e received XML lines
    /// </summary>
    public void updateVendInvoiceLinesFromNfeXmlLines_BR()
    {
        MenuFunction menuFunction = new MenuFunction(menuitemActionStr(EFDocRecXmlUpdateVendorInvoiceLines_BR), MenuItemType::Action);
        Args args = new Args(formStr(EFDocumentReceivedXMLViewer_BR));
        args.record(vendInvoiceInfoTable);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        quickFilterControl.setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowIconForHeader</Name>
				<Source><![CDATA[
    private void updateWorkflowIconForHeader()
    {
        //The workflow icon on header should be visible only if you can submit it to the workflow with an active workflow configuration
        //or if there are workitems on the invoice for the current user
        //or if there is a workflow history available for the invoice
        if ((this.canSubmitToWorkflow() && Workflow::findWorkflowConfigurationToActivate(vendInvoiceInfoTable, workflowTypeStr(VendProcessInvoice))
            || Workflow::findWorkItemsForCurrentUser(vendInvoiceInfoTable).elements()
            || Workflow::findTrackingStatusForDocument(vendInvoiceInfoTable)))
        {
            VendorInvoiceHeaderWorkflowDropDialog.visible(true);
        }
        else
        {
            VendorInvoiceHeaderWorkflowDropDialog.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshWorkflowIcononLine</Name>
				<Source><![CDATA[
    public void refreshWorkflowIcononLine()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRecordContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// When entering this form from an external URL that is generated from workflow, the record context that is attempted to be applied
    /// can point to the incorrect datasource when the URL is generated from an invoice line. If that is the case, then the record context
    /// needs to be adjusted prior to calling super() and applying the filtering context.
    /// </summary>
    /// <param name = "_recordContext">The record context.</param>
    /// <returns>Whether the record context was applied correctly.</returns>
    public boolean applyRecordContext(str _recordContext)
    {
        boolean ret;

        if (this.args().menuItemName() == menuItemDisplayStr(VendInvoiceAssignedToMeInternalExternal))
        {
            UrlGenerator generator = new UrlGenerator();
            generator.ParseRequestQueryParameter(_recordContext);

            RequestQueryParameterCollection requestQueryParameterCollection = generator.RequestQueryParameterCollection;

            if (requestQueryParameterCollection.GetParameterCount() > 0)
            {
                RequestQueryParameter requestQueryParameter;
                str field, value;
                boolean dataSourceBlank, found;

                while (requestQueryParameterCollection.MoveNext())
                {
                    requestQueryParameter = requestQueryParameterCollection.Current();

                    if (requestQueryParameter.DataSource == '')
                    {
                        requestQueryParameter.DataSource = tableStr(VendInvoiceInfoTable);
                        dataSourceBlank = true;
                    }

                    if (requestQueryParameter.DataSource == tableStr(VendInvoiceInfoTable)
                        && requestQueryParameter.GetFieldValueCount() > 0)
                    {
                        for (int i = 0; i < requestQueryParameter.GetFieldValueCount(); i++)
                        {
                            field = requestQueryParameter.getField(i);
                            value = requestQueryParameter.getValue(i);

                            // When coming from the line level workflow, the filter can contain a RecId that it thinks is from the VendInvoiceInfoTable,
                            // but in reality is from the VendInvoiceInfoLine table and needs to be resolved against it's actual header record.
                            if (field == fieldId2Name(tableNum(VendInvoiceInfoTable), fieldNum(VendInvoiceInfoTable, RecId)))
                            {
                                // Try to find the invoice, if not, find the line and change the filter context to the invoice header
                                if (!VendInvoiceInfoTable::findRecId(str2Int64(value)).RecId)
                                {
                                    VendInvoiceInfoLine vendInvoiceInfoLineLocal = VendInvoiceInfoLine::findRecId(str2Int64(value));
                                    if (vendInvoiceInfoLineLocal.RecId)
                                    {
                                        value = int642Str(vendInvoiceInfoLineLocal.vendInvoiceInfoTable().RecId);

                                        requestQueryParameter.UpdateEntry(field, value);
                                        found = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }

                    if (found || dataSourceBlank)
                    {
                        _recordContext = generator.GenerateRequestQueryString();
                        break;
                    }
                }
            }
        }

        ret = super(_recordContext);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>VendInvoiceInfoTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            this.query().allowCrossCompany(true);

            super();

            vendInvoiceInfoTable_ds.cacheAddMethod(tableMethodStr(VendInvoiceInfoTable, displayPurchID));
            vendInvoiceInfoTable_ds.cacheAddMethod(tableMethodStr(VendInvoiceInfoTable, packingSlipId));
            vendInvoiceInfoTable_ds.cacheAddMethod(tableMethodStr(VendInvoiceInfoTable, editIsVendorAdvance));
            vendInvoiceInfoTable_ds.cacheAddMethod(tableMethodStr(VendInvoiceInfoTable, checkIfWorkflowCompletedIcon));

            // <GEEU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
            {
                // Add fields to the query that are not actively fetched for the display.
                this.query().dataSourceTable(tableNum(VendInvoiceInfoTable)).addSelectionField(fieldNum(VendInvoiceInfoTable, TransportationDocument));
            }
            // </GEEU>
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();

            if (isGlobalEntry)
            {
                element.enableBasedOnCompany();
            }

            element.setButtonAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (element.args().menuItemName() == menuItemDisplayStr(VendInvoiceAutomationBIPendingInvoicesListPage)
                    && element.args().parmEnumType() == enumNum(VendInvoiceAutomationBIGraph))
            {
                VendInvoiceAutomationBIReportHandler::buildQueryForPendingVendorInvoicesListPage(VendInvoiceInfoTable_ds.query(), element.args().parmObject() as PBIReportSelectedData, element.args().parmEnum());
            }

            super();

            element.setButtonAccess();

            // Attempt to preserve the selected records from the calling form
            if (multiSelectionContext)
            {
                vendInvoiceInfoTableInitial = multiSelectionContext.getFirst();
                VendInvoiceInfoTable vendInvoiceInfoTableLocal = vendInvoiceInfoTableInitial;

                while (vendInvoiceInfoTableLocal.RecId)
                {
                    VendInvoiceInfoTable_DS.markRecord(vendInvoiceInfoTableLocal, 1);
                    vendInvoiceInfoTableLocal = multiSelectionContext.getNext();
                }

                //Reset the multiSelectionContext after initial call as to not retain values past the initial form load.
                multiSelectionContext = null;
            }

            // Position the data source selection to the initial record for proper positioning when coming from another form.
            if (vendInvoiceInfoTableInitial)
            {
                VendInvoiceInfoTable_DS.positionToRecord(vendInvoiceInfoTableInitial);

                vendInvoiceInfoTableInitial = null;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            boolean allowDelete = true;

            if (VendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Approved)
            {
                if (Box::okCancel(strFmt("@SYS4009816",VendInvoiceInfoTable.Num),DialogButton::Cancel) == DialogButton::Cancel)
                {
                    allowDelete = false;
                }
            }

            if (FeatureStateProvider::isFeatureEnabled(ProjInterCompanyVendorInvoiceFeature::instance()) 
                    && VendInvoiceInfoTable.checkIfVendInvoiceIsGeneratedFormCustProjInvoice())
            {
                allowDelete = false;
            }

            if (allowDelete)
            {
                super();
            }

            element.setButtonAccess();
            element.updateWorkflowIconForHeader();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            boolean isAdvance;

            int ret = super();

            if (!this.anyMarked())
            {
                element.setButtonAccess();
            }

            if (vendInvoiceListPageState.initInvoiceHeaderState(vendInvoiceInfoTable))
            {
                element.allowEditsForHeader();
            }

            element.updateWorkflowIconForHeader();

            //checks to see if current invoice is prepayment, if so disables the Misc charges buttons
            isAdvance = vendInvoiceInfoTable.isAdvance();

            if (isLastInvoiceAdvance != isAdvance)
            {
                isLastInvoiceAdvance = isAdvance;

                element.enableHeaderActions(true);
            }

            element.setVisibilityForInvoiceAutomationControlsOnInvoiceSelected();

            buttonErrorLog.enabled(vendInvoiceInfoTable.Log != '');

            if (isBE)
            {
                element.initDesign_BE();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Num</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                buttonEditInvoice.clicked();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ButtonUpdateQtyAndPriceFromNfe_BR</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (element.hasMappingIssuesBetweenNfeXmlxViLines_BR())
            {
                super();
            }
            else
            {
                element.updateVendInvoiceLinesFromNfeXmlLines_BR();
            }

            element.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonOpenExcelTemplate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.openExcelTemplate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubLedger</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            MenuFunction menuFunction;

            if (vendInvoiceInfoTable.RecId == 0.0)
            {
                throw error("@SYS136802");
            }

            if (!vendInvoiceInfoTable.checkMarkupTrans())
            {
                return;
            }

            args.caller(element);
            args.record(vendInvoiceInfoTable);

            menuFunction = new MenuFunction(menuitemDisplayStr(SubledgerJournalAccountEntries), MenuItemType::Display);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonHeader_PerformBudgetCheck</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (vendInvoiceInfoTable)
            {
                // Submit to source document processor for an on-demand GL budget check
                SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(vendInvoiceInfoTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>buttonPageParmTableMiscCharges</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Responds when the <c>buttonPageParmTableMiscCharges</c> form button is clicked.
        /// </summary>
        void clicked()
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

            if (VendInvoiceInfoSubTable::count(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId) > 1)
            {
                // more than one PO on the Invoice, so edit the summary invoice
                element.editMarkupTrans(this.menufunction(), vendInvoiceInfoTable);
            }
            else
            {
                // only one PO on the Invoice, so edit it
                select firstonly vendInvoiceInfoSubTable
                        where vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
                              && vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId;

                element.editMarkupTrans(buttonSubTableMiscCharges.menufunction(), vendInvoiceInfoSubTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>buttonPageParmTableAllocate</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Responds when the <c>buttonPageParmTableAllocate</c> form button is clicked.
        /// </summary>
        void clicked()
        {
            VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

            if (VendInvoiceInfoSubTable::count(vendInvoiceInfoTable.ParmId, vendInvoiceInfoTable.TableRefId) > 1)
            {
                // more than one PO on the Invoice, so edit the summary invoice
                element.editMarkupTrans(this.menufunction(), vendInvoiceInfoTable);
            }
            else
            {
                // only one PO on the Invoice, so edit it
                select firstonly vendInvoiceInfoSubTable
                        where vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
                              && vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId;

                element.editMarkupTrans(this.menufunction(), vendInvoiceInfoSubTable);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxTransSource</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            PurchTotals_ParmTrans::showTax(menuitemDisplayStr(TaxTmpWorkVendInvoice), vendInvoiceInfoTable, PurchUpdate::All, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxDocumentLauncher</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            this.parameters(classStr(TaxableDocumentDescriptorPurchaseInvoice));
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxWithhold</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            PurchTotals_ParmTrans::showWithholdTax(menuitemDisplayStr(TaxWithholdUncommittedVendInvoice), vendInvoiceInfoTable, PurchUpdate::All, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>buttonSimulatePosting</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.simulatePosting();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>buttonErrorLog</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (VendInvoiceInfoTable.Log != strMin())
            {
                VendInvoiceInfoTable.showLog();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PendingInvoiceDetail</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();

            args.record(vendInvoiceInfoTable);
            args.caller(element);

            new MenuFunction(menuitemDisplayStr(VendUnpostedInvoiceJournal), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonViewReceivedXML_BR</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;
            MenuFunction menuFunction;
            EFDocAccessKey_BR accessKey = VendInvoiceInfoTable.getAccessKey_BR();

            super();

            if (accessKey)
            {
                menuFunction = new MenuFunction(menuitemDisplayStr(EFDocumentReceivedXMLViewer_BR), MenuItemType::Display);

                args = new Args(formStr(EFDocumentReceivedXMLViewer_BR));
                args.parm(accessKey);
                menuFunction.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PrinterSettings</Name>
				<Type>MenuButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean isEnabled;

            super();

            isEnabled = purchFormLetter.printFormLetter();
            buttonPrintFormletter.enabled(isEnabled);
            buttonPrintFormletterCopy.enabled(isEnabled);
            printEUVatButton.enabled(purchFormLetter.printEUVatInvoice());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonPrintFormletter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            PurchFormLetter::callPrintersettingsFormletter(purchFormLetter, PrintSetupOriginalCopy::Original);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ButtonPrintFormletterCopy</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            PurchFormLetter::callPrintersettingsFormletter(purchFormLetter, PrintSetupOriginalCopy::Copy);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PrintEUVatButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            PurchFormLetter_Invoice::callPrintersettingsEUVatInvoice(purchFormLetter);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PrintOptions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the PurchEditDocumentPrintSetup dialog passing along the <c>PurchFormLetter</c> object.
        /// </summary>
        void clicked()
        {
            MenuFunction menuFunction;
            Args args = new Args();

            args.caller(element);
            args.parmObject(purchFormLetter);

            menuFunction = new MenuFunction(menuitemActionStr(PurchEditDocumentPrintSetup), MenuItemType::Action);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>buttonEditInvoice</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (vendInvoiceInfoTable.Ordering == DocumentStatus::ApproveJournal)
            {
                buttonEditInvoiceFromPool.clicked();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ParmTableTotals</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun formRun;
            Args args = new Args();

            args.caller(element);
            args.record(vendInvoiceInfoTable);
            args.name(formStr(VendEditInvoiceTotals));
            args.openMode(OpenMode::View);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Post</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.postInvoice();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CompanyFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean wasModified = super();

            if (wasModified)
            {
                filterHelper.addSelectedCompaniesToDataSourceRange();
                VendInvoiceInfoTable_DS.executeQuery();
            }

            return wasModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AutomaticWorkflowSubmissionStatus</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void jumpRef()
        {
            super();

            str invoiceSubmissionStatusText = this.valueStr();

            VendInvoiceAutomationSubmitToWorkflow invoiceWorkflowSubmissionStatus;
            invoiceWorkflowSubmissionStatus = str2Enum(invoiceWorkflowSubmissionStatus, invoiceSubmissionStatusText);

            if (invoiceWorkflowSubmissionStatus == VendInvoiceAutomationSubmitToWorkflow::NotApplicable)
            {
                info("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionResultsNotInAutomation");
            }
            else if (invoiceWorkflowSubmissionStatus == VendInvoiceAutomationSubmitToWorkflow::NotYetRun)
            {
                info("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionResultsNotYetAvailable");
            }
            else
            {
                VendInvoiceAutomationExecutionResultsOpener::openMessageLogForMostRecentInvoiceDocumentEventOfType(
                    VendInvoiceInfoTable,
                    enumNum(VendInvoiceAutomationSubmitToWorkflow),
                    VendInvoiceAutomationWorkflowSubmissionTaskConstants::TypeName);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AutomationMatchingStatus</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Click to view vendor invoice automation matching results.
        /// </summary>
        [Hookable(false)]
        public void jumpRef()
        {
            super();

            str matchingStatusValue = this.valueStr();

            VendInvoiceMatchProductReceiptToInvoiceLineEvent invoiceMatchingStatus;
            invoiceMatchingStatus = str2Enum(invoiceMatchingStatus, matchingStatusValue);

            if (invoiceMatchingStatus == VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable
                || invoiceMatchingStatus == VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotYetRun)
            {
                info("@AccountsPayable:AutomationMatchingNotRunInfo");
            }
            else
            {
                DocumentEventLog mostRecentMatchLogEntry = DocumentEventLog::findMostRecentLogEntryOfType(tableNum(VendInvoiceInfoTable), VendInvoiceInfoTable.RecId, enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));

                // Check if the recent match log entry is written by manual user action
                if (mostRecentMatchLogEntry.ExecutionId == emptyGuid())
                {
                    info("@AccountsPayable:AutomationMatchingManualUserActionImpactInfo");
                }
                else
                {
                    VendInvoiceAutomationExecutionResultsOpener::openMessageLogForMostRecentInvoiceDocumentEventOfType(
                        VendInvoiceInfoTable,
                        enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent),
                        VendInvoiceAutomationConstants::AutomationMatchingTypeName);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSourceQuery>VendInvoiceInfoListPage</DataSourceQuery>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>VendInvoiceInfoTable</Name>
			<Table>VendInvoiceInfoTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressRefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>Yes</AllowAdd>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCImportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BatchAdministration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountyOrigDest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorInvalidDistribution</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecondary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedDueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hold</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IgnoreCalculatedSalesTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRoundOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastMatchVariance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ListCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Log</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogisticsElectronicAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Num</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ordering</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParmId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>Yes</AllowAdd>
					<DataField>ParmJobStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerformFullInvoiceMatching</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PoolRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Port</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProcessingAdvanced</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchAgreementHeader_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReCalculate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceivedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseDateComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>Yes</AllowAdd>
					<DataField>RequestStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatProcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Storno</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRoundOff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>Yes</AllowAdd>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportationDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VarianceApproved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VarianceApprovedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VarianceApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VarianceComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendBankAccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceSaveStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorRequestedWorkerEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPaymentGroup</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCheck>No</AllowCheck>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>WorkflowWorkItemTable</Name>
				</AxFormDataSourceRootLink>
				<AxFormDataSourceRootLink>
					<Name>VendTable</Name>
				</AxFormDataSourceRootLink>
				<AxFormDataSourceRootLink>
					<Name>PurchTable</Name>
				</AxFormDataSourceRootLink>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoListPageView</Name>
				</AxFormDataSourceRootLink>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceTotalFromAccountingDistributionView</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WorkflowWorkItemTable</Name>
			<Table>WorkflowWorkItemTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfigurationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Context</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrelationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataSourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentClassId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EscalationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsClaimed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRead</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MenuItemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalCorrelationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCorrelationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Queue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RootCorrelationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StepId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Subject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubWorkflowId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoTable</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendRecurrenceInvoiceGroup</Name>
			<Table>VendRecurrenceInvoiceGroup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GenerationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecurrenceInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendorRecurrenceInvoice</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendorRecurrenceInvoice</Name>
			<Table>VendorRecurrenceInvoice</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecurrenceInvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecurrenceInvoicePeriodEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceInfoTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendRecurrenceInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendRecurrenceInvoiceGroup</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendTable</Name>
			<Table>VendTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankTransTypeCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankOrderOfPayment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BidOnly</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthCountyCode_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthPlace</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Blocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BlockedReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAccountingRegime_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CCMNum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestAllowOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISCompanyRegNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISNationalInsuranceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISUniqueTaxPayerRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISVerificationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CISVerificationNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClearingPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CNAE_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CNPJCPFNum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegister</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegisterInsetNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommercialRegisterSection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyChainId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyIdSiret</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyNAFCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsDay_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditMax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditRating</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Curp_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DBA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultInventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DestinationCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiotCountryCode_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisabledOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EthnicOriginId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FactoringAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FATCAFilingRequirement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FemaleOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignEntityIndicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignerId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignResident_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignTaxRegistration_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Heir_IT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HUBZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ICMSContributor_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IENum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>INSSCEI_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntBank_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPaymFeeCovered_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsResident_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineOfBusinessId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocallyOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LvPaymTransCodes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainContactWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MandatoryVatDate_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Memo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinorityOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Nationality_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NIT_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NonTaxable_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>numberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeVendor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrganizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrgId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymDayId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymTermId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PresenceType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchAmountPurchaseOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchCalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegNum_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResidenceForeignCountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rfc_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SecondTIN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SegmentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SeparateDivisionId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeOnDlvAddress_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmallBusiness</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateInscription_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StructDepartment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubsegmentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SuppItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TAMRebateGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Fields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099NameChoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099RegNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Reports</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIDType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCalculate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdVendorType_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOperationCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATPartnerKind_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATTaxAgent_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendConsumption_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendExceptionGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendIncomeCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorPortalAdministratorRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPaymFeeGroup_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPriceToleranceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendVendorCollaborationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VeteranOwned</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>W9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>W9Included</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>YourAccountNum</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoTable</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>PurchTable</Name>
			<Table>PurchTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressRefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoSummaryModuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AvailSalesDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeRequestRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfirmedDlv</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfirmedDlvEarliest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfirmingPO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsTarget_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractNum_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountyOrigDest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CrossDockingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinalizeClosingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedDueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightSlipType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FSHAutoCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyAllowIndirectCreation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCustPurchOrderFormNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyDirectDelivery</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOriginalSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAutoNumbering_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRegister_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsEncumbranceRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsModified</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ListCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocalDeliveryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualEntryChangepolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingAgreement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDropShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeSupplier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeVendor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipAutoNumbering_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipRegister_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Port</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchaseOrderHeaderCreationMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchaseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchOrderFormNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReplenishmentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqAttention</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Requester</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailDriverDetails</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailRetailStatusType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnItemNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReplacementCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipCreateMarkup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipVersioning</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatProcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemEntryChangePolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemEntrySource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TAMVendRebateGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportationDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerPurchPlacer</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoTable</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendInvoiceInfoListPageView</Name>
			<Table>VendInvoiceInfoListPageView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParmId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProductReceipts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>No</AllowAdd>
					<AllowEdit>No</AllowEdit>
					<DataField>PurchIds</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableRefId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoTable</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>VendInvoiceTotalFromAccountingDistributionView</Name>
			<Table>VendInvoiceTotalAccountingDistributionSum</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowAdd>No</AllowAdd>
					<DataField>InvoiceTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParmId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableRefId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks>
				<AxFormDataSourceRootLink>
					<Name>VendInvoiceInfoTable</Name>
				</AxFormDataSourceRootLink>
			</DataSourceLinks>
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS119251</Caption>
		<DataSource xmlns="">VendInvoiceInfoTable</DataSource>
		<NewRecordAction xmlns="">NewInvoice</NewRecordAction>
		<Pattern xmlns="">ListPage</Pattern>
		<PatternVersion xmlns="">UX7 1.0</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">ListPage</Style>
		<TitleDataSource xmlns="">VendInvoiceInfoTable</TitleDataSource>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<WorkflowDataSource xmlns="">VendInvoiceInfoTable</WorkflowDataSource>
		<WorkflowType xmlns="">VendProcessInvoice</WorkflowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>Invoice</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>New_ButtonGroup</Name>
								<ElementPosition>536870910</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>VendEditInvoiceFromPurchaseOrder</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendEditInvoiceFromPurchaseOrder</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>VendEditInvoiceFromPackingSlip</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendEditInvoiceFromPackingSlip</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>OneTimeVendInvoice</Name>
										<ConfigurationKey>PublicSector</ConfigurationKey>
										<ElementPosition>1994091957</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<NeededPermission>Create</NeededPermission>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>VendOneTimeVendInvoice</MenuItemName>
										<OpenMode>New</OpenMode>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDropDialogButtonControl">
										<Name>CreateFromTemplateDropDialog</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>DropDialogButton</Type>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendInvoiceCreateFromTemplateDropDialog</MenuItemName>
										<Text>@AccountsPayable:NewFromTemplate</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS2055</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Process</Name>
								<ElementPosition>1207959547</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonUpdateQtyAndPriceFromNfe_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>EFDocRecXmlVendInvUpdtFromNFeConfirm_BR</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonOpenExcelTemplate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@ApplicationFoundation:OfficeOpenLinesInExcel</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS152420</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>OverviewDelivery</Name>
								<ElementPosition>1252698790</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TransportationDocument</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>TransportationDocument</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Primary>Yes</Primary>
									</AxFormControl>
								</Controls>
								<Caption>@SYS4508</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>AttachmentsGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048188</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonHeaderFiscalDocumentText_BR</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>BR</CountryRegionCodes>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>FiscalDocumentText_BR</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
								</Controls>
								<Caption>@SYS316708</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS318567</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>Financials</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Accounting</Name>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>MenuItemButton_DistributionsView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>AccountingDistributionsDocumentView</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Primary>Yes</Primary>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCommandButtonControl">
										<Name>SubLedger</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CommandButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS135346</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS314071</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Budget</Name>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonHeader_BudgetCheckResults</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>BudgetCheckResults</MenuItemName>
										<Text>@SYS128629</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ButtonHeader_PerformBudgetCheck</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS137083</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS317355</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS80981</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Charges</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonPageParmTableMiscCharges</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>MarkupTrans_HeadingPurchParm</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS313570</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonSubTableMiscCharges</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>MarkupTrans_HeadingPurchParmSub</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonPageParmTableAllocate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>MarkupAllocation</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS313571</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS114608</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Tax</Name>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TaxTransSource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<KeyTip>@SYS138429</KeyTip>
										<MenuItemName>TaxTransSourceVendInvoice</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS114610</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TaxDocumentLauncher</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>TaxDocumentLauncher</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TaxWithhold</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>PurchTable</DataSource>
										<MenuItemName>TaxWithholdUncommittedPurchOrder</MenuItemName>
									</AxFormControl>
								</Controls>
								<Caption>@SYS333961</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Project</Name>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjBudgetDisplay</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>ProjBudgetDisplay</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
								</Controls>
								<Caption>@SYS334314</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS80043</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>Review</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Matching</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>MatchDetails</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>PurchInvoiceMatchingDetails</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Primary>Yes</Primary>
										<ShowShortCut>No</ShowShortCut>
										<Text>@SYS135168</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>PolicyViolation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>VendInvoicePolicyViolation</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS319871</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>AutoMatch</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>VendInvoiceMatch</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Primary>Yes</Primary>
										<ShowShortCut>No</ShowShortCut>
									</AxFormControl>
								</Controls>
								<Caption>@SYS88145</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Validation</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>buttonSimulatePosting</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@AccountsPayable:SimulatePosting_Help</HelpText>
										<NeededPermission>Update</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<MultiSelect>Yes</MultiSelect>
										<Text>@AccountsPayable:SimulatePosting</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ResultsOfPostingSimulation</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@AccountsPayable:SimulatePostingResults_Help</HelpText>
										<NeededPermission>Update</NeededPermission>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>VendInvoiceSimulatePostingResultDetailsMenuItemDisplay</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<OpenMode>View</OpenMode>
										<Text>@AccountsPayable:SimulatePostingResults</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>buttonErrorLog</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<Text>@SYS118003</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS40295</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>View</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>PendingInvoiceDetail</Name>
										<ConfigurationKey>LedgerBasic</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>No</MultiSelect>
										<Primary>Yes</Primary>
										<ShowShortCut>No</ShowShortCut>
										<Text>@SYS119255</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS311143</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>History</Name>
								<ElementPosition>1932735281</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>VendInvoiceHoldHistory</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>VendInvoiceHoldHistory</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SPS1748</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS333885</Caption>
								<DataSource>VendInvoiceInfoTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>VendInvoiceXmlMatch_BR</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>2040109463</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonVendInvoiceXmlMatch_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>BR</CountryRegionCodes>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendInvoiceXmlMatch_BR</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCommandButtonControl">
										<Name>ButtonViewReceivedXML_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>BR</CountryRegionCodes>
										<ElementPosition>1431655763</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CommandButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<ShowShortCut>No</ShowShortCut>
										<Text>@SYS72884</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>VendInvoiceXmlMapping_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>BR</CountryRegionCodes>
										<ElementPosition>1789569704</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendInvoiceXmlMapping_BR</MenuItemName>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
								</Controls>
								<Caption>@SYS4010108</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS60543</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>General</Name>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Actions</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDropDialogButtonControl">
										<Name>PrintProforma</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DropDialogButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendEditInvoicePrintDropDialog</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
										<Text>@SYS91576</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS128905</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Variances</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDropDialogButtonControl">
										<Name>creditSetup</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>DropDialogButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendEditInvoiceCreditDropDialog</MenuItemName>
										<ShowShortCut>No</ShowShortCut>
										<Text>@SYS128921</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>PrinterSettings</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ButtonPrintFormletter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS14204</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ButtonPrintFormletterCopy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS135174</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PrintEUVatButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS135175</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>PrintOptions</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MenuItemName>PurchEditDocumentPrintSetup</MenuItemName>
												<MenuItemType>Action</MenuItemType>
											</AxFormControl>
										</Controls>
										<KeyTip>@SYS138430</KeyTip>
										<Text>@SYS128923</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonBatch</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<KeyTip>@SYS24274</KeyTip>
										<MenuItemName>BatchDialog</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>No</MultiSelect>
										<Text>@SYS128910</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS342635</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>Maintain_PSN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>VendDirectiveForm_PSN</Name>
										<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>VendDirectiveManagementForm_PSN</MenuItemName>
										<Primary>Yes</Primary>
										<ShowShortCut>No</ShowShortCut>
										<Text>@GLS223211</Text>
									</AxFormControl>
								</Controls>
								<Caption>@GLS223243</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>InvoiceChange</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TradeBLWIChangeCode</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>VendInvoiceInfoTable</DataSource>
										<MenuItemName>TradeBLWIChangeVendInvoice</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS317554</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS114631</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>NewDelete</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>NewInvoice</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<DataSource>VendInvoiceInfoTable</DataSource>
								<MenuItemName>PurchFormLetter_NewInvoiceDisplay</MenuItemName>
								<NormalImage>New</NormalImage>
								<OpenMode>New</OpenMode>
								<Text>@AccountsPayable:New</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>DeleteInvoice</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<Command>DeleteRecord</Command>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Delete</NormalImage>
								<Text>@SYS323117</Text>
							</AxFormControl>
						</Controls>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>OtherOptions</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>buttonEditInvoice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1145324610</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<MenuItemName>PurchFormLetter_InvoiceDisplay</MenuItemName>
								<OpenMode>Edit</OpenMode>
								<Primary>Yes</Primary>
								<ShowShortCut>No</ShowShortCut>
								<Text>@SYS317438</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>buttonEditInvoiceFromPool</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1145324610</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<DataSource>VendInvoiceInfoTable</DataSource>
								<MenuItemName>PurchFormLetter_ApproveJournal</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<OpenMode>Edit</OpenMode>
								<Primary>Yes</Primary>
								<ShowShortCut>No</ShowShortCut>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ParmTableTotals</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Big>Yes</Big>
								<MenuItemName>VendEditInvoiceTotals</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<Text>@SYS14107</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Post</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Big>Yes</Big>
								<MultiSelect>Yes</MultiSelect>
								<Text>@SYS6098</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>VendorInvoiceHeaderWorkflowDropDialog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DropDialogButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<DataSource>VendInvoiceInfoTable</DataSource>
								<MenuItemName>VendorInvoiceWorkflowDropDialog</MenuItemName>
								<NormalImage>Workflow</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>VendInvoiceAutomationHistoryTimelineDialog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>VendInvoiceAutomationHistoryTimelineDialog</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterControl</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CompanyFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@AccountsPayable:VendorInvoiceJournalAccount</Label>
						<LookupOnly>Yes</LookupOnly>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacingMode>Fixed</VerticalSpacingMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormImageControl">
						<Name>RequestStatus</Name>
						<AlignControl>No</AlignControl>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>252645134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>16</Height>
						<Skip>Yes</Skip>
						<Type>Image</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>16</Width>
						<FormControlExtension
							i:nil="true" />
						<BackStyle>Transparent</BackStyle>
						<DataMethod>checkIfWorkflowCompletedIcon</DataMethod>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Label>@SYS312683</Label>
						<ShowLabel>No</ShowLabel>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_VendInvoiceGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>378967701</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>VendInvoiceGroup</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_Num</Name>
						<ElementPosition>505290268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>Num</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_dataAreaId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>dataAreaId</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_InvoiceAccount</Name>
						<ElementPosition>757935402</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<PreviewPartRef>VendTableAccountNumEnhancedPreview</PreviewPartRef>
						<Type>String</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>InvoiceAccount</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_PurchName</Name>
						<ElementPosition>884257969</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PurchName</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendInvoiceInfoTable_PurchId</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PurchIds</DataField>
						<DataSource>VendInvoiceInfoListPageView</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>VendInvoiceInfoTable_ReceivedDate</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ReceivedDate</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>VendInvoiceInfoTable_DocumentDate</Name>
						<ElementPosition>631612835</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Date</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>DocumentDate</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>VendInvoiceInfoTable_ImportedAmount</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>ImportedAmount</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>LastMatchVariance</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1389548237</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>LastMatchVariance</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MatchApproved</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>VarianceApproved</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Label>@SYS116197</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>packingSlipId</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1642193371</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProductReceipts</DataField>
						<DataSource>VendInvoiceInfoListPageView</DataSource>
						<Label>@SYS330155</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AutomaticWorkflowSubmissionStatus</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@AccountsPayable:AutomationWorkflowSubmissionStatusHelpText</HelpText>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayAutomationWorkflowSubmissionStatus</DataMethod>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Label>@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionStatus</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AutomationMatchingStatus</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>@AccountsPayable:AutomationMatchingStatusHelpText</HelpText>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayAutomationMatchingstatus</DataMethod>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Label>@AccountsPayable:AutomationMatchingStatusLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>VendInvoiceInfoTable_RequestStatus</Name>
						<Type>ComboBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>RequestStatus</DataField>
						<DataSource>VendInvoiceInfoTable</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>InvoiceTotal</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>InvoiceTotal</DataField>
						<DataSource>VendInvoiceTotalFromAccountingDistributionView</DataSource>
						<ShowZero>No</ShowZero>
					</AxFormControl>
				</Controls>
				<DataSource>VendInvoiceInfoTable</DataSource>
				<DefaultActionLabel>@SYS122402</DefaultActionLabel>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts>
		<AxFormPartReference xmlns="">
			<Name>PreviewPane</Name>
			<DataSource>VendInvoiceInfoTable</DataSource>
			<DataSourceRelation>VendInvoiceInfoTable.VendInvoiceInfoTable</DataSourceRelation>
			<ElementPosition>1717986916</ElementPosition>
			<MenuItemName>VendInvoiceInfoListpagePreviewPane</MenuItemName>
			<RunMode>Remote</RunMode>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>LinesPreviewPane</Name>
			<DataSource>VendInvoiceInfoTable</DataSource>
			<DataSourceRelation>VendInvoiceInfoLine.VendInvoiceInfoTable</DataSourceRelation>
			<MenuItemName>VendInvoiceInfoListpageLinePreviewPane</MenuItemName>
			<RunMode>Remote</RunMode>
		</AxFormPartReference>
	</Parts>
</AxForm>