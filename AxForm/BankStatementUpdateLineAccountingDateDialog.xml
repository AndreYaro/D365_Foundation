<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankStatementUpdateLineAccountingDateDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankStatementUpdateLineAccountingDateDialog extends FormRun
{
    private FormDataSource callerForm_ds;
    private FormRun callerForm;
    private str callerFormName;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Common record = element.args().record();
        callerForm = this.args().caller();
        callerForm_ds = FormDataUtil::getFormDataSource(record);
        callerFormName = this.args().callerName();
        int lineCounter = 0;

        if (callerForm)
        {
            switch (callerFormName)
            {
                case formStr(BankStatementTable):
                    lineCounter = this.countValidStatementLinesFromStatement();
                    break;
                case formStr(BankReconciliationWorksheet):
                    lineCounter = this.countValidStatementLinesFromWorksheet();
                    break;
            }
        }

        super();
        StatementLineCount.text(strFmt("@CashManagement:BankStatementUpdatedLinesCount", lineCounter));
        NewAccountingDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>countValidStatementLinesFromStatement</Name>
				<Source><![CDATA[
    private int countValidStatementLinesFromStatement()
    {
        BankStmtISOReportEntry statementLine = callerForm_ds.getFirst(1, false);
        int lineCounter = 0;

        while (statementLine)
        {
            if (statementLine.IsNewBankDocument && !statementLine.isPostedHeaderOrLine())
            {
                lineCounter ++;
            }

            statementLine = callerForm_ds.getNext();
        }

        return lineCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countValidStatementLinesFromWorksheet</Name>
				<Source><![CDATA[
    private int countValidStatementLinesFromWorksheet()
    {
        boolean isMarked = callerForm_ds.anyMarked();
        BankReconciliationStatementOpenTmp statementLineTmp = isMarked ? callerForm_ds.getFirst(1, false) : callerForm_ds.cursor();
        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineTmp.BankStmtISOReportEntry);

        if (isMarked)
        {
            int lineCounter = 0;
            while (statementLineTmp)
            {
                if (statementLine.IsNewBankDocument && !statementLine.isPostedHeaderOrLine())
                {
                    lineCounter ++;
                }

                statementLineTmp = callerForm_ds.getNext();
                statementLine = BankStmtISOReportEntry::find(statementLineTmp.BankStmtISOReportEntry);
            }

            return lineCounter;
        }
        else if (statementLine.IsNewBankDocument && !statementLine.isPostedHeaderOrLine())
        {
            return 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountDateFromStatement</Name>
				<Source><![CDATA[
    private void updateAccountDateFromStatement()
    {
        BankStmtISOReportEntry statementLine = callerForm_ds.getFirst(1, false);

        while (statementLine)
        {
            this.updateAccountingDate(statementLine);
            statementLine = callerForm_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingDateFromWorksheet</Name>
				<Source><![CDATA[
    private void updateAccountingDateFromWorksheet()
    {
        boolean isMarked = callerForm_ds.anyMarked();
        BankReconciliationStatementOpenTmp statementLineTmp = isMarked ? callerForm_ds.getFirst(1, false) : callerForm_ds.cursor();
        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineTmp.BankStmtISOReportEntry);

        if (isMarked)
        {
            while (statementLineTmp)
            {
                this.updateAccountingDate(statementLine);
                statementLineTmp = callerForm_ds.getNext();
                statementLine = BankStmtISOReportEntry::find(statementLineTmp.BankStmtISOReportEntry);
            }
        }
        else
        {
            this.updateAccountingDate(statementLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBankStatement</Name>
				<Source><![CDATA[
    private void refreshBankStatement()
    {
        if (callerForm)
        {
            switch (callerFormName)
            {
                case formStr(BankStatementTable):
                    BankStatementFormView statementFormView = callerForm.getFormView();
                    statementFormView.refreshBook();
                    break;
                case formStr(BankReconciliationWorksheet):
                    BankReconciliationWorksheetFormView worksheetFormView = callerForm.getFormView();
                    worksheetFormView.performFormRefresh();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingDate</Name>
				<Source><![CDATA[
    private void updateAccountingDate(BankStmtISOReportEntry _statementLine)
    {
        if (_statementLine.IsNewBankDocument && !_statementLine.isPostedHeaderOrLine())
        {
            _statementLine.selectForUpdate(true);
            _statementLine.AccountingDate = NewAccountingDate.dateValue();
            _statementLine.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (NewAccountingDate.dateValue() == dateNull())
            {
                throw error("@CashManagement:BankStatementAccountDateNotAllowEmptyDate");
            }

            super();

            ttsbegin;

            switch (callerFormName)
            {
                case formStr(BankStatementTable):
                    element.updateAccountDateFromStatement();
                    break;
                case formStr(BankReconciliationWorksheet):
                    element.updateAccountingDateFromWorksheet();
                    break;
            }

            ttscommit;

            element.refreshBankStatement();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@CashManagement:UpdateStatementLineAccountingDate</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>StatementLineCount</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text></Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>NewAccountingDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@CashManagement:UpdateStatementLineAccountingDate</Label>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@SYS5469</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS12778</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>