<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailAsyncCustomerSynchronizationStatus</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailAsyncCustomerSynchronizationStatus extends FormRun
{
    RetailCustomerSyncOperationTempTable retailCustomerSyncOperationTempTableInstance;

    static container IgnoredCommonFields = ['ChannelReferenceId', 'Changes', 'CreatedDateTime', 'CustAccount', 'CustAccountAsync', 'LastKnownError', 'OnlineOperationCompleted', 'Operation', 'OperationId', 'OperationTimeStamp', 'OriginatingChannel', 'ReplicationCounterFromOrigin'];
    static container IgnoredCustomerTableFields = ['AddressEmail', 'AddressName', 'AddressPhone', 'AddressTaxGroup', 'AddressType', 'AddressUrl', 'BuildingComplement', 'Country', 'County', 'City', 'DistrictName', 'State', 'Street', 'StreetNumber', 'ZipCode'];
    static container IgnoredAffiliationTableFields = ['HideInChannels', 'LanguageId', 'RetailAffiliationId', 'RetailCustAffiliation'];
    static container IgnoredAddressTableFields = ['AddressId', 'LogisticsLocationRoleRecordId', 'LogisticsPostalAddress'];
    static container IgnoredContactTableFields = ['LogisticsElectronicAddress'];


}
]]></Source>
			</Method>
			<Method>
				<Name>populateTempTableToDisplayRecordOnGrid</Name>
				<Source><![CDATA[
    /// <summary>Populate data in fast tab as per the record selection.</summary>
    /// <returns>The record created.</returns>
    private RetailCustomerSyncOperationTempTable populateTempTableToDisplayRecordOnGrid()
    {
        RetailCustomerSyncOperationTempTable result;

        switch (RetailAsyncCustomerView.RefTableId)
        {
            case tableNum(RetailAsyncCustomerV2):
                RetailAsyncCustomerV2 retailAsyncCustomerV2;
                select firstonly retailAsyncCustomerV2
                    where retailAsyncCustomerV2.RecId == RetailAsyncCustomerView.RefRecId;

                result = this.insertTempTableData(retailAsyncCustomerV2, tableNum(RetailAsyncCustomerV2));
                break;
            case tableNum(RetailAsyncCustomerContact) :
                RetailAsyncCustomerContact retailAsyncCustomerContact;
                select firstonly retailAsyncCustomerContact
                    where retailAsyncCustomerContact.RecId == RetailAsyncCustomerView.RefRecId;

                result = this.insertTempTableData(retailAsyncCustomerContact, tableNum(RetailAsyncCustomerContact));
                break;
            case tableNum(RetailAsyncAddressV2) :
                RetailAsyncAddressV2 retailAsyncAddressV2;
                select firstonly retailAsyncAddressV2
                    where retailAsyncAddressV2.RecId == RetailAsyncCustomerView.RefRecId;

                result = this.insertTempTableData(retailAsyncAddressV2, tableNum(RetailAsyncAddressV2));
                break;
            case tableNum(RetailAsyncCustomerAttributeV2) :
                RetailAsyncCustomerAttributeV2 retailAsyncCustomerAttributeV2;
                select firstonly retailAsyncCustomerAttributeV2
                    where retailAsyncCustomerAttributeV2.RecId == RetailAsyncCustomerView.RefRecId;

                result = this.insertTempTableData(retailAsyncCustomerAttributeV2, tableNum(RetailAsyncCustomerAttributeV2));
                break;
            case tableNum(RetailAsyncCustomerAffiliation) :
                RetailAsyncCustomerAffiliation retailAsyncCustomerAffiliation;
                select firstonly retailAsyncCustomerAffiliation
                    where retailAsyncCustomerAffiliation.RecId == RetailAsyncCustomerView.RefRecId;

                result = this.insertTempTableData(retailAsyncCustomerAffiliation, tableNum(RetailAsyncCustomerAffiliation));
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTempTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record into the <c>RetailCustomerSyncOperationTempTable</c> table.
    /// </summary>
    /// <param name = "_common">The record which contains the data to be inserted.</param>
    /// <param name = "_tableId">The table id.</param>
    /// <returns>The inserted temp table record buffer.</returns>
    private RetailCustomerSyncOperationTempTable insertTempTableData(common _common, TableId _tableId)
    {
        RetailCustomerSyncOperationTempTable retailCustomerSyncOperationTempTableLoc;
        SysDictTable dictTable = new SysDictTable(_tableId);

        if (dictTable)
        {
            Map mapOfOldFieldNameAndValue;
            Name attributeName;
            boolean isAttributeTable = false;
            FieldId attributeRecIdColumnFieldId, attributeDataTypeColumnFieldId;

            // Attempt to retrieve the entity changes json string stored in the 'Changes' column (where available) and convert to a field-value map.
            // Please note that the affiliation table does not have a changes column, as we only support adding or removing affiliations, hence this column is not required.
            if (_tableId != tableNum(RetailAsyncCustomerAffiliation) && _tableId != tableNum(RetailAsyncCustomerAttributeV2))
            {
                FieldId changesFieldId = dictTable.fieldName2Id('Changes');
                str changesJsonString = _common.(changesFieldId);

                if (!System.String::IsNullOrWhiteSpace(changesJsonString))
                {
                    mapOfOldFieldNameAndValue = RetailCommonWebAPI::getMapFromJsonString(changesJsonString);
                }
            }
            else if(_tableId == tableNum(RetailAsyncCustomerAttributeV2))
            {
                // For the attribute table, we need to locate the attribute name from the saved attribute record id.
                attributeRecIdColumnFieldId = dictTable.fieldName2Id('AttributeRecId');
                attributeDataTypeColumnFieldId = dictTable.fieldName2Id('AttributeDataType');

                RefRecId customerAttributeRecId = _common.(attributeRecIdColumnFieldId);
                attributeName = EcoResAttribute::find(customerAttributeRecId).Name;

                isAttributeTable = true;
            }

            FieldId fieldId = dictTable.fieldNext(0);

            ttsbegin;
            while (fieldId)
            {
                SysDictField dictField = dictTable.fieldObject(fieldId);

                if (!dictField.isSystem() && this.displayTableField(_tableId, dictField.name()))
                {
                    // For the attribute table, we only display the attribute name, data type and value.
                    if (isAttributeTable && (fieldId == attributeRecIdColumnFieldId || fieldId == attributeDataTypeColumnFieldId))
                    {
                        if (fieldId == attributeRecIdColumnFieldId)
                        {
                            // Since the attribute table holds the EcoResAttribute table RecId which is not very user-friendly,
                            // We retrieve the corresponding attribute name and display it to the user.
                            retailCustomerSyncOperationTempTableLoc.FieldName = 'AttributeName';
                            retailCustomerSyncOperationTempTableLoc.NewValue = attributeName;
                        }
                        else
                        {
                            SysDictEnum dictEnum = new SysDictEnum(enumnum(AttributeDataType));
                            retailCustomerSyncOperationTempTableLoc.FieldName = dictField.name();
                            retailCustomerSyncOperationTempTableLoc.NewValue = dictEnum.value2Label(_common.(fieldId));
                        }
                    }
                    else if((_tableId == tableNum(RetailAsyncCustomerAffiliation) || _tableId == tableNum(RetailAsyncAddressV2)) && RetailAsyncCustomerView.Operation == RetailAsyncOperation::Delete)
                    {
                        retailCustomerSyncOperationTempTableLoc.FieldName = dictField.name();
                        retailCustomerSyncOperationTempTableLoc.OldValue = _common.(fieldId);
                        mapOfOldFieldNameAndValue = null;
                    }
                    else
                    {
                        retailCustomerSyncOperationTempTableLoc.FieldName = dictField.name();
                        retailCustomerSyncOperationTempTableLoc.NewValue = _common.(fieldId);
                    }

                    if (mapOfOldFieldNameAndValue != null)
                    {
                        retailCustomerSyncOperationTempTableLoc.OldValue = this.GetFieldValueFromMap(mapOfOldFieldNameAndValue, dictField.name(), _tableId);
                    }

                    // Store reference information regarding the parent table record. This is needed when the parent table is updated later.
                    retailCustomerSyncOperationTempTableLoc.RefRecId = RetailAsyncCustomerView.RefRecId;
                    retailCustomerSyncOperationTempTableLoc.RefTableId = RetailAsyncCustomerView.RefTableId;
                    retailCustomerSyncOperationTempTableLoc.insert();
                }

                fieldId = dictTable.fieldNext(fieldId);
            }
            ttscommit;
        }

        return retailCustomerSyncOperationTempTableLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFieldValueFromMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the field value from a map.
    /// </summary>
    /// <param name = "_mapOfFieldNameAndValue">Map of field name and their values.</param>
    /// <param name = "_fieldName">The field name for which we are looking up the value.</param>
    /// <param name = "_tableId">The target table Id.</param>
    /// <returns>The field value.</returns>
    private str GetFieldValueFromMap(Map _mapOfFieldNameAndValue, FieldName _fieldName, TableId _tableId)
    {
        str result = '';

        // The Locator and LocatorExtension fields for the contact tables are saved as Value and ValueExtension fields in the map.
        if (_fieldName == fieldStr(RetailAsyncCustomerContact, Locator) && _tableId == tableNum(RetailAsyncCustomerContact))
        {
            _fieldName = 'Value';
        }
        else if (_fieldName == fieldStr(RetailAsyncCustomerContact, LocatorExtension) && _tableId == tableNum(RetailAsyncCustomerContact))
        {
            _fieldName = 'ValueExtension';
        }

        if (_mapOfFieldNameAndValue.exists(_fieldName))
        {
            result = _mapOfFieldNameAndValue.lookup(_fieldName);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTableField</Name>
				<Source><![CDATA[
    /// <summary> Determine if a table field should be displayed on the grid.</summary>
    /// <param name="_tableId">The table id.</param>
    /// <param name="_fieldName">Table field name.</param>
    /// <returns>True if it should be displayed on the grid; else False.</returns>
    private boolean displayTableField(TableId _tableId, FieldName _fieldName)
    {
        boolean foundInIgnoredFields = conFind(IgnoredCommonFields, _fieldName) != 0;

        if (!foundInIgnoredFields)
        {
            switch (_tableId)
            {
                case tableNum(RetailAsyncCustomerV2):
                    foundInIgnoredFields = conFind(IgnoredCustomerTableFields, _fieldName) != 0;
                    break;
                case tableNum(RetailAsyncAddressV2):
                    foundInIgnoredFields = conFind(IgnoredAddressTableFields, _fieldName) != 0;
                    break;
                case tableNum(RetailAsyncCustomerContact):
                    foundInIgnoredFields = conFind(IgnoredContactTableFields, _fieldName) != 0;
                    break;
                case tableNum(RetailAsyncCustomerAffiliation):
                    foundInIgnoredFields = conFind(IgnoredAffiliationTableFields, _fieldName) != 0;
                    break;
            }
        }

        return !foundInIgnoredFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the parent table record based on the provided information.
    /// </summary>
    /// <param name = "_recId">The record id on the parent table.</param>
    /// <param name = "_tableId">The parent tables table id.</param>
    /// <param name = "_value">The updated value.</param>
    /// <param name = "_fieldName">The field being modified.</param>
    private void updateParentTableRecord(RefRecId _recId, RefTableId _tableId, str _value, str _fieldName)
    {
        switch (_tableId)
        {
            case tableNum(RetailAsyncCustomerV2):
                this.updateAsyncCustomerV2(_recId, _value, fieldName2Id(_tableId, _fieldName));
                break;
            case tableNum(RetailAsyncCustomerContact) :
                this.updateAsyncCustomerContact(_recId, _value, fieldName2Id(_tableId, _fieldName));
                break;
            case tableNum(RetailAsyncAddressV2) :
                this.updateAsyncCustomerAddressV2(_recId, _value, fieldName2Id(_tableId, _fieldName));
                break;
            case tableNum(RetailAsyncCustomerAttributeV2) :
                this.updateAsyncCustomerAttributeV2(_recId, _value, fieldName2Id(_tableId, _fieldName));
                break;
            case tableNum(RetailAsyncCustomerAffiliation):
                this.updateAsyncCustomerAffiliation(_recId, _value, fieldName2Id(_tableId, _fieldName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsyncCustomerV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer information.
    /// </summary>
    /// <param name = "_recId">The target table Id.</param>
    /// <param name = "_fieldId">The field name for which we are looking up the value.</param>
    /// <param name = "_value"> The field value.</param>
    private void updateAsyncCustomerV2(RefRecId _recId, anytype _value, FieldId _fieldId)
    {
        RetailAsyncCustomerV2 retailAsyncCustomerV2;

        if (_recId && _fieldId)
        {
            select firstonly forupdate retailAsyncCustomerV2
                where retailAsyncCustomerV2.RecId == _recId;

            if (retailAsyncCustomerV2)
            {
                ttsbegin;
                retailAsyncCustomerV2.(_fieldId) = _value;
                retailAsyncCustomerV2.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsyncCustomerContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer contact information.
    /// </summary>
    /// <param name = "_recId">The target table Id.</param>
    /// <param name = "_fieldId">The field name for which we are looking up the value.</param>
    /// <param name = "_value"> The field value.</param>
    private void updateAsyncCustomerContact(RefRecId _recId, anytype _value, FieldId _fieldId)
    {
        RetailAsyncCustomerContact retailAsyncCustomerContact;

        if (_recId && _fieldId)
        {
            select firstonly forupdate retailAsyncCustomerContact
                where retailAsyncCustomerContact.RecId == _recId;

            if (retailAsyncCustomerContact)
            {
                ttsbegin;
                retailAsyncCustomerContact.(_fieldId) = _value;
                retailAsyncCustomerContact.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsyncCustomerAddressV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer address details.
    /// </summary>
    /// <param name = "_recId">The target table Id.</param>
    /// <param name = "_fieldId">The field name for which we are looking up the value.</param>
    /// <param name = "_value"> The field value.</param>
    private void updateAsyncCustomerAddressV2(RefRecId _recId, anytype _value, FieldId _fieldId)
    {
        RetailAsyncAddressV2 retailAsyncAddressV2;

        if (_recId && _fieldId)
        {
            select firstonly forupdate retailAsyncAddressV2
                where retailAsyncAddressV2.RecId == _recId;

            if (retailAsyncAddressV2)
            {
                ttsbegin;
                retailAsyncAddressV2.(_fieldId) = _value;
                retailAsyncAddressV2.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsyncCustomerAttributeV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer attribute information.
    /// </summary>
    /// <param name = "_recId">The target table Id.</param>
    /// <param name = "_fieldId">The field name for which we are looking up the value.</param>
    /// <param name = "_value"> The field value.</param>
    private void updateAsyncCustomerAttributeV2(RefRecId _recId, anytype _value, FieldId _fieldId)
    {
        RetailAsyncCustomerAttributeV2 retailAsyncCustomerAttributeV2;

        if (_recId && _fieldId)
        {
            select firstonly forupdate retailAsyncCustomerAttributeV2
                    where retailAsyncCustomerAttributeV2.RecId == _recId;

            if (retailAsyncCustomerAttributeV2)
            {
                ttsbegin;
                retailAsyncCustomerAttributeV2.(_fieldId) = _value;
                retailAsyncCustomerAttributeV2.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsyncCustomerAffiliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customer affiliation information.
    /// </summary>
    /// <param name = "_recId">The target table Id.</param>
    /// <param name = "_fieldId">The field name for which we are looking up the value.</param>
    /// <param name = "_value"> The field value.</param>
    private void updateAsyncCustomerAffiliation(RefRecId _recId, anytype _value, FieldId _fieldId)
    {
        RetailAsyncCustomerAffiliation retailAsyncCustomerAffiliation;

        if (_recId && _fieldId)
        {
            select firstonly forupdate retailAsyncCustomerAffiliation
                    where retailAsyncCustomerAffiliation.RecId == _recId;

            if (retailAsyncCustomerAffiliation)
            {
                ttsbegin;
                retailAsyncCustomerAffiliation.(_fieldId) = _value;
                retailAsyncCustomerAffiliation.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEdit</Name>
				<Source><![CDATA[
    private boolean canEdit()
    {
        return (RetailCustomerSyncOperationTempTable.RefTableId != tableNum(RetailAsyncCustomerAttributeV2)) || (RetailCustomerSyncOperationTempTable.FieldName != fieldStr(RetailAsyncCustomerAttributeV2, AttributeDataType) && RetailCustomerSyncOperationTempTable.FieldName != 'AttributeName');
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailAsyncCustomerView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            RetailCustomerSyncOperationTempTable.linkPhysicalTableInstance(retailCustomerSyncOperationTempTableInstance);
        }

]]></Source>
					</Method>
					<Method>
						<Name>SetChangeDescriptionText</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the change description text value.
        /// </summary>
        private void SetChangeDescriptionText()
        {
            str newOrExistingCustomerText = "@Retail:ExistingCustomerLabel";
            str operationText, recordTypeText;

            switch (RetailAsyncCustomerView.Operation)
            {
                case RetailAsyncOperation::Create :
                    newOrExistingCustomerText = "@Retail:NewCustomerLabel";
                    operationText = "@Retail:Created";
                    break;
                case RetailAsyncOperation::Update:
                    operationText = "@Retail:Updated";
                    break;
                case RetailAsyncOperation::Delete :
                    operationText = "@Retail:Removed";
                    break;
            }

            switch (RetailAsyncCustomerView.RefTableId)
            {
                case tableNum(RetailAsyncCustomerV2):
                    recordTypeText = "@Retail:AccountText";
                    break;
                case tableNum(RetailAsyncCustomerContact) :
                    recordTypeText = "@Retail:ContactText";
                    break;
                case tableNum(RetailAsyncAddressV2) :
                    recordTypeText = "@Retail:AddressText";
                    break;
                case tableNum(RetailAsyncCustomerAttributeV2) :
                    recordTypeText = "@Retail:AttributeText";
                    break;
                case tableNum(RetailAsyncCustomerAffiliation) :
                    recordTypeText = "@Retail:AffiliationText";
                    break;
            }

            str labelText = strFmt("@Retail:CustomerChangeDescriptionText", newOrExistingCustomerText, recordTypeText, operationText);
            DescriptionText.text(labelText);
        }

]]></Source>
					</Method>
					<Method>
						<Name>SetShowChangesTabCaption</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the caption for the ShowChangesTab based on the currently selected record.
        /// </summary>
        private void SetShowChangesTabCaption()
        {
            str captionText = "@Retail:CustomerInformationLabel";

            switch (RetailAsyncCustomerView.RefTableId)
            {
                case tableNum(RetailAsyncCustomerV2):
                    captionText = "@Retail:CustomerInformationLabel";
                    break;
                case tableNum(RetailAsyncCustomerContact) :
                    captionText = "@Retail:CustomerContactLabel";
                    break;
                case tableNum(RetailAsyncAddressV2) :
                    captionText = "@Retail:CustomerAddressLabel";
                    break;
                case tableNum(RetailAsyncCustomerAttributeV2) :
                    captionText = "@Retail:CustomerAttributesLabel";
                    break;
                case tableNum(RetailAsyncCustomerAffiliation) :
                    captionText = "@Retail:CustomerAffiliationLabel";
                    break;
            }

            // Set the caption for the Change description fast tab.
            ShowChangesTab.caption(captionText);
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// When a record is selected on the left panel, we need to populate data into the grid.
        /// </summary>
        public void selectionChanged()
        {
            super();

            this.SetChangeDescriptionText();
            this.SetShowChangesTabCaption();

            // To enable or disable <c>SyncCurrentRecord</c> button based on staus of the selected record.
            SyncCurrentRecord.enabled(!RetailAsyncCustomerView.OnlineOperationCompleted);

            retailCustomerSyncOperationTempTableInstance = element.populateTempTableToDisplayRecordOnGrid();

            RetailCustomerSyncOperationTempTable.linkPhysicalTableInstance(retailCustomerSyncOperationTempTableInstance);
            RetailCustomerSyncOperationTempTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>RetailCustomerSyncOperationTempTable</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Inserts or updates the source table data.
        /// </summary>
        public void write()
        {
            super();

            element.updateParentTableRecord(RetailCustomerSyncOperationTempTable.RefRecId, RetailCustomerSyncOperationTempTable.RefTableId, RetailCustomerSyncOperationTempTable.NewValue, RetailCustomerSyncOperationTempTable.FieldName);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            // AttributeDataType and AttributeName should be set to read only on the grid.
            RetailCustomerSyncOperationTempTable_ds.allowEdit(element.canEdit());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>canUpdateNewFieldValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the 'NewField' value entered into the form grid.
        /// </summary>
        /// <returns>The validation result.</returns>
        private boolean canUpdateNewFieldValue()
        {
            boolean ret = true;
            str _value = RetailCustomerSyncOperationTempTable.NewValue;

            switch(RetailCustomerSyncOperationTempTable.RefTableId)
            {
                case tableNum(RetailAsyncCustomerAffiliation):
                if (RetailCustomerSyncOperationTempTable.FieldName == fieldStr(RetailAsyncCustomerAffiliation, Name))
                    {
                        RetailAffiliation retailAffiliation = RetailAffiliation::findByName(_value);

                        if (!retailAffiliation || (retailAffiliation && retailAffiliation.AffiliationType != RetailAffiliationType::General))
                        {
                            ret = checkFailed(strFmt("@Retail:CustAffiliationValidationError", _value));
                        }
                    }
                    break;
                case tableNum(RetailAsyncCustomerAttributeV2):
                    RetailAsyncCustomerAttributeV2 retailAsyncCustomerAttributeV2;
                    boolean parsingResult = true;

                    select firstonly retailAsyncCustomerAttributeV2
                        where retailAsyncCustomerAttributeV2.RecId == RetailCustomerSyncOperationTempTable.RefRecId;

                    switch (retailAsyncCustomerAttributeV2.AttributeDataType)
                    {
                        case AttributeDataType::TrueFalse:
                            System.Boolean parsedBool;
                            parsingResult = System.Boolean::TryParse(_value, byref parsedBool);

                            ret = parsingResult ? true : checkFailed(strFmt("@Retail:BooleanValidationFailed", _value));
                            break;
                        case AttributeDataType::Integer:
                            System.Int64 parsedInt;
                            parsingResult = System.Int64::TryParse(_value, byref parsedInt);

                            ret = parsingResult ? true : checkFailed(strFmt("@Retail:IntegerValidationFailed", _value));
                            break;
                        case AttributeDataType::Decimal:
                            System.Decimal parsedDecimal;
                            parsingResult = System.Decimal::TryParse(_value, byref parsedDecimal);

                            ret = parsingResult ? true : checkFailed(strFmt("@Retail:DecimalValidationFailed", _value));
                            break;
                        case AttributeDataType::DateTime:
                            System.DateTime parsedDateTime;
                            parsingResult = System.DateTime::TryParse(_value, byref parsedDateTime);

                            ret = parsingResult ? true : checkFailed(strFmt("@Retail:DateTimeValidationFailed", _value));
                            break;
                        default:
                            ret = true;
                            break;
                    }
                    break;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = super();

            ret = ret && this.canUpdateNewFieldValue();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SyncCurrentRecord</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method synchronizes the current selected record from view.
        /// </summary>
        public void clicked()
        {
            super();

            retailAsyncCustomerCreator::ProcessCurrentAsyncRecord(RetailAsyncCustomerView);

            // To display the form with latest updated data, we need to perform data source research.
            RetailAsyncCustomerView_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailAsyncCustomerView</Name>
			<Table>RetailAsyncCustomerView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountAsync</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastKnownError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnlineOperationCompleted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Operation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationTimeStamp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginatingChannel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailCustomerSyncOperationTempTable</Name>
			<Table>RetailCustomerSyncOperationTempTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>RetailChannelTable</Name>
			<Table>RetailChannelTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CalcExemptTaxesForPriceInclusive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashOffice_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChannelTimeZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChannelTimeZoneInfoId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChannelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultCustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultCustDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayTaxPerTaxComponent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EventNotificationProfileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventLocationDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualAccept</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OMOperatingUnitID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceIncludesSalesTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailChannelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailReturnPolicyChannel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StoreArea</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionServiceProfile</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>RetailAsyncCustomerView</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>RetailChannelTable_RetailDirectSalesChannel</Name>
					<Table>RetailDirectSalesChannel</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>DSClosingMethod</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSCultureName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSFunctionalityProfile</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSInventLocationIdForCustomerOrder</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSInventoryLookup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSMaximumPostingDifference</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSMaxRoundingAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSMaxShiftDifferenceAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSMaxTransactionDifferenceAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSOfflineProfile</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSOneStatementPerDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSRemoveAddTender</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSRetailReqPlanIdSched</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSRoundingAccountLedgerDimension</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSSeparateStmtPerStaffTerminal</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSStatementMethod</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSStmtCalcBatchEndTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSStmtPostAsBusinessDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSStoreNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSTaxGroup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSTaxGroupDataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSTaxIdentificationNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSTaxOverrideGroup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSTenderDeclarationCalculation</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSUseCustomerBasedTax</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DSUseDestinationBasedTax</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>RetailChannelTable_RetailMCRChannelTable</Name>
					<Table>RetailMCRChannelTable</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>MCRCustomerCreditRetailInfocodeId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MCREnableDirectedSelling</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MCREnableOrderCompletion</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MCREnableOrderPriceControl</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MCRPriceOverrideRetailInfocodeId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MCRReasonCodeRetailInfocodeId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>RetailChannelTable_RetailOnlineChannelTable</Name>
					<Table>RetailOnlineChannelTable</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>CustomerType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>OnlineCatalogName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>OnlineFunctionalityProfile</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
				<AxFormDataSourceDerived>
					<Name>RetailChannelTable_RetailStoreTable</Name>
					<Table>RetailStoreTable</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>bankDropCalculation</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>closingMethod</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createLabelsForZeroPrice</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>cultureName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DatabaseName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EFTStoreNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>functionalityProfile</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>generatesItemLabels</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>generatesShelfLabels</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>hideTrainingMode</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>InventLocationIdForCustomerOrder</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>inventoryLookup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>IsCallCenter</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>itemIdOnReceipt</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>layoutId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>LinkedCallCenter</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maximumPostingDifference</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maximumTextLengthOnReceipt</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maxRoundingAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maxRoundingTaxAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maxShiftDifferenceAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>maxTransactionDifferenceAmount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>numberOfTopOrBottomLines</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>OfflineProfile</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>oneStatementPerDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>openFrom</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>openTo</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>PackedExtensions</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Partition</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Password</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>phone</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>poItemFilter</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>removeAddTender</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>replicationCounter</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RetailReqPlanIdSched</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReturnTaxGroup_W</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RoundingAccountLedgerDimension</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>roundingTaxAccount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>separateStmtPerStaffTerminal</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>serviceChargePct</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>serviceChargePrompt</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>SQLServerName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>startAmountCalculation</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>statementMethod</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>stmtCalcBatchEndTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>stmtPostAsBusinessDay</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>StoreNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>taxGroup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TaxGroupDataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TaxIdentificationNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TaxOverrideGroup</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>tenderDeclarationCalculation</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseCustomerBasedTax</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseCustomerBasedTaxExemption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseDefaultCustAccount</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UseDestinationBasedTax</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>UserName</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@Retail:RetailCustomerSynchronizationStatus</Caption>
		<DataSource xmlns="">RetailAsyncCustomerView</DataSource>
		<Pattern xmlns="">SimpleListDetails-Grid</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>671088639</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SynchronizeButtonGroup</Name>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>SynchronizeMenuButton</Name>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>AllRecords</Name>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>RetailAsyncCustomerCreator</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<Text>@Retail:AllRecords</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>SyncCurrentRecord</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>Auto</HeightMode>
										<Type>Button</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Retail:SynchronizeCurrentRecord</Text>
									</AxFormControl>
								</Controls>
								<Text>@Retail:Synchronize</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>954437176</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>RetailAsyncCustomerView_CustAccountAsync</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailChannelTable_inventLocation</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>inventLocation</DataField>
								<DataSource>RetailChannelTable</DataSource>
								<Label>@Retail:RetailChannelName</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailAsyncCustomerView_CustAccount</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustAccount</DataField>
								<DataSource>RetailAsyncCustomerView</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailAsyncCustomerView_CustAccountAsync</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>CustAccountAsync</DataField>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<Label>@Retail:RetailAsyncCustomerAccount</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>RetailAsyncCustomerView_OperationTimeStamp</Name>
								<Type>DateTime</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>OperationTimeStamp</DataField>
								<DataSource>RetailAsyncCustomerView</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OnlineOperationCompleted</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>DisplaySyncStatusValue</DataMethod>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<Label>@Retail:RetailSyncStatus</Label>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>RetailAsyncCustomerView</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>Tabular</Style>
						<VisibleCols>2</VisibleCols>
						<VisibleColsMode>Fixed</VisibleColsMode>
						<VisibleRows>15</VisibleRows>
						<VisibleRowsMode>Fixed</VisibleRowsMode>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<DataSource>RetailAsyncCustomerView</DataSource>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<FrameType>None</FrameType>
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<ElementPosition>1193046470</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>HeaderTab</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailCustomerAccount</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>DisplayCustomerAccount</DataMethod>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<Label>@Retail:CustAccount</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RetailAsyncCustomerView_Operation</Name>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Operation</DataField>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>OnlineOperationCompletedHeader</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displaySyncStatusValue</DataMethod>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<Label>@Retail:RetailSyncStatus</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RetailAsyncCustomerView_LastKnownError</Name>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>LastKnownError</DataField>
								<DataSource>RetailAsyncCustomerView</DataSource>
								<DisplayHeight>1</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>LinesTab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1670265058</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ChangeDescriptionTab</Name>
						<Pattern>FillText</Pattern>
						<PatternVersion>UX7 1.0</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>DescriptionText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>StaticText</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text></Text>
							</AxFormControl>
						</Controls>
						<Caption>@Retail:ChangeDescriptionText</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ShowChangesTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CustomerInformationGrid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustomerSyncOperationTempTable_FieldName</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>FieldName</DataField>
										<DataSource>RetailCustomerSyncOperationTempTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustomerSyncOperationTempTable_OldValue</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>OldValue</DataField>
										<DataSource>RetailCustomerSyncOperationTempTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustomerSyncOperationTempTable_NewValue</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>NewValue</DataField>
										<DataSource>RetailCustomerSyncOperationTempTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>RetailCustomerSyncOperationTempTable</DataSource>
							</AxFormControl>
						</Controls>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>