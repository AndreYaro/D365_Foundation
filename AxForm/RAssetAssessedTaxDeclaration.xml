<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RAssetAssessedTaxDeclaration</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RAssetAssessedTaxDeclaration extends FormRun
{
    public FormListColumn formListColumn;
    public RTax25RegisterJournalTable journalTable;
    public RAssetAssessedTaxRegType type;
    public rAssetTaxDeclaration assetTaxDeclaration;
    public boolean savedPrintByDivision;
    public boolean savedPrintForMajorTaxPayer;

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret = super();

        if (ret
            && element.closedOk())
        {
            int i;
            for (i = lstDeclarations.getCount() - 1; i >= 0; i--)
            {
                FormListItem item = lstDeclarations.getItem(i);
                if (item.stateChecked())
                {
                    break;
                }
            }

            if (i < 0)
            {
                ret = checkFailed("@GLS114715");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        super();

        assetTaxDeclaration.parmEmployeeId(responsibleId.valueStr());

        switch (type)
        {
            case RAssetAssessedTaxRegType::TransportTax:
                rAssetTransportTaxDeclaration assetTransportTaxDeclaration = element.args().caller() as rAssetTransportTaxDeclaration;
                if (assetTransportTaxDeclaration != null)
                {
                    assetTransportTaxDeclaration.parmTaxDeclarationLocation(transportTaxDeclarationLocation.selection());
                }
                break;

            case RAssetAssessedTaxRegType::LandTax:
                rAssetLandTaxDeclaration assetLandTaxDeclaration = element.args().caller() as rAssetLandTaxDeclaration;
                if (assetLandTaxDeclaration != null)
                {
                    assetLandTaxDeclaration.parmTaxDeclarationLocation(landTaxDeclarationLocation.selection());
                }                
                break;

            case RAssetAssessedTaxRegType::AssessedTax:
                rAssetAssessedTaxDeclaration assetAssessedTaxDeclaration = element.args().caller() as rAssetAssessedTaxDeclaration;
                if (assetAssessedTaxDeclaration != null)
                {
                    assetAssessedTaxDeclaration.parmTaxDeclarationLocation(taxDeclarationLocation.selection());
                }
                break;

            default:
                break;
        }

        assetTaxDeclaration.parmDocumentType(correctionNumber.value());
        assetTaxDeclaration.parmReorganization(reorganizationGroup.optionValue());
        assetTaxDeclaration.parmReorganizationCode(reorganizationCode.selection());
        assetTaxDeclaration.parmReorganizationINN(inn.valueStr());
        assetTaxDeclaration.parmReorganizationRRC(rrc.valueStr());

        Set declarationSet = new Set(Types::String);
        for (int i = lstDeclarations.getCount() - 1; i >= 0; i--)
        {
            FormListItem item = lstDeclarations.getItem(i);
            if (item.stateChecked())
            {
                declarationSet.add(item.text());
            }
        }

        assetTaxDeclaration.parmDeclarationSet(declarationSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExportToER</Name>
				<Source><![CDATA[
    public edit boolean editExportToER(boolean _set = false, boolean _exportToER = false)
    {
        if (_set)
        {
            assetTaxDeclaration.parmExportToER(_exportToER);
        }

        return assetTaxDeclaration.parmExportToER();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        assetTaxDeclaration = element.args().caller() as rAssetTaxDeclaration;

        if (!assetTaxDeclaration)
        {
            throw error(Error::missingParameter(this));
        }

        super();

        journalTable = this.args().record();

        type = assetTaxDeclaration.taxDeclarationType();

        this.locationModified(true);

        reorganizationGroup.optionValue(assetTaxDeclaration.parmReorganization());
        reorganizationCode.selection(assetTaxDeclaration.parmReorganizationCode());
        inn.text(assetTaxDeclaration.parmReorganizationINN());
        rrc.text(assetTaxDeclaration.parmReorganizationRRC());

        switch (type)
        {
            case RAssetAssessedTaxRegType::LandTax:
                landTaxDeclarationLocation.visible(true);
                
                rAssetLandTaxDeclaration assetLandTaxDeclaration = element.args().caller() as rAssetLandTaxDeclaration;
                if (assetLandTaxDeclaration != null)
                {
                    landTaxDeclarationLocation.selection(assetLandTaxDeclaration.parmTaxDeclarationLocation());
                }

                OK.enabled(landTaxDeclarationLocation.selection());
                break;

            case RAssetAssessedTaxRegType::AssessedTax:
                taxDeclarationLocation.visible(true);
                
                rAssetAssessedTaxDeclaration assetAssessedTaxDeclaration = element.args().caller() as rAssetAssessedTaxDeclaration;
                if (assetAssessedTaxDeclaration != null)
                {
                    taxDeclarationLocation.selection(assetAssessedTaxDeclaration.parmTaxDeclarationLocation());
                }

                OK.enabled(taxDeclarationLocation.selection());
                break;

            case RAssetAssessedTaxRegType::TransportTax:
                transportTaxDeclarationLocation.visible(true);
                
                rAssetTransportTaxDeclaration assetTransportTaxDeclaration = element.args().caller() as rAssetTransportTaxDeclaration;
                if (assetTransportTaxDeclaration != null)
                {
                    transportTaxDeclarationLocation.selection(assetTransportTaxDeclaration.parmTaxDeclarationLocation());
                }

                OK.enabled(transportTaxDeclarationLocation.selection());
                break;

            default:
                break;
        }
        
        CorrectionNumber.value(RTax25RegisterJournalTable::getCorrectionNumberAsset(journalTable.CorrectedRecId, journalTable.Version, type));

        responsibleId.text(assetTaxDeclaration.parmEmployeeId());
        element.design().caption(assetTaxDeclaration.caption());
        this.locationModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    public int addItem(str _valueId, str _valueName, int _idx)
    {
        int idx = _idx;

        if (_valueId)
        {
            FormListItem item = new FormListItem(_valueId);
            item.idx(idx + 1);
            idx = lstDeclarations.addItem(item);

            item = new FormListItem(_valueName);
            item.subItem(1);
            item.idx(idx);
            lstDeclarations.setItem(item);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationModified</Name>
				<Source><![CDATA[
    public void locationModified(boolean _forceChange = false)
    {
        Set declarationSet = new Set(Types::Container);
        RAssetAssessedTaxRegType subType = type;
        
        boolean printByDivision;
        boolean printForMajorTaxPayer;

        switch (type)
        {
            case RAssetAssessedTaxRegType::AssessedTax:
                printForMajorTaxPayer = taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::MajorTaxPayer
                    || taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::RussianOrganization
                    || taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::AssigneeAccounting
                    || taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::AssigneeLocationNotFirstRate;

                printByDivision = taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::DetachedDepartment
                    || taxDeclarationLocation.selection() == RAssetTaxDeclarationLocation::ImmovableProperty;

                subType = RAssetAssessedTaxRegType::DepreciatedCostCalc;
                break;

            case RAssetAssessedTaxRegType::TransportTax:
                printForMajorTaxPayer = transportTaxDeclarationLocation.selection() == RAssetTransportTaxDeclarationLocation::MajorTaxPayer
                    || transportTaxDeclarationLocation.selection() == RAssetTransportTaxDeclarationLocation::AssigneeAccounting;

                printByDivision = transportTaxDeclarationLocation.selection() == RAssetTransportTaxDeclarationLocation::ImmovableVehicle;

                subType = RAssetAssessedTaxRegType::TransportTaxCalc;
                break;

            case RAssetAssessedTaxRegType::LandTax:
                printForMajorTaxPayer = landTaxDeclarationLocation.selection() == RAssetLandTaxDeclarationLocation::MajorTaxPayer
                    || landTaxDeclarationLocation.selection() == RAssetLandTaxDeclarationLocation::AssigneeAccounting;

                printByDivision = landTaxDeclarationLocation.selection() == RAssetLandTaxDeclarationLocation::ImmovableGroundArea
                    || landTaxDeclarationLocation.selection() == RAssetLandTaxDeclarationLocation::ImmovableSubsoilArea;

                subType = RAssetAssessedTaxRegType::LandTaxCalc;
                break;

            default:
                break;

        }

        printByDivision = printByDivision || printForMajorTaxPayer;

        if (!_forceChange
            && printForMajorTaxPayer == savedPrintForMajorTaxPayer
            && printByDivision == savedPrintByDivision)
        {
            return;
        }

        lstDeclarations.deleteAll();
        lstDeclarations.deleteColumn(0);
        lstDeclarations.deleteColumn(0);

        lstDeclarations.addColumn(1, new FormListColumn((printByDivision ? "@SYS850" : "@SYS21937"), 1, 100));
        lstDeclarations.addColumn(2, new FormListColumn("@SYS80991", 2, 190));
        
        boolean addMajorTaxPayer;

        if (!printForMajorTaxPayer)
        {
            RTax25RegisterTransMap regTrans;
            RTax25RegisterJournalTrans journalTrans;
            RTax25RegType regType;

            if (printByDivision)
            {
                regType = RTax25RegType::construct(RTax25RegisterType::PaymentReceipt, subType);
                regTrans = new SysDictTable(regType.detachedTableId()).makeRecord();
                while select regTrans
                    order by LineNumber
                    where regTrans.RefTableId == tablenum(RAssetTable)
                        && regTrans.BlockType == ReportBlockType::Body
                exists join journalTrans
                    where journalTrans.RecId == regTrans.JournalTransRefRecId
                        && journalTrans.JournalNum == journalTable.JournalNum
                        && journalTrans.PeriodType == journalTable.PeriodType
                        && journalTrans.FiscalYear == journalTable.FiscalYear
                        && journalTrans.PeriodNum == journalTable.PeriodNum
                        && journalTrans.AssessedTaxRegisterType == subType
                {
                    //ignoring lines related to movables
                    if (type == RAssetAssessedTaxRegType::AssessedTax
                        && regTrans.(conpeek(regType.fieldId(), 14)))
                    {
                        continue;
                    }
                    
                    RAssetLocationId location = RAssetTable::findrec(regTrans.RefRecId)
                        .location(journalTable.EndDate);

                    if (location)
                    {
                        Branches_RU branch = Branches_RU::find(RAssetLocation::find(location).BranchId);
                        
                        if (branch.Independent
                            || type == RAssetAssessedTaxRegType::LandTax)
                        {
                            VendTable vendTable = VendTable::find(branch.VendAccount);
                            if (vendTable)
                            {
                                declarationSet.add([vendTable.AccountNum, vendTable.name()]);
                            }
                            else
                            {
                                addMajorTaxPayer = true;
                            }
                        }
                        else
                        {
                            addMajorTaxPayer = true;
                        }
                    }
                    else
                    {
                        addMajorTaxPayer = true;
                    }
                }
            }
            else
            {
                regType = RTax25RegType::construct(RTax25RegisterType::PaymentReceipt, type);
                regTrans = new SysDictTable(regType.detachedTableId()).makeRecord();
                while select regTrans
                    order by LineNumber
                    where regTrans.BlockType  == ReportBlockType::Footer
                exists join journalTrans
                    where journalTrans.RecId == regTrans.JournalTransRefRecId
                        && journalTrans.JournalNum == journalTable.JournalNum
                        && journalTrans.PeriodType == journalTable.PeriodType
                        && journalTrans.FiscalYear == journalTable.FiscalYear
                        && journalTrans.PeriodNum == journalTable.PeriodNum
                        && journalTrans.AssessedTaxRegisterType == type
                {
                    Common common          = regTrans;
                    OKATO_RU okato           = common.(fieldName2Id(regType.detachedTableId(), 'RCOAD'));
                    TaxAuthorityAddress taxAuthority    = TaxAuthorityAddress::findByOKATO_RU(okato);
                    if (taxAuthority)
                    {
                        declarationSet.add([taxAuthority.TaxAuthority, taxAuthority.Name]);
                    }
                    else
                    {
                        warning(strFmt("@GLS114714", okato));
                    }
                }
            }
        }
        
        int idx;
        if (printForMajorTaxPayer
            || addMajorTaxPayer)
        {
            idx = element.addItem(CompanyInfo::find().Name, '', idx);
        }
        
        SetEnumerator se = declarationSet.getEnumerator();
        while (se.moveNext())
        {
            str id;
            str name;

            [id, name] = se.current();
            idx = element.addItem(id, name, idx);
        }

        this.selecting(true);

        savedPrintForMajorTaxPayer = printForMajorTaxPayer;
        savedPrintByDivision = printByDivision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selecting</Name>
				<Source><![CDATA[
    public void selecting(boolean _select)
    {
        for (int i = lstDeclarations.getCount() - 1; i >= 0; i--)
        {
            FormListItem item = lstDeclarations.getItem(i);
            item.stateChecked(_select);
            lstDeclarations.setItem(item);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>TaxDeclarationLocation</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            OK.enabled(taxDeclarationLocation.selection());
            element.locationModified();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LandTaxDeclarationLocation</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            OK.enabled(landTaxDeclarationLocation.selection());
            element.locationModified();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransportTaxDeclarationLocation</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            OK.enabled(transportTaxDeclarationLocation.selection());
            element.locationModified();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReorganizationGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            reorganizationCode.selection(RAssetTaxReorganizationCode::Liquidation);
            inn.text('');
            rrc.text('');
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.selecting(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeselectAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.selecting(false);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@GLS116949</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Group_Group</Name>
						<ElementPosition>536870910</ElementPosition>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>CorrectionNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>477218588</ElementPosition>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@GLS117056</Label>
								<LimitText>3</LimitText>
								<LimitTextMode>Fixed</LimitTextMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>TaxDeclarationLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>954437176</ElementPosition>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RAssetTaxDeclarationLocation</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>LandTaxDeclarationLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1193046470</ElementPosition>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RAssetLandTaxDeclarationLocation</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>TransportTaxDeclarationLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RAssetTransportTaxDeclarationLocation</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ResponsibleId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1670265058</ElementPosition>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RAssetEmployee</ExtendedDataType>
								<Label>@GLS101976</Label>
							</AxFormControl>
						</Controls>
						<Caption>@SYS25818</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ReorganizationGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1908874352</ElementPosition>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ReorganizationCode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RAssetTaxReorganizationCode</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>INN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>INN_RU</ExtendedDataType>
								<LimitText>10</LimitText>
								<LimitTextMode>Fixed</LimitTextMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RRC</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>KPPU_RU</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Bold>Bold</Bold>
						<Caption>@GLS117062</Caption>
						<FrameOptionButton>Check</FrameOptionButton>
						<OptionValue>0</OptionValue>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupElectronicReporting</Name>
						<ElementPosition>805306365</ElementPosition>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ExportToERCheckBox</Name>
								<ElementPosition>1073741822</ElementPosition>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editExportToER</DataMethod>
								<Label>@GLS114710</Label>
							</AxFormControl>
						</Controls>
						<Caption>@GLS114713</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupDeclarationTarget</Name>
				<ElementPosition>1610612730</ElementPosition>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ActionPaneDeclaration</Name>
						<ElementPosition>1073741822</ElementPosition>
						<Type>ActionPane</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup1</Name>
								<ElementPosition>1431655764</ElementPosition>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>SelectAll</Name>
										<ElementPosition>1073741822</ElementPosition>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS63238</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>DeselectAll</Name>
										<ElementPosition>1610612733</ElementPosition>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS57284</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormListViewControl">
						<Name>lstDeclarations</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>ListView</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<CheckBox>Yes</CheckBox>
						<ColorScheme>WindowsPalette</ColorScheme>
						<ColumnHeaderButton>Yes</ColumnHeaderButton>
						<GridLines>Yes</GridLines>
						<RowSelect>Yes</RowSelect>
						<ViewType>Report</ViewType>
					</AxFormControl>
				</Controls>
				<Caption>@GLS114712</Caption>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<Enabled>No</Enabled>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>