<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LeanDocumentServiceCreation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LeanDocumentServiceCreation extends FormRun
{
    Object                      dialogObj;
    LeanDocumentDataContract    contract;
    FormObservableLink          observable = new FormObservableLink();

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        if (this.editCreatePurchaseOrder(false, NoYes::No) == NoYes::No &&
            this.editCreateReceiptAdvice(false, NoYes::No) == NoYes::No)
        {
            // Release purchase orders and/or Receipt advices must be selected
            ret = checkFailed("@SYS342131");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        // Call close to skip validation
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        if (this.controller().checkCloseDialog())
        {
            //contract.testField(testField.text());
            super();
        }
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>controller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the caller controller from the dialog.
    /// </summary>
    /// <returns>
    /// The caller controller.
    /// </returns>
    public LeanDocumentServiceController controller()
    {
        return this.dialog().controller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public SysOperationDialog dialog()
    {
        if (dialogObj == null)
        {
            dialogObj = Dialog::getDialogFromCaller(this);
        }

        return dialogObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAggregationMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the aggregation mode value of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_aggregationMode">
    ///    The aggregation mode that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The aggregation mode value.
    /// </returns>
    public edit LeanDocumentLinesAggregationMode editAggregationMode(
        boolean                             _set,
        LeanDocumentLinesAggregationMode    _aggregationMode)
    {
        observable.observe();

        if (_set)
        {
            contract.parmAggregationMode(_aggregationMode);
        }
        else
        {
            _aggregationMode = contract.parmAggregationMode();
        }

        return _aggregationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCreatePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the creation of purchase orders flag of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_createPO">
    ///    The creation of purchase orders flag that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The creation of purchase orders flag value.
    /// </returns>
    public edit NoYes editCreatePurchaseOrder(
        boolean _set,
        NoYes   _createPO)
    {
        observable.observe();

        SecurityRights rights = SecurityRights::newUser(curUserId());

        if (_set)
        {
            if (!rights.formControlAccessRight(this.form().name(), createPO.name()))
            {
                _createPO = false;
            }

            contract.parmCreatePurchaseOrders(_createPO);
        }
        else
        {
            _createPO = contract.parmCreatePurchaseOrders();

            if (!rights.formControlAccessRight(this.form().name(), createPO.name()))
            {
                _createPO = false;
            }
        }

        return _createPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCreateReceiptAdvice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the creation of receipt advices flag of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_create">
    ///    The creation of receipt advices flag that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The creation of receipt advices flag value.
    /// </returns>
    public edit NoYes editCreateReceiptAdvice(
        boolean _set,
        NoYes   _create)
    {
        observable.observe();

        SecurityRights rights = SecurityRights::newUser(curUserId());

        if (_set)
        {
            if (!rights.formControlAccessRight(this.form().name(), createRA.name()))
            {
                _create = false;
            }

            contract.parmCreateReceiptAdvices(_create);
        }
        else
        {
            _create = contract.parmCreateReceiptAdvices();

            if (!rights.formControlAccessRight(this.form().name(), createRA.name()))
            {
                _create = false;
            }
        }

        return _create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editKanbanRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>LeanReplenishmentRuleId</c> extended data type of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_leanReplenishmentRuleId">
    ///    The <c>LeanReplenishmentRuleId</c> value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>LeanReplenishmentRuleId</c> extended value.
    /// </returns>
    public edit LeanReplenishmentRuleId editKanbanRuleId(
        boolean                     _set,
        LeanReplenishmentRuleId     _leanReplenishmentRuleId)
    {
        observable.observe();

        KanbanRuleRefRecId kanbanRuleRecId;

        if (_set)
        {
            if (!_leanReplenishmentRuleId)
            {
                contract.parmKanbanRule(0);
            }
        }
        else
        {
            kanbanRuleRecId = contract.parmKanbanRule();
            _leanReplenishmentRuleId = kanbanRuleRecId ? KanbanRule::find(kanbanRuleRecId).RuleId : '';
        }

        return _leanReplenishmentRuleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMinimumJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the minimum job status value of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    ///    The minimum job status valuethat will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The minimum job status value.
    /// </returns>
    public edit LeanKanbanJobStatus editMinimumJobStatus(
        boolean _set,
        LeanKanbanJobStatus    _leanKanbanJobStatus)
    {
        observable.observe();

        if (_set)
        {
            contract.parmMinimumJobStatus(_leanKanbanJobStatus);
        }
        else
        {
            _leanKanbanJobStatus = contract.parmMinimumJobStatus();
        }

        return _leanKanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPlanActivityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>PlanActivityName</c> extended data type of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_planActivityName">
    ///    The <c>PlanActivityName</c> value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>PlanActivityName</c> extended value.
    /// </returns>
    public edit PlanActivityName editPlanActivityName(
        boolean             _set,
        PlanActivityName    _planActivityName)
    {
        PlanActivityRefRecId planActivityRecId;

        observable.observe();

        if (_set)
        {
            // only resetting the value is handled here as the real setting of the value
            // is handled by the activities lookup
            if (!_planActivityName)
            {
                contract.parmPlanActivity(0);
            }
        }
        else
        {
            planActivityRecId = contract.parmPlanActivity();
            _planActivityName = planActivityRecId ? PlanActivity::find(planActivityRecId).Name : '';
        }

        return _planActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>PlanName</c> extended data type of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_planName">
    ///    The <c>PlanName</c> value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The name of the plan.
    /// </returns>
    public edit PlanName editPlanName(
        boolean     _set,
        PlanName    _planName)
    {
        observable.observe();

        if (_set)
        {
            contract.parmPlanReference(_planName ? PlanReference::findPlanName(_planName).RecId : 0);
        }
        else
        {
            _planName = PlanReference::find(contract.parmPlanReference()).PlanName;
        }

        return _planName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPurchAgreementId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>PurchAgreementId</c> extended data type of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_purchAgreementId">
    ///    The <c>PurchAgreementId</c> value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>PurchAgreementId</c> extended value.
    /// </returns>
    public edit PurchAgreementId editPurchAgreementId(
        boolean             _set,
        PurchAgreementId    _purchAgreementId)
    {
        RefRecId purchAgreementRecId;

        observable.observe();

        if (_set)
        {
            contract.parmPurchAgreementHeader(_purchAgreementId ?
                                                PurchAgreementHeader::findAgreementId(_purchAgreementId).RecId
                                                :
                                                0);
        }
        else
        {
            purchAgreementRecId = contract.parmPurchAgreementHeader();
            _purchAgreementId = purchAgreementRecId ? PurchAgreementHeader::find(purchAgreementRecId).PurchNumberSequence : '';
        }

        return _purchAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editValidFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the valid from of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_validFrom">
    ///    The date value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The valid from date value.
    /// </returns>
    public edit ExpirationDate editValidFrom(
        boolean         _set,
        ExpirationDate  _validFrom)
    {
        observable.observe();

        if (_set)
        {
            contract.parmValidFromDate(_validFrom);
        }
        else
        {
            _validFrom = contract.parmValidFromDate();
        }

        return _validFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editValidTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the valid to of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_validTo">
    ///    The date value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The valid to date value.
    /// </returns>
    public edit ExpirationDate editValidTo(
        boolean         _set,
        ExpirationDate  _validTo)
    {
        observable.observe();

        if (_set)
        {
            contract.parmValidToDate(_validTo);
        }
        else
        {
            _validTo = contract.parmValidToDate();
        }

        return _validTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>VendAccount</c> extended data type of the contract.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_vendAccount">
    ///    The <c>VendAccount</c> value that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>VendAccount</c> extended value.
    /// </returns>
    public edit VendAccount editVendAccount(
        boolean         _set,
        VendAccount     _vendAccount)
    {
        observable.observe();

        if (_set)
        {
            contract.parmVendAccount(_vendAccount);
        }
        else
        {
            _vendAccount = contract.parmVendAccount();
        }

        return _vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #define.dataContractKey('_contract')

        contract = this.controller().getDataContractObject(#dataContractKey);
        contract.initValuesUI();

        super();

        xSysLastValue::getLast(this);
        element.design().caption("@SYS335844");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return contract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDependentControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets dependent controls.
    /// </summary>
    /// <param name="_modifiedControl">
    /// The object being modified.
    /// </param>
    public void resetDependentControls(FormControl _modifiedControl)
    {
        #define.invalidRecId(0)

        switch (_modifiedControl.id())
        {
            case planReference.id():
                contract.parmPlanActivity(#invalidRecId);
            // fall through
            case planActivity.id():
                contract.parmKanbanRule(#invalidRecId);
                break;
            case vendAccount.id():
                contract.parmPurchAgreementHeader(#invalidRecId);
                break;
            case createPO.id():
                poAggregationMode.enabled(createPO.checked());
                break;
            case createRA.id():
                if (createRA.checked())
                {
                    contract.parmMinimumJobStatus(LeanKanbanJobStatus::Completed);
                }
                break;
            default:
            // do nothing here
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        this.dialog().mainFormGroup(dialogStartGrp);
        this.dialog().curFormGroup(dialogStartGrp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a control is selected on the form.
    /// </summary>
    /// <param name="_control">
    /// The control that gets selected.
    /// </param>
    /// <returns>
    /// Boolean value indicating if the selection is valid.
    /// </returns>
    public boolean selectControl(FormControl _control)
    {
        boolean ret;

        ret = super(_control);

        // check to see if selectCtrl messages need to be dispatched
        if (this.dialog().allowUpdateOnSelectCtrl())
        {
            this.controller().dialogSelectCtrl();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean res = contract.unpack(_packedClass);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>planReference</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>planActivity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PlanActivity::lookupPlanActivityLeanDocument(this, contract);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>kanbanRule</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            KanbanRule::lookupKanbanRuleLeanDocument(this, contract);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>vendAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>purchAgreement</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PurchAgreementHeader::lookupLeanDocumentDataContract(this, contract);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>validFrom</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>validTo</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>minimumJobStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>createPO</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>poAggregationMode</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>createRA</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetDependentControls(this);

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnDefault</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            contract.clear();
            contract.initDefaultValues();
            contract.initValuesUI();

            observable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS335844</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>grpSelectJobs</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>planReference</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editPlanName</DataMethod>
										<Label>@SYS131941</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>planActivity</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editPlanActivityName</DataMethod>
										<Label>@SYS152578</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>kanbanRule</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editKanbanRuleId</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>vendAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editVendAccount</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>purchAgreement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editPurchAgreementId</DataMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>validFrom</Name>
										<ElementPosition>1503238548</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS335580</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editValidFrom</DataMethod>
										<Label>@SYS312575</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>validTo</Name>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS335581</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editValidTo</DataMethod>
										<Label>@SYS312576</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>minimumJobStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1932735276</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS335582</HelpText>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editMinimumJobStatus</DataMethod>
										<Label>@SYS335583</Label>
										<Items />
									</AxFormControl>
								</Controls>
								<Caption>@SYS335845</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>grpCreation</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>createPO</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProductionControl:LeanDocumentServiceCreation_createPO</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editCreatePurchaseOrder</DataMethod>
										<Label>@SYS335586</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>poAggregationMode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editAggregationMode</DataMethod>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>createRA</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@SYS335571</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editCreateReceiptAdvice</DataMethod>
										<Label>@SYS335570</Label>
									</AxFormControl>
								</Controls>
								<Caption>@SYS335584</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS35893</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>dialogStartGrp</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1717986916</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>btnDefault</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SYS335846</HelpText>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS26467</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonCancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
