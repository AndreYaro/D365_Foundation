<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjTransOnAcc</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjTransOnAcc extends FormRun
{
    QueryBuildDataSource    qb_projOnAccTransSale1;
    QueryBuildDataSource    qb_projOnAccTransSale2;
    QueryBuildDataSource    qb_ProjGrantView;

    // range ProjGrantID
    QueryBuildRange     criteriaGrantID;

    //  range projTable
    QueryBuildRange     criteriaWIPProjId;
    QueryBuildRange     criteriaProjId;

    QueryBuildRange     criteriaProjInvoiceProjId;
    QueryBuildRange     criteriaFixedPrice;
    QueryBuildRange     criteriaTimeMaterial;
    QueryBuildRange     criteriaInternal;
    QueryBuildRange     criteriaCost;
    QueryBuildRange     criteriaInvestment;
    QueryBuildRange     criteriaSorting1;
    QueryBuildRange     criteriaSorting2;
    QueryBuildRange     criteriaSorting3;
    QueryBuildRange     criteriaGroupId;
    QueryBuildRange     criteriaCustAccount;

    //  range projOnAccTrans
    QueryBuildRange     criteriaTransDate;
    QueryBuildRange     criteriaTransStatus1;
    QueryBuildRange     criteriaTransStatus2;
    QueryBuildRange     criteriaTransId;
    QueryBuildRange     criteriaSalesCurrency;

    //  Range LedgerTransDate
    QueryBuildRange     criteriaLedgerTransDate;

    ProjInvoiceProjId   contractId;
    ProjId              projId;
    boolean             allowEdit;
    private boolean     argsRecordIsOnAccountDeduction;

    boolean             m_bLinkProjFinancialStatisitc;

    ProjStatistic       projStatistic, projStatisticLedger;

    [FormObservable]
    TransDate           ledgerFromDate;
    [FormObservable]
    TransDate           ledgerToDate;

    ProjInvoiceControl  projInvoiceControl;
    boolean             linkInvoiceControl;
    boolean             linkProjstatistic;

    ProjCashFlow        projCashFlow;
    boolean             linkProjCashFlow;

    Map                 salesAmountCache;
    Map                 salesPriceCache;
    ProjTransIdBase     transId;
    QueryBuildRange     m_oqbrOffset;
    QueryBuildDataSource  qb_projOnAccTrans;

    // <GEEPL>
    #ISOCountryRegionCodes
    // </GEEPL>

    TaxExciseTypeController_IN  taxExciseTypeController;
    boolean                     isIndiaIndirectTaxParameterMarked;
    boolean                     isIndiaWHTMarked;
    boolean                     isProjOnAccTrans_INEnabled;

    boolean             cdsLockingOptionOnAccountTrans;
    boolean             lockFieldsForOnAccountTransactionsByContract;
    boolean             lockFieldsForOnAccountTransactionsByProject;

    ProjCreateAdjTraceTree      traceTree;
    ProjTransIdBase             selectionTransId;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    private boolean isContractLineRevRecFeatureEnabled = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
    private boolean isIncludeDeductionsFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ProjTransOnAccountIncludeDeductionsFeature::instance());

}
]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    void bookRefresh()
    {
        projOnAccTrans_ds.refresh();
        projOnAccTrans_ds.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableEditFieldsForCEIntegration</Name>
				<Source><![CDATA[
    private void disableEditFieldsForCEIntegration()
    {
        #SysSystemDefinedButtons
        boolean isCEIntegration = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        if (isCEIntegration)
        {
            PSAeditActivityPurpose.allowEdit(false);
            salesAmountGrid.allowEdit(false);
            projInvoiceStatus.allowEdit(false);
            transactionOrigin.allowEdit(false);
            descriptionGroup_TransactionOrigin.allowEdit(false);
            amountGrid.allowEdit(false);
            salesPrice_M_salesPrice.allowEdit(false);

            FormCommandButtonControl newButton = element.control(element.controlId(#SystemDefinedNewButton)) as FormCommandButtonControl;
            FormCommandButtonControl deleteButton = element.control(element.controlId(#SystemDefinedDeleteButton)) as FormCommandButtonControl;
            newButton.visible(false);
            newButton.enabled(false);
            deleteButton.visible(false);
            deleteButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldEditableForCEIntegration</Name>
				<Source><![CDATA[
    private void setFieldEditableForCEIntegration(boolean _allowEdit)
    {
        boolean isCEIntegration = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        if (isCEIntegration)
        {
			projOnAccTrans_ds.allowEdit(_allowEdit);
            if (_allowEdit)
            {
				//disable edit for all fields except DefaultDimension, TaxGroupId, TaxItemGroupId, and CategoryId
                allowEditFieldsOnFormDS_W(projOnAccTrans_ds, false);
                projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, DefaultDimension)).allowEdit(_allowEdit);
                projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, TaxGroupId)).allowEdit(_allowEdit);
                projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, TaxItemGroupId)).allowEdit(_allowEdit);
                projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, CategoryId)).allowEdit(_allowEdit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        #SysSystemDefinedButtons
        
		this.initDataset();

        ledgerFromDate  = dateNull();
        ledgerToDate    = dateMax();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            isIndiaIndirectTaxParameterMarked   = TaxParameters::checkTaxParameters_IN();
            isIndiaWHTMarked                    = TaxWithholdParameters_IN::checkTaxParameters();
            isProjOnAccTrans_INEnabled          = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(ProjOnAccTransTaxExtensionIN));
        }
        // </GIN>

        super();

        cdsLockingOptionOnAccountTrans = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::OnAccountTransactions);
        if (contractId)
        {
            boolean isContractExternallyManaged = Project::isContractExternallyManaged(contractId);
            lockFieldsForOnAccountTransactionsByContract = cdsLockingOptionOnAccountTrans && isContractExternallyManaged;
        }
        else if (projId)
        {
            boolean isProjectExternallyManaged = Project::isProjectExternallyManaged(projId);
            lockFieldsForOnAccountTransactionsByProject = cdsLockingOptionOnAccountTrans && isProjectExternallyManaged;
        }
        
        if (element.args().parmEnumType()
            && element.args().parmEnum()
            && element.args().parmEnumType() == enumNum(NoYes)
            && element.args().parmEnum() == NoYes::Yes)
        {
            projOnAccTrans_ds.allowCreate(false);
            projOnAccTrans_ds.allowDelete(false);
            projOnAccTrans_ds.allowEdit(false);
        }
        else
        {
            allowEdit  = true;
            
            projOnAccTrans_ds.allowCreate(!lockFieldsForOnAccountTransactionsByContract && !lockFieldsForOnAccountTransactionsByProject);
            projOnAccTrans_ds.allowDelete(!lockFieldsForOnAccountTransactionsByContract);
            projOnAccTrans_ds.allowEdit(!lockFieldsForOnAccountTransactionsByContract);
        }

		FormCommandButtonControl editButton = element.control(element.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
		editButton.enabled(projOnAccTrans_ds.allowEdit());

        element.setPriceAmount();
        element.setVisible();

        salesAmountCache = new Map(Types::String, Types::Real);
        salesPriceCache = new Map(Types::String, Types::Real);

        // <GIN>
        if (isIndiaIndirectTaxParameterMarked || isIndiaWHTMarked)
        {
            element.setTaxWithholdVisible_IN();
            element.setVisibleTaxInformation_IN();
        }
        // </GIN>

        // <GTE>
        boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
        TransTaxInformation.visible(isIndiaIndirectTaxParameterMarked || isGTEEnabled);
        
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            SalesTax.visible(false);
            SalesTax_TaxGroupId.visible(false);
            SalesTax_TaxItemGroupId.visible(false);
        }
        // </GTE>

        traceTree = new ProjCreateAdjTraceTree(ctrlTree, ProjTransType::OnAccount);
        
        element.disableEditFieldsForCEIntegration();

        ProjOnAccTrans_ContractLineNum.visible(isContractLineRevRecFeatureEnabled);
        Identification_ContractLineNum.visible(isContractLineRevRecFeatureEnabled);
        
        PSAShowOffset.checked(isIncludeDeductionsFeatureEnabled && argsRecordIsOnAccountDeduction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataset</Name>
				<Source><![CDATA[
    void initDataset()
    {
        switch (element.args().dataset())
        {
            case tableNum(ProjInvoiceTable):
                ProjInvoiceTable projInvoiceTable = element.args().record();
                contractId = projInvoiceTable.ProjInvoiceProjId;
                break;

            case tableNum(ProjOnAccTrans):
                ProjOnAccTrans projOnAccTransLink = element.args().record();
                transId = projOnAccTransLink.TransId;
                argsRecordIsOnAccountDeduction = (projOnAccTransLink.TransactionOrigin == ProjOrigin::Deduction);
                break;

            case tableNum(TmpProjStatistic):
                projStatisticLedger = element.args().parmObject();
                allowEdit           = false;
                break;

            case tableNum(ProjTransPosting):
                ProjTransPosting projTransPosting = element.args().record();
                transId             = projTransPosting.TransId;
                break;

            case tableNum(ProjTable):
                ProjTable projTable = element.args().record();
                projId = projTable.ProjId;
                break;

            case(tableNum(TmpProjInvoiceControl)):
                ProjInvoiceControl projInvControl  = element.args().parmObject();
                projId = projInvControl.parmProjId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInvoiceControl</Name>
				<Source><![CDATA[
    void linkInvoiceControl()
    {
        #define.star('*')

        if (projInvoiceControl.parmProjTransDateFrom() || projInvoiceControl.parmProjTransDateTo())
        {
            criteriaTransDate.value(SysQuery::range(projInvoiceControl.parmProjTransDateFrom(), projInvoiceControl.parmProjTransDateTo()));
        }

        if (!element.enableProjMultipleContractLinesForProjectFeature)
        {
            if (projInvoiceControl.parmFixedPrice())
            {
                criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
            }
            else
            {
                criteriaFixedPrice.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmTimeMaterial())
            {
                criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
            }
            else
            {
                criteriaTimeMaterial.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaInternal.value(queryValue(ProjType::Cost));
            }
            else
            {
                criteriaInternal.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaCost.value(queryValue(ProjType::Internal));
            }
            else
            {
                criteriaCost.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInvestment())
            {
                criteriaInvestment.value(queryValue(ProjType::Investment));
            }
            else
            {
                criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (projInvoiceControl.parmProjId())
        {
            criteriaProjId.value(queryValue(projInvoiceControl.parmProjId()));
        }

        if (projInvoiceControl.parmProjInvoiceProjId())
        {
            criteriaProjInvoiceProjId.value(queryValue(projInvoiceControl.parmProjInvoiceProjId()));
        }

        if (projInvoiceControl.parmSalesCurrency())
        {
            criteriaSalesCurrency.value(queryValue(projInvoiceControl.parmSalesCurrency()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCashFlow</Name>
				<Source><![CDATA[
    void linkProjCashFlow()
    {
        #define.star('*')

        if (projCashFlow.parmOnAcc())
        {
            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
            {
                criteriaTransDate.value(SysQuery::range(projCashFlow.parmProjectFromDate(), projCashFlow.parmProjectToDate()));
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCashFlow.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCashFlow.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCashFlow.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (!(projCashFlow.parmFixedPrice()   ||
                        projCashFlow.parmTimeMaterial() ||
                        projCashFlow.parmInternalCost() ||
                        projCashFlow.parmInvestment()   ||
                        projCashFlow.parmTimeProject()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projCashFlow.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
            }

            if (projCashFlow.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
            }

            if (projCashFlow.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));
            }

            if (projCashFlow.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
            }

            if (projCashFlow.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));
            }

            if (projCashFlow.parmProjTree())
            {
                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
            }
            else
            {
                if (projCashFlow.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                }
            }

            if (projCashFlow.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));
            }

            if (projCashFlow.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic()
    {
        #define.star('*')

        if (projStatistic.parmOnAcc())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();

            ledgerDates.visible(true);

            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(SysQuery::range(projStatistic.parmProjFromDate(), projStatistic.parmProjToDate()));
            }

            if (projStatistic.parmLedgerFromDate() || projStatistic.parmLedgerToDate())
            {
                criteriaLedgerTransDate.value(SysQuery::range(projStatistic.parmLedgerFromDate(), projStatistic.parmLedgerToDate()));
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (!(projStatistic.parmFixedPrice()   ||
                        projStatistic.parmTimeMaterial() ||
                        projStatistic.parmInternalCost() ||
                        projStatistic.parmInvestment()   ||
                        projStatistic.parmTime()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }

            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }

            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }

            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }

            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmGrantID())
            {
                qb_ProjGrantView = SysQuery::findOrCreateDataSource(projOnAccTrans_ds.query(), tableNum(ProjGrantView), tableNum(ProjOnAccTrans));
                qb_ProjGrantView.addLink(fieldNum(ProjOnAccTrans,ProjId), fieldNum(ProjGrantView, ProjId));
                criteriaGrantID = qb_ProjGrantView.addRange(fieldNum(ProjGrantView, GrantId));
                criteriaGrantID.value(queryValue(projStatistic.parmGrantID()));
            }
            else if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else
            {
                if (projStatistic.parmProjId())
                {
                    criteriaProjId.value(queryValue(projStatistic.parmProjId()));
                }
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCashFlow</Name>
				<Source><![CDATA[
    ProjCashFlow projCashFlow()
    {
        return projCashFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projStatistic</Name>
				<Source><![CDATA[
    ProjStatistic projStatistic()
    {
        return projStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSALinkProjFinancialStatistic</Name>
				<Source><![CDATA[
    void PSALinkProjFinancialStatistic()
    {
        PSATmpProjFinancialStatistic tTmpProjStatistic;
        PSATmpStr                    sProjId;
        TransDate                    dLedgerFromDate;
        TransDate                    dLedgerToDate;
        #define.star('*')

        void setProjInvoiceCriteria()
        {
            criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {            
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }
                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }
                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }
            }
        }

        tTmpProjStatistic = element.args().record();
        sProjId = tTmpProjStatistic.ProjViewId;

        dLedgerFromDate  = projStatistic.parmLedgerFromDate();
        dLedgerToDate    = projStatistic.parmLedgerToDate();

        ledgerDates.visible(true);

        if (dLedgerFromDate && (dLedgerFromDate != dateNull()))
        {
            ledgerDateFrom.dateValue(dLedgerFromDate);
        }

        if (dLedgerToDate && (dLedgerToDate != dateMax()))
        {
            ledgerDateTo.dateValue(dLedgerToDate);
        }

        if (!(dLedgerFromDate && dLedgerToDate))
        {
            ledgerDates.visible(false);
        }

        if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
        {
            criteriaTransDate.value(strFmt('%1..%2',queryValue(projStatistic.parmProjFromDate()),
                                                    queryValue(projStatistic.parmProjToDate())));
        }

        if (tTmpProjStatistic.ProjTotal == PSAProjTotal::None)
        {
            criteriaProjId.value(queryValue(sProjId));
        }
        else if (tTmpProjStatistic.ProjTotal == PSAProjTotal::LevelTotal)
        {
            if (projStatistic.psaParmDisplayLevel() == 0)
            {
                if (projStatistic.parmProjInvoiceProjId())
                {
                    setProjInvoiceCriteria();
                }
                else if (projStatistic.parmProjId())
                {
                    if (projStatistic.parmProjTree())
                    {
                        criteriaProjId.value(sProjId + #star);
                    }
                    else
                    {
                        criteriaProjId.value(sProjId);
                    }
                }
            }
            else
            {
                criteriaProjId.value(sProjId + #star);
            }
        }
        else
        {
            if (projStatistic.parmProjInvoiceProjId() && tTmpProjStatistic.ProjTotal == PSAProjTotal::GrandTotal)
            {
                setProjInvoiceCriteria();
            }
            else
            {
                criteriaProjId.value(strLTrim(sProjId) + #star);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedTransId</Name>
				<Source><![CDATA[
    ProjTransIdBase selectedTransId()
    {
        return selectionTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccessForCEIntegration</Name>
				<Source><![CDATA[
    void setAccessForCEIntegration()
    {
        ProjTable projTable = ProjTable::find(projOnAccTrans.ProjID);

        if (projOnAccTrans.proposal() || (projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction && projOnAccTrans.PSARefRecId != 0))
        {
            this.setFieldEditableForCEIntegration(false);
        }
        else
        {
            this.setFieldEditableForCEIntegration(allowEdit);
        }

        if (projTable.wipProject)
        {
			ProjOnAccTransSale projOnAccTransSaleLocal;
            select firstonly projOnAccTransSaleLocal
                where ((projOnAccTransSaleLocal.TransId == projOnAccTrans.TransId) &&
                    ((projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Estimated) ||
                        (projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Eliminated)));
            if (projOnAccTransSaleLocal)
            {
                this.setFieldEditableForCEIntegration(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccessForTaxExtensionIN</Name>
				<Source><![CDATA[
    private void setAccessForTaxExtensionIN()
    {
        #SysSystemDefinedButtons
        ProjTable projTable = ProjTable::find(projOnAccTrans.ProjID);
        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
        boolean isProjectExternallyManaged = Project::isContractExternallyManaged(projInvoiceTable.ProjInvoiceProjId);
        boolean lockFieldsForOnAccountTransactionsByProjectLocal = cdsLockingOptionOnAccountTrans && isProjectExternallyManaged;
        
        if (projOnAccTrans.proposal() || (projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction && projOnAccTrans.PSARefRecId != 0))
        {
            projOnAccTransTaxExtensionIN_ds.allowEdit(false);
        }
        else
        {
            boolean projOnAccTransTaxExtensionINAllowEdit;
            if (projOnAccTrans.PSAContractLineNum && ProjOnAccTrans.TransactionOrigin == ProjOrigin::Milestone)
            {
                projOnAccTransTaxExtensionINAllowEdit = true;
            }
            else
            {
                projOnAccTransTaxExtensionINAllowEdit = allowEdit;
            }

            projOnAccTransTaxExtensionIN_ds.allowEdit(projOnAccTransTaxExtensionINAllowEdit && !lockFieldsForOnAccountTransactionsByProjectLocal && !lockFieldsForOnAccountTransactionsByContract);
        }

        if (ProjOnAccTrans.projInvoiceStatus() == projInvoiceStatus::FullyInvoiced ||
              ProjOnAccTrans.projInvoiceStatus() == ProjInvoiceStatus::FullyInvoicedWithOnhold)
        {
            projOnAccTransTaxExtensionIN_ds.allowEdit(false);
        }
        
        if (projTable.wipProject)
        {
			ProjOnAccTransSale  projOnAccTransSaleLocal;
            select firstonly projOnAccTransSaleLocal
                where ((projOnAccTransSaleLocal.TransId == projOnAccTrans.TransId) &&
                    ((projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Estimated) ||
                        (projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Eliminated)));

            if (projOnAccTransSaleLocal)
            {
                projOnAccTransTaxExtensionIN_ds.allowEdit(false);   
			}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccess</Name>
				<Source><![CDATA[
    void setAccess()
    {
        #SysSystemDefinedButtons
        
        ProjOnAccTransSale  projOnAccTransSaleLocal;
        ProjTable           projTable;

        projTable = ProjTable::find(projOnAccTrans.ProjID);

        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);
        boolean isProjectExternallyManaged = Project::isContractExternallyManaged(projInvoiceTable.ProjInvoiceProjId);
        boolean lockFieldsForOnAccountTransactionsByProjectLocal = cdsLockingOptionOnAccountTrans && isProjectExternallyManaged;
        
        if (projOnAccTrans.proposal() || (projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction && projOnAccTrans.PSARefRecId != 0))
        {
            projOnAccTrans_ds.allowEdit(false);
            projOnAccTrans_ds.allowDelete(false);
        }
        else
        {
            projOnAccTrans_ds.allowEdit(allowEdit && !lockFieldsForOnAccountTransactionsByProjectLocal && !lockFieldsForOnAccountTransactionsByContract);
            projOnAccTrans_ds.allowDelete(allowEdit && !lockFieldsForOnAccountTransactionsByProjectLocal && !lockFieldsForOnAccountTransactionsByContract);

            FormCommandButtonControl editButton = element.control(element.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
            editButton.enabled(projOnAccTrans_ds.allowEdit());
        }

        projOnAccTrans_ds.allowCreate(allowEdit);

        // TransactionOrigin and other fields should not be disabled if feature flag is turned on since there can be multiple contract lines associated with the project.
        if ((projTable.Type == ProjType::FixedPrice && !element.enableProjMultipleContractLinesForProjectFeature) ||
            (projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance &&
             (ProjOnAccTrans.projInvoiceStatus() == projInvoiceStatus::FullyInvoiced ||
              ProjOnAccTrans.projInvoiceStatus() == ProjInvoiceStatus::FullyInvoicedWithOnhold)))
        {
            if (projOnAccTrans.TransactionOrigin == ProjOrigin::ProgressBillingRule || projOnAccTrans.TransactionOrigin == ProjOrigin::UnitOfDeliveryBillingRule)
            {
                projOnAccTrans_ds.allowEdit(false);
                projOnAccTrans_ds.allowDelete(false);
            }
            else
            {
                transactionOrigin.allowEdit(false);
                descriptionGroup_TransactionOrigin.allowEdit(false);
                projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, TransactionOrigin)).allowEdit(false);
            }
        }
        else
        {
            transactionOrigin.allowEdit(true);
            descriptionGroup_TransactionOrigin.allowEdit(true);
            projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, TransactionOrigin)).allowEdit(true);
        }
        
        if (ProjInvoiceTable::isSalesCurrencyLocked(projTable.ProjInvoiceProjId))
        {
            projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, CurrencyId)).allowEdit(false);
            projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, CurrencyId)).skip(true);
        }
        else
        {
            projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, CurrencyId)).allowEdit(true);
            projOnAccTrans_ds.object(fieldNum(ProjOnAccTrans, CurrencyId)).skip(false);
        }

        if (projTable.wipProject)
        {
            select projOnAccTransSaleLocal
                where ((projOnAccTransSaleLocal.TransId == projOnAccTrans.TransId) &&
                    ((projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Estimated) ||
                        (projOnAccTransSaleLocal.TransStatus == ProjTransStatus::Eliminated)));

            if (projOnAccTransSaleLocal)
            {
                projOnAccTrans_ds.allowEdit(false);
                projOnAccTrans_ds.allowDelete(false);
            }
        }
        
        element.setAccessSale();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccessSale</Name>
				<Source><![CDATA[
    void setAccessSale()
    {
	    if (projOnAccTrans.proposal() || projOnAccTrans.PSAIsOnAccount == NoYes::Yes)
        {
            amountGrid.allowEdit(false);
            salesPrice_M_salesPrice.allowEdit(false);
        }
        else
        {
            amountGrid.allowEdit(allowEdit);
            salesPrice_M_salesPrice.allowEdit(allowEdit);
        }

        if (ProjTable::find(projOnAccTrans.ProjID).wipProject != '')
        {
            select firstonly RecId from projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId
                    && ((projOnAccTransSale.TransStatus == ProjTransStatus::Estimated)
                        || (projOnAccTransSale.TransStatus == ProjTransStatus::Eliminated));
            if (projOnAccTransSale.RecId != 0)
            {
                amountGrid.allowEdit(false);
                salesPrice_M_salesPrice.allowEdit(false);
                projOnAccTransSale_ds.allowDelete(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        ProjOnAccTrans projOnAccTransSelected;
        ProjOnAccTransSale projOnAccTransSaleCheck;
        boolean projReverseTransEnabled;
        boolean projAdjTraceEnabled;
        ProjOnAccTrans childProjOnAccTrans;
        boolean isDeductionTransFound;

        for (projOnAccTransSelected = projOnAccTrans_ds.getFirst(true)
            ? projOnAccTrans_ds.getFirst(true)
            : projOnAccTrans_ds.cursor(); projOnAccTransSelected; projOnAccTransSelected = projOnAccTrans_ds.getNext())
        {
            if (projOnAccTransSelected.TransactionOrigin == ProjOrigin::Deduction)
            {
                isDeductionTransFound = true;
            }

            while select projOnAccTransSaleCheck
                where projOnAccTransSaleCheck.TransId == projOnAccTransSelected.TransId
            {
                if (!projReverseTransEnabled)
                {
                    projReverseTransEnabled = projOnAccTransSaleCheck.canBeMarkedForCreditNote();
                }
            }

            if (!projAdjTraceEnabled)
            {
                projAdjTraceEnabled = projOnAccTransSelected.AdjRefTransId ? true : false;
                if (! projAdjTraceEnabled)
                {
                    select firstonly RecId from childProjOnAccTrans
                        where childProjOnAccTrans.AdjRefTransId == projOnAccTransSelected.TransId;

                    projAdjTraceEnabled = childProjOnAccTrans.RecId ? true : false;
                }
            }
        }

        projReverseTrans.enabled(projReverseTransEnabled && !isDeductionTransFound);
        transAdjustmentTrace.enabled(projAdjTraceEnabled);

        projOnAccTransSelected = projOnAccTrans_ds.cursor();
        boolean allowSplitTransaction = ProjSplitTransaction::canSplitTransaction(projOnAccTransSelected);
        SplitTransaction.enabled(allowSplitTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinkCriteria</Name>
				<Source><![CDATA[
    void setLinkCriteria()
    {
        #define.star('*')
        ProjTable           projTable;
        ProjWIPTable        projWIPTable;

        switch (element.args().dataset())
        {
            case (tableNum(ProjTable)):
                projTable   = element.args().record();
                projId      = projTable.ProjId;
                criteriaProjId.value(projId + #star);

                break;

            case (tableNum(ProjWIPTable)):
                projWIPTable = element.args().record();
                criteriaWIPProjId.value(projWIPTable.ProjId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAmount</Name>
				<Source><![CDATA[
    void setPriceAmount()
    {
        if (element.args().dataset() == tableNum(TmpProjStatistic) ||
            element.args().dataset() == tableNum(PSATmpProjFinancialStatistic))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else if (element.args().dataset() == tableNum(TmpProjCashFlow))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else
        {
            priceAmount.selection(ProjParameters::find().DisplayPriceAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdEnabled_IN</Name>
				<Source><![CDATA[
    void setTaxWithholdEnabled_IN()
    {
        projOnAccTransTaxExtensionIN_ds.object(fieldNum(ProjOnAccTransTaxExtensionIN, tdsGroup)).enabled(!projOnAccTransTaxExtensionIN.tcsGroup);
        projOnAccTransTaxExtensionIN_ds.object(fieldNum(ProjOnAccTransTaxExtensionIN, tcsGroup)).enabled(!projOnAccTransTaxExtensionIN.tdsGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdVisible_IN</Name>
				<Source><![CDATA[
    void setTaxWithholdVisible_IN()
    {
        TaxWithholdParameters_IN    taxWithholdParameters;

        taxWithholdParameters = TaxWithholdParameters_IN::find();
        projOnAccTransTaxExtensionIN_ds.object(fieldNum(ProjOnAccTransTaxExtensionIN, tdsGroup)).visible(taxWithholdParameters.tdsActivate);
        projOnAccTransTaxExtensionIN_ds.object(fieldNum(ProjOnAccTransTaxExtensionIN, tcsGroup)).visible(taxWithholdParameters.tcsActivate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdAllowEdit_IN</Name>
				<Source><![CDATA[
    private void setTaxWithholdAllowEdit_IN()
    {
        if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance())
            && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
            && (projOnAccTrans.TransactionOrigin == ProjOrigin::Milestone
                || projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment)
            && ProjOnAccTrans.projInvoiceStatus() != ProjInvoiceStatus::FullyInvoiced)
        {
            projOnAccTransTaxExtensionIN_ds.allowEdit(true);
            AssessableValue_IN.allowEdit(false);
            MaxRetainPrice_IN.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible</Name>
				<Source><![CDATA[
    void setVisible()
    {
        switch (priceAmount.selection())
        {
            case PriceAmount::Price:
                amountGrid.visible(true);
                currencyIdGrid.visible(true);
                salesAmountGrid.visible(false);
                break;

            case PriceAmount::LedgerUpdate:
                amountGrid.visible(false);
                currencyIdGrid.visible(false);
                salesAmountGrid.visible(true);
                break;

            case PriceAmount::LineAmount:
                amountGrid.visible(true);
                currencyIdGrid.visible(true);
                salesAmountGrid.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTaxInformation_IN</Name>
				<Source><![CDATA[
    public void setVisibleTaxInformation_IN()
    {
        withholdingTax_IN.visible(isIndiaWHTMarked);
        assessableValue_IN.visible(isIndiaIndirectTaxParameterMarked);
        maxRetainPrice_IN.visible(isIndiaIndirectTaxParameterMarked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjId</Name>
				<Source><![CDATA[
    private void lookupProjId(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _lookupCtrl);
        queryBuildDataSource = query.addDataSource(tableNum(ProjTable));

        if (cdsLockingOptionOnAccountTrans)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjTable, ProjDataSource));
            queryBuildRange.value(SysQuery::value(0));
        }

        sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateProjectExternallyManaged(ProjId _projId)
    {
        boolean ret = true;

        if (cdsLockingOptionOnAccountTrans)
        {
            if (Project::isProjectExternallyManaged(_projId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSOnAccountTransactions"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjIdByProjInvoiceProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Project lookup constrained by contract id and project type.
    /// </summary>
    /// <param name="_LookupCtrl">
    ///     Handle for the lookup control.
    /// </param>
    /// <param name="_ProjInvProjId">
    ///     Contract ID.
    /// </param>
    private void lookupProjIdByProjInvoiceProjId(FormStringControl _LookupCtrl, ProjInvoiceProjId _ProjInvProjId)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _LookupCtrl);

        queryBuildDataSource = query.addDataSource(tableNum(ProjTable));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
        queryBuildRange.value(queryValue(_ProjInvProjId));

        if (cdsLockingOptionOnAccountTrans)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjTable, ProjDataSource));
            queryBuildRange.value(SysQuery::value(0));
        }

        sysTableLookup.addLookupfield(fieldNum(ProjTable, ProjId));
        sysTableLookup.addLookupfield(fieldNum(ProjTable, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (this.args().parmEnumType() == enumNum(IsSplitTransaction))
        {
            // Setup and open trace group
            if (this.args().parmEnum() == NoYes::Yes)
            {
                TransAdjustmentTrace.clicked();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjOnAccTrans</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            amountGrid.allowEdit(allowEdit);
            salesPrice_M_salesPrice.allowEdit(allowEdit);
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateSalesPriceCache</Name>
						<Source><![CDATA[
        void updateSalesPriceCache(ProjOnAccTransId _projTransId, SalesPrice _amount)
        {
            if (salesPriceCache.exists(_projTransId))
            {
                salesPriceCache.remove(_projTransId);
            }

            salesPriceCache.insert(_projTransId, _amount);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ProjOnAccTransSale  updProjOnAccTransSale;
            // Don't save change to transacts which are partially or fully invoiced or transacts which has invoice proposal.
            if (ProjOnAccTrans.projInvoiceStatus() == ProjInvoiceStatus::FullyInvoiced ||
                ProjOnAccTrans.projInvoiceStatus() == ProjInvoiceStatus::PartiallyInvoiced ||
                ProjOnAccTrans.Proposal())
            {
                return;
            }

            super();

            ttsbegin;

            // Deleting and creating a projOnAccTransSale record will change the value of ProjOnAccTrans.TotalSalesAmountCur.
            // Using the context to skip updating the assessable value caused by this change.
            using(var skipUpdateAVContext = TaxSkipUpdateAssessableValueOfOnAccTransContext::getInstance())
            {
                if (projOnAccTrans.RecId)
                {
                    delete_from updProjOnAccTransSale
                        where updProjOnAccTransSale.TransId == projOnAccTrans.TransId;
                }

                if (salesPriceCache.exists(projOnAccTrans.TransId))
                {
                    ProjOnAccTrans::createOnAccTrans(projOnAccTrans, salesPriceCache.lookup(projOnAccTrans.TransId));
                }
                else
                {
                    throw error('@KB_4457494:CannotCreateNewRecords');
                }
            }

            ttscommit;

            this.updateSalesPriceCache(projOnAccTrans.TransId, projOnAccTrans.salesPrice());
            projOnAccTransSale_ds.executeQuery();
            projOnAccTrans_ds.reread();
            projOnAccTrans_ds.refresh();

            // <GIN>
            if (isProjOnAccTrans_INEnabled)
            {
                projOnAccTransTaxExtensionIN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(projOnAccTrans);
                ProjOnAccTransTaxExtensionIN_ds.reread();
            }
            // </GIN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSalesPrice</Name>
						<Source><![CDATA[
        edit SalesPrice editSalesPrice(boolean _set, ProjOnAccTrans _projOnAccTrans, SalesPrice _amount)
        {
            return this.getSalesPrice(_set, _projOnAccTrans, _amount);                          
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSalesPrice_general</Name>
						<Source><![CDATA[
        edit SalesPrice editSalesPrice_general(boolean _set, ProjOnAccTrans _projOnAccTrans, SalesPrice _amount)
        {
            return this.getSalesPrice(_set, _projOnAccTrans, _amount);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getSalesPrice</Name>
						<Source><![CDATA[
        private SalesPrice getSalesPrice(boolean _set, ProjOnAccTrans _projOnAccTrans, SalesPrice _amount)
        {
            if (_set)
            {
                this.updateSalesPriceCache(_projOnAccTrans.TransId, _amount);

                // When ONLY an unbound column is modified, leaveRecord method does not call write method.
                // since Sales Price is using an edit method(an unbound column), we need to call the DS write explicitly whenever value is modified
                projOnAccTrans_ds.forceWrite(NoYes::Yes);
            }
            else
            {
                if (!salesPriceCache.exists(_projOnAccTrans.TransId))
                {
                    this.updateSalesPriceCache(_projOnAccTrans.TransId, _projOnAccTrans.salesPrice());
                }
            }

            return salesPriceCache.lookup(_projOnAccTrans.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
            {
                ret = ret & checkFailed("@SYS136588");
            }

            if (ret)
            {
                // validate externally managed projects due to defaulting logic if form is opened from projTable datasource
                ret = element.validateProjectExternallyManaged(projOnAccTrans.ProjID);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            switch (selectInvoiceStatus.selection())
            {
                case projSelectTrans::All:
                    qb_projOnAccTransSale1.enabled(false);
                    qb_projOnAccTransSale2.enabled(false);
                    break;

                case projSelectTrans::Invoiced:
                    qb_projOnAccTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2,%3,%4,%5",
                                              queryValue(ProjTransStatus::Invoiced),
                                              queryValue(ProjTransStatus::MarkedCreditnote),
                                              queryValue(ProjTransStatus::Estimated),
                                              queryValue(ProjTransStatus::Eliminated),
                                              queryValue(ProjTransStatus::CreditnoteProposal)));

                    qb_projOnAccTransSale2.enabled(true);
                    qb_projOnAccTransSale2.joinMode(JoinMode::NoExistsJoin);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Registered));
                    break;

                case projSelectTrans::PartiallyInvoiced:
                    qb_projOnAccTransSale1.enabled(true);
                    //Invoiced
                    criteriaTransStatus1.value(strFmt("%1,%2,%3,%4,%5",
                                              queryValue(ProjTransStatus::Invoiced),
                                              queryValue(ProjTransStatus::MarkedCreditnote),
                                              queryValue(ProjTransStatus::Estimated),
                                              queryValue(ProjTransStatus::Eliminated),
                                              queryValue(ProjTransStatus::CreditnoteProposal)));
                    
                    // Not Invoiced or adjusted
                    qb_projOnAccTransSale2.joinMode(JoinMode::ExistsJoin);
                    qb_projOnAccTransSale2.enabled(true);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Registered));
                    break;
 
                case projSelectTrans::Adjusted:
                    qb_projOnAccTransSale1.enabled(true);
                    criteriaTransStatus1.value(queryValue(ProjTransStatus::Adjusted));

                    qb_projOnAccTransSale2.enabled(false);
                    break;

                case projSelectTrans::ToBeInvoiced:
                    qb_projOnAccTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2",
                                              queryValue(ProjTransStatus::Registered),
                                              queryValue(ProjTransStatus::InvoiceProposal)));

                    qb_projOnAccTransSale2.enabled(false);
                    break;

                case projSelectTrans::NoChargeable:
                    qb_projOnAccTransSale1.enabled(true);
                    qb_projOnAccTransSale2.enabled(false);
                    break;
            }

            if (linkInvoiceControl)
            {
                element.linkInvoiceControl();
            }

            if (linkProjstatistic)
            {
                element.linkProjStatistic();
            }

            if (m_bLinkProjFinancialStatisitc)
            {
                element.PSALinkProjFinancialStatistic();
            }

            if (linkProjCashFlow)
            {
                element.linkProjCashFlow();
            }

            if (transId)
            {
                criteriaTransId.value(transId);
            }

            if (isIncludeDeductionsFeatureEnabled || element.args().dataset() != tableNum(ProjOnAccTrans))
            {
                if (psaShowOffset.value())
                {
                    m_oqbrOffset.value(SysQuery::valueUnlimited());
                }
                else
                {
                    m_oqbrOffset.value(SysQuery::valueNot(ProjOrigin::Deduction));
                }
            }

            super();

            element.setButtonAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            element.setButtonAccess();

            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                element.setAccess();
            }
            else
            {
                element.setAccessForCEIntegration();
            }
            // <GIN>
            if (isIndiaWHTMarked)
            {
                element.setTaxWithholdEnabled_IN();
            }
            if (isIndiaIndirectTaxParameterMarked)
            {
                element.setAccessForTaxExtensionIN();
                element.setTaxWithholdAllowEdit_IN();
            }
            // <GIN>

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query                       q = new Query();
            ProjInvoiceTable            projInvoiceTable;
            QueryBuildDataSource        qb_projTable,qbDim,qb_ProjTransPosting;
            PSATmpProjInvoiceSummary    tSummary;

            super();

            switch (element.args().dataset())
            {
                case (tableNum(ProjInvoiceTable)):

                    projInvoiceTable = element.args().record();

                    qb_projOnAccTrans     = q.addDataSource(tableNum(ProjOnAccTrans));
                    qb_projOnAccTrans.name(projOnAccTrans_ds.name());

                    qbDim = qb_projOnAccTrans.addDataSource(tableNum(ProjTable));
                    qbDim.addLink(fieldNum(ProjOnAccTrans,ProjID), fieldNum(ProjTable,ProjId));
                    qbDim.joinMode(JoinMode::InnerJoin);
                    q.dataSourceTable(tableNum(ProjTable)).addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(projInvoiceTable.ProjInvoiceProjId);
                    break;

                default:

                    qb_projOnAccTrans       = q.addDataSource(tableNum(ProjOnAccTrans));

                    criteriaTransDate       = qb_projOnAccTrans.addRange(fieldNum(ProjOnAccTrans, TransDate));
                    criteriaTransId         = qb_projOnAccTrans.addRange(fieldNum(ProjOnAccTrans, TransId));
                    criteriaSalesCurrency   = qb_projOnAccTrans.addRange(fieldNum(ProjOnAccTrans, CurrencyId));

                    qb_projTable            = qb_projOnAccTrans.addDataSource(tableNum(ProjTable));
                    qb_projTable.addLink(fieldNum(ProjForecastOnAcc, ProjId), fieldNum(ProjTable, ProjId));
                    qb_projTable.fetchMode(0);
                    qb_projTable.joinMode(JoinMode::ExistsJoin);
                    qb_projTable.relations(true);

                    criteriaProjInvoiceProjId   = qb_projTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
                    criteriaProjId              = qb_projTable.addRange(fieldNum(ProjTable, ProjId));
                    criteriaWIPProjId           = qb_projTable.addRange(fieldNum(ProjTable, wipProject));

                    if (!element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        criteriaFixedPrice          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                        criteriaTimeMaterial        = qb_projTable.addRange(fieldNum(ProjTable, Type));
                        criteriaInternal            = qb_projTable.addRange(fieldNum(ProjTable, Type));
                        criteriaCost                = qb_projTable.addRange(fieldNum(ProjTable, Type));
                        criteriaInvestment          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                    }
                    criteriaSorting1            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 1);
                    criteriaSorting2            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 2);
                    criteriaSorting3            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 3);
                    criteriaGroupId             = qb_projTable.addRange(fieldNum(ProjTable, ProjGroupId));
                    criteriaCustAccount         = qb_projTable.addRange(fieldNum(ProjTable, CustAccount));
                    break;
            }

            if (element.args().dataset() == tablenum(TmpProjStatistic))
            {
                if (projStatisticLedger.parmLedgerFromDate() || projStatisticLedger.parmLedgerToDate())
                {
                    qb_ProjTransPosting = qb_projOnAccTrans.addDataSource(tablenum(ProjTransPosting));
                    qb_ProjTransPosting.addLink(fieldnum(ProjOnAccTrans,TransId), fieldnum(ProjTransPosting, TransId));
                    qb_ProjTransPosting.joinMode(JoinMode::ExistsJoin);

                    criteriaLedgerTransDate = qb_ProjTransPosting.addRange(fieldnum(ProjTransPosting,LedgerTransDate));
                }
            }

            qb_projOnAccTransSale1 = qb_projOnAccTrans.addDataSource(tableNum(ProjOnAccTransSale));
            qb_projOnAccTransSale1.relations(true);
            qb_projOnAccTransSale1.joinMode(JoinMode::ExistsJoin);
            criteriaTransStatus1 = qb_projOnAccTransSale1.addRange(fieldNum(ProjOnAccTransSale, TransStatus));

            qb_projOnAccTransSale2 = qb_projOnAccTrans.addDataSource(tableNum(ProjOnAccTransSale));
            qb_projOnAccTransSale2.relations(true);
            qb_projOnAccTransSale2.joinMode(JoinMode::ExistsJoin);
            criteriaTransStatus2 = qb_projOnAccTransSale2.addRange(fieldNum(ProjOnAccTransSale, TransStatus));

            if (element.args().dataset() == tableNum(PSATmpProjInvoiceSummary))
            {
                tSummary = element.args().record();
                qb_projOnAccTrans.addRange(fieldNum(ProjOnAccTrans,ProjID)).value(tSummary.ProjId);
            }

            qb_projOnAccTrans.addSortField(fieldNum(ProjOnAccTrans, TransDate));
            m_oqbrOffset = qb_projOnAccTrans.addRange(fieldNum(ProjOnAccTrans, TransactionOrigin));

            if (isProjOnAccTrans_INEnabled)
            {
                QueryBuildDataSource qb_projonAccTransTaxExtensionIN = qb_projOnAccTrans.addDataSource(tableNum(ProjOnAccTransTaxExtensionIN));
                qb_projonAccTransTaxExtensionIN.name(ProjOnAccTransTaxExtensionIN_ds.name());
                qb_projonAccTransTaxExtensionIN.relations(true);
                qb_projonAccTransTaxExtensionIN.joinMode(JoinMode::OuterJoin);                
            }

            this.query(q);
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            switch (element.args().dataset())
            {
                case(tableNum(TmpProjStatistic)):
                    // linkActive called again .criteria changed... close form
                    if (projStatistic)
                    {
                        element.close();
                    }

                    allowEdit           = false;
                    projStatistic       = element.args().parmObject();
                    linkProjstatistic   = true;
                    break;

                case tableNum(PSATmpProjFinancialStatistic):
                    projStatistic = element.args().parmObject();
                    m_bLinkProjFinancialStatisitc =  true;
                    break;

                case(tableNum(TmpProjCashFlow)):
                    // linkActive called again .criteria changed... close form
                    if (projCashFlow)
                    {
                        element.close();
                    }
                    allowEdit           = false;
                    projCashFlow        = element.args().parmObject();
                    linkProjCashFlow   = true;

                    break;

                case(tableNum(TmpProjInvoiceControl)):
                    // linkActive called again .criteria changed... close form
                    if (projInvoiceControl)
                    {
                        element.close();
                    }

                    projInvoiceControl  = element.args().parmObject();
                    projId              = projInvoiceControl.parmProjId();

                    linkInvoiceControl  = true;
                    break;
            }

            element.setLinkCriteria();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesAmount</Name>
						<Source><![CDATA[
        display AmountCur salesAmount(ProjOnAccTrans _projOnAccTrans)
        {
            if (! salesAmountCache.exists(_projOnAccTrans.TransId))
            {
                salesAmountCache.insert(_projOnAccTrans.TransId, _projOnAccTrans.salesAmount(_projOnAccTrans,ledgerFromDate,ledgerToDate));
            }

            return salesAmountCache.lookup(_projOnAccTrans.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>cursorNotify</Name>
						<Source><![CDATA[
        public void cursorNotify(int _event)
        {
            ProjOnAccTrans        projOnAccTransCache;
            Set                   setTransCache;
            container             sumAmountDisplayCache;

            super(_event);

            if (priceAmount.selection() == PriceAmount::LedgerUpdate)
            {
                if (_event == 0 || _event == 1)
                {
                    projOnAccTransCache = projOnAccTrans_DS.getFirst(0,false);
                    while (projOnAccTransCache)
                    {
                        if (! salesAmountCache.exists(projOnAccTransCache.TransId))
                        {
                            if (! setTransCache)
                            {
                                setTransCache = new Set(Types::String);
                            }
                            setTransCache.add(projOnAccTransCache.TransId);
                        }

                        projOnAccTransCache = projOnAccTrans_DS.getNext();
                    }

                    if (setTransCache)
                    {
                        sumAmountDisplayCache = ProjOnAccTrans::sumAmountDisplayCache(setTransCache.pack(),
                                                                                             salesAmountCache.pack(),
                                                                                             ledgerFromDate,
                                                                                             ledgerToDate);
                        if (sumAmountDisplayCache)
                        {
                            salesAmountCache = Map::create(sumAmountDisplayCache);
                        }
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            super();

            if (element.args().dataset() == tableNum(ProjWIPTable))
            {
                projOnAccTrans.TransactionOrigin = ProjOrigin::Milestone;
            }
            else
            {
                projOnAccTrans.initFromProjTable(projId);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteMarked</Name>
						<Source><![CDATA[
        public void deleteMarked()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CategoryId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ProjCategory::lookupProjCategoryType(_formControl, ProjCategoryType::OnAccount, NoYes::No, NoYes::No, NoYes::No, NoYes::No, NoYes::No);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjID</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                element.lookupProjId(_formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxServiceCodeId_BR</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxServiceCode_BR::lookup(_formControl, false, '','','');
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>ProjOnAccTransSale</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            projOnAccTrans_ds.updateSalesPriceCache(projOnAccTrans.TransId, projOnAccTrans.salesPrice());
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            projOnAccTrans_ds.updateSalesPriceCache(projOnAccTrans.TransId, projOnAccTrans.salesPrice());
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            projOnAccTransSale.initFromProjOnAccTrans(projOnAccTrans);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TaxServiceTariff</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && (!taxServiceTariff.ParentRecId || !taxServiceTariff.ParentTableId))
            {
                // Write can cause the child data source to lose it's foreign key values so restore them.
                taxServiceTariff.ParentRecId = projOnAccTrans.RecId;
                taxServiceTariff.ParentTableId = projOnAccTrans.TableId;
                taxServiceTariff_ds.refresh();
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjOnAccTransTaxExtensionIN</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (isProjOnAccTrans_INEnabled && projOnAccTransTaxExtensionIN.ProjOnAccTrans != 0)
            {
                // no-op because a record with an empty FK is not valid
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (isProjOnAccTrans_INEnabled)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>TCSGroup</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                // <GIN>
                element.setTaxWithholdEnabled_IN();
                // </GIN>
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TCS);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TDSGroup</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                // <GIN>
                element.setTaxWithholdEnabled_IN();
                // </GIN>
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TDS);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TransAdjustmentTrace</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            adjustmentTraceTabPage.visible(true);
            adjustmentTraceTabPage.setFocus();

            traceTree.createTraceTree(projOnAccTrans.TransId);
            fieldList.text(traceTree.listofFields());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTransaction</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Update the record being displayed
            projOnAccTrans_ds.reread();
            projOnAccTrans_ds.rereadReferenceDataSources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriceAmount</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setVisible();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectInvoiceStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projOnAccTrans_ds.init();
            element.setLinkCriteria();
            projOnAccTrans_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PSAShowOffset</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            projOnAccTrans_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _FromTab, int _ToTab)
        {
            super(_fromTab, _toTab);

            if (_fromTab == 4)
            {
                adjustmentTraceTabPage.visible(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjOnAccTrans_ProjID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (contractId)
            {
                element.lookupProjIdByProjInvoiceProjId(this, contractId);
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
        
            ret = super();

            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjOnAccTrans_ContractLineNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            str contractLineNum = projOnAccTrans.PSAContractLineNum;
            if(contractLineNum != '')
            {
                ProjectOperationsDWHelper dwHelper = ProjectOperationsDWHelper::construct();
                dwHelper.openProjectContractLineDetailsInCE(contractLineNum, ProjOnAccTrans.DataAreaId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionOrigin</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        public void gotFocus()
        {
            super();
            this.delete(enum2str(ProjOriginOnAcc::ProgressBillingRule));
            this.delete(enum2str(ProjOriginOnAcc::UnitOfDeliveryBillingRule));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>amountGrid</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            
            // <GIN>
            if (isIndiaIndirectTaxParameterMarked)
            {
                ProjOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency = this.realValue() * ProjOnAccTrans.Qty;
            }
            // </GIN>

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PSAeditActivityPurpose</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            HierarchyTreeTable::lookupHierarchyTree(this, ProjTable::find(projOnAccTrans.ProjID), ProjParameters::find().BlockParentActivitySelection);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_ProjID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_ContractLineNum</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            str contractLineNum = projOnAccTrans.PSAContractLineNum;
            if(contractLineNum != '')
            {
                ProjectOperationsDWHelper dwHelper = ProjectOperationsDWHelper::construct();
                dwHelper.openProjectContractLineDetailsInCE(contractLineNum, ProjOnAccTrans.DataAreaId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesPrice_M_salesPrice</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            
            // <GIN>
            if (isIndiaIndirectTaxParameterMarked)
            {
                ProjOnAccTransTaxExtensionIN.AssessableValueTransactionCurrency = this.realValue() * ProjOnAccTrans.Qty;
            }
            // </GIN>

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>System_M_proposalId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjProposalJour::jumpRefProposal(projOnAccTrans.proposalId(),projOnAccTrans.TransId,ProjTransType::OnAccount);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>System_M_invoiceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjInvoiceJour::jumpRefInvoice(projOnAccTrans.TransId,ProjTransType::OnAccount);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TabFinancialDimensions</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            tabFinancialDimensions.allowEdit(!projOnAccTrans.proposal());
            tabFinancialDimensions.skip(!projOnAccTrans.proposal());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FundingSourceSale</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Project::jumpRefFundingSource(projOnAccTransSale.FundingSource, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoToTransaction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjTransOnAcc));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTree</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjAdjTreeCreateVisualization));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            if (formRun.closedOk())
            {
                adjustmentTraceTabPage.visible(true);
                adjustmentTraceTabPage.setFocus();

                traceTree.createTraceTree(projOnAccTrans.TransId);
                fieldList.text(traceTree.listofFields());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            selectionTransId = ctrlTree.getItem(_newItem.idx()).data();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjOnAccTrans</Name>
			<Table>ProjOnAccTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjRefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMilestoneComplete</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAContractLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAIsOnAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjProgressInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefRecIdBudgetTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARefTableIdBudgetTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxServiceCodeId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransIdRef</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjOnAccTransSale</Name>
			<Table>ProjOnAccTransSale</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjProposalId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAsPerOriginalInvoice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPPeriod</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjOnAccTrans</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxServiceTariff</Name>
			<Table>TaxServiceTariff</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceTariffNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjOnAccTrans</JoinSource>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjOnAccTransTaxExtensionIN</Name>
			<Table>ProjOnAccTransTaxExtensionIN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssessableValueTransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_AssessableValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CompanyLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsTariffCodeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_DirectSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseRecordType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseTariffCodes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SalesTaxFormTypes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ServiceCodeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxInventVATCommodityCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjOnAccTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSGroup</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>ProjOnAccTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS7659</Caption>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<TitleDataSource xmlns="">ProjOnAccTrans</TitleDataSource>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl1</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjInvoiceLine</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>ProjInvoiceLine</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>TransAdjustmentTrace</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS133198</Text>
							</AxFormControl>
						</Controls>
						<Caption>@SYS3850</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>FormButtonGroupControl2</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjReverseTrans</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>ProjReverseTrans</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SplitTransaction</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjOnAccTrans</DataSource>
								<MenuItemName>ProjSplitTransaction</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<Caption>@SYS10340</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Project</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransPosting</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>MenuItemButton</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjLedgerTransVoucher</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransTaxInformation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjOnAccTrans</DataSource>
								<MenuItemName>TransTaxInformation</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl1</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>ProjectOnAccount_TransDate</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DisplayGroup</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PriceAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>PriceAmount</EnumType>
								<Label>@SYS90428</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SelectInvoiceStatus</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjSelectTransOnAcc</EnumType>
								<Label>@SYS50275</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>PSAShowOffset</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:ShowDeductions</Label>
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LedgerDates</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateFrom</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesFrom</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateTo</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesTo</Label>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjectOnAccount_TransDate</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjTransOnAcc_ProjectOnAccount_TransDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjOnAccTrans_ProjID</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjID</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjOnAccTrans_Category</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjOnAccTrans_ContractLineNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>Project</ConfigurationKey>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSAContractLineNum</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TransactionOrigin</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editTransactionOrigin</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectOnAccount_Description</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrencyIdGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>amountGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSalesPrice</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PSAeditActivityPurpose</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>PSAeditActivityPurpose</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<Label>@SYS38381</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>salesAmountGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesAmount</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<DisplayLength>12</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@SYS2835</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjInvoiceStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2028178999</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>projInvoiceStatus</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1476395006</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_TransDate</Name>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjTransOnAcc_Identification_TransDate</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjID</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjID</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ContractLineNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>Project</ConfigurationKey>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSAContractLineNum</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
										<Label>@Proj:ContractLineId</Label>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DescriptionGroup_TransId</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DescriptionGroup_Description</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DescriptionGroup_TransactionOrigin</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editTransactionOrigin</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>Transaction</Caption>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPrice</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesPrice_CurrencyId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_M_salesPrice</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSalesPrice_general</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS5755</Caption>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>VatRegistration</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ServiceTariffNumber</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ServiceTariffNumber_ServiceTariffId_PL</Name>
												<DataRelationPath>ServiceTariffNumber_PL</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>TaxServiceTariff</DataSource>
										<Label>@GLS115893</Label>
										<ReferenceField>ServiceTariffNumber</ReferenceField>
										<ReplacementFieldGroup>ServiceTariffId</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataSource>TaxServiceTariff</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesTax</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesTax_TaxGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesTax_TaxItemGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesTax_TaxServiceCodeId_BR</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxServiceCodeId_BR</DataField>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Invoice</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>System_M_proposalId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>proposalId</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>System_M_invoiceId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>invoiceId</DataMethod>
										<DataSource>ProjOnAccTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Invoice</DataGroup>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WithholdingTax_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1825361098</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TDSGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TDSGroup</DataField>
										<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WithholdingTax_IN_TCSGroup</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TCSGroup</DataField>
										<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>WithholdingTax</DataGroup>
								<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WithholdingTax_BR</Name>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>WithholdingTax_BR_TaxWithholdItemGroupHeading_TH</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WithholdingTax_BR_TaxWithholdItemGroupHeading_TH_TaxWithholdItemGroup</Name>
												<DataRelationPath>TaxWithholdItemGroupHeading_TH</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjOnAccTrans</DataSource>
										<ReferenceField>TaxWithholdItemGroupHeading_TH</ReferenceField>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>WithholdingTax_BR</DataGroup>
								<DataSource>ProjOnAccTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AssessableValue_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1932735280</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjOnAccTransTaxExtensionIN_AssessableValue</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AssessableValueTransactionCurrency</DataField>
										<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5298</Caption>
								<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MaxRetainPrice_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>2040109462</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjOnAccTransTaxExtensionIN_MaximumRetailPrice</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>MaximumRetailPrice</DataField>
										<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5296</Caption>
								<DataSource>ProjOnAccTransTaxExtensionIN</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjOnAccTrans</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Sale</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SaleGrid</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjOnAccTransSale_LedgerTransdate</Name>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerTransdate</DataField>
										<DataSource>ProjOnAccTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjOnAccTransSale_Amount</Name>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>ProjOnAccTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjOnAccTransSale_LedgerSalesAmount</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerSalesAmount</DataField>
										<DataSource>ProjOnAccTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjOnAccTransSale_TransStatus</Name>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>ProjOnAccTransSale</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>FundingSourceSale</Name>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FundingSourceSale_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjOnAccTransSale</DataSource>
										<ReferenceField>FundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjOnAccTransSale_WIPPeriod</Name>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WIPPeriod</DataField>
										<DataSource>ProjOnAccTransSale</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ProjOnAccTransSale</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS37101</Caption>
						<DataSource>ProjOnAccTransSale</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AdjustmentTraceTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane1</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<Type>ActionPaneTab</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup1</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>GoToTransaction</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133347</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SetupTree</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133492</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>ctrlTree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Tree</Type>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FieldGroup</Name>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FieldList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS133198</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>