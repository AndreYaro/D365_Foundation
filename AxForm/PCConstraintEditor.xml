<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PCConstraintEditor</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PCConstraintEditor extends FormRun
{
    PCProductConfigurationModel     model;
    PCPriceMethod                   priceMethod;
    PCConstraintEditorOpenPurpose   openPurpose;
    PCConstraintExpression          editableString;
    str                             selectedComponentXPath;
	PCClass                             selectedComponent;
    RefRecId                        recId;
    PCLanguageService               languageService;
    PCRuntimePriceModelInstance     runtimePriceModelInstance;

    PCLanguageServiceError          languageServiceError;
    PCExpressionStringHelper        helper;

    boolean                         textChangeEventDisabled;
    str                             symbolsFilteredBy;

    FieldId                         targetFieldId;
    Common                          record;

}
]]></Source>
			</Method>
			<Method>
				<Name>populateGrids</Name>
				<Source><![CDATA[
    public void populateGrids(PCExpressionSplitResultContract _splitResult)
    {
        languageService.populateSymbols(_splitResult.parmExpressionParseText(), this.isConstraint());
        languageServiceError = languageService.parmLanguageServiceError();

        if (languageServiceError)
        {
            ConstraintBody.error(languageServiceError);
        }
        else
        {
            ConstraintBody.error(languageServiceError);
        }

        this.updateControlSymbolsList(symbols);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        this.parmEditableString(constraintBody.text());
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        helper = PCExpressionStringHelper::construct();
        this.setMainInstruction(null);

        this.initializeLanguageService();
        if (constraintBody.text() != this.parmEditableString())
        {
            constraintBody.text(this.parmEditableString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFilteredDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a filtered data source from the main <c>Symbols</c> temporary table.
    /// </summary>
    /// <param name="_dataSource">
    /// The data source.
    /// </param>
    /// <param name="_symbolType">
    /// The symbol type to limit to.
    /// </param>
    public void initFilteredDataSource(FormDataSource _dataSource, PCExpressionEditorSymbolType _symbolType)
    {
        _dataSource.queryBuildDataSource().addRange(fieldNum(PCExpressionEditorSymbolTmp, SymbolType)).value(queryValue(_symbolType));
        _dataSource.cursor().setTmpData(symbols);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlSymbolsList</Name>
				<Source><![CDATA[
    private void updateControlSymbolsList(PCExpressionEditorSymbolTmp _symbols)
    {
        List symbolsList = new List(Types::Class);
        while select _symbols
        {
            var dto = new PCExpressionEditorSymbolContract();
            dto.parmSymbol(_symbols.Symbol);
            dto.parmSymbolType(enum2int(_symbols.SymbolType));
            dto.parmOrder(_symbols.Order);
            symbolsList.addEnd(dto);
        }

        var symbolsListContract = new PCExpressionEditorSymbolListContract();
        symbolsListContract.parmItems(symbolsList);
        ConstraintBody.symbols(symbolsListContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLanguageService</Name>
				<Source><![CDATA[
    private void initializeLanguageService()
    {
        languageService = PCLanguageService::newLanguageService(symbols, this.parmSelectedComponent().getXML(), this.parmSelectedComponentXPath());

        PCExpressionSplitResultContract contract = new PCExpressionSplitResultContract();
        this.populateGrids(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConstraint</Name>
				<Source><![CDATA[
    public boolean isConstraint()
    {
        return  openPurpose == PCConstraintEditorOpenPurpose::EnterExpression ||
                (openPurpose == PCConstraintEditorOpenPurpose::EnterCondition && priceMethod != PCPriceMethod::Attribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditableString</Name>
				<Source><![CDATA[
    public str parmEditableString(str _editableString = editableString)
    {
        editableString = _editableString;

        return editableString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModel</Name>
				<Source><![CDATA[
    public PCProductConfigurationModel parmModel(PCProductConfigurationModel _model = model)
    {
        model = _model;

        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpenPurpose</Name>
				<Source><![CDATA[
    public PCConstraintEditorOpenPurpose parmOpenPurpose(PCConstraintEditorOpenPurpose _openPurpose = openPurpose)
    {
        openPurpose = _openPurpose;

        return openPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceMethod</Name>
				<Source><![CDATA[
    public PCPriceMethod parmPriceMethod(PCPriceMethod _priceMethod = priceMethod)
    {
        priceMethod = _priceMethod;

        return priceMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRecId(RefRecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord</Name>
				<Source><![CDATA[
    public Common parmRecord(Common _record = record)
    {
        record = _record;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimePriceModelInstance</Name>
				<Source><![CDATA[
    public PCRuntimePriceModelInstance parmRuntimePriceModelInstance(PCRuntimePriceModelInstance _runtimePriceModelInstance = runtimePriceModelInstance)
    {
        runtimePriceModelInstance = _runtimePriceModelInstance;

        return runtimePriceModelInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedComponentXPath</Name>
				<Source><![CDATA[
    public str parmSelectedComponentXPath(str newValueSelectedComponentXPath = selectedComponentXPath)
    {
        selectedComponentXPath = newValueSelectedComponentXPath ;

        return selectedComponentXPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetFieldId</Name>
				<Source><![CDATA[
    public FieldId parmTargetFieldId(FieldId _targetFieldId = targetFieldId)
    {
        targetFieldId = _targetFieldId;

        return targetFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainInstruction</Name>
				<Source><![CDATA[
    private void setMainInstruction(Args _args)
    {
        str mainInstructionText;

        switch (openPurpose)
        {
            case PCConstraintEditorOpenPurpose::EnterMandatoryCondition:
                mainInstructionText = "@SYS310574";
                break;

            case PCConstraintEditorOpenPurpose::EnterCondition:
                mainInstructionText = "@SYS310575";
                break;

            case PCConstraintEditorOpenPurpose::EnterCalculation:
                mainInstructionText = "@SYS4004673";
                break;

            default:
                mainInstructionText = "@SYS310573";
                break;
        }

        this.design().caption(mainInstructionText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the expression in the editor.
    /// </summary>
    /// <remarks>
    /// The validate method must know relevant parts of the context of the expression to validate.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An unknown context was encountered
    /// </exception>
    public void Validate()
    {
        PCRuntimeConfiguratorValidate runtimeConfiguratorValidate = PCRuntimeConfiguratorValidate::construct();

        switch (openPurpose)
        {
            case PCConstraintEditorOpenPurpose::EnterCondition:
            case PCConstraintEditorOpenPurpose::EnterMandatoryCondition:
                if (priceMethod == PCPriceMethod::Attribute)
                {
                    runtimeConfiguratorValidate.validateModifiedPriceConditionInSub(model, selectedComponent, element.parmRecord(), element.parmTargetFieldId(), constraintBody.text(), element.parmRuntimePriceModelInstance());
                }
                else
                {
                    runtimeConfiguratorValidate.validateModifiedExpressionConditionInSub(model, selectedComponent, element.parmRecord(), element.parmTargetFieldId(), constraintBody.text());
                }
                break;
            case PCConstraintEditorOpenPurpose::EnterExpression:
                    runtimeConfiguratorValidate.validateModifiedExpressionConstraintSub(model, selectedComponent, element.parmRecord(), element.parmTargetFieldId(), constraintBody.text());

                break;
            case PCConstraintEditorOpenPurpose::EnterCalculation:
                if (priceMethod == PCPriceMethod::Attribute)
                {
                    runtimeConfiguratorValidate.validateModifiedPriceExpressionInSub(model, selectedComponent, element.parmRecord(), element.parmTargetFieldId(), constraintBody.text(), element.parmRuntimePriceModelInstance());
                }
                else
                {
                    runtimeConfiguratorValidate.validateModifiedCalculationInSub(model, selectedComponent, element.parmRecord(), element.parmTargetFieldId(), constraintBody.text());
                }
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedComponent</Name>
				<Source><![CDATA[
    public PCClass parmSelectedComponent(PCClass _selectedComponent = selectedComponent)
    {
        selectedComponent = _selectedComponent;

        return selectedComponent;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Validate</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.Validate();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConstraintBody</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>symbolChanged</Name>
						<Source><![CDATA[
        public void symbolChanged(PCExpressionSplitResultContract _result)
        {
            super(_result);
            element.populateGrids(_result);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>Symbols</Name>
			<Table>PCExpressionEditorSymbolTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Symbol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SymbolType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Order</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>OrderIndex</Index>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS301160</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup1</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<LeftMode>AutoLeft</LeftMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Validate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS301156</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<NormalImage>Accept</NormalImage>
										<Text>@SYS41362</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@SYS81043</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>1252698791</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>ConstraintBody</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>PCConstraintEditorControl</Name>
							<ExtensionComponents />
							<ExtensionProperties />
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
