<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjTransCost</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjTransCost extends FormRun
{
    QueryBuildDataSource        qb_projTable;
    QueryBuildDataSource        qb_ProjCategory;
    QueryBuildDataSource        qb_projCostTrans;
    QueryBuildDataSource        qb_projCostTransSale1;
    QueryBuildDataSource        qb_projCostTransSale2;
    QueryBuildDataSource        qb_ProjLineProperty;
    QueryBuildDataSource        qb_ProjService;
    QueryBuildDataSource        qb_ProjTransPostingView;
    QueryBuildDataSource        qb_ProjTransPosting;
    QueryBuildDataSource        qb_ProjGrantView;

    // <GIN>
    QueryBuildDataSource        qb_projCostTransTaxExtensionIN;
    // </GIN>
    // Range projTable
    QueryBuildRange             criteriaWIPProjId;
    QueryBuildRange             criteriaProjId;

    QueryBuildRange             criteriaTransStatus1;
    QueryBuildRange             criteriaTransStatus2;
    QueryBuildRange             criteriatoBeInvoiced;
    
    QueryBuildRange             criteriaProjInvoiceProjId;
    QueryBuildRange             criteriaFixedPrice;
    QueryBuildRange             criteriaTimeMaterial;
    QueryBuildRange             criteriaInternal;
    QueryBuildRange             criteriaCost;
    QueryBuildRange             criteriaInvestment;
    QueryBuildRange             criteriaTime;
    QueryBuildRange             criteriaSorting1;
    QueryBuildRange             criteriaSorting2;
    QueryBuildRange             criteriaSorting3;
    QueryBuildRange             criteriaGroupId;
    QueryBuildRange             criteriaCustAccount;
    QueryBuildRange             criteriaActivityId;

    // Range ProjGrantID
    QueryBuildRange             criteriaGrantID;

    //Range LedgerTransDate
    QueryBuildRange             criteriaLedgerTransDate;

    // Range projCategoryId
    QueryBuildRange             criteriaCategoryGroupId;

    // Range projCostTrans
    QueryBuildRange             criteriaResourceRecId;
    QueryBuildRange             criteriaTransDate;
    QueryBuildRange             criteriaCategoryId;
    QueryBuildRange             criteriaTransId;
    QueryBuildRange             criteriaRefId;
    QueryBuildRange             criteriaService;
    QueryBuildRange             criteriaSalesCurrency;

    [FormObservable]
    TransDate                   ledgerFromDate;
    [FormObservable]
    TransDate                   ledgerToDate;

    ProjStatistic               projStatistic;
    ProjInvoiceControl          projInvoiceControl;
    ProjCashFlow                projCashFlow;
    ProjCostControl             projCostControl;

    boolean                     linkInvoiceControl;
    boolean                     linkProjStatistic;
    boolean                     linkProjCashFlow;
    boolean                     linkProjCostControl;
    boolean                     linkProjService;
    boolean                     rangeLedgerTransDate;

    boolean                     m_bLinkProjFinancialStatisitc;

    Map                         salesAmountCache;
    Map                         costAmountCache;

    ProjTransIdBase             transId;
    ProjTransIdBase             refTransid;

    boolean                     rangeCategoryGroup;

    Object                      callerForm;
    boolean                     isCallerForm;

    ProjCreateAdjTraceTree      traceTree;
    ProjTransIdBase             selectionTransId;

    boolean     isIndiaIndirectTaxParameterMarked;
    boolean     isProjCostTrans_INEnabled;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

    #define.star('*')
    #ISOCountryRegionCodes

}
]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    void bookRefresh()
    {
        projCostTrans_ds.refresh();
        projCostTrans_ds.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    Query buildQuery()
    {
        Query q = new Query();
        PSATmpProjInvoiceSummary    tSummary;

        qb_projCostTrans    = q.addDataSource(tableNum(ProjCostTrans));

        if (callerForm && isCallerForm && callerForm.name() == formStr(ProjTransCost))
        {
            criteriaTransId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, TransId));
            return q;
        }

        criteriaResourceRecId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, Resource));
        criteriaTransDate = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, TransDate));
        criteriaCategoryId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, CategoryId));
        criteriaTransId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, TransId));
        criteriaRefId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, TransIdRef));
        criteriaSalesCurrency = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, CurrencyId));
        criteriaActivityId = qb_projCostTrans.addRange(fieldNum(ProjCostTrans, ActivityNumber));

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            qb_projCostTransTaxExtensionIN = qb_projCostTrans.addDataSource(tableNum(ProjCostTransTaxExtensionIN));
            qb_projCostTransTaxExtensionIN.joinMode(JoinMode::OuterJoin);
            qb_projCostTransTaxExtensionIN.relations(true);
        }
        // </GIN>

        qb_projCostTransSale1 = qb_projCostTrans.addDataSource(tableNum(ProjCostTransSale));
        qb_projCostTransSale1.relations(true);
        qb_projCostTransSale1.joinMode(JoinMode::ExistsJoin);
        criteriaTransStatus1 = qb_projCostTransSale1.addRange(fieldNum(ProjCostTransSale, TransStatus));

        // Used for partial invoice which requires to joins to the table
        qb_projCostTransSale2 = qb_projCostTrans.addDataSource(tableNum(ProjCostTransSale));
        qb_projCostTransSale2.relations(true);
        qb_projCostTransSale2.joinMode(JoinMode::ExistsJoin);
        criteriaTransStatus2 = qb_projCostTransSale2.addRange(fieldNum(ProjCostTransSale, TransStatus));
        qb_projCostTransSale2.enabled(false);

        // Filter by the project Id
        if (element.args().dataset() == tableNum(PSATmpProjInvoiceSummary))
        {
            tSummary = element.args().record();
            qb_projCostTrans.addRange(fieldNum(ProjCostTrans,ProjId)).value(tSummary.ProjId);
        }

        if (rangeCategoryGroup)
        {
            qb_ProjCategory = qb_projCostTrans.addDataSource(tableNum(ProjCategory));
            qb_ProjCategory.addLink(fieldNum(ProjCostTrans, CategoryId), fieldNum(ProjCategory, CategoryId));
            qb_ProjCategory.fetchMode(0);
            qb_ProjCategory.joinMode(JoinMode::ExistsJoin);

            criteriaCategoryGroupId = qb_ProjCategory.addRange(fieldNum(ProjCategory, CategoryGroupId));
        }

        if (linkProjService)
        {
            qb_ProjService = qb_projCostTrans.addDataSource(tableNum(SMAServiceOrderLine));

            qb_ProjService.addLink(fieldNum(ProjCostTrans, TransIdRef), fieldNum(SMAServiceOrderLine, ProjTransId));
            qb_ProjService.addLink(fieldNum(ProjCostTrans, ProjId), fieldNum(SMAServiceOrderLine, ProjId));
            qb_ProjService.fetchMode(0);
            qb_ProjService.joinMode(JoinMode::InnerJoin);

            criteriaService = qb_ProjService.addRange(fieldNum(SMAServiceOrderLine, ServiceOrderId));
            criteriaProjId  = qb_ProjService.addRange(fieldNum(SMAServiceOrderLine, ProjId));
        }
        else
        {
            qb_projTable = qb_projCostTrans.addDataSource(tableNum(ProjTable));
            qb_projTable.addLink(fieldNum(ProjCostTrans, ProjId), fieldNum(ProjTable, ProjId));
            qb_projTable.fetchMode(0);
            qb_projTable.joinMode(JoinMode::ExistsJoin);

            criteriaProjInvoiceProjId   = qb_projTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
            criteriaProjId              = qb_projTable.addRange(fieldNum(ProjTable, ProjId));
            criteriaWIPProjId           = qb_projTable.addRange(fieldNum(ProjTable, wipProject));

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                criteriaFixedPrice          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTimeMaterial        = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInternal            = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaCost                = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInvestment          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTime                = qb_projTable.addRange(fieldNum(ProjTable, Type));
            }

            criteriaSorting1            = qb_projTable.addRange(fieldId2Ext(fieldNum(ProjTable, SortingId), 1));
            criteriaSorting2            = qb_projTable.addRange(fieldId2Ext(fieldNum(ProjTable, SortingId), 2));
            criteriaSorting3            = qb_projTable.addRange(fieldId2Ext(fieldNum(ProjTable, SortingId), 3));
            criteriaGroupId             = qb_projTable.addRange(fieldNum(ProjTable, ProjGroupId));
            criteriaCustAccount         = qb_projTable.addRange(fieldNum(ProjTable, CustAccount));
        }

        if (rangeLedgerTransDate)
        {
            qb_ProjTransPosting = qb_projCostTrans.addDataSource(tablenum(ProjTransPosting));
            qb_ProjTransPosting.addLink(fieldnum(ProjCostTrans,TransId), fieldnum(ProjTransPosting, TransId));
            qb_ProjTransPosting.joinMode(JoinMode::ExistsJoin);

            criteriaLedgerTransDate = qb_ProjTransPosting.addRange(fieldnum(ProjTransPosting,LedgerTransDate));
        }

        qb_ProjTransPostingView = qb_projCostTrans.addDataSource(tableNum(ProjTransPostingView));
        qb_ProjTransPostingView.relations(true);
        qb_ProjTransPostingView.joinMode(JoinMode::OuterJoin);

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryLineproperty</Name>
				<Source><![CDATA[
    Query buildQueryLineproperty(JoinMode _joinMode)
    {
        Query                       q = element.buildQuery();
        
        if (selectInvoiceStatus.selection() == projSelectTrans::ToBeInvoiced)
        {
            qb_ProjLineProperty = qb_projCostTrans.addDataSource(tableNum(ProjLineProperty));

            qb_ProjLineProperty.addLink(fieldNum(ProjCostTrans, LinePropertyId), fieldNum(ProjLineProperty, LinePropertyId));
            qb_ProjLineProperty.fetchMode(0);

            criteriatoBeInvoiced = qb_ProjLineProperty.addRange(fieldNum(ProjLineProperty, ToBeInvoiced));
            criteriatoBeInvoiced.value(queryValue(NoYes::No));

            qb_ProjLineProperty.joinMode(_joinMode);
        }
        else if (selectInvoiceStatus.selection() == projSelectTrans::NoChargeable)
        {
            QueryBuildDataSource qbds = qb_projCostTrans.addDataSource(tableNum(ProjCostNonChargeableTrans));
            qbds.relations(false);
            qbds.addLink(fieldNum(ProjCostTrans, TransId), fieldNum(ProjCostNonChargeableTrans, TransId));
            qbds.joinMode(_joinMode);
        }
        
        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjTransDate</Name>
				<Source><![CDATA[
    Public void enableProjTransDate()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ProjTransPostingView_ProjTransDate.visible(true);
            TransDate.visible(false);
        }
        else
        {
            ProjTransPostingView_ProjTransDate.visible(false);
            TransDate.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initDataSet();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            isIndiaIndirectTaxParameterMarked   = TaxParameters::checkTaxParameters_IN();
            isProjCostTrans_INEnabled           = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(ProjCostTransTaxExtensionIN));
        }
        // </GIN>

        super();

        callerForm = element.args().caller();

        isCallerForm = callerForm is FormRun;

        ledgerFromDate  = dateNull();
        ledgerToDate    = dateMax();

        if (!callerForm && (this.args().dataset() == tableNum(HierarchyTreeTable) || this.args().dataset() == tableNum(ProjTable)))
        {
            this.setLinkCriteria();
        }

        if (element.args().dataset() == tableNum(TmpProjStatistic))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        if (element.args().dataset() == tableNum(TmpProjCashFlow))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }

        element.setPriceAmount();
        element.setVisible();

        salesAmountCache    = new Map(Types::String, Types::Real);
        costAmountCache     = new Map(Types::String, Types::Real);

        traceTree = new ProjCreateAdjTraceTree(ctrlTree, ProjTransType::Cost);

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            element.setVisible_IN();
        }
        //</GIN>

        // <GTE>
        boolean isGTEEnabled = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
        TransTaxInformation.visible(isIndiaIndirectTaxParameterMarked || isGTEEnabled);
        TaxGroup.visible(!isGTEEnabled);
        TaxItemGroup.visible(!isGTEEnabled);
        // </GTE>

        element.enableProjTransDate();
        Correction.visible(LedgerParameters::find().TransactionReversalCorrection);

        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            FormButtonGroupControl1.visible(false);
            FormButtonGroupControl1.enabled(false);
        }

        SubcontractLine.visible(FeatureStateProvider::isFeatureEnabled(ProjEnableSubcontractActualsPostingFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSet</Name>
				<Source><![CDATA[
    void initDataSet()
    {
        ProjCostTrans               projCostTransLink;
        ProjTransPosting            projTransPosting;
        LedgerJournalTrans          ledgerJournalTrans;
        TmpProjPeriodic             tmpProjPeriodic;
        TmpProjAdjustment           tmpProjAdjustment;
        SMAServiceOrderLine         serviceOrderLine;
        TmpProjPeriodicLedger       tmpProjPeriodicLedger;
        ProjCostTransCost           projCostTransCostlink;

        linkProjService     = false;

        switch (element.args().dataset())
        {
            case tableNum(ProjCostTrans):
                projCostTransLink       = element.args().record();
                transId                 = projCostTransLink.TransId;
                break;

            case tableNum(ProjCostTransCost):
                projCostTransCostlink   = element.args().record();
                transId                 = projCostTransCostlink.TransId;
                break;

            case(tableNum(LedgerJournalTrans)):
                ledgerJournalTrans      = element.args().record();
                transId                 = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId).TransId;
                break;

            case(tableNum(ProjTransPosting)):
                projTransPosting        = element.args().record();
                transId                 = projTransPosting.TransId;
                break;

            case(tableNum(SMAServiceOrderLine)):
                serviceOrderLine        = element.args().record();
                transId                 = serviceOrderLine.ProjTransId;
                break;

            case(tableNum(TmpProjPeriodic)):
                tmpProjPeriodic         = element.args().record();
                transId                 = tmpProjPeriodic.TransId;
                break;

            case(tableNum(TmpProjPeriodicLedger)):
                tmpProjPeriodicLedger   = element.args().record();
                transId                 = tmpProjPeriodicLedger.TransId;
                break;

            case(tableNum(TmpProjAdjustment)):
                tmpProjAdjustment       = element.args().record();
                transId                 = tmpProjAdjustment.TransId;
                break;

            case(tableNum(SMAServiceOrderTable)):
                linkProjService     = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInvoiceControl</Name>
				<Source><![CDATA[
    void linkInvoiceControl()
    {
        if (projInvoiceControl.parmProjTransDateFrom() || projInvoiceControl.parmProjTransDateTo())
        {
            criteriaTransDate.value(SysQuery::range(projInvoiceControl.parmProjTransDateFrom(), projInvoiceControl.parmProjTransDateTo()));
        }

        if (projInvoiceControl.parmResource())
        {
            criteriaResourceRecId.value(queryValue(projInvoiceControl.parmResource()));
        }

        if (projInvoiceControl.parmProjCategoryId())
        {
            criteriaCategoryId.value(projInvoiceControl.parmProjCategoryId());
        }

        if (projInvoiceControl.parmCategoryGroupId())
        {
            criteriaCategoryId.value(projInvoiceControl.parmCategoryGroupId());
        }

        if (!element.enableProjMultipleContractLinesForProjectFeature)
        {
            if (projInvoiceControl.parmFixedPrice())
            {
                criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
            }
            else
            {
                criteriaFixedPrice.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmTimeMaterial())
            {
                criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
            }
            else
            {
                criteriaTimeMaterial.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaInternal.value(queryValue(ProjType::Cost));
            }
            else
            {
                criteriaInternal.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInternalCost())
            {
                criteriaCost.value(queryValue(ProjType::Internal));
            }
            else
            {
                criteriaCost.value(queryValue(SysQuery::valueEmptyString()));
            }

            if (projInvoiceControl.parmInvestment())
            {
                criteriaInvestment.value(queryValue(ProjType::Investment));
            }
            else
            {
                criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (projInvoiceControl.parmProjId())
        {
            criteriaProjId.value(queryValue(projInvoiceControl.parmProjId()));
        }

        if (projInvoiceControl.parmProjInvoiceProjId())
        {
            criteriaProjInvoiceProjId.value(queryValue(projInvoiceControl.parmProjInvoiceProjId()));
        }

        if (projInvoiceControl.parmSalesCurrency())
        {
            criteriaSalesCurrency.value(queryValue(projInvoiceControl.parmSalesCurrency()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCashFlow</Name>
				<Source><![CDATA[
    void linkProjCashFlow()
    {
        if (projCashFlow.parmExpenses())
        {
            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
            {
                criteriaTransDate.value(SysQuery::range(projCashFlow.parmProjectFromDate(), projCashFlow.parmProjectToDate()));
            }

            if (projCashFlow.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projCashFlow.parmResource()));
            }

            if (projCashFlow.parmCategoryId())
            {
                criteriaCategoryId.value(projCashFlow.parmCategoryId());
            }

            if (projCashFlow.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projCashFlow.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCashFlow.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCashFlow.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCashFlow.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCashFlow.parmTimeProject())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }

                if (!(projCashFlow.parmFixedPrice()   ||
                    projCashFlow.parmTimeMaterial() ||
                    projCashFlow.parmInternalCost() ||
                    projCashFlow.parmInvestment()   ||
                    projCashFlow.parmTimeProject()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projCashFlow.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
            }

            if (projCashFlow.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
            }

            if (projCashFlow.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));
            }

            if (projCashFlow.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
            }

            if (projCashFlow.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));
            }

            if (projCashFlow.parmProjTree())
            {
                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
            }
            else
            {
                if (projCashFlow.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                }
            }

            if (projCashFlow.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));
            }

            if (projCashFlow.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCostControl</Name>
				<Source><![CDATA[
    void linkProjCostControl()
    {
        if (projCostControl.parmExpenses())
        {
            ledgerFromDate  = projCostControl.parmLedgerTransDateFrom();
            ledgerToDate    = projCostControl.parmLedgerTransDateTo();

            ledgerDates.visible(true);

            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projCostControl.parmProjTransDateFrom() || projCostControl.parmProjTransDateTo())
            {
                criteriaTransDate.value(SysQuery::range(projCostControl.parmProjTransDateFrom(), projCostControl.parmProjTransDateTo()));
            }

            if (projCostControl.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projCostControl.parmResource()));
            }

            if (projCostControl.parmProjCategoryId())
            {
                criteriaCategoryId.value(projCostControl.parmProjCategoryId());
            }

            if (projCostControl.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projCostControl.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCostControl.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCostControl.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCostControl.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCostControl.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCostControl.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCostControl.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }

                if (!(projCostControl.parmFixedPrice()   ||
                    projCostControl.parmTimeMaterial() ||
                    projCostControl.parmInternalCost() ||
                    projCostControl.parmInvestment()   ||
                    projCostControl.parmTime()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projCostControl.parmProjSorting1())
            {
                criteriaSorting1.value(queryValue(projCostControl.parmProjSorting1()));
            }

            if (projCostControl.parmProjSorting2())
            {
                criteriaSorting2.value(queryValue(projCostControl.parmProjSorting2()));
            }

            if (projCostControl.parmProjSorting3())
            {
                criteriaSorting3.value(queryValue(projCostControl.parmProjSorting3()));
            }

            if (projCostControl.parmCustomerAccount())
            {
                criteriaCustAccount.value(queryValue(projCostControl.parmCustomerAccount()));
            }

            if (projCostControl.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCostControl.parmProjGroupId()));
            }

            if (projCostControl.parmProjTree())
            {
                criteriaProjId.value(projCostControl.parmProjId()+ #star);
            }
            else
            {
                if (projCostControl.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCostControl.parmProjId()));
                }
            }

            if (projCostControl.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCostControl.parmProjWIPId()));
            }

            if (projCostControl.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCostControl.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic()
    {
        if (projStatistic.parmExpenses())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();

            ledgerDates.visible(true);

            if (ledgerFromDate && (ledgerFromDate != dateNull()))
            {
                ledgerDateFrom.dateValue(ledgerFromDate);
            }

            if (ledgerToDate && (ledgerToDate != dateMax()))
            {
                ledgerDateTo.dateValue(ledgerToDate);
            }

            if (! (ledgerFromDate && ledgerToDate))
            {
                ledgerDates.visible(false);
            }

            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(SysQuery::range(projStatistic.parmProjFromDate(), projStatistic.parmProjToDate()));
            }

            if (projStatistic.parmLedgerFromDate() || projStatistic.parmLedgerToDate())
            {
                criteriaLedgerTransDate.value(SysQuery::range(projStatistic.parmLedgerFromDate(), projStatistic.parmLedgerToDate()));
            }

            if (projStatistic.parmResource())
            {
                criteriaResourceRecId.value(queryValue(projStatistic.parmResource()));
            }

            if (projStatistic.parmProjCategoryId())
            {
                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
            }

            if (projStatistic.parmCategoryGroupId())
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }

                if (!(projStatistic.parmFixedPrice()   ||
                    projStatistic.parmTimeMaterial() ||
                    projStatistic.parmInternalCost() ||
                    projStatistic.parmInvestment()   ||
                    projStatistic.parmTime()))
                {
                    criteriaInvestment.value(queryValue(SysQuery::valueEmptyString()));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }

            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }

            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }

            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }

            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmGrantID())
            {
                qb_ProjGrantView = SysQuery::findOrCreateDataSource(projCostTrans_ds.query(), tableNum(ProjGrantView), tableNum(ProjCostTrans));
                qb_ProjGrantView.addLink(fieldNum(ProjCostTrans,ProjId), fieldNum(ProjGrantView, ProjId));
                criteriaGrantID = qb_ProjGrantView.addRange(fieldNum(ProjGrantView, GrantId));
                criteriaGrantID.value(queryValue(projStatistic.parmGrantID()));
            }
            else if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else
            {
                if (projStatistic.parmProjId())
                {
                    criteriaProjId.value(queryValue(projStatistic.parmProjId()));
                }
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCashFlow</Name>
				<Source><![CDATA[
    ProjCashFlow projCashFlow()
    {
        return projCashFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projStatistic</Name>
				<Source><![CDATA[
    ProjStatistic projStatistic()
    {
        return projStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSALinkProjFinancialStatistic</Name>
				<Source><![CDATA[
    void PSALinkProjFinancialStatistic()
    {
        PSATmpProjFinancialStatistic tTmpProjStatistic;
        PSATmpStr                    sProjId;
        TransDate                    dLedgerFromDate;
        TransDate                    dLedgerToDate;
        #define.star('*')

        void setProjInvoiceCriteria()
        {
            criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            
            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }
                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }
                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }
                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }
                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }
        }

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return;
        }

        tTmpProjStatistic = element.args().record();
        sProjId = tTmpProjStatistic.ProjViewId;

        dLedgerFromDate  = projStatistic.parmLedgerFromDate();
        dLedgerToDate    = projStatistic.parmLedgerToDate();

        ledgerDates.visible(true);

        if (dLedgerFromDate && (dLedgerFromDate != dateNull()))
        {
            ledgerDateFrom.dateValue(dLedgerFromDate);
        }

        if (dLedgerToDate && (dLedgerToDate != dateMax()))
        {
            ledgerDateTo.dateValue(dLedgerToDate);
        }

        if (!(dLedgerFromDate && dLedgerToDate))
        {
            ledgerDates.visible(false);
        }

        if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
        {
            criteriaTransDate.value(strFmt('%1..%2',queryValue(projStatistic.parmProjFromDate()),
                                                    queryValue(projStatistic.parmProjToDate())));
        }

        if (tTmpProjStatistic.ProjTotal == PSAProjTotal::None)
        {
            criteriaProjId.value(queryValue(sProjId));
        }
        else if (tTmpProjStatistic.ProjTotal == PSAProjTotal::LevelTotal)
        {
            if (projStatistic.psaParmDisplayLevel() == 0)
            {
                if (projStatistic.parmProjInvoiceProjId())
                {
                    setProjInvoiceCriteria();
                }
                else if (projStatistic.parmProjId())
                {
                    if (projStatistic.parmProjTree())
                    {
                        criteriaProjId.value(sProjId + #star);
                    }
                    else
                    {
                        criteriaProjId.value(sProjId);
                    }
                }
            }
            else
            {
                criteriaProjId.value(sProjId + #star);
            }
        }
        else
        {
            if (projStatistic.parmProjInvoiceProjId() && tTmpProjStatistic.ProjTotal == PSAProjTotal::GrandTotal)
            {
                setProjInvoiceCriteria();
            }
            else
            {
                criteriaProjId.value(strLTrim(sProjId) + #star);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedTransId</Name>
				<Source><![CDATA[
    ProjTransIdBase selectedTransId()
    {
        return selectionTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    void setButtonAccess()
    {
        ProjCostTrans       projCostTransSelected;
        ProjCostTransSale   projCostTransSaleCheck;
        boolean             projReverseTransEnabled;
        boolean             projAdjustmentEnabled;
        boolean             projAdjTraceEnabled;
        ProjCostTrans       childProjCostTrans;
        boolean             lockFieldsForAdjustments;
        boolean             CDSLockingOptionAdjustments = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments);

        for (projCostTransSelected = projCostTrans_ds.getFirst(true)
            ? projCostTrans_ds.getFirst(true)
            : projCostTrans_ds.cursor(); projCostTransSelected; projCostTransSelected = projCostTrans_ds.getNext())
        {
            if (!projAdjustmentEnabled)
            {
                lockFieldsForAdjustments = CDSLockingOptionAdjustments ? Project::isProjectExternallyManaged(projCostTransSelected.ProjId) : false;
                projAdjustmentEnabled = ProjTrans::newProjCostTrans(projCostTransSelected).adjustable() && !lockFieldsForAdjustments;
            }

            while select projCostTransSaleCheck
                where projCostTransSaleCheck.TransId == projCostTransSelected.TransId
            {
                if (!projReverseTransEnabled)
                {
                    projReverseTransEnabled = projCostTransSaleCheck.canBeMarkedForCreditNote();
                }
            }

            if (!projAdjTraceEnabled)
            {
                projAdjTraceEnabled = projCostTransSelected.AdjRefTransId ? true : false;
                if (!projAdjTraceEnabled)
                {
                    select firstonly RecId from childProjCostTrans
                        where childProjCostTrans.AdjRefTransId == projCostTransSelected.TransId;

                    projAdjTraceEnabled = childProjCostTrans.RecId ? true : false;
                }
            }
        }

        projReverseTrans.enabled(projReverseTransEnabled);
        projAdjustmentCost.enabled(projAdjustmentEnabled);
        transAdjustmentTrace.enabled(projAdjTraceEnabled);
         
        projCostTransSelected = projCostTrans_ds.cursor();
        boolean allowSplitTransaction = ProjSplitTransaction::canSplitTransaction(projCostTransSelected);
        SplitTransaction.enabled(allowSplitTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinkCriteria</Name>
				<Source><![CDATA[
    void setLinkCriteria()
    {
        ProjInvoiceTable            projInvoiceTable;
        ProjTable                   projTable;
        ProjWIPTable                projWIPTable;
        HcmWorker                   hcmWorker;
        ResourceView                resource;
        ProjCategory                projCategory;
        ProjCategoryGroup           projCategoryGroup;
        ProjId                      projId;
        str                         tmpQueryStr;
        SMAServiceOrderTable        serviceOrderTable;
        HierarchyTreeTable          hierarchyTreeTable;
        smmActivities               smmActivities;

        switch (element.args().dataset())
        {
            case(tableNum(ProjWIPTable)):
                projWIPTable = element.args().record();
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    tmpQueryStr = ProjTable::rangeProjId(fieldNum(ProjTable, wipProject), projWIPTable.ProjId);
                    criteriaProjId.value(tmpQueryStr);
                }
                criteriaWIPProjId.value(projWIPTable.ProjId);
                break;

            case(tableNum(ProjInvoiceTable)):
                projInvoiceTable = element.args().record();
                criteriaProjInvoiceProjId.value(projInvoiceTable.ProjInvoiceProjId);
                break;

            case(tableNum(ProjTable)):
                projTable   = element.args().record();
                projId      = projTable.ProjId;
                criteriaProjId.value(projId + #star);
                break;

            case(tableNum(HcmWorker)):
                hcmWorker   = element.args().record();
                criteriaResourceRecId.value(queryValue(ResourceFacade::findByWorker(hcmWorker.RecId)));
                break;

            case(tablenum(ResourceView)):
                resource = element.args().record();
                criteriaResourceRecId.value(queryValue(resource.RecId));
                break;

            case(tableNum(ProjCategory)):
                projCategory = element.args().record();
                criteriaCategoryId.value(projCategory.CategoryId);
                break;

            case(tableNum(ProjCategoryGroup)):
                projCategoryGroup = element.args().record();
                criteriaCategoryGroupId.value(projCategoryGroup.CategoryGroupId);
                break;

            case(tableNum(SMAServiceOrderTable)):
                serviceOrderTable = element.args().record();
                criteriaProjId.value(serviceOrderTable.ProjId);
                criteriaService.value(serviceOrderTable.ServiceOrderId);
                break;

            case (tableNum(HierarchyTreeTable)):
                hierarchyTreeTable = element.args().record();
                smmActivities = smmActivities::findWithRecId(hierarchyTreeTable.RefRecId);
                criteriaActivityId.value(queryValue(smmActivities.ActivityNumber));

                projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities, tableNum(ProjTable));
                criteriaProjId.value(projId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAmount</Name>
				<Source><![CDATA[
    void setPriceAmount()
    {
        if (element.args().dataset() == tableNum(TmpProjStatistic) ||
            (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? element.args().dataset() == tableNum(PSATmpProjFinancialStatistic) : false))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else if (element.args().dataset() == tableNum(TmpProjCashFlow))
        {
            priceAmount.selection(PriceAmount::LedgerUpdate);
        }
        else
        {
            priceAmount.selection(ProjParameters::find().DisplayPriceAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible</Name>
				<Source><![CDATA[
    void setVisible()
    {
        switch (priceAmount.selection())
        {
            case PriceAmount::Price:
                costPriceGrid.visible(true);
                salesPriceGrid.visible(true);
                currencyIdGrid.visible(true);
                costAmountGrid.visible(false);
                salesAmountGrid.visible(false);
                transTurnoverGrid.visible(false);
                break;

            case PriceAmount::LedgerUpdate:
                costPriceGrid.visible(false);
                salesPriceGrid.visible(false);
                currencyIdGrid.visible(false);
                costAmountGrid.visible(true);
                salesAmountGrid.visible(true);
                transTurnoverGrid.visible(false);
                break;

            case PriceAmount::LineAmount:
                costPriceGrid.visible(false);
                salesPriceGrid.visible(true);
                currencyIdGrid.visible(true);
                costAmountGrid.visible(false);
                salesAmountGrid.visible(false);
                transTurnoverGrid.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisible_IN</Name>
				<Source><![CDATA[
    private void setVisible_IN()
    {
        AssessableValue_IN.visible(isIndiaIndirectTaxParameterMarked);
        MaxRetailPrice_IN.visible(isIndiaIndirectTaxParameterMarked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (this.args().parmEnumType() == enumNum(IsSplitTransaction))
        {
            // Setup and open trace group
            if (this.args().parmEnum() == NoYes::Yes)
            {
                TransAdjustmentTrace.clicked();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjCostTrans</Name>
				<Methods>
					<Method>
						<Name>setQuery</Name>
						<Source><![CDATA[
        public void setQuery()
        {
            switch (selectInvoiceStatus.selection())
            {
                case projSelectTrans::All:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::Invoiced:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::PartiallyInvoiced:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::Adjusted:
                    this.query(element.buildQuery());
                    break;

                case projSelectTrans::ToBeInvoiced:
                    this.query(element.buildQueryLineProperty(JoinMode::NoExistsJoin));
                    break;

                case projSelectTrans::NoChargeable:
                    this.query(element.buildQueryLineProperty(JoinMode::ExistsJoin));
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>cursorNotify</Name>
						<Source><![CDATA[
        public void cursorNotify(int _event)
        {
            ProjCostTrans        projCostTransCache;
            Set                  setTransCache;

            super(_event);

            if (priceAmount.selection() == PriceAmount::LedgerUpdate)
            {
                if (_event == 0 || _event == 1)
                {
                    projCostTransCache = projCostTrans_DS.getFirst(0,false);
                    while (projCostTransCache)
                    {
                        if (! salesAmountCache.exists(projCostTransCache.TransId))
                        {
                            if (! setTransCache)
                            {
                                setTransCache = new Set(Types::String);
                            }
                            setTransCache.add(projCostTransCache.TransId);
                        }

                        projCostTransCache = projCostTrans_DS.getNext();
                    }

                    if (setTransCache)
                    {
                        salesAmountCache = Map::create(ProjCostTrans::salesAmountDisplayCache(setTransCache.pack(),salesAmountCache.pack(),ledgerFromDate,ledgerToDate));
                        costAmountCache  = Map::create(ProjCostTrans::costAmountDisplayCache(setTransCache.pack(),costAmountCache.pack(),ledgerFromDate,ledgerToDate));
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            super();

            this.cacheAddMethod(tableMethodStr(ProjCostTrans, costPrice));
            this.cacheAddMethod(tableMethodStr(ProjCostTrans, costAmount));
            this.cacheAddMethod(tableMethodStr(ProjCostTrans, salesPrice));
            this.cacheAddMethod(tableMethodStr(ProjCostTrans, salesAmount));
            this.cacheAddMethod(tableMethodStr(ProjCostTrans, transTurnover));
            this.cacheAddMethod(tableMethodStr(ProjCostTrans, projInvoiceStatus));

            this.setQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            rangeCategoryGroup = false;
            rangeLedgerTransDate = false;

            switch (element.args().dataset())
            {
                case(tableNum(TmpProjStatistic)):
                    // If linkActive called again  the criterias are changed and the form should be closed
                    if (projStatistic)
                    {
                        element.close();
                    }

                    projStatistic       = element.args().parmObject();
                    linkProjStatistic   = true;

                    if (projStatistic.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }

                    if (projStatistic.parmLedgerFromDate()|| projStatistic.parmLedgerToDate())
                    {
                        rangeLedgerTransDate = true;
                    }

                    break;

                case tableNum(PSATmpProjFinancialStatistic):
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        projStatistic = element.args().parmObject();
                        m_bLinkProjFinancialStatisitc =  true;
                    }
                    break;

                case(tableNum(TmpProjCostControl)):
                    // If linkActive called again .criteria changed... close form
                    if (projCostControl)
                    {
                        element.close();
                    }

                    projCostControl       = element.args().parmObject();
                    linkProjCostControl   = true;

                    if (projCostControl.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }
                    break;

                case(tableNum(TmpProjInvoiceControl)):
                    // If linkActive called again  the criterias are changed and the form should be closed
                    if (projInvoiceControl)
                    {
                        element.close();
                    }

                    projInvoiceControl  = element.args().parmObject();
                    linkInvoiceControl  = true;

                    if (projInvoiceControl.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }
                    break;

                case(tableNum(TmpProjCashFlow)):
                    // If linkActive called again  the criterias are changed and the form should be closed
                    if (projCashFlow)
                    {
                        element.close();
                    }

                    projCashFlow       = element.args().parmObject();
                    linkProjCashFlow   = true;

                    if (projCashFlow.parmCategoryGroupId())
                    {
                        rangeCategoryGroup = true;
                    }
                    break;
            }

            if (element.args().dataset())
            {
                switch (selectInvoiceStatus.selection())
                {
                    case projSelectTrans::All:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::Invoiced:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::PartiallyInvoiced:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::Adjusted:
                        this.query(element.buildQuery());
                        break;

                    case projSelectTrans::ToBeInvoiced:
                        this.query(element.buildQueryLineProperty(JoinMode::NoExistsJoin));
                        break;

                    case projSelectTrans::NoChargeable:
                        this.query(element.buildQueryLineProperty(JoinMode::ExistsJoin));
                        break;
                }
            }

            element.setLinkCriteria();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>salesAmount</Name>
						<Source><![CDATA[
        display AmountCur salesAmount(ProjCostTrans _projCostTrans)
        {
            if (! salesAmountCache.exists(_projCostTrans.TransId))
            {
                salesAmountCache.insert(_projCostTrans.TransId, _projCostTrans.salesAmount(_projCostTrans,ledgerFromDate,ledgerToDate));
            }

            return salesAmountCache.lookup(_projCostTrans.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>costAmount</Name>
						<Source><![CDATA[
        display AmountCur costAmount(ProjCostTrans _projCostTrans)
        {
            if (! costAmountCache.exists(_projCostTrans.TransId))
            {
                costAmountCache.insert(_projCostTrans.TransId, _projCostTrans.costAmount(_projCostTrans,ledgerFromDate,ledgerToDate));
            }

            return costAmountCache.lookup(_projCostTrans.TransId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (callerForm && isCallerForm && callerForm.name() == formStr(ProjTransCost))
            {
                criteriaTransId.value(callerForm.selectedTransId());
                super();
                return;
            }

            switch (selectInvoiceStatus.selection())
            {
                case projSelectTrans::All:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projCostTransSale1.enabled(false);
                    qb_projCostTransSale2.enabled(false);
                    break;

                case projSelectTrans::Invoiced:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projCostTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2,%3",
                                                queryValue(ProjTransStatus::Invoiced),
                                                queryValue(ProjTransStatus::MarkedCreditnote),
                                                queryValue(ProjTransStatus::CreditnoteProposal)));

                    qb_projCostTransSale2.enabled(true);
                    qb_projCostTransSale2.joinMode(JoinMode::NoExistsJoin);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Posted));
                    break;

                case projSelectTrans::PartiallyInvoiced:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projCostTransSale1.enabled(true);
                    //Invoiced
                    criteriaTransStatus1.value(strFmt("%1,%2,%3",
                                                queryValue(ProjTransStatus::Invoiced),
                                                queryValue(ProjTransStatus::MarkedCreditnote),
                                                queryValue(ProjTransStatus::CreditnoteProposal)));
                    
                    // Not Invoiced or adjusted
                    qb_projCostTransSale2.joinMode(JoinMode::ExistsJoin);
                    qb_projCostTransSale2.enabled(true);
                    criteriaTransStatus2.value(queryValue(ProjTransStatus::Posted));
                    break;

                case projSelectTrans::Adjusted:
                    qb_projCostTransSale1.enabled(true);
                    qb_projCostTransSale2.enabled(false);
                    criteriaTransStatus1.value(queryValue(ProjTransStatus::Adjusted));
                    break;
  
                case projSelectTrans::ToBeInvoiced:
                    if (criteriaTimeMaterial && !element.enableProjMultipleContractLinesForProjectFeature)
                    {
                        criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                    }
                    qb_projCostTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2",
                                                queryValue(ProjTransStatus::Posted),
                                                queryValue(ProjTransStatus::InvoiceProposal)));
                    qb_projCostTransSale2.enabled(false);
                    break;

                case projSelectTrans::NoChargeable:
                    if (criteriaTimeMaterial)
                    {
                        criteriaTimeMaterial.value(SysQuery::valueUnlimited());
                    }
                    qb_projCostTransSale1.enabled(true);
                    criteriaTransStatus1.value(strFmt("%1,%2",
                                              queryValue(ProjTransStatus::Posted)));
                    qb_projCostTransSale2.enabled(false);
                    break;
            }

            if (linkInvoiceControl)
            {
                element.linkInvoiceControl();
            }

            if (linkProjCostControl)
            {
                element.linkProjCostControl();
            }

            if (linkProjStatistic)
            {
                element.linkProjStatistic();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && m_bLinkProjFinancialStatisitc)
            {
                element.PSALinkProjFinancialStatistic();
            }

            if (linkProjCashFlow)
            {
                element.linkProjCashFlow();
            }

            if (transId)
            {
                criteriaTransId.value(transId);
            }

            if (refTransid)
            {
                criteriaRefId.value(refTransid);
            }
            super();

            element.setButtonAccess();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            element.setButtonAccess();

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjCostTransTaxExtensionIN</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (isProjCostTrans_INEnabled)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SplitTransaction</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Update the record being displayed
            projCostTrans_ds.reread();
            projCostTrans_ds.rereadReferenceDataSources();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransAdjustmentTrace</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            adjustmentTraceTabPage.visible(true);
            adjustmentTraceTabPage.setFocus();

            traceTree.createTraceTree(projCostTrans.TransId);
            fieldList.text(traceTree.listofFields());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriceAmount</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.setVisible();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectInvoiceStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projCostTrans_ds.setQuery();
            element.setLinkCriteria();
            projCostTrans_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);

            if (_fromTab == 6)
            {
                adjustmentTraceTabPage.visible(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubcontractLine</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
            ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
            dw.openProjectSubcontractLineDetailsInCE(projCostTrans.SubcontractLine, projCostTrans.DataAreaId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_M_proposalId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjProposalJour::jumpRefProposal(projCostTrans.proposalId(),projCostTrans.TransId,ProjTransType::Cost);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Group_M_invoiceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            ProjInvoiceJour::jumpRefInvoice(projCostTrans.TransId,ProjTransType::Cost);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FundingSourceCost</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Project::jumpRefFundingSource(projCostTransCost.FundingSource, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FundingSourceSale</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Project::jumpRefFundingSource(projCostTransSale.FundingSource, element);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GoToTransaction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjTransCost));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetupTree</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args    args;
            FormRun formRun;

            args = new Args();
            args.name(formStr(ProjAdjTreeCreateVisualization));
            args.caller(element);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();

            if (formRun.closedOk())
            {
                adjustmentTraceTabPage.visible(true);
                adjustmentTraceTabPage.setFocus();

                traceTree.createTraceTree(projCostTrans.TransId);
                fieldList.text(traceTree.listofFields());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
        {
            super(_oldItem, _newItem, _how);

            selectionTransId = ctrlTree.getItem(_newItem.idx()).data();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjCostTrans</Name>
			<Table>ProjCostTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjRefTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyIdCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvestmentTaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAContractLineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceLegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalCostAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransIdRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherJournal</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjCostTransCost</Name>
			<Table>ProjCostTransCost</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CostAmountLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostPriceCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerStatusCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPPeriod</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjCostTrans</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjCostTransSale</Name>
			<Table>ProjCostTransSale</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ControlId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ControlVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerSalesPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerTransdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjProposalId_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAsPerOriginalInvoice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjCostTrans</JoinSource>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjCostTransTaxExtensionIN</Name>
			<Table>ProjCostTransTaxExtensionIN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AssessableValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsTariffCodeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseRecordType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseTariffCodes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExciseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumRetailPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCostTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTaxFormTypes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceCodeTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceEventGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInventVATCommodityCodeId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ProjCostTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjTransPostingView</Name>
			<Table>ProjTransPostingView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<JoinSource>ProjCostTrans</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS91514</Caption>
		<DataSource xmlns="">ProjCostTrans</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">ProjCostTrans</TitleDataSource>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane1</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab2</Name>
						<Type>ActionPaneTab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>FormButtonGroupControl1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjPeriodicPostingCost</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjPeriodicPostingCost</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjPeriodicPostingSales</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjPeriodicPostingSales</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>InvoiceProposal</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceProposal</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjReverseTrans</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjReverseTrans</MenuItemName>
										<MultiSelect>Yes</MultiSelect>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDropDialogButtonControl">
										<Name>ProjAdjustmentCost</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>DropDialogButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<DataSource>ProjCostTrans</DataSource>
										<MenuItemName>ProjAdjustmentDropMenu</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SplitTransaction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>ProjCostTrans</DataSource>
										<MenuItemName>ProjSplitTransaction</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<MultiSelect>No</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
								</Controls>
								<Caption>@SYS10340</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>FormButtonGroupControl2</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ProjInvoiceLine</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjInvoiceLine</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TransAdjustmentTrace</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<NeededPermission>Update</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS133198</Text>
									</AxFormControl>
								</Controls>
								<Caption>@SYS3850</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@SYS40422</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Project</Name>
								<ElementPosition>1409286141</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransPosting</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>MenuItemButton</Name>
								<ElementPosition>939524094</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjCostTrans</DataSource>
								<MenuItemName>ProjLedgerTransVoucher</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransTaxInformation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjCostTrans</DataSource>
								<MenuItemName>TransTaxInformation</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>LinksGroup</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl1</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>TransDate</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DisplayGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PriceAmount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>PriceAmount</EnumType>
								<Label>@SYS90428</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SelectInvoiceStatus</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>projSelectTrans</EnumType>
								<Label>@SYS50275</Label>
								<LabelAlignment>Right</LabelAlignment>
								<Items />
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LedgerDates</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateFrom</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesFrom</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>LedgerDateTo</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Proj:LedgerDatesTo</Label>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306366</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjTransPostingView_ProjTransDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1207959549</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjTransDate</DataField>
										<DataSource>ProjTransPostingView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjCostTrans_ProjId</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostTrans_Category</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjCostTrans_Resource</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjCostTrans</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Qty</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>2147450942</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPriceGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147451006</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costPrice</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>costAmountGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147451134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costAmount</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>11</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@SYS90204</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrencyIdGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147451390</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPriceGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147451902</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesPrice</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>salesAmountGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147452926</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>salesAmount</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>11</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@SYS2835</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TransTurnoverGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2147454974</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>transTurnover</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<Label>@SYS10500</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectCostTrans_Status</Name>
										<ElementPosition>2147459070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjInvoiceStatus</Name>
										<ElementPosition>2147463166</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>projInvoiceStatus</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjCostTrans_TransactionOrigin</Name>
										<ElementPosition>2147467262</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SubcontractLine</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>Project</ConfigurationKey>
										<ElementPosition>2147459070</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SubcontractLine</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>ProjCostTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1442840574</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_TransDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ActivityNumber</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ActivityNumber</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LinePropertyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_Resource</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjCostTrans</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Correction</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>Correction</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransIdRef</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransIdRef</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_AdjRefTransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AdjRefTransId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_VoucherJournal</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>VoucherJournal</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_Txt</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Transaction_TransactionOrigin</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionOrigin</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Transaction</DataGroup>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPrice</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesPrice_CurrencyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_M_salesPrice</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Alignment>Right</Alignment>
										<DataMethod>salesPrice</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_M_ledgerSalesAmount</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>ledgerSalesAmount</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_TotalSalesAmountCur</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalSalesAmountCur</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>SalesPrice</DataGroup>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CostPriceGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPriceGroup_Qty</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Qty</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CostPriceGroup_CurrencyIdCost</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyIdCost</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPriceGroup_M_costPriceCurrency</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costPriceCurrency</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPriceGroup_InvestmentTaxAmountMST</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvestmentTaxAmountMST</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CostPriceGroup_TotalCostAmountCur</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalCostAmountCur</DataField>
										<DataSource>ProjCostTrans</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CostPriceMST</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CostPriceGroup_M_costPrice</Name>
												<AllowEdit>No</AllowEdit>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>costPrice</DataMethod>
												<DataSource>ProjCostTrans</DataSource>
												<DisplayLength>20</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>CostPriceGroup_M_costAmountLedger</Name>
												<AllowEdit>No</AllowEdit>
												<FilterExpression>%1</FilterExpression>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>costAmountLedger</DataMethod>
												<DataSource>ProjCostTrans</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<Caption>@SYS301665</Caption>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@SYS13134</Caption>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Invoice</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_M_proposalId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>proposalId</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Group_M_invoiceId</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>invoiceId</DataMethod>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>Invoice</DataGroup>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Tax</Name>
								<ConfigurationKey>Project</ConfigurationKey>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxGroupId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxItemGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxItemGroupId</DataField>
										<DataSource>ProjCostTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>SalesTax</DataGroup>
								<DataSource>ProjCostTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AssessableValue_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>1968526675</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransTaxExtensionIN_AssessableValue</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AssessableValueTransactionCurrency</DataField>
										<DataSource>ProjCostTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5298</Caption>
								<DataSource>ProjCostTransTaxExtensionIN</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MaxRetailPrice_IN</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>IN</CountryRegionCodes>
								<ElementPosition>2058005160</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransTaxExtensionIN_MaximumRetailPrice</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>MaximumRetailPrice</DataField>
										<DataSource>ProjCostTransTaxExtensionIN</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<Caption>@GLS5296</Caption>
								<DataSource>ProjCostTransTaxExtensionIN</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>ProjCostTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1811939326</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjCostTrans</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Cost</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>CostGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjCostTransCost_LedgerTransdate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerTransdate</DataField>
										<DataSource>ProjCostTransCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransCost_CostPrice</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CostPriceCurrency</DataField>
										<DataSource>ProjCostTransCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransCost_LineAmount</Name>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineAmount</DataField>
										<DataSource>ProjCostTransCost</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjCostTransCost_LedgerStatusCost</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerStatusCost</DataField>
										<DataSource>ProjCostTransCost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjCostTransCost_TransStatus</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>ProjCostTransCost</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjCostTransCost_WIPPeriod</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WIPPeriod</DataField>
										<DataSource>ProjCostTransCost</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>FundingSourceCost</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjTransCost_FundingSourceCost</HelpText>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FundingSourceCost_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjCostTransCost</DataSource>
										<ReferenceField>FundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<DataSource>ProjCostTransCost</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4249</Caption>
						<DataSource>ProjCostTransCost</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Sale</Name>
						<ElementPosition>2063597566</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SaleGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjCostTransSale_LedgerTransdate</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerTransdate</DataField>
										<DataSource>ProjCostTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransSale_SalesPrice</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjCostTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransSale_LineAmount</Name>
										<ElementPosition>1744830462</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LineAmount</DataField>
										<DataSource>ProjCostTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>ProjCostTransSale_LedgerSalesPosted</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>LedgerSalesPosted</DataField>
										<DataSource>ProjCostTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjCostTransSale_LedgerSalesAmount</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerSalesAmount</DataField>
										<DataSource>ProjCostTransSale</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjCostTransSale_WIPPeriod</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WIPPeriod</DataField>
										<DataSource>ProjCostTransSale</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjCostTransSale_TransStatus</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransStatus</DataField>
										<DataSource>ProjCostTransSale</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>FundingSourceSale</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjTransCost_FundingSourceSale</HelpText>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FundingSourceSale_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjCostTransSale</DataSource>
										<ReferenceField>FundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<DataSource>ProjCostTransSale</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS37101</Caption>
						<DataSource>ProjCostTransSale</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AdjustmentTraceTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2113929214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPane</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTab</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup1</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>GoToTransaction</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133347</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>SetupTree</Name>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<Text>@SYS133492</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>ctrlTree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Tree</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FieldGroup</Name>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>FieldList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
							</AxFormControl>
						</Controls>
						<Caption>@SYS133198</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>ProjCostTrans</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>