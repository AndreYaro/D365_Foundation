<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>WHSWarehouseInitiationWizard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class WHSWarehouseInitiationWizard extends FormRun
{    
    private boolean isWorkOrderTypeComboBoxInitialized;

    private WHSWarehouseInitiationWizard wizard;
    private const int warehouseWelcomePage = 1;
    private const int warehouseSelection = 2;
    private const int workTransTypeSelection = 3;
    private const int defaultSetupPage = 4;
    private const int salesStageSetupPage = 5;
    private const int packingPreferencePage = 6;
    private const int containerTypeAndGroupPage = 7;
    private const int releaseContainerPage = 8;
    private const int sortingAreaSetupPage = 9;
    private const int stagingAreaSetupPage = 10;
    private const int finalShipingAreaSetupPage = 11;
    private const int setupCompletePage = 12;

    private int currentFromTab;

}
]]></Source>
			</Method>
			<Method>
				<Name>wizard</Name>
				<Source><![CDATA[
    internal WHSWarehouseInitiationWizard wizard()
    {
        return wizard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (element.args().caller())
        {
            wizard = element.args().caller();
        }

        super();
        
        this.cleanSkipTabCaches();

        this.initWorkOrderTypeTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkOrderTypeTab</Name>
				<Source><![CDATA[
    private void initWorkOrderTypeTab()
    {
        container outboundWorkTransTypes = this.outboundWorkTransTypes();
        if (conLen(outboundWorkTransTypes) > 1)
        {
            this.enableWorkOrderTypeTab();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWorkOrderTypeTab</Name>
				<Source><![CDATA[
    private void enableWorkOrderTypeTab()
    {
        WorkOrderTypeTabPage.visible(true);

        this.wizard().skipTab(workTransTypeSelection, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkOrderTypeComboBoxOnce</Name>
				<Source><![CDATA[
    private void initWorkOrderTypeComboBoxOnce()
    {
        if (isWorkOrderTypeComboBoxInitialized)
        {
            return;
        }
        
        WorkOrderTypeComboBox.clear();
            
        DictEnum dictEnum = DictEnum::newFromName(enumStr(WHSWorkTransType));
        container outboundWorkTransTypes = this.outboundWorkTransTypes();
        for (int i = 1; i <= conLen(outboundWorkTransTypes); i++)
        {
            WHSWorkTransType inboundWorkTransType = conPeek(outboundWorkTransTypes, i);
            WorkOrderTypeComboBox.add(dictEnum.value2Label(any2Int(inboundWorkTransType)));
        }

        isWorkOrderTypeComboBoxInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundWorkTransTypes</Name>
				<Source><![CDATA[
    [Wrappable]
    internal container outboundWorkTransTypes()
    {
        return [WHSWorkTransType::Sales];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTransTypeCaption</Name>
				<Source><![CDATA[
    private void initWorkTransTypeCaption()
    {
        WHSWarehouseInitiationWizardWorkTransTypeLabels labels = wizard.context().workTransTypeLabels;

        FinalShipipingLocationDirectiveString.label(labels.finalShippingLocationDirective());
        FinalShippingWorkClassString.label(labels.finalShippingWorkClass());
        SalesPutLocDir.label(labels.outboundPutLocationDirective());
        SoPickLocationDirectiveString.label(labels.outboundPickLocationDirective());
        SoWorkTemplateString.label(labels.outboundWorkTemplate());
        SalesStagingLocationDirectiveString.label(labels.stagingLocationDirective());
        StagingLocationDirectiveString.label(labels.stagingLocationDirective());
        SalesStagingWorkClassString.label(labels.stagingWorkClass());
        StagingWorkClassString.label(labels.stagingWorkClass());
        WorkClass.label(labels.workClass());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWelcomeList</Name>
				<Source><![CDATA[
    private void initWelcomeList()
    {
        str welcomeList = '';
        
        welcomeList += this.buildWelcomeListItem(tablePName(WMSLocation));
        welcomeList += this.buildWelcomeListItem(tablePName(WHSLocDirHint));
        welcomeList += this.buildWelcomeListItem(tablePName(WHSWorkClassTable));
        welcomeList += this.buildWelcomeListItem(tablePName(WHSWorkTemplateTable));
        welcomeList += this.buildWelcomeListItem(tablePName(WHSLocDirTable));
        welcomeList += this.buildWelcomeListItem(tablePName(WHSWaveTemplateTable));

        WelcomeListText.text(welcomeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWelcomeListItem</Name>
				<Source><![CDATA[
    private str buildWelcomeListItem(str value)
    {
        const str prefix = ' - ';
        const str suffix = '\n';
        return prefix + value + suffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultGroupCaption</Name>
				<Source><![CDATA[
    private void initDefaultGroupCaption()
    {
        DefaultWorkTemplatesGroup.caption(tablePName(WHSWorkTemplateTable));
        DefaultWaveTemplatesGroup.caption(tablePName(WHSWaveTemplateTable));
        DefaultLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTabPage</Name>
				<Source><![CDATA[
    public void initTabPage(int _fromPage, int _toPage)
    {
        if (_fromPage == warehouseWelcomePage && _toPage == warehouseSelection)
        {
            this.initWarehouseSelectionFields();
            return;
        }
        if (_fromPage == defaultSetupPage && _toPage == salesStageSetupPage)
        {
            this.updateSalesStagingSetupNextEnabled();
            return;
        }
        if (_fromPage == salesStageSetupPage && _toPage == packingPreferencePage)
        {
            this.updateNextEnabledForPackingProcess();
            return;
        }
        if (_fromPage == packingPreferencePage && _toPage == containerTypeAndGroupPage)
        {
            element.setSkipTab();
            this.updateContainerTypePageNextEnable();
            return;
        }
        if (_fromPage == containerTypeAndGroupPage && _toPage == releaseContainerPage)
        {
            element.setSkipTab();
            this.updatePackingPlaceAfterShipmentNextEnable();
            return;
        }
        if (_fromPage == releaseContainerPage && _toPage == sortingAreaSetupPage)
        {
            element.setSkipTab();
            return;
        }
        if (_fromPage == sortingAreaSetupPage && _toPage == stagingAreaSetupPage)
        {
            if (!wizard.context().isMoveSortedContainersCreateWork)
            {
                wizard.context().isStagingEnabled = false;
                Tab.tabChanged(sortingAreaSetupPage, setupCompletePage);
            }
            return;
        }

        switch (_toPage)
        {
            case containerTypeAndGroupPage:
                if(_fromPage == stagingAreaSetupPage && !wizard.context().isPackWaveContainerCheckBoxEnabled)
                {
                    Tab.tabChanged(stagingAreaSetupPage, packingPreferencePage);
                }
                break;
            case releaseContainerPage:
                if(_fromPage == stagingAreaSetupPage && wizard.context().isManualPackingCheckBoxEnabled && wizard.context().isCreateWork)
                {
                    break;
                }
                else if(_fromPage == stagingAreaSetupPage && !wizard.context().isPackWaveContainerCheckBoxEnabled)
                {
                    Tab.tabChanged(stagingAreaSetupPage, packingPreferencePage);
                }
                
            case sortingAreaSetupPage:
                if(_fromPage == stagingAreaSetupPage && !wizard.context().isPackingBeforeShippingEnabled)
                {
                    Tab.tabChanged(stagingAreaSetupPage, packingPreferencePage);
                }
                else if(_fromPage == stagingAreaSetupPage && wizard.context().isManualPackingCheckBoxEnabled && wizard.context().isCreateWork)
                {
                    Tab.tabChanged(stagingAreaSetupPage, releaseContainerPage);
                }
                break;
            case stagingAreaSetupPage:
                if(_fromPage == finalShipingAreaSetupPage && wizard.context().isAvailableAtFinalShipping)
                {
                    Tab.tabChanged(finalShipingAreaSetupPage, releaseContainerPage);
                }
                else if(_fromPage == finalShipingAreaSetupPage && wizard.context().isPackWaveContainerCheckBoxEnabled)
                {
                    Tab.tabChanged(stagingAreaSetupPage, containerTypeAndGroupPage);
                }
                else if(_fromPage == finalShipingAreaSetupPage && !wizard.context().isPackingBeforeShippingEnabled)
                {
                    Tab.tabChanged(stagingAreaSetupPage, packingPreferencePage);
                }
                break;
            case finalShipingAreaSetupPage:
                if(_fromPage == setupCompletePage && wizard.context().isAvailableAtFinalShipping)
                {
                    Tab.tabChanged(setupCompletePage, releaseContainerPage);
                }
                else if(_fromPage == setupCompletePage && wizard.context().isAvailableAtSortingLoc &&  !wizard.context().isMoveSortedContainersCreateWork)
                {
                    Tab.tabChanged(setupCompletePage, sortingAreaSetupPage);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipTab</Name>
				<Source><![CDATA[
    public void setSkipTab(boolean _setEnableNext = true, int _formTab = 0)
    {
        boolean     packingIsSelected, manualPackingSelected, waveContainerSelected, availableAtFinalShippingSelected, availableCreateWorkSelected, sortConatinerCreateWork, availableAtSortingLocSelected;

        if (!wizard)
        {
            return;
        }
        
        packingIsSelected = wizard.context().isPackingBeforeShippingEnabled;
        manualPackingSelected = wizard.context().isManualPackingCheckBoxEnabled;
        waveContainerSelected = wizard.context().isPackWaveContainerCheckBoxEnabled;
        availableAtFinalShippingSelected =  wizard.context().isAvailableAtFinalShipping;
        availableCreateWorkSelected =  wizard.context().isCreateWork;
        availableAtSortingLocSelected =  wizard.context().isAvailableAtSortingLoc;
        sortConatinerCreateWork =  wizard.context().isMoveSortedContainersCreateWork;

        if (!packingIsSelected)
        {
            Tab.tabChanged(packingPreferencePage, finalShipingAreaSetupPage);
        }
        else if (waveContainerSelected)
        {
            wizard.skipTab(releaseContainerPage,  waveContainerSelected);
            wizard.skipTab(sortingAreaSetupPage, waveContainerSelected);
            wizard.skipTab(stagingAreaSetupPage, waveContainerSelected);
        }
        else if (manualPackingSelected && availableAtFinalShippingSelected && currentFromTab != 5 && currentFromTab != 6)
        {
            Tab.tabChanged(releaseContainerPage,  setupCompletePage);
        }
        else if (manualPackingSelected && availableCreateWorkSelected && currentFromTab != 5 && currentFromTab != 6)
        {
            Tab.tabChanged(releaseContainerPage,  stagingAreaSetupPage);
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesWorkTemplateCode</Name>
				<Source><![CDATA[
    internal edit WHSWorkTemplateCode editSalesWorkTemplateCode(boolean _set, WHSWorkTemplateCode _salesWorkTemplateCode)
    {
        if (_set)
        {
            wizard.context().salesWorkTemplateCode = strRTrim(_salesWorkTemplateCode);
        }

        return wizard.context().salesWorkTemplateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editShippingWaveTemplatesName</Name>
				<Source><![CDATA[
    internal edit WHSWaveTemplateName editShippingWaveTemplatesName(boolean _set, WHSWaveTemplateName _shippingWaveTemplatesName)
    {
        if (_set)
        {
            wizard.context().shippingWaveTemplateName = strRTrim(_shippingWaveTemplatesName);
        }

        return wizard.context().shippingWaveTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSoPickLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSoPickLocationDirectiveName(boolean _set, WHSLocDirName _soPickLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().soPickLocationDirectiveName = strRTrim(_soPickLocationDirectiveName);
        }

        return wizard.context().soPickLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehousesSelectionNextEnabled</Name>
				<Source><![CDATA[
    private void updateWarehousesSelectionNextEnabled()
    {
        Set warehouseIds = wizard.context().warehouseIds;
        boolean anyWarehouseSelected = warehouseIds && !warehouseIds.empty();
        wizard.nextEnabled(anyWarehouseSelected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiatlizaStagingSetup</Name>
				<Source><![CDATA[
    private void initiatlizaStagingSetup()
    {
        WHSParameters whsParameters = WHSParameters::find();
        boolean canSetupStaging = whsParameters.StageLocType && WHSLocationProfile::findFirstByLocationType(whsParameters.StageLocType);
        StagingSetupText.text("@WAX:WHSWarehouseInitiationWizard_StagingSetupDescription");
        
        if (canSetupStaging)
        {
            this.updateStagingSetupNextEnabled();
        }
        else
        {
            wizard.focusNextButton();
        }

        StagingLocationsGroup.caption(tablePName(WMSLocation));
        StagingDirectiveCodesGroup.caption(tablePName(WHSLocDirHint));
        StagingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        StagingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable)); 

        PackingStagingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        PackingStagingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));
        SortingStagingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        SortingStagingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));

        if (wizard.context().isAvailableAtSortingLoc)
        {
            StagingWorkClassesGroup.visible(false);
            StagingLocationDirectivesGroup.visible(false);

            PackingStagingWorkClassesGroup.visible(false);
            PackingStagingLocationDirectivesGroup.visible(false);
    
            SortingStagingWorkClassesGroup.visible(true);
            SortingStagingLocationDirectivesGroup.visible(true);
        }
        else if (wizard.context().isManualPackingCheckBoxEnabled)
        {
            StagingWorkClassesGroup.visible(false);
            StagingLocationDirectivesGroup.visible(false);

            PackingStagingWorkClassesGroup.visible(true);
            PackingStagingLocationDirectivesGroup.visible(true);
    
            SortingStagingWorkClassesGroup.visible(false);
            SortingStagingLocationDirectivesGroup.visible(false);
        }
        else
        {
            StagingWorkClassesGroup.visible(true);
            StagingLocationDirectivesGroup.visible(true);

            PackingStagingWorkClassesGroup.visible(false);
            PackingStagingLocationDirectivesGroup.visible(false);
    
            SortingStagingWorkClassesGroup.visible(false);
            SortingStagingLocationDirectivesGroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingSetupNextEnabled</Name>
				<Source><![CDATA[
    private void updateStagingSetupNextEnabled()
    {
        boolean isStagingDisabled = !wizard.context().isStagingEnabled;
        boolean nextEnabled = isStagingDisabled || this.isAllStagingMandatoryFieldsFilled();
        wizard.nextEnabled(nextEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllStagingMandatoryFieldsFilled</Name>
				<Source><![CDATA[
    private boolean isAllStagingMandatoryFieldsFilled()
    {
        return this.isMandatoryFormStringNotEmpty(StagingLocationString)
            && this.isMandatoryFormStringNotEmpty(StagingDirectiveCodeString)
            && this.isMandatoryFormStringNotEmpty(StagingWorkClassString)
            && this.isMandatoryFormStringNotEmpty(StagingLocationDirectiveString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsStagingEnabled</Name>
				<Source><![CDATA[
    private void editIsStagingEnabled(boolean _isStagingEnabled)
    {
        wizard.context().isStagingEnabled = _isStagingEnabled;
        element.updateStagingSetupNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsSalesStagingEnabled</Name>
				<Source><![CDATA[
    private void editIsSalesStagingEnabled(boolean _isSalesStagingEnabled)
    {
        wizard.context().isSalesStagingEnabled = _isSalesStagingEnabled;
        element.updateSalesStagingSetupNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStagingLocationId</Name>
				<Source><![CDATA[
    internal edit WMSLocationId editStagingLocationId(boolean _set, WMSLocationId _stagingLocationId)
    {
        if (_set)
        {
            wizard.context().stagingLocationId = strRTrim(_stagingLocationId);
            this.updateStagingSetupNextEnabled();
        }

        return wizard.context().stagingLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStagingDirectiveCode</Name>
				<Source><![CDATA[
    internal edit WHSLocDirHintCode editStagingDirectiveCode(boolean _set, WHSLocDirHintCode _stagingDirectiveCode)
    {
        if (_set)
        {
            wizard.context().stagingDirectiveCode = strRTrim(_stagingDirectiveCode);
            this.updateStagingSetupNextEnabled();
        }

        return wizard.context().stagingDirectiveCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSoStagingWorkClassId</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editSoStagingWorkClassId(boolean _set, WHSWorkClassId _soStagingWorkClassId)
    {
        if (_set)
        {
            wizard.context().soStagingWorkClassId = strRTrim(_soStagingWorkClassId);
            this.updateStagingSetupNextEnabled();
        }

        return wizard.context().soStagingWorkClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSoPutStagingLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSoPutStagingLocationDirectiveName(boolean _set, WHSLocDirName _soPutStagingLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().soPutStagingLocationDirectiveName = strRTrim(_soPutStagingLocationDirectiveName);
            this.updateStagingSetupNextEnabled();
        }

        return wizard.context().soPutStagingLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesStagingSetupNextEnabled</Name>
				<Source><![CDATA[
    private void updateSalesStagingSetupNextEnabled()
    {
        boolean isSalesStagingDisabled = !wizard.context().isSalesStagingEnabled;
        boolean nextEnabled = isSalesStagingDisabled || this.isAllSalesStagingMandatoryFieldsFilled();
        wizard.nextEnabled(nextEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllSalesStagingMandatoryFieldsFilled</Name>
				<Source><![CDATA[
    private boolean isAllSalesStagingMandatoryFieldsFilled()
    {
        return this.isMandatoryFormStringNotEmpty(SalesStagingLocationString)
            && this.isMandatoryFormStringNotEmpty(SalesStagingDirectiveCodeString)
            && this.isMandatoryFormStringNotEmpty(SalesStagingWorkClassString)
            && this.isMandatoryFormStringNotEmpty(SalesStagingLocationDirectiveString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesStagingLocationId</Name>
				<Source><![CDATA[
    internal edit WMSLocationId editSalesStagingLocationId(boolean _set, WMSLocationId _salesStagingLocationId)
    {
        if (_set)
        {
            wizard.context().salesStagingLocationId = strRTrim(_salesStagingLocationId);
            this.updateSalesStagingSetupNextEnabled();
        }

        return wizard.context().salesStagingLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesStagingDirectiveCode</Name>
				<Source><![CDATA[
    internal edit WHSLocDirHintCode editSalesStagingDirectiveCode(boolean _set, WHSLocDirHintCode _salesStagingDirectiveCode)
    {
        if (_set)
        {
            wizard.context().salesStagingDirectiveCode = strRTrim(_salesStagingDirectiveCode);
            this.updateSalesStagingSetupNextEnabled();
        }

        return wizard.context().salesStagingDirectiveCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesStagingWorkClassId</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editSalesStagingWorkClassId(boolean _set, WHSWorkClassId _salesStagingWorkClassId)
    {
        if (_set)
        {
            wizard.context().salesStagingWorkClassId = strRTrim(_salesStagingWorkClassId);
            this.updateSalesStagingSetupNextEnabled();
        }

        return wizard.context().salesStagingWorkClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesPutStagingLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSalesPutStagingLocationDirectiveName(boolean _set, WHSLocDirName _salesPutStagingLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().salesPutStagingLocationDirectiveName = strRTrim(_salesPutStagingLocationDirectiveName);
            this.updateSalesStagingSetupNextEnabled();
        }

        return wizard.context().salesPutStagingLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContainerGroupName</Name>
				<Source><![CDATA[
    internal edit WHSContainerGroupId editContainerGroupName(boolean _set, WHSContainerGroupId _groupName)
    {
        if (_set)
        {
            wizard.context().groupName = strRTrim(_groupName);
        }

        return wizard.context().groupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContainerBuildTemplate</Name>
				<Source><![CDATA[
    internal edit WHSContainerizationName editContainerBuildTemplate(boolean _set, WHSContainerizationName _containerBuildTemp)
    {
        if (_set)
        {
            wizard.context().containerBuildTemplateCode = strRTrim(_containerBuildTemp);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().containerBuildTemplateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editWaveStepCode</Name>
				<Source><![CDATA[
    internal edit WHSWaveStepCode editWaveStepCode(boolean _set, WHSWaveStepCode _waveStepCode)
    {
        if (_set)
        {
            wizard.context().waveStepCode = strRTrim(_waveStepCode);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().waveStepCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContainerPackingPolicy</Name>
				<Source><![CDATA[
    internal edit WHSCloseContainerProfileId editContainerPackingPolicy(boolean _set, WHSCloseContainerProfileId _containerPackingPolicy)
    {
        if (_set)
        {
            wizard.context().containerPackingPolicy = strRTrim(_containerPackingPolicy);
            this.updatePackingPlaceAfterShipmentNextEnable();
        }

        return wizard.context().containerPackingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProfId</Name>
				<Source><![CDATA[
    internal edit WHSPackProfileId editProfId(boolean _set, WHSPackProfileId _packingProfileId)
    {
        if (_set)
        {
            wizard.context().packingProfileId = strRTrim(_packingProfileId);
            this.updatePackingPlaceAfterShipmentNextEnable();
        }

        return wizard.context().packingProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDirCode</Name>
				<Source><![CDATA[
    internal edit WHSLocDirHintCode editDirCode(boolean _set, WHSLocDirName _directiveCode)
    {
        if (_set)
        {
            wizard.context().packingDirectiveCode = strRTrim(_directiveCode);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().packingDirectiveCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editWorkClass</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editWorkClass(boolean _set, WHSWorkClassId _workClassToPackStation)
    {
        if (_set)
        {
            wizard.context().workClassToPackStation = strRTrim(_workClassToPackStation);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().workClassToPackStation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSalesPutLocDir</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSalesPutLocDir(boolean _set, WHSLocDirName _salesPutLocDir)
    {
        if (_set)
        {
            wizard.context().salesPutLocDir = strRTrim(_salesPutLocDir);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().salesPutLocDir;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPackLoc</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editPackLoc(boolean _set, WHSLocDirName _packLocation)
    {
        if (_set)
        {
            wizard.context().packLocation = strRTrim(_packLocation);
            this.updateNextEnabledForPackingProcess();
        }

        return wizard.context().packLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editWorkTempName</Name>
				<Source><![CDATA[
    internal edit WHSWorkTemplateCode editWorkTempName(boolean _set, WHSWorkTemplateCode _packStationToWorkTempName)
    {
        if (_set)
        {
            wizard.context().packStationWorkTempName = strRTrim(_packStationToWorkTempName);
            this.updatePackingPlaceAfterShipmentNextEnable();
        }
        return wizard.context().packStationWorkTempName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSortingWorkTemplateName</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editSortingWorkTemplateName(boolean _set, WHSWorkClassId _packStationToWorkTempName)
    {
        if (_set)
        {
            wizard.context().sortingWorkTemplateName = strRTrim(_packStationToWorkTempName);
            this.updateSortingAreaSetupNextEnable();
        }

        return wizard.context().sortingWorkTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSortingFinalShippingLocationId</Name>
				<Source><![CDATA[
    internal edit WMSLocationId  editSortingFinalShippingLocationId(boolean _set, WMSLocationId _sortingFinalShippingLocationId)
    {
        if (_set)
        {
            wizard.context().sortingFinalShippingLocationId = strRTrim(_sortingFinalShippingLocationId);
            this.updateSortingAreaSetupNextEnable();
        }

        return wizard.context().sortingFinalShippingLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPackingFinalShippingLocationId</Name>
				<Source><![CDATA[
    internal edit WMSLocationId  editPackingFinalShippingLocationId(boolean _set, WMSLocationId _packingFinalShippingLocationId)
    {
        if (_set)
        {
            wizard.context().packingFinalShippingLocationId = strRTrim(_packingFinalShippingLocationId);
            this.updatePackingPlaceAfterShipmentNextEnable();
        }

        return wizard.context().packingFinalShippingLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFinalShippingSetup</Name>
				<Source><![CDATA[
    private void initializeFinalShippingSetup()
    {
        WHSParameters whsParameters = WHSParameters::find();
        boolean canSetupFinalShipping = whsParameters.ShipFinalLocType && WHSLocationProfile::findFirstByLocationType(whsParameters.ShipFinalLocType);
        if (canSetupFinalShipping)
        {
            FinalShippingSetupText.text("@WAX:WHSWarehouseInitiationWizard_FinalShippingDescription");
            FinalShippingSetupGroup.enabled(true);

            this.updateFinalShippingSetupNextEnabled();
        }
        else
        {
            FinalShippingSetupText.text("@WAX:WHSWarehouseInitiationWizard_FinalShippingWarningDescription");
            FinalShippingSetupGroup.enabled(false);
            
            wizard.focusNextButton();
        }

        FinalShippingLocationsGroup.caption(tablePName(WMSLocation));
        FinalShippingDirectiveCodesGroup.caption(tablePName(WHSLocDirHint));
        FinalShippingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        FinalShippingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));
        PackingFinalShippingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        PackingFinalShippingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));
        SortingFinalShippingWorkClassesGroup.caption(tablePName(WHSWorkClassTable));
        SortingFinalShippingLocationDirectivesGroup.caption(tablePName(WHSLocDirTable));

        if (wizard.context().isAvailableAtSortingLoc)
        {
            FinalShippingWorkClassesGroup.visible(false);
            FinalShippingLocationDirectivesGroup.visible(false);

            PackingFinalShippingWorkClassesGroup.visible(false);
            PackingFinalShippingLocationDirectivesGroup.visible(false);
    
            SortingFinalShippingWorkClassesGroup.visible(true);
            SortingFinalShippingLocationDirectivesGroup.visible(true);
        }
        else if(wizard.context().isManualPackingCheckBoxEnabled)
        {
            FinalShippingWorkClassesGroup.visible(false);
            FinalShippingLocationDirectivesGroup.visible(false);

            PackingFinalShippingWorkClassesGroup.visible(true);
            PackingFinalShippingLocationDirectivesGroup.visible(true);
    
            SortingFinalShippingWorkClassesGroup.visible(false);
            SortingFinalShippingLocationDirectivesGroup.visible(false);
        }
        else
        {
            FinalShippingWorkClassesGroup.visible(true);
            FinalShippingLocationDirectivesGroup.visible(true);

            PackingFinalShippingWorkClassesGroup.visible(false);
            PackingFinalShippingLocationDirectivesGroup.visible(false);
    
            SortingFinalShippingWorkClassesGroup.visible(false);
            SortingFinalShippingLocationDirectivesGroup.visible(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinalShippingSetupNextEnabled</Name>
				<Source><![CDATA[
    private void updateFinalShippingSetupNextEnabled()
    {
        boolean nextEnabled = this.isAllFinalShippingMandatoryFieldsFilled();
        wizard.nextEnabled(nextEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllFinalShippingMandatoryFieldsFilled</Name>
				<Source><![CDATA[
    private boolean isAllFinalShippingMandatoryFieldsFilled()
    {
        
        if (wizard.context().isAvailableAtSortingLoc)
        {
            return this.isMandatoryFormStringNotEmpty(FinalShippingLocationString)
            && this.isMandatoryFormStringNotEmpty(FinalShippingDirectiveCodeString)
            && this.isMandatoryFormStringNotEmpty(SortingFinalShippingWorkClassString)
            && this.isMandatoryFormStringNotEmpty(SortingFinalShipipingLocationDirectiveString);
        }
        else if (wizard.context().isManualPackingCheckBoxEnabled)
        {
            return this.isMandatoryFormStringNotEmpty(FinalShippingLocationString)
            && this.isMandatoryFormStringNotEmpty(FinalShippingDirectiveCodeString)
            && this.isMandatoryFormStringNotEmpty(PackingFinalShippingWorkClassString)
            && this.isMandatoryFormStringNotEmpty(PackingFinalShipipingLocationDirectiveString);
        }

        return this.isMandatoryFormStringNotEmpty(FinalShippingLocationString)
            && this.isMandatoryFormStringNotEmpty(FinalShippingDirectiveCodeString)
            && this.isMandatoryFormStringNotEmpty(FinalShippingWorkClassString)
            && this.isMandatoryFormStringNotEmpty(FinalShipipingLocationDirectiveString);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFinalShippingLocationId</Name>
				<Source><![CDATA[
    internal edit WMSLocationId editFinalShippingLocationId(boolean _set, WMSLocationId _finalShippingLocationId)
    {
        if (_set)
        {
            wizard.context().finalShippingLocationId = strRTrim(_finalShippingLocationId);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().finalShippingLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFinalShippingDirectiveCode</Name>
				<Source><![CDATA[
    internal edit WHSLocDirHintCode editFinalShippingDirectiveCode(boolean _set, WHSLocDirHintCode _finalShippingDirectiveCode)
    {
        if (_set)
        {
            wizard.context().finalShippingDirectiveCode = strRTrim(_finalShippingDirectiveCode);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().finalShippingDirectiveCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSoFinalShippingWorkClassId</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editSoFinalShippingWorkClassId(boolean _set, WHSWorkClassId _soFinalShippingWorkClassId)
    {
        if (_set)
        {
            wizard.context().soFinalShippingWorkClassId = strRTrim(_soFinalShippingWorkClassId);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().soFinalShippingWorkClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSoPutFinalShippingLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSoPutFinalShippingLocationDirectiveName(boolean _set, WHSLocDirName _soPutFinalShippingLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().soPutFinalShippingLocationDirectiveName = strRTrim(_soPutFinalShippingLocationDirectiveName);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().soPutFinalShippingLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPackingFinalShippingWorkClassId</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editPackingFinalShippingWorkClassId(boolean _set, WHSWorkClassId _packingFinalShippingWorkClassId)
    {
        if (_set)
        {
            wizard.context().packingFinalShippingWorkClassId = strRTrim(_packingFinalShippingWorkClassId);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().packingFinalShippingWorkClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPackingPutFinalShippingLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editPackingPutFinalShippingLocationDirectiveName(boolean _set, WHSLocDirName _packingPutFinalShippingLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().packingPutFinalShippingLocationDirectiveName = strRTrim(_packingPutFinalShippingLocationDirectiveName);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().packingPutFinalShippingLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSortingFinalShippingWorkClassId</Name>
				<Source><![CDATA[
    internal edit WHSWorkClassId editSortingFinalShippingWorkClassId(boolean _set, WHSWorkClassId _sortingFinalShippingWorkClassId)
    {
        if (_set)
        {
            wizard.context().sortingFinalShippingWorkClassId = strRTrim(_sortingFinalShippingWorkClassId);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().sortingFinalShippingWorkClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSortingPutFinalShippingLocationDirectiveName</Name>
				<Source><![CDATA[
    internal edit WHSLocDirName editSortingPutFinalShippingLocationDirectiveName(boolean _set, WHSLocDirName _sortingPutFinalShippingLocationDirectiveName)
    {
        if (_set)
        {
            wizard.context().sortingPutFinalShippingLocationDirectiveName = strRTrim(_sortingPutFinalShippingLocationDirectiveName);
            this.updateFinalShippingSetupNextEnabled();
        }

        return wizard.context().sortingPutFinalShippingLocationDirectiveName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editWarehouseGroupId</Name>
				<Source><![CDATA[
    internal edit WhsWarehouseGroupId editWarehouseGroupId(boolean _set, WhsWarehouseGroupId _warehouseGroupId)
    {
        if(_set)
        {
            wizard.context().warehouseGroupId = _warehouseGroupId;
        }
        return wizard.context().warehouseGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOutboundSortTemp</Name>
				<Source><![CDATA[
    internal edit WHSOutboundSortTemplateId editOutboundSortTemp(boolean _set, WHSOutboundSortTemplateId _outboundSortTemp)
    {
        if(_set)
        {
            wizard.context().outboundSortTemp = _outboundSortTemp;
            this.updateSortingAreaSetupNextEnable();
        }
        return wizard.context().outboundSortTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSortLocation</Name>
				<Source><![CDATA[
    internal edit WMSLocationId editSortLocation(boolean _set, WMSLocationId _sortLocation)
    {
        if(_set)
        {
            wizard.context().sortLocation = _sortLocation;
            this.updateSortingAreaSetupNextEnable();
        }
        return wizard.context().sortLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsPackingGroupEnabled</Name>
				<Source><![CDATA[
    private void setIsPackingGroupEnabled(boolean _isPackingGroupEnabled)
    {
        if (!_isPackingGroupEnabled)
        {
            wizard.context().isManualPackingCheckBoxEnabled = false;
            wizard.context().isPackWaveContainerCheckBoxEnabled = false;
            PackWaveContainerCheckBox.checked(false);
            ManualPackingCheckBox.checked(false);
            wizard.nextEnabled(true);
        }
        else
        {
            wizard.nextEnabled(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initSummaryListViewColumns</Name>
				<Source><![CDATA[
    private void initSummaryListViewColumns()
    {
        FormListControl listView = SetupCompleteSummaryListView;
        listView.addColumn(1, new FormListColumn("@SYS7576"));
        listView.addColumn(2, new FormListColumn("@SYS55971"));
        listView.addColumn(3, new FormListColumn("@SYS55972"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWarehouseSetupCompleteSummary</Name>
				<Source><![CDATA[
    private void buildWarehouseSetupCompleteSummary()
    {
        SetupCompleteSummaryListView.deleteAll();

        SetEnumerator summaryEnumerator = wizard.buildSummary();
        int rowIndex = 0;
        while (summaryEnumerator.moveNext())
        {
            WHSWarehouseInitiationWizardSummaryItem item = summaryEnumerator.current();
            str col1Text = item.entityType;
            str col2Text = int2Str(item.entitiesToCreateCount());
            str col3Text = int2Str(item.existingEntitiesCount());
            this.addSummaryRow(rowIndex, col1Text, col2Text, col3Text);

            rowIndex++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSummaryRow</Name>
				<Source><![CDATA[
    private void addSummaryRow(int _rowIndex, str _col1Text, str _col2Text, str _col3Text)
    {
        FormListItem item = new FormListItem(_col1Text);
        item.idx(_rowIndex);
        SetupCompleteSummaryListView.addItem(item);
        SetupCompleteSummaryListView.setText(_rowIndex, _col2Text, 1);
        SetupCompleteSummaryListView.setText(_rowIndex, _col3Text, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryFormStringNotEmpty</Name>
				<Source><![CDATA[
    private boolean isMandatoryFormStringNotEmpty(FormStringControl formString)
    {
        return !formString.mandatory() || formString.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseSelectionFields</Name>
				<Source><![CDATA[
    public void initWarehouseSelectionFields()
    {
        WarehouseGroupId.mandatory(WarehouseGroupAllComboBox.selection() == WhsWarehouseGroupAll::Group);
        WarehouseGroupId.visible(WarehouseGroupAllComboBox.selection() == WhsWarehouseGroupAll::Group);
        WarehousesSelectionGrid.enabled(WarehouseGroupAllComboBox.selection() == WhsWarehouseGroupAll::Warehouse);
        WarehouseGroupId.text('');
        wizard.context().warehouseGroupId = WarehouseGroupId.valueStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouseSelectionNextEnable</Name>
				<Source><![CDATA[
    public void updateWarehouseSelectionNextEnable()
    {
        switch (WarehouseGroupAllComboBox.selection())
        {
            case WhsWarehouseGroupAll::All:
                wizard.nextEnabled(true);
                break;
            case WhsWarehouseGroupAll::Group:
                wizard.nextEnabled(WarehouseGroupId.valueStr() != '');
                break;
            case WhsWarehouseGroupAll::Warehouse:
                Set warehouseIds = wizard.context().warehouseIds;
                boolean anyWarehouseSelected = warehouseIds && !warehouseIds.empty();
                wizard.nextEnabled(anyWarehouseSelected);
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWarehouseLocationsOfWarehouseGroup</Name>
				<Source><![CDATA[
    public void loadWarehouseLocationsOfWarehouseGroup(WhsWarehouseGroupId _warehouseGroupId)
    {
        QueryBuildDataSource qbdsWarehouseGroupLink = InventLocation_ds.query().dataSourceTable(tableNum(WhsWarehouseGroupLink));
        
        if (qbdsWarehouseGroupLink)
        {
            qbdsWarehouseGroupLink.clearRanges();
            qbdsWarehouseGroupLink.addRange(fieldNum(WhsWarehouseGroupLink, WarehouseGroupId)).value(queryValue(_warehouseGroupId));
        
            qbdsWarehouseGroupLink.enabled(true);
        }
        
        InventLocation_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadWarehouseLocations</Name>
				<Source><![CDATA[
    public void reloadWarehouseLocations()
    {
        QueryBuildDataSource qbdsWarehouseGroupLink = InventLocation_ds.query().dataSourceTable(tableNum(WhsWarehouseGroupLink));

        if (qbdsWarehouseGroupLink)
        {
            qbdsWarehouseGroupLink.clearRanges();
            qbdsWarehouseGroupLink.enabled(false);
        }
          
        InventLocation_ds.executeQuery();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNextEnabledForPackingProcess</Name>
				<Source><![CDATA[
    public void updateNextEnabledForPackingProcess()
    {
        if(!DefaultPackingGroup.optionValue())
        {
            wizard.nextEnabled(true);
        }
        if (DefaultPackingGroup.optionValue() && wizard.context().isPackWaveContainerCheckBoxEnabled && !this.isMandatoryFormStringNotEmpty(ContainerBuildTemp) && !this.isMandatoryFormStringNotEmpty(WaveStepCode))
        {
            wizard.nextEnabled(false);
        }
        else if(DefaultPackingGroup.optionValue() &&  wizard.context().isManualPackingCheckBoxEnabled  && !this.isMandatoryForManualPackingFieldsNotEmpty())
        {
            wizard.nextEnabled(false);
        }
        else if(DefaultPackingGroup.optionValue() &&  !wizard.context().isManualPackingCheckBoxEnabled  && !wizard.context().isPackWaveContainerCheckBoxEnabled)
        {
            wizard.nextEnabled(false);
        }
        else
        {
            wizard.nextEnabled(true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerFields</Name>
				<Source><![CDATA[
    public void updateContainerFields()
    {
        if(wizard.context().isManualPackingCheckBoxEnabled)
        {
            ManualPackFields.visible(true);
            WaveContainerFields.visible(false);
        }
        else
        {
            ManualPackFields.visible(false);
            WaveContainerFields.visible(true);
        }

        ContainerGroupId.mandatory(!wizard.context().isManualPackingCheckBoxEnabled);
        ContainerGroupId.visible(!wizard.context().isManualPackingCheckBoxEnabled);

        this.updateMandatoryContainerFields();
        this.updateNextEnabledForPackingProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRadioButtons</Name>
				<Source><![CDATA[
    public void resetRadioButtons()
    {
        wizard.context().isAvailableAtFinalShipping = false;
        wizard.context().isCreateWork = false;
        wizard.context().isAvailableAtSortingLoc = false;
        wizard.context().isMoveSortedContainersCreateWork = false;

        AvailableAtFinalShipping.checked(false);
        CreateWork.checked(false);
        AvailableAtSortingLoc.checked(false);
        MoveSortedContainersCreateWork.checked(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMandatoryContainerFields</Name>
				<Source><![CDATA[
    public void updateMandatoryContainerFields()
    {
        if(wizard.context().isManualPackingCheckBoxEnabled)
        {
            ContainerBuildTemp.mandatory(false);
            WaveStepCode.mandatory(false);
            
            WHSWarehouseInitiationWizardWorkTransTypeLabels labels = wizard.context().workTransTypeLabels;

            DirCode.mandatory(true);
            DirCode.text("@WAX:WHSWarehouseInitiationWizard_DirectiveCode");
            WorkClass.mandatory(true);
            WorkClass.text(labels.defaultWorkClassToPackStation());
            SalesPutLocDir.mandatory(true);
            SalesPutLocDir.text(labels.defaultOutboundPutLocDir());
            PackLoc.mandatory(true);
            PackLoc.text("@WAX:WHSWarehouseInitiationWizard_PackLocation");
            
        }
        else
        {
            ContainerBuildTemp.mandatory(true);
            WaveStepCode.mandatory(true);

            DirCode.mandatory(false);
            WorkClass.mandatory(false);
            SalesPutLocDir.mandatory(false);
            PackLoc.mandatory(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerTypePageNextEnable</Name>
				<Source><![CDATA[
    public void updateContainerTypePageNextEnable()
    {
        if(PackWaveContainerCheckBox.checked() && (wizard.context().selectedTypes.empty() || !this.isMandatoryFormStringNotEmpty(ContainerGroupId)))
        {
            wizard.nextEnabled(false);
        }
        else if((ManualPackingCheckBox.checked() && wizard.context().selectedTypes.empty()) || (ManualPackingCheckBox.checked() && !this.isManualPackingMaxWeightSelectionCorrect() ) )
        {
            wizard.nextEnabled(false);
        }
        else 
        {
            wizard.nextEnabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualPackingMaxWeightSelectionCorrect</Name>
				<Source><![CDATA[
    public boolean isManualPackingMaxWeightSelectionCorrect()
    {
        int size = wizard.context().selectedTypes.elements();
        
        if(size != 1)
        {
            return false;
        }

        SetEnumerator type = wizard.context().selectedTypes.getEnumerator();
        while (type.moveNext())
        {
            str containerType = type.current();
            WHSContainerType selectedType = WHSContainerType::find(containerType);

            if (selectedType.MaxWeight == 0)
            {
                return false;
            }

        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryForManualPackingFieldsNotEmpty</Name>
				<Source><![CDATA[
    public boolean isMandatoryForManualPackingFieldsNotEmpty()
    {
        return this.isMandatoryFormStringNotEmpty(DirCode) &&
               this.isMandatoryFormStringNotEmpty(WorkClass) &&
               this.isMandatoryFormStringNotEmpty(SalesPutLocDir) &&
               this.isMandatoryFormStringNotEmpty(PackLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingPlaceAfterShipmentNextEnable</Name>
				<Source><![CDATA[
    public void updatePackingPlaceAfterShipmentNextEnable()
    {
        PackingPolicy.mandatory(true);
        WHSContainerType_UnitId.mandatory(true);
        ProfId.mandatory(true);

        if(AvailableAtSortingLoc.checked())
        {
            wizard.nextEnabled(this.isMandatoryFieldsNotEmpty());
        }
        else if(CreateWork.checked())
        {
            wizard.nextEnabled(this.isMandatoryFieldsNotEmpty() && this.isMandatoryFormStringNotEmpty(WorkTempName));
        }
        else if(AvailableAtFinalShipping.checked())
        {
            wizard.nextEnabled(this.isMandatoryFieldsNotEmpty() && this.isMandatoryFormStringNotEmpty(FinalShippingLocation));
        }
        else
        {
            wizard.nextEnabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryFieldsNotEmpty</Name>
				<Source><![CDATA[
    public boolean isMandatoryFieldsNotEmpty()
    {
        return this.isMandatoryFormStringNotEmpty(PackingPolicy) && this.isMandatoryFormStringNotEmpty(WHSContainerType_UnitId) && this.isMandatoryFormStringNotEmpty(ProfId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingPlaceAfterShipment</Name>
				<Source><![CDATA[
    public void updatePackingPlaceAfterShipment(str _selection)
    {
        switch (_selection)
        {
            case 'AvailableAtFinalShipping':
                CreateWork.checked(false);
                AvailableAtSortingLoc.checked(false);
                break;
            case 'CreateWork':
                AvailableAtFinalShipping.checked(false);
                AvailableAtSortingLoc.checked(false);
                break;
            case 'AvailableAtSortingLoc':
                AvailableAtFinalShipping.checked(false);
                CreateWork.checked(false);
                break;
        }
        this.updatePackingPlaceAfterShipmentNextEnable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortingAreaSetupNextEnable</Name>
				<Source><![CDATA[
    private void updateSortingAreaSetupNextEnable()
    {
        Location.mandatory(true);
        OutboundSortTemp.mandatory(true);
        boolean containerFieldsNotEmpty = this.isMandatoryForAvailableAtSortingLocFieldsNotEmpty();
       
        wizard.nextEnabled(containerFieldsNotEmpty);

        if(MoveSortedContainersCreateWork.checked())
        {
            wizard.nextEnabled(containerFieldsNotEmpty && this.isMandatoryFormStringNotEmpty(SortingWorkTemplateName));
        }
        else
        {
            wizard.nextEnabled(containerFieldsNotEmpty && this.isMandatoryFormStringNotEmpty(SortingFinalShippingLocation));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryForCreateWorkFieldsNotEmpty</Name>
				<Source><![CDATA[
    public boolean isMandatoryForCreateWorkFieldsNotEmpty()
    {
        return this.isMandatoryFormStringNotEmpty(WorkTempName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryForAvailableAtSortingLocFieldsNotEmpty</Name>
				<Source><![CDATA[
    public boolean isMandatoryForAvailableAtSortingLocFieldsNotEmpty()
    {
        return this.isMandatoryFormStringNotEmpty(Location) &&
            this.isMandatoryFormStringNotEmpty(OutboundSortTemp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanSkipTabCaches</Name>
				<Source><![CDATA[
    public void cleanSkipTabCaches()
    {
        wizard.setTabsToSkip(4, false);
        wizard.setTabsToSkip(5, false);
        wizard.setTabsToSkip(6, false);
        wizard.setTabsToSkip(7, false);
        wizard.setTabsToSkip(8, false);
        wizard.setTabsToSkip(9, false);
        wizard.setTabsToSkip(10, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSortTabPageFields</Name>
				<Source><![CDATA[
    public void initSortTabPageFields()
    {
        MoveSortedContainersCreateWork.checked(1);
        wizard.context().isMoveSortedContainersCreateWork = true;
        SortingFinalShippingLocation.visible(false);
        SortingWorkTemplateName.visible(true);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventLocation</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
    
            this.loadOnlyWhsEnabledWarehouses();
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();
        
            this.updateSelectedWarehousesContext();
            element.updateWarehouseSelectionNextEnable();
        }

]]></Source>
					</Method>
					<Method>
						<Name>loadOnlyWhsEnabledWarehouses</Name>
						<Source><![CDATA[
        private void loadOnlyWhsEnabledWarehouses()
        {
            QueryBuildDataSource qbds = InventLocation_ds.query().dataSourceTable(tableNum(InventLocation));
            qbds.addRange(fieldNum(InventLocation, WHSEnabled)).value(queryValue(NoYes::Yes));

            qbds.clearDynalinks();
            qbds.clearLinks();
            
            QueryBuildDataSource qbdsWarehouseGroupLink = qbds.addDataSource(tableNum(WhsWarehouseGroupLink));

            qbdsWarehouseGroupLink.addLink(fieldNum(InventLocation, InventLocationId), fieldNum(WhsWarehouseGroupLink, InventLocationId));
            qbdsWarehouseGroupLink.joinMode(JoinMode::InnerJoin);
            qbdsWarehouseGroupLink.enabled(false);

            InventLocation_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateSelectedWarehousesContext</Name>
						<Source><![CDATA[
        private void updateSelectedWarehousesContext()
        {
            Array markedRecords = InventLocation_ds.recordsMarked();
            
            Set selectedWarehouseIds = new Set(Types::String);
            for(int i = 1; i <= markedRecords.lastIndex(); i++)
            {
                int markedRowIndex = markedRecords.value(i);
                InventLocation warehouse = InventLocation_ds.cursor(markedRowIndex);
                
                selectedWarehouseIds.add(warehouse.InventLocationId);
            }
        
            WHSWarehouseInitiationWizardContext context = wizard.context();
            context.warehouseIds = selectedWarehouseIds;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>WHSContainerType</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
    
            this.loadTypes();
        }

]]></Source>
					</Method>
					<Method>
						<Name>markChanged</Name>
						<Source><![CDATA[
        public void markChanged()
        {
            super();
            this.updateSelectedTypeContext();
            element.updateContainerTypePageNextEnable();
        }

]]></Source>
					</Method>
					<Method>
						<Name>loadTypes</Name>
						<Source><![CDATA[
        private void loadTypes()
        {
            QueryBuildDataSource qbds = WHSContainerType_ds.query().dataSourceTable(tableNum(WHSContainerType));
            
            WHSContainerType_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>updateSelectedTypeContext</Name>
						<Source><![CDATA[
        private void updateSelectedTypeContext()
        {
            Array markedRecords = WHSContainerType_ds.recordsMarked();
            
            Set selectedTypes = new Set(Types::String);
            for(int i = 1; i <= markedRecords.lastIndex(); i++)
            {
                int markedRowIndex = markedRecords.value(i);
                WHSContainerType type = WHSContainerType_ds.cursor(markedRowIndex);
                
                selectedTypes.add(type.ContainerTypeCode);
            }
        
            WHSWarehouseInitiationWizardContext context = wizard.context();
            context.selectedTypes = selectedTypes;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        void tabChanged(int fromTab, int toTab)
        {
            super(fromTab, toTab);
            element.currentFromTab = fromTab;
            element.initTabPage(fromTab, toTab);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WelcomeTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();

            element.initWelcomeList();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WarehouseSelectionTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            
            element.updateWarehouseSelectionNextEnable();

            InventLocation_ds.research(true);

            this.markSelectedWarehouseIds();
        }

]]></Source>
					</Method>
					<Method>
						<Name>markSelectedWarehouseIds</Name>
						<Source><![CDATA[
        private void markSelectedWarehouseIds()
        {
            Set warehouseIds = element.wizard().context().warehouseIds;
            InventLocation warehouse;
            for (
                warehouse = InventLocation_ds.getFirst();
                warehouse;
                warehouse = InventLocation_ds.getNext())
            {
                if (warehouseIds.in(warehouse.InventLocationId))
                {
                    InventLocation_ds.markRecord(warehouse, 1);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WarehouseGroupAllComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            element.initWarehouseSelectionFields();
            element.reloadWarehouseLocations();
            wizard.context().warehouseIds = new Set(Types::String);
            wizard.context().warehouseSelection = this.selection();
            element.updateWarehouseSelectionNextEnable();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WarehouseGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
    
            if(WarehouseGroupId)
            {
                WarehousesSelectionGrid.enabled(false);
                element.loadWarehouseLocationsOfWarehouseGroup(WarehouseGroupId.valueStr());
                element.updateWarehouseSelectionNextEnable();
                wizard.context().warehouseGroupId = this.valueStr();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WorkOrderTypeTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            element.initWorkOrderTypeComboBoxOnce();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WorkOrderTypeComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
        
            WHSWorkTransType workTransType;
            workTransType = str2enum(workTransType, this.getText(this.selection()));

            wizard.setOutboundWorkTransType(workTransType);
            
            element.initWorkTransTypeCaption();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DefaultSetupTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();

            element.initDefaultGroupCaption();
            element.initWorkTransTypeCaption();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SoWorkTemplateString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShippingWaveTemplateString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SoPickLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingSetupTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingSetupGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
    
            boolean isStagingEnabled = this.optionValue();
            element.editIsSalesStagingEnabled(isStagingEnabled);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingLocationString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingDirectiveCodeString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SalesStagingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DefaultPackingGroupSetupTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DefaultPackingGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
            
            boolean isClicked = this.optionValue();
            wizard.context().isPackingBeforeShippingEnabled = isClicked;
            ManualPackFields.visible(false);
            WaveContainerFields.visible(false);
            element.updateNextEnabledForPackingProcess();
            element.setIsPackingGroupEnabled(isClicked);
            if(!wizard.context().isPackingBeforeShippingEnabled)
            {
                StagingSetupGroup.optionValue(0);
                element.editIsStagingEnabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ManualPackingCheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            PackWaveContainerCheckBox.checked(!this.checked());
            wizard.context().isManualPackingCheckBoxEnabled = this.checked();
            wizard.context().isPackWaveContainerCheckBoxEnabled = !this.checked();
            element.resetRadioButtons();
            element.updateContainerFields();
            wizard.setTabsToSkip(7, false);
            wizard.setTabsToSkip(8, false);
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PackWaveContainerCheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            ManualPackingCheckBox.checked(!this.checked());
            wizard.context().isManualPackingCheckBoxEnabled = !this.checked();
            wizard.context().isPackWaveContainerCheckBoxEnabled = this.checked();
            element.resetRadioButtons();
            element.updateContainerFields();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ContainerGroupId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            element.updateContainerTypePageNextEnable();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WHSContainerType_UnitId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            
            wizard.context().whsContainerTypeUnitId = this.valueStr();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AvailableAtFinalShipping</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            wizard.context().isAvailableAtFinalShipping = this.checked();
            wizard.context().isAvailableAtSortingLoc = !this.checked();
            wizard.context().isCreateWork = !this.checked();

            if(wizard.context().isAvailableAtFinalShipping)
            {
                wizard.context().isStagingEnabled = false;
            }
            
            FinalShippingLocation.visible(this.checked());
            FinalShippingLocation.mandatory(this.checked());
            WorkTempName.visible(false);
            WorkTempName.mandatory(false);

            element.updatePackingPlaceAfterShipment('AvailableAtFinalShipping');
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateWork</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            wizard.context().isCreateWork = this.checked();
            wizard.context().isAvailableAtSortingLoc = !this.checked();
            wizard.context().isAvailableAtFinalShipping = !this.checked();
            
            FinalShippingLocation.visible(false);
            FinalShippingLocation.mandatory(false);
            WorkTempName.visible(this.checked());
            WorkTempName.mandatory(this.checked());

            element.updatePackingPlaceAfterShipment('CreateWork');
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AvailableAtSortingLoc</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            wizard.context().isAvailableAtSortingLoc = this.checked();
            wizard.context().isAvailableAtFinalShipping = !this.checked();
            wizard.context().isCreateWork = !this.checked();

            FinalShippingLocation.visible(false);
            FinalShippingLocation.mandatory(false);
            WorkTempName.visible(false);
            WorkTempName.mandatory(false);

            element.updatePackingPlaceAfterShipment('AvailableAtSortingLoc');
            if (wizard.context().isAvailableAtSortingLoc)
            {
                element.initSortTabPageFields();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShippingLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingAreaSetupTab</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            
            element.updateSortingAreaSetupNextEnable();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MoveSortedContainersCreateWork</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            wizard.context().isMoveSortedContainersCreateWork = this.checked();
            
            SortingWorkTemplateName.visible(this.checked());
            SortingWorkTemplateName.mandatory(this.checked());

            SortingFinalShippingLocation.visible(!this.checked());
            SortingFinalShippingLocation.mandatory(!this.checked());

            if(!wizard.context().isMoveSortedContainersCreateWork)
            {
                wizard.context().isStagingEnabled = false;
            }
            
            element.updateSortingAreaSetupNextEnable();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingFinalShippingLocation</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingSetupTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            
            element.initiatlizaStagingSetup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingSetupGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            boolean isStagingEnabled = this.optionValue();
            element.editIsStagingEnabled(isStagingEnabled);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingLocationString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingDirectiveCodeString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StagingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PackingStagingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PackingStagingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingStagingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingStagingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShippingSetupTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            
            element.initializeFinalShippingSetup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShippingLocationString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShippingDirectiveCodeString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShippingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinalShipipingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PackingFinalShippingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PackingFinalShipipingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingFinalShippingWorkClassString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SortingFinalShipipingLocationDirectiveString</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            // Not calling super() to disable lookup
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            // Not calling super() to prevent the autofilling of existing value
            return this.text();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WarehouseSetupCompleteTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            
            element.buildWarehouseSetupCompleteSummary();
            
            element.wizard().focusFinishButton();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        protected void initialize()
        {
            super();
        
            element.initSummaryListViewColumns();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventLocation</Name>
			<Table>InventLocation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllowLaborStandards</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllowMarkingReservationRemoval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoUpdateShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BranchNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidateShipAtRTW</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount_HU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CycleCountAllowPalletMove</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DecrementLoadLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultContainerTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultKanbanFinishedGoodsLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProductionFinishGoodsLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProductionInputLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultQualityMaintenanceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultReturnCreditOnlyLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultShipMaintenanceLoc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>emptyPalletLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnableQualityManagement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FSHStore</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventCountingGroup_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationIdGoodsInRoute_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationIdQuarantine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationIdReqMain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationIdTransit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventUseDefaultProductionLocationForFormulaBOM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoadReleaseReservationPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxPickingRouteTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>maxPickingRouteVolume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroup_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>pickingLineTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrintBOLBeforeShipConfirm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProdReserveOnlyWhse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RBODefaultInventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RBODefaultWMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RBODefaultWMSPalletId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseToWarehouseRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemoveInventBlockingOnStatusChange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqCalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqRefill</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReserveAtLoadPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailInventNegFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailInventNegPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailWeightEx1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailWMSLocationIdDefaultReturn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailWMSPalletIdDefaultReturn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UniqueCheckDigits</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>useWMSOrders</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccountCustom_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WarehouseAutoReleaseReservation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WHSEnabled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WHSProdOrderBackflushMustUseReservedQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WHSRawMaterialPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSAisleNameActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSLevelFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSLevelNameActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSlocationIdDefaultIssue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSLocationIdDefaultReceipt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSLocationIdGoodsInRoute_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPositionFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSPositionNameActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSRackFormat</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WMSRackNameActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkProcessingPolicyName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSContainerType</Name>
			<Table>WHSContainerType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ContainerAttributeCode[1]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerAttributeCode[2]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerAttributeCode[3]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerAttributeCode[4]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerHeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerLength</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerVolume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerWidth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlexibleVolumeDimensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Height</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Length</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaxVolume</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaxWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TareWeight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Width</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WhsWarehouseGroupLink</Name>
			<Table>WhsWarehouseGroupLink</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WarehouseGroupId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>WHSContainerGroup</Name>
			<Table>WHSContainerGroup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ContainerGroupDesc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContainerGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@WAX:WHSWarehouseInitiationWizard_Title</Caption>
		<Pattern xmlns="">Wizard</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Wizard</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>WelcomeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>WelcomeText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_Description</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WelcomeGroup</Name>
								<Pattern>FillText</Pattern>
								<PatternVersion>UX7 1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>WelcomeListText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>StaticText</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Style>MainInstruction</Style>
										<Text></Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_WelcomeStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>WarehouseSelectionTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>WarehouseSelectionText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_WarehouseSelectionDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WarehousesSelectionGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>WarehouseGroupAllComboBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>WhsWarehouseGroupAll</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WarehouseGroupId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>WhsWarehouseGroupId</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>WarehousesSelectionGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WarehouseId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventLocationId</DataField>
												<DataSource>InventLocation</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Name</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>InventLocation</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SiteId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InventSiteId</DataField>
												<DataSource>InventLocation</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>InventLocation</DataSource>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_WarehouseSelectionStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>WorkOrderTypeTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>WorkOrderTypeText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_WorkOrderTypeSelectionDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WorkOrderTypeGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>WorkOrderTypeComboBox</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>WHSWorkTransType</EnumType>
										<Selection>1</Selection>
										<Items />
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_WorkOrderTypeStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DefaultSetupTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>DefaultSetupText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_DefaultSetupDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DefaultEntitiesGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DefaultWorkTemplatesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SoWorkTemplateString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSalesWorkTemplateCode</DataMethod>
												<LookupButton>Never</LookupButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DefaultWaveTemplatesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ShippingWaveTemplateString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editShippingWaveTemplatesName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_ShippingWaveTemplate</Label>
												<LookupButton>Never</LookupButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DefaultLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SoPickLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoPickLocationDirectiveName</DataMethod>
												<LookupButton>Never</LookupButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_DefaultStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SalesStagingSetupTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>StagingSetupTextCopy1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_StagingSetupDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesStagingSetupGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SalesStagingLocationsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesStagingLocationString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSalesStagingLocationId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_StagingLocation</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SalesStagingDirectiveCodesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesStagingDirectiveCodeString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSalesStagingDirectiveCode</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_StagingDirectiveCode</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SalesStagingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesStagingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSalesStagingWorkClassId</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SalesStagingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SalesStagingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSalesPutStagingLocationDirectiveName</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@WAX:WHSWarehouseInitiationWizard_StagingQuestion</Caption>
								<FrameOptionButton>Check</FrameOptionButton>
								<OptionValue>0</OptionValue>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_StagingStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DefaultPackingGroupSetupTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>PackingDescriptionText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_DefaultPackingDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DefaultPackingGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AnswerGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>ManualPackingCheckBox</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>CheckBox</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_DefaultPackingManualPack</Label>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>PackWaveContainerCheckBox</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>CheckBox</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_DefaultPackingWaveContainerizationPack</Label>
												<Style>Checkbox</Style>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalWrap</ArrangeMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ManualPackFields</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>WorkTempFields</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DirCode</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editDirCode</DataMethod>
														<Label>@WAX:WHSWarehouseInitiationWizard_LocationDirCode</Label>
														<LookupButton>Hidden</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>WorkClass</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editWorkClass</DataMethod>
														<LookupButton>Hidden</LookupButton>
													</AxFormControl>
												</Controls>
												<Caption>@WAX:WHSWarehouseInitiationWizard_WorkTemplateFields</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PackStationField</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PackLoc</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editPackLoc</DataMethod>
														<Label>@WAX:WHSWarehouseInitiationWizard_PackLocation</Label>
														<LookupButton>Hidden</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SalesPutLocDir</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editSalesPutLocDir</DataMethod>
														<LookupButton>Hidden</LookupButton>
													</AxFormControl>
												</Controls>
												<Caption>@WAX:WHSWarehouseInitiationWizard_PackStationField</Caption>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalWrap</ArrangeMethod>
										<ColumnsMode>Fill</ColumnsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WaveContainerFields</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ContainerBuildTemp</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editContainerBuildTemplate</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_ContainerTemplate</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WaveStepCode</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editWaveStepCode</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_WaveStepCode</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
										</Controls>
										<ColumnsMode>Fill</ColumnsMode>
										<Caption>@WAX:WHSWarehouseInitiationWizard_Container</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@WAX:WHSWarehouseInitiationWizard_DefaultPackingQuestion</Caption>
								<FrameOptionButton>Check</FrameOptionButton>
								<OptionValue>0</OptionValue>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_DefaultPackingGroup</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ContainerTypeTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ContainerTypeText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_PackingStepText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ContainerTypeAndGroupGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>TypeGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ContainerTypeCreation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneControl">
														<Name>ContainerGridToolbar</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ActionPane</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormButtonGroupControl">
																<Name>ContainerTypeButtonGroup</Name>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Left>0</Left>
																<Type>ButtonGroup</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormCommandButtonControl">
																		<Name>ContainerTypeAdd</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741822</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>CommandButton</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Command>New</Command>
																		<NormalImage>Add</NormalImage>
																		<ShowShortCut>No</ShowShortCut>
																		<Text>@SYS124603</Text>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCommandButtonControl">
																		<Name>ContainerTypeDelete</Name>
																		<Type>CommandButton</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Command>DeleteRecord</Command>
																	</AxFormControl>
																</Controls>
																<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
														</Controls>
														<Style>Strip</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>ContainerTypeGrid</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Grid</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>WHSContainerType_ContainerTypeCode</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ContainerTypeCode</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>WHSContainerType_Description</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Description</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_TareWeight</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>TareWeight</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_MaxWeight</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>MaxWeight</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_MaxVolume</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>MaxVolume</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_Height</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Height</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_Length</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Length</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>WHSContainerType_Width</Name>
																<Type>Real</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Width</DataField>
																<DataSource>WHSContainerType</DataSource>
															</AxFormControl>
														</Controls>
														<BackgroundColor>ButtonFace3D</BackgroundColor>
														<DataSource>WHSContainerType</DataSource>
														<VisibleRows>7</VisibleRows>
														<VisibleRowsMode>Fixed</VisibleRowsMode>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ContainerGroupId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editContainerGroupName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_ContainerGroup</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
										</Controls>
										<Caption>@WAX:WHSWarehouseInitiationWizard_ContainerGroup</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_ContainerTypeAndGroup</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ContainerPlaceAfterRelease</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>ContainerPlaceDescription</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_ContainerPlaceDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ContainerShouldPlacedOptions</Name>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ContainerFields</Name>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PackingPolicy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editContainerPackingPolicy</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_ContainerPackingPolicy</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WHSContainerType_UnitId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>WHSWeightUOM</ExtendedDataType>
												<Label>@WAX:WHSWarehouseInitiationWizard_ContainerWeightUnit</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProfId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editProfId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_PackingProfileId</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalWrap</ArrangeMethod>
										<Caption>@WAX:WHSWarehouseInitiationWizard_ContainerFields</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PlaceAfterRelease</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AvailableAtFinalShipping</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_AvailableAtFinal</Label>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>CreateWork</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_ToStagingLoc</Label>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AvailableAtSortingLoc</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_AvailableAtSortingLoc</Label>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FinalShippingLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editPackingFinalShippingLocationId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_PackingAvailableAtFinalLocation</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>WorkTempName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editWorkTempName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_WorkTemplateWorkTempName</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalWrap</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_ContainerPlaceAfterRelease</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SortingAreaSetupTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>LocationText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_PackingAfterReleaseText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SortingLocation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SortLoc</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Location</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSortLocation</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_SortLocation</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>OutboundSortTemp</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editOutboundSortTemp</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_OutboundSortingTemplate</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MoveTo</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>MoveSortedContainersCreateWork</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@WAX:WHSWarehouseInitiationWizard_MoveToStaging</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingWorkTemplateName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSortingWorkTemplateName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_WorkTemplateWorkTempName</Label>
												<LookupButton>Hidden</LookupButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingFinalShippingLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSortingFinalShippingLocationId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_SortFinalShippingLocation</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@WAX:WHSWarehouseInitiationWizard_SortLocation</Caption>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalWrap</ArrangeMethod>
						<Caption>@WAX:WHSWarehouseInitiationWizard_SortingAreaSetup</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>StagingSetupTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>StagingSetupText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_StagingSetupDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>StagingSetupGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StagingLocationsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StagingLocationString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editStagingLocationId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_StagingLocation</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StagingDirectiveCodesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StagingDirectiveCodeString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editStagingDirectiveCode</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_StagingDirectiveCode</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StagingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StagingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoStagingWorkClassId</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StagingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StagingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoPutStagingLocationDirectiveName</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PackingStagingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PackingStagingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoStagingWorkClassId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_PackingStagingWorkClass</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PackingStagingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PackingStagingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoPutStagingLocationDirectiveName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_PackingStagingLocationDirective</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SortingStagingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingStagingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoStagingWorkClassId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_SortingStagingWorkClass</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SortingStagingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingStagingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoPutStagingLocationDirectiveName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_SortingStagingLocationDirective</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@WAX:WHSWarehouseInitiationWizard_StagingQuestion</Caption>
								<FrameOptionButton>Check</FrameOptionButton>
								<OptionValue>0</OptionValue>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_ContainerStagingStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FinalShippingSetupTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>FinalShippingSetupText</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_FinalShippingDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FinalShippingSetupGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FinalShippingLocationsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FinalShippingLocationString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editFinalShippingLocationId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalShippingLocation</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FinalShippingDirectiveCodesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FinalShippingDirectiveCodeString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editFinalShippingDirectiveCode</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalShippingDirectiveCode</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FinalShippingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FinalShippingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoFinalShippingWorkClassId</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FinalShippingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>FinalShipipingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSoPutFinalShippingLocationDirectiveName</DataMethod>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PackingFinalShippingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PackingFinalShippingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editPackingFinalShippingWorkClassId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalPackingShippingWorkClass</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PackingFinalShippingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PackingFinalShipipingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editPackingPutFinalShippingLocationDirectiveName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalPackingShippingLocationDirective</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SortingFinalShippingWorkClassesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingFinalShippingWorkClassString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSortingFinalShippingWorkClassId</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalSortingShippingWorkClass</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SortingFinalShippingLocationDirectivesGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>SortingFinalShipipingLocationDirectiveString</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editSortingPutFinalShippingLocationDirectiveName</DataMethod>
												<Label>@WAX:WHSWarehouseInitiationWizard_FinalSortingShippingLocationDirective</Label>
												<LookupButton>Never</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_FinalShippingStep</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>WarehouseSetupCompleteTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>SetupCompleteText</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Style>MainInstruction</Style>
								<Text>@WAX:WHSWarehouseInitiationWizard_WarehouseSetupCompleteDescription</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SetupCompleteGroup</Name>
								<Pattern>ToolbarList</Pattern>
								<PatternVersion>1.2</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormListViewControl">
										<Name>SetupCompleteSummaryListView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>ListView</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackStyle>Transparent</BackStyle>
										<BackgroundColor>InactiveBorder</BackgroundColor>
										<ColorScheme>WindowsPalette</ColorScheme>
										<ColumnHeaderButton>Yes</ColumnHeaderButton>
										<ViewType>Report</ViewType>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@WAX:WHSWarehouseInitiationWizard_SetupCompleteStep</Caption>
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>