<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>Essentialsdashboard</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using System.Web;
[Form]
public class Essentialsdashboard extends FormRun
{
    // form level variables to store control values.
    boolean hideCB, demoMode = false, gettingStartedTrial = false;
    TilePaneStyle  style = TilePaneStyle::Dashboard_wideTiles;
    FormRunConfiguration formRunConfiguration;

    #Admin
    #define.CurrentVersion(1)
    #localmacro.CurrentList
       hideCB
    #endmacro
    #define.ModeKey('mode')
    #define.ShowGettingStartedKeyValue('trial')
    #define.ShowDemoKeyValue('demo')

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        // check for URL options
        this.checkURL();

        // check if Getting Started should be loaded
        if (gettingStartedTrial)
        {
            //Show the "Getting started" section if the library id is specified in the web.config file
            if (SysGettingStartedHelper::GettingStartedLibraryExists())
            {
                GuideList.visible(true);
            }
        }
        this.loadTitle();
        this.loadData();

        this.loadNavigationTree();
        this.loadTilesDisplayProperty();

        this.loadGetStartedBanner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads up the forms data and is also called from init and refresh
    /// </summary>
    public void loadData()
    {
        this.loadWorkItems();
        this.loadFavorites();
        this.loadRecents();
        this.loadTaskGuideData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the URL to see if demo mode or trial mode has been started
    /// </summary>
    public void checkURL()
    {
        // If user is a trial user, show the getting started banner.
        if (RetailTrialUserManagement::isRetailTrialUser())
        {
            gettingStartedTrial = true;
            
        }
        else 
        {
            // If the URL has the demo mode set to true, show the getting started banner.
            Microsoft.Dynamics.Client.ServerForm.Contexts.SessionContext sessionContext = Microsoft.Dynamics.Client.ServerForm.Contexts.SessionContext::Current;
            if (sessionContext && sessionContext.RequestUrl)
            {
                System.Uri uri = new System.Uri(UrlUtility::getUrl());
                System.String[] modeKeyValue = HttpUtility::ParseQueryString(uri.Query).GetValues(#ModeKey);

                if (modeKeyValue != null && modeKeyValue.Length >= 1)
                {
                    int i = 0;
                    while (i < modeKeyValue.Length)
                    {
                        if (strLwr(HttpUtility::UrlDecode(modeKeyValue.Get(i))) == #ShowGettingStartedKeyValue
                            || RetailTrialUserManagement::isRetailTrialUser())
                        {
                            gettingStartedTrial = true;
                        }

                        if (strLwr(HttpUtility::UrlDecode(modeKeyValue.Get(i))) == #ShowDemoKeyValue)
                        {
                            demoMode = true;
                        }

                        i++;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGetStartedBanner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the text and visibility of the Get Started banner.
    /// </summary>
    private void loadGetStartedBanner()
    {
        GetStartedBanner.parmTitle(strFmt("@RetailGetStarted:GetStartedBannerTitleFormat", this.getUserName(curUserId())));

        // Show the Get Started banner ONLY for Retail-Sku trial mode.
        if (gettingStartedTrial 
            && RetailSMB::IsCommerceProductSkuFamily() 
            && RetailSMB::IsRetailSMBEnabled())
        {
            GetStartedBanner.visible(true);
        }
        else
        {
            GetStartedBanner.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name of a user by UserId.
    /// </summary>
    /// <param name = "_userId">Id of the user.</param>
    /// <returns>Name for the given user id.</returns>
    private str getUserName(UserId _userId)
    {
        var personUser = DirPersonUser::find(_userId);

        if (personUser)
        {
            var person = DirPerson::find(personUser.PersonParty);
            var personName = DirPersonName::find(personUser.PersonParty);

            if (person && personName)
            {
                return person.name(PersonName);
            }
        }

        return xUserInfo::find(false, _userId).name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the company title
    /// </summary>
    public void loadTitle()
    {
        CompanyInfo companyInfo = CompanyInfo::find();		

        // Use the company name if it is available for companies other than 'DAT', otherwise fall back to the product name.
        if (companyInfo.name && curExt() != #DATCompany)
        {
            element.design().caption(companyInfo.name);
        }
        else
        {
            element.design().caption(RetailSMB::GetOfferingProductName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorkItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the workflow status and get tasks assigned to me - add to Tasks list
    /// </summary>
    public void loadWorkItems()
    {
        WorkflowWorkItemTable workitems;
        WorkflowTrackingStatusTable  workflowTrackingStatusTable;
        int controlCounter = 0;
        str buttonText;

        WorkItemsNoValues.visible(false);

        // see if we need to init the control
        if (WorkItemsList.controlCount() > 1)
        {
            FormFunctionButtonControl formControl;
            FormGroupControl  formGroup;

            for (int i = WorkItemsList.controlCount(); i > 1; i--)
            {
                formControl = WorkItemsList.controlNum(i);
                element.design().removeControl(formControl.id());
            }
        }

        while select workitems where workitems.Status == WorkflowWorkItemStatus::Pending && workitems.UserId == curUserId()
        {
            FormFunctionButtonControl   formFunctionButtonControl;

            formFunctionButtonControl = WorkItemsList.addControl(FormControlType::MenuFunctionButton, strAlpha(int642Str(workitems.RecId)));

            workflowTrackingStatusTable.clear();
            select firstonly workflowTrackingStatusTable where workflowTrackingStatusTable.ContextRecId == workitems.RefRecId && workflowTrackingStatusTable.Owner == curUserId();

            if (workflowTrackingStatusTable.DocumentType != null)
            {
                buttonText = strFmt("@SYS191501", workflowTrackingStatusTable.DocumentType,  workitems.Subject);
            }
            else
            {
                buttonText = workitems.Subject;
            }

            formFunctionButtonControl.text(buttonText);
            formFunctionButtonControl.helpText(workitems.Description);
            formFunctionButtonControl.menuItemName('WorkflowWorkListAssignedToMe');
            formFunctionButtonControl.style(ButtonStyle::Link);
            controlCounter++;
            if (controlCounter > 10)
            {
                formFunctionButtonControl = WorkItemsList.addControl(FormControlType::MenuFunctionButton, strAlpha('seemore'));

                formFunctionButtonControl.text("@REX:SeeMoreLink");
                formFunctionButtonControl.menuItemName('WorkflowWorkListAssignedToMe');
                formFunctionButtonControl.style(ButtonStyle::Link);
                break;
            }
        }
        if (controlCounter < 1)
        {
            WorkItemsNoValues.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFavorites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the favorites navigation object and build links
    /// </summary>
    public void loadFavorites()
    {
        SysMenuNavigationUserItemsManager sysMenuNavigationDataProvider = SysMenuNavigationUserItemsManager::construct();
        sysMenuNavigationDataProvider.loadFavoriteMenuItems();
        SysMenuNavigationPage favoriteMenuItems = sysMenuNavigationDataProvider.getMenuNavigationObject();
        MenuItemType menuItemType;

        List items = favoriteMenuItems.GetDataContract();
        ListEnumerator enumerator = items.getEnumerator();
        int controlCounter = 0;

        FavoritesNoValues.visible(false);

        // see if we need to init the control
        if (Favorites.controlCount() > 1)
        {
            FormFunctionButtonControl formControl;
            FormGroupControl  formGroup;

            for (int i = Favorites.controlCount(); i > 1; i--)
            {
                formControl = Favorites.controlNum(i);
                element.design().removeControl(formControl.id());
            }
        }

        if (items.elements() > 0)
        {
            while (enumerator.moveNext())
            {
                SysMenuNavigationMenuItemButton item = enumerator.current();

                FormFunctionButtonControl   formFunctionButtonControl;
                str controlName = strFmt('_favoriteLink_AX_%1', controlCounter);
                controlCounter++;
                formFunctionButtonControl = Favorites.addControl(FormControlType::MenuFunctionButton, controlName);

                formFunctionButtonControl.text(item.getLabel());
                formFunctionButtonControl.menuItemType(str2Enum(menuItemType, item.getMenuItemType()));
                formFunctionButtonControl.menuItemName(item.getMenuItemName());
                formFunctionButtonControl.style(ButtonStyle::Link);
            }
            Favorites.optionValue(1);
        }
        else
        {
            FavoritesNoValues.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRecents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the Recents navigation object and build links
    /// </summary>
    public void loadRecents()
    {
        SysMenuNavigationUserItemsManager sysMenuNavigationDataProvider = SysMenuNavigationUserItemsManager::construct();
        sysMenuNavigationDataProvider.loadRecentlyUsedMenuItems();
        SysMenuNavigationPage RecentMenuItems = sysMenuNavigationDataProvider.getMenuNavigationObject();
        MenuItemType menuItemType;

        List items = RecentMenuItems.GetDataContract();
        ListEnumerator enumerator = items.getEnumerator();
        int controlCounter = 0;

        RecentsNoValues.visible(false);
        // see if we need to init the control
        if (Recents.controlCount() > 1)
        {
            FormFunctionButtonControl formControl;
            FormGroupControl  formGroup;

            for (int i = Recents.controlCount(); i > 1; i--)
            {
                formControl = Recents.controlNum(i);
                element.design().removeControl(formControl.id());
            }
        }
        if (items.elements() > 0)
        {
            while (enumerator.moveNext())
            {
                SysMenuNavigationMenuItemButton item = enumerator.current();

                FormFunctionButtonControl   formFunctionButtonControl;
                str controlName = strFmt('_recentLink_AX_%1', controlCounter);
                controlCounter++;
                formFunctionButtonControl = Recents.addControl(FormControlType::MenuFunctionButton, controlName);

                formFunctionButtonControl.text(item.getLabel());
                formFunctionButtonControl.menuItemType(str2Enum(menuItemType, item.getMenuItemType()));
                formFunctionButtonControl.menuItemName(item.getMenuItemName());
                formFunctionButtonControl.style(ButtonStyle::Link);
            }
            Recents.optionValue(0);
        }
        else
        {
            RecentsNoValues.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaskGuideData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the task guide data
    /// </summary>
    public void loadTaskGuideData()
    {
        if (GuideList.visible())
        {
            GuideList.optionValue(1);

            // see if we need to init the control
            if (TaskGuides.controlCount() > 0)
            {
                FormButtonControl formControl;

                for (int i = TaskGuides.controlCount(); i > 0; i--)
                {
                    formControl = TaskGuides.controlNum(i);
                    element.design().removeControl(formControl.id());
                }
            }

            if (SysGettingStartedHelper::PopulateTaskGuides() && SysGettingStartedHelper::TasksGuidesPopulated())
            {
                TaskGuidesNotFound.visible(false);
                SysGettingStartedTaskGuides guide;

                // read guide and build menu function buttons
                while select guide
                {
                    FormButtonControl formButtonControl;

                    formButtonControl = TaskGuides.addControl(FormControlType::Button, strAlpha(int642Str(guide.RecId)));
                    formButtonControl.text(guide.Name);
                    formButtonControl.helpText(guide.Description);
                    formButtonControl.style(ButtonStyle::Link);
                    formButtonControl.registerOverrideMethod(methodstr(FormButtonControl, clicked), "GettingStartedTask_Clicked", this);
                }
            }
            else
            {
                TaskGuidesNotFound.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNavigationTree</Name>
				<Source><![CDATA[
    public void loadNavigationTree()
    {
        SysMenuNavigationTilePaneBuilder tilePaneBuilder = SysMenuNavigationTilePaneBuilder::construct();
        tilePaneBuilder.build(TilePageContainer,TilePaneRootMenu::NavPaneMenu,style);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTilesDisplayProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build details can populate each workspace with the tiles on that workspace so the dashboard has a card view per workspace
    /// currently this is not used but leaving the code for future usage
    /// </summary>
    public void loadTilesDisplayProperty()
    {
        #Properties

        int iLoop = 0;

        //Gets the loaded configuration record.
        formRunConfiguration = element.configurationHelper().loadConfigurationRecord();
        
        if (TilePageContainer.controlCount() > 0)
        {
            FormGroupControl            formGroup;
            TileButtonControl           tileButtonControl;
            FormRunConfigurationProperty    configurationProperty;
            
            int iTilecount = TilePageContainer.controlCount();
            for(int i = 1; i <= iTilecount; i++)
            {
                formGroup = TilePageContainer.controlNum(i);

                if (formGroup.controlCount() > 0)
                {
                    tileButtonControl = formGroup.controlNum(1);

                    str workspaceName = tileButtonControl.name();

                    if (formRunConfiguration)
                    {
                        select firstonly configurationProperty
                        where   configurationProperty.Configuration  == formRunConfiguration.RecId
                        &&  configurationProperty.Control        == workspaceName
                        &&  configurationProperty.Property          == #PropertyVisible; //visible property

                        if (configurationProperty.RecId != 0)
                        {
                            tileButtonControl.visible(configurationProperty.Value != #PropertyValueFalse);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GettingStartedTask_Clicked</Name>
				<Source><![CDATA[
    public void GettingStartedTask_Clicked(FormControl _sender)
    {
        SysGettingStartedHelper::OpenTaskGuide(_sender as FormButtonControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        hideCB = CBHideGettingStarted.value();
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        hideCB = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLastValue</Name>
				<Source><![CDATA[
    public void saveLastValue()
    {
        xSysLastValue::saveLast(this);

        // hide getting started and check box
        GuideList.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #Task

        int ret;

        if (_taskId == #taskRefresh || _taskId == #taskF5)
        {
            this.loadData();
        }
        ret = super(_taskId);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CBHideGettingStarted</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.saveLastValue();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@RetailOffering:ProductName</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Workspace</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<WindowType xmlns="">ContentPage</WindowType>
		<Controls xmlns="">
			<AxFormControl>
				<Name>GetStartedBanner</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension>
					<Name>GetStartedBanner</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>parmTitle</Name>
							<Type>String</Type>
							<Value>@RetailGetStarted:GetStarted</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>parmDescription</Name>
							<Type>String</Type>
							<Value>@RetailGetStarted:GetStartedBannerDescription</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>parmGetStartedMenuItemType</Name>
							<Type>Enum</Type>
							<TypeName>MenuItemType</TypeName>
							<Value>Display</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>parmGetStartedMenuItemName</Name>
							<Type>ExtendedDataType</Type>
							<TypeName>MenuItemName</TypeName>
							<Value>RetailGetStarted</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>parmShowFormCaptionOnHide</Name>
							<Type>Enum</Type>
							<TypeName>NoYes</TypeName>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>EssentialsDashboardBody</Name>
				<Type>Tab</Type>
				<WidthMode>SizeToContent</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EssentialsMenuItemsLinks</Name>
						<ExtendedStyle>panoramaItem_backgroundNone</ExtendedStyle>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EssentialsMenuItems</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LeftMenuItemGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ProductsAndCategoriesCopy1</Name>
												<ConfigurationKey>Retail</ConfigurationKey>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailProductsByCategory</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailProductsByCategory</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailReleasedProductsByCategory</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailReleasedProductsByCategory</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailKitListPage</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailKitListPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>EcoResKitsPerCompanyListPage</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>EcoResKitsPerCompanyListPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailCategoryManagement</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailCategoryManagement</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<Caption>@Retail:ProductsAndCategoriesId</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CatalogsAndAssortmentsCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailCatalogs</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailCatalogs</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailAssortmentGridView</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailAssortmentGridView</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<Caption>@Retail:CatalogsAndAssortmentsId</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PricingAndDiscountsCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountsAll</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountsAll</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountOffer</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountOffer</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountMixAndMatch</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountMixAndMatch</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountMultibuy</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountMultibuy</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountThreshold</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountThreshold</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailCoupon</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailCoupon</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailDiscountPromotion</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailDiscountPromotion</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailCategoryPriceRule</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailCategoryPriceRule</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailAffiliations</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>RetailAffiliations</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<Caption>@REX:PricingAndDiscounts</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
										</Controls>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RightMenuItemGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ChannelsCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailSPOnlineStoreListView</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<CopyCallerQuery>Yes</CopyCallerQuery>
														<MenuItemName>RetailSPOnlineStoreListView</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailStoreTable</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailStoreTable</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailMCRChannelListView</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailMCRChannelListView</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<HideIfEmpty>No</HideIfEmpty>
												<Caption>@Retail:RetailChannelsId</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>EmployeeCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailWorkers</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>HcmWorkerListPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SysUserInfoPage</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>SysUserInfoPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>HcmJobList</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>HcmJobList</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>HcmPositionList</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>HcmPositionList</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailPosPermissionGroup</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailPosPermissionGroup</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<HideIfEmpty>No</HideIfEmpty>
												<Caption>@SYS31454</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CustomersCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>MCRCustomerService</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>MCRCustomerService</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>CustTableListPage</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>CustTableListPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SalesTableListPage</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>SalesTableListPage</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<HideIfEmpty>No</HideIfEmpty>
												<Caption>@SYS11307</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InventoryManagementsCopy1</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>RetailInventOnHandQuantity</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>RetailInventOnHandQuantity</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>InventJournalTableCount</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>InventJournalTableCount</MenuItemName>
														<Style>Link</Style>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Auto</ArrangeMethod>
												<HideIfEmpty>No</HideIfEmpty>
												<Caption>@Retail:RetailInventoryId</Caption>
												<FrameOptionButton>Hide</FrameOptionButton>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<Caption>@SYS72248</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>WorkSpaceTab</Name>
						<ExtendedStyle>panoramaItem_backgroundNone</ExtendedStyle>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TilePageContainer</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>dashboard_flexTileContainer</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<Width>300</Width>
								<WidthMode>Manual</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS:Platform_Menu_ColHeading_Workspaces</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PerformancePowerBiTab</Name>
						<ExtendedStyle>panoramaItem_backgroundNone</ExtendedStyle>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>PowerBiTab</Name>
								<Type>Tab</Type>
								<WidthMode>SizeToContent</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>PowerBITabPage</Name>
										<Pattern>SectionPowerBI</Pattern>
										<PatternVersion>1.0</PatternVersion>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl>
												<Name>PowerBIControl</Name>
												<FormControlExtension>
													<Name>PowerBIControl</Name>
													<ExtensionComponents />
													<ExtensionProperties />
												</FormControlExtension>
											</AxFormControl>
										</Controls>
										<Caption>@PowerBIIntegration:PowerBISectionCaption</Caption>
									</AxFormControl>
								</Controls>
								<ShowTabs>No</ShowTabs>
							</AxFormControl>
						</Controls>
						<Caption>@SYS120223</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ShortcutsTab</Name>
						<ExtendedStyle>panoramaItem_backgroundNone</ExtendedStyle>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RightPaneGroup</Name>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Favorites</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>FavoritesNoValues</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>Auto</HeightMode>
												<Type>StaticText</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Text>@CLINavigationBar:NavigationPane_EmptyFavorites</Text>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@ApplicationFoundation:Favorites</Caption>
										<FrameOptionButton>Hide</FrameOptionButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Recents</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>RecentsNoValues</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>StaticText</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Text>@CLINavigationBar:NavigationPane_EmptyRecents</Text>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@ApplicationFoundation:Recent</Caption>
										<FrameOptionButton>Hide</FrameOptionButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WorkItemsList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>WorkItemsNoValues</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>StaticText</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Text>@Client:EmptyWorkItems</Text>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@SYS313051</Caption>
										<FrameOptionButton>Hide</FrameOptionButton>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GuideList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>group_dashboardLists</ExtendedStyle>
										<NeededPermission>Manual</NeededPermission>
										<Type>Group</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStaticTextControl">
												<Name>TaskGuidesNotFound</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>StaticText</Type>
												<Visible>No</Visible>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@GettingStarted:TaskGuidesNotFound</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>TaskGuides</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<NeededPermission>Manual</NeededPermission>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>GroupHideCB</Name>
												<NeededPermission>Manual</NeededPermission>
												<Type>Group</Type>
												<Visible>No</Visible>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>CBHideGettingStarted</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<NeededPermission>Manual</NeededPermission>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<Label>@GettingStarted:DoNotShowAgain</Label>
														<Style>Checkbox</Style>
														<ViewEditMode>Edit</ViewEditMode>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalRight</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<HideIfEmpty>No</HideIfEmpty>
										<Caption>@GettingStarted:GettingStartedCaption</Caption>
										<FrameOptionButton>Hide</FrameOptionButton>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>No</AllowUserSetup>
						<Caption>@Retail:ShortcutsId</Caption>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Panorama</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>