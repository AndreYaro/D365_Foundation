<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResAddResourceForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResAddResourceForm extends FormRun
{
    #TimeConstants

    HcmWorkerRecId  workerRecId;

}
]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Worker</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup existing HCM worker.
        /// </summary>
        public void lookup()
        {
            ProjWorkerLookup::lookupResourceWorker(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update worker field to display the worker name.
        /// </summary>
        /// <returns>
        /// Boolean of modification.
        /// </returns>
        public boolean modified()
        {
            boolean ret = super();

            if (this.text())
            {
                HcmPersonnelNumberId workerPersonnelNumberId = this.text();
                workerRecId = HcmWorker::findByPersonnelNumber(workerPersonnelNumberId).RecId;
                DirPartyName workerName = HcmWorker::worker2Name(workerRecId);
                HcmEmployment hcmEmployment = HcmEmployment::findByWorkerLegalEntity(workerRecId, CompanyInfo::current());

                worker.text(workerName);
                ResourceName.text(workerName);
                
                if (hcmEmployment)
                {
                    WorkCalendarEmployment workerCalendar = WorkCalendarEmployment::findByEmploymentRecId(hcmEmployment.RecId);
                    if (workerCalendar)
                    {
                        Calendar.text(workerCalendar.CalendarId);
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Calendar</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup existing calendar in this legal entity.
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
            date dateToday = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WorkCalendarTable), this);

            sysTableLookup.addLookupfield(fieldNum(WorkCalendarTable, CalendarId), true);
            sysTableLookup.addLookupfield(fieldNum(WorkCalendarTable, Name));

            queryBuildDataSource = query.addDataSource(tableNum(WorkCalendarTable));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PeriodCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Look up existing Period in this legal entity
        /// </summary>
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjPeriodTable), this);

            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, PeriodId));
            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, TimesheetFrequency));
            sysTableLookup.addLookupfield(fieldNum(ProjPeriodTable, Description));
            sysTableLookup.addSelectionField(fieldNum(ProjPeriodTable, PeriodId));

            Query query = ProjPeriodTable::getProjPeriodTableQueryFilterByTimesheetPeriods();
           
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Role</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup existing role in this legal entity.
        /// </summary>
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange queryBuildRange;
            date dateToday = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PSASchedRole), this);

            sysTableLookup.addLookupfield(fieldNum(PSASchedRole, RoleId), true);
            sysTableLookup.addLookupfield(fieldNum(PSASchedRole, Description));

            queryBuildDataSource = query.addDataSource(tableNum(PSASchedRole));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Add resource upon clicking the button.
        /// </summary>
        public void clicked()
        {
            super();

            CalendarRecId calendarRecId = WorkCalendarTable::find(Calendar.text()).RecId;
            ProjPeriodTableRecId periodCodeRecId = ProjPeriodTable::find(PeriodCode.text()).RecId;
            ResourceCategoryRecId resourceCategory = PSASchedRole::findById(Role.text()).RecId;
            HcmPersonnelNumberId hcmPersonnelNumberId;
            boolean complete;

            HcmWorker workerTable = HcmWorker::find(workerRecId);
            if (workerTable)
            {
                WrkCtrTable workCenterTable = WrkCtrTable::findByWorker(workerTable.RecId);

                if (workCenterTable)
                {
                    ResourceRecId resource = ResourceFacade::registerWorkCenterResource(workCenterTable);

                    boolean updateCalendar = calendarRecId ? true : false;
                    boolean updatePeriodCode = periodCodeRecId ? true : false;

                    if (updateCalendar || updatePeriodCode)
                    {
                        ResResourceDataEntity resourceDataEntity = ResResourceDataEntity::find(resource, true);
                        resourceDataEntity.update(updateCalendar, updatePeriodCode, false, false, false,
                            calendarRecId, periodCodeRecId);
                    }

                    if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
                    {
                        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        utcdatetime start = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(today, 0),
                            AVTimeframeType::Month).start();
                        utcdatetime end = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(
                            (today + (#monthsPerHalfYear * #daysPerMonth)), #LastSecondOfTheDay)
                            , AVTimeframeType::Month).end();
                    
                        ResUtil::updateRollUpByResource(resource, start, end);
                    }

                    complete = true;
                }
                else
                {
                    hcmPersonnelNumberId = workerTable.PersonnelNumber;
                }
            }

            if (!complete)
            {
                ResResourceDataEntity   resourceDataEntity;
                if (hcmPersonnelNumberId)
                {
                    resourceDataEntity.ResourceId = WrkCtrTable::generateWrkCtrId(hcmPersonnelNumberId);
                }
                else
                {
                    error("@Res:NoPersonnelNumError");
                    return;
                }
                resourceDataEntity.Type = WrkCtrType::Personnel;
                resourceDataEntity.PersonnelNumber = hcmPersonnelNumberId;
                resourceDataEntity.Name = ResourceName.text();
                
                resourceDataEntity.insert(calendarRecId, periodCodeRecId, resourceCategory, true, null, null, null,
                    CostPrice.realValue(), SalesPrice.realValue());

                Object callerFormObject = element.args().caller();
                if (callerFormObject != null)
                {
                    FormName callerFormName = callerFormObject.name();
                    if (callerFormName == formStr(ResResourcesListPage) || callerFormName == formStr(ResResourcesListPageV2))
                    {
                        callerFormObject.refreshResourceList();
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Res:NewResource</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NewResourceGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Worker</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:Worker</Label>
						<LookupOnly>Yes</LookupOnly>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ResourceName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:ResourceName</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Calendar</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:Calendar</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PeriodCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:PeriodCode</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Role</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:Role</Label>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PriceGroup</Name>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SalesPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:SalesPrice</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CostPrice</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:CostPrice</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitButtonsGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CreateButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@Res:Create</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>