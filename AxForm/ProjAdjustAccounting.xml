<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjAdjustAccounting</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjAdjustAccounting extends FormRun
{
    private Common postedTransBuffer;

}
]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Retrieves the adjustment date provided on the Adjust Accounting form.
    /// </summary>
    /// <returns>
    ///  Adjustment date set on the form.
	/// </returns>
	public TransDate getAdjustmentDate()
    {
        return AdjustmentDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueForProjVoucher</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates the query range value given the specified voucher.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    /// <param name = "_projVoucher">
    /// Project voucher.
    /// </param>
    /// <returns>
    /// A string that is the query range value given the specified voucher.
    /// </returns>
    protected str getRangeValueForProjVoucher(Query _query, Voucher _projVoucher)
    {
        str rangeValue;
        boolean firstVoucher = true;
        ProjTransPosting projTransPosting, projTransPostingCheck;

        rangeValue = '(';

        while select Voucher, LedgerTransDate from projTransPosting
                group by Voucher, LedgerTransDate
                where projTransPosting.Voucher == _projVoucher
        {
            if (firstVoucher)
            {
                rangeValue += '('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                firstVoucher = false;
            }
            else
            {
                rangeValue += '|| ('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
            }
        }
        rangeValue += ')';
        

        return rangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputForProject</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets the transaction and voucher filter for the posted transaction.
    /// </summary>
    /// <returns>
    /// A container with transaction ID and voucher number for the posted transaction.
	/// </returns>
    protected container getInputForProject()
    {
        ProjCostTrans           projCostTrans;
        ProjItemTrans           projItemTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjEmplTrans           projEmplTrans;
        ProjControlPeriodTrans  projControlPeriodTrans;
        ProjOnAccTrans          projOnAccTrans;
        ProjControlPeriodTable  projControlPeriodTable;
        ProjTransPosting        projTransPosting;
        ProjInvoiceJour         projInvoiceJour;
        ProjTransIdBase         projTransId;
        Voucher                 projVoucher;

        switch (element.args().dataset())
        {
            case tableNum(ProjCostTrans):
                projCostTrans       = element.args().record() as ProjCostTrans;
                projTransId         = projCostTrans.TransId;
                break;

            case tableNum(ProjRevenueTrans):
                projRevenueTrans    = element.args().record() as ProjRevenueTrans;
                projTransId         = projRevenueTrans.TransId;
                break;

            case tableNum(ProjEmplTrans):
                projEmplTrans       = element.args().record() as ProjEmplTrans;
                projTransId         = projEmplTrans.TransId;
                break;

            case tableNum(ProjItemTrans):
                projItemTrans       = element.args().record() as ProjItemTrans;
                projTransId         = projItemTrans.ProjTransId;
                break;

            case tableNum(ProjControlPeriodTrans):
                projControlPeriodTrans = element.args().record() as ProjControlPeriodTrans;
                projTransId         = projControlPeriodTrans.TransId;
                break;

            case tableNum(ProjOnAccTrans):
                projOnAccTrans      = element.args().record() as ProjOnAccTrans;
                projTransId         = projOnAccTrans.TransId;
                break;

            case tableNum(ProjControlPeriodTable):
                projControlPeriodTable = element.args().record() as ProjControlPeriodTable;
                if (element.args().parmEnum() == NoYes::No)
                {
                    projVoucher     = projControlPeriodTable.VoucherPosted;
                }
                else
                {
                    projVoucher     = projControlPeriodTable.VoucherReverse;
                }
                break;

            case tableNum(ProjTransPosting):
                projTransPosting    = element.args().record() as ProjTransPosting;
                projVoucher         = projTransPosting.Voucher;
                break;

            case tableNum(ProjInvoiceJour):
                projInvoiceJour     = element.args().record() as ProjInvoiceJour;
                projVoucher         = projInvoiceJour.LedgerVoucher;
                break;
        }

        return [projTransId, projVoucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherFieldName</Name>
				<Source><![CDATA[
    private FieldName getVoucherFieldName()
    {
        return fieldStr(SubledgerVoucherGeneralJournalEntry, Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateFieldName</Name>
				<Source><![CDATA[
    private FieldName getAccountingDateFieldName()
    {
        return fieldStr(SubledgerVoucherGeneralJournalEntry, AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateRangeExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query range expression for the accounting date.
    /// </summary>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// A query range expression for the accounting date.
    /// </returns>
    protected str getAccountingDateRangeExpression(TransDate _accountingDate)
    {
        return '(' + this.getAccountingDateFieldName() + ' == [' + queryValue(_accountingDate) + '])';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherRangeExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query range expression for the voucher number.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number.
    /// </param>
    /// <returns>
    /// A query range expression for the voucher number.
    /// </returns>
    protected str getVoucherRangeExpression(Voucher _voucher)
    {
        return '(' + this.getVoucherFieldName() + ' == ' + '\"' + any2str(_voucher) + '\")';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a range expression containing voucher and accounting date.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The voucher number.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// A range expression containing voucher and accounting date.
    /// </returns>
    protected str getVoucherDateRange(Voucher _subledgerVoucher, TransDate _accountingDate)
    {
        return '(' + this.getVoucherRangeExpression(_subledgerVoucher) +
            ' && ' + this.getAccountingDateRangeExpression(_accountingDate) + ')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValueForProjTransactionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query range value given the specified project transaction ID.
    /// </summary>
    /// <param name = "_query">
    /// A <c>Query</c> instance.
    /// </param>
    /// <param name = "_projTransId">
    /// A project transaction ID.
    /// </param>
    /// <returns>
    /// A string that is the query range value given the specified project transaction ID.
    /// </returns>
    protected str getRangeValueForProjTransactionID(Query _query, ProjTransIdBase _projTransId)
    {
        str rangeValue;
        boolean firstVoucher = true;
        ProjTransPosting projTransPosting, projTransPostingCheck;

        rangeValue = '(';
        while select Voucher, LedgerTransDate from projTransPosting
			group by Voucher, LedgerTransDate
			where projTransPosting.TransId == _projTransId
        {
            if (firstVoucher)
            {
                rangeValue += '('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
                VendInvoiceJour vendInvoiceJour;
                select firstOnly vendInvoiceJour
                    where vendInvoiceJour.CostLedgerVoucher == projTransPosting.Voucher &&
                            vendInvoiceJour.InvoiceDate == projTransPosting.LedgerTransDate;
                if (vendInvoiceJour)
                {
                    rangeValue += '|| ('+ this.getVoucherDateRange(vendInvoiceJour.LedgerVoucher, vendInvoiceJour.InvoiceDate) + ')';
                }
                firstVoucher = false;
            }
            else
            {
                rangeValue += '|| ('+ this.getVoucherDateRange(projTransPosting.Voucher, projTransPosting.LedgerTransDate) + ')';
            }
        }
        rangeValue +=')';
        
        return rangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerVoucherLinkDataSource</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets a link between <c>SubledgerVoucherGeneralJournalEntry</c> and <c>GeneralJournalEntry</c> to be used in the query.
    /// </summary>
    /// <param name = "_query">
	/// A <c>Query</c> instance.
	/// </param>
    /// <returns></returns>
    private QueryBuildDataSource getSubledgerVoucherLinkDataSource(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry));
        if (ds == null)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
            ds = SubledgerVoucherGeneralJournalEntry::addDataSource(ds);
            ds.joinMode(JoinMode::ExistsJoin);
        }
        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForProject</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates the query to add a range value filter of project transaction ID and voucher
    /// to create a link between <c>SubledgerVoucherGeneralJournalEntry</c> and posted Project record.
    /// </summary>
    /// <param name = "_query"></param>
    protected void updateQueryForProject(Query _query)
    {
        QueryBuildDataSource qbd = this.getSubledgerVoucherLinkDataSource(_query);
        QueryBuildRange qbr = qbd.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        ProjTransIdBase projTransId;
        Voucher projVoucher;
        [projTransId, projVoucher] = this.getInputForProject();

        if (projTransId != '')
        {
            str rangeValue = this.getRangeValueForProjTransactionID(_query, projTransId);
            qbr.value(rangeValue);
            qbr.status(RangeStatus::Hidden);
        }
        else if (projVoucher != '')
        {
            str rangeValue = this.getRangeValueForProjVoucher(_query, projVoucher);
            qbr.value(rangeValue);
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmpostedTransBuffer</Name>
				<Source><![CDATA[
	public Common parmpostedTransBuffer(Common _postedTransBuffer = postedTransBuffer)
    {
        postedTransBuffer = _postedTransBuffer;
        return postedTransBuffer;
	}

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Query                   query;
        QueryBuildDataSource    ds;
        boolean                 isFromMenu;
        boolean                 showLedgerPostingJournalId;
        TableId                 sourceTable;

        super();

		// Default adjustment date to current date.
        AdjustmentDate.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        // Set the LedgerDimension reference on controls displaying LedgerAccount in order for the preview to work off a string field
        LedgerTrans_AccountNum.userDataItem(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        query = generalJournalEntry_ds.query();

        ds = query.dataSourceTable(tableNum(MainAccount));

        // set the DimensionAttributeValueCombination-->MainAccount relation because the wrong one is the default
        ds.clearLinks();
        ds.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));

        // manually add the natural key query field
        ds.addRange(fieldNum(MainAccount, MainAccountId));

        // sort by accounting date because it is the preferred user sort
        // additionally sort by journal and voucher to provide a consistent order within duplicate dates
        ds = query.dataSourceTable(tableNum(GeneralJournalEntry));
        ds.addSortField(fieldNum(GeneralJournalEntry, AccountingDate));
        ds.addSortField(fieldNum(GeneralJournalEntry, JournalNumber));
        ds.addSortField(fieldNum(GeneralJournalEntry, SubledgerVoucher));

		// Posted Trans
        Common postedTrans = element.args().record();
        if (!postedTrans)
        {
            throw Error(Error::missingFormActiveBuffer(element.args().callerName()));
        }

        this.parmPostedTransBuffer(postedTrans);
        sourceTable = element.args().dataset();
        this.updateQueryForProject(query);
        this.initProjTmpAdjustVoucher(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTmpAdjustVoucher</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes the <c>ProjTmpAdjustVoucher</c> table buffer
    /// </summary>
    /// <param name = "_query">
	/// Form query which will be used to initialize the <c>ProjTmpAdjustVoucher</c> datasource for the lower grid of the dialog.
	/// </param>
	private void initProjTmpAdjustVoucher(Query _query)
    {
        GeneralJournalEntry gjEntry;
        GeneralJournalAccountEntry gjAccountEntry;
        MainAccount mAccount;
        QueryRun qr = new QueryRun(_query);
        ttsbegin;
		while (qr.next())
        {
            gjEntry = qr.get(tableNum(GeneralJournalEntry));
            mAccount = qr.get(tableNum(MainAccount));
            gjAccountEntry = qr.get(tableNum(GeneralJournalAccountEntry));
            ProjTmpAdjustVoucher.Voucher = gjEntry.SubledgerVoucher;
            ProjTmpAdjustVoucher.MainAccountId = mAccount.MainAccountId;
            ProjTmpAdjustVoucher.MainAccount = mAccount.RecId;
            ProjTmpAdjustVoucher.LedgerAccount = gjAccountEntry.LedgerAccount;
            ProjTmpAdjustVoucher.LedgerDimension = gjAccountEntry.LedgerDimension;
            ProjTmpAdjustVoucher.LedgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(gjAccountEntry.LedgerDimension);
            ProjTmpAdjustVoucher.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(gjAccountEntry.LedgerDimension);
            ProjTmpAdjustVoucher.RefRecId = gjAccountEntry.RecId;
            ProjTmpAdjustVoucher.GeneralJournalEntry = gjEntry.RecId;
            ProjTmpAdjustVoucher.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostButton</Name>
				<Source><![CDATA[
	private boolean checkPostButton()
    {
        ProjTmpAdjustVoucher projTmpVoucher;
        projTmpVoucher.linkPhysicalTableInstance(projTmpAdjustVoucher);

		select firstonly RecId, Adjusted
			from projTmpVoucher
            where projTmpVoucher.Adjusted == NoYes::Yes;

        return projTmpVoucher.RecId != 0;
	}

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>GeneralJournalAccountEntry</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
		/// <summary>
        /// When user clicks on a voucher entry on the upper grid of this dialog form,
        /// appropriate dimensions are loaded in the Dimension Entry Control.
        /// </summary>
        /// <returns>
		/// 1 if successful;
		/// </returns>
        public int active()
        {
            ProjTmpAdjustVoucher projTmpAdjVoucher;
            int ret;
            
            ret = super();

            projTmpAdjVoucher.linkPhysicalTableInstance(ProjTmpAdjustVoucher);
            element.args().record(ProjTmpAdjustVoucher);

            select projTmpAdjVoucher
                where projTmpAdjVoucher.RefRecId == GeneralJournalAccountEntry.RecId;
           
            element.args().lookupRecord(projTmpAdjVoucher);
            ProjTmpAdjustVoucher_ds.research(false);

            DimensionEntry.parmDisplayValues(true);
            DimensionEntry.loadAttributeValueSet(projTmpAdjVoucher.DefaultDimension);
            DimensionEntry.reactivate();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjTmpAdjustVoucher</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates ledger Dimension and and Ledger account  before writing into the datasource when user clicks on 'save'.
        /// </summary>
        public void write()
        {
            GeneralJournalAccountEntry gjAccountEntry;
            ProjTmpAdjustVoucher projTmpAdjVoucher = this.cursor() as ProjTmpAdjustVoucher;
			select RecId, LedgerDimension from gjAccountEntry
                where gjAccountEntry.RecId == projTmpAdjVoucher.RefRecId;
            LedgerDimensionAccount mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(projTmpAdjVoucher.LedgerDimensionDefaultAccount, projTmpAdjVoucher.DefaultDimension);
			if (mergedLedgerDimension != gjAccountEntry.LedgerDimension)
            {
                projTmpAdjVoucher.Adjusted = NoYes::Yes;
            }
			else
            {
                ProjTmpAdjustVoucher.Adjusted = NoYes::No;
            }
			
			MainAccount mAcc = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mergedLedgerDimension);
            projTmpAdjVoucher.MainAccount = mAcc.RecId;
            projTmpAdjVoucher.MainAccountId = mAcc.MainAccountId;
            projTmpAdjVoucher.LedgerDimension = mergedLedgerDimension;
            projTmpAdjVoucher.LedgerAccount = LedgerDimensionFacade::getDisplayValueForLedgerDimension(projTmpAdjVoucher.LedgerDimension);
            super();

            PostButton.enabled(element.checkPostButton());
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the <c>ProjTmpAdjustVoucher</c> datasource.
        /// </summary>
        public void init()
        {
            super();
            PostButton.enabled(false);
            SaveButton.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>OffsetAccount</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles the modified event on the control.
        /// </summary>
        /// <returns>
        /// true, if the event succeeded. otherwise, false.
		/// </returns>
        public boolean modified()
        {
            boolean ret;
        
            ret = super();

            if (ret)
            {
                PostButton.enabled(true);
                SaveButton.enabled(true);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DimensionEntry</Name>
				<Type>Container</Type>
				<Methods>
					<Method>
						<Name>modifyingDimensionValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles the event when a dimension value is modified on the control.
        /// </summary>
        /// <param name = "_dimensionAttribute"> A <c>DimensionAttribute</c>.</param>
        /// <param name = "_origValue"> Original value before modification. </param>
        /// <param name = "_newValue"> Modified value. </param>
        /// <returns> true if successful. otherwise, false.</returns>
        protected boolean modifyingDimensionValue(DimensionAttribute _dimensionAttribute, DimensionValue _origValue, DimensionValue _newValue)
        {
            boolean ret;
    
            ret = super(_dimensionAttribute, _origValue, _newValue);
			// Enable post and preview buttons only when dimensions change.
			if (ret)
            {
                PostButton.enabled(true);
                SaveButton.enabled(true);
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes <c>ProjAdjustAccounting_PostService</c> service class to post adjusted voucher entries.
        /// </summary>
        public void clicked()
        {
           
            MenuFunction menuFunction = new MenuFunction(menuItemActionStr(ProjAdjustAccounting_PostService),MenuItemType::Action);
            
			if (menuFunction && menuFunction.checkAccessRights())
            {
                Args args = new Args();
                args.caller(element);
                args.record(element.args().record());
                menuFunction.run(args);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalAccountEntry</Name>
			<Table>GeneralJournalAccountEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocationLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HistoricalExchangeRateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCorrection</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTableDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipCreditCalculation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Text</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalEntry</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MainAccount</Name>
			<Table>MainAccount</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountCategoryRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentMethod_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CloseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsolidationMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditBalanceDemand</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCreditProposal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeAdjusted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingExchangeRateType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinancialReportingTranslationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InflationAdjustment_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerChartOfAccounts</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MandatoryPaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Monetary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OpeningAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentMainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepomoType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SRUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferYearEndAccount_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserInfoId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidatePosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateUser</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DimensionAttributeValueCombination</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>GeneralJournalEntry</Name>
			<Table>GeneralJournalEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerEntryPosted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalCalendarYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ledger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerEntryJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPostingJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerPostingJournalDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingLayer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubledgerVoucherDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DimensionAttributeValueCombination</Name>
			<Table>DimensionAttributeValueCombination</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountStructure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimensionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>GeneralJournalAccountEntry</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjTmpAdjustVoucher</Name>
			<Table>ProjTmpAdjustVoucher</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Proj:ProjAdjustAccounting</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>OrigVoucherGroup</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>OrigVoucher</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Voucher</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>561886935</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SubledgerVoucher</DataField>
										<DataSource>GeneralJournalEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_AccountNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1021612610</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerAccount</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountName</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>localizedName</DataMethod>
										<DataSource>MainAccount</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerTrans_Posting</Name>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingType</DataField>
										<DataSource>GeneralJournalAccountEntry</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>GeneralJournalEntry</DataSource>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AdjustmentDateGroup</Name>
						<ElementPosition>1006632959</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>AdjustmentDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>TransDate</ExtendedDataType>
								<Label>@SYS8449</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS8449</Caption>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AdjustmentGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>StaticTextGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>StaticTextAdjustDescription</Name>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Proj:ProjAdjustVoucherDescription</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormSegmentedEntryControl">
								<Name>OffsetAccount</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_Ledger:MainAccount_OffsetAccount</HelpText>
								<Type>SegmentedEntry</Type>
								<FormControlExtension>
									<Name>SegmentedEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>String</Type>
											<Value>LedgerDimensionDefaultAccountController</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmAccountTypeEnumName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIsDefaultAccount</Name>
											<Type>Enum</Type>
											<TypeName>boolean</TypeName>
											<Value>False</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValidateBlockedForManualEntry</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmLockMainAccountSegment</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmPostingType</Name>
											<Type>Enum</Type>
											<TypeName>LedgerPostingType</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIncludeTotalAccounts</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIncludeFinancialAccounts</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<DataSource>ProjTmpAdjustVoucher</DataSource>
								<ReferenceField>LedgerDimensionDefaultAccount</ReferenceField>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4367</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DimensionEntryGroup</Name>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntry</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjTmpAdjustVoucher</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PreviewVoucherGroup</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>StaticTextPreviewVoucher</Name>
								<Type>StaticText</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Proj:PreviewHelpText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>PreviewVoucher</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LedgerTrans_AccountNumPreview</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1021612610</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerAccount</DataField>
										<DataSource>ProjTmpAdjustVoucher</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>AccountNamePreview</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>mainAccountName</DataMethod>
										<DataSource>ProjTmpAdjustVoucher</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>LedgerTrans_PostingPreview</Name>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>postingType</DataMethod>
										<DataSource>ProjTmpAdjustVoucher</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ProjTmpAdjustVoucher</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@Proj:PreviewVoucher</Caption>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>PostButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<Text>@SYS6098</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>SaveButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Save</Command>
						<Text>@SYS54744</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<DataSource>ProjTmpAdjustVoucher</DataSource>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>