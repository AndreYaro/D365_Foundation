<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>smmCampaignFollowUp</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class smmCampaignFollowUp extends FormRun
{
    int                 respNumber;
    int                 respRest;
    QueryBuildRange     campaignRange;
    smmCampaignId       smmCampaignId;
    smmTMCallListID     smmTMCallListID;
    int                 alreadyAssignedTargets;
    Query               employeeQuery;
    HcmWorkerLookup     hcmWorkerLookupCurrentCompany;
}
]]></Source>
			</Method>
			<Method>
				<Name>alreadyAssignedTargets</Name>
				<Source><![CDATA[
    int alreadyAssignedTargets()
    {
        // Is the distribution called from the campaign form?
        if (smmCampaignId)
        {
            // Find number of targets that already have an employee assigned
            return smmCampaignSelection::countAlreadyAssignedTargets(smmCampaignId);
        }
        else
        // The distribution is called from the call list form?
        {
            // Find number of targets that already have an employee assigned
            return smmTMCallListTable::countAlreadyAssignedTargets(smmTMCallListID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        smmCampaignTable    smmCampaignTable;
        smmTMCallListGroup  smmTMCallListGroup;

        super();

        if (element.args() && element.args().record() && (element.args().dataset() == tableNum(smmCampaignTable) || element.args().dataset() == tableNum(smmTMCallListGroup)))
        {
            // Is form called with a campaign?
            if (element.args().dataset() == tableNum(smmCampaignTable))
            {
                // Get the campaign record
                smmCampaignTable    = element.args().record();
                smmCampaignId       = smmCampaignTable.CampaignId;

                // Find total number of targets for the campaign
                totalResp.value(smmCampaignSelection::countNumbers(smmCampaignId));
            }
            else
            // Is form called with a call list?
            if (element.args().dataset() == tableNum(smmTMCallListGroup))
            {
                // Get the call list record
                smmTMCallListGroup  = element.args().record();
                smmTMCallListID     = smmTMCallListGroup.CallListID;

                // Find total number of targets for the call list
                totalResp.value(smmTMCallListTable::countNumbers(smmTMCallListID));
            }

            // Find number of targets already assigned
            alreadyAssignedTargets = element.alreadyAssignedTargets();

            // Calculate the number of targets that still needs to be assigned
            remaining.value(totalResp.value() - alreadyAssignedTargets);

            // Intialize worker query
            employeeQuery = new Query();
            employeeQuery.addDataSource(tableNum(HcmWorker));
        }
        else
        {
            // Form was called incorrectly.
            throw error("@SYS22996");
        }

        // Check if all targets already have an worker assigned
        if (remaining.value() == 0)
        {
            // There is no targets without assigned workers.
            info("@SYS87134");
            element.close();
        }

        hcmWorkerLookupCurrentCompany = HcmWorkerLookup::newCustomOptions(true, true, true, false, true, true, true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRemaining</Name>
				<Source><![CDATA[
    void recalculateRemaining()
    {
        tmpSmmResponsibilityDistribute distribute;
        int                            totalDistributed = 0;

        // Traverse all the employees in the grid
        for (distribute = tmpSmmResponsibilityDistribute_ds.getFirst(); distribute; distribute = tmpSmmResponsibilityDistribute_ds.getNext())
        {
            // Add the number assigned to the worker to the total amount
            totalDistributed += distribute.AllocationCount;
        }

        // Update remaining field on the form
        remaining.value(totalResp.value() - totalDistributed - alreadyAssignedTargets);

        // Set status of OK button. The button is disabled if remaining is below 0
        ok.enabled(remaining.value() >= 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSelectionBeCleared</Name>
				<Source><![CDATA[
    boolean shouldSelectionBeCleared()
    {
        // New selection of employees for distribution
        return Box::yesNo("@SYS82456", DialogButton::Yes, "@SYS82455") == DialogButton::Yes;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>tmpSmmResponsibilityDistribute</Name>
				<Methods>
					<Method>
						<Name>clearDistribution</Name>
						<Source><![CDATA[
        void clearDistribution()
        {
            tmpSmmResponsibilityDistribute distribute;

            ttsbegin;

            tmpSmmResponsibilityDistribute.selectForUpdate(true);

            // Set values for all employees to 0
            for (distribute = tmpSmmResponsibilityDistribute_ds.getFirst(); distribute; distribute = tmpSmmResponsibilityDistribute_ds.getNext())
            {
                // Set the employee record
                tmpSmmResponsibilityDistribute_ds.positionToRecord(distribute);

                // Set allocation no zero
                tmpSmmResponsibilityDistribute.AllocationCount = 0;

                tmpSmmResponsibilityDistribute.write();
            }

            ttscommit;

            // Set value in remaining field to value of total field
            remaining.value(totalResp.value() - alreadyAssignedTargets);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            element.recalculateRemaining();
        }

]]></Source>
					</Method>
					<Method>
						<Name>distributeEqually</Name>
						<Source><![CDATA[
        void distributeEqually()
        {
            int                             noOfEmployees;
            int                             responsiblePerEmpl;
            int                             responsibleNumber;
            int                             targetsLeft;
            int                             unallocatedResponsible;
            tmpSmmResponsibilityDistribute  distribute;
            tmpSmmResponsibilityDistribute  tmpSmmResponsibilityDistribute1;
            int                             remain;

            tmpSmmResponsibilityDistribute1.setTmpData(tmpSmmResponsibilityDistribute);

            // Find number of employees in the employee distribution grid
            select count(RecId) from tmpSmmResponsibilityDistribute1;

            noOfEmployees = any2int(tmpSmmResponsibilityDistribute1.RecId);

            // Only distribute if employees are selected in the form
            if (noOfEmployees > 0)
            {
                // Is the distribution called from a campaign?
                if (smmCampaignId)
                {
                    // Find total number of targets on the campaign
                    responsibleNumber  = smmCampaignSelection::countNumbers(smmCampaignId);
                }
                else
                // Is the distribution called from a call list?
                if (smmTMCallListID)
                {
                    // Find total number of targets on the call list
                    responsibleNumber  = smmTMCallListTable::countNumbers(smmTMCallListID);
                }

                // Is the number of employees in the grid higher than the number of undistributed targets
                if (responsibleNumber - alreadyAssignedTargets <= noOfEmployees)
                {
                    // Assign one target to each employee
                    responsiblePerEmpl     = 1;

                    // There are to unallocated targets
                    unallocatedResponsible = 0;
                }
                else
                // Is the number of employees in the grid lower than the number of undistributed targets
                {
                    // Calculate how many targets that should be assigned to each of the selected employees
                    responsiblePerEmpl = (responsibleNumber - alreadyAssignedTargets) div noOfEmployees;

                    // Calculate if there are unassigned targets after splitting up equally among employees
                    unallocatedResponsible = (responsibleNumber - alreadyAssignedTargets) mod noOfEmployees;
                }

                ttsbegin;

                // Set targetsLeft to the number of targets that have to be distributed
                targetsLeft = responsibleNumber - alreadyAssignedTargets;

                // Traverse the selected employees and assign number of responsible to them
                for (distribute = tmpSmmResponsibilityDistribute_ds.getFirst(); targetsLeft > 0 && distribute; distribute = tmpSmmResponsibilityDistribute_ds.getNext())
                {
                    // If there are a remainder then one extra employee should be assigned to each target
                    if (unallocatedResponsible > 0)
                    {
                        remain = 1;
                    }
                    else
                    {
                        remain = 0;
                    }

                    // Count down remaining targets that have to be distributed
                    targetsLeft--;

                    // Select the next employee record
                    tmpSmmResponsibilityDistribute_ds.positionToRecord(distribute);

                    // Set the number of targets that should assigned to the employee
                    tmpSmmResponsibilityDistribute.AllocationCount = responsiblePerEmpl + remain;

                    tmpSmmResponsibilityDistribute.write();

                    // Decrease the number of unallocated targets
                    if (unallocatedResponsible > 0)
                    {
                        unallocatedResponsible--;
                    }
                }

                ttscommit;

                // Update the remaining field on the form
                element.recalculateRemaining();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();

            element.recalculateRemaining();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>SelectEmployees</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HcmWorker                       hcmWorker;
            QueryRun                        queryRun;
            tmpSmmResponsibilityDistribute  tmpSmmResponsibilityDistribute1 = null;
            boolean                         clearFirst = false;

            queryRun = new QueryRun(employeeQuery);

            // Show query selection
            if (queryRun.prompt())
            {
                // Check if the employeee selection grid contains records
                tmpSmmResponsibilityDistribute1.setTmpData(tmpSmmResponsibilityDistribute);
                select firstonly tmpSmmResponsibilityDistribute1;

                // Only ask to clear selection if the table isn't empty
                if (tmpSmmResponsibilityDistribute1)
                {
                    // Ask if the currect selection should be cleared
                    clearFirst = element.shouldSelectionBeCleared();

                    // Did user choose to delete existing employee selection in the grid
                    if (clearFirst)
                    {
                        // Clear the employees in the grid
                        delete_from tmpSmmResponsibilityDistribute;
                    }
                }
                else
                {
                    // The grid was already empty and the method should perform as if the grid was cleared
                    clearFirst = true;
                }

                // Use a copy of the data source for selection
                tmpSmmResponsibilityDistribute1.setTmpData(tmpSmmResponsibilityDistribute);

                // Traverse query results
                while (queryRun.next())
                {
                    // Get next worker
                    hcmWorker = queryRun.get(tableNum(HcmWorker));

                    // Is the grid not cleared?
                    if (!clearFirst)
                    {
                        // Do the current employee from the query already exist in the grid
                        select RecId from tmpSmmResponsibilityDistribute1 where tmpSmmResponsibilityDistribute1.Worker == hcmWorker.RecId;
                    }

                    // If the employee doesn't exist
                    if (clearFirst || !tmpSmmResponsibilityDistribute1.RecId)
                    {
                        // Create new employee entry in the grid
                        tmpSmmResponsibilityDistribute_ds.create();

                        tmpSmmResponsibilityDistribute.Worker           = hcmWorker.RecId;
                        tmpSmmResponsibilityDistribute.AllocationCount  = 0;

                        tmpSmmResponsibilityDistribute.write();
                    }
                }

                tmpSmmResponsibilityDistribute_ds.executeQuery();
            }

            element.recalculateRemaining();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearDistribution</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            // Are you sure you want to clear the distribution for all employees?
            if (Box::yesNo("@SYS82480", DialogButton::Yes, "@SYS81583") == DialogButton::Yes)
            {
                // Clear the current distribtion on the employees
                tmpSmmResponsibilityDistribute_ds.clearDistribution();

                element.recalculateRemaining();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DistributeEqually</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            // Distribute responsibility using the employees selected
            tmpSmmResponsibilityDistribute_ds.distributeEqually();

            // Refresh data source to display the new allocation numbers in the form
            tmpSmmResponsibilityDistribute_ds.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>tmpSmmResponsibilityDistribute_Worker</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            Common ret;

            ret = hcmWorkerLookupCurrentCompany.lookupWorker(this);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            HcmWorker ret;

            ret = super();

            if (ret != null && !hcmWorkerLookupCurrentCompany.validateWorker(ret.RecId))
            {
                ret = null;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            tmpSmmResponsibilityDistribute  distribute;
            container                       con;


            // The campaign is already started and targets have responded. Should the targets still be distributed?
            if (smmCampaignId && smmCampaignSelection::isStarted(smmCampaignId) && Box::yesNo("@SYS87135", DialogButton::Yes) == DialogButton::No)
            {
                // If the user presses "No", the form closes without distributing the targets
                return;
            }

            // Check if all targets have been distributed
            if (remaining.value() > 0)
            {
                // Responsibility assignment is not completed. Distribute anyway?
                if (!Box::yesNo("@SYS86900", DialogButton::No, "@SYS81084"))
                {
                    // If the user presses "No", the form closes without distributing the targets
                    return;
                }
            }

            // Traverse all distribution records
            for (distribute = tmpSmmResponsibilityDistribute_ds.getFirst(); distribute; distribute = tmpSmmResponsibilityDistribute_ds.getNext())
            {
                tmpSmmResponsibilityDistribute_ds.positionToRecord(distribute);

                // Are there responsibility assigned to the employee
                if (tmpSmmResponsibilityDistribute.AllocationCount)
                {
                    // Add employee and distribution to the result container
                    con = con + [tmpSmmResponsibilityDistribute.Worker, tmpSmmResponsibilityDistribute.AllocationCount];
                }
            }

            // Is the form called with a campaign
            if (smmCampaignId)
            {
                smmCampaignSelection::addResponsibleForResponsibilities(smmCampaignId, con);
            }
            else
            // Is the form called with a call list
            if (smmTMCallListID)
            {
                smmTMCallListTable::addResponsibleForResponsibilities(smmTMCallListID, con);
            }

            // Refresh datasource             
            element.args().caller().executeSelectionQuery();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>tmpSmmResponsibilityDistribute</Name>
			<Table>tmpSmmResponsibilityDistribute</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AllocationCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Worker</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>CallListCampaignIdEmplIdIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS80816</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>Functions</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>SelectEmployess</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS86462</HelpText>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>SelectEmployees</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@SYS85820</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS68155</Text>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS7444</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>ClearDistribution</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS99097</HelpText>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS81583</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>DistributeEqually</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS99098</HelpText>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS81584</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Main</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>DistributionGird</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>tmpSmmResponsibilityDistribute_Worker</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>tmpSmmResponsibilityDistribute_Worker_DirPerson_FK_Name</Name>
										<DataRelationPath>HcmWorker.DirPerson_FK</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>tmpSmmResponsibilityDistribute</DataSource>
								<ReferenceField>Worker</ReferenceField>
								<ReplacementFieldGroup>Person</ReplacementFieldGroup>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>tmpSmmResponsibilityDistribute_AllocationCount</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_SalesAndMarketing:smmCampaignFollowUp_tmpSmmResponsibilityDistribute_AllocationCount</HelpText>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AllowNegative>No</AllowNegative>
								<DataField>AllocationCount</DataField>
								<DataSource>tmpSmmResponsibilityDistribute</DataSource>
								<ShowZero>No</ShowZero>
							</AxFormControl>
						</Controls>
						<DataSource>tmpSmmResponsibilityDistribute</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<VisibleRows>6</VisibleRows>
						<VisibleRowsMode>Fixed</VisibleRowsMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>StatusLineResp</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Top>0</Top>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>TotalResp</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS80030</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>Remaining</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS81090</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HelpText>@SYS85821</HelpText>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
