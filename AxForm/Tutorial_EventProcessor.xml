<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>Tutorial_EventProcessor</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class Tutorial_EventProcessor extends FormRun
{
    boolean     running;
    EventJobCUD eventJobCUD;
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        // reinstantiate the poller to run in "normal" regime
        element.reinstantiateAlertPoller(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCudProcessing</Name>
				<Source><![CDATA[
    void doCudProcessing()
    {
        #Event;

        if (!running)
            return;

        statusDynamic.text(enum2str(BatchStatus::Executing));
        eventJobCUD.runOperation();
        statusDynamic.text(enum2str(BatchStatus::Waiting));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        ;
        eventJobCUD = EventJobCUD::construct();
        running = false;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reinstantiateAlertPoller</Name>
				<Source><![CDATA[
    void reinstantiateAlertPoller(boolean _demoMode = false)
    {
        EventAlertPoller alertPoller;

        #Event

        ;

        alertPoller = infolog.globalCache().get(classstr(EventAlertPoller),literalstr(ReferenceId),null);

        // if poller is running, remove it from global cache
        if (alertPoller)
        {
            infolog.globalCache().remove(classstr(EventAlertPoller),literalstr(ReferenceId));
        }

        alertPoller = EventAlertPoller::newAlertPoller(_demoMode);

        infolog.globalCache().set(classstr(EventAlertPoller),literalstr(ReferenceId),alertPoller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        allowRepeatingAlerts.value(true);
        super();

        // start the alert poller in demo mode
        element.reinstantiateAlertPoller(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDueDate</Name>
				<Source><![CDATA[
    void runDueDate()
    {
        EventJobDueDate eventJobDueDate = EventJobDueDate::construct();
        EventRule       rule;
        EventRuleIgnore ignore;
        ;
        if (allowRepeatingAlerts.value())
        {
            delete_from ignore
                exists join rule
                    where rule.RuleId == ignore.RuleId
                       && rule.UserId == curuserid();
        }

        eventJobDueDate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCUDRunning</Name>
				<Source><![CDATA[
    void setCUDRunning(boolean _running)
    {
        running = _running;

        if (running)
            element.setStart();
        else
            element.setStop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStart</Name>
				<Source><![CDATA[
    void setStart()
    {
        startStopCudProcessing.text("@SYS12348");
        element.doCudProcessing();
        ProcessTimer.enabled(true);
        // create another poller in demo mode
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStop</Name>
				<Source><![CDATA[
    void setStop()
    {
        startStopCudProcessing.text("@SYS3008");
        statusDynamic.text('');
        ProcessTimer.enabled(false);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>StartStopCudProcessing</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.setCUDRunning(!running);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartStopDueDateProcessing</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.runDueDate();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProcessTimer</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>elapsed</Name>
						<Source><![CDATA[
        public int elapsed()
        {
            element.doCudProcessing();
            return super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS88330</Caption>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Custom</Pattern>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ProcessCud</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>Status</Name>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<LeftMode>LeftEdge</LeftMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Alignment>Left</Alignment>
						<Text>@SYS88326</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>StartStopCudProcessing</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS3008</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>StatusDynamic</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text></Text>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
				<Caption>@SYS88322</Caption>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ProcessDueDate</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>StartStopDueDateProcessing</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS9282</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AllowRepeatingAlerts</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<LeftMode>LeftEdge</LeftMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS88331</Label>
						<LabelAlignment>Right</LabelAlignment>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
				<Caption>@SYS88323</Caption>
			</AxFormControl>
			<AxFormControl>
				<Name>ProcessTimer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<FormControlExtension>
					<Name>TimerControl</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>interval</Name>
							<Type>Int32</Type>
							<Value>2</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>startOnFormCreation</Name>
							<Type>Enum</Type>
							<TypeName>NoYes</TypeName>
							<Value>No</Value>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>