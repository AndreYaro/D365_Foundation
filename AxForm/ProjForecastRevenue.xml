<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjForecastRevenue</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public final class ProjForecastRevenue extends FormRun implements OfficeITemplateCustomExporter
{
    QueryBuildRange         criteriaReport;
    QueryBuildRange         criteriaExpand;
    QueryBuildRange         criteriaModelId;

    ProjId                  projId;
    ForecastModelId         modelId;
    ProjCategoryId          categoryId;
    ResourceRecId           resourceRecId;

    //  range projTable
    QueryBuildRange     criteriaWIPProjId;
    QueryBuildRange     criteriaProjId;

    QueryBuildRange     criteriaProjInvoiceProjId;
    QueryBuildRange     criteriaFixedPrice;
    QueryBuildRange     criteriaTimeMaterial;
    QueryBuildRange     criteriaInternal;
    QueryBuildRange     criteriaCost;
    QueryBuildRange     criteriaInvestment;
    QueryBuildRange     criteriaTime;
    QueryBuildRange     criteriaSorting1;
    QueryBuildRange     criteriaSorting2;
    QueryBuildRange     criteriaSorting3;
    QueryBuildRange     criteriaGroupId;
    QueryBuildRange     criteriaCustAccount;

    //  range projCategoryId
    QueryBuildRange     criteriaCategoryGroupId;

    //  range projRevenueTrans
    QueryBuildRange     criteriaResource;
    QueryBuildRange     criteriaTransDate;
    QueryBuildRange     criteriaCategoryId;
    QueryBuildRange     criteriaRecId;

    ProjStatistic       projStatistic;
    TransDate           ledgerFromDate;
    TransDate           ledgerToDate;

    ProjCashFlow        projCashFlow;

    boolean             refreshCallerOnClose;
    boolean             cdsLockingOptionForecasts;

    private boolean isProjForecastListPageV2FeatureEnabled;
    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

}
]]></Source>
			</Method>
			<Method>
				<Name>categoryTable</Name>
				<Source><![CDATA[
    boolean categoryTable(ProjStatistic _projStatistic = projStatistic)
    {
        return (_projStatistic && _projStatistic.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryTableCashFlow</Name>
				<Source><![CDATA[
    boolean categoryTableCashFlow(ProjCashFlow _projCashFlow = projCashFlow)
    {
        return (_projCashFlow && _projCashFlow.parmCategoryGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        FormRun caller;
        FormDataSource fds;

        if ( refreshCallerOnClose )
        {
            caller = element.args().caller();

            if ( caller )
            {
                fds = caller.dataSource(1);

                if ( fds )
                {
                    fds.research(true);
                }
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReFreshDatasource</Name>
				<Source><![CDATA[
    void doReFreshDatasource()
    {
        projForecastRevenue_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.setRefreshOnClose();

        boolean projOpsIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        isProjForecastListPageV2FeatureEnabled = FeatureStateProvider::IsFeatureEnabled(ProjForecastListPageV2Feature::instance());

        if (projOpsIntegrationEnabled)
        {
            this.form().design().showNewButton(AutoNoYes::No);
            this.form().design().showDeleteButton(AutoNoYes::No);
            this.form().design().viewEditMode(ViewEditMode::View);
        }

        super();

        //setting visibility of WBSID and TaskName columns as per projForecastListPageV2Feature 
        WBSID.visible(!isProjForecastListPageV2FeatureEnabled);
        TaskName.visible(!isProjForecastListPageV2FeatureEnabled);
        WBSID_v2.visible(isProjForecastListPageV2FeatureEnabled);
        TaskName_v2.visible(isProjForecastListPageV2FeatureEnabled);

        if (projOpsIntegrationEnabled)
        {
            Manipulation.visible(false);
            Manipulation.enabled(false);
        }

        cdsLockingOptionForecasts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjCashFlow</Name>
				<Source><![CDATA[
    void linkProjCashFlow()
    {
        #define.star('*')

        modelId     = projCashFlow.parmForecastModelId();
        projId      = projCashFlow.parmProjId();
        categoryId  = projCashFlow.parmCategoryId();
        resourceRecId = projCashFlow.parmResource();

        if (projCashFlow.parmFee())
        {
            if (projCashFlow.parmProjectFromDate() || projCashFlow.parmProjectToDate())
            {
                criteriaTransDate.value(SysQuery::range(projCashFlow.parmProjectFromDate(), projCashFlow.parmProjectToDate()));
            }

            if (projCashFlow.parmForecastModelId())
            {
                criteriaModelId.value(projCashFlow.parmForecastModelId());
            }

            if (projCashFlow.parmResource())
            {
                criteriaResource.value(queryValue(projCashFlow.parmResource()));
            }

            if (projCashFlow.parmCategoryId())
            {
                criteriaCategoryId.value(projCashFlow.parmCategoryId());
            }

            if (element.categoryTableCashFlow(element.args().parmObject()))
            {
                criteriaCategoryGroupId.value(projCashFlow.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projCashFlow.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projCashFlow.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projCashFlow.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projCashFlow.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projCashFlow.parmTimeProject())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projCashFlow.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projCashFlow.parmSorting1()));
            }

            if (projCashFlow.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projCashFlow.parmSorting2()));
            }

            if (projCashFlow.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projCashFlow.parmSorting3()));
            }

            if (projCashFlow.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projCashFlow.parmCustAccount()));
            }

            if (projCashFlow.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projCashFlow.parmProjGroupId()));
            }

            if (projCashFlow.parmProjTree())
            {
                criteriaProjId.value(projCashFlow.parmProjId()+ #star);
            }
            else
            {
                if (projCashFlow.parmProjId())
                {
                    criteriaProjId.value(queryValue(projCashFlow.parmProjId()));
                }
            }

            if (projCashFlow.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projCashFlow.parmProjWIPId()));
            }

            if (projCashFlow.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projCashFlow.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkProjStatistic</Name>
				<Source><![CDATA[
    void linkProjStatistic(
        )
    {
        #define.star('*')

        modelId     = projStatistic.parmForecastModelId();
        projId      = projStatistic.parmProjId();
        categoryId  = projStatistic.parmProjCategoryId();
        resourceRecId = projStatistic.parmResource();

        if (projStatistic.parmRevenue())
        {
            ledgerFromDate  = projStatistic.parmLedgerFromDate();
            ledgerToDate    = projStatistic.parmLedgerToDate();

            if (projStatistic.parmProjFromDate() || projStatistic.parmProjToDate())
            {
                criteriaTransDate.value(SysQuery::range(projStatistic.parmProjFromDate(), projStatistic.parmProjToDate()));
            }

            if (projStatistic.parmForecastModelId())
            {
                criteriaModelId.value(projStatistic.parmForecastModelId());
            }

            if (projStatistic.parmResource())
            {
                criteriaResource.value(queryValue(projStatistic.parmResource()));
            }

            if (projStatistic.parmProjCategoryId())
            {
                criteriaCategoryId.value(projStatistic.parmProjCategoryId());
            }

            if (element.categoryTable())
            {
                criteriaCategoryGroupId.value(projStatistic.parmCategoryGroupId());
            }

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                if (projStatistic.parmFixedPrice())
                {
                    criteriaFixedPrice.value(queryValue(ProjType::FixedPrice));
                }

                if (projStatistic.parmTimeMaterial())
                {
                    criteriaTimeMaterial.value(queryValue(ProjType::TimeMaterial));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaInternal.value(queryValue(ProjType::Cost));
                }

                if (projStatistic.parmInternalCost())
                {
                    criteriaCost.value(queryValue(ProjType::Internal));
                }

                if (projStatistic.parmInvestment())
                {
                    criteriaInvestment.value(queryValue(ProjType::Investment));
                }

                if (projStatistic.parmTime())
                {
                    criteriaTime.value(queryValue(ProjType::Time));
                }
            }

            if (projStatistic.parmSorting1())
            {
                criteriaSorting1.value(queryValue(projStatistic.parmSorting1()));
            }

            if (projStatistic.parmSorting2())
            {
                criteriaSorting2.value(queryValue(projStatistic.parmSorting2()));
            }

            if (projStatistic.parmSorting3())
            {
                criteriaSorting3.value(queryValue(projStatistic.parmSorting3()));
            }

            if (projStatistic.parmCustAccount())
            {
                criteriaCustAccount.value(queryValue(projStatistic.parmCustAccount()));
            }

            if (projStatistic.parmProjGroupId())
            {
                criteriaGroupId.value(queryValue(projStatistic.parmProjGroupId()));
            }

            if (projStatistic.parmProjTree())
            {
                criteriaProjId.value(projStatistic.parmProjId()+ #star);
            }
            else if (projStatistic.parmProjId())
            {
                criteriaProjId.value(queryValue(projStatistic.parmProjId()));
            }

            if (projStatistic.parmProjWIPId())
            {
                criteriaWIPProjId.value(queryValue(projStatistic.parmProjWIPId()));
            }

            if (projStatistic.parmProjInvoiceProjId())
            {
                criteriaProjInvoiceProjId.value(queryValue(projStatistic.parmProjInvoiceProjId()));
            }
        }
        else
        {
            criteriaProjId.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccessCategory</Name>
				<Source><![CDATA[
    void setFieldAccessCategory()
    {
        if (ProjCategory::find(projForecastRevenue.CategoryId).SetupEstimate)
        {
            projForecastRevenue_ds.object(fieldnum(ProjForecastRevenue, LinePropertyId)).allowEdit(false);
            projForecastRevenue_ds.object(fieldnum(ProjForecastRevenue, Resource)).allowEdit(false);
        }
        else
        {
            projForecastRevenue_ds.object(fieldnum(ProjForecastRevenue, LinePropertyId)).allowEdit(true);
            projForecastRevenue_ds.object(fieldnum(ProjForecastRevenue, Resource)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefreshOnClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets refreshOnClose flag to true only if the caller's name
    /// is: ProjForecastListPage
    /// </summary>
    private void setRefreshOnClose()
    {
        FormRun         caller;

        refreshCallerOnClose = false;

        if (element.args() && element.args().caller())
        {
            caller = element.args().caller();
            refreshCallerOnClose = strCmp(caller.name(), formStr(ProjForecastListPage)) == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectExternallyManaged</Name>
				<Source><![CDATA[
    private boolean validateProjectExternallyManaged(ProjId _projId)
    {
        boolean ret = true;

        if (cdsLockingOptionForecasts)
        {
            if (Project::isProjectExternallyManaged(_projId))
            {
                ret = checkFailed(strfmt("@Proj:ProjCDSValueInvalidDueToExternal", "@Proj:ProjCDSForecasts"));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjTypeIsFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the project type is fixed price or project Revenue transaction uses fixed price billing method.
    /// </summary>
    /// <returns>
    /// true if the project type is fixed price or project Revenue transaction uses fixed price billing method; otherwise, false.
    /// </returns>
    protected boolean checkProjTypeIsFixedPrice()
    {
        return ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projForecastRevenue.projTable(), ProjTransType::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjTypeIsTimeMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the project type is time & material or project Revenue transaction uses time & material billing method.
    /// </summary>
    /// <returns>
    /// true if the project type is time & material or project Revenue transaction uses time & material billing method; otherwise, false.
    /// </returns>
    protected boolean checkProjTypeIsTimeMaterial()
    {
        return ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projForecastRevenue.projTable(), ProjTransType::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var entityMenuOption = _menuOptions.getOptionsForEntity(tableStr(ProjForecastRevenueEntity));

        if (entityMenuOption)
        {
            entityMenuOption.includeDefault(false);
        }

        DocuTemplate docuTemplate = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, resourceStr(ProjForecastRevenueExcelTemplateV3));
        
        if (docuTemplate)
        {
            OfficeTemplateExportMenuItem menuItem = OfficeTemplateExportMenuItem::constructWithDocuTemplate(docuTemplate, docuTemplate.TemplateID);

            _menuOptions.customMenuItems().addEnd(menuItem);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProjIdFromCaller</Name>
				<Source><![CDATA[
    private void retrieveProjIdFromCaller()
    {
        Object caller = element.args().caller();
        switch (element.args().dataset())
        {
            case tableNum(ProjBudget):
                ProjBudget projBudget = element.args().record();
                projId = projBudget.RootProjId;
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case tableNum(ProjBudgetRevision):
                ProjBudgetRevision projBudgetRevision = element.args().record();
                projId = projBudgetRevision.rootProjId();
                if (caller && formHasMethod(caller, 'selectedProjId'))
                {
                    projId = caller.selectedProjId();
                }
                break;

            case(tableNum(ProjTable)):
                ProjTable projTable = element.args().record();
                projId = projTable.ProjId;
                break;

            case tableNum(ProjInvoiceTable):
                ProjInvoiceTable projInvoiceTable = element.args().record();
                projId = projInvoiceTable.ProjInvoiceProjId;
                break;

            case tableNum(ProjWIPTable)     :
                ProjWIPTable projWIPTable = element.args().record();
                projId = projWIPTable.ProjId;
                break;

            case(tableNum(TmpProjStatistic)):
                ProjStatistic tmpProjStatistic = element.args().parmObject();
                projId = tmpProjStatistic.parmProjId();
                break;

            case(tableNum(TmpProjCashFlow)):
                ProjCashFlow tmpProjCashFlow = element.args().parmObject();
                projId = tmpProjCashFlow.parmProjId();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTemplateFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of initial filters to be applied to the template.
    /// </summary>
    /// <param name="_menuItem">The export template menu item.</param>
    /// <returns>
    /// The Map of filters to apply.
    /// Keyed by AOT entity name.
    /// Values are all Microsoft.Dynamics.Platform.Integration.Office.FilterNode intances.
    /// </returns>
    /// <remarks>
    /// The filters supplied here will override any filters currently in the template.
    /// If no filter is suppled for a given entity, any filters currently in the template are retained.
    /// </remarks>
    public Map getInitialTemplateFilters(OfficeTemplateExportMenuItem _menuItem)
    {
        str templateName = resourceStr(ProjForecastRevenueExcelTemplateV3);
                 
        DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);
        Map filtersToApply = new Map(Types::String, Types::Class);

        // Ensure the template was present
        if (template && template.TemplateID == templateName)
        {
            #define.star("*")
            str projforecastRevenueEntity = tableStr(ProjForecastRevenueEntity);
            ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(projforecastRevenueEntity);
            if(ProjForecastFormsCallerIdentiferFlight::instance().isEnabled() && element.args().dataset())
            {
                this.retrieveProjIdFromCaller();
            }
            else
            {
                if(element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTable= element.args().record();
                    projId = projTable.ProjId;
                }
            }
            Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode filter = FilterBuilder.and(
                FilterBuilder.areEqual(fieldStr(ProjForecastRevenueEntity, ProjectID), projId + #star),
                FilterBuilder.areEqual(fieldStr(ProjForecastRevenueEntity, BudgetType), ProjForecastBudgetType::None));
            filtersToApply.insert(projforecastRevenueEntity, filter);
        }

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any updates to the settings contained within the template for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <param name="_settingsManager">The <see cref="SettingsManager"/> to use when performing the updates.</param>
    void updateTemplateSettings(OfficeTemplateExportMenuItem _menuItem, Microsoft.Dynamics.Platform.Integration.Office.SettingsManager _settingsManager)
    {
        // No implementation details for this since we don't need to update the template settings
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjForecastRevenue</Name>
				<Methods>
					<Method>
						<Name>buildCaptionTextForActiveRevenueItem</Name>
						<Source><![CDATA[
        str buildCaptionTextForActiveRevenueItem()
        {
            str activeRevenueLabel;

            //If the "Show report transaction" checkbox is checked, include the reportType in the caption string
            if (ctrlShowDerived.value() == NoYes::Yes)
            {
                // Build the string with details of the current forcast revenue item to use as label on the form caption
                activeRevenueLabel = strFmt("%1 - %2: %3, %4, %5: %6", "@SYS342501", "@SYS82923", projForecastRevenue.ModelId, date2StrUsr(projForecastRevenue.StartDate, DateFlags::FormatAll), "@SYS10223", projForecastRevenue.Report);
            }
            else
            {
                // Else include the ExpandID in the caption string
                // Build the string with details of the current forcast revenue item to use as label on the form caption
                activeRevenueLabel = strFmt("%1 - %2: %3, %4, %5: %6", "@SYS342501", "@SYS82923", projForecastRevenue.ModelId, date2StrUsr(projForecastRevenue.StartDate, DateFlags::FormatAll), "@SYS21776", projForecastRevenue.ExpandId);
            }

            return activeRevenueLabel;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            Object caller;

            ProjInvoiceTable        projInvoiceTable;
            ProjWIPTable            projWIPTable;
            ProjTable               projTable;
            ProjBudget              projBudget;
            ProjBudgetRevision      projBudgetRevision;

            QueryBuildRange         rangeProjId;

            #define.star("*")

            caller = element.args().caller();

            // Reset the Form Caption to just show the title of the form
            // If forcast revenue items exists for the current project, the Active method will be called
            // and it will update the caption to include details of the forcast revenue item
            element.design().caption("@SYS342501");

            switch (element.args().dataset())
            {
                case tableNum(ProjBudget):
                    projBudget = element.args().record();
                    projId = projBudget.RootProjId;
                    if (caller && formHasMethod(caller, 'selectedProjId'))
                    {
                        projId = caller.selectedProjId();
                    }
                    criteriaProjId.value(queryValue(projId) + #star);
                    break;

                case tableNum(ProjBudgetRevision):
                    projBudgetRevision = element.args().record();
                    projId = projBudgetRevision.rootProjId();
                    if (caller && formHasMethod(caller, 'selectedProjId'))
                    {
                        projId = caller.selectedProjId();
                    }
                    criteriaProjId.value(queryValue(projId) + #star);
                    break;

                case(tableNum(ProjTable)):
                    projTable   = element.args().record();
                    projId      = projTable.ProjId;
                    criteriaProjId.value(projId + #star);
                    break;

                case(tableNum(TmpProjStatistic)):
                    // linkActive called again .criteria changed... close form
                    if (projStatistic)
                    {
                        element.close();
                    }

                    projStatistic   = element.args().parmObject();
                    element.linkProjStatistic();
                    break;

                case(tableNum(TmpProjCashFlow)):
                    // linkActive called again .criteria changed... close form
                    if (projCashFlow)
                    {
                        element.close();
                    }

                    projCashFlow   = element.args().parmObject();
                    element.linkProjCashFlow();
                    break;

                case tableNum(ProjInvoiceTable):
                    rangeProjId    = projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).findRange(fieldNum(ProjForecastRevenue,ProjId));

                    while (rangeProjId)
                    {
                        projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).clearRange(fieldNum(ProjForecastRevenue,ProjId));
                        rangeProjId    = projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).findRange(fieldNum(ProjForecastRevenue,ProjId));
                    }

                    projInvoiceTable   = element.args().record();

                    while select ProjId from projTable
                        where projTable.ProjInvoiceProjId   == projInvoiceTable.ProjInvoiceProjId
                    {
                        projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).addRange(fieldNum(ProjForecastRevenue,ProjId)).value(projTable.ProjId);
                    }
                    modelId = ProjParameters::find().ModelId;
                    break;

                case tableNum(ProjWIPTable)     :
                    rangeProjId    = projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).findRange(fieldNum(ProjForecastRevenue,ProjId));

                    while (rangeProjId)
                    {
                        projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).clearRange(fieldNum(ProjForecastRevenue,ProjId));
                        rangeProjId    = projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).findRange(fieldNum(ProjForecastRevenue,ProjId));
                    }

                    projWIPTable   =   element.args().record();

                    while select ProjId from projTable
                        where projTable.wipProject  == projWIPTable.ProjId
                    {
                        projForecastRevenue_ds.query().dataSourceTable(tableNum(ProjForecastRevenue)).addRange(fieldNum(ProjForecastRevenue,ProjId)).value(projTable.ProjId);
                    }
                    modelId = ProjParameters::find().ModelId;
                    break;
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        void initValue()
        {
            projForecastRevenue.ProjId      = projId;
            if (projId && cdsLockingOptionForecasts)
            {
                if(Project::isProjectExternallyManaged(projId))
                {
                    projForecastRevenue.ProjId = '';
                }
            }

            projForecastRevenue.ModelId     = modelId;
            projForecastRevenue.Resource    = resourceRecId;
            projForecastRevenue.CategoryId  = categoryId;

            projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, CategoryId)).allowEdit(true);
            if (element.checkProjTypeIsFixedPrice())
            {
                projForecastRevenue.LinePropertyId  = '';
                if (element.enableProjMultipleContractLinesForProjectFeature)
                {
                    ProjRevenueProfile revProfile = ProjRevRecHelper::getRevProfile(projForecastRevenue.projTable(), ProjContractBillingMethod::FixedPrice, false);
                    if (revProfile.MatchingPrinciple == ProjMatchingPrincip::SalesValue)
                    {
                        projForecastRevenue.CategoryId = revProfile.SalesvalueCategoryId;
                        projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, CategoryId)).allowEdit(false);
                    }
                    else if (revProfile.MatchingPrinciple == ProjMatchingPrincip::ProductionProfit)
                    {
                        projForecastRevenue.CategoryId = revProfile.ProductionCategoryId;
                    }
                }
                else
                {
                    ProjGroup projGroupLocal = projForecastRevenue.projTable().projGroup();
                    if (projGroupLocal.MatchingPrincip == ProjMatchingPrincip::SalesValue)
                    {
                        projForecastRevenue.CategoryId = projGroupLocal.SalesvalueCategoryId;
                        projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, CategoryId)).allowEdit(false);
                    }
                    else if (projGroupLocal.MatchingPrincip == ProjMatchingPrincip::ProductionProfit)
                    {
                        projForecastRevenue.CategoryId = projGroupLocal.ProductionCategoryId;
                    }
                }
            }

            projForecastRevenue.initFromProjTable(ProjTable::find(projForecastRevenue.ProjId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query                       q = new Query();
            QueryBuildDataSource        qb_projTable, qb_ProjCategory, qb_projForecastTrans;
            ProjForecastRevenue         projForecastRevenueArg;

            super();

            projForecastRevenue_ds.autoQuery(false);

            qb_projForecastTrans = q.addDataSource(tableNum(ProjForecastRevenue));

            criteriaReport      = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue,Report));
            criteriaExpand      = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue,ExpandId));

            criteriaModelId     = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, ModelId));
            criteriaResource      = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, Resource));
            criteriaTransDate   = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, StartDate));
            criteriaCategoryId  = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, CategoryId));
            criteriaRecId       = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, RecId));
            qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, ProjForecastBudgetType)).value(queryValue(ProjForecastBudgetType::None));

            if (element.args().dataset() == tableNum(TmpProjStatistic) && element.categoryTable(element.args().parmObject()))
            {
                qb_ProjCategory                = qb_projForecastTrans.addDataSource(tableNum(ProjCategory));
                qb_ProjCategory.addLink(fieldNum(ProjForecastRevenue, CategoryId), fieldNum(ProjCategory, CategoryId));
                qb_ProjCategory.fetchMode(0);
                qb_ProjCategory.joinMode(JoinMode::ExistsJoin);

                criteriaCategoryGroupId        = qb_ProjCategory.addRange(fieldNum(ProjCategory, CategoryGroupId));
            }

            criteriaProjId              = qb_projForecastTrans.addRange(fieldNum(ProjForecastRevenue, ProjId));

            qb_projTable                = qb_projForecastTrans.addDataSource(tableNum(ProjTable));
            qb_projTable.addLink(fieldNum(ProjForecastRevenue, ProjId), fieldNum(ProjTable, ProjId));
            qb_projTable.fetchMode(0);
            qb_projTable.joinMode(JoinMode::ExistsJoin);

            criteriaProjInvoiceProjId   = qb_projTable.addRange(fieldNum(ProjTable, ProjInvoiceProjId));
            criteriaWIPProjId           = qb_projTable.addRange(fieldNum(ProjTable, wipProject));

            if (!element.enableProjMultipleContractLinesForProjectFeature)
            {
                criteriaFixedPrice          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTimeMaterial        = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInternal            = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaCost                = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaInvestment          = qb_projTable.addRange(fieldNum(ProjTable, Type));
                criteriaTime                = qb_projTable.addRange(fieldNum(ProjTable, Type));
            }

            criteriaSorting1            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 1);
            criteriaSorting2            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 2);
            criteriaSorting3            = qb_projTable.addRange(fieldNum(ProjTable, SortingId), 3);
            criteriaGroupId             = qb_projTable.addRange(fieldNum(ProjTable, ProjGroupId));
            criteriaCustAccount         = qb_projTable.addRange(fieldNum(ProjTable, CustAccount));

            if ( element.args() && element.args().dataset() == tableNum(ProjForecastRevenue))
            {
                projForecastRevenueArg = element.args().record();
                projId = projForecastRevenueArg.ProjId;
                criteriaRecId.value(queryValue(projForecastRevenueArg.RecId));
            }

            this.query(q);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        void executeQuery()
        {
            if (ctrlShowDerived.value() == NoYes::Yes)
            {
                criteriaReport.value(queryValue(NoYes::Yes));
                criteriaExpand.value('');
            }
            else
            {
                criteriaReport.value('');
                criteriaExpand.value('0');
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        int active()
        {
            #SysSystemDefinedButtons

            boolean         canEdit = ! projForecastRevenue.derived();
            ForecastModel   forecastModel;
            boolean         isBudgetForecast;
            int             ret;

            ret = super();

            ProjTable projTable = projForecastRevenue.projTable();

            // Set the Form Caption with the caption text used for the active forcast revenue item
            element.design().caption(this.buildCaptionTextForActiveRevenueItem());

            boolean isFixedPrice = ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTable, ProjTransType::Revenue);

            if (isFixedPrice)
            {
                projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, LinePropertyId)).allowEdit(false);
            }
            else
            {
                projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, LinePropertyId)).allowEdit(true);
            }

            projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, CategoryId)).allowEdit(true);

            if (isFixedPrice)
            {
                if (ProjRevRecHelper::getMatchingPrincipleForProjTable(projTable, false) == ProjMatchingPrincip::SalesValue)
                {
                    projForecastRevenue_ds.object(fieldNum(ProjForecastRevenue, CategoryId)).allowEdit(false);
                }
            }

            if (projForecastRevenue.ModelId)
            {
                forecastModel = ForecastModel::find(HeadingSub::Heading, projForecastRevenue.ModelId);
                if (forecastModel && forecastModel.Blocked)
                {
                    canEdit = false;
                }
            }

            boolean isExternallyManaged = Project::isProjectExternallyManaged(projTable.ProjId);
            boolean lockFieldsForForecasts = cdsLockingOptionForecasts && isExternallyManaged;

            this.allowEdit(canEdit && !lockFieldsForForecasts);
            this.allowDelete(canEdit && !lockFieldsForForecasts);

            manipulation.enabled(canEdit && !lockFieldsForForecasts);
            ProjForecastTransferFromQuotationFee.enabled(!lockFieldsForForecasts);
            element.setFieldAccessCategory();

            if (projForecastRevenue.ProjForecastBudgetType == ProjForecastBudgetType::None)
            {
                isBudgetForecast = true;
            }

            projForecastRevenue_ds.allowEdit(isBudgetForecast && !lockFieldsForForecasts);
            projForecastRevenue_ds.allowDelete(isBudgetForecast && !lockFieldsForForecasts);

            FormCommandButtonControl editButton = element.control(element.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
            editButton.enabled(projForecastRevenue_ds.allowEdit());

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>deleteMarked</Name>
						<Source><![CDATA[
        public void deleteMarked()
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CreatedBy</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                
                if (element.checkProjTypeIsFixedPrice())
                {
                    ProjTable projTableLocal = projForecastRevenue.projTable();
                    ProjMatchingPrincip matchingPrincip = ProjRevRecHelper::getMatchingPrincipleForProjTable(projTableLocal, false);

                    if (matchingPrincip == ProjMatchingPrincip::ProductionProfit)
                    {
                        ProjCategory::lookupProjCategoryProductionProfit(_formControl, projTableLocal.projGroup());
                    }
                    else if (matchingPrincip == ProjMatchingPrincip::SalesValue)
                    {
                        ProjCategory::lookupProjCategorySalesValue(_formControl, projTableLocal.projGroup());
                    }
                    else
                    {
                        super(_formControl, _filterStr);
                    }
                }
                else if (element.checkProjTypeIsTimeMaterial())
                {
                    ProjCategory::lookupProjFee(_formControl);
                }
                else
                {
                    super(_formControl, _filterStr);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.setFieldAccessCategory();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ModelId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ForecastModel::lookupOpenModels(_formControl);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjFundingSource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::resolveReferenceByContractFSName(_formReferenceControl, ProjTable::find(projForecastRevenue.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ProjFundingSource::lookupFundingSourceByContract(_formReferenceControl, ProjTable::find(projForecastRevenue.ProjId).ProjInvoiceProjId);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Clear funding source field
                projForecastRevenue_ds.clearReferenceData(fieldNum(ProjForecastRevenue, ProjFundingSource));
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (cdsLockingOptionForecasts)
                {
                    ProjTable::lookupProjIdRestrictingExternal(_formControl, ProjForecastRevenue, NoYes::No, cdsLockingOptionForecasts);
                    return;
                }

                if (element.args().dataset() == tableNum(ProjTable))
                {
                    ProjTable projTableLocal = element.args().record();

                    if (projTableLocal.RecId)
                    {
                        if (projTableLocal.WIPProject)
                        {
                            ProjTable::lookupProjWIPProj(_formControl, projTableLocal.ProjId, cdsLockingOptionForecasts);
                        }
                        else
                        {
                            ProjTable::lookupSelectedProjId(_formControl, _filterStr, projTableLocal.ProjId);
                        }

                        return;
                    }
                }

                ProjTable::lookupProjId(_formControl, ProjForecastRevenue);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Resource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                ResourceView ret;

                ret = super(_formReferenceControl);

                if (ret.RecId && !ResourceLookup::validateResource(ret.RecId, projForecastRevenue))
                {
                    ret = null;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ResourceLookup::lookupResource(_formReferenceControl, projForecastRevenue);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>ProjWBSEstimatesView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {   
            if(!isProjForecastListPageV2FeatureEnabled)
            {
                ProjWBSEstimatesView_ds.autoQuery(true);
                ProjWBSEstimatesView_ds.linkType(DataSourceLinkTypePropertyValues::Outer);
            }
            
            super();
                                                                          
            if(!isProjForecastListPageV2FeatureEnabled)
            {
                Query query = this.query();
                QueryBuildDataSource projWBSEstimateView = query.dataSourceTable(tableNum(ProjWBSEstimatesView));
                projWBSEstimateView.addRange(fieldNum(ProjWBSEstimatesView, ActivityNumber)).value(SysQuery::valueNotEmptyString());
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjWBSActivityNumberView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if(isProjForecastListPageV2FeatureEnabled)
            {
                projWBSActivityNumberView_ds.autoQuery(true);
                projWBSActivityNumberView_ds.linkType(DataSourceLinkTypePropertyValues::Outer);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Manipulation</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            projForecastRevenue_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlShowDerived</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        boolean modified()
        {
            boolean ret;

            ret = super();

            if (this.value())
            {
                criteriaExpand.value(strfmt('%1', ''));
            }
            else
            {
                criteriaReport.value(strfmt('%1', 0));
            }

            if (this.value())
            {
                criteriaReport.value(strfmt('%1', ''));
            }
            else
            {
                criteriaReport.value(strfmt('%1', 0));
            }

            projForecastRevenue_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjectRevenueBudget_Project</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Identification_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
    
            ret = super();
    
            if (ret)
            {
                ret = element.validateProjectExternallyManaged(this.text());
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjForecastRevenue</Name>
			<Table>ProjForecastRevenue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Active</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllocateMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EliminationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpandId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Freq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PeriodAllocateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjForecastBudgetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjFundingSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Report</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPaymDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Stop</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjWBSEstimatesView</Name>
			<Table>ProjWBSEstimatesView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WBSID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<JoinSource>ProjForecastRevenue</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjWBSActivityNumberView</Name>
			<Table>ProjWBSActivityNumberView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HierarchyTaskId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WBSID</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<JoinSource>ProjForecastRevenue</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS342501</Caption>
		<DataSource xmlns="">ProjForecastRevenue</DataSource>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>Manipulation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataSource>ProjForecastRevenue</DataSource>
								<MenuItemName>ProjForecastRevenueEdit</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjTransBudget</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>ProjTransBudget</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ProjForecastTransferFromQuotationFee</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>ProjForecastTransferFromQuotationFee</MenuItemName>
								<Text>@SYS84496</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>TradeAgreement</Name>
								<ConfigurationKey>PriceDisc</ConfigurationKey>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>SalesPriceFee</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>ProjSalesPriceRevenue</MenuItemName>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS13768</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Criteria</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>ctrlShowDerived</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS25020</Label>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Overview</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WBSID_v2</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WBSID</DataField>
										<DataSource>ProjWBSActivityNumberView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaskName_v2</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaskName</DataField>
										<DataSource>ProjWBSActivityNumberView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>WBSID</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>WBSID</DataField>
										<DataSource>ProjWBSEstimatesView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaskName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaskName</DataField>
										<DataSource>ProjWBSEstimatesView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectRevenueBudget_BudgetNum</Name>
										<ElementPosition>330382098</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ModelId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Derived</Name>
										<ElementPosition>495573147</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>Derived</DataMethod>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjectRevenueBudget_StartDate</Name>
										<ElementPosition>660764196</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectRevenueBudget_Project</Name>
										<ElementPosition>825955245</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjBudgetRevenue_CategoryId</Name>
										<ElementPosition>991146294</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ProjForecastRevenue_Resource</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjForecastRevenue</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectRevenueBudget_Txt</Name>
										<ElementPosition>1321528392</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjectRevenueBudget_CurrencyCode</Name>
										<ElementPosition>1486719441</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ProjectRevenueBudget_SalesPrice</Name>
										<ElementPosition>1651910490</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProjForecastRevenue_LinePropertyId</Name>
										<ElementPosition>1817101539</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ProjForecastRevenue_ProjForecastBudgetType</Name>
										<ElementPosition>1982292588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjForecastBudgetType</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>ProjForecastRevenue</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>General</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ModelId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ModelId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Identification_StartDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_ProjId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_ProjFundingSource</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Identification_ProjFundingSource_FundingSourceId</Name>
												<DataRelationPath>FundingSource</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjForecastRevenue</DataSource>
										<ReferenceField>ProjFundingSource</ReferenceField>
										<ReplacementFieldGroup>FundingSourceName</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_CategoryId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CategoryId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Identification_Resource</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>ProjForecastRevenue</DataSource>
										<ReferenceField>Resource</ReferenceField>
										<ReplacementFieldGroup>ResourceId</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_LinePropertyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LinePropertyId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Transaction</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_TransId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Transaction_Txt</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Transaction</DataGroup>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesPrice</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesPrice_CurrencyId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_ExchRate</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchRate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesPrice_SalesPrice</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPrice</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>SalesPrice</DataGroup>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Administration</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Administration_Active</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Active</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Administration_modifiedBy</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>modifiedBy</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Administration</DataGroup>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Allocation</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Allocation_AllocateMethod</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AllocateMethod</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>Allocation_Freq</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Freq</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Allocation_FreqCode</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FreqCode</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Allocation_EndDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EndDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Allocation_PeriodAllocateId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PeriodAllocateId</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Allocation_Stop</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Stop</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Allocation</DataGroup>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Dates</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DatesGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DatesGroup_StartDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DatesGroup_InvoiceDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DatesGroup_EliminationDate</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EliminationDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>DatesGroup_SalesPaymDate</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesPaymDate</DataField>
										<DataSource>ProjForecastRevenue</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Dates</DataGroup>
								<DataSource>ProjForecastRevenue</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS80293</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<NeededPermission>Manual</NeededPermission>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>ProjForecastRevenue</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS101181</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>ProjForecastRevenue</DataSource>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>