<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PCBOMLineDetails</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PCBOMLineDetails extends FormRun
{
    PCClass             component;
    PCTemplateComponent templateComponent;
    DataAreaId          currentCompany;
    PCRequirement       requirementType;

    // utility class used to find template records
    PCTemplateFind templateFind;
    #ISOCountryRegionCodes

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        element.writeAllocations();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        FormButtonControl callerButton;
        boolean           allowEdit;

        Args args = element.args();
        if ((args == null) || (args.record() == null) || !args.caller())
        {
            throw error(Error::missingRecord(funcName()));
        }

        super();

        // Allow editing BOM lines, if user may edit product configuration models.
        // As this form is created with a class factory, the security framework cannot handle this without the code below.
        if (args.caller() is FormButtonControl)
        {
            callerButton = args.caller();

            if (callerButton.formRun().form().name() == formStr(PCProductConfigurationModelDetails))
            {
                allowEdit = SecurityRights::construct().menuItemAccessRight(
                    SecurableType::MenuItemDisplay,
                    menuitemDisplayStr(PCProductConfigurationModelDetails)) > AccessRight::View;

                ItemNumberGroup.allowEdit(allowEdit);
                Tab.allowEdit(allowEdit);
            }
        }

        templateFind = PCTemplateFind::construct();

        // The form does not support dyna linking, so we make sure the buffer is not updated by caller
        templateComponent = args.record().data();
        args.record(templateComponent);

        currentCompany = templateComponent.dataArea();

        if (templateComponent.Requirement == PCRequirement::ActivityRequirement)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        requirementType = templateComponent.Requirement;

        component = PCClass::find(templateComponent.ComponentClass);
        element.loadAllocations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return itemId.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all value allocations from the templates to the controls on this form.
    /// </summary>
    public void loadAllocations()
    {
        PCTemplateAttributeBinding      templateAttributeBinding;
        PCTemplateAttribute             fieldReference;

        PCTemplateAttributeBinding    findBindingByIDs(TableId _tableId, FieldId _fieldId)
        {
            PCTemplateAttributeBinding binding;

            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(_tableId, _fieldId);

            select  firstonly binding
            where   binding.TemplateAttribute == fieldReference.RecId
            &&      binding.TemplateComponent == templateComponent.RecId;

            return binding;
        }

        //populate the value fields, fill the right radio selections and enable the groups:
        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ItemId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, itemId, allocateItemId, itemId_Allocation, allocationGroup_ItemId);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_ItemId, itemId_Allocation);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Position));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, position, allocatePosition, position_Allocation, allocationGroup_Position);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, VendId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, vendor, allocateVendor, vendor_Allocation, allocationGroup_Vendor);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, bomType));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, linetype_value, lineType_attribute, allocateLineType, lineType_Allocation, allocationGroup_LineType);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, OprNum));
        PCModelingLibrary::templateLoadIntAllocation( component, templateAttributeBinding, operation_value, operation_attribute, allocateOperation, operation_Allocation, allocationGroup_Operation);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Calculation));
        PCModelingLibrary::templateLoadBoolAllocation( component, templateAttributeBinding, calculation_value, calculation_attribute, allocateCalculation, calculation_Allocation, allocationGroup_Calculation);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ProjSetSubProdToConsumed));
        PCModelingLibrary::templateLoadBoolAllocation( component, templateAttributeBinding, prodConsumed_value, prodConsumed_attribute, allocateProdConsumed, prodConsumed_Allocation, allocationGroup_ProdConsumed);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, EndSchedConsump));
        PCModelingLibrary::templateLoadBoolAllocation( component, templateAttributeBinding, end_value, end_attribute, allocateEnd, end_Allocation, allocationGroup_End);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ItemRouteId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, subRoute, allocateSubRoute, subRoute_Allocation, allocationGroup_SubRoute);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ItemBOMId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, subBOM, allocateSubBOM, subBOM_Allocation, allocationGroup_SubBOM);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, FromDate));
        PCModelingLibrary::templateLoadDateTimeAllocation( component, templateAttributeBinding, validFrom_value, validFrom_attribute, allocateValidFrom, validFrom_Allocation, allocationGroup_ValidFrom);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ToDate));
        PCModelingLibrary::templateLoadDateTimeAllocation( component, templateAttributeBinding, validTo_value, validTo_attribute, allocateValidTo, validTo_Allocation, allocationGroup_ValidTo);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, WrkCtrConsumption));
        PCModelingLibrary::templateLoadBoolAllocation( component, templateAttributeBinding, consumption_value, consumption_attribute, allocateConsumption, consumption_Allocation, allocationGroup_Consumption);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Formula));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, formula_value, formula_attribute, allocateFormula, formula_Allocation, allocationGroup_Formula);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, bomQty));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, quantity_value, quantity_attribute, allocateQuantity, quantity_Allocation, allocationGroup_Quantity);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, bomQtySerie));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, quantitySeries_value, quantitySeries_attribute, allocateQuantitySeries, quantitySeries_Allocation, allocationGroup_QuantitySeries);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, UnitId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, unit, allocateUnit, unit_Allocation, allocationGroup_Unit);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, bomConsump));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, consumptionType_value, consumptionType_attribute, allocateConsumptionType, consumptionType_Allocation, allocationGroup_ConsumptionType);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ProdFlushingPrincip));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, flushingPrinciple_value, flushingPrinciple_attribute, allocateFlushingPrinciple, flushingPrinciple_Allocation, allocationGroup_FlushingPrinciple);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, BomWHSReleasePolicy));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, bomWHSReleasePolicy_value, bomWHSReleasePolicy_attribute, allocateBomWHSReleasePolicy, bomWHSReleasePolicy_Allocation, allocationGroup_BomWHSReleasePolicy);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ScrapConst));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, constantScrap_value, constantScrap_attribute, allocateConstantScrap, constantScrap_Allocation, allocationGroup_ConstantScrap);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, ScrapVar));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, percentScrap_value, percentScrap_attribute, allocatePercentScrap, percentScrap_Allocation, allocationGroup_PercentScrap);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, RoundUp));
        PCModelingLibrary::templateLoadEnumAllocation( component, templateAttributeBinding, roundingUp_value, roundingUp_attribute, allocateRoundingUp, roundingUp_Allocation, allocationGroup_RoundingUp);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, RoundUpQty));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, multiples_value, multiples_attribute, allocateMultiples, multiples_Allocation, allocationGroup_Multiples);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Height));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, height_value, height_attribute, allocateHeight, height_Allocation, allocationGroup_Height);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Width));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, width_value, width_attribute, allocateWidth, width_Allocation, allocationGroup_Width);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Depth));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, depth_value, depth_attribute, allocateDepth, depth_Allocation, allocationGroup_Depth);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Density));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, density_value, density_attribute, allocateDensity, density_Allocation, allocationGroup_Density);

        templateAttributeBinding = findBindingByIDs(tableNum(BOM), fieldNum(BOM, Constant));
        PCModelingLibrary::templateLoadFloatAllocation( component, templateAttributeBinding, constant_value, constant_attribute, allocateConstant, constant_Allocation, allocationGroup_Constant);

        #InventDimDevelop
        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, ConfigId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, configuration, allocateConfiguration, configuration_Allocation, allocationGroup_Configuration);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventSizeId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, size, allocateSize, size_Allocation, allocationGroup_Size);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventColorId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, color, allocateColor, color_Allocation, allocationGroup_Color);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventStyleId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, style, allocateStyle, style_Allocation, allocationGroup_Style);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventVersionId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, version, allocateVersion, version_Allocation, allocationGroup_Version);


        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventLocationId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, warehouse, allocateWarehouse, warehouse_Allocation, allocationGroup_Warehouse);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventBatchId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, batchNumber, allocateBatchNumber, batchNumber_Allocation, allocationGroup_BatchNumber);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, wmsLocationId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, location, allocateLocation, location_Allocation, allocationGroup_Location);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventSerialId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, serialNumber, allocateSerialNumber, serialNumber_Allocation, allocationGroup_SerialNumber);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventStatusId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, status, allocateStatus, status_Allocation, allocationGroup_Status);

        templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, LicensePlateId));
        PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, licensePlate, allocateLicensePlate, licensePlate_Allocation, allocationGroup_LicensePlate);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventGtdId_RU));
            PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, gtd_RU, allocateGtd_RU, gtd_Allocation_RU, allocationGroup_Gtd_RU);

            templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventProfileId_RU));
            PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, profile_RU, allocateProfile_RU, profile_Allocation_RU, allocationGroup_Profile_RU);

            templateAttributeBinding = findBindingByIDs(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU));
            PCModelingLibrary::templateLoadStringAllocation( component, templateAttributeBinding, owner_RU, allocateOwner_RU, owner_Allocation_RU, allocationGroup_Owner_RU);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
        element.updateRadioControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAdjustConfigurationDimensionControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the configuration dimension controls should be adjusted or not.
    /// </summary>
    /// <returns>
    /// true if  the configuration dimension controls should be adjusted; otherwise, false.
    /// </returns>
    [Hookable]
    protected boolean shouldAdjustConfigurationDimensionControls()
    {
        return requirementType != PCRequirement::SubComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the mandatory status of the dimension and unit controls for the selected item.
    /// </summary>
    public void updateDimensionRequirements()
    {
        InventTable item;

        void adjustDimensionControls(
            boolean             _activate,
            FormCheckBoxControl _checkBox,
            FormGroupControl    _group,
            FormRadioControl    _radioControl)
        {
            if (_activate)
            {
                PCModelingLibrary::templateSetEnabledStatus(true, _group, _radioControl);
                _checkBox.value(NoYes::Yes);
            }
            else
            {
                PCModelingLibrary::templateSetEnabledStatus(false, _group, _radioControl);
                _checkBox.value(NoYes::No);
            }
            _checkBox.enabled(false);
        }

        changecompany(currentCompany)
        {
            item  = InventTable::find(element.itemId());
            //configuration
            if (this.shouldAdjustConfigurationDimensionControls())
            {
                adjustDimensionControls(item.configActive(), allocateConfiguration, allocationGroup_configuration, configuration_allocation);
            }

            //size
            adjustDimensionControls(item.sizeActive(), allocateSize, allocationGroup_Size, size_allocation);

            //color
            adjustDimensionControls(item.colorActive(), allocateColor, allocationGroup_color, color_allocation);

            //style
            adjustDimensionControls(item.styleActive(), allocateStyle, allocationGroup_style, style_allocation);

            //version
            adjustDimensionControls(item.productVersionActive(), allocateVersion, allocationGroup_version, version_allocation);

            //enter the default unit for the item, if any
            if (item.bomUnitId && (unit_allocation.selection()==PCAllocation::Value))
            {
                unit.text(item.bomUnitId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRadioControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the enabled status of the radio button controls on the form, based on the allocations.
    /// </summary>
    /// <remarks>
    /// Add a post-method handler for setting the controls correctly when extending the <c>PCRequirement</c> enumeration.
    /// </remarks>
    public void updateRadioControls()
    {
        str     label;
        //
        //controls that change status post initialization need to be rendered,
        //so this is called after Run()
        //

        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_ItemId, itemId_Allocation );
        PCModelingLibrary::templateSetEnabledStatus((allocateVendor.value() == NoYes::Yes), allocationGroup_Vendor, vendor_Allocation );
        PCModelingLibrary::templateSetEnabledStatus((allocatePosition.value() == NoYes::Yes), allocationGroup_Position, position_Allocation );
        PCModelingLibrary::templateSetEnabledStatus((allocateLineType.value() == NoYes::Yes), allocationGroup_LineType, lineType_Allocation );
        PCModelingLibrary::templateSetEnabledStatus((allocateCalculation.value() == NoYes::Yes), allocationGroup_calculation, calculation_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateSubroute.value() == NoYes::Yes), allocationGroup_subroute, subroute_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateSubbom.value() == NoYes::Yes), allocationGroup_subbom, subbom_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateProdConsumed.value() == NoYes::Yes), allocationGroup_ProdConsumed, prodConsumed_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateValidFrom.value() == NoYes::Yes), allocationGroup_ValidFrom, validFrom_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateValidTo.value() == NoYes::Yes), allocationGroup_ValidTo, validTo_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateOperation.value() == NoYes::Yes), allocationGroup_Operation, operation_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateEnd.value() == NoYes::Yes), allocationGroup_End, end_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateConsumption.value() == NoYes::Yes), allocationGroup_Consumption, consumption_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateFormula.value() == NoYes::Yes), allocationGroup_Formula, formula_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateQuantity.value() == NoYes::Yes), allocationGroup_Quantity, quantity_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateQuantitySeries.value() == NoYes::Yes), allocationGroup_QuantitySeries, quantitySeries_allocation);
        PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_Unit, unit_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateConsumptionType.value() == NoYes::Yes), allocationGroup_ConsumptionType, consumptionType_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateFlushingPrinciple.value() == NoYes::Yes), allocationGroup_FlushingPrinciple, flushingPrinciple_allocation);
        PCModelingLibrary::templateSetEnabledStatus((AllocateBomWHSReleasePolicy.value() == NoYes::Yes), AllocationGroup_BomWHSReleasePolicy, bomWHSReleasePolicy_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateConstantScrap.value() == NoYes::Yes), allocationGroup_ConstantScrap, constantScrap_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocatePercentScrap.value() == NoYes::Yes), allocationGroup_PercentScrap, percentScrap_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateRoundingUp.value() == NoYes::Yes), allocationGroup_RoundingUp, roundingUp_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateMultiples.value() == NoYes::Yes), allocationGroup_Multiples, multiples_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateHeight.value() == NoYes::Yes), allocationGroup_Height, height_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateWidth.value() == NoYes::Yes), allocationGroup_Width, width_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateDepth.value() == NoYes::Yes), allocationGroup_Depth, depth_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateDensity.value() == NoYes::Yes), allocationGroup_Density, density_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateConstant.value() == NoYes::Yes), allocationGroup_Constant, constant_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateConfiguration.value() == NoYes::Yes), allocationGroup_configuration, configuration_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateSize.value() == NoYes::Yes), allocationGroup_Size, size_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateColor.value() == NoYes::Yes), allocationGroup_color, color_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateStyle.value() == NoYes::Yes), allocationGroup_style, style_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateVersion.value() == NoYes::Yes), allocationGroup_version, version_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateWarehouse.value() == NoYes::Yes), allocationGroup_Warehouse, warehouse_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateBatchNumber.value() == NoYes::Yes), allocationGroup_BatchNumber, batchNumber_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateLocation.value() == NoYes::Yes), allocationGroup_location, location_allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateSerialNumber.value() == NoYes::Yes), allocationGroup_SerialNumber, serialNumber_Allocation);

        PCModelingLibrary::templateSetEnabledStatus((allocateStatus.value() == NoYes::Yes), allocationGroup_Status, status_Allocation);
        PCModelingLibrary::templateSetEnabledStatus((allocateLicensePlate.value() == NoYes::Yes), allocationGroup_LicensePlate, licensePlate_Allocation);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            PCModelingLibrary::templateSetEnabledStatus((allocateGtd_RU.value() == NoYes::Yes), allocationGroup_Gtd_RU, gtd_Allocation_RU);
            PCModelingLibrary::templateSetEnabledStatus((allocateProfile_RU.value() == NoYes::Yes), allocationGroup_Profile_RU, profile_Allocation_RU);
            PCModelingLibrary::templateSetEnabledStatus((allocateOwner_RU.value() == NoYes::Yes), allocationGroup_Owner_RU, owner_Allocation_RU);
        }
        // </GEERU>

        if (requirementType == PCRequirement::SubComponent)
        {
            //displaying "autogenerated" as a text for the configuration control
            label = configuration.labelText();
            PCModelingLibrary::templateSetEnabledStatus(false, allocationGroup_configuration, configuration_allocation);
            configuration.extendedDataType(extendedTypeNum(Name));
            configuration.label(label);
            configuration.text("@SYS99919");

            //lock the config choice
            allocateConfiguration.enabled(false);

            PCModelingLibrary::templateSetEnabledStatus(true, allocationGroup_ItemId, itemId_Allocation );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequirementType</Name>
				<Source><![CDATA[
    public PCRequirement parmRequirementType()
    {
        return requirementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_BatchNumber</Name>
				<Source><![CDATA[
    public boolean validate_BatchNumber()
    {
        InventBatch             batchRecord;
        InventBatchId           inventBatchId;
        Name                    name;
        boolean                 ret = true;

        if (batchNumber_Allocation.selection() == PCAllocation::Value)
        {
            inventBatchId = batchNumber.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from batchRecord
                where batchRecord.InventBatchId == inventBatchId;

                if (!batchRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = batchNumber.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", batchNumber.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Calculation</Name>
				<Source><![CDATA[
    public boolean validate_Calculation()
    {
        Name                    name;
        boolean                 ret = true;

        if (calculation_Allocation.selection() == PCAllocation::Attribute)
        {
            name = calculation_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", calculation_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_CategoryAttribute</Name>
				<Source><![CDATA[
    public boolean validate_CategoryAttribute(Name _name)
    {
        EcoResAttribute         attribute;
        EcoResCategoryAttribute categoryAttribute;

        select  firstonly   RecId from attribute
        where   attribute.Name      ==  _name
        join    firstonly   RecId from categoryAttribute
        where   categoryAttribute.Attribute  == attribute.RecId
        &&      categoryAttribute.Category   == component.RecId;

        return (attribute.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Color</Name>
				<Source><![CDATA[
    public boolean validate_Color()
    {
        EcoResColorName         colorId;
        Name                    name;
        boolean                 ret = true;

        if (color_Allocation.selection() == PCAllocation::Value)
        {
            colorId = color.text();
            if (!colorId)
            {
                ret = false;
            }
            else
            {
                changecompany(currentCompany)
                {
                    if (!InventTable::find(element.itemId()).checkColorId(colorId))
                    {
                        ret = false;
                    }
                }
            }
        }
        else
        {
            name = color.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", color.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Configuration</Name>
				<Source><![CDATA[
    public boolean validate_Configuration()
    {
        EcoResConfigurationName configId;
        Name                    name;
        boolean                 ret = true;

        if (configuration_Allocation.selection() == PCAllocation::Value)
        {
            configId = configuration.text();
            if (!configId)
            {
                ret = false;
            }
            else
            {
                changecompany(currentCompany)
                {
                    if (!InventTable::find(element.itemId()).checkConfigId(configId))
                    {
                        ret = false;
                    }
                }
            }
        }
        else
        {
            name = configuration.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", configuration.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Constant</Name>
				<Source><![CDATA[
    public boolean validate_Constant()
    {
        Name                    name;
        boolean                 ret = true;

        if (constant_Allocation.selection() == PCAllocation::Attribute)
        {
            name = constant_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", constant_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ConstantScrap</Name>
				<Source><![CDATA[
    public boolean validate_ConstantScrap()
    {
        Name                    name;
        boolean                 ret = true;

        if (constantScrap_Allocation.selection() == PCAllocation::Attribute)
        {
            name = constantScrap_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", constantScrap_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Consumption</Name>
				<Source><![CDATA[
    public boolean validate_Consumption()
    {
        Name                    name;
        boolean                 ret = true;

        if (consumption_Allocation.selection() == PCAllocation::Attribute)
        {
            name = consumption_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", consumption_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ConsumptionType</Name>
				<Source><![CDATA[
    public boolean validate_ConsumptionType()
    {
        Name                    name;
        boolean                 ret = true;

        if (consumptionType_Allocation.selection() == PCAllocation::Attribute)
        {
            name = consumptionType_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", consumptionType_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Density</Name>
				<Source><![CDATA[
    public boolean validate_Density()
    {
        Name                    name;
        boolean                 ret = true;

        if (density_Allocation.selection() == PCAllocation::Attribute)
        {
            name = density_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", density_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Depth</Name>
				<Source><![CDATA[
    public boolean validate_Depth()
    {
        Name                    name;
        boolean                 ret = true;

        if (depth_Allocation.selection() == PCAllocation::Attribute)
        {
            name = depth_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", depth_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_End</Name>
				<Source><![CDATA[
    public boolean validate_End()
    {
        Name                    name;
        boolean                 ret = true;

        if (end_Allocation.selection() == PCAllocation::Attribute)
        {
            name = end_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", end_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_FlushingPrinciple</Name>
				<Source><![CDATA[
    public boolean validate_FlushingPrinciple()
    {
        Name                    name;
        boolean                 ret = true;

        if (flushingPrinciple_Allocation.selection() == PCAllocation::Attribute)
        {
            name = flushingPrinciple_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", flushingPrinciple_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_BomWHSReleasePolicy</Name>
				<Source><![CDATA[
    public boolean validate_BomWHSReleasePolicy()
    {
        Name                    name;
        boolean                 ret = true;

        if (bomWHSReleasePolicy_Allocation.selection() == PCAllocation::Attribute)
        {
            name = bomWHSReleasePolicy_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", bomWHSReleasePolicy_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Formula</Name>
				<Source><![CDATA[
    public boolean validate_Formula()
    {
        Name                    name;
        boolean                 ret = true;

        if (formula_Allocation.selection() == PCAllocation::Attribute)
        {
            name = formula_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", formula_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Gtd_RU</Name>
				<Source><![CDATA[
    public boolean validate_Gtd_RU()
    {
        InventGTD_RU    gtdRecord;
        InventGTDId_RU  gtdId;
        Name            name;
        boolean         ret = true;

        if (gtd_Allocation_RU.selection() == PCAllocation::Value)
        {
            gtdId = gtd_RU.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from gtdRecord
                where gtdRecord.InventGTDId == gtdId;

                if (!gtdRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = gtd_RU.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", gtd_RU.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Height</Name>
				<Source><![CDATA[
    public boolean validate_Height()
    {
        Name                    name;
        boolean                 ret = true;

        if (height_Allocation.selection() == PCAllocation::Attribute)
        {
            name = height_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", height_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ItemIdDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for Validating the itemId.
    /// </summary>
    /// <param name = "_pCBOMLineDetails">The instance of the form that called this delegate.</param>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where a boolean that is true if the itemID is valid; otherwise, false can be returned.</param>
    delegate void validate_ItemIdDelegate(
        FormRun             _pCBOMLineDetails,
        InventTable         _inventTable,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ItemId</Name>
				<Source><![CDATA[
    public boolean validate_ItemId()
    {
        InventTable             item;
        Name                    name;
        boolean                 ret = true;

        if (itemId_Allocation.selection() == PCAllocation::Value)
        {
            changecompany(currentCompany)
            {
                item = InventTable::find(element.itemId());
                if (!item)
                {
                    ret = false;
                }
                else if (requirementType == PCRequirement::SubComponent)
                {
                    ret = item.isConstraintBasedConfigurable();
                }
            }
        }
        else
        {
            name = itemId.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        EventHandlerResult result = new EventHandlerResult();
        this.validate_ItemIdDelegate(this, item, result);

        if (result.hasResult())
        {
            ret = result.result();
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", itemId.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_LicensePlate</Name>
				<Source><![CDATA[
    public boolean validate_LicensePlate()
    {
        WHSLicensePlateId       licensePlateId;
        Name                    name;
        boolean                 ret = true;

        if (licensePlate_Allocation.selection() == PCAllocation::Value)
        {
            licensePlateId = licensePlate.text();
            changecompany(currentCompany)
            {
                ret = WHSLicensePlate::exist(licensePlateId);
            }
        }
        else
        {
            name = licensePlate.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", licensePLate.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_LineType</Name>
				<Source><![CDATA[
    public boolean validate_LineType()
    {
        Name                    name;
        boolean                 ret = true;

        if (lineType_Allocation.selection() == PCAllocation::Attribute)
        {
            name = lineType_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", lineType_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Location</Name>
				<Source><![CDATA[
    public boolean validate_Location()
    {
        boolean ret = true;

        if (batchNumber_Allocation.selection() == PCAllocation::Value)
        {
            changecompany(currentCompany)
            {
                if (!element.locationRecordExists())
                {
                    ret = false;
                }
            }
        }
        else
        {
            ret = element.validate_CategoryAttribute(batchNumber.text());
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", location.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationRecordExists</Name>
				<Source><![CDATA[
    private boolean locationRecordExists()
    {
        WMSLocation record;

        select firstonly RecId from record
            where record.WMSLocationId == location.text()
                && (!element.hasWarehouseValue() || record.InventLocationId == Warehouse.valueStr());

        return record ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Multiples</Name>
				<Source><![CDATA[
    public boolean validate_Multiples()
    {
        Name                    name;
        boolean                 ret = true;

        if (multiples_Allocation.selection() == PCAllocation::Attribute)
        {
            name = multiples_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", multiples_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Operation</Name>
				<Source><![CDATA[
    public boolean validate_Operation()
    {
        Name                    name;
        boolean                 ret = true;

        if (operation_Allocation.selection() == PCAllocation::Attribute)
        {
            name = operation_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", operation_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Owner_RU</Name>
				<Source><![CDATA[
    public boolean validate_Owner_RU()
    {
        InventOwner_RU    ownerRecord;
        InventOwnerId_RU  ownerId;
        Name              name;
        boolean           ret = true;

        if (owner_Allocation_RU.selection() == PCAllocation::Value)
        {
            ownerId = owner_RU.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from ownerRecord
                where ownerRecord.InventOwnerId == ownerId;

                if (!ownerRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = owner_RU.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", owner_RU.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_PercentScrap</Name>
				<Source><![CDATA[
    public boolean validate_PercentScrap()
    {
        Name                    name;
        boolean                 ret = true;

        if (percentScrap_Allocation.selection() == PCAllocation::Attribute)
        {
            name = percentScrap_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", percentScrap_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Position</Name>
				<Source><![CDATA[
    public boolean validate_Position()
    {
        Name                    name;
        boolean                 ret = true;

        if (position_Allocation.selection() == PCAllocation::Attribute)
        {
            name = position.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", position.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ProdConsumed</Name>
				<Source><![CDATA[
    public boolean validate_ProdConsumed()
    {
        Name                    name;
        boolean                 ret = true;

        if (prodConsumed_Allocation.selection() == PCAllocation::Attribute)
        {
            name = prodConsumed_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", prodConsumed_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Profile_RU</Name>
				<Source><![CDATA[
    public boolean validate_Profile_RU()
    {
        InventProfile_RU    profileRecord;
        InventProfileId_RU  profileId;
        Name            name;
        boolean         ret = true;

        if (profile_Allocation_RU.selection() == PCAllocation::Value)
        {
            profileId = profile_RU.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from profileRecord
                where profileRecord.InventProfileId == profileId;

                if (!profileRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = profile_RU.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", profile_RU.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Quantity</Name>
				<Source><![CDATA[
    public boolean validate_Quantity()
    {
        Name                    name;
        boolean                 ret = true;

        if (quantity_Allocation.selection() == PCAllocation::Attribute)
        {
            name = quantity_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", quantity_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_QuantitySeries</Name>
				<Source><![CDATA[
    public boolean validate_QuantitySeries()
    {
        Name                    name;
        boolean                 ret = true;

        if (quantitySeries_Allocation.selection() == PCAllocation::Attribute)
        {
            name = quantitySeries_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", quantitySeries_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RoundingUp</Name>
				<Source><![CDATA[
    public boolean validate_RoundingUp()
    {
        Name                    name;
        boolean                 ret = true;

        if (roundingUp_Allocation.selection() == PCAllocation::Attribute)
        {
            name = roundingUp_Attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", roundingUp_Attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SerialNumber</Name>
				<Source><![CDATA[
    public boolean validate_SerialNumber()
    {
        InventSerial    serialRecord;
        InventSerialId  serialId;
        Name            name;
        boolean         ret = true;

        if (serialNumber_Allocation.selection() == PCAllocation::Value)
        {
            serialId = serialNumber.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from serialRecord
                where serialRecord.InventSerialId == serialId;

                if (!serialRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = serialNumber.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", serialNumber.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Size</Name>
				<Source><![CDATA[
    public boolean validate_Size()
    {
        EcoResSizeName          inventSizeId;
        Name                    name;
        boolean                 ret = true;

        if (size_Allocation.selection() == PCAllocation::Value)
        {
            inventSizeId = size.text();
            if (!inventSizeId)
            {
                ret = false;
            }
            else
            {
                changecompany(currentCompany)
                {
                    if (!InventTable::find(element.itemId()).checkSizeId(inventSizeId))
                    {
                        ret = false;
                    }
                }
            }
        }
        else
        {
            name = size.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", size.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Status</Name>
				<Source><![CDATA[
    public boolean validate_Status()
    {
        WHSInventStatusId       inventStatusId;
        Name                    name;
        boolean                 ret = true;

        if (status_Allocation.selection() == PCAllocation::Value)
        {
            inventStatusId = status.text();
            changecompany(currentCompany)
            {
                ret = WHSInventStatus::exist(inventStatusId);
            }
        }
        else
        {
            name = status.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", status.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Style</Name>
				<Source><![CDATA[
    public boolean validate_Style()
    {
        EcoResStyleName         styleId;
        Name                    name;
        boolean                 ret = true;

        if (style_Allocation.selection() == PCAllocation::Value)
        {
            styleId = style.text();
            if (!styleId)
            {
                ret = false;
            }
            else
            {
                changecompany(currentCompany)
                {
                    if (!InventTable::find(element.itemId()).checkStyleId(styleId))
                    {
                        ret = false;
                    }
                }
            }
        }
        else
        {
            name = style.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", style.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Version</Name>
				<Source><![CDATA[
    public boolean validate_Version()
    {
        EcoResVersionName         versionId;
        Name                    name;
        boolean                 ret = true;

        if (version_Allocation.selection() == PCAllocation::Value)
        {
            versionId = version.text();
            if (!versionId)
            {
                ret = false;
            }
            else
            {
                changecompany(currentCompany)
                {
                    if (!InventTable::find(element.itemId()).checkProductVersionId(versionId))
                    {
                        ret = false;
                    }
                }
            }
        }
        else
        {
            name = version.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", version.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SubBOM</Name>
				<Source><![CDATA[
    public boolean validate_SubBOM()
    {
        BOM     bom;
        BOMId   bomId;
        Name    name;
        boolean ret = true;

        if (subBOM_Allocation.selection() == PCAllocation::Value)
        {
            bomId = subBom.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from bom
                where bom.bomId == bomId;

                if (!bom)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = subbom.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", subbom.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SubRoute</Name>
				<Source><![CDATA[
    public boolean validate_SubRoute()
    {
        Route   route;
        RouteId routeId;
        Name    name;
        boolean ret = true;

        if (subRoute_Allocation.selection() == PCAllocation::Value)
        {
            routeId = subroute.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from route
                where route.RouteId == routeId;

                if (!route)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = subroute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", subroute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Unit</Name>
				<Source><![CDATA[
    public boolean validate_Unit()
    {
        UnitOfMeasureSymbol unitOfMeasureSymbol;
        Name                name;
        boolean             ret = true;

        if (unit_Allocation.selection() == PCAllocation::Value)
        {
            unitOfMeasureSymbol = unit.text();
            if (!UnitOfMeasure::find(UnitOfMeasure::unitOfMeasureIdBySymbol(unitOfMeasureSymbol)))
            {
                ret = false;
            }
        }
        else
        {
            name = unit.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", unit.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ValidFrom</Name>
				<Source><![CDATA[
    public boolean validate_ValidFrom()
    {
        Name                    name;
        boolean                 ret = true;

        if (validFrom_Allocation.selection() == PCAllocation::Attribute)
        {
            name = validFrom_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", validFrom_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ValidTo</Name>
				<Source><![CDATA[
    public boolean validate_ValidTo()
    {
        Name                    name;
        boolean                 ret = true;

        if (validTo_Allocation.selection() == PCAllocation::Attribute)
        {
            name = validTo_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", validTo_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Vendor</Name>
				<Source><![CDATA[
    public boolean validate_Vendor()
    {
        VendTable     vendorAccount;
        VendAccount   vendAcctId;
        Name          name;
        boolean       ret = true;

        if (vendor_Allocation.selection() == PCAllocation::Value)
        {
            vendAcctId = vendor.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from vendorAccount
                where vendorAccount.AccountNum == vendAcctId;

                if (!vendorAccount)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = vendor.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", vendor.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Warehouse</Name>
				<Source><![CDATA[
    public boolean validate_Warehouse()
    {
        InventLocation          warehouseRecord;
        InventLocationId        warehouseId;
        Name                    name;
        boolean                 ret = true;

        if (warehouse_Allocation.selection() == PCAllocation::Value)
        {
            warehouseId = warehouse.text();
            changecompany(currentCompany)
            {
                select firstonly RecId from warehouseRecord
                where warehouseRecord.InventLocationId == warehouseId;

                if (!warehouseRecord)
                {
                    ret = false;
                }
            }
        }
        else
        {
            name = warehouse.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", warehouse.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_Width</Name>
				<Source><![CDATA[
    public boolean validate_Width()
    {
        Name                    name;
        boolean                 ret = true;

        if (width_Allocation.selection() == PCAllocation::Attribute)
        {
            name = width_attribute.text();
            ret  = element.validate_CategoryAttribute(name);
        }

        if (!ret)
        {
            throw error(strFmt("@SYS32810", width_attribute.labelText()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateFieldReferenceTemplateAttribute</Name>
				<Source><![CDATA[
    private PCTemplateAttribute findOrCreateFieldReferenceTemplateAttribute(TableId _tableId, FieldId _fieldId)
    {
        PCTemplateAttribute fieldReference;
        
        fieldReference = templateFind.findOrCreateTemplateAttributeByTableIdAndFieldId(_tableId, _fieldId);

        return fieldReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAllocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes all allocations specified on the controls on this form to template records.
    /// </summary>
    public void writeAllocations()
    {
        PCTemplateAttributeBinding      templateAttributeBinding;
        PCTemplateAttribute             fieldReference;

        //delete previous allocations first
        ttsbegin;
        delete_from templateAttributeBinding
        where       templateAttributeBinding.TemplateComponent == templateComponent.RecId;

        if ((allocateItemId.value() == NoYes::Yes) && element.validate_ItemId())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ItemId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, itemId,itemId_Allocation);
        }

        if ((allocatePosition.value() == NoYes::Yes) && element.validate_Position())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Position));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, position, position_Allocation);
        }

        if ((allocateVendor.value() == NoYes::Yes) && element.validate_Vendor())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, VendId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, vendor, vendor_Allocation);
        }

        if ((allocateLineType.value() == NoYes::Yes) && element.validate_LineType())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, bomType));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, lineType_Value, lineType_Attribute, lineType_Allocation);
        }

        if ((allocateOperation.value() == NoYes::Yes) && element.validate_Operation())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, OprNum));
            PCModelingLibrary::templateSaveIntAllocation( component, templateComponent, fieldReference, operation_Value, operation_Attribute, operation_Allocation);
        }

        if ((allocateEnd.value() == NoYes::Yes) && element.validate_End())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, EndSchedConsump));
            PCModelingLibrary::templateSaveBoolAllocation( component, templateComponent, fieldReference, end_Value, end_Attribute, end_Allocation);
        }

        if ((allocateCalculation.value() == NoYes::Yes) && element.validate_Calculation())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Calculation));
            PCModelingLibrary::templateSaveBoolAllocation( component, templateComponent, fieldReference, calculation_Value, calculation_Attribute, calculation_Allocation);
        }

        if ((allocateProdConsumed.value() == NoYes::Yes) && element.validate_ProdConsumed())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ProjSetSubProdToConsumed));
            PCModelingLibrary::templateSaveBoolAllocation( component, templateComponent, fieldReference, prodConsumed_Value, prodConsumed_Attribute, prodConsumed_Allocation);
        }

        if ((allocateSubRoute.value() == NoYes::Yes) && element.validate_SubRoute())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ItemRouteId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, subRoute, subRoute_Allocation);
        }
        if ((allocateSubBOM.value() == NoYes::Yes) && element.validate_SubBOM())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ItemBOMId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, subBOM, subBOM_Allocation);
        }

        if ((allocateValidFrom.value() == NoYes::Yes) && element.validate_ValidFrom())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, FromDate));
            PCModelingLibrary::templateSaveDateTimeAllocation( component, templateComponent,fieldReference, validFrom_value, validFrom_attribute, validFrom_Allocation);
        }

        if ((allocateValidTo.value() == NoYes::Yes) && element.validate_ValidTo())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ToDate));
            PCModelingLibrary::templateSaveDateTimeAllocation( component, templateComponent,fieldReference, validTo_value, validTo_attribute, validTo_Allocation);
        }

        if ((allocateConsumption.value() == NoYes::Yes) && element.validate_Consumption())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, WrkCtrConsumption));
            PCModelingLibrary::templateSaveBoolAllocation( component, templateComponent, fieldReference, consumption_Value, consumption_Attribute, consumption_Allocation);
        }

        if ((allocateFormula.value() == NoYes::Yes) && element.validate_Formula())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Formula));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, formula_Value, formula_Attribute, formula_Allocation);
        }

        if ((allocateQuantity.value() == NoYes::Yes) && element.validate_Quantity())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, bomQty));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, quantity_Value, quantity_Attribute, quantity_Allocation);
        }

        if ((allocateQuantitySeries.value() == NoYes::Yes) && element.validate_QuantitySeries())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, bomQtySerie));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, quantitySeries_Value, quantitySeries_Attribute, quantitySeries_Allocation);
        }

        if ((allocateUnit.value() == NoYes::Yes) && element.validate_Unit())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, UnitId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, unit, unit_Allocation);
        }

        if ((allocateConsumptionType.value() == NoYes::Yes) && element.validate_ConsumptionType())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, bomConsump));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, consumptionType_Value, consumptionType_Attribute, consumptionType_Allocation);
        }

        if ((allocateFlushingPrinciple.value() == NoYes::Yes) && element.validate_FlushingPrinciple())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ProdFlushingPrincip));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, flushingPrinciple_Value, flushingPrinciple_Attribute, flushingPrinciple_Allocation);
        }

        if ((allocateBomWHSReleasePolicy.value() == NoYes::Yes) && element.validate_BomWHSReleasePolicy())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, BomWHSReleasePolicy));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, bomWHSReleasePolicy_Value, bomWHSReleasePolicy_Attribute, bomWHSReleasePolicy_Allocation);
        }

        if ((allocateConstantScrap.value() == NoYes::Yes) && element.validate_ConstantScrap())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ScrapConst));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, constantScrap_Value, constantScrap_Attribute, constantScrap_Allocation);
        }

        if ((allocatePercentScrap.value() == NoYes::Yes) && element.validate_PercentScrap())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, ScrapVar));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, percentScrap_Value, percentScrap_Attribute, percentScrap_Allocation);
        }

        if ((allocateRoundingUp.value() == NoYes::Yes) && element.validate_RoundingUp())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, RoundUp));
            PCModelingLibrary::templateSaveEnumAllocation( component, templateComponent, fieldReference, roundingUp_Value, roundingUp_Attribute, roundingUp_Allocation);
        }

        if ((allocateMultiples.value() == NoYes::Yes) && element.validate_Multiples())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, RoundUpQty));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, multiples_Value, multiples_Attribute, multiples_Allocation);
        }

        if ((allocateHeight.value() == NoYes::Yes) && element.validate_Height())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Height));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, height_Value, height_Attribute, height_Allocation);
        }

        if ((allocateWidth.value() == NoYes::Yes) && element.validate_Width())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Width));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, width_Value, width_Attribute, width_Allocation);
        }

        if ((allocateDepth.value() == NoYes::Yes) && element.validate_Depth())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Depth));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, depth_Value, depth_Attribute, depth_Allocation);
        }

        if ((allocateDensity.value() == NoYes::Yes) && element.validate_Density())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Density));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, density_Value, density_Attribute, density_Allocation);
        }

        if ((allocateConstant.value() == NoYes::Yes) && element.validate_Constant())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(BOM), fieldNum(BOM, Constant));
            PCModelingLibrary::templateSaveFloatAllocation( component, templateComponent, fieldReference, constant_Value, constant_Attribute, constant_Allocation);
        }

        #InventDimDevelop
        if ((allocateConfiguration.value() == NoYes::Yes) && element.validate_Configuration())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, ConfigId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, configuration, configuration_Allocation);
        }

        if ((allocateSize.value() == NoYes::Yes) && element.validate_Size())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventSizeId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, size, size_Allocation);
        }

        if ((allocateColor.value() == NoYes::Yes) && element.validate_Color())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventColorId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, color, color_Allocation);
        }

        if ((allocateStyle.value() == NoYes::Yes) && element.validate_Style())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventStyleId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, style, style_Allocation);
        }

        if ((allocateVersion.value() == NoYes::Yes) && element.validate_Version())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventVersionId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, version, version_Allocation);
        }

        if ((allocateWarehouse.value() == NoYes::Yes) && element.validate_Warehouse())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventLocationId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, warehouse, warehouse_Allocation);
        }

        if ((allocateLicensePlate.value() == NoYes::Yes) && element.validate_LicensePlate())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, LicensePlateId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, licensePlate, licensePlate_Allocation);
        }

        if ((allocateStatus.value() == NoYes::Yes) && element.validate_Status())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventStatusId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, status, status_Allocation);
        }

        if ((allocateBatchNumber.value() == NoYes::Yes) && element.validate_BatchNumber())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventBatchId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, batchNumber, batchNumber_Allocation);
        }

        if ((allocateLocation.value() == NoYes::Yes) && element.validate_Location())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, wmsLocationId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, location, location_Allocation);
        }

        if ((allocateSerialNumber.value() == NoYes::Yes) && element.validate_SerialNumber())
        {
            fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventSerialId));
            PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, serialNumber, serialNumber_Allocation);
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if ((allocateGtd_RU.value() == NoYes::Yes) && element.validate_Gtd_RU())
            {
                fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventGtdId_RU));
                PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, gtd_RU, gtd_Allocation_RU);
            }
            if ((allocateProfile_RU.value() == NoYes::Yes) && element.validate_Profile_RU())
            {
                fieldReference = this.findOrCreateFieldReferenceTemplateAttribute(tableNum(InventDim), fieldNum(InventDim, InventProfileId_RU));
                PCModelingLibrary::templateSaveStringAllocation( component, templateComponent, fieldReference, profile_RU, profile_Allocation_RU);
            }
        }
        // </GEERU>
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWarehouseValue</Name>
				<Source><![CDATA[
    private boolean hasWarehouseValue()
    {
        return Warehouse_Allocation.selection() == PCAllocation::Value && Warehouse.valueStr();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>AllocateItemId</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ItemId, itemId_Allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (itemId_Allocation.selection() == PCAllocation::Value)
            {
                if (requirementType == PCRequirement::ProductRequirement)
                {
                    super();
                }
                else
                {
                    PCModelingLibrary::constraintBasedItemLookup(this, true);
                }
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (element.validate_ItemId() && (itemId_Allocation.selection() == PCAllocation::Value))
            {
                element.updateDimensionRequirements();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateItemId.value() == NoYes::Yes))
            {
                ret = element.validate_ItemId();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemId_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = itemId.labelText();

            ret = super();
            itemId.text('');

            if (this.selection() == PCAllocation::Value)
            {
                itemId.extendedDataType(extendedTypeNum(ItemId));
            }
            else
            {
                itemId.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                itemId.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateVendor</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Vendor, vendor_Allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Vendor</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (vendor_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateVendor.value() == NoYes::Yes))
            {
                ret = element.validate_Vendor();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Vendor_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = vendor.labelText();

            ret = super();
            vendor.text('');

            if (this.selection() == PCAllocation::Value)
            {
                vendor.extendedDataType(extendedTypeNum(VendAccount));
            }
            else
            {
                vendor.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                vendor.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocatePosition</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus(this.value() == NoYes::Yes, allocationGroup_Position, position_Allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Position</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (position_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocatePosition.value() == NoYes::Yes))
            {
                ret = element.validate_Position();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Position_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = position.labelText();

            ret = super();
            position.text('');

            if (this.selection() == PCAllocation::Value)
            {
                position.extendedDataType(extendedTypeNum(BOMPosition));
            }
            else
            {
                position.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                position.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateLineType</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_LineType, lineType_Allocation );
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LineType_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateLineType.value() == NoYes::Yes))
            {
                ret = element.validate_LineType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LineType_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateLineType.value() == NoYes::Yes))
            {
                ret = element.validate_LineType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LineType_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            lineType_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                lineType_attribute.visible(true);
                lineType_value.visible(false);
            }
            else
            {
                lineType_attribute.visible(false);
                lineType_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateCalculation</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_calculation, calculation_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Calculation_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateCalculation.value() == NoYes::Yes))
            {
                ret = element.validate_Calculation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Calculation_Value</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateCalculation.value() == NoYes::Yes))
            {
                ret = element.validate_Calculation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Calculation_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            calculation_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                calculation_attribute.visible(true);
                calculation_value.visible(false);
            }
            else
            {
                calculation_attribute.visible(false);
                calculation_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSubRoute</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_subroute, subroute_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubRoute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (subroute_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateSubRoute.value() == NoYes::Yes))
            {
                ret = element.validate_SubRoute();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubRoute_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = subroute.labelText();

            ret = super();
            subroute.text('');

            if (this.selection() == PCAllocation::Value)
            {
                subroute.extendedDataType(extendedTypeNum(ItemRouteId));
            }
            else
            {
                subroute.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                subroute.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSubBOM</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_subbom, subbom_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubBom</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (subbom_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateSubBOM.value() == NoYes::Yes))
            {
                ret = element.validate_SubBOM();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubBom_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = subbom.labelText();

            ret = super();
            subbom.text('');

            if (this.selection() == PCAllocation::Value)
            {
                subbom.extendedDataType(extendedTypeNum(ItemBOMId));
            }
            else
            {
                subbom.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                subbom.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateProdConsumed</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ProdConsumed, prodConsumed_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProdConsumed_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateProdConsumed.value() == NoYes::Yes))
            {
                ret = element.validate_ProdConsumed();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProdConsumed_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            prodConsumed_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                prodConsumed_attribute.visible(true);
                prodConsumed_value.visible(false);
            }
            else
            {
                prodConsumed_attribute.visible(false);
                prodConsumed_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateValidFrom</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ValidFrom, validFrom_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidFrom_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateValidFrom.value() == NoYes::Yes))
            {
                ret = element.validate_ValidFrom();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidFrom_Value</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateValidFrom.value() == NoYes::Yes))
            {
                ret = element.validate_ValidFrom();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidFrom_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            validFrom_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                validFrom_attribute.visible(true);
                validFrom_value.visible(false);
            }
            else
            {
                validFrom_attribute.visible(false);
                validFrom_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateValidTo</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ValidTo, validTo_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidTo_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateValidTo.value() == NoYes::Yes))
            {
                ret = element.validate_ValidTo();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidTo_Value</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateValidTo.value() == NoYes::Yes))
            {
                ret = element.validate_ValidTo();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidTo_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            validTo_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                validTo_attribute.visible(true);
                validTo_value.visible(false);
            }
            else
            {
                validTo_attribute.visible(false);
                validTo_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateOperation</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Operation, operation_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Operation_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateOperation.value() == NoYes::Yes))
            {
                ret = element.validate_Operation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Operation_Value</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateOperation.value() == NoYes::Yes))
            {
                ret = element.validate_Operation();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Operation_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            operation_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                operation_attribute.visible(true);
                operation_value.visible(false);
            }
            else
            {
                operation_attribute.visible(false);
                operation_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateEnd</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_End, end_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>End_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateEnd.value() == NoYes::Yes))
            {
                ret = element.validate_End();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>End_Value</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateEnd.value() == NoYes::Yes))
            {
                ret = element.validate_End();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>End_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            end_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                end_attribute.visible(true);
                end_value.visible(false);
            }
            else
            {
                end_attribute.visible(false);
                end_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateConsumption</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Consumption, consumption_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Consumption_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateConsumption.value() == NoYes::Yes))
            {
                ret = element.validate_Consumption();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Consumption_Value</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateConsumption.value() == NoYes::Yes))
            {
                ret = element.validate_Consumption();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Consumption_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            consumption_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                consumption_attribute.visible(true);
                consumption_value.visible(false);
            }
            else
            {
                consumption_attribute.visible(false);
                consumption_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateFormula</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Formula, formula_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFormula.value() == NoYes::Yes))
            {
                ret = element.validate_Formula();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateFormula.value() == NoYes::Yes))
            {
                ret = element.validate_Formula();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Formula_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            formula_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                formula_attribute.visible(true);
                formula_value.visible(false);
            }
            else
            {
                formula_attribute.visible(false);
                formula_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateQuantity</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Quantity, quantity_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Quantity_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQuantity.value() == NoYes::Yes))
            {
                ret = element.validate_Quantity();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Quantity_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (ret && (allocateQuantity.value() == NoYes::Yes))
            {
                ret = element.validate_Quantity();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Quantity_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            quantity_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                quantity_attribute.visible(true);
                quantity_value.visible(false);
            }
            else
            {
                quantity_attribute.visible(false);
                quantity_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateQuantitySeries</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_QuantitySeries, quantitySeries_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuantitySeries_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateQuantitySeries.value() == NoYes::Yes))
            {
                ret = element.validate_QuantitySeries();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuantitySeries_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateQuantitySeries.value() == NoYes::Yes))
            {
                ret = element.validate_QuantitySeries();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuantitySeries_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            quantitySeries_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                quantitySeries_attribute.visible(true);
                quantitySeries_value.visible(false);
            }
            else
            {
                quantitySeries_attribute.visible(false);
                quantitySeries_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateUnit</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Unit, unit_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Unit</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (unit_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateUnit.value() == NoYes::Yes))
            {
                ret = element.validate_Unit();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Unit_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = unit.labelText();

            ret = super();
            unit.text('');

            if (this.selection() == PCAllocation::Value)
            {
                unit.extendedDataType(extendedTypeNum(UnitOfMeasureSymbol));
            }
            else
            {
                unit.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                unit.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateConsumptionType</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ConsumptionType, consumptionType_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConsumptionType_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConsumptionType.value() == NoYes::Yes))
            {
                ret = element.validate_ConsumptionType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConsumptionType_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConsumptionType.value() == NoYes::Yes))
            {
                ret = element.validate_ConsumptionType();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConsumptionType_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            consumptionType_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                consumptionType_attribute.visible(true);
                consumptionType_value.visible(false);
            }
            else
            {
                consumptionType_attribute.visible(false);
                consumptionType_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateFlushingPrinciple</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_FlushingPrinciple, flushingPrinciple_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FlushingPrinciple_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateFlushingPrinciple.value() == NoYes::Yes))
            {
                ret = element.validate_FlushingPrinciple();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FlushingPrinciple_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateFlushingPrinciple.value() == NoYes::Yes))
            {
                ret = element.validate_FlushingPrinciple();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FlushingPrinciple_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            flushingPrinciple_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                flushingPrinciple_attribute.visible(true);
                flushingPrinciple_value.visible(false);
            }
            else
            {
                flushingPrinciple_attribute.visible(false);
                flushingPrinciple_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateBomWHSReleasePolicy</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();
    
            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_BomWHSReleasePolicy, bomWHSReleasePolicy_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BomWHSReleasePolicy_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();
            if (ret && (allocateFlushingPrinciple.value() == NoYes::Yes))
            {
                ret = element.validate_FlushingPrinciple();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BomWHSReleasePolicy_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();
            if (ret && (allocateBomWHSReleasePolicy.value() == NoYes::Yes))
            {
                ret = element.validate_BomWHSReleasePolicy();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BomWHSReleasePolicy_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();
            bomWHSReleasePolicy_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                bomWHSReleasePolicy_attribute.visible(true);
                bomWHSReleasePolicy_value.visible(false);
            }
            else
            {
                bomWHSReleasePolicy_attribute.visible(false);
                bomWHSReleasePolicy_value.visible(true);
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateConstantScrap</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_ConstantScrap, constantScrap_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConstantScrap_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConstantScrap.value() == NoYes::Yes))
            {
                ret = element.validate_ConstantScrap();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConstantScrap_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConstantScrap.value() == NoYes::Yes))
            {
                ret = element.validate_ConstantScrap();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ConstantScrap_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            constantScrap_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                constantScrap_attribute.visible(true);
                constantScrap_value.visible(false);
            }
            else
            {
                constantScrap_attribute.visible(false);
                constantScrap_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocatePercentScrap</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_PercentScrap, percentScrap_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PercentScrap_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocatePercentScrap.value() == NoYes::Yes))
            {
                ret = element.validate_PercentScrap();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PercentScrap_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocatePercentScrap.value() == NoYes::Yes))
            {
                ret = element.validate_PercentScrap();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PercentScrap_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            percentScrap_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                percentScrap_attribute.visible(true);
                percentScrap_value.visible(false);
            }
            else
            {
                percentScrap_attribute.visible(false);
                percentScrap_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateRoundingUp</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_RoundingUp, roundingUp_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RoundingUp_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateRoundingUp.value() == NoYes::Yes))
            {
                ret = element.validate_RoundingUp();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RoundingUp_Value</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateRoundingUp.value() == NoYes::Yes))
            {
                ret = element.validate_RoundingUp();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RoundingUp_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            roundingUp_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                roundingUp_attribute.visible(true);
                roundingUp_value.visible(false);
            }
            else
            {
                roundingUp_attribute.visible(false);
                roundingUp_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateMultiples</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Multiples, multiples_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Multiples_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateMultiples.value() == NoYes::Yes))
            {
                ret = element.validate_Multiples();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Multiples_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateMultiples.value() == NoYes::Yes))
            {
                ret = element.validate_Multiples();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Multiples_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            multiples_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                multiples_attribute.visible(true);
                multiples_value.visible(false);
            }
            else
            {
                multiples_attribute.visible(false);
                multiples_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateHeight</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Height, height_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Height_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateHeight.value() == NoYes::Yes))
            {
                ret = element.validate_Height();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Height_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateHeight.value() == NoYes::Yes))
            {
                ret = element.validate_Height();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Height_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            height_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                height_attribute.visible(true);
                height_value.visible(false);
            }
            else
            {
                height_attribute.visible(false);
                height_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateWidth</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Width, width_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Width_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateWidth.value() == NoYes::Yes))
            {
                ret = element.validate_Width();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Width_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateWidth.value() == NoYes::Yes))
            {
                ret = element.validate_Width();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Width_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            width_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                width_attribute.visible(true);
                width_value.visible(false);
            }
            else
            {
                width_attribute.visible(false);
                width_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateDepth</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Depth, depth_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Depth_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateDepth.value() == NoYes::Yes))
            {
                ret = element.validate_Depth();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Depth_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateDepth.value() == NoYes::Yes))
            {
                ret = element.validate_Depth();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Depth_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            depth_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                depth_attribute.visible(true);
                depth_value.visible(false);
            }
            else
            {
                depth_attribute.visible(false);
                depth_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateDensity</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Density, density_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Density_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateDensity.value() == NoYes::Yes))
            {
                ret = element.validate_Density();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Density_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateDensity.value() == NoYes::Yes))
            {
                ret = element.validate_Density();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Density_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            density_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                density_attribute.visible(true);
                density_value.visible(false);
            }
            else
            {
                density_attribute.visible(false);
                density_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateConstant</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Constant, constant_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Constant_Attribute</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            PCModelingLibrary::attributeLookup(this, component);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConstant.value() == NoYes::Yes))
            {
                ret = element.validate_Constant();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Constant_Value</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConstant.value() == NoYes::Yes))
            {
                ret = element.validate_Constant();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Constant_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            constant_attribute.text('');
            if (this.selection() == PCAllocation::Attribute)
            {
                constant_attribute.visible(true);
                constant_value.visible(false);
            }
            else
            {
                constant_attribute.visible(false);
                constant_value.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateConfiguration</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_configuration, configuration_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Configuration</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (configuration_Allocation.selection() == PCAllocation::Value)
            {
                ConfigLookup::lookupConfigId(this, element.itemId());
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateConfiguration.value() == NoYes::Yes))
            {
                ret = element.validate_Configuration();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Configuration_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = configuration.labelText();

            ret = super();
            configuration.text('');

            if (this.selection() == PCAllocation::Value)
            {
                configuration.extendedDataType(extendedTypeNum(EcoResConfigurationName));
            }
            else
            {
                configuration.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                configuration.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSize</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Size, size_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Size</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (size_Allocation.selection() == PCAllocation::Value)
            {
                EcoResProductVariantDimValue::lookupSimpleInventSizeId(this,
                            InventTable::itemProduct(element.itemId()));
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateSize.value() == NoYes::Yes))
            {
                ret = element.validate_Size();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Size_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = size.labelText();

            ret = super();
            size.text('');

            if (this.selection() == PCAllocation::Value)
            {
                size.extendedDataType(extendedTypeNum(EcoResSizeName));
            }
            else
            {
                size.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                size.label(label);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateColor</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_color, color_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Color</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (color_Allocation.selection() == PCAllocation::Value)
            {
                EcoResProductVariantDimValue::lookupSimpleInventColorId(this,
                            InventTable::itemProduct(element.itemId()));
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateColor.value() == NoYes::Yes))
            {
                ret = element.validate_Color();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Color_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = color.labelText();

            ret = super();
            color.text('');

            if (this.selection() == PCAllocation::Value)
            {
                color.extendedDataType(extendedTypeNum(EcoResColorName));
            }
            else
            {
                color.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                color.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateStyle</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_style, style_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Style</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (style_Allocation.selection() == PCAllocation::Value)
            {
                EcoResProductVariantDimValue::lookupSimpleInventStyleId(this,
                            InventTable::itemProduct(element.itemId()));
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateStyle.value() == NoYes::Yes))
            {
                ret = element.validate_Style();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Style_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = style.labelText();

            ret = super();
            style.text('');

            if (this.selection() == PCAllocation::Value)
            {
                style.extendedDataType(extendedTypeNum(EcoResStyleName));
            }
            else
            {
                style.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                style.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateVersion</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_version, version_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Version</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (version_Allocation.selection() == PCAllocation::Value)
            {
                EcoResProductVariantDimValue::lookupSimpleInventVersionId(this,
                            InventTable::itemProduct(element.itemId()));
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateVersion.value() == NoYes::Yes))
            {
                ret = element.validate_Version();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Version_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = version.labelText();

            ret = super();
            version.text('');

            if (this.selection() == PCAllocation::Value)
            {
                version.extendedDataType(extendedTypeNum(EcoResVersionName));
            }
            else
            {
                version.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                version.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateWarehouse</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Warehouse, warehouse_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Warehouse</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (warehouse_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateWarehouse.value() == NoYes::Yes))
            {
                ret = element.validate_Warehouse();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Warehouse_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = warehouse.labelText();

            ret = super();
            warehouse.text('');

            if (this.selection() == PCAllocation::Value)
            {
                warehouse.extendedDataType(extendedTypeNum(InventLocationId));
            }
            else
            {
                warehouse.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                warehouse.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateBatchNumber</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_BatchNumber, batchNumber_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BatchNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (batchNumber_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateBatchNumber.value() == NoYes::Yes))
            {
                ret = element.validate_BatchNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BatchNumber_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = batchNumber.labelText();

            ret = super();
            batchNumber.text('');

            if (this.selection() == PCAllocation::Value)
            {
                batchNumber.extendedDataType(extendedTypeNum(InventBatchId));
            }
            else
            {
                batchNumber.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                batchNumber.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateLocation</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_location, location_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Location</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (location_Allocation.selection() == PCAllocation::Value)
            {
                if (element.hasWarehouseValue())
                {
                    WMSLocation::lookupLocationId(this, Warehouse.valueStr());
                }
                else 
                {
                    super();
                }
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret && (allocateLocation.value() == NoYes::Yes))
            {
                ret = element.validate_Location();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Location_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = location.labelText();
            
            ret = super();
            location.text('');

            if (this.selection() == PCAllocation::Value)
            {
                location.extendedDataType(extendedTypeNum(WMSLocationId));
            }
            else
            {
                location.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                location.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateStatus</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_status, status_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Status</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (status_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret = super();

            if (ret && (allocateStatus.value() == NoYes::Yes))
            {
                ret = element.validate_Status();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Status_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = status.labelText();

            ret = super();
            status.text('');

            if (this.selection() == PCAllocation::Value)
            {
                status.extendedDataType(extendedTypeNum(WHSInventStatusId));
            }
            else
            {
                status.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                status.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateLicensePlate</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_licensePlate, licensePlate_allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LicensePlate</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (licensePlate_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateLicensePlate.value() == NoYes::Yes))
            {
                ret = element.validate_LicensePlate();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LicensePlate_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = licensePlate.labelText();

            ret = super();
            status.text('');

            if (this.selection() == PCAllocation::Value)
            {
                licensePlate.extendedDataType(extendedTypeNum(WHSLicensePlateId));
            }
            else
            {
                licensePlate.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                licensePlate.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateSerialNumber</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_SerialNumber, serialNumber_Allocation);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SerialNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (serialNumber_Allocation.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateSerialNumber.value() == NoYes::Yes))
            {
                ret = element.validate_SerialNumber();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SerialNumber_Allocation</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = serialNumber.labelText();

            ret = super();
            serialNumber.text('');

            if (this.selection() == PCAllocation::Value)
            {
                serialNumber.extendedDataType(extendedTypeNum(InventSerialId));
            }
            else
            {
                serialNumber.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                serialNumber.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateGtd_RU</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Gtd_RU, gtd_Allocation_RU);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Gtd_RU</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (gtd_Allocation_RU.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateGTD_RU.value() == NoYes::Yes))
            {
                ret = element.validate_GTD_RU();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Gtd_Allocation_RU</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = gtd_RU.labelText();

            ret = super();
            gtd_RU.text('');

            if (this.selection() == PCAllocation::Value)
            {
                gtd_RU.extendedDataType(extendedTypeNum(InventGTDId_RU));
            }
            else
            {
                gtd_RU.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                gtd_RU.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateProfile_RU</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Profile_RU, profile_Allocation_RU);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Profile_RU</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (profile_Allocation_RU.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateProfile_RU.value() == NoYes::Yes))
            {
                ret = element.validate_Profile_RU();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Profile_Allocation_RU</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = profile_RU.labelText();

            ret = super();
            profile_RU.text('');

            if (this.selection() == PCAllocation::Value)
            {
                profile_RU.extendedDataType(extendedTypeNum(InventProfileId_RU));
            }
            else
            {
                profile_RU.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                profile_RU.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateOwner_RU</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            PCModelingLibrary::templateSetEnabledStatus((this.value() == NoYes::Yes), allocationGroup_Owner_RU, owner_Allocation_RU);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Owner_RU</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (owner_Allocation_RU.selection() == PCAllocation::Value)
            {
                super();
            }
            else
            {
                PCModelingLibrary::attributeLookup(this, component);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();
            if (ret && (allocateOwner_RU.value() == NoYes::Yes))
            {
                ret = element.validate_Owner_RU();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Owner_Allocation_RU</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            str     label = owner_RU.labelText();

            ret = super();
            owner_RU.text('');

            if (this.selection() == PCAllocation::Value)
            {
                owner_RU.extendedDataType(extendedTypeNum(InventOwnerId_RU));
            }
            else
            {
                owner_RU.extendedDataType(extendedTypeNum(Name));
                //changing the EDT also changes the label to "name"
                owner_RU.label(label);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<AllowFormCompanyChange xmlns="">Yes</AllowFormCompanyChange>
		<Caption xmlns="">@SYS309533</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">SimpleWithoutClose</StatusBarStyle>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ItemNumberGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>AllocateItemId</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS95004</Label>
						<Value>1</Value>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>AllocationGroup_ItemId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@SYS112374</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ItemId</ExtendedDataType>
								<Label>@SYS111673</Label>
								<LookupButton>Always</LookupButton>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRadioButtonControl">
						<Name>ItemId_Allocation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>RadioButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Caption>@SYS111673</Caption>
						<Columns>3</Columns>
						<EnumType>PCAllocation</EnumType>
						<FrameType>None</FrameType>
						<Selection>1</Selection>
						<Items />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SubContractorGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>VendorGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateVendor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Vendor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Vendor</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>VendAccount</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Vendor_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS14048</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS22167</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BOMGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PositionGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocatePosition</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Position</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Position</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMPosition</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Position_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS9103</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LineTypeGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateLineType</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_LineType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LineType_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS25047</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS9844</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>LineType_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>BOMType</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>LineType_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS9844</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CalculationGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateCalculation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Calculation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Calculation_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS31242</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>Calculation_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS2935</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS31242</Label>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Calculation_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS31242</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SubRouteGroup</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSubRoute</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_SubRoute</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SubRoute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ItemRouteId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>SubRoute_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS27537</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SubBomGroup</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSubBOM</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_SubBOM</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SubBom</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ItemBOMId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>SubBom_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS27533</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS7916</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProjectGroup</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProdConsumedGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateProdConsumed</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ProdConsumed</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProdConsumed_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS111025</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>ProdConsumed_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS111026</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS111025</Label>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ProdConsumed_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS111025</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS80304</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ValidGroup</Name>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ValidFromGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateValidFrom</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ValidFrom</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ValidFrom_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS5209</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>ValidFrom_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS9680</HelpText>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>StartDate</ExtendedDataType>
														<Label>@SYS5209</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ValidFrom_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS5209</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ValidToGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateValidTo</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ValidTo</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ValidTo_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS14656</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>ValidTo_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS13966</HelpText>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EndDate</ExtendedDataType>
														<Label>@SYS14656</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ValidTo_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS14656</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS8553</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>OperationTopGroup</Name>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OperationGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateOperation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Operation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Operation_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS8503</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS14357</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>Operation_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>OprNumBOMLine</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Operation_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS5793</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>EndGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateEnd</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_End</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>End_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS98253</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS98252</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>End_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS98253</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS98252</Label>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>End_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS98252</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS4528</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ConsumptionTopGroup</Name>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ConsumptionGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateConsumption</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Consumption</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Consumption_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS105198</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>Consumption_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS105199</HelpText>
														<Type>CheckBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS105198</Label>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Consumption_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS105198</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<Caption>@SYS853</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS80118</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SetupTabPage</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ConsumptionCalculationGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FormulaGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateFormula</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Formula</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Formula_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS24584</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS672</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>Formula_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>BOMFormula</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Formula_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS672</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>QuantityGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateQuantity</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Quantity</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Quantity_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS4717</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS59970</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Quantity_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMQty</ExtendedDataType>
														<Label>@SYS59970</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Quantity_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS59970</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>QuantitySeriesGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateQuantitySeries</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_QuantitySeries</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>QuantitySeries_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS26284</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS26281</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>QuantitySeries_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMQtySerie</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>QuantitySeries_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS26281</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>UnitGroup</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateUnit</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
												<Value>1</Value>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Unit</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Unit</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
														<LookupButton>Always</LookupButton>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Unit_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS190813</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ConsumptionTypeGroup</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateConsumptionType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ConsumptionType</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ConsumptionType_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS16854</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS8096</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ConsumptionType_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>BOMConsumpType</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ConsumptionType_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS8096</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>FlushingPrincipleGroup</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateFlushingPrinciple</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_FlushingPrinciple</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>FlushingPrinciple_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS88161</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS88155</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>FlushingPrinciple_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>ProdFlushingPrincipBOM</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>FlushingPrinciple_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS88155</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BomWHSReleasePolicyGroup</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateBomWHSReleasePolicy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_BomWHSReleasePolicy</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>BomWHSReleasePolicy_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@WAX1884</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>BomWHSReleasePolicy_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>BomWHSReleasePolicy</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>BomWHSReleasePolicy_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@WAX1884</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ConstantScrapGroup</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateConstantScrap</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_ConstantScrap</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ConstantScrap_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS4329</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS73404</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ConstantScrap_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ScrapConst</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>ConstantScrap_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS73404</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PercentScrapGroup</Name>
										<ElementPosition>2139095038</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocatePercentScrap</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_PercentScrap</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PercentScrap_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS20829</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS73405</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>PercentScrap_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>ScrapVar</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>PercentScrap_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS73405</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS22165</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RoundingUpTopGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RoundingUpGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateRoundingUp</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_RoundingUp</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>RoundingUp_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS28430</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS2864</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>RoundingUp_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<EnumType>BOMRoundUp</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>RoundingUp_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS2864</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>MultiplesGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateMultiples</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Multiples</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Multiples_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS1617</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS15779</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Multiples_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMRoundUpQty</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Multiples_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS15779</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS2864</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MeasurementTopGroup</Name>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>HeightGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateHeight</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Height</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Height_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS17380</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS13182</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Height_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Height_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS13182</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WidthGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateWidth</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Width</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Width_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS25527</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS7069</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Width_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Width_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS7069</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DepthGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateDepth</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Depth</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Depth_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS17379</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS9514</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Depth_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Depth_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS9514</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DensityGroup</Name>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateDensity</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Density</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Density_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS17381</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS4911</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Density_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Density_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS4911</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ConstantGroup</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateConstant</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Constant</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Constant_Attribute</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@SYS14644</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS8939</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>Constant_Value</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>BOMMeasureConstant</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Constant_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS8939</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS34825</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS12687</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DimensionTabPage</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DimensionTopGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ConfigurationGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateConfiguration</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Configuration</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Configuration</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Configuration_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS14011</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SizeGroup</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSize</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Size</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Size</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EcoResSizeName</ExtendedDataType>
														<Label>@SYS28127</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Size_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS28127</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ColorGroup</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateColor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Color</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Color</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Color_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS73726</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StyleGroup</Name>
										<ElementPosition>1979711486</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateStyle</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Style</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Style</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Style_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@FPK270000</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>VersionGroup</Name>
										<ElementPosition>1979711486</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateVersion</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Version</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Version</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Version_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SCM:Version</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>WarehouseGroup</Name>
										<ElementPosition>2080374782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateWarehouse</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Warehouse</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Warehouse</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventLocationId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Warehouse_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS6437</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BatchNumberGroup</Name>
										<ElementPosition>2113929214</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateBatchNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_BatchNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>BatchNumber</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventBatchId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>BatchNumber_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS53635</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LocationGroup</Name>
										<ElementPosition>2130706430</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateLocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Location</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Location</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>WMSLocationId</ExtendedDataType>
														<Label>@SYS33556</Label>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Location_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS33556</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StatusGroup</Name>
										<ElementPosition>2133502632</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateStatus</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Status</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Status</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Status_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@WAX355</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>LicensePlateGroup</Name>
										<ElementPosition>2136298834</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateLicensePlate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_LicensePlate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LicensePlate</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>LicensePlate_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@WAX67</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SerialNumberGroup</Name>
										<ElementPosition>2143289342</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateSerialNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_SerialNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SerialNumber</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventSerialId</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>SerialNumber_Allocation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@SYS477</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GtdGroup_RU</Name>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>2144687443</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateGtd_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Gtd_RU</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Gtd_RU</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Gtd_Allocation_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@GLS115400</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ProfileGroup_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>2146085544</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateProfile_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Profile_RU</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Profile_RU</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Profile_Allocation_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@GLS113769</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>OwnerGroup_RU</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>2146784595</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>AllocateOwner_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS95004</Label>
												<ShowLabel>No</ShowLabel>
												<Style>Checkbox</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AllocationGroup_Owner_RU</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Owner_RU</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>InventOwnerId_RU</ExtendedDataType>
														<LookupButton>Always</LookupButton>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>Owner_Allocation_RU</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Left>0</Left>
												<LeftMode>RightEdge</LeftMode>
												<Type>RadioButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Caption>@GLS115496</Caption>
												<Columns>3</Columns>
												<EnumType>PCAllocation</EnumType>
												<FrameType>None</FrameType>
												<Selection>1</Selection>
												<Items />
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS53627</Caption>
							</AxFormControl>
						</Controls>
						<BackgroundColor>WindowBackground</BackgroundColor>
						<Caption>@SYS14926</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommit</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<LeftMode>AutoRight</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<LeftMode>RightEdge</LeftMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>