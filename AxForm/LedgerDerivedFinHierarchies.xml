<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerDerivedFinHierarchies</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerDerivedFinHierarchies extends FormRun
{
    LedgerDerivedFinHierarchyRuleStorage        ledgerDerivedFinHierarchyRuleStorage;
    DimensionExpressionController               ledgerDerivedFinRuleExpressionController;
    LedgerDerivedFinHierarchyMappingGen         ledgerDerivedFinHierarchyMappingGen;

    boolean                                     inEditMode;
    boolean                                     isCurrentFilterNew;

    EcoResCategoryTreeDatasource                hierarchyTree;

    EcoResCategoryHierarchyId                   ecoResCategoryHierarchyId;
    EcoResCategoryHierarchy                     currentSelectedCategoryHierarchy;
    recId                                       ledgerDerivedFinHierarchyId;
    recId                                       previousSelectedledgerDerivedFinHierarchyId;
    ImageListAppl_EcoResCategory                ecoResImageList;

    str valueSelected;

    #resAppl
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (inEditMode)
        {
            if (isCurrentFilterNew)
            {
                ledgerDerivedFinHierarchyRuleStorage = LedgerDerivedFinHierarchyRuleStorage::construct(ledgerDerivedFinHierarchyId);
                ledgerDerivedFinHierarchyId = ledgerDerivedFinHierarchyRuleStorage.save();
            }

            ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection(
                ledgerDerivedFinRuleExpressionController.getExpressionCriteriaCollection());
            ledgerDerivedFinHierarchyRuleStorage.save();

            ledgerDerivedFinHierarchyMappingGen.generateMapping(ledgerDerivedFinHierarchyId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #SysSystemDefinedButtons

        super();

        ledgerDerivedFinRuleExpressionController    = DimensionExpressionController::newForExpressionBuilder(FilterCriteriaBuilder);
        ledgerDerivedFinHierarchyMappingGen         = new LedgerDerivedFinHierarchyMappingGen();

        ledgerDerivedFinRuleExpressionController.setEnabled(false);

        ecoResImageList = new ImageListAppl_EcoResCategory();

        currentSelectedCategoryHierarchy = EcoResCategoryHierarchy::findByName(stringEdit.valueStr());

        // Disable the system-defined "Show filters" button.
        var showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and displays the tree view structure of the financial category hierarchy.
    /// </summary>
    void initializeHelper()
    {
        QueryBuildRange range;
        EcoResCategory  root;
        int             idx;
        FormTreeItem    formTreeItem;

        EcoResCategoryLookupParameters  lookupParameters = new EcoResCategoryLookupParameters(false, false, false);

        range = ecoResCategory_ds.query().dataSourceTable(tableNum(EcoResCategory)).addRange(fieldNum(EcoResCategory, CategoryHierarchy));
        range.value( queryValue(currentSelectedCategoryHierarchy.RecId ) );

        ecoResCategory_ds.executeQuery();

        root = EcoResCategory::getRoot(currentSelectedCategoryHierarchy.RecId);

        if (!root)
        {
            if (hierarchyTree != null)
            {
                ctrlFormTree.deleteAll();
            }
            hierarchyTree = null;
            return;
        }

        hierarchyTree = new EcoResCategoryTreeDatasource(ecoResCategory_ds,
                            ctrlFormTree,
                            fieldNum(EcoResCategory, RecId),
                            fieldNum(EcoResCategory, ParentCategory),
                            fieldNum(EcoResCategory, Name),
                            false,
                            true,
                            fieldNum(EcoResCategory, Code),
                            currentSelectedCategoryHierarchy,
                            null,
                            lookupParameters,
                            fieldNum(EcoResCategory, NestedSetLeft)); /* for tree sort order */

        hierarchyTree.initRoot(root.Name, root.RecId, hierarchyTree.image());
        idx = ctrlFormTree.getRoot();
        formTreeItem = ctrlFormTree.getItem(idx);
        formTreeItem.stateCut(true);
        ctrlFormTree.setItem(formTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        element.initializeHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditMode</Name>
				<Source><![CDATA[
    public void setEditMode(
        boolean _inEditMode,
        boolean _isCurrentFilterNew,
        recId   _selectedLedgerDerivedFinHierarchy = 0)
    {
        recId   selectedLedgerDerivedFinHierarchy = _selectedLedgerDerivedFinHierarchy;
        boolean isFilterNew = _isCurrentFilterNew;

        inEditMode = _inEditMode;

        activateFilter.enabled(inEditMode && (selectedLedgerDerivedFinHierarchy != 0));
        editFilter.enabled(!inEditMode && (selectedLedgerDerivedFinHierarchy != 0));
        viewFilterResults.enabled((inEditMode && (selectedLedgerDerivedFinHierarchy != 0) && isFilterNew) || (!inEditMode && (selectedLedgerDerivedFinHierarchy != 0) && !isFilterNew));
        deleteFilter.enabled(inEditMode && (selectedLedgerDerivedFinHierarchy != 0));

        ledgerDerivedFinRuleExpressionController.setEnabled(inEditMode);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>EcoResCategory</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            isCurrentFilterNew = false;
            ledgerDerivedFinHierarchyId = 0;

            if (EcoResCategory::find(ecoResCategory.RecId).ParentCategory != 0)
            {
                ledgerDerivedFinHierarchyId = ecoResCategory.RecId;
                isCurrentFilterNew = LedgerDerivedFinHierarchyRuleCriteria::findByLedgerDerivedFinHierarchy(ledgerDerivedFinHierarchyId).RecId == 0;
            }

            if (ledgerDerivedFinHierarchyRuleStorage != null && inEditMode)
            {
                if (Box::yesNo("@SPS818", DialogButton::No) == DialogButton::Yes)
                {
                    ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection(
                        ledgerDerivedFinRuleExpressionController.getExpressionCriteriaCollection());
                    ledgerDerivedFinHierarchyRuleStorage.save();
                    ledgerDerivedFinHierarchyMappingGen.generateMapping(previousSelectedledgerDerivedFinHierarchyId);
                    inEditMode = false;
                }
                else
                {
                    ledgerDerivedFinHierarchyRuleStorage = null;
                    inEditMode = false;
                }
            }

            super();

            element.setEditMode(inEditMode, isCurrentFilterNew, ledgerDerivedFinHierarchyId);

            if (ledgerDerivedFinHierarchyId != 0)
            {
                ledgerDerivedFinHierarchyRuleStorage = LedgerDerivedFinHierarchyRuleStorage::findById(ledgerDerivedFinHierarchyId);

                // If criteria elements exist, then populate the expression builder.
                if (ledgerDerivedFinHierarchyRuleStorage != null)
                {
                    ledgerDerivedFinRuleExpressionController.loadExpressions(
                    ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection());
                }
            }

            // If the selected node is not a derived financial hierarchy or has no criteria, then clear the expression builder.
            if (ledgerDerivedFinHierarchyId == 0 || ledgerDerivedFinHierarchyRuleStorage == null)
            {
                ledgerDerivedFinRuleExpressionController.clearExpressions();
            }

            // Populate the expression builder with the available dimension attributes.
            ledgerDerivedFinRuleExpressionController.loadAvailableDimensionAttributes(
                    ledgerDerivedFinHierarchyRuleStorage::getAvailableDimensionAttributes());
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>StringEdit</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            QueryBuildDataSource    qbdsLedgerDerivedFinHierarchyForFilters;
            QueryBuildRange         qbrLegalEntity;
            QueryBuildRange         qbrLanguageId;
            CompanyInfo             companyInfo;

            Query query = new Query();

            SysTableLookup  sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerDerivedFinHierarchyForFilters), this);

            companyInfo = CompanyInfo::find();
            qbdsLedgerDerivedFinHierarchyForFilters = query.addDataSource(tableNum(LedgerDerivedFinHierarchyForFilters));

            qbrLegalEntity = qbdsLedgerDerivedFinHierarchyForFilters.addRange(fieldNum(LedgerDerivedFinHierarchyForFilters, CompanyInfo));
            qbrLegalEntity.value(int642str(companyInfo.RecId));

            qbrLanguageId = qbdsLedgerDerivedFinHierarchyForFilters.addRange(fieldNum(LedgerDerivedFinHierarchyForFilters, LanguageId));
            qbrLanguageId.value(LanguageTable::defaultLanguage());

            sysTableLookup.addLookupfield(fieldNum(LedgerDerivedFinHierarchyForFilters, Name));
            sysTableLookup.addLookupfield(fieldNum(LedgerDerivedFinHierarchyForFilters, Description));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            currentSelectedCategoryHierarchy = EcoResCategoryHierarchy::findByName(stringEdit.valueStr());
            valueSelected = stringEdit.valueStr();
            stringEdit.text(valueSelected);
            element.initializeHelper();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ctrlFormTree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>expanded</Name>
						<Source><![CDATA[
        public void expanded(
            int             _idx,
            FormTreeExpand  _action,
            anytype         _data)
        {
            super(_idx, _action, _data);
            if (hierarchyTree)
            {
                hierarchyTree.onExpanded(_idx, _action);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>expanding</Name>
						<Source><![CDATA[
        boolean expanding(
            int             _idx,
            FormTreeExpand  _action,
            anytype         _data)
        {
            boolean ret = true;

            ret = super(_idx, _action, _data);

            if (hierarchyTree)
                hierarchyTree.expanding(_idx, _action, _data);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        void selectionChanged(
            FormTreeItem    oldItem,
            FormTreeItem    newItem,
            FormTreeSelect  how)
        {
            int root = this.getRoot();

            super(oldItem, newItem, how);

            if (hierarchyTree)
            {
                previousSelectedledgerDerivedFinHierarchyId = ecoResCategory.RecId;
                hierarchyTree.selectionChanged(oldItem, newItem);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (isCurrentFilterNew)
            {
                ledgerDerivedFinHierarchyRuleStorage = LedgerDerivedFinHierarchyRuleStorage::construct(ledgerDerivedFinHierarchyId);
                ledgerDerivedFinHierarchyId = ledgerDerivedFinHierarchyRuleStorage.save();
            }

            inEditMode = true;
            element.setEditMode(inEditMode, true, ledgerDerivedFinHierarchyId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeleteFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

            super();

            if (Box::yesNo("@SPS809", DialogButton::No) == DialogButton::Yes)
            {
                LedgerDerivedFinHierarchyRuleStorage::delete(ledgerDerivedFinHierarchyId);

                ledgerDerivedFinRuleExpressionController.loadExpressions(
                    ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection());

                delete_from ledgerDerivedFinHierarchyFilterResults where ledgerDerivedFinHierarchyFilterResults.EcoResCategory == ledgerDerivedFinHierarchyId;
                inEditMode = false;
                element.setEditMode(inEditMode, true, ledgerDerivedFinHierarchyId);
            }
            else
            {
                inEditMode = false;
                element.setEditMode(inEditMode, true, ledgerDerivedFinHierarchyId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ActivateFilter</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            if (inEditMode)
            {
                if (isCurrentFilterNew)
                {
                    ledgerDerivedFinHierarchyRuleStorage = LedgerDerivedFinHierarchyRuleStorage::construct(ledgerDerivedFinHierarchyId);
                    ledgerDerivedFinHierarchyId = ledgerDerivedFinHierarchyRuleStorage.save();
                    isCurrentFilterNew = false;
                }

                ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection(
                    ledgerDerivedFinRuleExpressionController.getExpressionCriteriaCollection());
                ledgerDerivedFinHierarchyRuleStorage.save();

                ledgerDerivedFinHierarchyMappingGen.generateMapping(ledgerDerivedFinHierarchyId);
                inEditMode = false;
                element.setEditMode(inEditMode, false, ledgerDerivedFinHierarchyId);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewFilterResults</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(LedgerDerivedFinHierarchyFilterResults), MenuItemType::Display);
            Args         args = new Args();
            FormRun      formRun;

            if (inEditMode)
            {
                if (isCurrentFilterNew)
                {
                    ledgerDerivedFinHierarchyRuleStorage = LedgerDerivedFinHierarchyRuleStorage::construct(ledgerDerivedFinHierarchyId);
                    ledgerDerivedFinHierarchyId = ledgerDerivedFinHierarchyRuleStorage.save();
                    isCurrentFilterNew = false;
                }

                ledgerDerivedFinHierarchyRuleStorage.parmExpressionCriteriaCollection(
                    ledgerDerivedFinRuleExpressionController.getExpressionCriteriaCollection());
                ledgerDerivedFinHierarchyRuleStorage.save();

                ledgerDerivedFinHierarchyMappingGen.generateMapping(ledgerDerivedFinHierarchyId);
                inEditMode = false;
                element.setEditMode(inEditMode, false, ledgerDerivedFinHierarchyId);
            }

            args.record(ecoResCategory);
            formRun = menuFunction.create(args);
            formRun.run();
            formRun.wait(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>EcoResCategory</Name>
			<Table>EcoResCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultProjectGlobalCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultThreshold_PSN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsCategoryAttributesInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsTangible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Level</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetLeft</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NestedSetRight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PKWiUCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources>
				<AxFormDataSourceDerived>
					<Name>EcoResCategory_PCClass</Name>
					<Table>PCClass</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>ReuseEnabled</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<DerivedDataSources />
				</AxFormDataSourceDerived>
			</DerivedDataSources>
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SPS797</Caption>
		<Mode xmlns="">Edit</Mode>
		<Pattern xmlns="">SimpleListDetails-Tree</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UpdateFilterResults</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>UpdateFilterResultsProcess</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Manual</NeededPermission>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>LedgerDerivedFinHierarchyRsultUpdate</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<Text>@SPS1048</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationList</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>300</Width>
				<WidthMode>Manual</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LabelGroup</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>StringEdit</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_GeneralLedger:LedgerDerivedFinHierarchies_StringEdit</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>EcoResCategoryName</ExtendedDataType>
								<Label>@SPS813</Label>
								<LookupButton>Always</LookupButton>
								<LookupOnly>Yes</LookupOnly>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<LeftMargin>5</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<RightMargin>5</RightMargin>
						<RightMarginMode>Fixed</RightMarginMode>
						<FrameType>None</FrameType>
						<Style>CustomFilter</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>ctrlFormTree</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<HideIfEmpty>No</HideIfEmpty>
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsHeader</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>EcoResCategory_Name</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HelpText>@FieldDescriptions_GeneralLedger:LedgerDerivedFinHierarchies_EcoResCategory_Name</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>EcoResCategory</DataSource>
						<Label>@SPS816</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsTabPage</Name>
						<Pattern>ToolbarFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>Toolbar</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroup</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>EditFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SPS799</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>DeleteFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SPS803</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ActivateFilter</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Manual</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SPS805</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>ViewFilterResults</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Manual</NeededPermission>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<MenuItemName>LedgerDerivedFinHierarchyFilterResults</MenuItemName>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SPS801</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpressionBuilderGroup</Name>
								<Pattern>DimensionExpressionBuilder</Pattern>
								<PatternVersion>1.0</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormContainerControl">
										<Name>FilterCriteriaBuilder</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Container</Type>
										<FormControlExtension>
											<Name>DimensionExpressionBuilder</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>ExtendedDataType</Type>
													<TypeName>ClassName</TypeName>
													<Value>DimensionRuleExpressionBuilderController</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<Controls />
									</AxFormControl>
								</Controls>
								<HideIfEmpty>No</HideIfEmpty>
								<FrameType>None</FrameType>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@SPS798</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>