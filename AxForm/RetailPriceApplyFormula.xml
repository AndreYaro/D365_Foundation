<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailPriceApplyFormula</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class RetailPriceApplyFormula extends FormRun
    {
        RetailMassUpdateWorksheetLine   retailMassUpdateWorksheetLine;
        FieldId                         fieldId;
        RetailPriceValues               priceComboValue;
        RetailPriceOperator             mathematicalSignComboValue;
        real                            updatedValue;
        real                            realValue;
        InventTableModule               inventTableModule;
        PriceDiscSmartRoundingGroup     tmpPriceDiscSmartRoundingGroup;
}
]]></Source>
			</Method>
			<Method>
				<Name>calculation</Name>
				<Source><![CDATA[
    public void calculation()
    {
        real                            priceValue;

        switch (priceComboValue)
        {
            case RetailPriceValues::PurchasePrice :
                priceValue = inventTableModule.Price;
                break;

            case RetailPriceValues::PurchasePriceCharges :
                priceValue = inventTableModule.Markup;
                break;

            case RetailPriceValues::SellPrice :
                priceValue = inventTableModule.Price;
                break;

            case RetailPriceValues::SellPriceCharges :
                priceValue = inventTableModule.Markup;
                break;

            case RetailPriceValues::ManageCostsPrice :
                priceValue = inventTableModule.Price;
                break;
        }

        switch (mathematicalSignComboValue)
        {
            case RetailPriceOperator::Plus :
                updatedValue = priceValue + realValue;
                break;

            case RetailPriceOperator::Minus :
                updatedValue = priceValue - realValue;
                break;

            case RetailPriceOperator::Multiply :
                updatedValue = priceValue * realValue;
                break;

            case RetailPriceOperator::Divide :
                updatedValue = priceValue / realValue;
                break;
        }

        if (RoundingGroupCheckBox.checked())
        {
            updatedValue = element.sampleRound(tmpPriceDiscSmartRoundingGroup, updatedValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        element.getValueFromDialog();
        if (element.validateDialogForm())
        {
            super();
            element.updateSingleOrMultipleRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromDialog</Name>
				<Source><![CDATA[
    public void getValueFromDialog()
    {
        priceComboValue = PriceCombo.selection();
        mathematicalSignComboValue = MathematicalSignCombo.selection();
        realValue = RealEdit.realValue();
        if (RoundingGroupCheckBox.checked())
        {
            select firstOnly tmpPriceDiscSmartRoundingGroup
                where tmpPriceDiscSmartRoundingGroup.GroupId == PriceDiscSmartRoundingGroup_Name.valueStr();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (RoundingGroupCheckBox.checked())
        {
            RoundingGroup.visible(false);
        }

        retailMassUpdateWorksheetLine = element.args().record();

        fieldId = str2int(element.args().parm());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sampleRound</Name>
				<Source><![CDATA[
    public Amount sampleRound(PriceDiscSmartRoundingGroup     _priceDiscSmartRoundingGroup,
                              Amount                          _samplePriceBefore)
    {
        PriceDiscSmartRoundingRule rule = PriceDiscSmartRoundingRule::find(_priceDiscSmartRoundingGroup.RecId,_samplePriceBefore);
        Amount amountRounded = _samplePriceBefore;
        PriceDiscSmartRounding rounding = PriceDiscSmartRounding::construct();

        rounding.parmDecimalSeparator(DecimalSeparator::Dot);

        rounding.setRoundingRule(rule);

        if (rounding.checkRoundingRuleOK() && amountRounded >= rule.UnitPriceFrom && amountRounded < rule.UnitPriceTo)
        {
            if (rule.LowerLimitPoint)
            {
                amountRounded = rounding.roundDown(_samplePriceBefore, rule.Syntax, rule.LowerLimitPoint);
            }

            // only attempt to round it up if it has not been rounded down already
            if (amountRounded == _samplePriceBefore &&  rule.UpperLimitPoint)
            {
                amountRounded = rounding.roundUp(amountRounded, rule.Syntax, rule.UpperLimitPoint);
            }
        }

        return  amountRounded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueForUpdate</Name>
				<Source><![CDATA[
    public void setValueForUpdate(RetailMassUpdateWorksheetLine   _retailMassUpdateWorksheetLineUpdated)
    {
        switch (fieldId)
        {
            case fieldnum(RetailMassUpdateWorksheetLine,Purch_Price) :
                _retailMassUpdateWorksheetLineUpdated.Purch_Price = updatedValue;
                break;

            case fieldnum(RetailMassUpdateWorksheetLine,Purch_Markup) :
                _retailMassUpdateWorksheetLineUpdated.Purch_Markup = updatedValue;
                break;

            case fieldnum(RetailMassUpdateWorksheetLine,Sales_Price) :
                _retailMassUpdateWorksheetLineUpdated.Sales_Price = updatedValue;
                break;

            case fieldnum(RetailMassUpdateWorksheetLine,Sales_Markup) :
                _retailMassUpdateWorksheetLineUpdated.Sales_Markup = updatedValue;
                break;

            case fieldnum(RetailMassUpdateWorksheetLine,Invent_Price) :
                _retailMassUpdateWorksheetLineUpdated.Invent_Price = updatedValue;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSingleOrMultipleRow</Name>
				<Source><![CDATA[
    public void updateSingleOrMultipleRow()
    {
        RetailMassUpdateWorksheetLine   retailMassUpdateWorksheetLineUpdated;

        ttsBegin;
        if (FormulaApplyRadioButton.selection() == 0)
        {
            select firstonly forUpdate retailMassUpdateWorksheetLineUpdated
                where retailMassUpdateWorksheetLineUpdated.RecId == retailMassUpdateWorksheetLine.RecId
                join Price, Markup from inventTableModule
                where inventTableModule.ItemId == retailMassUpdateWorksheetLineUpdated.ItemId   &&
                      ((inventTableModule.ModuleType == ModuleInventPurchSales::Purch           &&
                      (RetailPriceValues::PurchasePrice == priceComboValue                      ||
                      RetailPriceValues::PurchasePriceCharges == priceComboValue))              ||
                      (inventTableModule.ModuleType == ModuleInventPurchSales::Sales            &&
                      (RetailPriceValues::SellPrice == priceComboValue                          ||
                      RetailPriceValues::SellPriceCharges == priceComboValue))                  ||
                      (inventTableModule.ModuleType == ModuleInventPurchSales::Invent           &&
                      RetailPriceValues::ManageCostsPrice == priceComboValue));

            this.calculation();
            this.setValueForUpdate(retailMassUpdateWorksheetLineUpdated);
            retailMassUpdateWorksheetLineUpdated.update();
        }
        else
        {
            while select forUpdate retailMassUpdateWorksheetLineUpdated
                where retailMassUpdateWorksheetLineUpdated.RetailMassUpdateWorksheetTable == retailMassUpdateWorksheetLine.RetailMassUpdateWorksheetTable
                join Price, Markup from inventTableModule
                where inventTableModule.ItemId == retailMassUpdateWorksheetLineUpdated.ItemId   &&
                      ((inventTableModule.ModuleType == ModuleInventPurchSales::Purch           &&
                      (RetailPriceValues::PurchasePrice == priceComboValue                      ||
                      RetailPriceValues::PurchasePriceCharges == priceComboValue))              ||
                      (inventTableModule.ModuleType == ModuleInventPurchSales::Sales            &&
                      (RetailPriceValues::SellPrice == priceComboValue                          ||
                      RetailPriceValues::SellPriceCharges == priceComboValue))                  ||
                      (inventTableModule.ModuleType == ModuleInventPurchSales::Invent           &&
                      RetailPriceValues::ManageCostsPrice == priceComboValue))
            {
                this.calculation();
                this.setValueForUpdate(retailMassUpdateWorksheetLineUpdated);
                retailMassUpdateWorksheetLineUpdated.update();
            }
        }
        element.args().caller().refresh();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDialogForm</Name>
				<Source><![CDATA[
    public boolean validateDialogForm()
    {
        if (! realValue && mathematicalSignComboValue == RetailPriceOperator::Divide)
        {
            return checkFailed("@RET490474");
        }

        if (RoundingGroupCheckBox.checked())
        {
            if (! PriceDiscSmartRoundingGroup_Name.valueStr())
            {
                return checkFailed("@RET490475");
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>RoundingRadioButton</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            if (RoundingRadioButton.selection() == 0)
            {
                RoundingGroup.visible(false);
                PriceDiscSmartRoundingGroup_Name.text('');
            }
            else
            {
                RoundingGroup.visible(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PriceDiscSmartRoundingGroup_Name</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            QueryBuildDataSource queryBuildDataSource;
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PriceDiscSmartRoundingGroup), this);

            super();

            sysTableLookup.addLookupField(fieldNum(PriceDiscSmartRoundingGroup, GroupId));
            sysTableLookup.addLookupField(fieldNum(PriceDiscSmartRoundingGroup, Name));
            queryBuildDataSource = query.addDataSource(tableNum(PriceDiscSmartRoundingGroup));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PriceDiscSmartRoundingGroup</Name>
			<Table>PriceDiscSmartRoundingGroup</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>GroupId</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET490476</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Group_Group</Name>
						<ElementPosition>920350134</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PriceCombo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>RetailPriceValues</EnumType>
								<LabelPosition>Above</LabelPosition>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>MathematicalSignCombo</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>2</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<EnumType>RetailPriceOperator</EnumType>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>RealEdit</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<AllowNegative>No</AllowNegative>
								<NoOfDecimals>-1</NoOfDecimals>
								<ShowZero>Yes</ShowZero>
							</AxFormControl>
						</Controls>
						<Caption>@Retail:SetValueSelectedColumnIn</Caption>
						<Style>DialogContent</Style>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CalculationOptionGroup</Name>
						<ElementPosition>1227133512</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>RoundingRadioButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Type>RadioButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>0</DisplayLength>
								<DisplayLengthMode>Fixed</DisplayLengthMode>
								<EnumType>RetailRoundingOption</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>RoundingGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>PriceDiscSmartRoundingGroup_Name</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:RoundingGroup</Label>
							</AxFormControl>
						</Controls>
						<Style>DialogContent</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>RoundingGroupCheckBox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:RoundCalculatedValue</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ApplyFormulaGroup</Name>
						<ElementPosition>1840700268</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRadioButtonControl">
								<Name>FormulaApplyRadioButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Type>RadioButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DisplayLength>0</DisplayLength>
								<EnumType>RetailApplyFormulaOption</EnumType>
								<FrameType>None</FrameType>
								<Items />
							</AxFormControl>
						</Controls>
						<Style>DialogContent</Style>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>