<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvRequisition</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvRequisition extends FormRun implements TrvIWorkflowEnabledForm, TrvIDimensionEnabled
{
    #Task

    TrvRequisitionTable                 requisitionTable;
    boolean                             isRequisitionEditable, canDeleteRequisition;
    TrvParameters                       trvParameters = TrvParameters::find();
    TrvJustificationManager             trvJustificationManager, trvHeaderJustificationManager;
    HcmWorkerRecId                      creatingWorkerRecId;
    CurrencyCode                        companyCurrencyCode;
    boolean                             headerPolicyMessageShown = false;
    FormObservableLink                  indicatorIconObservable = new FormObservableLink();
    FormObservableLink                  totalsObservable = new FormObservableLink();

    const str personalizedViewKey = 'TrvRequisitionLastView';

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the dataset based on the calling table.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons
       
        // If there is no record on the incoming args, try to retrieve the record from the URL or the request context
        if (element.args() && !element.args().record())
        {
            if (!element.args().getRequestContextQuery())
            {
                // When form is opened through hyperlink then context will be captured from the URL.
                element.args().requestContextQuery(Global::getClientURLQueryValue('q'));
            }

            if (element.args().getRequestContextQuery())
            {
                element.args().record(TrvExpenseHelper::getRequisitionRecordFromQuery(element.args().getRequestContextQuery()));
            }
        }

        if (element.args() && element.args().record())
        {
            switch (element.args().dataset())
            {
                case tableNum(TrvRequisitionTable):
                    requisitionTable = element.args().record();
                    creatingWorkerRecId = requisitionTable.CreatingWorker;
                    break;
                  
                default:
                    throw error("@SYS22996"); // Form called incorrectly
            }

            // Switch to the legal entity where current travel requisition was filed.
            DataAreaId referenceDataAreaId = CompanyInfo::findRecId(requisitionTable.LegalEntity).DataArea;
            if (referenceDataAreaId != curExt())
            {
                appl.setDefaultCompany(referenceDataAreaId, false);
            }
        }
        else
        {
            // Form refreshed or called incorrectly.
            element.lifecycleHelper().cancelFormInitialization();
        }

        super();

        trvJustificationManager = new TrvJustificationManager(TrvRequisitionLine, MyJustification, SubmitterJustification, OtherJustifications, LineJustification_DS);
        trvHeaderJustificationManager = new TrvJustificationManager(TrvRequisitionTable, MyHeaderJustification, SubmitterHeaderJustification, OtherHeaderJustifications, HeaderJustification_DS);
        
        companyCurrencyCode = CompanyInfoHelper::standardCurrency();
        AccountingCurrencyAmount_Grid.label(strFmt("@Expense:AmountWithCurrency", companyCurrencyCode));
        AccountingCurrencyAmount_Details.label(strFmt("@Expense:AmountWithCurrency", companyCurrencyCode));
        isRequisitionEditable = requisitionTable.isEditable();
        canDeleteRequisition = requisitionTable.validateDelete();
        
        this.setVisibilityForDistributionAmountButtons();
        this.initRequisitionLinesDetails();

        // Get the system defined Edit button and set multi-select property to No.
        FormCommandButtonControl editButton = this.control(this.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
        editButton.multiSelect(0);

        // The following code is here to improve the experience when users are creating a new travel requisition.
        Object caller = element.args().caller();

        // If the travel requisition doesn't have any lines, it is in draft and this is a brand new travel requisition.
        if (TrvRequisitionTable::getNumberOfRequisitionLines(requisitionTable.RecId) == 0 && requisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Create
            && caller != null &&  caller.name() == formStr(TrvRequisitionDetails))
        {
            TrvRequisitionLine_DS.insertIfEmpty(true);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Close the form in case the travel requisition level workflow was executed.
    /// </summary>
    void workflowActionDone(TrvWorkflowAction actionType)
    {
        this.updateWorkflowControls();
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Called when the workflow action fails.
    /// </summary>
    void workflowActionFailed(TrvWorkflowAction actionType)
    {
        TrvRequisitionLine_DS.research(true);

        if (TrvBudgetCheckHelper::isRequisitionBudgetFailed(TrvRequisitionTable.RecId) || TrvBudgetCheckHelper::isRequisitionProjBudgetFailed(TrvRequisitionTable.RecId))
        {
            TrvBudgetCheckHelper::displayRequisitionProjectBudgetViolationMsgs(trvRequisitionTable.RecId);
            // Here we should call indicatorIconObservable.markChanged(); however it's called below in all cases, so skip the call here.
        }

        // If policy evaluation happens only during submit, we need to light up the errors when submit fails.
        if (RequisitionExpenseDetails.visible())
        {
            element.showExpensePolicyViolations();
        }
        else if (RequisitionExpenseTiles.visible())
        {
            TrvRequisitionTable.throwInfologsForPolicyViolationLevelMsg();
            indicatorIconObservable.markChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExpensePolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show requisition expense violation messages and refresh the violation icons on the cards.
    /// </summary>
    /// <param name = "requisitionLine">
    /// Requisition expense line used to validate policy violations by default it will be the current requisition expense line
    /// </param>
    private void showExpensePolicyViolations(TrvRequisitionLine requisitionLine = TrvRequisitionLine)
    {
        requisitionLine.throwInfologsForPolicyViolationLevelMsg();
        TrvRequisitionTable.throwInfologsForPolicyViolationLevelMsg();
        trvJustificationManager.initJustifications(element.inViewMode());
        trvHeaderJustificationManager.initJustifications(element.inViewMode());

        indicatorIconObservable.markChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForDistributionAmountButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility for dsitribute amounts.
    /// </summary>
    public void setVisibilityForDistributionAmountButtons()
    {
        TrvRequisitionTable approvalStatusRequisition = TrvRequisitionTable.RecId != 0 ? TrvRequisitionTable : requisitionTable;

        if (approvalStatusRequisition.ApprovalStatus == TrvRequisitionApprovalStatus::Create || approvalStatusRequisition.ApprovalStatus == TrvRequisitionApprovalStatus::Returned)
        {
            TrvAccountingDistRequisition.visible(true);
            AccountingDistributionsDocumentView.visible(false);
        }
        else
        {
            TrvAccountingDistRequisition.visible(false);
            AccountingDistributionsDocumentView.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the "edit" button to switch to Details view.
    /// Override the "restore" button to update field visibilities if category changes.
    /// </summary>
    public int task(int _taskId)
    {
        int ret;

        switch (_taskId)
        {
            case #taskEditRecord:
                // Editing should only happen in Details or Grid view.
                if (!RequisitionExpenseDetails.visible() && !GridView.visible())
                {
                    element.switchToDetailsView();
                }
                ret = super(_taskId);
                trvJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvHeaderJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                break;

            case #taskRestore:
                ret = super(_taskId);
                break;

            case #taskDoneEditRecord:
                ret = super(_taskId);
                trvJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvHeaderJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                break;

            case #taskSave:
                ret = super(_taskId);
                element.updateWorkflowControls();
                break;

            default:
                // For all other tasks.
                ret = super(_taskId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Dimension Entry Control current company if it does not match with the requisition expense line's legal entity name.
    /// </summary>
    private void updateDefaultDimensionCurrentCompany()
    {
        if (TrvRequisitionLine_DefaultDimension.visible())
        {
            TrvRequisitionLine_DefaultDimension.parmCompany(TrvRequisitionLine.ReferenceDataAreaId);
            TrvRequisitionLine_DefaultDimension.reactivate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes the dimension entry controls on the form.
    /// </summary>
    private void initDimensionEntry()
    {
        if (TrvRequisitionLine_DefaultDimension.visible())
        {
            TrvRequisitionLine_DefaultDimension.parmValidateBlockedForManualEntry(true);
            TrvRequisitionLine_DefaultDimension.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
            TrvRequisitionLine_DefaultDimension.parmActiveValueFilterDate(TrvRequisitionLine.EstimatedDate);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the correct visibility controller method for the currently visible view.
    /// </summary>
    private void setVisibilityForView()
    {
        if (RequisitionExpenseDetails.visible())
        {
            AirlineServiceClass_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::Airline);
            VehicleClass_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::CarRental);
            PerdiemTrvLocations_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            PerdiemDateFrom_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            PerdiemDateTo_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            Mileage_Details.visible(TrvRequisitionLine.ExpType == TrvExpType::Transport);
            ExchangeRate_Details.visible(TrvRequisitionLine.TransactionCurrencyCode != companyCurrencyCode);
            //Allow edit for ExpType not equal to Mileage and Prediem
            TransactionCurrencyAmount_Details.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
            TransactionCurrencyCode_Details.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
            ExchangeRate_Details.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
        }
        else if (GridView.visible())
        {
            //Allow edit for ExpType not equal to Mileage and Prediem
            TransactionCurrencyAmount_Grid.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
            TransactionCurrencyCode_Grid.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
            ExchangeRate_Grid.allowEdit(TrvRequisitionLine.ExpType != TrvExpType::Transport && TrvRequisitionLine.ExpType != TrvExpType::Allowance);
        }
        
        element.setVisibilityForProjectFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForDetailsView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibilities in the form's details view, that change when the expense selected changes.
    /// </summary>
    private void setVisibilityForDetailsView()
    {
        // Set focus to the details tab when the selection of expense line changes.
        if (!RequisitionExpenseLineDetailsTabPage.isActivePage())
        {
            RequisitionExpenseLineDetailsTabPage.setFocus();
        }

        element.setVisibilityForView();

        // Visibility manager sets 'all' datasources to read only, not just expense datasources.
        // Re-enable justification datasource.
        HeaderJustification_DS.allowEdit(true);
        LineJustification_DS.allowEdit(true);

        this.setVisibilityForDistributionAmountButtons();

        element.updateExchangeRateonExchCodeChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsAsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set relevant fields as mandatory for various expense types.
    /// </summary>
    private void setFieldsAsMandatory()
    {
        if (TrvRequisitionLine_DS.numberOfRowsLoaded() > 0)
        {
            Mileage_Details.mandatory(TrvRequisitionLine.ExpType == TrvExpType::Transport);
            PerdiemDateFrom_Details.mandatory(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            PerdiemDateTo_Details.mandatory(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            PerdiemTrvLocations_Details.mandatory(TrvRequisitionLine.ExpType == TrvExpType::Allowance);
            TransactionCurrencyAmount_Details.mandatory(TrvRequisitionLine.ExpType != TrvExpType::Allowance && TrvRequisitionLine.ExpType != TrvExpType::Transport);
            TransactionCurrencyAmount_Grid.mandatory(TrvRequisitionLine.ExpType != TrvExpType::Allowance && TrvRequisitionLine.ExpType != TrvExpType::Transport);
            ProjLinePropertyId_Details.mandatory(ProjLinePropertyId_Details.isVisible() && TrvRequisitionLine.ProjTable != 0);
            ProjLinePropertyId_Grid.mandatory(ProjLinePropertyId_Grid.isVisible() && TrvRequisitionLine.ProjTable != 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility of fields used by AP Clerk, Post and subledger journal account entry buttons. Update the form caption.
    /// </summary>
    public void run()
    {
        super();

        if (TrvWorkflowUtilities::isCurUserRequisitionApprover(requisitionTable) || requisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Create)
        {
            element.setVisibilityForBudgetButtons();
        }

        // These lines suppress the system defined new, edit and delete buttons based on requisition editablility.
        TrvRequisitionLine_DS.allowCreate(isRequisitionEditable);
        TrvRequisitionLine_DS.allowEdit(isRequisitionEditable);
        TrvRequisitionLine_DS.allowDelete(isRequisitionEditable);
        TrvRequisitionTable_DS.allowEdit(isRequisitionEditable);

        this.setFormCaption();

        // Copying existing lines is special case of adding new expense lines to the travel requisition and so
        // the this button should be visible only when the TrvRequisitionLine datasource allows it.
        CopyLine.visible(isRequisitionEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionControlVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set dimension control's visibility as the visible and enabled method on data source field does not work for reference group.
    /// </summary>
    public void setDimensionControlVisibility()
    {
        FormDataObject formDataObject_Header = TrvRequisitionTable_DS.object(fieldnum(TrvRequisitionTable, DefaultDimension));

        TrvRequisitionTable_DefaultDimension.visible(formDataObject_Header.visible());
        // Check allowEdit property on the data source instead of data field,
        // as it will be set to false when the travel requisition is not editable in visibility manager.
        TrvRequisitionTable_DefaultDimension.allowEdit(TrvRequisitionTable_DS.allowEdit() && formDataObject_Header.allowEdit());

        FormDataObject formDataObject_Line = TrvRequisitionLine_DS.object(fieldnum(TrvRequisitionLine, DefaultDimension));

        TrvRequisitionLine_DefaultDimension.visible(formDataObject_Line.visible());
        // Check allowEdit property on the data source instead of data field,
        // as it will be set to false when the expense line is not editable in visibility manager.
        TrvRequisitionLine_DefaultDimension.allowEdit(TrvRequisitionLine_DS.allowEdit() && formDataObject_Line.allowEdit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequisitionLinesDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form to show the requisition lines of a form.
    /// </summary>
    private void initRequisitionLinesDetails()
    {
        str button = element.configurationHelper().getConfigurationValue(personalizedViewKey);

        switch (button)
        {
            case formControlStr(TrvRequisition, DetailsView):
                element.switchToDetailsView();
                break;

            case formControlStr(TrvRequisition, GridViewButton):
                element.switchToGridView();
                break;

            case formControlStr(TrvRequisition, GroupByCategoryView):
                element.switchToTileView(TrvExpenseGroupBy::Category);
                break;

            case formControlStr(TrvRequisition, GroupByDateView):
                element.switchToTileView(TrvExpenseGroupBy::Date);
                break;

            default:
                element.switchToGridView();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAccountingActionButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility for an accounting action button, for example distribute amounts or subledger journal.
    /// </summary>
    /// <param name = "button">The button to set the visibility.</param>
    /// <param name = "_visible">True if distribute button should be visible; otherwise false.</param>
    private void setVisibilityForAccountingActionButton(FormControl button, boolean _visible)
    {
        // Always set the button visible if it's applicable, enable it when distribution enabled and source document line created.
        button.visible(_visible);
        button.enabled(TrvRequisitionLine.isDistributionsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the form is not showing the details of an itemized line, set the caption of the form dynamically to inform the user which travel requisition he is looking at.
    /// Shows the travel requisition number and, if not empty, its purpose.
    /// </summary>
    private void setFormCaption()
    {
        element.design().caption(TrvRequisitionHelper::generateRequisitionCaption(TrvRequisitionTable, HcmWorker::find(creatingWorkerRecId).name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility, mandatory fields on selecting the category.
    /// </summary>
    /// <param name = "_categoryExpenseType">The expense type.</param>
    private void categoryChanged(TrvExpType _categoryExpenseType)
    {
        // Switch to details view for per diem & mileage
        if (_categoryExpenseType == TrvExpType::Allowance || _categoryExpenseType == TrvExpType::Transport)
        {
            element.switchToDetailsView();
        }

        // Set visibility on the form.
        element.setVisibilityForView();

        element.setFieldsAsMandatory();
        element.updateExchangeRateonExchCodeChanged();

        // Display the expense type icon based on the category.
        TrvRequisitionLine_DS.cacheCalculateMethod(tablemethodstr(TrvRequisitionLine, showExpenseTypeIcon));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForProjectFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Set the edit and visibility for Project fields based on category UseInProject value.
    /// </summary>
    private void setVisibilityForProjectFields()
    {
        if (TrvRequisitionLine.isCategoryIntegratedWithProject())
        {
            if (RequisitionExpenseDetails.visible())
            {
                ProjTable_Details.visible(true);
                ProjLinePropertyId_Details.visible(true);
                ProjActivityNumber_Details.visible(true);
            }
            else if (GridView.visible())
            {
                ProjTable_Grid.allowEdit(true);
                ProjLinePropertyId_Grid.allowEdit(true);
            }
        }
        else
        {
            ProjTable_Grid.allowEdit(false);
            ProjLinePropertyId_Grid.allowEdit(false);

            ProjTable_Details.visible(false);
            ProjLinePropertyId_Details.visible(false);
            ProjActivityNumber_Details.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tilesViewClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Common actions to be taken when switching to tiles view from the appbar.
    /// </summary>
    private void tilesViewClicked()
    {
        if (!RequisitionExpenseTiles.visible())
        {
            // Before switching, make sure the active expense is saved and mode changes to view mode,
            // as it doesn't make sense to be in edit mode in this view.
            if (element.inViewMode() || element.task(#taskDoneEditRecord))
            {
                // Switch views.
                RequisitionExpenseDetails.visible(false);
                RequisitionExpenseTiles.visible(true);
                GridView.visible(false);

                element.setVisibilityForAccountingActionButton(TrvAccountingDistRequisition, false);
                TrvRequisitionTable.throwInfologsForPolicyViolationLevelMsg();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForBudgetButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for budget related buttons.
    /// </summary>
    private void setVisibilityForBudgetButtons()
    {
        if (requisitionTable.ApprovalStatus != TrvRequisitionApprovalStatus::Create)
        {
            boolean isBudgetControlEnabled = TrvBudgetCheckHelper::isBudgetControlEnabled(BudgetControlSourceIntegrator::TravelRequisition);
            boolean isProjBudgetEnabled = TrvBudgetCheckHelper::isProjectBudgetControlEnabled(requisitionTable.SourceDocumentHeader);

            TrvReqLineCheckBudget.visible(isBudgetControlEnabled || isProjBudgetEnabled);
            BudgetCheckResults.visible(isBudgetControlEnabled);
        }
        else
        {
            boolean isBudgetControlCheckOnEntryEnabled = TrvBudgetCheckHelper::isBudgetControlCheckOnEntryEnabled(BudgetControlSourceIntegrator::TravelRequisition);

            TrvReqLineCheckBudget.visible(isBudgetControlCheckOnEntryEnabled);
            BudgetCheckResults.visible(isBudgetControlCheckOnEntryEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the calling form is <c>TrvIUpdateEnabled</c>, call updateForm() before closing.
    /// </summary>
    public void close()
    {
        TrvIUpdateEnabled updateEnabledCaller = element.args().caller() as TrvIUpdateEnabled;
        if (updateEnabledCaller)
        {
            updateEnabledCaller.updateForm();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDetailsJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant form to view more details of the record.
    /// </summary>
    /// <param name = "menuItem">
    /// The menu item that opens the form for more details.
    /// </param>
    /// <param name = "record">
    /// The record to view details.
    /// </param>
    private void viewDetailsJumpRef(str menuItem, Common record)
    {
        MenuFunction    menuFunction    = new MenuFunction(menuItem, MenuItemType::Display);
        Args            args            = new Args();
        FormRun         formRun;

        args.lookupRecord(record);
        args.caller(element);

        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRequisitionExpenseLineGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the current group by option, changing the <c>TrvRequisitionLine_DS</c> sorting as necessary.
    /// </summary>
    /// <param name = "groupByOption">The desired grouping to be used.</param>
    private void refreshRequisitionExpenseLineGrouping(TrvExpenseGroupBy groupByOption)
    {
        // Store the RecId of selected requisition expense.
        RecId selectedRequisitionExpenseRecId = TrvRequisitionLine.RecId;

        if (RequisitionExpenseTilesList.visible())
        {
            switch (groupByOption)
            {
                case TrvExpenseGroupBy::Category:
                    RequisitionExpenseTilesList.groupBy(identifierStr(Category_Tile));
                    break;

                case TrvExpenseGroupBy::Date:
                    RequisitionExpenseTilesList.groupBy(identifierStr(EstimatedDate_Tile));
                    break;

                case TrvExpenseGroupBy::Project:
                    RequisitionExpenseTilesList.groupBy(identifierStr(ProjId_Tile));
                    break;

                case TrvExpenseGroupBy::None:
                default:
                    RequisitionExpenseTilesList.groupBy("");
                    break;
            }
        }

        TrvRequisitionLine_DS.queryBuildDataSource().sortClear();

        switch (groupByOption)
        {
            case TrvExpenseGroupBy::Category:
                TrvRequisitionLine_DS.query().dataSourceTable(tablenum(TrvRequisitionLine)).addSortField(fieldNum(TrvRequisitionLine, Category), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::Project:
                TrvRequisitionLine_DS.query().dataSourceTable(tablenum(TrvRequisitionLine)).addSortField(fieldNum(TrvRequisitionLine, ProjTable), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::Date:
                TrvRequisitionLine_DS.query().dataSourceTable(tablenum(TrvRequisitionLine)).addSortField(fieldNum(TrvRequisitionLine, EstimatedDate), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::None:
            default:
                TrvRequisitionLine_DS.query().dataSourceTable(tablenum(TrvRequisitionLine)).addSortField(fieldNum(TrvRequisitionLine, EstimatedDate), SortOrder::Ascending);
                break;
        }

        // TrvRequisitionLine_DS.executeQuery() will ensure that the cards will be in decreasing order of creation date inside
        // each group or in the whole list if no grouping is defined.
        TrvRequisitionLine_DS.executeQuery();

        // Move cursor to the expense which was selected after the re-sort.
        TrvRequisitionLine_DS.positionToRecordByValue(fieldNum(TrvRequisitionLine, RecId), int642Str(selectedRequisitionExpenseRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRequisitionExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the current requisition expense line and go to details view.
    /// </summary>
    public void copyRequisitionExpenseLine()
    {
        RefRecId duplicatedLineRecId = TrvRequisitionLine.duplicateRequisitionExpenseLine(0, TrvRequisitionLine.EstimatedDate);
        if (duplicatedLineRecId)
        {
            TrvRequisitionLine_DS.positionToRecordByValue(fieldNum(TrvRequisitionLine, RecId), int642Str(duplicatedLineRecId));

            if (element.inViewMode())
            {
                element.task(#taskEditRecord);
            }
        }
        else
        {
            warning("@Expense:TravelReqExpenseLineCopyFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToDetailsView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to the details view.
    /// </summary>
    private void switchToDetailsView()
    {
        if (!RequisitionExpenseDetails.visible())
        {
            // Switch views.
            RequisitionExpenseDetails.visible(true);
            RequisitionExpenseTiles.visible(false);
            GridView.visible(false);

            // Reset the grouping to ensure that the lines will stay in the same place after switching views.
            element.refreshRequisitionExpenseLineGrouping(TrvExpenseGroupBy::None);

            // Set focus to details tab if it was not in details view.
            RequisitionExpenseLineDetailsTabPage.setFocus();

            // Set appbar buttons.
            element.setVisibilityForAccountingActionButton(TrvAccountingDistRequisition, true);
            headerPolicyMessageShown = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToGridView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to the grid view.
    /// </summary>
    private void switchToGridView()
    {
        if (!GridView.visible())
        {
            // Switch views.
            RequisitionExpenseDetails.visible(false);
            RequisitionExpenseTiles.visible(false);
            GridView.visible(true);

            // Reset the grouping to ensure that the lines will stay in the same place after switching views.
            element.refreshRequisitionExpenseLineGrouping(TrvExpenseGroupBy::None);

            // Set focus to grid if it was not in grid view.
            RequisitionExpenseGrid.setFocus();

            // Set appbar buttons.
            element.setVisibilityForAccountingActionButton(TrvAccountingDistRequisition, true);
            headerPolicyMessageShown = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToTileView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to a tile view.
    /// </summary>
    /// <param name = "_groupBy">What value the tiles should be grouped by.</param>
    private void switchToTileView(TrvExpenseGroupBy _groupBy)
    {
        element.refreshRequisitionExpenseLineGrouping(_groupBy);
        element.tilesViewClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateonExchCodeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Exchange rate.
    /// </summary>
    private void updateExchangeRateonExchCodeChanged()
    {
        TrvRequisitionLine_DS.cacheCalculateMethod(tablemethodstr(TrvRequisitionLine, editExchangeRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the async process to handle source document and policies for travel requisition lines.
    /// </summary>
    public void doAsyncAction(RefRecId _trvReqLineRecId)
    {
        boolean anyPreviousDayOrReportViolation = false;

        // If there were any report-level or day-level project policy violations on this travel requisition,
        // then other expenses might have updated statuses after this write operation.
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            anyPreviousDayOrReportViolation = trvrequisitionTable.anyDayOrReportProjectPolicyViolations();
        }

        element.startAsyncAction();

        // Handle the skipped actions now, asynchronously.
        System.Threading.Tasks.Task task = element.runAsync(classnum(TrvRequisitionHelper),
                                            "handleRequisitionSourceDocumentAndPoliciesAsync",
                                            [_trvReqLineRecId, true],
                                            System.Threading.CancellationToken::None,
                                            "asyncActionCallback",
                                            [_trvReqLineRecId, anyPreviousDayOrReportViolation]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes async-related actions necessary after triggering a new async operation.
    /// Start the timer control to ping for updates.
    /// </summary>
    private void startAsyncAction()
    {
        TimerControl.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>asyncActionCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback that handles the return task result from post-write async operations on the TrvRequisitionLine datasource.
    /// This will be called when the async insert or update is done.
    /// </summary>
    public void asyncActionCallback(AsyncTaskResult taskResult)
    {
        container asyncState = taskResult.getAsyncState();
        RefRecId updatedTrvRequisitionLineRecId = conpeek(asyncState, 1);
        boolean anyPreviousDayOrReportViolation = conpeek(asyncState, 2);

        System.Exception exception = taskResult.getException();
        boolean asyncTaskSuccess = (exception == null);

        if (asyncTaskSuccess)
        {
            // If there were any previous report-level or day-level project policy violations on this report,
            // or now after the update, then other expenses might have updated statuses too, so we need to research.
            if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave &&
               (anyPreviousDayOrReportViolation || trvrequisitionTable.anyDayOrReportProjectPolicyViolations()))
            {
                TrvRequisitionLine_ds.research(true);
            }
            else
            {
                element.showExpensePolicyViolations();
            }
        }
        else
        {
            // Async task failed.
            // Update the icon so that the source doc error is flagged on the card.
            indicatorIconObservable.markChanged();
        }

        element.endAsyncAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes async-related actions necessary after completing an async operation.
    /// If no expenses are being updated, stop the timer control.
    /// </summary>
    private void endAsyncAction()
    {
        TimerControl.enabled(false);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TrvRequisitionLine</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize values for new expense lines.
        /// </summary>
        public void initValue()
        {
            TrvRequisitionLine.TrvRequisitionTable = requisitionTable.RecId;
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Write operation on an requisition expense line.
        /// When an expense is inserted or updated, update the policy violations for the line.
        /// Update the justifications if needed. Note the call to super has been intentionally removed
        /// to override default insert and update behavior.
        /// </summary>
        public void write()
        {
            boolean anyPreviousDayOrReportViolation = false;

            // If there were any report-level or day-level project policy violations on this report,
            // then other expenses might have updated statuses after this write operation.
            if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
            {
                anyPreviousDayOrReportViolation = requisitionTable.anyDayOrReportProjectPolicyViolations();
            }

            ttsbegin;
            if (!TrvRequisitionLine.RecId)
            {
                TrvRequisitionLine.insert(false, true);
            }
            else
            {
                TrvRequisitionLine.update(true);
            }

            // Save if there is a valid justification.
            if (MyJustification.visible() && strLTrim(LineJustification.Justification) != '')
            {
                LineJustification_DS.write();
            }

            if (MyHeaderJustification.visible() && strLTrim(HeaderJustification.Justification) != '')
            {
                HeaderJustification_DS.write();
            }
            ttscommit;

            // Reread is needed to update the DS record when super() is not used.
            this.reread();
            this.refresh();

            if (FeatureStateProvider::isFeatureEnabled(TrvExpenseEnableAsyncFeature::instance()))
            {
                element.doAsyncAction(TrvRequisitionLine.RecId);
            }
            else
            {
                // If there were any previous report-level or day-level project policy violations on this report,
                // or now after the update, then other expenses might have updated statuses too, so we need to research.
                if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave && !anyPreviousDayOrReportViolation)
                {
                    requisitionTable.anyDayOrReportProjectPolicyViolations();
                }

                TrvRequisitionLine_DS.research(true);
            
                element.showExpensePolicyViolations();
            }

            // Refresh the totals section
            totalsObservable.markChanged();
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorStatusIndicator</Name>
						<Source><![CDATA[
        /// <summary>
        /// Returns error if the corresponding adjusted policy violation level for the line.
        /// If the requisition expense is not inserted yet, this will not show any error.
        /// </summary>
        display container errorStatusIndicator(TrvRequisitionLine _TrvRequisitionLine)
        {
            indicatorIconObservable.observe();

            boolean suppressJustificationError;


            TrvpolicyviolationLevel level = TrvBudgetCheckHelper::errorIndicatorLevelRequisition(_TrvRequisitionLine, suppressJustificationError);

            ImageReference imgRef;

            switch (level)
            {
                case TrvpolicyviolationLevel::None:
                    imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Info);
                    return imgRef.pack();

                case TrvpolicyviolationLevel::Warning:
                case TrvpolicyviolationLevel::ApproveJustification:
                case TrvpolicyviolationLevel::SubmitJustification:
                case TrvpolicyviolationLevel::SubmitApproveJustification:
                    imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                    return imgRef.pack();

                case TrvpolicyviolationLevel::Error:
                    imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Error);
                    return imgRef.pack();
            }

            return conNull();
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research the expense datasource. Shows policy violations on header if we are in tiles view.
        /// This would be triggered by an action such as adding/removing unreconciled expenses.
        /// </summary>
        /// <param name = "_retainPosition">True if current position needs to be retained; otherwise false.</param>
        public void research(boolean _retainPosition = false)
        {
            super(_retainPosition);

            if (RequisitionExpenseTiles.visible())
            {
                TrvRequisitionTable.throwInfologsForPolicyViolationLevelMsg();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Based on selected expense lines, disable or enable buttons in the app bar.
        /// Also manage field and tab visibilities when selection changes.
        /// </summary>
        public void selectionChanged()
        {
            super();

            element.setVisibilityForDetailsView();

            // Since we'll only have limited number of views, we have a simple if-else to see which view is currently active.
            // For now, only details view needs to update visibilities when selection changes.
            if (RequisitionExpenseDetails.visible() || GridView.visible())
            {
                element.setFieldsAsMandatory();
                // In details view, we only show header violation messages once.
                if (!headerPolicyMessageShown)
                {
                    TrvRequisitionTable.throwInfologsForPolicyViolationLevelMsg();
                    headerPolicyMessageShown = true;
                }
                trvJustificationManager.initJustifications(element.inViewMode());
                trvHeaderJustificationManager.initJustifications(element.inViewMode());
                if (!element.inViewMode())
                {
                    RequisitionExpenseLineDetailsTabPage.setFocus();
                }
            }

            element.updateWorkflowControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the Data Source based on the type of record passed by parameter.
        /// </summary>
        public void executeQuery()
        {
            this.query().dataSourceTable(tablenum(TrvRequisitionLine)).addSortField(fieldNum(TrvRequisitionLine, CreatedDateTime), SortOrder::Descending);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Delete the requistion line.
        /// </summary>
        public void delete()
        {
            super();

            // Refresh the totals section
            totalsObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Category</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Creates a lookup for categories based on worker and legal entity.
            /// </summary>
            /// <param name = "_formControl">An instance of the control.</param>
            /// <param name = "_filterStr">A filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvRequisitionLookupHelper::createTrvReqLineExpCategoryLookup(_formControl, TrvCategoryLookupType::RegularExpense, TrvRequisitionTable.CreatingWorker, TrvRequisitionTable.LegalEntity);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>EstimatedDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update the Exchange rate.
            /// </summary>
            public void modified()
            {
                super();

                // Update exchange rate control after re-calculation of exchange rate
                element.updateExchangeRateonExchCodeChanged();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Merchant</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Filters the merchant according to the current expense type.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpMerchant::lookupMerchantId(_formControl, TrvRequisitionLine.ExpType);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::findRecId(trvRequisitionLine.ProjTable), ProjParameters::find().BlockParentActivitySelection);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjTable</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sets the 'mandatory' property of project category field.
            /// </summary>
            public void modified()
            {
                super();

                ProjLinePropertyId_Details.mandatory(TrvRequisitionLine.ProjTable != 0);
                ProjLinePropertyId_Grid.mandatory(TrvRequisitionLine.ProjTable != 0);
                TrvRequisitionLine_ds.refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Creates the project lookup based on category and resource.
            /// </summary>
            /// <param name = "_formReferenceControl">An instance of the reference control.</param>
            /// <returns>Returns the data based on the lookup</returns>
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                ProjParameters projParameters = ProjParameters::find();
                
                if (projParameters.ValidationEmplProj == ProjValParameter::None ||
                    projParameters.ValidationProjCategory == ProjValParameter::None )
                {
                    return TrvExpenseProjectHelper::createProjectReferenceLookup(_formReferenceControl, TrvRequisitionLine.ReferenceDataAreaId);
                    
                }

                return TrvExpenseProjectHelper::createProjRefLookupCategoryResourceLookup(
                    _formReferenceControl, 
                    TrvRequisitionLine.Category, 
                    ResourceFacade::findByWorker(trvRequisitionTable.CreatingWorker));
                
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvRequisitionTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Add range for travel requisition record id
        /// </summary>
        public void executeQuery()
        {
            QueryBuildRange recIdRange;

            recIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvRequisitionTable)), fieldnum(TrvRequisitionTable, RecId));
            recIdRange.value(queryValue(requisitionTable.RecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>refresh</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the form caption after a child form triggers a data source refresh.
        /// </summary>
        public void refresh()
        {
            super();
            element.setFormCaption();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// The selection changed operation for the travel requisition header.
        /// </summary>
        public void selectionChanged()
        {
            super();
            element.updateWorkflowControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalEstimate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Total travel requisition amount in accounting currency.
        /// </summary>
        public display TrvTotalExpenseAmount totalEstimate(TrvRequisitionTable _trvRequisitionTable)
        {
            totalsObservable.observe();
            return _trvRequisitionTable.totalEstimate();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LineJustification</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Save the justification entered.
        /// </summary>
        public void write()
        {
            super();

            indicatorIconObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DetailsView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to details view.
        /// </summary>
        public void clicked()
        {
            element.switchToDetailsView();

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvRequisition, DetailsView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GridViewButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in grid view
        /// </summary>
        public void clicked()
        {
            element.switchToGridView();

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvRequisition, GridViewButton));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByCategoryView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by category.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::Category);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvRequisition, GroupByCategoryView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByDateView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by transaction date.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::date);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvRequisition, GroupByDateView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByProjectView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by project.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::Project);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvRequisition, GroupByProjectView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvAccountingDistRequisition</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open accounting distributions form in edit mode.
        /// </summary>
        public void clicked()
        {
            // Cannot edit distributions on an expense that is not on an travel requisition
            if (!TrvRequisitionLine.RecId)
            {
                warning("@Expense:AttachExpenseToTravelReqToEditDistributions");
                return;
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvReqLineCheckBudget</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Check bugget for TrvRequisitionLine
        /// </summary>
        public void clicked()
        {
            // For a submitted expense, the approver may perform tax corrections before checking budget.
            TrvRequisitionLine  trvReqLine;
            FormDataSource  fds;
            boolean         anyCheckHasErrorWarning = false;

            fds = FormDataUtil::getFormDataSource(trvRequisitionLine);

                for (trvReqLine = fds.getFirst(1) ? fds.getFirst(1) : fds.cursor(); trvReqLine; trvReqLine = fds.getNext())
                {
                    trvReqLine.checkBudgetOnDemand();
                    trvReqLine.checkProjectBudgetOnDemand();

                    // Budget check result >= BudgetCheckResult::PassedWithWarnings means PassedWithWarnings or Failed.
                    if (anyCheckHasErrorWarning || trvReqLine.budgetCheckResult() >= BudgetCheckResult::PassedWithWarnings)
                    {
                        anyCheckHasErrorWarning = true;
                    }
                }

                if (!anyCheckHasErrorWarning)
                {
                    info("@Expense:BudgetCheckNoErrorWarnings");
                }
                else
                {
                    warning(strFmt("@Expense:BudgetCheckWarning", TrvRequisitionLine.Category));
                }

            indicatorIconObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvRequisitionTable_TravelPurpose</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open travel requisition purposes lookup.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportPurposeLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvRequisitionTable_Destination</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open lookup with travel requisition location.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLocationLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinancialDimensionsHeaderTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            TrvRequisitionTable_DefaultDimension.parmValidateBlockedForManualEntry(true);
            TrvRequisitionTable_DefaultDimension.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
            TrvRequisitionTable_DefaultDimension.parmActiveValueFilterDate(TrvRequisitionTable.RequisitionDate);
            TrvRequisitionTable_DefaultDimension.parmCompany(TrvRequisitionTable.ReferenceDataAreaId);
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CopyLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current expense line and related data.
        /// </summary>
        public void clicked()
        {
            super();
            element.copyRequisitionExpenseLine();

            TrvRequisitionLine_DS.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequisitionExpenseLineDetailsTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>allowPageDeactivate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks if it's safe to tab out of the details tab page. Runs the framework validation
        /// plus requires that the TrvRequisitionLine buffer is validated for writing on DB.
        /// </summary>
        /// <returns>true if the the user may tab out or false othwewise.</returns>
        public boolean allowPageDeactivate()
        {
            // Due to a limitation on the framework, executing TrvRequisitionLine_DefaultDimension.reactivate() causes the framework
            // to try to write TrvRequisitionLine to DB. To avoid a bad experience to the user on which multiple warnings may be
            // thrown even though he did not try to save anything, a design change was introduced: The Dimension Entry Control was
            // moved from the Details tab to a separate tab. This method guarantees that the user can only tab out from the Details
            // tab if the TrvRequisitionLine buffer is in a valid-to-save state. Making the write induced by reactivate() transparent to
            // the user.

            boolean ret;

            ret = super();

            // Validate only if there is a record and the travel requisition is editable.
            if (isRequisitionEditable && TrvRequisitionLine_DS.numberOfRowsLoaded() > 0)
            {
                ret = ret && TrvRequisitionLine.validateWrite();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Category_Details</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the visibility and mandatory fields when category is modified.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean modified()
        {
            // Default ret to true so if the user cancels the change, no error is shown.
            boolean ret = true;

            // Get the category record based on the category ID entered.
            TrvCostType category = TrvCostType::find(this.Text());
            
            ret = super();
            if (ret)
            {
                element.categoryChanged(category.ExpType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionCurrencyCode_Details</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adjust visibility of exchange rate.
        /// </summary>
        /// <returns>
        /// True if currency code is changed; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;
    
            ret = super();

            ExchangeRate_Details.visible(TrvRequisitionLine.TransactionCurrencyCode != companyCurrencyCode);
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequisitionExpenseLineFinancialTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Before opening the Financial tab, refresh the DefaultDimension control to match the
        /// correct legal entity selected by the user.
        /// </summary>
        public void pageActivated()
        {
            element.updateDefaultDimensionCurrentCompany();
            element.initDimensionEntry();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Category_Title</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override the jumpReft to navigate to the details view
        /// </summary>
        public void jumpRef()
        {
            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TileViewDefaultAction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switches to the details view without setting the view personalization setting.
        /// </summary>
        public void clicked()
        {
            super();

            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Category_Grid</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set the visibility and mandatory fields when category is modified.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean modified()
        {
            // Default ret to true so if the user cancels the change, no error is shown.
            boolean ret = true;

            // Get the category record based on the category ID entered.
            TrvCostType category = TrvCostType::find(this.Text());
            
            ret = super();
            if (ret)
            {
                element.categoryChanged(category.ExpType);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GridViewDefaultAction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switches to the details view without setting the view personalization setting.
        /// </summary>
        public void clicked()
        {
            super();
            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TrvRequisitionLine</Name>
			<Table>TrvRequisitionLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AirlineServiceClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarRentalVehicleClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EstimatedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Merchant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mileage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemDateFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemDateTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLinePropertyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconciliationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvRequisitionTable</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvRequisitionTable</JoinSource>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvRequisitionTable</Name>
			<Table>TrvRequisitionTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Destination</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReconciliationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequisitionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequisitionNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelPurpose</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LineJustification</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvRequisitionLine</JoinSource>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HeaderJustification</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvRequisitionTable</JoinSource>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS94130</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<WorkflowDataSource xmlns="">TrvRequisitionTable</WorkflowDataSource>
		<WorkflowEnabled xmlns="">Yes</WorkflowEnabled>
		<WorkflowType xmlns="">TrvRequisitionTemplate</WorkflowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ViewModesGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ViewModesButton</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>DetailsView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS318405</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GridViewButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GridView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByCategoryView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByCategoriesView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByDateView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByDatesView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByProjectView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByProjectView</Text>
									</AxFormControl>
								</Controls>
								<NormalImage>View</NormalImage>
								<Text>@SYS28196</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>RequisitionExpenseLineActions</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvAccountingDistRequisition</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvRequisitionLine</DataSource>
								<MenuItemName>TrvAccountingDistRequisition</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>BudgetCheck</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TrvReqLineCheckBudget</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS153177</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BudgetCheckResults</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvRequisitionLine</DataSource>
										<MenuItemName>BudgetCheckResults</MenuItemName>
									</AxFormControl>
								</Controls>
								<Text>@Expense:BudgetCheck</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AccountingDistributionsDocumentView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvRequisitionTable</DataSource>
								<MenuItemName>AccountingDistributionsDocumentView</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PrintActionsGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintActions</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvRequisition</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvRequisitionTable</DataSource>
										<MenuItemName>TrvRequisition</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS317015</Text>
									</AxFormControl>
								</Controls>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Print</NormalImage>
								<Text>@SYS101620</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvRequisitionTable</DataSource>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>RequisitionExpenseDetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HeaderTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>HeaderTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>GeneralHeaderTabPage</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RequisitionFieldsGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>MyHeaderJustification</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>Justification</DataField>
														<DataSource>HeaderJustification</DataSource>
														<Label>@SYS330348</Label>
														<ViewEditMode>Edit</ViewEditMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SubmitterHeaderJustification</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>submitterJustification</DataMethod>
														<DataSource>TrvRequisitionTable</DataSource>
														<Label>@SYS302375</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>OtherHeaderJustifications</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>approverJustification</DataMethod>
														<DataSource>TrvRequisitionTable</DataSource>
														<Label>@SYS302370</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvRequisitionTable_TravelPurpose</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>TravelPurpose</DataField>
														<DataSource>TrvRequisitionTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvRequisitionTable_Destination</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Destination</DataField>
														<DataSource>TrvRequisitionTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvRequisitionTable_Description</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Description</DataField>
														<DataSource>TrvRequisitionTable</DataSource>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
											</AxFormControl>
										</Controls>
										<Caption>@SYS81043</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialDimensionsHeaderTabPage</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>DimensionFieldsGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormContainerControl">
														<Name>TrvRequisitionTable_DefaultDimension</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Container</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension>
															<Name>DimensionEntryControl</Name>
															<ExtensionComponents />
															<ExtensionProperties>
																<AxFormControlExtensionProperty>
																	<Name>parmControllerClassName</Name>
																	<Type>ExtendedDataType</Type>
																	<TypeName>ClassName</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmControlLabelText</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmEnumerationName</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmDataSourceName</Name>
																	<Type>String</Type>
																	<Value>TrvRequisitionTable</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmValueSetReferenceField</Name>
																	<Type>String</Type>
																	<Value>DefaultDimension</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmEnumValueSetReferenceField</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
															</ExtensionProperties>
														</FormControlExtension>
														<Controls />
													</AxFormControl>
												</Controls>
												<DataSource>TrvRequisitionTable</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@SYS138491</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:TravelReqHeaderCaption</Caption>
						<FastTabExpanded>No</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>RequisitionExpensesActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>RequisitionExpenseActions</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>AddExpense</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@Expense:TravelReqLinesNewHelp</HelpText>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
												<Text>@Expense:TravelReqNewExpense</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>RemoveExpense</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@Expense:TravelReqDeleteTheSelectedExpense</HelpText>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
												<MultiSelect>No</MultiSelect>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CopyLine</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HelpText>@Expense:TravelReqCopyHelpText</HelpText>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<NormalImage>Copy</NormalImage>
												<Text>@Expense:TravelReqExpenseLineCopy</Text>
											</AxFormControl>
										</Controls>
										<DataSource>TrvRequisitionLine</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>TrvRequisitionLine</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RequisitionExpenseDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RequisitionExpenseLinesListGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Pattern>ToolbarList</Pattern>
										<PatternVersion>1.2</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>RequisitionExpenseLinesList</Name>
												<AllowEdit>No</AllowEdit>
												<ExtendedStyle>cardList</ExtendedStyle>
												<Type>Grid</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>RequisitionExpenseCard</Name>
														<ExtendedStyle>BusinessCard</ExtendedStyle>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormImageControl">
																<Name>RequisitionExpenseTypeIcon_Card</Name>
																<ExtendedStyle>ExpenseImage</ExtendedStyle>
																<Type>Image</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>showExpenseTypeIcon</DataMethod>
																<DataSource>TrvRequisitionLine</DataSource>
																<Label>@SYS101577</Label>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>TransactionCurrencyAmount_Card</Name>
																<ExtendedStyle>Heading</ExtendedStyle>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<Alignment>Left</Alignment>
																<DataMethod>transactionCurrencyAmountWithCurrencyCode</DataMethod>
																<DataSource>TrvRequisitionLine</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormDateControl">
																<Name>EstimatedDate_Card</Name>
																<Type>Date</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>EstimatedDate</DataField>
																<DataSource>TrvRequisitionLine</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>Category_Card</Name>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Category</DataField>
																<DataSource>TrvRequisitionLine</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormImageControl">
																<Name>Status_Card</Name>
																<ExtendedStyle>businessCard_notification</ExtendedStyle>
																<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
																<Type>Image</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>errorStatusIndicator</DataMethod>
																<DataSource>TrvRequisitionLine</DataSource>
																<Label>@SYS121619</Label>
																<NormalImage>Warning</NormalImage>
																<ShowLabel>No</ShowLabel>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>None</ArrangeMethod>
														<Style>Card</Style>
													</AxFormControl>
												</Controls>
												<DataSource>TrvRequisitionLine</DataSource>
												<ShowRowLabels>No</ShowRowLabels>
												<Style>List</Style>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>RequisitionExpenseLineDetailsBodyGroup</Name>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTabControl">
												<Name>RequisitionExpenseLineDetailsTab</Name>
												<Type>Tab</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>RequisitionExpenseLineDetailsTabPage</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>TabPage</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>RequisitionExpenseLineDetails</Name>
																<Type>Group</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>MyJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Justification</DataField>
																		<DataSource>LineJustification</DataSource>
																		<Label>@SYS330348</Label>
																		<ViewEditMode>Edit</ViewEditMode>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SubmitterJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>submitterJustification</DataMethod>
																		<DataSource>TrvRequisitionLine</DataSource>
																		<Label>@SYS302375</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>OtherJustifications</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>approverJustification</DataMethod>
																		<DataSource>TrvRequisitionLine</DataSource>
																		<Label>@SYS302370</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Category_Details</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Category</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>EstimatedDate_Details</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>EstimatedDate</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Merchant_Details</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Merchant</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																		<FastTabSummary>Yes</FastTabSummary>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>AmountGroup_Details</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TransactionCurrencyAmount_Details</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>TransactionCurrencyAmount</DataField>
																				<DataSource>TrvRequisitionLine</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TransactionCurrencyCode_Details</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>TransactionCurrencyCode</DataField>
																				<DataSource>TrvRequisitionLine</DataSource>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>ExchangeRate_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editExchangeRate</DataMethod>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>AccountingCurrencyAmount_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AccountingCurrencyAmount</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormReferenceGroupControl">
																		<Name>ProjTable_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>ReferenceGroup</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls />
																		<DataSource>TrvRequisitionLine</DataSource>
																		<ReferenceField>ProjTable</ReferenceField>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>ProjLinePropertyId_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjLinePropertyId</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>ProjActivityNumber_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjActivityNumber</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormReferenceGroupControl">
																		<Name>PerdiemTrvLocations_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>ReferenceGroup</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls />
																		<DataSource>TrvRequisitionLine</DataSource>
																		<ReferenceField>TrvLocations</ReferenceField>
																		<ReplacementFieldGroup>Location</ReplacementFieldGroup>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateTimeControl">
																		<Name>PerdiemDateFrom_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>DateTime</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PerdiemDateFrom</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateTimeControl">
																		<Name>PerdiemDateTo_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>DateTime</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PerdiemDateTo</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>VehicleClass_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>ComboBox</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CarRentalVehicleClass</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>AirlineServiceClass_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>ComboBox</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AirlineServiceClass</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>Mileage_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Mileage</DataField>
																		<DataSource>TrvRequisitionLine</DataSource>
																	</AxFormControl>
																</Controls>
																<ColumnsMode>Fill</ColumnsMode>
																<FrameType>None</FrameType>
															</AxFormControl>
														</Controls>
														<Caption>@SYS102068</Caption>
														<DataSource>TrvRequisitionLine</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>RequisitionExpenseLineFinancialTabPage</Name>
														<Type>TabPage</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormContainerControl">
																<Name>TrvRequisitionLine_DefaultDimension</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Container</Type>
																<FormControlExtension>
																	<Name>DimensionEntryControl</Name>
																	<ExtensionComponents />
																	<ExtensionProperties>
																		<AxFormControlExtensionProperty>
																			<Name>parmControllerClassName</Name>
																			<Type>ExtendedDataType</Type>
																			<TypeName>ClassName</TypeName>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>parmControlLabelText</Name>
																			<Type>String</Type>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>parmEnumerationName</Name>
																			<Type>String</Type>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>parmDataSourceName</Name>
																			<Type>String</Type>
																			<Value>TrvRequisitionLine</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>parmValueSetReferenceField</Name>
																			<Type>String</Type>
																			<Value>DefaultDimension</Value>
																		</AxFormControlExtensionProperty>
																		<AxFormControlExtensionProperty>
																			<Name>parmEnumValueSetReferenceField</Name>
																			<Type>String</Type>
																		</AxFormControlExtensionProperty>
																	</ExtensionProperties>
																</FormControlExtension>
																<Controls />
															</AxFormControl>
														</Controls>
														<Caption>@SYS138491</Caption>
														<DataSource>TrvRequisitionLine</DataSource>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RequisitionExpenseTiles</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>RequisitionExpenseTilesList</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>cardList</ExtendedStyle>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>RequisitionExpenseTileCard</Name>
												<ExtendedStyle>BusinessCard</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>RequisitionExpenseIcon_Tile</Name>
														<ExtendedStyle>ExpenseImage</ExtendedStyle>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>showExpenseTypeIcon</DataMethod>
														<DataSource>TrvRequisitionLine</DataSource>
														<Label>@SYS101577</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AccountingCurrencyAmount_Tile</Name>
														<ExtendedStyle>Heading</ExtendedStyle>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<Alignment>Left</Alignment>
														<DataMethod>accountingCurrencyAmountWithCurrencyCode</DataMethod>
														<DataSource>TrvRequisitionLine</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Merchant_Tile</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle></ExtendedStyle>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Merchant</DataField>
														<DataSource>TrvRequisitionLine</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>EstimatedDate_Tile</Name>
														<ExtendedStyle>Footer2</ExtendedStyle>
														<Type>Date</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>EstimatedDate</DataField>
														<DataSource>TrvRequisitionLine</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>Status_Tile</Name>
														<ExtendedStyle>businessCard_notification</ExtendedStyle>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>errorStatusIndicator</DataMethod>
														<DataSource>TrvRequisitionLine</DataSource>
														<Label>@SYS121619</Label>
														<NormalImage>Warning</NormalImage>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Category_Title</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Category</DataField>
														<DataSource>TrvRequisitionLine</DataSource>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>None</ArrangeMethod>
												<Style>Card</Style>
											</AxFormControl>
										</Controls>
										<DataSource>TrvRequisitionLine</DataSource>
										<Style>List</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TileViewDefaultAction</Name>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:DetailsView</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GridView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>RequisitionExpenseGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>PolicyErrorIndicator_Grid</Name>
												<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
												<Type>Image</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>errorStatusIndicator</DataMethod>
												<DataSource>TrvRequisitionLine</DataSource>
												<Label>@SYS121619</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Category_Grid</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Category</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>ProjTable_Grid</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ReferenceGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>TrvRequisitionLine</DataSource>
												<ReferenceField>ProjTable</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>EstimatedDate_Grid</Name>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>EstimatedDate</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>TransactionCurrencyAmount_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransactionCurrencyAmount</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TransactionCurrencyCode_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransactionCurrencyCode</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>ExchangeRate_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>editExchangeRate</DataMethod>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>AccountingCurrencyAmount_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>AccountingCurrencyAmount</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AmountToReconcile_Grid</Name>
												<AllowEdit>No</AllowEdit>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>amountToBeReconciledWithCurrencyCode</DataMethod>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ProjLinePropertyId_Grid</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ProjLinePropertyId</DataField>
												<DataSource>TrvRequisitionLine</DataSource>
											</AxFormControl>
										</Controls>
										<DataSource>TrvRequisitionLine</DataSource>
										<DefaultAction>GridViewDefaultAction</DefaultAction>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GridViewDefaultAction</Name>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:TravelRequisitionExpenseLines</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>RequisitionExpenseReportSummary</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>group_totalsContainer</ExtendedStyle>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalEstimatedAmount</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>totalEstimate</DataMethod>
						<DataSource>TrvRequisitionTable</DataSource>
						<Label>@SYS340849</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CompanyCurrency</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>companyCurrency</DataMethod>
						<DataSource>TrvRequisitionTable</DataSource>
						<Label>@SYS101485</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl>
				<Name>TimerControl</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Enabled>No</Enabled>
				<Skip>Yes</Skip>
				<Visible>No</Visible>
				<FormControlExtension>
					<Name>TimerControl</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>interval</Name>
							<Type>Int32</Type>
							<Value>1</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>startOnFormCreation</Name>
							<Type>Enum</Type>
							<TypeName>NoYes</TypeName>
							<Value>No</Value>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>