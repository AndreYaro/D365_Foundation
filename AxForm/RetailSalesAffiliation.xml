<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailSalesAffiliation</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailSalesAffiliation extends FormRun
{
    SalesTable salesTable;
    Set salesAffiliations;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (element.args().dataset() != tableNum(SalesTable))
        {
            throw error("@SYS22996");
        }

        salesTable = element.args().record();

        // Get the current set of affliations applicable for this sales order
        salesAffiliations = RetailSalesAffiliation::getSalesAffiliatonSet(salesTable.SalesId);

        if (RetailSalesTable::isCallCenterUserDisabledToEditCouponsAndAffiliationsOnRetailOrder(salesTable))
        {
            RetailSalesAffiliation_ds.allowCreate(false);
            RetailSalesAffiliation_ds.allowDelete(false);
            RetailSalesAffiliation_ds.allowEdit(false);
        }

        if (RetailInfoCodeLineTableV2Feature::isEnabled())
        {
            RetailSalesAffiliation_Infocode.visible(false);
            RetailSalesAffiliation_InfocodeV2.visible(true);
        }
        else
        {
            RetailSalesAffiliation_Infocode.visible(true);
            RetailSalesAffiliation_InfocodeV2.visible(false);
        }

        // Filter out affiliations associated with loyalty tiers
        QueryBuildDataSource qbds = retailSalesAffiliation_ds.query().dataSourceTable(tableNum(RetailSalesAffiliation));
        QueryBuildRange qbr = qbds.addRange(fieldNum(RetailSalesAffiliation, LoyaltyTier));
        qbr.value(queryValue(0));
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculatePriceDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalulcates pricing discount.
    /// </summary>
    private void recalculatePriceDiscount()
    {
        FormRun callerForm;
        RetailSalesTable retailSalesTable;

        // Recalculate price discounts.
        callerForm = element.args().caller();

        retailSalesTable = salesTable.retailSalesTable();
        RetailSalesOrderCalculator::setPricesDiscountsOnOrderOnServer(salesTable.SalesId, retailSalesTable.TotalManualDiscountPercentage);

        callerForm.dataSource().research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closed</Name>
				<Source><![CDATA[
    public boolean closed()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            // Check if affiliations changed for the current sales order. If yes, recalculate price discount
            if (element.checkIfAffiliationsChanged())
            {
                element.recalculatePriceDiscount();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAffiliationsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if affiliations changed for the current sales order
    /// </summary>
    /// <returns>
    /// return true If it got changed else false
    /// </returns>
    private boolean checkIfAffiliationsChanged()
    {
        Set latestSalesAffiliations;

        // Get the current set of affliations for the sales order
        latestSalesAffiliations = RetailSalesAffiliation::getSalesAffiliatonSet(salesTable.SalesId);

        return !salesAffiliations.equal(latestSalesAffiliations);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailSalesAffiliation</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            if (retailSalesAffiliation)
            {
                RetailAffiliation affiliation = RetailAffiliation::find(retailSalesAffiliation.Affiliation);

                if (affiliation)
                {
                    RetailInfocodeTableSpecific spec;
                    select firstonly1 spec where spec.refRelation == affiliation.Name && spec.refTableId == RetailInfocodeRefTableIdBase::RetailAffiliation;
                    
                    if (spec)
                    {
                        RetailInfocodeLine line;
                        RecId tableRecId = SalesTable::find(retailSalesAffiliation.SalesId).RecId;

                        if (RetailInfoCodeLineTableV2Feature::isEnabled())
                        {
                            RetailInfocodeLineV2 infoCodeLineV2;
                            RecId infoCodeLineRecId;

                            infoCodeLineV2 = RetailInfocodeLineV2::findAnyLine(tableRecId, affiliation.RecId, RetailInfoCodeLineRelatedTableType::Sales, RetailInfocodeTransType::Affiliation);

                            if (infoCodeLineV2.RecId)
                            {
                                // found infocodeline in V2 table, therefore, menu item for the v2 form should be shown.
                                RetailSalesAffiliation_Infocode.visible(false);
                                RetailSalesAffiliation_InfocodeV2.visible(true);

                                infoCodeLineRecId = infoCodeLineV2.RecId;
                            }
                            else
                            {
                                select firstonly RecId from line
                                    where line.SalesTable == tableRecId
                                    && line.ParentRecId == affiliation.RecId
                                    && line.Type == RetailInfocodeTransType::Affiliation;

                                infoCodeLineRecId = line.RecId;

                                if (infoCodeLineRecId)
                                {
                                    // found infocodeline in old table, therefore, menu item for the old form should be shown.
                                    RetailSalesAffiliation_Infocode.visible(true);
                                    RetailSalesAffiliation_InfocodeV2.visible(false);
                                }
                            }

                            // Only popup dialog if there is infocode associated with current affiliation and the infocode line has not been set.
                            if (!infoCodeLineRecId)
                            {
                                Args overrideArgs = new Args();
                                overrideArgs.name(formStr(RetailPromptForSalesAffialiationReasonCodeV2));
                                overrideArgs.record(retailSalesAffiliation);
                                FormRun recapFormRun = classfactory.formRunClass(overrideArgs);
                                recapFormRun.run();
                                recapFormRun.wait();
                            }
                        }
                        else
                        {
                            select firstonly1 line where line.SalesTable ==  tableRecId
                            && line.ParentRecId == affiliation.RecId
                            && line.Type == RetailInfocodeTransType::Affiliation;

                            // Only popup dialog if there is infocode associated with current affiliation and the infocode line has not been set.
                            if (!line)
                            {
                                Args overrideArgs = new Args();
                                overrideArgs.name(formStr(RetailPromptForSalesAffialiationReasonCode));
                                overrideArgs.record(retailSalesAffiliation);
                                FormRun recapFormRun = classfactory.formRunClass(overrideArgs);
                                recapFormRun.run();
                                recapFormRun.wait();
                            }
                        }
                    }
                }
            }
        
            return super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Affiliation</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sales affiliation lookup.
            /// </summary>
            /// <param name = "_formReferenceControl">Form reference control.</param>
            /// <returns>The record in the lookup form.</returns>
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Args    args;
                FormRun lookupForm;

                args = new Args(formStr(RetailAffiliationLookup));
                args.parmEnumType(enumNum(RetailAffiliationType));
                args.parmEnum(RetailAffiliationType::General);
                lookupForm = classfactory.formRunClass(args);
                lookupForm.init();

                _formReferenceControl.performFormLookup(lookupForm);
                return lookupForm.selectRecordModeSelectedRecord();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailSalesAffiliation</Name>
			<Table>RetailSalesAffiliation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Affiliation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoyaltyTier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@REX51</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RetailSalesAffiliation_Infocode</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>RetailSalesAffiliation_Infocode</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RetailSalesAffiliation_InfocodeV2</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>RetailSalesAffiliation_InfocodeV2</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CustomFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>RetailSalesAffiliation_Affiliation</Name>
						<Type>ReferenceGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<DataSource>RetailSalesAffiliation</DataSource>
						<Label>@RET1725</Label>
						<ReferenceField>Affiliation</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AffiliationDescription</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>affiliationDescription</DataMethod>
						<DataSource>RetailSalesAffiliation</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>RetailSalesAffiliation</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>