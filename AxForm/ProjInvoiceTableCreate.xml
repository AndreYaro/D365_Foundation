<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjInvoiceTableCreate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjInvoiceTableCreate extends FormRun
{
    ProjFundingSource               projFundingSource;
    ProjTable                       projTable;
    NumberSeqFormHandler            numberSeqFormHandler;
}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        CustTable               custTable;
        ProjFundingSourceRefId  projFundingSourceRefId;
        boolean                 ret = true;

        #ISOCountryRegionCodes

        if (element.closedOk())
        {
            //
            // Funding Source Id is required, check prior to contract being saved
            // the ProjFundingSource record will be save after the ProjInvoiceTable(Contract) record
            //
            if (projFundingSource_FundingSourceId.text() == '')
            {
                ret = checkFailed("@SYS133301");
            }
            else
            {
                ttsbegin;
                ret = projInvoiceTable.validateWrite();
                if (ret)
                {
					projInvoiceTable.insert();
					if (projInvoiceTable)
					{
						switch ( projFundingSource_FundingType.selection())
						{
							case ProjFundingType::Customer :
								custTable = CustTable::find(projFundingSource_FundingSourceId.text());
								if (!custTable)
								{
									ret = checkFailed("@SYS184311");
								}

								if (ret)
								{
									projFundingSourceRefId = ProjFundingSource::createFundingSource(projInvoiceTable.ProjInvoiceProjId, custTable.AccountNum, NoYes::Yes);
									if (!projFundingSourceRefId)
									{
										ret = false;
									}
								}

								if (ret)
								{
									this.onFundingSourceCreated(this, ProjFundingSourceRefId);
									TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, projInvoiceTable.RecId, custTable.AccountNum, TradeBLWITypeOfForm::InvoiceProject);
								}
								break;

							default :
								projFundingSource.clear();
								projFundingSource.ContractId      = projInvoiceTable.ProjInvoiceProjId;
								projFundingSource.FundingType     = projFundingSource_FundingType.selection();
								projFundingSource.editProjFunder(true, projFundingSource_FundingSourceId.text());
								if (projFundingSource.FundingSourceId == '')
								{
									ret = checkFailed("@SYS133301");
								}

								// Create Funding Source
								projFundingSource.insert();
								if (projFundingSource)
								{
									this.onFundingSourceCreated(this, ProjFundingSource.RecId);
									//
									// Create Funding Rule if one does not already exist.
									// This action is only completed for funding types of: Customer, Grant, Oraganization
									//
									if (projFundingSource.FundingType != ProjFundingType::OnHoldFundingSource)
									{
										ProjFundingRule::createDefaultFundingRule(projInvoiceTable.ProjInvoiceProjId, projFundingSource.RecId);
									}
								}
								else
								{
									ret = false;
								}
								break;
						}
                    }

                    // Rollback insert of contract
                    if (!ret)
                    {
                        projInvoiceTable.delete();
                    }
                }
                ttscommit;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        Object      callerForm;
        FormName    callerFormName;

        if (numberSeqFormHandler)
        {
            numberSeqFormHandler.formMethodClose();
        }

        super();

        callerForm = element.args().caller();

        if (callerForm && projInvoiceTable)
        {
            if (formHasMethod(callerForm, identifierStr(setProjInvoiceProjId)))
            {
                callerForm.setProjInvoiceProjId(projInvoiceTable.ProjInvoiceProjId);
            }

            if (projFundingSource_FundingType.selection() == ProjFundingType::Customer && formHasMethod(callerForm, identifierStr(setCustAccount)))
            {
                callerForm.setCustAccount(projFundingSource_FundingSourceId.text());
            }
        }

        if (callerForm != null)
        {
            callerFormName = callerForm.name();

            if (callerFormName == formStr(ProjInvoiceTable)         ||
                callerFormName == formStr(ProjProjectContractsListPage))
            {
                if (projInvoiceTable.RecId)
                {
                    element.openEditDetailsForm();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFundingSourceCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a delegate method used to expose an extension point open for customizations when a Funding source is created.
    /// </summary>
    /// <param name = "_sender">
    /// An instance of the form.
    /// </param>
    /// <param name = "_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    delegate void onFundingSourceCreated(FormRun _sender, ProjFundingSourceRefId _projFundingSourceRefId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        if (element.args().dataset() == tableNum(ProjTable))
        {
            projTable = element.args().record();
        }
        element.initNumberSeqFormHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for <c>ProjInvoiceTable</c>.
    /// </summary>
    protected void initializeValues()
    {
        SalesQuotationTable salesQuotationTable;

        if (element.args() && element.args().dataset() == tableNum(ProjGrant))
        {
            ProjGrant projGrant;
            projGrant = element.args().record();
            if (projGrant)
            {
                projInvoiceTable.Description = projGrant.GrantName;

                projFundingSource_FundingType.selection(ProjFundingType::Grant);
                projFundingSource_FundingSourceId.text(projGrant.GrantId);
            }
        }
        else
        {
            projFundingSource_FundingType.selection(ProjFundingType::Customer);

            if (projTable)
            {
                // If project type selected is Time and Material or FixedPrice, the funding source is a customer, else an internal organization.
                // If the funding source is a customer, default the funding source with the project's selected customer.
                if (projTable.Type == ProjType::TimeMaterial ||
                    projTable.Type == ProjType::FixedPrice ||
                    (projTable.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()))
                {
                    projFundingSource_FundingSourceId.text(ProjFundingSource::processFundingSourceId(projTable.CustAccount, ''));
                }
                else
                {
                    projFundingSource_FundingType.selection(ProjFundingType::Organization);
                }
            }
            else
            {
                if (element.args() && element.args().parm())
                {
                    projFundingSource_FundingSourceId.text(ProjFundingSource::processFundingSourceId(element.args().parm(), ''));
                }

                if (element.args() && element.args().dataset() == tableNum(SalesQuotationTable))
                {
                    salesQuotationTable = element.args().record();
                    if (salesQuotationTable)
                    {
                        projFundingSource_FundingSourceId.text(ProjFundingSource::processFundingSourceId(salesQuotationTable.CustAccount, ''));
                   }
                }
            }
        }

        if (projFundingSource_FundingSourceId.text() != '')
        {
            projFundingSource_FundingSourceId.modified();

            if (salesQuotationTable)
            {
                projInvoiceTable.CurrencyId = salesQuotationTable.CurrencyCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSeqFormHandler</Name>
				<Source><![CDATA[
    public NumberSeqFormHandler initNumberSeqFormHandler()
    {
        NumberSequenceTable numberSeqTableProjContractID;

        if (!numberSeqFormHandler)
        {
            numberSeqTableProjContractID = ProjParameters::numRefProjInvoiceProjId().numberSequenceTable();
            if (numberSeqTableProjContractID && numberSeqTableProjContractID.Manual == NoYes::No)
            {
                numberSeqFormHandler = NumberSeqFormHandler::newForm(numberSeqTableProjContractID.RecId,
                                                                     element,
                                                                     projInvoiceTable_DS,
                                                                     fieldNum(ProjInvoiceTable, ProjInvoiceProjId));
            }
        }
        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openEditDetailsForm</Name>
				<Source><![CDATA[
    public void openEditDetailsForm()
    {
        MenuFunction    menuFunction;
        Args            args       = new Args();

        args.record(projInvoiceTable);
        args.caller(this);

        menuFunction = new MenuFunction(menuitemDisplayStr(ProjInvoiceTable), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (!projInvoiceTable.ProjInvoiceProjId)
        {
            projInvoiceTable_DS.create();
        }

        element.initializeValues();
        element.wait(true);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjInvoiceTable</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            ttsbegin;
            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceDelete();
            }
            super();
            ttscommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            ttsbegin;
            super();
            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceWrite();
            }
            ttscommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreatePre();
            }
            super(_append);
            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceCreate(true);
            }

            if (projInvoiceTable.ProjInvoiceProjId != '')
            {
                projInvoiceTable_ds.object(fieldNum(ProjInvoiceTable, ProjInvoiceProjId)).allowEdit(false);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            if (ProjInvoiceTable::exist(projInvoiceTable.ProjInvoiceProjId))
            {
                return checkFailed("@SYS102556");
            }

            if (numberSeqFormHandler)
            {
                numberSeqFormHandler.formMethodDataSourceValidateWrite();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ProjFundingSource_FundingType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            projFundingSource_FundingSourceId.text('');

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjFundingSource_FundingSourceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            switch (projFundingSource_FundingType.selection())
            {
                case ProjFundingType::Grant :
                    ProjGrantFormManager::lookupAllowableGrant(this);
                    break;

                case ProjFundingType::Customer :
                    var sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable), this, true,
                            CustomerDataInteractorFactory::useExistingOrCreateResolver(this));
                    sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum), true);
                    sysTableLookup.addLookupfield(fieldNum(CustTable, Party));
                    sysTableLookup.addLookupfield(fieldNum(CustTable, OurAccountNum));
                    sysTableLookup.performFormLookup();
                    break;

                case ProjFundingType::Organization :
                case ProjFundingType::OnHoldFundingSource :
                    ProjFundingSource::lookupOrganization(this);
                    break;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            CustTable   custTable;

            boolean ret;

            ret = super();

            switch (projFundingSource_FundingType.selection())
            {
                case ProjFundingType::Customer :
                    custTable = CustTable::find(projFundingSource_FundingSourceId.text());
                    break;

                case ProjFundingType::Grant :
                    custTable =  CustTable::find(ProjGrant::findByGrantId(projFundingSource_FundingSourceId.text()).CustAccount);

                case ProjFundingType::Organization :
                case ProjFundingType::OnHoldFundingSource :
                    if (!projInvoiceTable.Description)
                    {
                        projInvoiceTable.Description = projFundingSource_FundingSourceId.text();
                    }
                    projInvoiceTable.CurrencyId = CompanyInfoHelper::standardCurrency();
                    break;
            }

            if (custTable)
            {
                projInvoiceTable.CurrencyId     = custTable.Currency;
                projInvoiceTable.TaxGroupId     = custTable.TaxGroup;
                projInvoiceTable.ProjPriceGroup = custTable.PriceGroup;
                projInvoiceTable.GiroType       = custTable.GiroTypeProjInvoice;
                projInvoiceTable.ListCodeId     = EUSalesList::resolveListCodeByCountryState(custTable.postalAddress(), projInvoiceTable.payer().postalAddress());
                projInvoiceTable.Payment        = custTable.PaymTermId;
                //if contract name is blank, use cust name for contract name
                if (!projInvoiceTable.Description)
                {
                    projInvoiceTable.Description = custTable.name();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveAmbiguousReference</Name>
						<Source><![CDATA[
        public str resolveAmbiguousReference()
        {
            if (projFundingSource_FundingType.selection() == ProjFundingType::Customer)
            {
                return CustomerDataInteractorFactory::resolveAmbiguousReferenceForControl(this);
            }
            else
            {
                return super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjInvoiceTable</Name>
			<Table>ProjInvoiceTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>bankcentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPurchaseOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForecastInvoiceFrequency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IndividualBuffer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ListCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinTimeIncrement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Paymentsched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjEnableAdvancedFunding</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceNetPrice_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLockSalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAContractDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAContractLines</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProgressInvoicing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainScheduleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesResponsible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncEntityId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxServiceCodeOnDlvAddress_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimePostDetailSummary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCodeId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<AutoSearch>No</AutoSearch>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS102600</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group1</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Group_Group</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjInvoiceTable_ProjInvoiceProjId</Name>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ProjInvoiceProjId</DataField>
								<DataSource>ProjInvoiceTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjInvoiceTable_Name</Name>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>ProjInvoiceTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ProjFundingSource_FundingType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjFundingType</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjFundingSource_FundingSourceId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS134468</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProjInvoiceTable_CurrencyId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1840700268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjInvoiceTableCreate_ProjInvoiceTable_CurrencyId</HelpText>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CurrencyId</DataField>
								<DataSource>ProjInvoiceTable</DataSource>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKCommandButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>