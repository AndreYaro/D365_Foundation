<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvExpenses</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvExpenses extends FormRun implements TrvIAsyncEnabled, TrvIFormRefreshWorker, TrvIWorkflowEnabledForm, TrvIDimensionEnabled, ExpenseIFieldVisibilityFinder, smmActivitiesIPreview
{
    #Task

    Object                              caller;
    TrvExpTable                         expenseReport;
    boolean                             isExpenseReportEditable, canDeleteExpenseReport;
    int64                               personalCategoryCount = -1;
    boolean                             isItemizedLine, isMealBreakdownPerDay;
    boolean                             calledFromReceiptsButton, calledFromItemizeButton;
    RefRecId                            lineRecID, lookupExpenseRecId;
    RefRecId                            itemizedHeaderRecID;
    RefRecId                            itemizedHeaderErrorRecId;
    RefRecId                            receiptRefTableId, receiptRefRecId;
    RefRecId                            guestExpenseRecId;
    RefRecId                            perdiemExpenseRecId;
    RefRecId                            splitHeaderRecId;
    TrvExpenseLinesVisibilityController trvExpenseLinesVisibilityController;
    TrvExpenseLinesVisibilityController trvExpenseSplitLinesVisibilityController;
    TrvParameters                       trvParameters = TrvParameters::find();
    TrvJustificationManager             trvJustificationManager, trvHeaderJustificationManager;
    TrvJustificationManager             trvSplitJustificationManager;
    CurrencyCode                        companyCurrencyCode;
    TrvExpenseReportPageFilters         callerFilter;
    HcmWorkerRecId                      creatingWorkerRecId;
    LegalEntityRecId                    creatingWorkerLegalEntity;
    TrvRequisitionNumber                trvReqNumber;
    TrvPerDiems                         trvPerDiems;
    TrvExpTrans                         activeExpense;
    TrvExpTrans                         activeItemizedExpense;
    TrvExpTableTrvRequisitionTable      trvExpTableTrvRequisitionTable;
    FormDataSource                      activeItemizedExpenseDataSource;
    FormDataSource                      activeExpenseDataSource;
    boolean                             canReadAPDetails = false, exchRateAdminVisibility;
    boolean                             headerPolicyMessageShown = false, canEditReceipts;
    TrvGridObservableLink               indicatorIconObservable = new TrvGridObservableLink();
    FormObservableLink                  totalsObservable = new FormObservableLink();
    FormObservableLink                  receiptRequiredObservable = new FormObservableLink();
    boolean                             isPerdiemEnabled = isConfigurationkeyEnabled(configurationKeyNum(TrvPerDiem));
    boolean                             isTravelRequisitionEnabled = isConfigurationkeyEnabled(configurationKeyNum(ExpenseTravelRequisition));
    boolean                             isActiveExpenseCreditTrans;
    boolean                             expenseReportHasCreditCardLines;
    boolean                             isItemizationCompleted;
    #isoCountryRegionCodes

    // Holds expenses that are updated async and need to be refreshed in the form.
    Set expenseRecIdsToRefresh = new Set(Types::Int64);

    // Holds expenses and the async task list from the writes on each of them.
    // Example: Say expense with recid 123 issued an async write and another expense with recid 456 issued 2 async writes.
    // 123 -> [TaskA]
    // 456 -> [TaskB, TaskC].
    Map expenseAsyncTaskMap = new Map(Types::Int64, Types::AnyType);

    // Controls the maximum number of simultaneous async updates on an expense.
    int maxParallelAsyncUpdates = 3;

    boolean asyncEnabled = true;

    const str personalizedViewKey = 'TrvExpensesLastView';
    ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('TrvExpenses');

}
]]></Source>
			</Method>
			<Method>
				<Name>parmAsyncEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if expense writes are allowed to be done asynchronously; otherwise, false.
    /// </summary>
    /// <param name = "_asyncEnabled">Set true if expense writes are allowed to be done asynchronously; otherwise, false.</param>
    public boolean parmAsyncEnabled(boolean _asyncEnabled = asyncEnabled)
    {
        asyncEnabled = _asyncEnabled;
        return asyncEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisible</Name>
				<Source><![CDATA[
    public boolean isFieldVisible(str _fieldName, int _tableId)
    {
        return TrvAdminCustomFields::find(_tableId, str2Int(_fieldName)).Visibility == TrvFieldVisibility::Display;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpenseAwaitingRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// If expense is currently being updated or awaiting refresh, this returns true. Otherwise, false.
    /// This is used to ignore source doc related error since the expense has not updated source doc yet.
    /// </summary>
    public boolean isExpenseAwaitingRefresh(RefRecId _trvExpTransRecId)
    {
        return expenseRecIdsToRefresh.in(_trvExpTransRecId)
                || (expenseAsyncTaskMap.exists(_trvExpTransRecId)
                    && expenseAsyncTaskMap.lookup(_trvExpTransRecId).elements() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>docCursor</Name>
				<Source><![CDATA[
    public Common docCursor()
    {
        Common docCursor;

        docCursor = super();

        if (docCursor.TableId != tableNum(TrvExpTrans))
        {
            // If there is no active line, document handling should show header receipts
            docCursor = TrvExpTable;
        }

        return docCursor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the dataset based on the calling table.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
        {
            creatingWorkerRecId = HcmWorkerLookup::currentWorker();

            if (element.args().record() && element.args().callerName() == formStr(TrvExpenseWorkSpace))
            {
                TrvExpTrans trvExpTransRecord = element.args().record();
                lineRecID = trvExpTransRecord.RecId;
                creatingWorkerRecId = trvExpTransRecord.CreatingWorker;
                creatingWorkerLegalEntity = trvExpTransRecord.LegalEntity;
            }
        }
        else
        {
            // If there is no record on the incoming args, try to get the record from the URL or the request context
            if (element.args() && !element.args().record())
            {
                if (!element.args().getRequestContextQuery())
                {
                    element.args().requestContextQuery(Global::getClientURLQueryValue('q'));
                }
                str contextQuery = element.args().getRequestContextQuery(); //get the context query
                if (contextQuery)
                {
                    //get line record if link was generated by line level workflow
                    Common  recordFromWFContext;
                    
                    if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLineWorkflow))
                    {
                        recordFromWFContext = TrvExpenseHelper::getLineRecordFromContext(contextQuery);
                    }
                    //if link was not generated by line level workflow look for header records
                    else
                    {
                        recordFromWFContext = TrvExpenseHelper::getExpenseRecordFromQuery(contextQuery);
                    }

                    element.args().record(recordFromWFContext);

                    if (TrvExpenseHelper::isTrvExpBlockApproverViewRecalledExpensesFlightEnabled() && !TrvAccessHelper::isUserApprover(element.args().record()))
                    {
                        expenseReport = element.args().record();
                        creatingWorkerRecId = expenseReport.CreatingWorker;

                        element.lifecycleHelper().exitForm(strfmt("@SYS342315", HcmWorker::worker2Name(creatingWorkerRecId)));
                    }
                }
            }
            
            if (element.args() && element.args().record())
            {
                switch (element.args().dataset())
                {
                    case tableNum(TrvExpTable):
                        expenseReport = element.args().record();
                        creatingWorkerRecId = expenseReport.CreatingWorker;
                        creatingWorkerLegalEntity = expenseReport.LegalEntity;
                        expenseReportHasCreditCardLines = expenseReport.hasCreditCardLines();

                        if (element.args().callerName() == formStr(TrvStatusPreview))
                        {
                            FormRun callerForm = element.args().caller();
                            TrvTmpExpenseNotifications notification = callerForm.dataSource().cursor();
                            lookupExpenseRecId = notification.TrvExpTransRecId;
                        }
                        break;

                    case tableNum(TrvExpTrans):
                        // called from GL to show original document or from TrvExpenses form to show itemized line details
                        TrvExpTrans    trvExpTransRecord = element.args().record();
                        changecompany (trvExpTransRecord.legalEntityName())
                        {
                            // findRecId is used instead of find() because when the intercompanyLE is
                            // different from LegalEntity, find() doesn't pick the right record.
                            expenseReport = TrvExpTable::findRecId(trvExpTransRecord.TrvExpTable);
                            expenseReportHasCreditCardLines = expenseReport.hasCreditCardLines();
                        }

                        if (trvExpTransRecord.SplitLineType == TrvExpSplitLineType::SplitLine)
                        {
                            lineRecID = TrvExpTrans::find(trvExpTransRecord.RecId).ParentRecId;
                        }
                        else
                        {
                            lineRecID = trvExpTransRecord.RecId;
                        }

                        isItemizedLine = (trvExpTransRecord.LineType == TrvExpLineType::ItemizedLine);
                        creatingWorkerRecId = trvExpTransRecord.CreatingWorker;
                        creatingWorkerLegalEntity = trvExpTransRecord.LegalEntity;
                        break;

                    default:
                        throw error("@SYS22996"); // Form called incorrectly
                }

                // Switch to the legal entity where current expense report was filed.
                DataAreaId referenceDataAreaId = CompanyInfo::findRecId(expenseReport.LegalEntity).DataArea;
                if (referenceDataAreaId != curExt())
                {
                    appl.setDefaultCompany(referenceDataAreaId, false);
                }
            }
            else
            {
                // Form refreshed or called incorrectly.
                element.lifecycleHelper().cancelFormInitialization();
            }
        }

        // Initialize the active expense and datasources.
        element.initActiveExpense(false);

        super();

        // Init visibility controller for expense fields.
        trvExpenseLinesVisibilityController = new TrvExpenseLinesVisibilityController(trvExpTrans, this, TrvExpTrans_DS.name(), TrvEnhancedItineraryData_DS.name(), TrvEnhancedCarRentalData_DS.name(), TrvEnhancedHotelData_DS.name(), TrvEnhancedTripLegDetail_DS.name(), TrvExpTable_DS.name());

        trvExpenseSplitLinesVisibilityController = new TrvExpenseLinesVisibilityController(TrvExpTrans_Split, this, TrvExpTrans_Split_DS.name(), TrvEnhancedItineraryData_Split_DS.name(),
                                                                                                TrvEnhancedCarRentalData_Split_DS.name(), TrvEnhancedHotelData_Split_DS.name(),
                                                                                                TrvEnhancedTripLegDetail_Split_DS.name(), TrvExpTable_DS.name());

        trvJustificationManager = new TrvJustificationManager(TrvExpTrans, MyJustification, SubmitterJustification, OtherJustifications, LineJustification_DS);
        trvSplitJustificationManager = new TrvJustificationManager(TrvExpTrans_Split, SplitMyJustification, SplitSubmitterJustification, SplitOtherJustifications, LineJustification_Split_DS);
        trvHeaderJustificationManager = new TrvJustificationManager(TrvExpTable, MyHeaderJustification, SubmitterHeaderJustification, OtherHeaderJustifications, HeaderJustification_DS);

        // Make Intercompany legal entity control visible/invisible based on Intercompany parameter is on/off.
        // Later it will combine with admin custom field visibility set on data source field.
        TrvExpTrans_InterCompanyLE.visible(trvParameters.UseInterCompanyExpense);
        SplitTrvExpTrans_IntercompanyLE.visible(trvParameters.UseInterCompanyExpense);

        // Hide the group by project button if project isn't visible.
        if (TrvAdminCustomFields::find(tableNum(TrvExpTrans), fieldNum(TrvExpTrans, ProjId)).Visibility == TrvFieldVisibility::DoNotDisplay)
        {
            GroupByProjectView.visible(false);
        }

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
        {
            GAFInformation.visible(false);
            GAFInformationGridView.visible(false);
        }

        companyCurrencyCode = CompanyInfoHelper::standardCurrency();
        TrvExpTrans_AmountMST.label(strFmt("@Expense:AmountWithCurrency", companyCurrencyCode));
        SplitTrvExpTrans_AmountMST.label(strFmt("@Expense:AmountWithCurrency", companyCurrencyCode));

        isExpenseReportEditable = expenseReport.isEditable();
        canDeleteExpenseReport = expenseReport.validateDelete(false);    // Validate that the expense report can be deleted, but don't throw an error.

        if (isTravelRequisitionEnabled)
        {
            // Get the travel requisition details.
            select firstonly TrvRequisitionTable from trvExpTableTrvRequisitionTable
                where trvExpTableTrvRequisitionTable.TrvExpTable == expenseReport.RecId;
            TrvRequisitionTable trvRequisitionTable = TrvRequisitionTable::find(trvExpTableTrvRequisitionTable.TrvRequisitionTable, false);
            if (trvRequisitionTable)
            {
                trvReqNumber = trvRequisitionTable.RequisitionNumber;
                MapTravelRequisition.text(trvReqNumber);
                TravelRequisitionAmount.text(TrvExpenseHelper::amountWithCurrencyCode(trvRequisitionTable.totalEstimate(), trvRequisitionTable.LegalEntity));
            }
        }
        if (isPerDiemEnabled)
        {
            isMealBreakdownPerDay = TrvExpPerdiemData::isMealBreakdownPerDay();
            if (trvParameters.PerDiemCalculation == TrvPerDiemCalculation::CalendarDayNoTime)
            {
                // Set the DateTime controls to only display the date component.
                // 2 means to display only the date.
                TrvExpTrans_DateFrom.displayOption(2);
                TrvExpTrans_DateTo.displayOption(2);
            }
        }

        if (!isItemizedLine)
        {
            // If is an expense report or a expense line show the expense report.
            this.initExpenseLinesDetails();
        }
        else
        {
            // If is an itemized line, we only show details for selected itemized line.
            this.initItemizedLineDetails();
        }

        // Get the system defined Edit button and set multi-select property to No.
        FormCommandButtonControl editButton = this.control(this.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
        editButton.multiSelect(0);

        // The following code is here to improve the experience when users are creating a new expense report.
        caller = element.args().caller();

        // Switch to details view when the caller is directly from expense workspace or via new expense report dialog.
        if (caller && caller is FormRun)
        {
            Args callerInstanceArgs = caller.args();
            if ((element.args().callerName() == formStr(TrvExpenseWorkSpace)
                || (callerInstanceArgs && callerInstanceArgs.callerName() == formStr(TrvExpenseWorkSpace)))
                && !ExpenseDetails.visible())
            {
                element.switchToDetailsView();
            }
        }

        // If the expense report doesn't have any lines, it is in draft and this is a brand new expense report.
        if (TrvExpTable::getNumberOfExpenseLines(expenseReport.RecId) == 0 && expenseReport.ApprovalStatus == TrvAppStatus::Create
            && caller != null &&  caller.name() == formStr(TrvExpenseReportDetails))
        {
            // If there are no unreconciled expenses or the expense report was created from the unreconciled list form, then insert an empty record.
            if (!TrvUnreconciledExpenseHelper::doesWorkerHaveUnreconciledExpenses(creatingWorkerRecId)
                || (caller.args() != null && caller.args().caller() != null))
            {
                TrvExpTrans_DS.insertIfEmpty(true);
            }
            else if (TrvExpenseHelper::isCalledFromMyExpenseReportsContext(caller.args().caller()))
            {
                // Else if opened from expense report listpage, open the attach  expenses form so that people can add the unattached expenses
                element.openUnattachedExpenses();
            }

            // Switch to details view when there is a travel requisition mapping.
            if (trvReqNumber)
            {
                element.switchToDetailsView();
            }
        }

        element.initSystemAttachmentButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Close the form in case the expense report level workflow was executed.
    /// </summary>
    void workflowActionDone(TrvWorkflowAction actionType)
    {
        if (element.design().workFlowType() == workFlowTypeStr(TrvDocumentTemplate))
        {
            // Only close the expenses form when the workflow type is TrvDocumentTemplate, stay in the page for line level workflow.
            element.close();
        }
        else
        {
            element.setWorkflowButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseWorkerContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the worker context, related filters and legal entity on expenses.
    /// </summary>
    /// <param name = "_workerParameter">
    ///     An instance of a <c>TrvWorkerParameter</c>
    /// </param>
    public void updateExpenseWorkerContext(TrvWorkerParameter _workerParameter)
    {
        if (_workerParameter != null)
        {
            // Update the current company if it has changed as per worker
            TrvFormHelper::setCompanyContext(CompanyInfo::findRecId(_workerParameter.parmLegalEntity()).DataArea);

            if ( _workerParameter.parmHcmWorkerRecId())
            {
                // Keep the worker object up to date
                creatingWorkerRecId = _workerParameter.parmHcmWorkerRecId();
                creatingWorkerLegalEntity = _workerParameter.parmLegalEntity();
                TrvExpTrans_ds.executeQuery();
                TrvExpTrans_Split_ds.executeQuery();
                element.setFormCaption();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openUnattachedExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form to select from a list of unattached expense lines
    /// </summary>
    public void openUnattachedExpenses()
    {
        Args args = new Args();

        args.caller(element);

        TrvUnattachedExpensesDialogArgs unreconciledArgs = new TrvUnattachedExpensesDialogArgs();
        unreconciledArgs.parmWorkerRecId(creatingWorkerRecId);
        unreconciledArgs.parmExpNumber(expenseReport.ExpNumber);
        args.parmObject(unreconciledArgs);

        FormRun fr = new MenuFunction(MenuItemDisplayStr(TrvUnattachedExpensesDialog), MenuItemType::Display).create(args);
        fr.run();
        fr.wait(true);

        //Refresh datasource after dialog completes
        TrvExpTrans_ds.research();
        TrvExpTrans_ds.positionToRecord(unreconciledArgs.parmNewlyAddedExpense());
        // check for added credit card lines and update visibilty settings for credit card specific fields
        expenseReportHasCreditCardLines = expenseReport.hasCreditCardLines();
        element.setVisibilityForCreditCardTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBulkEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine which fields are editable and then open bulk edit form
    /// </summary>
    public void performBulkEdit()
    {
        // If accessed as a series of expense lines, ensure bulk edit is only performed on lines that have not yet been submitted
        if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
        {
            for (TrvExpTrans localTrvExpTrans = TrvExpTrans_DS.getFirst(1) ? TrvExpTrans_DS.getFirst(1) : TrvExpTrans_DS.cursor();
            localTrvExpTrans;
            localTrvExpTrans = TrvExpTrans_DS.getNext())
            {
                if (!localTrvExpTrans.isEditable())
                {
                    warning("@Expense:CannotBulkEditBecauseLinesAreSubmitted");
                    return;
                }
            }
        }

        Args args = new Args();
        args.caller(element);
        args.record(TrvExpTrans);

        FormRun fr = new MenuFunction(menuItemDisplayStr(TrvExpenseLineFieldBulkEdit), MenuItemType::Display).create(args);
        fr.run();
        fr.wait(true);

        //Refresh datasource after dialog completes
        TrvExpTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemizeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Calendar control for itemization if there was a selection changed after previous initialization.
    /// </summary>
    private void initializeItemizeControl()
    {
        boolean                     isSplit;
        TrvExpTrans                 itemizedHeader = element.isSplitExpenseLine() ? TrvExpTrans_Split : TrvExpTrans;
        FormDataSource              itemizedExpenseDataSource = element.isSplitExpenseLine() ? TrvExpTrans_ItemizedLines_Split_DS : TrvExpTrans_ItemizedLines_DS;

        isSplit = element.isSplitExpenseLine();
        itemizedHeader =  isSplit ? TrvExpTrans_Split : TrvExpTrans;
        itemizedExpenseDataSource = isSplit ? TrvExpTrans_ItemizedLines_Split_DS : TrvExpTrans_ItemizedLines_DS;

        if (itemizedHeader.RecId != itemizedHeaderRecID)
        {
            if (isSplit)
            {
                SplitTrvItemizationCalendarControl.setFilterDate(itemizedHeader.TransDate);
            }
            else
            {
                TrvItemizationCalendarControl.setFilterDate(itemizedHeader.TransDate);
            }

            itemizedHeaderRecID = activeExpense.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemizedLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates and performs the create, update or delete operation on a selected itemized line in the Calendar control
    /// </summary>
    /// <param name = "calendarValidationData">The change in the total of the itemized line and the selected itemized line</param>
    /// <returns>
    /// <c>CalendarDataEntry</c> that represents the affected cell entry
    /// </returns>
    private CalendarDataEntry itemizedLineChanged(CalendarTableValidationData calendarValidationData)
    {
        real                delta = calendarValidationData.parmDelta();
        CalendarDataEntry   selectedItemizedLine = calendarValidationData.parmDataEntry();
        TrvExpTrans         itemizedLine;

        // Wait for any pending async update tasks on the expense header to finish before updating the itemized line.
        TrvExpenseAsyncHelper::waitForAllAsyncTasks(expenseAsyncTaskMap, activeExpense.RecId, activeExpenseDataSource);

        if (activeExpense.RecId && selectedItemizedLine != null )
        {
            // If the id is not set, the selected itemized line is a new itemized line.
            if (!selectedItemizedLine.parmInternalId())
            {
                CalendarDay                 column = selectedItemizedLine.parmColumn();
                CalendarDataAttribute       row = selectedItemizedLine.parmRow();
                AmountCur                   creditCardAmount = TrvExpItemizationManager::currFromLocal( delta, activeExpense.LineType, activeExpense.RecId, activeExpense.SplitLineType);

                if (column != null && row != null)
                {
                    activeItemizedExpenseDataSource.create();
                    itemizedLine = activeItemizedExpenseDataSource.cursor();

                    // initialize the cost type for the new record
                    itemizedLine.CostType = activeExpense.CostType;
                    itemizedLine.ExpType = activeExpense.ExpType;
                    itemizedLine.SubCategoryRecId = str2int64(row.parmInternalId());

                    // initValue() handles initialization of the date from the itemized header and
                    // sets the date from the calendar control
                    activeItemizedExpenseDataSource.initValue();

                    itemizedLine.AmountCurr = creditCardAmount;
                    itemizedLine.CreditCardTransactionCurrencyAmount = delta;

                    try
                    {
                        // Write the itemization contents only if itemization is valid.
                        if (activeItemizedExpense.validateWrite())
                        {
                            activeItemizedExpenseDataSource.write();
                            selectedItemizedLine.parmTotal(delta);
                            selectedItemizedLine.parmInternalId(int642str(itemizedLine.RecId));

                            // Reread itemized header in case we are creating the first itemized line.
                            if (activeExpense.LineType != TrvExpLineType::ItemizedHeader)
                            {
                                activeExpenseDataSource.reread();
                            }
                        }
                        else
                        {
                            // Else, set the contents of the itemized cell to return null so that the
                            // cell contents are not written and there is a red border on the cell.
                            selectedItemizedLine = null;
                            activeItemizedExpenseDataSource.delete();
                        }
                    }
                    catch
                    {
                        activeItemizedExpenseDataSource.delete();
                        return null;
                    }
                }
            }
            else if (activeItemizedExpenseDataSource.positionToRecordByValue(fieldnum(TrvExpTrans, RecId), selectedItemizedLine.parmInternalId()))
            {
                selectedItemizedLine.parmTotal(selectedItemizedLine.parmTotal() + delta);

                // If the total is zero, the itemized line is being deleted. Else, it is being updated
                if (!selectedItemizedLine.parmTotal())
                {
                    itemizedLine = activeItemizedExpenseDataSource.cursor();

                    ttsbegin;
                    itemizedLine.delete();
                    ttscommit;

                    // Reread itemized header in case we are deleting the last itemized line and line type changed.
                    activeExpenseDataSource.reread();

                    activeItemizedExpenseDataSource.research();
                    // Delete an itemized line can trigger changes in policy violations of the expense line.
                    element.showExpensePolicyViolations();
                    selectedItemizedLine.parmInternalId("");
                }
                else
                {
                    ttsbegin;
                    if (activeExpense.isCreditCardTransanctionInLocalCurrency())
                    {
                        activeItemizedExpense.CreditCardTransactionCurrencyAmount = selectedItemizedLine.parmTotal();
                        activeItemizedExpense.modifiedField(fieldnum(TrvExpTrans, CreditCardTransactionCurrencyAmount));
                    }
                    else
                    {
                        activeItemizedExpense.AmountCurr = selectedItemizedLine.parmTotal();
                        activeItemizedExpense.modifiedField(fieldnum(TrvExpTrans, AmountCurr));
                    }

                    // Write the itemization contents only if itemization is valid.
                    if (activeItemizedExpense.validateWrite())
                    {
                        activeItemizedExpenseDataSource.write();
                    }
                    else
                    {
                        // Else, set the contents of the itemized cell to return null so that the
                        // cell contents are not written and there is a red border on the cell.
                        selectedItemizedLine = null;
                    }
                    ttscommit;
                }
            }
        }

        return selectedItemizedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReceiptsTabContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the receipts tab page context for the selected expense.
    /// </summary>
    private void initializeReceiptsTabContext()
    {
        // When TrvExpReceiptForItemizedLinesFeature is disabled : Only if the expense is valid and not an itemized line and the expense is either editable or the form was opened from an AP Clerk view,
        // we should allow attaching/uploading and removing receipts.
        //When TrvExpReceiptForItemizedLinesFeature is enabled , show receipt Tab for Itemized line as well.

        boolean isFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TrvExpReceiptForItemizedLinesFeature::instance());

        boolean actionsEnabled = activeExpense.RecId &&
                                 activeExpense.ApprovalStatus != TrvAppStatus::Ledger &&
                                 (isFeatureEnabled ? true : activeExpense.LineType != TrvExpLineType::ItemizedLine) &&
                                 (activeExpense.isEditable() || canReadAPDetails);

        if (element.isSplitExpenseLine())
        {
            SplitReceiptAttachUploadGroup.enabled(actionsEnabled);
            SplitRemoveReceipts.enabled(actionsEnabled);
        }
        else
        {
            ReceiptAttachUploadGroup.enabled(actionsEnabled);
            RemoveReceipts.enabled(actionsEnabled);
        }

        element.refreshExpenseReceipts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemizationsTabContextVisibility</Name>
				<Source><![CDATA[
    private void initializeItemizationsTabContextVisibility()
    {
        boolean isExpenseInLocalCurrency;

        isExpenseInLocalCurrency = activeExpense.isCreditCardTransanctionInLocalCurrency();

        if (activeExpense.SplitLineType == TrvExpSplitLineType::NoSplit)
        {
            TrvExpTrans_ItemizedLines_AmountCurr.visible(!isExpenseInLocalCurrency);
            TrvExpTrans_ItemizedLines_AmountCurr.mandatory(!isExpenseInLocalCurrency);
            TrvExpTrans_ItemizedLines_CreditCardTransactionAmount.visible(isExpenseInLocalCurrency);
            TrvExpTrans_ItemizedLines_CreditCardTransactionAmount.mandatory(isExpenseInLocalCurrency);
        }

        if (activeExpense.SplitLineType == TrvExpSplitLineType::SplitLine)
        {
            SplitTrvExpTrans_ItemizedLines_AmountCurr.visible(!isExpenseInLocalCurrency);
            SplitTrvExpTrans_ItemizedLines_AmountCurr.mandatory(!isExpenseInLocalCurrency);
            SplitTrvExpTrans_ItemizedLines_CreditCardTransactionAmount.visible(isExpenseInLocalCurrency);
            SplitTrvExpTrans_ItemizedLines_CreditCardTransactionAmount.mandatory(isExpenseInLocalCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeItemizationsTabContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the itemizations tab page context for the selected expense.
    /// </summary>
    private void initializeItemizationsTabContext()
    {
        element.initializeItemizeControl();
        element.initializeItemizationsTabContextVisibility();
        element.itemizationErrorCheck();

        // Enable itemization details button only when there are itemized lines.
        if (activeExpense.SplitLineType == TrvExpSplitLineType::NoSplit)
        {
            element.enableItemizedDetailsButton();
        }
        else
        {
            element.enableItemizedDetailsButton(true);
        }

        if (canReadAPDetails)
        {
            element.setVisibilityForAccountingActionButton(SubledgerJournalAccountEntry, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowActionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Workflow event handler. Called when the workflow action fails.
    /// </summary>
    void workflowActionFailed(TrvWorkflowAction actionType)
    {
        activeExpenseDataSource.research(true);

        if (TrvBudgetCheckHelper::isBudgetFailed(TrvExpTable.RecId) || TrvBudgetCheckHelper::isProjBudgetFailed(TrvExpTable.RecId))
        {
            TrvBudgetCheckHelper::displayProjectBudgetViolationMsgs(trvExpTable.RecId);
            // Here we should call indicatorIconObservable.markChanged(); however it's called below in all cases, so skip the call here.
        }

        // If policy evaluation happens only during submit, we need to light up the errors when submit fails.
        if (ExpenseDetails.visible())
        {
            element.showExpensePolicyViolations();
        }
        else if (ExpenseTiles.visible())
        {
            TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
            indicatorIconObservable.markChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExpensePolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show expense violation messages and refresh the violation icons on the cards.
    /// </summary>
    /// <param name = "expenseLine">Expense line or itemized line used to validate policy violations by default it will be the current expense line</param>
    private void showExpensePolicyViolations(TrvExpTrans expenseLine = activeExpense)
    {
        expenseLine.throwInfologsForPolicyViolationLevelMsg();
        TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
        trvJustificationManager.initJustifications(element.inViewMode());
        trvHeaderJustificationManager.initJustifications(element.inViewMode());

        indicatorIconObservable.markChanged(expenseLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showItemizationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if itemization is complete.
    /// </summary>
    private void showItemizationError()
    {
        if (!activeExpense.isItemizationComplete())
        {
            error("@Expense:ItemizationIncompleteError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the "edit" button to switch to Details view.
    /// Override the "restore" button to update field visibilities if category changes.
    /// </summary>
    public int task(int _taskId)
    {
        int ret;

        switch (_taskId)
        {
            case #taskEditRecord:
                // Editing should only happen in Details or Grid view.
                if (!ExpenseDetails.visible() && !GridView.visible())
                {
                    element.switchToDetailsView();
                }
                ret = super(_taskId);
                trvJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvSplitJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvHeaderJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                break;

            case #taskRestore:
                TrvExpType previousExpType = activeExpense.ExpType;
                ret = super(_taskId);
                // Reset the visibility on the form based on restored category/expense type.
                element.updateFormVisibilityOnCategoryChange(previousExpType != activeExpense.ExpType);
                break;

            case #taskDoneEditRecord:
                ret = super(_taskId);
                trvJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvSplitJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                trvHeaderJustificationManager.refreshMyJustificationControlEditability(element.inViewMode());
                break;

            case #taskSave:
                infolog.cut();
                ret = super(_taskId);
                element.setWorkflowButtons();
                break;

            default:
                // For all other tasks.
                ret = super(_taskId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachSelectedReceipts</Name>
				<Source><![CDATA[
    // Detaches selected receipts and refreshes the UI.
    private void detachSelectedReceipts()
    {
        MultiSelectionHelper    selectionHelper;
        DocuRef                 selectedReceipt;

        selectionHelper = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(DocuRef_DS);
        selectedReceipt = selectionHelper.getFirst();

        while (selectedReceipt)
        {

            TrvReceiptsHelper::handleReceiptOnReceiptRemove(trvExpTrans, selectedReceipt.RecId);
            selectedReceipt = selectionHelper.getNext();
        }

        DocuRef_DS.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshExpenseReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh receipts attached to the current expense line.
    /// </summary>
    private void refreshExpenseReceipts()
    {
        // Reset range for receipts and run the query.
        // Filter datasource for expense receipts.
        // To optimize performance, do this only if the range has been changed.

        // If Feature is not enabled , Receipt context will not be there for Itemized Line. So, only original expense line's receipt will be displayed.
        // If Feature is enabled , show the receipt of itemized line if present, otherwise show the receipt of parent Line.

        RecId expenseRecId = FeatureStateProvider::isFeatureEnabled(TrvExpReceiptForItemizedLinesFeature::instance()) ?
                    (
                        !activeExpense.ReceiptsAttached && activeExpense.ParentRecId ? activeExpense.ParentRecId : activeExpense.RecId
                    )
                    : activeExpense.RecId;

        if (receiptRefTableId != tablenum(TrvExpTrans) || receiptRefRecId != activeExpense.RecId)
        {
            SysQuery::findOrCreateRange(DocuRef_DS.query().dataSourceName(tableStr(DocuRef)), fieldnum(DocuRef, RefTableId)).value(queryValue(tablenum(TrvExpTrans)));
            SysQuery::findOrCreateRange(DocuRef_DS.query().dataSourceName(tableStr(DocuRef)), fieldNum(DocuRef, RefRecId)).value(queryValue(expenseRecId));
            DocuRef_DS.executeQuery();
            receiptRefTableId = tablenum(TrvExpTrans);
            receiptRefRecId = expenseRecId;
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForInterCompanyCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// InterCompanyCategory field is visible only for an intercompany expense,
    /// and mandatory only when intercompany project is filled in.
    /// </summary>
    private void setVisibilityForInterCompanyCategory()
    {
        boolean isIntercompany = activeExpense.isIntercompany();

        TrvExpTrans_InterCompanyCategory.visible(isIntercompany);
        TrvExpTrans_InterCompanyCategory.mandatory(isIntercompany && TrvExpTrans.ProjId != '');
        SplitTrvExpTrans_InterCompanyCategory.visible(isIntercompany);
        SplitTrvExpTrans_InterCompanyCategory.mandatory(isIntercompany && TrvExpTrans_Split.ProjId != '');

        // Clear the value if its being hidden.
        if (!isIntercompany)
        {
            activeExpense.InterCompanyCategory = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Dimension Entry Control current company if it does not match with the expense line's legal entity name.
    /// </summary>
    private void updateDefaultDimensionCurrentCompany()
    {
        if (element.isSplitExpenseLine())
        {
            if (SplitTrvExpTrans_DefaultDimension.visible()
                && TrvExpTrans_Split.defaultDimensionLegalEntityName()
                && SplitTrvExpTrans_DefaultDimension.parmCompany() != TrvExpTrans_Split.defaultDimensionLegalEntityName())
            {
                SplitTrvExpTrans_DefaultDimension.parmCompany(TrvExpTrans_Split.defaultDimensionLegalEntityName());
                SplitTrvExpTrans_DefaultDimension.reactivate();
            }
        }
        else
        {
            if (TrvExpTrans_DefaultDimension.visible()
                && TrvExpTrans.defaultDimensionLegalEntityName()
                && TrvExpTrans_DefaultDimension.parmCompany() != TrvExpTrans.defaultDimensionLegalEntityName())
            {
                TrvExpTrans_DefaultDimension.parmCompany(TrvExpTrans.defaultDimensionLegalEntityName());
                TrvExpTrans_DefaultDimension.reactivate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes the dimension entry control on the <c>TrvExpenses</c> form.
    /// </summary>
    private void initDimensionEntry()
    {
        if (element.isSplitExpenseLine())
        {
            if (SplitTrvExpTrans_DefaultDimension.visible())
            {
                SplitTrvExpTrans_DefaultDimension.parmValidateBlockedForManualEntry(true);
                SplitTrvExpTrans_DefaultDimension.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
                SplitTrvExpTrans_DefaultDimension.parmActiveValueFilterDate(TrvExpTrans_Split.TransDate);
            }
        }
        else
        {
            if (TrvExpTrans_DefaultDimension.visible())
            {
                TrvExpTrans_DefaultDimension.parmValidateBlockedForManualEntry(true);
                TrvExpTrans_DefaultDimension.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
                TrvExpTrans_DefaultDimension.parmActiveValueFilterDate(TrvExpTrans.TransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected expense is split line based on the visibility of the split details group.
    /// </summary>
    /// <returns>
    /// True if split details group is visible; otherwise false.
    /// </returns>
    private boolean isSplitExpenseLine()
    {
        return SplitExpenseLineDetailsBodyTabGroup.visible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trvExpTransDataSourceInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the data for <c>TrvExpTrans</c> table new record.
    /// </summary>
    /// <param name = "_initTrvExpTrans">
    /// <c>TrvExptrans</c> table buffer.
    /// </param>
    private void trvExpTransDataSourceInit(TrvExpTrans _initTrvExpTrans)
    {
        if (element.args().menuItemName() != menuItemDisplayStr(TrvExpenseLines))
        {
            if (expenseReport.ExpNumber)
            {
                _initTrvExpTrans.ExpNumber = expenseReport.ExpNumber;
            }
        }
        else
        {
            _initTrvExpTrans.CreatingWorker = creatingWorkerRecId;
        }
        _initTrvExpTrans.EntryPoint = TrvExpEntryPoint::TrvExpenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trvExpTransWriteAsyncTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the async tasks for <c>TrvExpTrans</c> table.
    /// </summary>
    /// <param name = "_writeTrvExpTrans">
    /// <c>TrvExptrans</c> table buffer.
    /// </param>
    private void trvExpTransWriteAsyncTasks(TrvExpTrans _writeTrvExpTrans)
    {
        // If this expense is currently being updated async with more than the allowed count of
        // parallel updates, wait for the last update to return.
        if (expenseAsyncTaskMap.exists(_writeTrvExpTrans.RecId)
                && expenseAsyncTaskMap.lookup(_writeTrvExpTrans.RecId).elements() >= maxParallelAsyncUpdates)
        {
            TrvExpenseAsyncHelper::waitForLastAsyncTask(expenseAsyncTaskMap, _writeTrvExpTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOrReportProjectPolicyViolations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates any report-level or day-level project policy violations.
    /// </summary>
    /// <returns>
    /// True if there are any violations; otherwise false.
    /// </returns>
    private boolean dayOrReportProjectPolicyViolations()
    {
        boolean anyPreviousDayOrReportViolation = false;

        // If there were any report-level or day-level project policy violations on this report,
        // then other expenses might have updated statuses after this write operation.
        if (!element.parmAsyncEnabled() && trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            anyPreviousDayOrReportViolation = trvExpTable.anyDayOrReportProjectPolicyViolations();
        }

        return anyPreviousDayOrReportViolation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseErrorStatusIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expense policy error status indicator.
    /// </summary>
    /// <param name = "_errorStatusTrvExpTrans">
    /// <c>TrvExptrans</c> table buffer.
    /// </param>
    /// <returns>
    /// Container with error status image.
    /// </returns>
    private container expenseErrorStatusIndicator(TrvExpTrans _errorStatusTrvExpTrans)
    {
        // we don't show any errors on new lines, no reason to perform checks
        if (_errorStatusTrvExpTrans.RecId == 0)
        {
            return conNull();
        }

        // No need to display the error status for expenses that are already approved or processed for payment.
        if (_errorStatusTrvExpTrans.ApprovalStatus != TrvAppStatus::Ledger && _errorStatusTrvExpTrans.ApprovalStatus != TrvAppStatus::Approved)
        {
            TrvPolicyViolationLevel level;
            boolean suppressJustificationError;

            // If the async policy evaluation is not done yet, downgrade the justification errors to a warning.
            if (element.parmAsyncEnabled())
            {
                suppressJustificationError = expenseAsyncTaskMap.exists(_errorStatusTrvExpTrans.RecId)
                                                    && expenseAsyncTaskMap.lookup(_errorStatusTrvExpTrans.RecId).elements() > 0;

            }

            if (_errorStatusTrvExpTrans.AmountCurr == 0 && (_errorStatusTrvExpTrans.LineType != TrvExpLineType::ItemizedHeader || _errorStatusTrvExpTrans.SplitLineType != TrvExpSplitLineType::SplitHeader))
            {
                level = TrvPolicyViolationLevel::Error;
            }
            else
            {
                level = TrvBudgetCheckHelper::errorIndicatorLevel(_errorStatusTrvExpTrans, suppressJustificationError);

                if (level == TrvpolicyviolationLevel::Warning)
                {
                    // no budget issues, check justification requirements. Determine if the current user is
                    // the submitter or the approver and see if a justifcation is required and has been entered
                    if (TrvWorkflowUtilities::isCurUserExpenseApprover(trvExpTable) && TrvJustificationHelper::isJustificationRequired(_errorStatusTrvExpTrans.RecId, TrvPolicyViolationJustificationTypeEnum::TrvExpLine, TrvPolicyViolationLevel::ApproveJustification))
                    {
                        if (TrvPolicyViolationJustification::justificationExists(_errorStatusTrvExpTrans.RecId, TrvWorkflowAction::Approve, TrvPolicyViolationJustificationTypeEnum::TrvExpLine))
                        {
                            level = TrvPolicyViolationLevel::None;
                        }
                        else
                        {
                            level = TrvPolicyViolationLevel::ApproveJustification;
                        }
                    }
                    else if (TrvJustificationHelper::isJustificationRequired(_errorStatusTrvExpTrans.RecId, TrvPolicyViolationJustificationTypeEnum::TrvExpLine, TrvPolicyViolationLevel::SubmitJustification))
                    {
                        if (TrvPolicyViolationJustification::justificationExists(_errorStatusTrvExpTrans.RecId, TrvWorkflowAction::Submit, TrvPolicyViolationJustificationTypeEnum::TrvExpLine))
                        {
                            level = TrvPolicyViolationLevel::None;
                        }
                        else
                        {
                            level = TrvPolicyViolationLevel::SubmitJustification;
                        }
                    }

                }
            }

            ImageReference imgRef;

            switch (level)
            {
                case TrvpolicyviolationLevel::None:
                    if (_errorStatusTrvExpTrans.itemizationStatus() != TrvExpItemizationStatus::NoItemizedLines || _errorStatusTrvExpTrans.receiptsAttached)
                    {
                        imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Info);
                        return imgRef.pack();
                    }

                    break;

                case TrvpolicyviolationLevel::Warning:
                    imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                    return imgRef.pack();

                case TrvpolicyviolationLevel::ApproveJustification:
                case TrvpolicyviolationLevel::SubmitJustification:
                case TrvpolicyviolationLevel::SubmitApproveJustification:
                    // if justification error is supressed, downgrade to a warning
                    if (suppressJustificationError)
                    {
                        imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning);
                        return imgRef.pack();
                    }
                    // justification error is not supressed, fall through to error image
                    break;

                case TrvpolicyviolationLevel::Error:
                    imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Error);
                    return imgRef.pack();
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultProjectFromExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default project from the expense report.
    /// </summary>
    /// <param name = "_projTrvExpTrans">
    /// <c>TrvExptrans</c> table buffer.
    /// </param>
    private void setDefaultProjectFromExpenseReport(TrvExpTrans _projTrvExpTrans)
    {
        ProjLinePropertyId      projLinePropertyId;

        if (expenseReport.ProjId && !_projTrvExpTrans.ProjId)
        {
            //
            // Default project id from expense header when both header and line reference the same company
            // and having valid worker category validation groups.
            //
            if (expenseReport.intercompanyLegalEntityName() == _projTrvExpTrans.InterCompanyLE &&
                       CategoryTable::find(_projTrvExpTrans.CostType).UseInProject &&
                       TrvExpTrans::checkWorkerCategory(_projTrvExpTrans.CreatingWorker, _projTrvExpTrans.CostType, _projTrvExpTrans.isIntercompany(), false, true))
            {
                _projTrvExpTrans.ProjId = expenseReport.ProjId;
                //
                // If the project header has a default project id, check that there is also a default project line property
                // before copying the header project properties over to the line.
                //
                changecompany (expenseReport.intercompanyLegalEntityName())
                {
                    projLinePropertyId = ProjLinePropertySetup::findLinePropertyId(expenseReport.ProjId, _projTrvExpTrans.CostType);
                }

                if (projLinePropertyId)
                {
                    _projTrvExpTrans.ProjStatusId = projLinePropertyId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the correct visibility controller method for the currently visible view.
    /// </summary>
    private void setVisibilityForView()
    {
        if (ExpenseDetails.visible())
        {
            if (element.isSplitExpenseLine())
            {
                trvExpenseSplitLinesVisibilityController.setVisibility();
            }
            else
            {
                trvExpenseLinesVisibilityController.setVisibility();
            }
        }
        else if (GridView.visible())
        {
            trvExpenseLinesVisibilityController.setGridVisibility();

            boolean isNotTransportAndNotAllowance = (TrvExpTrans.ExpType != TrvExpType::Transport && TrvExpTrans.ExpType != TrvExpType::Allowance);
            TrvExpTrans_AmountCurr_Grid.allowEdit(isNotTransportAndNotAllowance && this.isExpTransFieldEditable(fieldNum(TrvExpTrans, AmountCurr)));
            TrvExpTrans_ExchangeCode_Grid.allowEdit(isNotTransportAndNotAllowance && this.isExpTransFieldEditable(fieldNum(TrvExpTrans, ExchangeCode)));
            TrvExpTrans_MerchantId_Grid.allowEdit(isNotTransportAndNotAllowance && this.isExpTransFieldEditable(fieldNum(TrvExpTrans, MerchantId)));
            TrvExpTrans_TransDate_Grid.allowEdit(isNotTransportAndNotAllowance && this.isExpTransFieldEditable(fieldNum(TrvExpTrans, TransDate)));

            TrvExpTrans_ExpNumber.allowEdit(this.isExpTransFieldEditable(fieldNum(TrvExpTrans, ExpNumber)));
            TrvExpTrans_CostType_Grid.allowEdit(this.isExpTransFieldEditable(fieldNum(TrvExpTrans, CostType)));
            TrvExpTrans_ProjId_Grid.allowEdit(this.isExpTransFieldEditable(fieldNum(TrvExpTrans, ProjId)));
            TrvExpTrans_ProjStatusId_Grid.allowEdit(this.isExpTransFieldEditable(fieldNum(TrvExpTrans, ProjStatusId)));
            TrvExpTrans_ProjActivityNumber_Grid.allowEdit(this.isExpTransFieldEditable(fieldNum(TrvExpTrans, ProjActivityNumber)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpTransFieldEditable</Name>
				<Source><![CDATA[
    private boolean isExpTransFieldEditable(FieldId fieldId)
    {
        boolean isEditable = TrvExpenseHelper::expTransFieldVisibility(fieldId) != TrvFieldVisibility::ReadOnly;

        switch (fieldId)
        {
            Case fieldNum(TrvExpTrans, CostType):
                isEditable = isEditable && TrvCostType::isCostTypeEditable(TrvExpTrans.CostType);
        }

        return isEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForDetailsView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibilities in the form's details view, that change when the expense selected changes.
    /// </summary>
    private void setVisibilityForDetailsView()
    {
        boolean isSplitLine = element.isSplitExpenseLine();

        if (personalCategoryCount == -1 && isActiveExpenseCreditTrans)
        {
            personalCategoryCount = TrvPersonalExpenseHelper::numberOfPersonalCategories(activeExpense.PayMethod);
        }

        // Set focus to the details tab when the selection of expense line changes.
        if (calledFromItemizeButton)
        {
            if (isSplitLine)
            {
                SplitExpenseLineItemizeTabPage.setFocus();
            }
            else
            {
                ExpenseLineItemizeTabPage.setFocus();
            }
            calledFromItemizeButton = false;
        }
        else if (calledFromReceiptsButton)
        {
            if (isSplitLine)
            {
                SplitExpenseLineReceiptTabPage.setFocus();
            }
            else
            {
                ExpenseLineReceiptTabPage.setFocus();
            }
            calledFromReceiptsButton = false;
        }

        // If current selection is on a tab that will be hidden when expense line selection changes,
        // say guests, the focus is put on the next tab, say receipts.
        // This will execute a query to fetch receipts + client takes some time to render receipts tab.
        // But the focus is moved to 'details' tab eventually.
        // In order to avoid this, we handle the visibilities of tab after the 'details' tab is selected.
        if (isSplitLine)
        {
            SplitExpenseLineGuestTabPage.visible(TrvExpTrans_Split.isGuestType());
        }
        else
        {
            ExpenseLineGuestTabPage.visible(TrvExpTrans.isGuestType());
        }

        element.updateItemizationControls();

        element.updateMergeControls();

        element.setVisibilityForView();
        element.setVisibilityForPerdiemPerDayDeductions();

        // Visibility manager sets 'all' datasources to read only, not just expense datasources.
        // Re-enable justification datasource.
        HeaderJustification_DS.allowEdit(true);
        if (isSplitLine)
        {
            LineJustification_Split_DS.allowEdit(true);
        }
        else
        {
            LineJustification_DS.allowEdit(true);
        }

        element.setVisibilityForInterCompanyCategory();
        element.setVisibilityForDistributionsButtons();

        exchRateAdminVisibility = TrvAdminCustomFields::findDisplayMethod(tableNum(TrvExpTrans), 'editExchRate', false, CompanyInfo::current()).Visibility != TrvFieldVisibility::DoNotDisplay;   // Store the admin settings for later use.
        element.setVisibilityWhenExchCodeChanged();
        element.handleAmountFields();

        // Manage the visibility for personal expense controls
        element.initializePersonalAmount();

        // Manage the visibility for corrected tax amount entry.
        element.setVisibilityForTaxCorrections();

        if (isTravelRequisitionEnabled)
        {
            this.setVisibilityForTravelReqFields(trvReqNumber != '', trvReqNumber != '');
        }

        element.setVisibilityForCreditCardTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityWhenExchCodeChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for exchange rate related fields.
    /// </summary>
    private void setVisibilityWhenExchCodeChanged()
    {
        boolean isCreditCardSplitLine = element.isSplitExpenseLine();

        if (isActiveExpenseCreditTrans)
        {
            if (element.isSplitExpenseLine())
            {
                SplitEditExchRate.visible(exchRateAdminVisibility && activeExpense.isCreditCardTransCurDiffThanCompanyCur());
                SplitEditExchRate.allowEdit(trvParameters.AllowEditCreditCardExchRate == NoYes::Yes
                                       && activeExpense.isCreditCardTransCurDiffThanCompanyCur()
                                       && activeExpense.LineType != TrvExpLineType::ItemizedLine);
            }
            else
            {
                editExchRate.visible(exchRateAdminVisibility && activeExpense.isCreditCardTransCurDiffThanCompanyCur());
                editExchRate.allowEdit(trvParameters.AllowEditCreditCardExchRate == NoYes::Yes
                                       && activeExpense.isCreditCardTransCurDiffThanCompanyCur()
                                       && activeExpense.LineType != TrvExpLineType::ItemizedLine);
            }
        }
        else
        {
            editExchRate.visible(exchRateAdminVisibility && (companyCurrencyCode != activeExpense.ExchangeCode)); // Ensure admin custom field isn't overwritten.
            editExchRate.allowEdit(editExchRate.allowEdit() && activeExpense.ExpType != TrvExpType::Advance && activeExpense.ExpType != TrvExpType::Allowance); // Exchange rate should be read-only for cash advance return and perdiem expense line.
        }

        activeExpenseDataSource.cacheCalculateMethod(tablemethodstr(TrvExpTrans, editExchRate));
        if (element.isSplitExpenseLine())
        {
            SplitTrvExpTrans_AmountMST.visible(isActiveExpenseCreditTrans || companyCurrencyCode != activeExpense.ExchangeCode || activeExpense.ExpType == TrvExpType::Allowance || activeExpense.ExpType == TrvExpType::Transport);
        }
        else
        {
            TrvExpTrans_AmountMST.visible(isActiveExpenseCreditTrans || companyCurrencyCode != activeExpense.ExchangeCode || activeExpense.ExpType == TrvExpType::Allowance || activeExpense.ExpType == TrvExpType::Transport);
        }

        // Exchange rate is mandatory whenever it is visible.
        editExchRate.mandatory(editExchRate.visible());
        SplitEditExchRate.mandatory(SplitEditExchRate.visible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForCreditCardTotals</Name>
				<Source><![CDATA[
    private void setVisibilityForCreditCardTotals()
    {
        TotalCreditCard.visible(isActiveExpenseCreditTrans || expenseReportHasCreditCardLines);
        TotalPersonal.visible(isActiveExpenseCreditTrans || expenseReportHasCreditCardLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAmountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit label for the different amount fields for each expense line based on whether its a credit card expense or not.
    /// </summary>
    private void handleAmountFields()
    {
        if (isActiveExpenseCreditTrans && activeExpense.isCreditCardTransanctionInLocalCurrency())
        {
            if (element.isSplitExpenseLine())
            {
                SplitTrvExpTrans_CreditCardTransactionCurrencyAmount.visible(true);
                SplitTrvExpTrans_CreditCardTransactionCurrency.visible(true);
            }
            else
            {
                TrvExpTrans_CreditCardTransactionCurrencyAmount.visible(true);
                TrvExpTrans_CreditCardTransactionCurrency.visible(true);
            }
        }
        else
        {
            // Hide credit card local amount since it's not applicable here.
            if (element.isSplitExpenseLine())
            {
                SplitTrvExpTrans_CreditCardTransactionCurrencyAmount.visible(false);
                SplitTrvExpTrans_CreditCardTransactionCurrency.visible(false);
            }
            else
            {
                TrvExpTrans_CreditCardTransactionCurrencyAmount.visible(false);
                TrvExpTrans_CreditCardTransactionCurrency.visible(false);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMappedReqLine</Name>
				<Source><![CDATA[
    protected void resetMappedReqLine(boolean _travelReq)
    {
        if (activeExpense)
        {
            activeExpense.MappedToRequisitionLine = 0;

            if (_travelReq)
            {
                activeExpense.IsPreAuthorized = NoYes::Yes;
                TrvExpTrans_MappedToRequisitionLine.enabled(true);
            }
            
            activeExpense.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForTravelReqFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for travel requisition fields.
    /// </summary>
    /// <param name = "_enableTravelReq">
    /// True if travel requisition number is attached on header; otherwise false.
    /// </param>
    /// <param name = "_enablePreAuthorized">
    /// True if pre-authorized checkbox needs to be turned on; otherwise false.
    /// </param>
    protected void setVisibilityForTravelReqFields(boolean _enableTravelReq, boolean _enablePreAuthorized = false)
    {
        if (element.isSplitExpenseLine())
        {
            SplitTrvExpTrans_IsPreAuthorized.visible(_enableTravelReq);
            SplitTrvExpTrans_MappedToRequisitionLine.visible(_enableTravelReq);
            SplitAuthorizedAmount.visible(_enableTravelReq);
            if (activeExpense)
            {
                SplitAuthorizedAmount.realValue(TrvRequisitionLine::find(activeExpense.MappedToRequisitionLine).amountToBeReconciled(activeExpense.RecId));
            }

            // Enable Pre-Authorized field while creating a new line.
            if (_enableTravelReq && _enablePreAuthorized && activeExpense.RecId == 0)
            {
                activeExpense.IsPreAuthorized = NoYes::Yes;
            }
        }
        else
        {
            TrvExpTrans_IsPreAuthorized.visible(_enableTravelReq);
            TrvExpTrans_MappedToRequisitionLine.visible(_enableTravelReq);
            AuthorizedAmount.visible(_enableTravelReq);
            if (activeExpense)
            {
                AuthorizedAmount.realValue(TrvRequisitionLine::find(activeExpense.MappedToRequisitionLine).amountToBeReconciled(activeExpense.RecId));
            }

            // Enable Pre-Authorized field while creating a new line.
            if (_enableTravelReq && _enablePreAuthorized && activeExpense.RecId == 0)
            {
                activeExpense.IsPreAuthorized = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsAsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set relevant fields as mandatory for various expense types.
    /// </summary>
    private void setFieldsAsMandatory()
    {
        // Generic form control object doesn't have mandatory method. So this is not moved to the visibility manager.
        if (element.isSplitExpenseLine() && activeExpenseDataSource.numberOfRowsLoaded() > 0)
        {
            SplitTrvExpTrans_ProjStatusId.mandatory(SplitTrvExpTrans_ProjStatusId.isVisible() && activeExpense.ProjId != '');
        }
        else if (!element.isSplitExpenseLine() && activeExpenseDataSource.numberOfRowsLoaded() > 0)
        {
            cashAdvanceNumber.mandatory(activeExpense.ExpType == TrvExpType::Advance);
            TrvExpTrans_KMOwnCar.mandatory(activeExpense.ExpType == TrvExpType::Transport);
            TrvExpTrans_DateFrom.mandatory(activeExpense.ExpType == TrvExpType::Allowance);
            TrvExpTrans_DateTo.mandatory(activeExpense.ExpType == TrvExpType::Allowance);
            TrvExpTrans_TrvLocations.mandatory(activeExpense.ExpType == TrvExpType::Allowance);
            TrvExpTrans_AmountCurr.mandatory(activeExpense.ExpType != TrvExpType::Allowance && activeExpense.ExpType != TrvExpType::Transport);
            TrvExpTrans_AmountCurr_Grid.mandatory(activeExpense.ExpType != TrvExpType::Allowance && activeExpense.ExpType != TrvExpType::Transport);
            TrvExpTrans_ProjStatusId.mandatory(TrvExpTrans_ProjStatusId.isVisible() && activeExpense.ProjId != '');
            TrvExpTrans_ProjStatusId_Grid.mandatory(TrvExpTrans_ProjStatusId_Grid.isVisible() && activeExpense.ProjId != '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility of fields used by AP Clerk, Post and subledger journal account entry buttons. Update the form caption.
    /// </summary>
    public void run()
    {
        boolean apClerkContext, canAddExpenseLines;
        boolean expenseDraftOrReturned;

        super();

        if (element.args())
        {
            caller = element.args().caller();
            if (caller != null)
            {
                if (caller is FormRun && caller.args() != null && caller.args().parmEnumType() != null && enumNum(TrvExpenseReportPageFilters) == caller.args().parmEnumType())
                {
                    callerFilter = caller.args().parmEnum();
                }

                if (TrvExpenseHelper::isCalledFromExpense(caller))
                {
                    if (TrvExpenseHelper::isCalledFromApClerkContext(caller))
                    {
                        PostExpenseReport.visible(true);
                        PostSelectedExpenseLine.visible(true);

                        // Set visible the fields used by AP clerk
                        APExpenseLineDetails.visible(true);
                        canReadAPDetails = true;

                        canEditReceipts = true;

                        // Enable post line button based on status
                        this.enablePostingActionsBasedOnApprovalStatus();

                        apClerkContext = true;
                    }
                    else
                    {
                        canEditReceipts = expenseReport.validateAddRemoveAttachments();
                    }
                }
                else
                {
                    // If the form is called from outside the expense module, do not show post button.
                    APExpenseLineDetails.visible(true);
                    canReadAPDetails = true;

                    // Approvers opening from outside expense should not be able to edit receipts.
                    canEditReceipts = false;
                }
            }
        }

        // Initialize the active expense table and datasources for trvExpTrans
        element.initActiveExpense(false);

        trvExpenseLinesVisibilityController.setHeaderVisibility();
        element.setVisibilityForPrintButtons(apClerkContext);
        element.setTextAndVisibilityForAttestation();
        element.setInterimFinalApproverFieldVisiblity();

        if (apClerkContext || TrvWorkflowUtilities::isCurUserExpenseApprover(expenseReport) || expenseReport.ApprovalStatus == TrvAppStatus::Create)
        {
            element.setVisibilityForBudgetButtons();
        }

        if (!isExpenseReportEditable)
        {
            // If expense report is not editable hide merchant and show the approval status in tile and card groups.
            MerchantId.visible(false);
            MerchantId_Tile.visible(false);
            ApprovalStatus.visible(true);
            ApprovalStatus_Tile.visible(true);

            if (element.args().menuItemName() != menuItemDisplayStr(TrvExpenseLines))
            {
                // Disable bulk edit if on an expense report that is not editable
                BulkEditExpenseLine.visible(false);
                BulkEditLines.visible(false);
                BulkEditLinesGridView.visible(false);
            }
        }

        canAddExpenseLines = !isItemizedLine && isExpenseReportEditable && expenseReport.ApprovalStatus != TrvAppStatus::Returned;
        // These lines suppress the system defined new and delete buttons.
        TrvExpTrans_DS.allowCreate(canAddExpenseLines);
        TrvExpTrans_DS.allowDelete(!isItemizedLine && canDeleteExpenseReport);
        TrvExpTrans_Split_DS.allowCreate(canAddExpenseLines);
        TrvExpTrans_Split_DS.allowDelete(!isItemizedLine && canDeleteExpenseReport);
        RemoveExpense.enabled(!isItemizedLine && canDeleteExpenseReport);
        RemoveExpenseGridView.enabled(!isItemizedLine && canDeleteExpenseReport);

        expenseDraftOrReturned = (activeExpense.ApprovalStatus == TrvAppStatus::Create || activeExpense.ApprovalStatus == TrvAppStatus::Returned);
        ItemizationNewButton.enabled(expenseDraftOrReturned);
        ItemizationDeleteButton.enabled(expenseDraftOrReturned);
        ItemizationCopyToNextDayButton.enabled(expenseDraftOrReturned);

        this.setFormCaption();

        // Adding unreconciled expenses or copying existing lines are special cases of adding new expense lines to the expense report and so
        // the those buttons should be visible only when the TrvExpTrans datasource allows it.
        CopyLine.visible(canAddExpenseLines);
        CopyLineGridView.visible(canAddExpenseLines);
        AddUnattachedExpenses.visible(canAddExpenseLines);

        this.setupEventHandlers();

        // Enable actions when accessed as collection of expense lines
        if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
        {
            UnattachedExpenseLineActions.visible(true);

            ExpenseGridStatusFilter.visible(true);
            ExpenseGridStatusFilter.selection(TrvExpensesFilter::Unattached);
            ExpenseGridStatusFilter.selectionChange();

            TrvExpTrans_DS.allowCreate(true);
            TrvExpTrans_DS.allowDelete(true);

            TrvExpTrans_Split_DS.allowCreate(true);
            TrvExpTrans_Split_DS.allowDelete(true);

            TrvExpTrans_ExpNumber.visible(true);
            TrvExpTrans_ExpNumber_Details.visible(true);

            SplitTrvExpTrans_ExpNumber_Details.visible(true);

            HeaderTabPage.visible(false);
            HeaderReceipts.visible(false);
            ExpenseActions.visible(false);
            PrintActionsGroup.visible(false);
            ExpenseReportSummary.visible(false);

            // Show the worker selection button only if the current user is a delegate
            ExpenseReportFor.visible(TrvAppEmplSub::existForCurrentUser());
        }

        // If opened to a specific expense on a report, position to that record.
        if (lookupExpenseRecId)
        {
            TrvExpTrans_ds.positionToRecordByValue(fieldNum(TrvExpTrans, RecId), int642Str(lookupExpenseRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextAndVisibilityForAttestation</Name>
				<Source><![CDATA[
    public void setTextAndVisibilityForAttestation()
    {
        if (trvParameters.UseAntiCorruption && TrvAccessHelper::isUserSubmitterOrDelegate(TrvExpTable))
        {
            str attestationMessage = TrvAntiCorruptionLanguageText::getAttestationMessage();

            if (attestationMessage)
            {
                SubmitterAttestation.visible(true);
                SubmitterAttestationText.text(attestationMessage);
            }
        }

        if (TrvExpTable.AntiCorruptionSubmitterFlag && TrvAccessHelper::isUserApprover(TrvExpTable))
        {
            str approverMessage = TrvAntiCorruptionLanguageText::getApproverMessage(TrvExpTable.ReferenceDataAreaId);

            if (approverMessage)
            {
                ApproverAttestation.visible(true);
                ApproverAttestationText.text(approverMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionControlVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility and editablity of the Expense report default dimensions.
    /// </summary>
    public void setDimensionControlVisibility()
    {
        FormDataObject formDataObject_Header = TrvExpTable_DS.object(fieldnum(TrvExpTable, DefaultDimension));

        TrvExpTable_DefaultDimension.visible(formDataObject_Header.visible());
        // Check allowEdit property on the data source instead of data field,
        // as it will be set to false when the expense report is not editable in visibility manager.
        TrvExpTable_DefaultDimension.allowEdit(TrvExpTable_DS.allowEdit() && formDataObject_Header.allowEdit());

        FormDataObject formDataObject_Line = activeExpenseDatasource.object(fieldnum(TrvExpTrans, DefaultDimension));

        // Check allowEdit property on the data source instead of data field,
        // as it will be set to false when the expense line is not editable in visibility manager.
        if (element.isSplitExpenseLine())
        {
            SplitTrvExpTrans_DefaultDimension.visible(formDataObject_Line.visible());
            SplitTrvExpTrans_DefaultDimension.allowEdit(activeExpenseDataSource.allowEdit() && formDataObject_Line.allowEdit());
        }
        else
        {
            TrvExpTrans_DefaultDimension.visible(formDataObject_Line.visible());
            TrvExpTrans_DefaultDimension.allowEdit(activeExpenseDataSource.allowEdit() && formDataObject_Line.allowEdit());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemizedLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form to show an itemized line.
    /// Set correct caption, disable option to create a new expense, receipt or unreconciled expense,
    /// hide the list of tiles and show always details view.
    /// Guest tab will be handle in setVisibilityForDetailsView method
    /// </summary>
    private void initItemizedLineDetails()
    {
        if (element.isSplitExpenseLine())
        {
            SplitExpenseLineReceiptTabPage.visible(false);
            SplitTrvExpTrans_SubCategory.visible(true);
            SplitTrvExpTrans_CostType.visible(false);

            TrvExpTrans_Split_DS.allowCreate(false);
            TrvExpTrans_Split_DS.allowDelete(false);
        }
        else
        {
            ExpenseLineReceiptTabPage.visible(FeatureStateProvider::isFeatureEnabled(TrvExpReceiptForItemizedLinesFeature::instance()));
            TrvExpTrans_SubCategory.visible(true);
            TrvExpTrans_CostType.visible(false);

            TrvExpTrans_DS.allowCreate(false);
            TrvExpTrans_DS.allowDelete(false);
        }

        ExpenseReportActions.visible(false);
        PostSelectedExpenseLine.visible(false);
        ExpenseLinesListGrid.visible(false);
        ExpensesGroupByComboBox.visible(false);
        element.design().workflowEnabled(false);
        element.switchToDetailsView();

        ViewModesGroup.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpenseLinesDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form to show the expense lines of a form.
    /// </summary>
    private void initExpenseLinesDetails()
    {
        str button = element.configurationHelper().getConfigurationValue(personalizedViewKey);

        switch (button)
        {
            case formControlStr(TrvExpenses, DetailsView):
                element.switchToDetailsView();
                break;

            case formControlStr(TrvExpenses, GridViewButton):
                element.switchToGridView();
                break;

            case formControlStr(TrvExpenses, GroupByCategoryView):
                element.switchToTileView(TrvExpenseGroupBy::Category);
                break;

            case formControlStr(TrvExpenses, GroupByDateView):
                element.switchToTileView(TrvExpenseGroupBy::Date);
                break;

            default:
                element.switchToGridView();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePostingActionsBasedOnApprovalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable post expense report and post lines button only if the status is approved or ready.
    /// </summary>
    private void enablePostingActionsBasedOnApprovalStatus()
    {
        PostExpenseReport.enabled(TrvExpTable.ApprovalStatus == TrvAppStatus::Approved || TrvExpTable.ApprovalStatus == TrvAppStatus::Ready);
        PostSelectedExpenseLine.enabled(activeExpense.ApprovalStatus == TrvAppStatus::Approved || activeExpense.ApprovalStatus == TrvAppStatus::Ready);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableActionsBasedOnSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable post expense lines button according with the status of the selected expense(s).
    /// </summary>
    private void enableActionsBasedOnSelection()
    {
        boolean enablePostLines = PostSelectedExpenseLine.isVisible();
        TrvExpTrans selectedExpenses = activeExpenseDataSource.getFirst(true);

        if (selectedExpenses == null)
        {
            selectedExpenses = activeExpenseDataSource.cursor();
        }

        // There is no need to iterate through all expenses if Post Lines button is not visible of if
        // at least one of the selected items will make post lines to be disabled.
        while (selectedExpenses && enablePostLines)
        {
            if ((selectedExpenses.ApprovalStatus != TrvAppStatus::Approved
                    && selectedExpenses.ApprovalStatus != TrvAppStatus::Ready)
                    || selectedExpenses.LineType == TrvExpLineType::ItemizedLine
                    || selectedExpenses.SplitLineType == TrvExpSplitLineType::SplitHeader)
            {
                enablePostLines = false;
            }

            selectedExpenses = activeExpenseDataSource.getNext();
        }

        PostSelectedExpenseLine.enabled(enablePostLines);

        BudgetCheckResults.enabled(BudgetSourceSourceDocumentLine::existBudgetSource(activeExpense.SourceDocumentLine));

        if (canReadAPDetails)
        {
            element.setVisibilityForAccountingActionButton(SubledgerJournalAccountEntry, true);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSplitRelatedButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable split functionality related buttons according with the status of the selected expense(s).
    /// </summary>
    private void enableSplitRelatedButtons()
    {
        boolean enableSplitButton = TrvExpTrans.isCreditCardTransaction() && TrvExpTrans.SplitLineType != TrvExpSplitLineType::SplitLine
                                    && TrvExpTrans.CreditCardTransactionCurrencyAmount != 0 && TrvExpTrans.isEditable(true, false);

        SplitExpenseButton.enabled(enableSplitButton);
        SplitExpenseButtonGridView.enabled(enableSplitButton);
        SplitUnattachedExpenseButton.enabled(enableSplitButton);

        if (TrvExpTrans.SplitLineType == TrvExpSplitLineType::SplitLine)
        {
            CopyLine.enabled(false);
            CopyLineGridView.enabled(false);
        }
        else
        {
            boolean isLineTypeItemized = (TrvExpTrans.LineType == TrvExpLineType::ItemizedLine);
            boolean canAddExpenseLines = !isLineTypeItemized && isExpenseReportEditable && expenseReport.ApprovalStatus != TrvAppStatus::Returned;

            CopyLine.enabled(canAddExpenseLines);
            CopyLineGridView.enabled(canAddExpenseLines);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableItemizedDetailsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable itemization details button only when there are itemized lines.
    /// </summary>
    /// <param name = "_splitRelatedExpense">
    /// True if expense line is a split line; otherwise false.
    /// </param>
    public void enableItemizedDetailsButton(boolean _splitRelatedExpense = false)
    {
        if (_splitRelatedExpense)
        {
            SplitItemizedLineDetails.enabled(TrvExpTrans_ItemizedLines_Split_DS.numberOfRowsLoaded() > 0);
        }
        else
        {
            ItemizedLineDetails.enabled(TrvExpTrans_ItemizedLines_DS.numberOfRowsLoaded() > 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAccountingActionButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility for an accounting action button, for example distribute amounts or subledger journal.
    /// </summary>
    /// <param name = "button">The button to set the visibility.</param>
    /// <param name = "_visible">True if distribute button should be visible; otherwise, false.</param>
    private void setVisibilityForAccountingActionButton(FormControl button, boolean _visible)
    {
        // Always set the button visible if it's applicable, enable it when distribution enabled and source document line created.
        // Hide the Accounting Distribution button and show the view only distribution button for the posted expense line.
        if (button.equal(TrvAccountingDistExpenseReport) &&
            TrvExpenseHelper::isTrvDistributionReadOnlyForPostedExpFlightEnabled())
        {
            AccountingDistributionsView.visible(
                _visible &&
                activeExpense.isDistributionsEnabled()
                && !TrvExpTrans_ds.allowEdit());

            button.visible(_visible && !AccountingDistributionsView.visible());
        }
        else
        {
            button.visible(_visible);
        }
        
        button.enabled(activeExpense.isDistributionsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the form is not showing the details of an itemized line, set the caption of the form dynamically to inform the user which expense report he is looking at.
    /// Shows the expense report number and, if not empty, its purpose.
    /// </summary>
    private void setFormCaption()
    {
        if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
        {
            element.design().caption(strFmt("@Expense:ExpensesForWorker", HcmWorker::find(creatingWorkerRecId).name()));
        }
        else
        {
            element.design().caption(TrvExpenseTransHelper::generateExpenseReportCaption(TrvExpTable, isItemizedLine, HcmWorker::find(creatingWorkerRecId).name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterimFinalApproverFieldVisiblity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the interim and final approver fields and buttons
    /// </summary>
    private void setInterimFinalApproverFieldVisiblity()
    {
        // No need to set visibility when we don't have a valid expense report
        if (TrvExpTable.RecId == 0)
        {
            return;
        }

        SelectInterimApprovers.visible(TrvExpTable.isEditable());
        SetAsDefaultFinalApprover.visible(TrvExpTable.isEditable());

        switch (trvParameters.ApproverHierarchyDisplay)
        {
            case TrvApproverHierarchyFields::FinalApproverOnly:
                FinalApproverGroup.visible(true);
                break;

            case TrvApproverHierarchyFields::InterimAndFinalApprover:
                InterimApproverGroup.visible(true);
                FinalApproverGroup.visible(true);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the data for <c>TrvExpTrans</c> and enhanced data records cleared by the visibility code for the form.
    /// </summary>
    private void restoreData()
    {
        TrvExpTrans                 origTrvExpTrans;

        origTrvExpTrans = activeExpense.orig();
        activeExpense.data(origTrvExpTrans);
        activeExpenseDataSource.setCurrent();

        switch (origTrvExpTrans.ExpType)
        {
            case TrvExpType::Airline:
                if (element.isSplitExpenseLine())
                {
                    trvEnhancedItineraryData_Split.data(trvEnhancedItineraryData_Split.orig());
                    trvEnhancedTripLegDetail_Split.data(trvEnhancedTripLegDetail_Split.orig());
                    TrvEnhancedItineraryData_Split_DS.setCurrent();
                    TrvEnhancedTripLegDetail_Split_DS.setCurrent();
                }
                else
                {
                    trvEnhancedItineraryData.data(trvEnhancedItineraryData.orig());
                    trvEnhancedTripLegDetail.data(trvEnhancedTripLegDetail.orig());
                    TrvEnhancedItineraryData_DS.setCurrent();
                    TrvEnhancedTripLegDetail_DS.setCurrent();
                }
                break;
            case TrvExpType::CarRental:
                if (element.isSplitExpenseLine())
                {
                    trvEnhancedCarRentalData_Split.data(trvEnhancedCarRentalData_Split.orig());
                    TrvEnhancedCarRentalData_Split_DS.setCurrent();
                }
                else
                {
                    trvEnhancedCarRentalData.data(trvEnhancedCarRentalData.orig());
                    TrvEnhancedCarRentalData_DS.setCurrent();
                }
                break;
            case TrvExpType::Hotel:
                if (element.isSplitExpenseLine())
                {
                    trvEnhancedHotelData_Split.data(trvEnhancedHotelData_Split.orig());
                    TrvEnhancedHotelData_Split_DS.setCurrent();
                }
                else
                {
                    trvEnhancedHotelData.data(trvEnhancedHotelData.orig());
                    TrvEnhancedHotelData_DS.setCurrent();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmCategoryChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms that the user wants to change the category type, as the process will clear much
    /// of the existing data.
    /// </summary>
    /// <param name = "newCategory">The category being changed to.</param>
    /// <returns>If the category change should continue.</returns>
    private boolean confirmCategoryChange(TrvCostType newCategory)
    {
        boolean confirmation;

        if (!activeExpense.validateCostType(newCategory.CostType))
        {
            return false;
        }

        // Cannot change to an import only category -
        // Form level validation because other forms and entry points can change to
        // an import only category
        if (newCategory.isImportOnly)
        {
            return checkFailed("@Expense:CannotSelectImportOnlyCategoryForExpenseLine");
        }

        if (newCategory && activeExpense.RecId)
        {
            // If the expense category has changed, and this is not a new expense, prompt the user for confirmation.
            confirmation = (DialogButton::Yes == Box::yesNoOnce(formStr(TrvExpenses), "@Expense:ExpenseTypeChangeConfirmation", DialogButton::No, "@Expense:ConfirmCategoryChange"));

            // Return false, so that the change in category is stopped.
            if (!confirmation)
            {
                return false;
            }

            // When super is called it clears or modifies fields on the TrvExpTrans record but the changes are uncommitted,
            // delete of itemized lines updates the record and commits the changes creating update conflicts on the form.
            //
            // To avoid this clean up personal and itemized lines before super call and reread the datasource.
            // If we delete the itemized lines we reread the TrvExpTrans datasource, with it we lose the context of the changed category,
            // So set the value again for the cost type before the super call.
            activeExpense.itemizedLinesDeleted += eventhandler(this.refreshItemizedLinesDatasource);
            activeExpense.changeCategoryPreModified(newCategory);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshItemizedLinesDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes itemized lines and re-applies category change
    /// </summary>
    protected void refreshItemizedLinesDatasource(TrvCostType newCategory)
    {
        activeExpenseDataSource.reread();
        activeItemizedExpenseDataSource.research();

        // personal functionality is related to credit card transactions
        if (isActiveExpenseCreditTrans)
        {
            TrvExpTransPersonal_DS.research();
        }

        activeExpenseDataSource.object(fieldnum(TrvExpTrans, CostType)).setValue(newCategory.CostType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGuestsDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes guests datasource
    /// </summary>
    public void refreshGuestsDatasource()
    {
        if (SplitExpenseLineDetailsBodyGroup.visible())
        {
            TrvExpTransGuest_Split_ds.research();
        }
        else
        {
            TrvExpTransGuest_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefreshFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes form datasource.
    /// </summary>
    /// <param name = "_formDataSource">Form data source to refreshed.</param>
    protected void doRefreshFormDataSource(FormDataSource _formDataSource)
    {
        _formDataSource.reread();
        _formDataSource.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up old records for the previous category
    /// </summary>
    /// <param name = "previousExpenseType">The previous expense type.</param>
    /// <param name = "newExpenseType">The new expense type.</param>
    private void categoryChanged(TrvExpType previousExpenseType, TrvExpType newExpenseType)
    {
        //Ensure we don't show subcategories of the previous expense category.
        itemizedHeaderRecID = 0;

        activeExpense.guestsDeleted += eventhandler(this.refreshGuestsDatasource);
        activeExpense.changeCategoryPostModified(previousExpenseType, newExpenseType);

        // reread() will update the current buffers with values retrieved from DB.
        // refresh() will push the new buffer data into the form controls.
        switch (previousExpenseType)
        {
            case TrvExpType::Airline:
                if (SplitExpenseLineDetailsBodyGroup.visible())
                {
                    TrvEnhancedItineraryData_Split_DS.reread();
                    TrvEnhancedItineraryData_Split_DS.refresh();

                    TrvEnhancedTripLegDetail_Split_DS.reread();
                    TrvEnhancedTripLegDetail_Split_DS.refresh();
                }
                else
                {
                    TrvEnhancedItineraryData_DS.reread();
                    TrvEnhancedItineraryData_DS.refresh();

                    TrvEnhancedTripLegDetail_DS.reread();
                    TrvEnhancedTripLegDetail_DS.refresh();
                }
                break;

            case TrvExpType::CarRental:
                if (SplitExpenseLineDetailsBodyGroup.visible())
                {
                    TrvEnhancedCarRentalData_Split_DS.reread();
                    TrvEnhancedCarRentalData_Split_DS.refresh();
                }
                else
                {
                    TrvEnhancedCarRentalData_DS.reread();
                    TrvEnhancedCarRentalData_DS.refresh();
                }
                break;

            case TrvExpType::Hotel:
                if (SplitExpenseLineDetailsBodyGroup.visible())
                {
                    TrvEnhancedHotelData_Split_DS.reread();
                    TrvEnhancedHotelData_Split_DS.refresh();
                }
                else
                {
                    TrvEnhancedHotelData_DS.reread();
                    TrvEnhancedHotelData_DS.refresh();
                }
                break;
        }

        // Re-read to get changed information such as project information
        activeExpenseDataSource.refresh();

        // Update controls with changed information
        AuthorizedAmount.realValue(TrvRequisitionLine::find(trvExpTrans.MappedToRequisitionLine).amountToBeReconciled());

        // Update travel requisition with changed information.
        if (element.isSplitExpenseLine())
        {
            SplitAuthorizedAmount.realValue(TrvRequisitionLine::find(TrvExpTrans_Split.MappedToRequisitionLine).amountToBeReconciled());
        }
        else
        {
            AuthorizedAmount.realValue(TrvRequisitionLine::find(TrvExpTrans.MappedToRequisitionLine).amountToBeReconciled());
        }

        // Switch to details view for per diem & mileage
        if (newExpenseType == TrvExpType::Allowance || newExpenseType == TrvExpType::Transport)
        {
            element.switchToDetailsView();
        }

        // Set visibility on the form.
        element.updateFormVisibilityOnCategoryChange(previousExpenseType != activeExpense.ExpType);

        // After modifying the cost type, the project ID field may be changed too.
        // Ensure that the intercompany category field stays in the correct state.
        element.setVisibilityForInterCompanyCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormVisibilityOnCategoryChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the visibility when cost type is modified.
    /// </summary>
    /// <param name="expenseTypeChanged">True if the new category has an expense type different than the previous category.</param>
    [Wrappable(true)]
    protected final void updateFormVisibilityOnCategoryChange(boolean expenseTypeChanged)
    {
        element.setVisibilityForView();

        element.setFieldsAsMandatory();
        element.setVisibilityWhenExchCodeChanged();
        element.setVisibilityForTaxCorrections();
        // If the expense type is not the same ensure we show the correct things for the new expense type.
        if (expenseTypeChanged)
        {
            if (element.isSplitExpenseLine())
            {
                SplitExpenseLineGuestTabPage.visible(activeExpense.isGuestType());
            }
            else
            {
                ExpenseLineGuestTabPage.visible(activeExpense.isGuestType());
            }

            element.updateItemizationControls();

            if (isPerdiemEnabled)
            {
                element.setVisibilityForPerdiemPerDayDeductions();
            }

            activeExpenseDataSource.cacheCalculateMethod(tablemethodstr(TrvExpTrans, showExpenseTypeIcon));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemizationControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the itemization tab controls based on expense line.
    /// </summary>
    [Wrappable(true)]
    protected final void updateItemizationControls()
    {
        boolean isItemizable = activeExpense.isItemizable();

        if (element.isSplitExpenseLine())
        {
            SplitExpenseLineItemizeTabPage.visible(isItemizable);
        }
        else
        {
            ExpenseLineItemizeTabPage.visible(isItemizable);
        }

        ItemizeButton.enabled(isItemizable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMergeControls</Name>
				<Source><![CDATA[
    private void updateMergeControls()
    {
        // Can only merge expenses that are unsubmitted and not split
        boolean canMerge = activeExpense.ApprovalStatus == TrvAppStatus::Create
            && activeExpense.SplitLineType == TrvExpSplitLIneType::NoSplit;

        MergeExpenseLine.enabled(canMerge);
        MergeExpense.enabled(canMerge);
        MergeExpenseGridView.enabled(canMerge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPersonalApplicable</Name>
				<Source><![CDATA[
    // determine if personal amount is applicable for the selected expense transaction.
    // There must be at least one personal category, the transaction must be a credit card transaction,
    // and the transaction must not be a split line.
    private boolean isPersonalApplicable()
    {
        return (isActiveExpenseCreditTrans && !element.isSplitExpenseLine() && personalCategoryCount > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePersonalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for personal amount controls. Insert empty DS record if a personal line doesn't exist.
    /// TrvExpTransPersonal_DS is defined as passive, therefore must be manually managed.
    /// </summary>
    [Wrappable(true)]
    protected final void initializePersonalAmount()
    {
        // If personal applies to the selected line allow entry of the personal amount
        if (element.isPersonalApplicable())
        {
            boolean isHeaderCreditCardTrans = (activeExpense.LineType != TrvExpLineType::ItemizedLine && activeExpense.ExpType != TrvExpType::Personal);
            boolean isHeaderCreditCardLocalCurrency = (activeExpense.LineType != TrvExpLineType::ItemizedLine && activeExpense.isCreditCardTransanctionInLocalCurrency());

            TrvExpTransPersonal_DS.executeQuery();

            // If cc expense doesn't have a personal line yet, create an empty record to insert, if the line is editable.
            if (isHeaderCreditCardTrans && TrvExpTransPersonal.RecId == 0 && trvExpTrans.isEditable())
            {
                TrvExpTransPersonal_DS.create();

            }

            // Personal expense cateogry will only be visible for selection if there are more than one personal category.
            TrvExpTransPersonal_CostType.visible(isHeaderCreditCardTrans && personalCategoryCount > 1);
            TrvExpTransPersonal_CostType.enabled((trvExpTransPersonal.AmountCurr != 0 || trvExpTransPersonal.CreditCardTransactionCurrencyAmount != 0));

            // Show the right amount according to whether there is local currency.
            TrvExpTransPersonal_CreditCardTransactionCurrencyAmount.visible(isHeaderCreditCardLocalCurrency);
            TrvExpTransPersonal_CreditCardTransactionCurrencyAmount_CurrencyCode.visible(isHeaderCreditCardLocalCurrency);
            TrvExpTransPersonal_AmountCurr.visible(isHeaderCreditCardTrans && !isHeaderCreditCardLocalCurrency);
            TrvExpTransPersonal_AmountCurr_CurrencyCode.visible(isHeaderCreditCardTrans && !isHeaderCreditCardLocalCurrency);

            // If a remaining expense line exists for personal, hide the itemization tab.
            if (trvExpTrans.isRemainingAmountLineForPersonalExisting())
            {
                ExpenseLineItemizeTabPage.visible(false);
                ItemizeButton.enabled(false);
            }
            else
            {
                element.updateItemizationControls();
                ItemizeButton.enabled(ExpenseLineItemizeTabPage.visible());
            }
        }
        else
        {
            // no personal entry allowed for active expense
            TrvExpTransPersonal_CreditCardTransactionCurrencyAmount.visible(false);
            TrvExpTransPersonal_CreditCardTransactionCurrencyAmount_CurrencyCode.visible(false);
            TrvExpTransPersonal_AmountCurr.visible(false);
            TrvExpTransPersonal_AmountCurr_CurrencyCode.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tilesViewClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Common actions to be taken when switching to tiles view from the appbar.
    /// </summary>
    private void tilesViewClicked()
    {
        if (!ExpenseTiles.visible())
        {
            // Before switching, make sure the active expense is saved and mode changes to view mode,
            // as it doesn't make sense to be in edit mode in this view.
            if (element.inViewMode() || element.task(#taskDoneEditRecord))
            {
                // Switch views.
                ExpenseDetails.visible(false);
                ExpenseTiles.visible(true);
                GridView.visible(false);

                AccountingDistributionsDocumentView.visible(true);
                element.setVisibilityForAccountingActionButton(TrvAccountingDistExpenseReport, false);
                TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForDistributionsButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for distributions buttons based on the caller.
    /// Show View distributions & hide Distribute amounts if the form is called from my expense reports.
    /// </summary>
    private void setVisibilityForDistributionsButtons()
    {
        if (TrvExpenseHelper::isCalledFromMyExpenseReportsContextAfterSubmit(caller, expenseReport))
        {
            AccountingDistributionsDocumentView.visible(true);
            element.setVisibilityForAccountingActionButton(TrvAccountingDistExpenseReport, false);
        }
        else
        {
            AccountingDistributionsDocumentView.visible(false);
            element.setVisibilityForAccountingActionButton(TrvAccountingDistExpenseReport, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForBudgetButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visibility for budget related buttons.
    /// </summary>
    private void setVisibilityForBudgetButtons()
    {
        if (expenseReport.ApprovalStatus != TrvAppStatus::Create)
        {
            boolean isBudgetControlEnabled = TrvBudgetCheckHelper::isBudgetControlEnabled(BudgetControlSourceIntegrator::ExpenseReport);
            boolean isProjBudgetEnabled = TrvBudgetCheckHelper::isProjectBudgetControlEnabled(expenseReport.SourceDocumentHeader);

            TrvExpTransCheckBudget.visible(isBudgetControlEnabled || isProjBudgetEnabled);
            BudgetCheckResults.visible(isBudgetControlEnabled);
        }
        else
        {
            boolean isBudgetControlCheckOnEntryEnabled = TrvBudgetCheckHelper::isBudgetControlCheckOnEntryEnabled(BudgetControlSourceIntegrator::ExpenseReport);

            TrvExpTransCheckBudget.visible(isBudgetControlCheckOnEntryEnabled);
            BudgetCheckResults.visible(isBudgetControlCheckOnEntryEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reEvaluateExpensePolicies</Name>
				<Source><![CDATA[
    private void reEvaluateExpensePolicies(container _params)
    {
        RefRecId updatedTrvExpTransRecId = conpeek(_params, 1);
        boolean anyPreviousDayOrReportViolation = conpeek(_params, 2);

        // If there were any previous report-level or day-level project policy violations on this report,
        // or now after the update, then other expenses might have updated statuses too, so we need to research.
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave &&
                (anyPreviousDayOrReportViolation || trvExpTable.anyDayOrReportProjectPolicyViolations()))
        {
            TrvExpTrans_DS.research(true);
            TrvExpTrans_Split_DS.research(true);
        }
        else
        {
            // If the current DS record is the same as the one updated by the async call, then reread the contents now
            // and flag any new policy errors evaluated in the async call.
            if (activeExpense.RecId == updatedTrvExpTransRecId)
            {
                if (element.isSplitExpenseLine())
                {
                    TrvExpTrans_Split_DS.reread();
                    TrvExpTrans_Split_DS.refresh();
                }
                else
                {
                    TrvExpTrans_DS.reread();
                    TrvExpTrans_DS.refresh();
                }
                element.showExpensePolicyViolations();
            }
            else
            {
                // Current record is not the one updated by the async call. Remember the record so that it can reread
                // later when selected.
                indicatorIconObservable.markChanged();
                expenseRecIdsToRefresh.add(updatedTrvExpTransRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the async process to handle source document and policies for default/itemized header expense lines.
    /// </summary>
    public void doAsyncAction(RefRecId _trvExpTransRecId)
    {
        boolean anyPreviousDayOrReportViolation = false;

        // If there were any report-level or day-level project policy violations on this report,
        // then other expenses might have updated statuses after this write operation.
        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            anyPreviousDayOrReportViolation = trvExpTable.anyDayOrReportProjectPolicyViolations();
        }

        if(TrvExpenseHelper::isSyncCallToSourceDocumentFlightEnabled())
        {
            TrvExpTrans::handleSourceDocumentAndPolicies(_trvExpTransRecId, true);
            this.reEvaluateExpensePolicies([_trvExpTransRecId, anyPreviousDayOrReportViolation]);

            // Show distribute amount now if needed.
            if (!ExpenseTiles.visible() && (!ExpenseLineItemizeTabPage.isActivePage() || !SplitExpenseLineItemizeTabPage.isActivePage()))
            {
                element.setVisibilityForDistributionsButtons();
            }
        }
        else
        {
            element.startAsyncAction();

            // Handle the skipped actions now, asynchronously.
            System.Threading.Tasks.Task task = element.runAsync(classnum(TrvExpenseTransHelper),
                                                    "handleSourceDocumentAndPoliciesAsync",
                                                    [_trvExpTransRecId, true],
                                                    System.Threading.CancellationToken::None,
                                                    "asyncActionCallback",
                                                    [_trvExpTransRecId, anyPreviousDayOrReportViolation]);

            TrvExpenseAsyncHelper::addTaskToAsyncMap(expenseAsyncTaskMap, _trvExpTransRecId, task);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>asyncActionCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback that handles the return task result from post-write async operations on the TrvExpTrans datasource.
    /// This will be called when the async insert or update is done.
    /// </summary>
    public void asyncActionCallback(AsyncTaskResult taskResult)
    {
        ExpenseInstrumentationSubmitActivities asyncActionCallbackActivity = ExpenseInstrumentationSubmitActivities::construct(logger);
        using (var context = asyncActionCallbackActivity.expenseSavedContext())
        {
            container asyncState = taskResult.getAsyncState();
            RefRecId updatedTrvExpTransRecId = conpeek(asyncState, 1);
            boolean anyPreviousDayOrReportViolation = conpeek(asyncState, 2);

            System.Exception exception = taskResult.getException();
            boolean asyncTaskSuccess = (exception == null);

            TrvExpenseAsyncHelper::removeCompletedTasksFromAsyncMap(expenseAsyncTaskMap, updatedTrvExpTransRecId);

            if (asyncTaskSuccess)
            {
                this.reEvaluateExpensePolicies(asyncState);
            }
            else
            {
                // Async task failed.

                logger.logInformation(strFmt(
                            'asyncActionCallback method received error from TrvExpTrans.handleSourceDocumentAndPoliciesAsync for RecId: %1',
                            updatedTrvExpTransRecId));
                // Update the icon so that the source doc error is flagged on the card.
                indicatorIconObservable.markChanged();
            }

            element.endAsyncAction();

            // Show distribute amount now if needed.
            if (!ExpenseTiles.visible() && (!ExpenseLineItemizeTabPage.isActivePage() || !SplitExpenseLineItemizeTabPage.isActivePage()))
            {
                element.setVisibilityForDistributionsButtons();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAntiCorruptionMismatchError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows any appropriate anti-corruption error messages.
    /// </summary>
    private void showAntiCorruptionMismatchError()
    {
        if (TrvExpTable.RecId && trvParameters.UseAntiCorruption)
        {
            TrvExpTable.validateAntiCorruption();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the visibility of workflow buttons for the given expense.
    /// </summary>
    private void setWorkflowButtons()
    {
        SubmitButton.visible(false);
        ApproveButton.visible(false);
        RejectButton.visible(false);
        RecallButton.visible(false);
        ResubmitButton.visible(false);

        // Disabled the workflow buttons if more than one expense is selected
        WorkflowButtonGroup.enabled(!activeExpenseDataSource.getNext().RecId);

        FormMenuButtonControl standardWorkflowButtons = element.design().controlName('WorkflowActionBarButtonGroup');

        for (int i = 1; i <= standardWorkflowButtons.controlCount(); i++)
        {
            FormFunctionButtonControl button = standardWorkflowButtons.controlNum(i);

            if (button.enabled())
            {
                if (!isExpenseReportEditable && button.menuItemName() == menuItemActionStr(TrvSubmit))
                {
                    // Disable submit button when expense report is not editable
                    button.visible(false);
                }
                else
                {
                    element.initializeWorkflowButton(button);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkflowButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the single click workflow button for the corresponding workflow button
    /// </summary>
    /// <param name = "_control">Workflow button from the workflow menu</param>
    private void initializeWorkflowButton(FormFunctionButtonControl _control)
    {
        FormFunctionButtonControl workflowButton;
        switch (_control.menuItemName())
        {
            case menuItemActionStr(TrvSubmit):
                workflowButton = SubmitButton;
                break;

            case menuItemActionStr(TrvApprove):
                workflowButton = ApproveButton;
                break;

            case menuItemActionStr(TrvReject):
                workflowButton = RejectButton;
                break;

            case menuItemActionStr(TrvLineItemRecall):
            case menuItemActionStr(TrvCancel):
                workflowButton = RecallButton;
                workflowButton.menuItemName(_control.menuItemName());
                break;

            case menuItemActionStr(TrvResubmit):
                workflowButton = ResubmitButton;
                break;

            default:
                return;
        }

        workflowButton.dataSource(_control.dataSource());
        workflowButton.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemizedExpenseTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Itemization total amount calculation for calendar control.
    /// </summary>
    /// <param name = "_result">
    /// Total amount in an event handler result.
    /// </param>
    public void getItemizedExpenseTotal(EventHandlerResult _result)
    {
        boolean  isSplitLine = element.isSplitExpenseLine();
        TrvExpTrans itemizedHeader = isSplitLine ? TrvExpTrans_Split : TrvExpTrans;

        if (itemizedHeader.RecId && itemizedHeader.isItemizable())
        {
            _result.result(TrvExpenseHelper::amountCur2Str(itemizedHeader.transactionAmount()));
        }
        else
        {
            _result.result(TrvExpenseHelper::amountCur2Str(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseItemizationTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets expense itemization total in event handler result.
    /// </summary>
    /// <param name = "_result">
    /// Total amount in an event handler result.
    /// </param>
    public void getExpenseItemizationTotal(EventHandlerResult _result)
    {
        _result.result(TrvExpenseHelper::amountCur2Str(element.getExpenseItemizationTotalAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseItemizationTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets expense itemizated total amount.
    /// </summary>
    /// <returns>
    /// Total itemized amount.
    /// </returns>
    private TrvTransactionCurrencyAmount getExpenseItemizationTotalAmount()
    {
        TrvExpTrans     itemizedNotToday;
        boolean         isSplitLine = element.isSplitExpenseLine();
        TrvTransactionCurrencyAmount itemizationSumNotToday;

        TrvExpTrans itemizedLine = isSplitLine ? TrvExpTrans_ItemizedLines_Split : TrvExpTrans_ItemizedLines;
        TrvExpTrans itemizedHeader = isSplitLine ? TrvExpTrans_Split : TrvExpTrans;

        if (!itemizedHeader.isItemizable() || !itemizedHeader.RecId)
        {
            return 0;
        }

        if (isSplitLine || itemizedHeader.isCreditCardTransanctionInLocalCurrency())
        {
            select sum(CreditCardTransactionCurrencyAmount) from itemizedNotToday
                where itemizedNotToday.TransDate != itemizedLine.TransDate
                    && itemizedNotToday.ParentRecId == itemizedHeader.RecId;

            itemizationSumNotToday = itemizedNotToday.CreditCardTransactionCurrencyAmount;
        }
        else
        {
            select sum(AmountCurr) from itemizedNotToday
                where itemizedNotToday.TransDate != itemizedLine.TransDate
                    && itemizedNotToday.ParentRecId == itemizedHeader.RecId;

            itemizationSumNotToday = itemizedNotToday.AmountCurr;
        }

        return element.getItemizationTotal(itemizedLine.TransDate) + itemizationSumNotToday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingExpenseTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining amount for itemization.
    /// </summary>
    /// <param name = "_result">
    /// Remaining amount in an event handler result.
    /// </param>
    public void getRemainingExpenseTotal(EventHandlerResult _result)
    {
        boolean isSplitExpense = element.isSplitExpenseLine();

        TrvExpTrans itemizedHeader = isSplitExpense ? TrvExpTrans_Split : TrvExpTrans;
        FormDataSource itemizationDataSource = isSplitExpense ? TrvExpTrans_ItemizedLines_Split_ds : TrvExpTrans_ItemizedLines_ds;

        if (itemizedHeader.RecId && itemizedHeader.LineType != TrvExpLineType::ItemizedLine)
        {
            TrvTransactionCurrencyAmount total = itemizedHeader.transactionAmount();
            TrvTransactionCurrencyAmount personalAmount = isActiveExpenseCreditTrans ? trvExpTransPersonal.transactionAmount() : 0;
            TrvTransactionCurrencyAmount itemized = 0;
            TrvTransactionCurrencyAmount itemizationRemainingAmount;

            if (itemizedHeader.LineType == TrvExpLineType::ItemizedHeader || itemizationDataSource.numberOfRowsLoaded() > 0)
            {
                itemized = element.getExpenseItemizationTotalAmount();
            }

            itemizationRemainingAmount = total - itemized - personalAmount;
            if ((itemizationRemainingAmount == 0) || (total > 0 && itemizationRemainingAmount < 0) || (total < 0 && itemizationRemainingAmount > 0))
            {
                isItemizationCompleted = false;
            }
            else
            {
                isItemizationCompleted = true;
            }
            _result.result(TrvExpenseHelper::amountCur2Str(itemizationRemainingAmount));
        }
        else
        {
            _result.result(TrvExpenseHelper::amountCur2Str(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDayItemizationTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total itemized amount for the selected date.
    /// </summary>
    /// <param name = "_date">
    /// Selected itemization date.
    /// </param>
    /// <param name = "_result">
    /// Total amount for the selected date in an event handler result.
    /// </param>
    public void getDayItemizationTotal(date _date, EventHandlerResult _result)
    {
        TrvTransactionCurrencyAmount total = element.getItemizationTotal(_date);

        if (total)
        {
            _result.result(TrvExpenseHelper::amountCur2Str(total));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated <c>smmActivities</c> record for the <c>smmActivitiesPreviewPart</c> form.
    /// </summary>
    /// <returns>An associated <c>smmActivities</c> record if it exists; otherwise, an empty record.</returns>
    public smmActivities getActivity()
    {
        return TrvExpTrans.getProjActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemizationTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Itemization total for a particular date.
    /// </summary>
    /// <param name = "_date">
    /// Selected date.
    /// </param>
    /// <returns>
    /// Total itemized amount for a particular date.
    /// </returns>
    private TrvTransactionCurrencyAmount getItemizationTotal(date _date)
    {
        boolean             isSplitLine = element.isSplitExpenseLine();
        TrvExpTrans         expTrans;

        if (isSplitLine)
        {
            expTrans = TrvExpTrans_ItemizedLines_Split_ds.getFirst();
        }
        else
        {
            expTrans = TrvExpTrans_ItemizedLines_ds.getFirst();
        }

        TrvTransactionCurrencyAmount total = 0;
        int unsavedRecords = 0;

        while (expTrans || unsavedRecords == 0)
        {
            if (isSplitLine || expTrans.isCreditCardTransanctionInLocalCurrency())
            {
                total += expTrans.CreditCardTransactionCurrencyAmount;
            }
            else
            {
                total += expTrans.AmountCurr;
            }

            if (!expTrans)
            {
                unsavedRecords++;
            }

            if (isSplitLine)
            {
                expTrans = TrvExpTrans_ItemizedLines_Split_ds.getNext();
            }
            else
            {
                expTrans = TrvExpTrans_ItemizedLines_ds.getNext();
            }
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemizationErrorCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the itemization status.
    /// </summary>
    public void itemizationErrorCheck()
    {
        Amount                          itemizedAmount = TrvExpTrans::itemizedAmount(activeExpense.RecId);
        TrvTransactionCurrencyAmount    personalAmount = isActiveExpenseCreditTrans ? trvExpTransPersonal.transactionAmount() : 0;
        TrvTransactionCurrencyAmount    totalCost      = activeExpense.transactionAmount();
        TrvTransactionCurrencyAmount    remaining      = totalCost - itemizedAmount - personalAmount;

        if ((itemizedAmount != 0 && remaining == 0) || itemizedHeaderErrorRecId != activeExpense.RecId)
        {
            element.showItemizationError();
            indicatorIconObservable.markChanged(TrvExpTrans.RecId);
            itemizedHeaderErrorRecId = activeExpense.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAsyncItemizeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the async process to handle source document and policies for itemized lines.
    /// </summary>
    /// <param name = "_trvExpTransItemizedLineRecId">The <c>RecId</c> of the itemized line to start the async process.</param>
    public void doAsyncItemizeAction(RefRecId _trvExpTransItemizedLineRecId)
    {
        element.startAsyncAction();

        // Handle the skipped actions now, asynchronously.
        System.Threading.Tasks.Task task = element.runAsync(classnum(TrvExpenseTransHelper),
                                            "handleSourceDocumentAndPoliciesAsync",
                                            [_trvExpTransItemizedLineRecId, true],
                                            System.Threading.CancellationToken::None,
                                            "asyncItemizeActionCallback",
                                            [_trvExpTransItemizedLineRecId]);

        TrvExpenseAsyncHelper::addTaskToAsyncMap(expenseAsyncTaskMap, _trvExpTransItemizedLineRecId, task);
    }

]]></Source>
			</Method>
			<Method>
				<Name>asyncItemizeActionCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback that handles the return task result from post-write async operation on itemized lines.
    /// This will be called when the async insert or update is done.
    /// </summary>
    /// <param name = "taskResult">The async task result.</param>
    public void asyncItemizeActionCallback(AsyncTaskResult taskResult)
    {
        container asyncState = taskResult.getAsyncState();
        RefRecId updatedTrvExpTransItemizedLineRecId = conpeek(asyncState, 1);

        System.Exception exception = taskResult.getException();
        boolean asyncTaskSuccess = (exception == null);

        TrvExpenseAsyncHelper::removeCompletedTasksFromAsyncMap(expenseAsyncTaskMap, updatedTrvExpTransItemizedLineRecId);

        if (asyncTaskSuccess)
        {
            // If the current DS record is the same as the one updated by the async call, then reread the contents now
            // and flag any new policy errors evaluated in the async call.
            if (activeItemizedExpense.RecId == updatedTrvExpTransItemizedLineRecId)
            {
                activeItemizedExpenseDataSource.reread();
                activeItemizedExpenseDataSource.refresh();
                element.showExpensePolicyViolations();
                element.showExpensePolicyViolations(activeItemizedExpense);
            }
            else
            {
                // Current record is not the one updated by the async call. Remember the record so that it can reread
                // later when selected.
                indicatorIconObservable.markChanged();
                expenseRecIdsToRefresh.add(updatedTrvExpTransItemizedLineRecId);
            }
        }
        else
        {
            // Update the icon so that the source doc error is flagged on the card.
            indicatorIconObservable.markChanged();

            // Async task failed.
        }

        element.endAsyncAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes async-related actions necessary after triggering a new async operation.
    /// Start the timer control to ping for updates.
    /// </summary>
    private void startAsyncAction()
    {
        TimerControl.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endAsyncAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes async-related actions necessary after completing an async operation.
    /// If no expenses are being updated, stop the timer control.
    /// </summary>
    private void endAsyncAction()
    {
        if (!expenseAsyncTaskMap.elements())
        {
            TimerControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAllAsyncTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Waits for all the async writes on all the expenses to return.
    /// Returns immediately if there is none.
    /// </summary>
    public void waitForAllAsyncTasks()
    {
        TrvExpenseAsyncHelper::waitForAllAsyncTasksForAllExpenses(expenseAsyncTaskMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPerDiemVariablesForPerdiemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the perdiem variables used by the perdiem data lines tab.
    /// </summary>
    private void resetPerDiemVariablesForPerdiemLines()
    {
        // reset only if per diem tab page would be visible.
        if (isPerDiemEnabled && isMealBreakdownPerDay)
        {
            TrvExpPerdiemData_DS.executeQuery();

            // Reset the perdiemExpenseRecId variable to re fetch perdiem lines.
            perdiemExpenseRecId = 0;
            trvPerDiems = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForPerdiemPerDayDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility when the meal reduction type is per day.
    /// </summary>
    private void setVisibilityForPerdiemPerDayDeductions()
    {
        FormDataObject formDataObject;

        // For a perdiem expense type, if the setup allows meal entry per day and no worker perdeim rate is setup,
        // we set visibilities for the perdiem tab and relevant fields, else we hide the perdiem tab.
        if (isPerdiemEnabled && TrvExpTrans.ExpType == TrvExpType::Allowance && isMealBreakdownPerDay && TrvPartyEmployeeRelationship::find(creatingWorkerRecId).PerDiem == 0.0)
        {
            ExpenseLinePerdiemTabPage.visible(true);

            // Get the visibility set on the admin custom fields for the breakfast, lunch and dinner fields and applies
            // it to the per diem data lines grid. Also sets the breakfast, lunch and dinner fields on details to be read only.
            formDataObject = TrvExpTrans_DS.object(fieldnum(TrvExpTrans, DeduktionBreakfest));
            if (formDataObject)
            {
                TrvExpPerdiemData_NumberOfBreakfast.visible(formDataObject.visible());
                TrvExpPerdiemData_NumberOfBreakfast.allowEdit(formDataObject.allowEdit());
                TrvExpTrans_DeduktionBreakfest.allowEdit(false);
            }

            formDataObject = TrvExpTrans_DS.object(fieldnum(TrvExpTrans, DeduktionLunch));
            if (formDataObject)
            {
                TrvExpPerdiemData_NumberOfLunch.visible(formDataObject.visible());
                TrvExpPerdiemData_NumberOfLunch.allowEdit(formDataObject.allowEdit());
                TrvExpTrans_DeduktionLunch.allowEdit(false);
            }

            formDataObject = TrvExpTrans_DS.object(fieldnum(TrvExpTrans, DeduktionDinner));
            if (formDataObject)
            {
                TrvExpPerdiemData_NumberOfDinner.visible(formDataObject.visible());
                TrvExpPerdiemData_NumberOfDinner.allowEdit(formDataObject.allowEdit());
                TrvExpTrans_DeduktionDinner.allowEdit(false);
            }
        }
        else
        {
            ExpenseLinePerdiemTabPage.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchPerdiemRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch perdiem rates for the location.
    /// </summary>
    private void fetchPerdiemRates()
    {
        if (isPerdiemEnabled && trvExpTrans.TrvLocations && trvExpTrans.DateFrom && trvExpTrans.DateTo)
        {
            select trvPerDiems where
            trvPerDiems.TrvLocations == TrvExpTrans.TrvLocations &&
            (trvPerDiems.DateFrom <= DateTimeUtil::date(trvExpTrans.DateFrom) || !trvPerDiems.DateFrom) &&
            (trvPerDiems.DateTo >= DateTimeUtil::date(trvExpTrans.DateTo) || !trvPerDiems.DateTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForTaxCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility for corrected tax amount field.
    /// </summary>
    public void setVisibilityForTaxCorrections()
    {
        FormDataObject formDataObject;

        formDataObject = activeExpenseDataSource.object(fieldnum(TrvExpTrans, CorrectedTaxAmount));

        // If there exists a calculated tax amount and the corrected tax amount field is visible and editable as set by the visibility of the admin custom fields
        // we enable the corrected tax amount field. As the calculated tax amount is a display method and does not update in time, we use the CorrectedTaxAmount field to determine if calculated tax exists.
        TrvExpTrans_CorrectedTaxAmount.allowEdit(activeExpense.CorrectedTaxAmount != 0.00 && formDataObject.visible() && formDataObject.allowEdit());
        SplitTrvExpTrans_CorrectedTaxAmount.allowEdit(activeExpense.CorrectedTaxAmount != 0.00 && formDataObject.visible() && formDataObject.allowEdit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTrvExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start the <c>TrvExpense</c> report with either a <c>TrvExpTable</c> or <c>TrvExpTrans</c>
    /// record depending if the form is showing the whole expense report or just a line.
    /// </summary>
    /// <param name = "menuItemNameOutput">The menu item to open, usually <c>TrvExpense</c> or <c>TrvExpenseEmployee</c>.</param>
    private void openTrvExpenseReport(MenuItemNameOutput menuItemNameOutput)
    {
        Args args = new Args();
        args.caller(element);

        if (lineRecId)
        {
            args.record(activeExpense);
        }
        else
        {
            args.record(TrvExpTable);
        }

        new MenuFunction(menuItemNameOutput, MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForPrintButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visibility for the print-related buttons depending on the context that the form was opened.
    /// </summary>
    /// <param name = "inAPClerkContext">True if the form is in AP clerk mode or false otherwise.</param>
    private void setVisibilityForPrintButtons(boolean inAPClerkContext)
    {
        if (inAPClerkContext)
        {
            TrvExpense.visible(true);
        }
        else
        {
            TrvExpenseEmployee.visible(true);
            if (HcmWorkerLookup::currentWorker() == creatingWorkerRecId || TrvAccessHelper::userHasCurrentDelegateAccessFor(creatingWorkerRecId))
            {
                // Employee mode: Current user is the expense report owner or a delegate.
                TrvExpReportsBarcodeCoverPage.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the calling form is <c>TrvIUpdateEnabled</c>, call updateForm() before closing.
    /// </summary>
    public void close()
    {
        TrvIUpdateEnabled updateEnabledCaller = element.args().caller() as TrvIUpdateEnabled;
        if (updateEnabledCaller)
        {
            updateEnabledCaller.updateForm();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDetailsJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant form to view more details of the record.
    /// </summary>
    /// <param name = "menuItem">
    /// The menu item that opens the form for more details.
    /// </param>
    /// <param name = "record">
    /// The record to view details.
    /// </param>
    private void viewDetailsJumpRef(str menuItem, Common record)
    {
        MenuFunction    menuFunction    = new MenuFunction(menuItem, MenuItemType::Display);
        Args            args            = new Args();
        FormRun         formRun;

        args.lookupRecord(record);
        args.caller(element);

        menuFunction.copyCallerQuery(CopyCallerQuery::No);
        formRun = menuFunction.create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef_ExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>TrvExpenses</c> form in the context of the selected expense report
    /// </summary>
    /// <param name="_expNumber">
    /// The expense report to drill into
    /// </param>
    public void jumpRef_ExpenseReport(TrvExpNumber _expNumber)
    {
        Args args;

        if (_expNumber)
        {
            args = new Args();
            args.record(TrvExpTable::find(_expNumber));
            args.caller(element);

            FormRun formRun = new MenuFunction(menuitemDisplayStr(TrvExpenses), MenuItemType::Display).create(args);
            formRun.run();
            formRun.wait(true);

            //Refresh datasource after returning from expense report
            TrvExpTrans_ds.research();
            TrvExpTrans_Split_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshExpenseLineGrouping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the current group by option, changing the <c>TrvExpTrans_DS</c> sorting as necessary.
    /// </summary>
    /// <param name = "groupByOption">The desired grouping to be used.</param>
    private void refreshExpenseLineGrouping(TrvExpenseGroupBy groupByOption)
    {
        // Store the RecId of selected expense.
        RecId selectedExpenseRecId = TrvExpTrans.RecId;

        if (ExpenseTilesList.visible())
        {
            switch (groupByOption)
            {
                case TrvExpenseGroupBy::Category:
                    ExpenseTilesList.groupBy(identifierStr(CostType_Tile));
                    break;

                case TrvExpenseGroupBy::Date:
                    ExpenseTilesList.groupBy(identifierStr(TransDate_Tile));
                    break;

                case TrvExpenseGroupBy::Project:
                    ExpenseTilesList.groupBy(identifierStr(ProjId_Tile));
                    break;

                case TrvExpenseGroupBy::None:
                default:
                    ExpenseTilesList.groupBy("");
                    break;
            }
        }

        TrvExpTrans_DS.queryBuildDataSource().sortClear();

        switch (groupByOption)
        {
            case TrvExpenseGroupBy::Category:
                TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, CostType), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::Project:
                TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, ProjId), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::Date:
                TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, TransDate), SortOrder::Ascending);
                break;

            case TrvExpenseGroupBy::None:
            default:
                TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, ExpNumber), SortOrder::Ascending);
                TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, TransDate), SortOrder::Ascending);
                break;
        }

        // TrvExpTrans_DS.executeQuery() will ensure that the cards will be in decreasing order of creation date inside
        // each group or in the whole list if no grouping is defined.
        TrvExpTrans_DS.executeQuery();

        // Move cursor to the expense which was selected after the re-sort.
        TrvExpTrans_DS.positionToRecordByValue(fieldNum(TrvExpTrans, RecId), int642Str(selectedExpenseRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExpenseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the current expense line and go to details view.
    /// </summary>
    public void copyExpenseLine()
    {
        RefRecId duplicatedLineRecId = TrvExpTrans.duplicateExpenseLine(0, TrvExpTrans.TransDate);
        if (duplicatedLineRecId)
        {
            TrvExpTrans_DS.positionToRecordByValue(fieldNum(TrvExpTrans, RecId), int642Str(duplicatedLineRecId));

            if (element.inViewMode())
            {
                element.task(#taskEditRecord);
            }
        }
        else
        {
            warning("@Expense:ExpenseLineCopyFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSplitDetailsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open the split details form for a credit card expense.
    /// </summary>
    public void openSplitDetailsForm()
    {
        boolean confirmation;
        TrvExpTrans itemizedExpenseLine;

        // Execute policy violation check and stop the split in case of any violations.
        if (!this.isExpenseSplitHeader(trvExpTrans.SplitLineType))
        {
            TrvPolicyEvalEngine::evaluateViolationsForLine(trvExpTrans.RecId, SysPolicyTypeEnum::TrvExpensePolicy);
            if (trvExpTrans.policyViolationLevelMsg().elements() != 0)
            {
                element.showExpensePolicyViolations(trvExpTrans);
                warning("@Expense:PolicyCheckBeforeSplit");
                return;
            }
        }

        if ((trvExpTrans.SplitLineType == TrvExpSplitLineType::NoSplit && !TrvExpTransSplit::splitLinesExistForAnExpense(trvExpTrans.RecId))
            && (trvExpTrans.LineType == TrvExpLineType::ItemizedHeader || trvExpTrans.hasGuests()))
        {
            confirmation = (DialogButton::Yes == Box::yesNoOnce(formStr(TrvExpenses), "@Expense:SplitMessageConfirmation", DialogButton::No, "@Expense:ConfirmSplit"));

            // Return false, so that split details form will not be opened.
            if (!confirmation)
            {
                return;
            }
        }

        // Remove the guests and itemizations before going to split.
        if (trvExpTrans.SplitLineType != TrvExpSplitLineType::SplitHeader)
        {
            TrvGuestHelper::deleteGuestsforExpenseLine(trvExpTrans.RecId);
            delete_from itemizedExpenseLine
                where itemizedExpenseLine.ParentRecId == trvExpTrans.RecId
                && itemizedExpenseLine.LineType == TrvExpLineType::ItemizedLine;

            trvExpTrans.reread();
            trvExpTrans_ds.refresh();
            TrvExpTrans_Split.reread();
            TrvExpTrans_Split_DS.refresh();
        }

        Args args = new Args();

        args.caller(element);
        args.record(trvExpTrans);

        FormRun fr = new MenuFunction(MenuItemDisplayStr(TrvExpenseSplit), MenuItemType::Display).create(args);
        fr.run();
        fr.wait(true);

        //Refresh datasource after dialog completes
        TrvExpTrans_Split_DS.research();
        TrvExpTrans_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpenseSplitHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the expense split line in <c>TrvExpTrans</c> table is associated with split header enumeration value.
    /// </summary>
    /// <param name = "_splitLineType">
    /// The split line type enumeration value.
    /// </param>
    /// <returns>
    /// Returns true if expense split line type is associated with split header enumeration value; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean isExpenseSplitHeader(TrvExpSplitLineType _splitLineType)
    {
        return (_splitLineType == TrvExpSplitLineType::SplitHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activate form event handlers.
    /// </summary>
    public void setupEventHandlers()
    {
        if (isPerdiemEnabled)
        {
            TrvExpTrans_DeduktionBreakfest.OnModified += eventhandler(element.onModifiedPerdiemDeductionEventHandler);
            TrvExpTrans_DeduktionLunch.OnModified += eventhandler(element.onModifiedPerdiemDeductionEventHandler);
            TrvExpTrans_DeduktionDinner.OnModified += eventhandler(element.onModifiedPerdiemDeductionEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedPerdiemDeductionEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the <c>OnModified</c> event in a perdiem [breakfast, lunch, dinner] deduction field.
    /// </summary>
    /// <param name = "_sender">The event sender.</param>
    /// <param name = "_args">The event arguments.</param>
    public void onModifiedPerdiemDeductionEventHandler(FormControl _sender, FormControlEventArgs _args)
    {
        TrvExpTrans_DS.cacheCalculateMethod(tableMethodStr(TrvExpTrans, deductionWithCurrencyCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToDetailsView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to the details view.
    /// </summary>
    private void switchToDetailsView()
    {
        if (!ExpenseDetails.visible())
        {
            // Switch views.
            ExpenseDetails.visible(true);
            ExpenseTiles.visible(false);
            GridView.visible(false);

            // Reset the grouping to ensure that the lines will stay in the same place after switching views.
            element.refreshExpenseLineGrouping(TrvExpenseGroupBy::None);

            // Set focus to details tab if it was not in details view.
            if (SplitExpenseLineDetailsBodyGroup.visible())
            {
                SplitExpenseLineDetailsBodyGroup.setFocus();
            }
            else
            {
                ExpenseLineDetailsBodyGroup.setFocus();
            }

            // Set appbar buttons.
            element.setVisibilityForDistributionsButtons();
            headerPolicyMessageShown = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToGridView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to the grid view.
    /// </summary>
    private void switchToGridView()
    {
        if (!GridView.visible())
        {
            // Switch views.
            ExpenseDetails.visible(false);
            ExpenseTiles.visible(false);
            GridView.visible(true);

            // Reset the grouping to ensure that the lines will stay in the same place after switching views.
            element.refreshExpenseLineGrouping(TrvExpenseGroupBy::None);

            // Set focus to grid if it was not in grid view.
            ExpenseGrid.setFocus();

            // Set appbar buttons.
            element.setVisibilityForDistributionsButtons();
            headerPolicyMessageShown = false;

            // Ensure visible fields will refresh when switched back to details view at a later time
            trvExpenseLinesVisibilityController.parmPreviousExpenseType(TrvExpType::Empty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToTileView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches the form to a tile view.
    /// </summary>
    /// <param name = "_groupBy">What value the tiles should be grouped by.</param>
    private void switchToTileView(TrvExpenseGroupBy _groupBy)
    {
        element.refreshExpenseLineGrouping(_groupBy);
        element.tilesViewClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redirect the system attach button (the paperclip) to the expense header or line attach button to
    /// use expense document attachment forms. This executes all expense specific logic associated with receipts.
    /// </summary>
    public void attachButtonClicked(FormCommandButtonControl  _attachButton)
    {
        if (ExpenseGridStatusFilter.selection() == TrvExpensesFilter::Unattached)
        {
            // unattached receipts, no header available for attachments
            UploadReceipt.clicked();
        }
        else if (element.docCursor() == TrvExpTable)
        {
            // header has focus, attach receipts to the header
            HeaderReceipts.clicked();
        }
        else if (element.isSplitExpenseLine())
        {
            // split line is active, attach receipts to the split line
            SplitUploadReceipt.clicked();
        }
        else if (ExpenseTiles.visible() || GridView.visible() || ExpenseLineReceiptTabPage.visible())
        {
            // attach to the selected expense line
            UploadReceipt.clicked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSystemAttachmentButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the behavior of the system defined attachment button (the paperclip)
    /// </summary>
    private void initSystemAttachmentButton()
    {
        #SysSystemDefinedButtons

        FormCommandButtonControl attachmentButton = this.control(this.controlId(#SystemDefinedAttachButton)) as FormCommandButtonControl;

        if (attachmentButton)
        {
            attachmentButton.registerOverrideMethod(methodStr(FormButtonControl, clicked), formmethodstr(TrvExpenses, attachButtonClicked), this);
            attachmentButton.multiSelect(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActiveExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the active expense table and datasources.
    /// </summary>
    /// <parm=_isSplitSelected>True when the use is interacting with the split datasource controls.</parm=_isSplitSelected>
    private void initActiveExpense(boolean _isSplitSelected)
    {
        if (_isSplitSelected)
        {
            activeExpense = TrvExpTrans_Split;
            activeExpenseDataSource = TrvExpTrans_Split_DS;
            activeItemizedExpense = TrvExpTrans_ItemizedLines_Split;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_Split_DS;
        }
        else
        {
            activeExpense = TrvExpTrans;
            activeExpenseDataSource = TrvExpTrans_DS;
            activeItemizedExpense = TrvExpTrans_ItemizedLines;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_DS;
        }

        isActiveExpenseCreditTrans = activeExpense.isCreditCardTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditButtonState</Name>
				<Source><![CDATA[
    private void setEditButtonState()
    {
        #SysSystemDefinedButtons

        FormCommandButtonControl editButton = this.control(this.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
        if(activeExpense.ApprovalStatus == TrvAppStatus::Ledger)
        {
            editButton.enabled(false);
        }
        else
        {
            editButton.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExpenseLineDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process removal of expense line from expense report.
    /// </summary>
    private void onExpenseLineDeleted()
    {
        MultiSelectionHelper    selectionHelper;
        TrvExpTrans             trvExpTransDelete;
        TrvExpNumber trvExpNumber;

        // Get the expense line to be deleted.
        selectionHelper   = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(TrvExpTrans_ds);
        trvExpTransDelete = selectionHelper.getFirst();

        // If the line is found and user confirms deletion, proceed with processing the removal.
        if (trvExpTransDelete && Box::confirm('@Expense:DeleteConfirmation'))
        {
            while (trvExpTransDelete)
            {
                trvExpNumber = trvExpTransDelete.ExpNumber;
                ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(logger);
                using (var activityContext = taxActivities.onExpenseLineDeletedContext())
                {
                    logger.logInformation(strFmt(
                            'Processing Expense Transaction for deletion RecId: %1, Expense Number: %2, Tax: %3',
                            trvExpTransDelete.RecId, trvExpTransDelete.ExpNumber, trvExpTransDelete.CorrectedTaxAmountMST));
                    
                    // Just clear some of the fields, so that expense lines are retained and shows up as "unattached expense"
                    trvExpTransDelete.updateExpenseReport("");

                    // When line-level workflow is enabled and when individual lines are recalled,
                    // these lines get into draft state. In this state, they can be deleted.
                    // When such lines are deleted, we have to ensure that the workflow work item
                    // associated with such lines are completed. If we don't that, the workflow
                    // will remain in 'Pending' state, which is not desirable. And we have to call
                    // this for each selected expense line for deletion.
                    logger.logInformation(strFmt('Canceling workflow for Expense Transaction RecId %1, Expense Number %2',
                        trvExpTransDelete.RecId, trvExpTransDelete.ExpNumber));
                }

                ExpenseInstrumentationExpenseLineActivities expenseLineActivities = ExpenseInstrumentationExpenseLineActivities::construct(logger);
                using (var activityContext = expenseLineActivities.detachExpenseLineContext())
                {
                    TrvExpTableTrvRequisitionTable requisitionLink;

                    select RecId from requisitionLink where requisitionLink.TrvExpTable == trvExpTable.RecId;
                    boolean travelReqAttached = (requisitionLink.RecId != 0);

                    logger.logInformation(strFmt('Detaching expense line %1 to header %2. Financial Dimension: %3; ' +
                            'ProjID: %4; Intercompanty LE: %5; Travel Requision is Attached: %6',
                            trvExpTransDelete.ExpTransNumber, trvExpTransDelete.ExpNumber, trvExpTransDelete.DefaultDimension,
                            trvExpTransDelete.ProjId, trvExpTransDelete.InterCompanyLE, travelReqAttached));

                    TrvWorkflowWorkItemActionManager::cancelWorkItemForDeletedExpenseLine(trvExpTransDelete);

                    logger.logInformation(strFmt('Detached expense line %1 to header %2. Financial Dimension: %3; ' +
                            'ProjID: %4; Intercompanty LE: %5; Travel Requision is Attached: %6',
                            trvExpTransDelete.ExpTransNumber, trvExpTransDelete.ExpNumber, trvExpTransDelete.DefaultDimension,
                            trvExpTransDelete.ProjId, trvExpTransDelete.InterCompanyLE, travelReqAttached));
                }

                // Get the next selected record
                trvExpTransDelete = selectionHelper.getNext();
            }
            if(TrvExpenseHelper::isTrvExpMileageCalculationRevisedFlightEnabled())
            {
                TrvMileageHelper::updateAllMileageLinesInExpenseReport(trvExpNumber);
            }

            // Rerun the existing form query against the database and refresh the grid.
            TrvExpTrans_ds.research(true);
        }

        activeExpense.setDefaultDimension();
        totalsObservable.markChanged();

        // When line-level workflow is enabled, it is possible that few expense lines
        // could be in approved or posted state, while other lines are in draft state.
        // If one or more expense lines [in draft state] are deleted, leaving all rest
        // of the lines in approved or posted state, we need to make sure that the
        // approval status of the expense report reflect the correct status according
        // to status of all the remaining lines. Call workflow work item action
        // manager method that ensures this.
        TrvWorkflowWorkItemActionManager::updateExpenseDocumentStatus(expenseReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLegalEntityFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable legal entity fields based on expense type and parameters.
    /// </summary>
    public void enableLegalEntityFields()
    {
        boolean enableField = TrvExpTrans.ExpType != TrvExpType::Advance? trvParameters.UseInterCompanyExpense : false;
        TrvExpTrans_InterCompanyLE.enabled(enableField);
        SplitTrvExpTrans_InterCompanyLE.enabled(enableField);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TrvExpTrans</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize values for new expense lines.
        /// </summary>
        public void initValue()
        {
            element.trvExpTransDataSourceInit(trvExpTrans);

            super();

            /// Refresh the itemized header datasource after deleting the expense line.
            TrvExpTrans_ItemizedLines_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handle new on the AppBar.
        /// </summary>
        public void create(boolean _append = false)
        {
            if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines) || isExpenseReportEditable)
            {
                if (!ExpenseDetails.visible() && !GridView.isVisible())
                {
                    // Creation should only happen in Details or Grid view.
                    element.switchToDetailsView();
                }

                super(_append);
            }
            else
            {
                error("@Expense:ExpenseReportNotEditable");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Write operation on an expense.
        /// When an expense is inserted or updated, update the policy violations for the line and check if itemization needs to be completed.
        /// Updates the enhanced data record's foreign key.
        /// Update the justifications if needed.
        /// </summary>
        public void write()
        {
            boolean anyPreviousDayOrReportViolation = false;

            element.trvExpTransWriteAsyncTasks(trvExpTrans);

            element.dayOrReportProjectPolicyViolations();

            ttsbegin;

            if (!element.parmAsyncEnabled())
            {
                super();
            }
            else
            {
                // If async write is enabled, call insert/update with evaluateSourceDoc parameter = false, instead of super().
                if (!trvExpTrans.RecId)
                {
                    trvExpTrans.insert(false, false);
                }
                else
                {
                    trvExpTrans.update(false);
                }
            }

            if(TrvExpenseHelper::isTrvExpMileageCalculationRevisedFlightEnabled())
            {
                TrvMileageHelper::updateAllMileageLinesInExpenseReport(trvExpTrans.ExpNumber);
            }

            // Justification tables are passive joins, we need to take care of writing them manually
            if (MyJustification.visible() && strLTrim(LineJustification.Justification) != '')
            {
                LineJustification_DS.write();
            }

            if (MyHeaderJustification.visible() && strLTrim(HeaderJustification.Justification) != '')
            {
                HeaderJustification_DS.write();
            }

            // When async write is enabled, super is not called for TrvExpTrans therefore we need to
            // manually insert outer joined data sources.
            if (trvExpTrans.ExpType == TrvExpType::CarRental && trvEnhancedCarRentalData.RecId == 0)
            {
                trvEnhancedCarRentalData.TransactionRecord = trvExpTrans.RecId;
                trvEnhancedCarRentalData.insert();
            }

            if (trvExpTrans.ExpType == TrvExpType::Hotel && trvEnhancedHotelData.RecId == 0)
            {
                trvEnhancedHotelData.TransactionRecord = trvExpTrans.RecId;
                trvEnhancedHotelData.insert();
            }

            if (trvExpTrans.ExpType == TrvExpType::Airline && trvEnhancedItineraryData.RecId == 0)
            {
                trvEnhancedItineraryData.TransactionRecord = trvExpTrans.RecId;
                trvEnhancedItineraryData.insert();

                if (trvEnhancedTripLegDetail.RecId == 0)
                {
                    trvEnhancedTripLegDetail.ItineraryRecId = trvEnhancedItineraryData.RecId;
                    if (trvEnhancedTripLegDetail.validateWrite())
                    {
                        trvEnhancedTripLegDetail.insert();
                    }
                }
            }
            trvExpTrans.updateExpCashAdvanceMap(true);
            ttscommit;

            // Reread is needed to update the DS record when super() is not used.
            element.doRefreshFormDataSource(this);

            element.showItemizationError();
            element.showAntiCorruptionMismatchError();
            element.initializeReceiptsTabContext();

            if (!element.parmAsyncEnabled())
            {
                // If there were any previous report-level or day-level project policy violations on this report,
                // or now after the update, then other expenses might have updated statuses too, so we need to research.
                if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                {
                    if (anyPreviousDayOrReportViolation || trvExpTable.anyDayOrReportProjectPolicyViolations())
                    {
                        TrvExpTrans_DS.research(true);
                    }
                }

                element.showExpensePolicyViolations();
            }
            else
            {
                element.doAsyncAction(trvExpTrans.RecId);
            }

            // Refresh display methods
            receiptRequiredObservable.markChanged();
            totalsObservable.markChanged();
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorStatusIndicator</Name>
						<Source><![CDATA[
        /// <summary>
        /// Returns error if the itemization is not completed for the corresponding
        /// adjusted policy violation level for the line. If the expense is not inserted yet,
        /// this will not show any error.
        /// </summary>
        display container errorStatusIndicator(TrvExpTrans _trvExpTrans)
        {
            container result;
            indicatorIconObservable.observe();

            if (indicatorIconObservable.isUpdateNeeded(_trvExpTrans.RecId))
            {
                result = element.expenseErrorStatusIndicator(_trvExpTrans);
                indicatorIconObservable.setCacheValue(_trvExpTrans.recId, result);
            }
            else
            {
                result = indicatorIconObservable.getCacheValue(_trvExpTrans.RecId);
            }

            return result;
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research the expense datasource. Shows policy violations on header if we are in tiles view.
        /// This would be triggered by an action such as adding/removing unreconciled expenses.
        /// </summary>
        /// <param name = "_retainPosition">True if current position needs to be retained; otherwise false.</param>
        public void research(boolean _retainPosition = false)
        {
            super(_retainPosition);

            if (ExpenseTiles.visible())
            {
                TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Based on selected expense lines, disable or enable buttons in the app bar.
        /// Also manage field and tab visibilities when selection changes.
        /// </summary>
        public void selectionChanged()
        {
            // Deactivate the itemizations tab while moving between the expenses.
            if (ExpenseLineItemizeTabPage.isActivePage())
            {
                ExpenseLineItemizeTabPage.allowPageDeactivate();
            }

            // Update expense split line while moving away to another expense.
            if (activeExpense.SplitLineType == TrvExpSplitLineType::SplitLine
                && TrvExpTrans_Split.RecId != 0
                && pmfTableHasChanged(TrvExpTrans_Split)
                && TrvExpTrans_Split.validateWrite())
            {
                TrvExpTrans_Split.update();
            }

            // update personal when moving beteween lines
            if (element.isPersonalApplicable())
            {
                TrvExpTransPersonal_ds.write();
            }

            super();

            splitHeaderRecId = TrvExpTrans.RecId;

            if (TrvExpTrans.SplitLineType == TrvExpSplitLineType::SplitHeader)
            {
                SplitExpenseLineDetailsBodyTabGroup.visible(true);
                ExpenseLineDetailsBodyTabGroup.visible(false);

                // initialize active expense to the split transaction datasources
                element.initActiveExpense(true);

                TrvExpTrans_Split_ds.executeQuery();

                trvExpenseSplitLinesVisibilityController = new TrvExpenseLinesVisibilityController(TrvExpTrans_Split, this.formRun(), TrvExpTrans_Split_DS.name(), TrvEnhancedItineraryData_Split_DS.name(),
                                                                                                    TrvEnhancedCarRentalData_Split_DS.name(), TrvEnhancedHotelData_Split_DS.name(),
                                                                                                    TrvEnhancedTripLegDetail_Split_DS.name(), TrvExpTable_DS.name());
            }
            else
            {
                SplitExpenseLineDetailsBodyTabGroup.visible(false);
                ExpenseLineDetailsBodyTabGroup.visible(true);

                // initialize active expense to the primary exptrans datasources
                element.initActiveExpense(false);

                // Once expense line selection changed, we need to initialize itemization control later.
                itemizedHeaderRecID = 0;

                // If async write has updated this expense, reread now to fetch the latest.
                if (expenseRecIdsToRefresh.in(trvExpTrans.RecId))
                {
                    TrvExpTrans_DS.reread();
                    expenseRecIdsToRefresh.remove(trvExpTrans.RecId);
                }

                element.setVisibilityForDetailsView();

                // Since we'll only have limited number of views, we have a simple if-else to see which view is currently active.
                // For now, only details view needs to update visibilities when selection changes.
                if (ExpenseDetails.visible() || GridView.visible())
                {
                    element.setFieldsAsMandatory();
                    // In details view, we only show header violation messages once.
                    if (!headerPolicyMessageShown)
                    {
                        TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
                        headerPolicyMessageShown = true;
                    }
                    trvJustificationManager.initJustifications(element.inViewMode());
                    trvHeaderJustificationManager.initJustifications(element.inViewMode());
                    if (!element.inViewMode())
                    {
                        ExpenseLineDetailsBodyGroup.setFocus();
                    }
                }

                element.enableSplitRelatedButtons();

                element.enableActionsBasedOnSelection();

                // Enable payment details button only when the expense is processed for payment.
                ExpensePaymentDetails.enabled(TrvExpTrans.ApprovalStatus == TrvAppStatus::Ledger);
                ExpensePaymentDetailsGridView.enabled(TrvExpTrans.ApprovalStatus == TrvAppStatus::Ledger);

                // Can delete expense lines when viewing form as a series of expense lines
                if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
                {
                    if (TrvExpTrans.TrvExpTable == 0)
                    {
                        DeleteExpenseLine.enabled(true);
                    }
                    else
                    {
                        TrvExpTable localTrvExpTable = TrvExpTable::findRecId(TrvExpTrans.TrvExpTable);
                        DeleteExpenseLine.enabled(localTrvExpTable.validateDelete(false));
                    }
                }

                // Line level workflow logic.
                if (TrvExpTrans.lineItemWorkflowEnabled())
                {
                    // Validate whether the current user can edit or delete records..
                    // Intentionally done after the visibility manager to override settings.
                    TrvExpTrans_DS.allowEdit(TrvExpTrans.isEditable() ||
                                            (canReadAPDetails && TrvExpTrans.ApprovalStatus == TrvAppStatus::Approved) ||
                                            (TrvExpTrans.ApprovalStatus == TrvAppStatus::Pending && TrvExpenseHelper::isCalledFromApproversContext(caller, TrvExpTrans)));
                    TrvExpTrans_DS.allowDelete(TrvExpTrans.validateDelete(false));  // Validate that the expense line can be deleted, but don't throw an error.

                    if (element.design().workflowType() != workFlowTypeStr(TrvLineItemTemplate) || element.design().workflowDatasource() != TrvExpTrans_DS.id())
                    {
                        element.design().workflowDatasource(TrvExpTrans_DS.id());
                        element.design().workflowType(workFlowTypeStr(TrvLineItemTemplate));
                        element.updateWorkflowControls();
                    }
                }

                element.setWorkflowButtons();

                // Reset the tab selection back to receipts for the newly selected expense.
                if (ExpenseLineItemizeTabPage.isActivePage())
                {
                    element.initializeItemizationsTabContext();
                }
                else
                {
                    if (!ExpenseLineReceiptTabPage.isActivePage())
                    {
                        ExpenseLineReceiptTabPage.activatePage();
                    }
                    element.initializeReceiptsTabContext();
                }

                // Enable deletion of expense line only when it is in draft mode.
                // Deletion of expense line in any other state causes complications
                // in handling some workflow state transitions. Especially, when the
                // exepnse line is directly deleted after rejection [without recall],
                // there is no way for us to cancel the workflow, because workflow
                // engine does not allow cancel after reject.
                if (TrvExpTrans.ApprovalStatus == TrvAppStatus::Create)
                {
                    RemoveExpense.enabled(true);
                    RemoveExpenseGridView.enabled(true);
                }
                else
                {
                    RemoveExpense.enabled(false);
                    RemoveExpenseGridView.enabled(false);
                }

                // Cannot change expense report unless line is in draft state
                TrvExpTrans_DS.object(fieldNum(TrvExpTrans, ExpNumber)).allowEdit(TrvExpTrans.ApprovalStatus == TrvAppStatus::Create);
            }

            element.enableLegalEntityFields();
            
            if (activeExpense.IsPreAuthorized == NoYes::Yes)
            {
                TrvExpTrans_MappedToRequisitionLine.enabled(true);
            }
            else
            {
                TrvExpTrans_MappedToRequisitionLine.enabled(false);
            }

            element.setEditButtonState();

            // if the following flight is enabled, anytime there is a change in selection,
            // a mileage line could be updated/deleted, hence the record needs to be reread
            // from the db so that there is no stale data in UI.
            if(TrvExpenseHelper::isTrvExpMileageCalculationRevisedFlightEnabled())
            {
                TrvExpTrans_ds.reread();
                TrvExpTrans_ds.refresh();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the Data Source based on the type of record passed by parameter.
        /// </summary>
        public void executeQuery()
        {
            if (!isItemizedLine)
            {
                // Filter to avoid showing itemized lines in the grid for expense lines.
                QueryBuildRange parentRecIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, LineType));
                parentRecIdRange.value(queryValue(SysQuery::valueNot(TrvExpLineType::ItemizedLine)));
                parentRecIdRange.status(RangeStatus::Hidden);

                // Filter to avoid showing split lines in the grid for expense lines.
                QueryBuildRange splitHeaderRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, SplitLineType));
                splitHeaderRange.value(queryValue(SysQuery::valueNot(TrvExpSplitLineType::SplitLine)));
                splitHeaderRange.status(RangeStatus::Hidden);

                QueryBuildRange workerRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, CreatingWorker));
                workerRange.value(queryValue(creatingWorkerRecId));
                workerRange.status(RangeStatus::Hidden);

                this.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, CreatedDateTime), SortOrder::Descending);
            }

            if (lineRecId)
            {
                // clearDynalinks() will disable the ItemizedLine relation from TrvExpTrans (TrvExpTrans.ParentRecId == TrvExpTrans.RecId)
                this.query().dataSourceName(tableStr(TrvExpTrans)).clearDynalinks();

                // Adding the range for a specific expense line, either coming from Original document or Itemized line.
                QueryBuildRange lineRecIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, RecId));
                lineRecIdRange.value(queryValue(lineRecId));
                lineRecIdRange.status(RangeStatus::Hidden);
            }

            if (this.formRun().args() && this.formRun().args().getRequestContextQuery())
            {
                SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(TrvExpTrans, ExpNumber)).value(expenseReport.ExpNumber);
            }

            if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
            {
                QueryBuildRange workerRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, CreatingWorker));
                workerRange.value(queryValue(creatingWorkerRecId));
                workerRange.status(RangeStatus::Hidden);

                QueryBuildRange companyRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTrans)), fieldnum(TrvExpTrans, LegalEntity));
                companyRange.value(queryValue(CompanyInfo::current()));
                companyRange.status(RangeStatus::Hidden);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>cardMerchantId</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display method for merchant Id in card and tile.
        /// </summary>
        display TrvExpMerchantId cardMerchantId(TrvExpTrans _trvExpTrans)
        {
            return _trvExpTrans.MerchantId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isItemizationComplete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display method for itemization complete checkbox.
        /// </summary>
        /// <param name = "_trvExpTrans">Table being displayed</param>
        /// <returns>If the itemization of the line is complete</returns>
        display boolean isItemizationComplete(TrvExpTrans _trvExpTrans)
        {
            return _trvExpTrans.itemizationStatus() == TrvExpItemizationStatus::Completed;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isReceiptRequired</Name>
						<Source><![CDATA[
        /// <summary>
        /// Force execution of display method for updating form
        /// </summary>
        public display boolean isReceiptRequired(TrvExpTrans _expTrans)
        {
            receiptRequiredObservable.observe();
            return _expTrans.isReceiptRequired();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setDefaultProjectFromExpenseReport</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the project fields from expense report.
        /// </summary>
        public void setDefaultProjectFromExpenseReport()
        {
            element.setDefaultProjectFromExpenseReport(TrvExpTrans);
        }

]]></Source>
					</Method>
					<Method>
						<Name>splitHeaderIndicator</Name>
						<Source><![CDATA[
        /// <summary>
        /// Expense split header status indicator.
        /// </summary>
        /// <param name = "_trvExpTrans">
        /// Expense line table buffer.
        /// </param>
        /// <returns>
        /// Expense split header indicator image.
        /// </returns>
        display container splitHeaderIndicator(TrvExpTrans _trvExpTrans)
        {
            ImageReference imgRef;

            if (_trvExpTrans.SplitLineType == TrvExpSplitLineType::SplitHeader)
            {
                imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::DeliveryLine);
                return imgRef.pack();
            }

            return conNull();
        }

]]></Source>
					</Method>
					<Method>
						<Name>amountWithCurrencyCode</Name>
						<Source><![CDATA[
        /// <summary>
        /// Displays transaction amount in company currency.
        /// </summary>
        /// <param name="_trvExpTrans">
        /// Expense line table buffer.
        /// </param>
        /// <returns>
        /// Returns transaction amount in company currency.
        /// </returns>
        public display TrvTransactionAmountWithCurrencyCode amountWithCurrencyCode(TrvExpTrans _trvExpTrans)
        {
            totalsObservable.observe();
            return _trvExpTrans.amountWithCurrencyCode();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CostType</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Change the lookup options based off whether the expense is a credit card, mobile or regular expense.
            /// </summary>
            /// <param name = "_formControl">Control performing the lookup</param>
            /// <param name = "_filterStr">The filter string</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                ProjId projId = TrvExpTable.ProjId ? TrvExpTable.ProjId : trvExpTrans.ProjId;
                if (projId != '')
                {
                    TrvExpenseLookupHelper::createProjectCategoryLookup(_formControl, trvExpTrans.CreatingWorker, projId);
                }
                else if (HcmWorker::userId2Worker(curUserId()) != trvExpTrans.CreatingWorker)
                {
                    TrvExpenseLookupHelper::createExpenseCategoryLookupPerWorker(_formControl, TrvCategoryLookupType::RegularExpense, trvExpTrans.CreatingWorker);
                }
                else
                {
                    if (trvExpTrans.PBS_Statement)
                    {
                        TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::CreditCardExpense);
                    }
                    else if (trvExpTrans.Mobile_Statement)
                    {
                        TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::MobileExpense);
                    }
                    else
                    {
                        TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::RegularExpense);
                    }
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                trvExpTrans_ds.setDefaultProjectFromExpenseReport();
                element.enableLegalEntityFields();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ExchangeCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Updates visibility of controls when exchange code is changed.
            /// </summary>
            public void modified()
            {
                super();

                element.setVisibilityWhenExchCodeChanged();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MerchantId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Filters the merchant according to the current expense type.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpMerchant::lookupMerchantId(_formControl, TrvExpTrans.ExpType);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PayMethod</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validates the efficacy of the PayMethod value.
            /// </summary>
            /// <returns>True if valid, False if not</returns>
            public boolean validate()
            {
                boolean ret = super();

                if (ret)
                {
                    TrvPayMethod payMethod = TrvPayMethod::find(TrvExpTrans.PayMethod);
                    if (payMethod && payMethod.AutomaticPayment)
                    {
                        ret = checkFailed(strFmt("@Expense:PayMethodIsImportOnlyWarning", TrvExpTrans.PayMethod));
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Filters the valid payment method according to the current expense category.
            /// Exclude methods that are marked Import only from the lookup.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseLookupHelper::createPaymentMethodLookup(_formControl, TrvExpTrans.CostType, true);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validates the entered payment method, applying the same filtering that is applied to the lookup.
            /// </summary>
            public void modified()
            {
                boolean ret = TrvExpenseLookupHelper::validatePaymentMethod(TrvExpTrans.PayMethod, TrvExpTrans.CostType, true);

                super();

                if (!ret)
                {
                    warning(strFmt("@Expense:TableFieldFKViolationMessage", TrvExpTrans.PayMethod, fieldpname(TrvExpTrans, PayMethod), tablepname(TrvPayMethod)));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project activity number under the current project.
            /// </summary>
            /// <param name="_formControl">
            /// Form control where the activity field is selected.
            /// </param>
            /// <param name="_filterStr">
            /// String to filter the records.
            /// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany(TrvExpTrans.legalEntityName())
                {
                    HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(TrvExpTrans.ProjId), ProjParameters::find().BlockParentActivitySelection);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project activities form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(TrvExpTrans.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(smmActivities), smmActivities::find(TrvExpTrans.ProjActivityNumber));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project id, restricting the query to currently running projects.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLookup(creatingWorkerRecId, _formControl,
                    TrvExpTrans.isIntercompany() ? TrvExpTrans.InterCompanyCategory : TrvExpTrans.CostType,
                    TrvExpTrans.legalEntityName(), creatingWorkerLegalEntity);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sets the 'visible' and 'mandatory' property of Inter company project category field.
            /// </summary>
            public void modified()
            {
                super();

                element.setVisibilityForInterCompanyCategory();
                TrvExpTrans_ProjStatusId.mandatory(TrvExpTrans.ProjId != '');
                TrvExpTrans_ProjStatusId_Grid.mandatory(TrvExpTrans.ProjId != '');
                TrvExpTrans_ds.refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project details form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                MenuFunction    menuFunction    = new MenuFunction(menuItemDisplayStr(ProjTable), MenuItemType::Display);
                Args            args            = new Args();
                FormRun         formRun;
                ProjTable       projTable;

                // We remove the call to super and handle the logic to open the project with the relevant company context.
                // super();

                // Change company to the legal entity of the expense.
                changecompany(TrvExpTrans.legalEntityName())
                {
                    projTable = ProjTable::find(TrvExpTrans.ProjId);

                    if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                    {
                        ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
                        dw.openProjectDetailsInCE(projTable.ProjId, projTable.DataAreaId);
                    }
                    else
                    {
                        args.lookupRecord(projTable);

                        formRun = menuFunction.create(args);
                        formRun.run();
                        formRun.wait();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjStatusId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project line property in the specific legal entity.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLinePropertyLookup(_formControl, TrvExpTrans.legalEntityName());
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project line property form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(TrvExpTrans.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(ProjLineProperty), ProjLineProperty::find(TrvExpTrans.ProjStatusId));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TransDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Only mileage expense type needs to update visibility when TransDate is modified.
            /// </summary>
            public void modified()
            {
                super();

                if (trvExpTrans.ExpType == TrvExpType::Transport)
                {
                    TrvMileageHelper::initMileageFields(TrvExpTrans_DS, trvExpTrans);
                }

                // Update exchange rate control after re-calculation of exchange rate
                element.setVisibilityWhenExchCodeChanged();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvExpTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Add range for expense report record id
        /// </summary>
        public void executeQuery()
        {
            QueryBuildRange recIdRange;

            recIdRange = SysQuery::findOrCreateRange(this.query().dataSourceName(tableStr(TrvExpTable)), fieldnum(TrvExpTable, RecId));
            recIdRange.value(queryValue(expenseReport.RecId));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>refresh</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the form caption after a child form triggers a data source refresh.
        /// </summary>
        public void refresh()
        {
            super();
            element.setFormCaption();
        }

]]></Source>
					</Method>
					<Method>
						<Name>total</Name>
						<Source><![CDATA[
        /// <summary>
        /// Total expense report amount in company currency.
        /// </summary>
        public display TrvTotalExpenseAmount total(TrvExpTable _trvExpTable)
        {
            totalsObservable.observe();
            return _trvExpTable.total();
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalPayToEmployee</Name>
						<Source><![CDATA[
        /// <summary>
        /// Total paid to employee in company currency.
        /// </summary>
        public display Amount totalPayToEmployee(TrvExpTable _trvExpTable)
        {
            totalsObservable.observe();
            return _trvExpTable.totalPayToEmployee();
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalCreditCard</Name>
						<Source><![CDATA[
        /// <summary>
        /// Total paid to credit card in company currency.
        /// </summary>
        public display TrvTotalCreditCard totalCreditCard(TrvExpTable _trvExpTable)
        {
            totalsObservable.observe();
            return _trvExpTable.totalCreditCard();
        }

]]></Source>
					</Method>
					<Method>
						<Name>totalPersonal</Name>
						<Source><![CDATA[
        /// <summary>
        /// Total personal expense in company currency.
        /// </summary>
        public display TrvPersonalExpenses totalPersonal(TrvExpTable _trvExpTable)
        {
            totalsObservable.observe();
            return _trvExpTable.totalPersonal();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// The selection changed operation for the expense header.
        /// </summary>
        public void selectionChanged()
        {
            super();

            element.showAntiCorruptionMismatchError();

            element.setWorkflowButtons();
        }

]]></Source>
					</Method>
					<Method>
						<Name>isProjBudgetFailed</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks whether any expense line has a project budget status of failed.
        /// </summary>
        /// <returns>
        /// true if a project budget check failed on any expense line; otherwise, false.
        /// </returns>
        display boolean isProjBudgetFailed()
        {
            ProjBudgetStatus    projBudgetStatus;
            TrvExpTrans         trvExpTrans_Local;

            select firstonly RecId from trvExpTrans_Local
                        where trvExpTrans_Local.TrvExpTable== expenseReport.RecId
                     exists join RecId from projBudgetStatus
                        where projBudgetStatus.SourceDocumentLine == trvExpTrans_Local.SourceDocumentLine
                            && projBudgetStatus.BudgetCheckResult == ProjBudgetCheckResult::Failed;

            return (trvExpTrans_Local.RecId != 0);
        }

]]></Source>
					</Method>
					<Method>
						<Name>isBudgetFailed</Name>
						<Source><![CDATA[
        /// <summary>
        /// Indicates whether any expense line has budget status of failed.
        /// </summary>
        /// <returns>
        /// true if budget check failed on any expense line, false otherwise.
        /// </returns>
        display boolean isBudgetFailed()
        {
            BudgetSource budgetSource;
            TrvExpTrans trvExpTrans_Local;

            select firstonly RecId from trvExpTrans_Local
                        where trvExpTrans_Local.TrvExpTable== expenseReport.RecId
                     join CheckResult from budgetSource
                        where budgetSource.SourceDocumentLine == trvExpTrans_Local.SourceDocumentLine
                            && budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                           && budgetSource.CheckResult == BudgetCheckResult::Failed;

            return (trvExpTrans_Local.RecId != 0);
        }

]]></Source>
					</Method>
					<Method>
						<Name>interimApprovers</Name>
						<Source><![CDATA[
        /// <summary>
        /// Edit method for the interim approvers field
        /// </summary>
        /// <param name = "_set">If the value in the control changed</param>
        /// <param name = "_trvExpTable">Associated header record</param>
        /// <param name = "_approvers">Value in the field</param>
        /// <returns>Formatted list of approvers to display</returns>
        public display str interimApprovers(TrvExpTable _trvExpTable)
        {
            return TrvInterimFinalApproverHelper::getInterimApproverList(TrvExpTable.RecId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpTransGuest</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates if the context sets the recid from TrvExpTrans and also validates total gift amount of related gift records.
        /// </summary>
        public boolean validateWrite()
        {
            boolean ret = true;

            if (trvExpTransGuest.TrvExpTrans == 0)
            {
                ret = false;
            }

            if (ret)
            {
                ret = TrvExpenseLineHelper::doesTotalGiftAmtExceedLineAmt(trvExpTransGuest);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the guest recid before writing the <c>TrvExpTransGuest</c> record.
        /// </summary>
        public void write()
        {
            if (trvExpGuest.RecId != 0)
            {
                if (trvExpTransGuest.TrvExpGuest != 0 && trvExpTransGuest.TrvExpGuest != TrvExpGuest.RecId)
                {
                    //
                    // If transaction record had been saved before and is now pointing at a new guest record
                    // check whether old guest record is no longer used and should be deleted
                    //
                    TrvExpGuest::deleteUnusedGuests(trvExpTransGuest);
                }

                trvExpTransGuest.TrvExpGuest = TrvExpGuest.RecId;
            }
            // If guest record does not exist for a new or existing record, throw error.
            else if (trvExpGuest.RecId == 0)
            {
                throw error("@SYS4008059");
            }

            super();

            TrvPolicyEvalEngine::evaluateExpenseLineOnSave(trvExpTransGuest.TrvExpTrans);

            // If the expense type is gift, we set the summary amounts after we add/update amount.
            if (trvExpTrans.ExpType == TrvExpType::Gift)
            {
                ExpenseLineGuestTabPage.setSummaryAmounts();
            }

            // Updates to guest might have caused changes in policy violations for the expense.
            element.showExpensePolicyViolations();

        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Delete guest from the expense. Deletion of guests can trigger changes in policy violations for the expense.
        /// </summary>
        public void delete()
        {
            super();

            // If the expense type is gift, we set the summary amounts after we delete guest.
            if (trvExpTrans.ExpType == TrvExpType::Gift)
            {
                ExpenseLineGuestTabPage.setSummaryAmounts();
            }

            element.showExpensePolicyViolations();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpGuest</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Explicitly insert guest before insert of <c>TrvExpTransGuest</c> record.
        /// </summary>
        public void write()
        {
            if (trvExpGuest.RecId != 0)
            {
                TrvExpGuest orig = trvExpGuest.orig();

                if (orig.GuestId == trvExpGuest.GuestId
                    && orig.Title == trvExpGuest.Title
                    && orig.Company == trvExpGuest.Company)
                {
                    // update existing guest record
                    super();
                }
                else
                {
                    // create a new guest record because key details have changed
                    trvExpGuest.data(TrvExpGuest::findOrCreateNewGuest(TrvExpGuest.GuestId, TrvExpGuest.Company, TrvExpGuest.Title, TrvExpGuest.GuestType, creatingWorkerRecId));
                }
            }
            else
            {
                // Insert new guest data
                trvExpGuest.data(TrvExpGuest::findOrCreateNewGuest(TrvExpGuest.GuestId, TrvExpGuest.Company, TrvExpGuest.Title, TrvExpGuest.GuestType, creatingWorkerRecId));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>GuestId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Override jumpRef method to supress the view details functionality.
            /// </summary>
            public void jumpRef()
            {
                // Suppressing super() call to remove the view details functionality as the
                // there is no form corresponding to TrvExpGuest table.
                // super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>DocuRef</Name>
				<Methods>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research the receipt datasource. When receipts are attached and detached, there may be changes to policy violations on the header or line, which is handled here.
        /// </summary>
        /// <param name = "_retainPosition">True if current position needs to be retained; otherwise false.</param>
        public void research(boolean _retainPosition = false)
        {
            super(_retainPosition);

            if (ExpenseTiles.visible())
            {
                TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
            }
            else if (ExpenseDetails.visible())
            {
                element.showExpensePolicyViolations();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getThumbnail</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the thumbnail stream for a particular record.
        /// </summary>
        public display container getThumbnail(DocuRef _docuRef)
        {
            return DocumentManagement::getThumbnailAsContainer(_docuRef);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedHotelData</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedHotelData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedHotelData.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedCarRentalData</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedCarRentalData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedCarRentalData.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedItineraryData</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedItineraryData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedItineraryData.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LineJustification</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Save the justification entered.
        /// </summary>
        public void write()
        {
            super();

            indicatorIconObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedTripLegDetail</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedTripLegDetail is already inserted.
        /// </summary>
        public void write()
        {
            if (TrvEnhancedTripLegDetail.RecId != 0 && trvEnhancedTripLegDetail.validateWrite())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Skip validateWrite method as it will always fail due to miss RefRecId.
        /// </summary>
        /// <returns>True.</returns>
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpTrans_ItemizedLines</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display only the itemized lines excluding personal line.
        /// </summary>
        public void init()
        {
            super();
            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, LineType)).value(queryValue(TrvExpLineType::ItemizedLine));
            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, ExpType)).value(SysQuery::valueNot(TrvExpType::Personal));
            this.query().dataSourceTable(tableNum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, LineNumber));

            TrvItemizationCalendarControl.getTotalValue += eventhandler(element.getItemizedExpenseTotal);
            TrvItemizationCalendarControl.getItemizedValue += eventhandler(element.getExpenseItemizationTotal);
            TrvItemizationCalendarControl.getRemainingValue += eventhandler(element.getRemainingExpenseTotal);
            TrvItemizationCalendarControl.getDayValue += eventhandler(element.getDayItemizationTotal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// When an itemized line is inserted or updated, update the policy violations for the line and the itemized line and check if itemization needs to be completed
        /// </summary>
        public void write()
        {
            trvExpTrans_ItemizedLines.checkItemizationGroupId();
            
            // If this expense is currently being updated async with more than the allowed count of
            // parallel updates, wait for the last update to return.
            if (expenseAsyncTaskMap.exists(TrvExpTrans_ItemizedLines.RecId)
                && expenseAsyncTaskMap.lookup(TrvExpTrans_ItemizedLines.RecId).elements() >= maxParallelAsyncUpdates)
            {
                TrvExpenseAsyncHelper::waitForLastAsyncTask(expenseAsyncTaskMap, TrvExpTrans_ItemizedLines.RecId);
            }

            if (!element.parmAsyncEnabled())
            {
                super();
                element.showExpensePolicyViolations();
                element.showExpensePolicyViolations(TrvExpTrans_ItemizedLines);
            }
            else
            {
                // If async write is enabled, call insert/update with evaluateSourceDoc parameter = false, instead of super().
                if (!TrvExpTrans_ItemizedLines.RecId)
                {
                    TrvExpTrans_ItemizedLines.insert(false, false);
                }
                else
                {
                    TrvExpTrans_ItemizedLines.update(false);
                }

                // Reread is needed to update the DS record when super() is not used.
                this.reread();
                this.refresh();

                element.doAsyncItemizeAction(TrvExpTrans_ItemizedLines.RecId);
                indicatorIconObservable.markChanged();
            }

            TrvExpTrans.reread();
            TrvExpTrans_ds.refresh();

            element.enableItemizedDetailsButton();
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// For itemized line, initValue is called just before saving a new line.
        /// Comment out the super, initValue is not needed when initFromTrvExpItemizedHeader is used.
        /// </summary>
        public void initValue()
        {
            TrvExpTrans_ItemizedLines.TransDate = TrvItemizationCalendarControl.getFilterDate();
            TrvExpTrans_ItemizedLines.initFromTrvExpItemizedHeader(TrvExpTrans);
            //super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reread the datasource in case there's a pending post-async refresh operation. Show relevant
        /// policy violations or async save errors.
        /// </summary>
        public void selectionChanged()
        {
            super();
            activeItemizedExpense = TrvExpTrans_ItemizedLines;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_DS;

            // If async write has updated this expense, reread now to fetch the latest.
            if (expenseRecIdsToRefresh.in(TrvExpTrans_ItemizedLines.RecId))
            {
                TrvExpTrans_ItemizedLines_DS.reread();
                expenseRecIdsToRefresh.remove(TrvExpTrans_ItemizedLines.RecId);

                element.showExpensePolicyViolations();
                element.showExpensePolicyViolations(TrvExpTrans_ItemizedLines);
            }

            element.enableItemizedDetailsButton();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the itemized expenses.
        /// </summary>
        /// <returns>
        /// Returns the selected record.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();
            activeItemizedExpense = TrvExpTrans_ItemizedLines;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_DS;

            ItemizationCopyToNextDayButton.enabled(isItemizationCompleted);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh the itemized header datasource after deleting the line.
        /// </summary>
        public void delete()
        {
            super();
            TrvExpTrans.reread();
            TrvExpTrans_ds.refresh();

            element.enableItemizedDetailsButton();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AmountCurr</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                if (isActiveExpenseCreditTrans && !activeExpense.isCreditCardTransanctionInLocalCurrency())
                {
                    TrvExpTrans_ItemizedLines.CreditCardTransactionCurrencyAmount = TrvExpTrans_ItemizedLines.AmountCurr;
                }

                super();
                ItemizationCopyToNextDayButton.enabled(isItemizationCompleted);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvExpTransPersonal</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display only the itemized lines without Personal lines.
        /// </summary>
        public void init()
        {
            super();
            this.query().dataSourceTable(tableNum(TrvExpTrans)).addRange(fieldNum(TrvExpTrans, ExpType)).value(queryValue(TrvExpType::Personal));
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when Personal expense is already saved.
        /// </summary>
        public void write()
        {
            // a personal line should always have a parent
            Debug::assert(TrvExpTransPersonal.ParentRecId);

            // If this expense is currently being updated async with more than the allowed count of
            // parallel updates, wait for the last update to return.
            if (expenseAsyncTaskMap.exists(TrvExpTrans.RecId)
                && expenseAsyncTaskMap.lookup(TrvExpTrans.RecId).elements() >= maxParallelAsyncUpdates)
            {
                TrvExpenseAsyncHelper::waitForLastAsyncTask(expenseAsyncTaskMap, TrvExpTrans.RecId);
            }

            boolean isInserted = (trvExpTransPersonal.RecId != 0);
            boolean isRemainingExpenseLineApplicable;
            AmountCur personalAmount;
            // updates to personal will result in updates to and through it's parent transaction.
            TrvExpTrans parent = TrvExpTrans::find(TrvExpTransPersonal.ParentRecId);

            if (parent.isCreditCardTransanctionInLocalCurrency())
            {
                personalAmount = trvExpTransPersonal.CreditCardTransactionCurrencyAmount;
            }
            else
            {
                personalAmount = trvExpTransPersonal.AmountCurr;

                // Set credit card transaction amount in single currency situation
                trvExpTransPersonal.CreditCardTransactionCurrencyAmount = personalAmount;
            }

            if (personalAmount == 0)
            {
                // If personal amount equals to 0 and the personal line was inserted, then delete the personal line.
                if (isInserted)
                {
                    parent.deleteRemainingWithGivenCategory();
                    trvExpTransPersonal.delete();
                }
                // Else personal amount is 0, do nothing.
            }
            else
            {
                if (TrvExpenseSplitForPersonalAmountFeature::isEnabled())
                {
                    activeExpenseDataSource.research(true);
                }
                else
                {
                    // Call validateWrite before insert/update as we skip that in data source's validateWrite.
                    if (TrvExpTransPersonal_ds.validateWrite())
                    {
                        // Call the method before the super call to make sure that
                        // the header line is not already itemized with the insertion of the personal amount line.
                        isRemainingExpenseLineApplicable = parent.isRemainingAmountLineApplicable();

                        // insert or update the personal expense dataset
                        super();

                        if (!isInserted && isRemainingExpenseLineApplicable)
                        {
                            // Insert the remaining amount as an itemized line.
                            TrvExpTrans::insertRemainingWithGivenCategory(parent.RecId, parent.CostType, NoYes::Yes);
                        }
                        else if (isInserted)
                        {
                            // Update the remaining amount line with the modified amount if it exists.
                            parent.updateRemainingWithGivenCategory();
                        }

                        element.showExpensePolicyViolations(trvExpTransPersonal);
                    }
                }
            }

            // if the active datasource record is the parent of the personal amount,
            // we need to refresh the itemization controls.
            if (TrvExpTransPersonal.ParentRecId == activeExpense.RecId)
            {
                TrvExpTransPersonal.reread();
                // the parent is updated when personal amounts change, re-read the active datasource
                activeExpense.reread();
                activeExpenseDataSource.refresh();

                // prepare buffer for additional updates
                element.initializePersonalAmount();

                // refresh itemization datasources and cotnrols if applicable
                if (ExpenseLineItemizeTabPage.Visible())
                {
                    activeItemizedExpenseDataSource.executeQuery();
                }
            }

            totalsObservable.markChanged();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate that the personal category is filled in if required.
        /// Skips most validateWrite as some mandatory fields are not set until write method.
        /// </summary>
        /// <returns>True if the personal category is filled in or not required, otherwise false.</returns>
        public boolean validateWrite()
        {
            if (!TrvExpTransPersonal_CostType.visible() || !TrvExpTransPersonal_CostType.enabled() || TrvExpTransPersonal.CostType)
            {
                return true;
            }
            else
            {
                warning(strFmt("@SYS84753", "@Expense:ExpenseLine_PersonalCategory"));
                return false;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize personal fields from the activeExpense
        /// </summary>
        public void initValue()
        {
            if (element.isPersonalApplicable())
            {
                //super();
                if (!trvExpTransPersonal.CostType)
                {
                    trvExpTransPersonal.CostType = TrvPersonalExpenseHelper::findFirstPersonalCategory(activeExpense.PayMethod);
                }
                TrvPersonalExpenseHelper::initPersonalExpense(trvExpTransPersonal, activeExpense);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CostType</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validate if the personal category is valid.
            /// </summary>
            /// <returns>True when the personal category is valid, otherwise false.</returns>
            public boolean validate()
            {
                boolean ret;

                // Need to have parent rec Id set on personal line to validate that category selected was valid
                trvExpTransPersonal.parentRecId = TrvExpTrans.RecId;

                ret = super();

                if (ret)
                {
                    ret = TrvPersonalExpenseHelper::validatePersonalCostType(trvExpTrans.PayMethod, trvExpTransPersonal.CostType);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvExpPerdiemData</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update calculations on perdiem line and expense line on save of the perdiem line.
        /// </summary>
        public void write()
        {
            TrvExpPerdiemData_DS.calculatePerdiem();

            totalsObservable.markChanged();

            super();

            // After we save the perdiem line we call update on the expense line record to set the new reductions and no of meals on the line.
            trvExpTrans.update();
            TrvExpTrans_DS.setCurrent();
            TrvExpTrans_DS.cacheCalculateMethod(tableMethodStr(TrvExpTrans, deductionWithCurrencyCode));

            // Research the datasource as expense line update called above will perform another update on perdiem datasource.
            TrvExpPerdiemData_DS.research(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>calculatePerdiem</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates the perdiem for the perdiem data line.
        /// </summary>
        public void calculatePerdiem()
        {
            TrvAllowanceRate    trvAllowanceRate;

            if (!trvPerDiems.RecId)
            {
                element.fetchPerdiemRates();
            }

            if (trvPerDiems.RecId &&(trvExpPerdiemData.TypeOfDate == TrvFirstLastBoth::FirstDay || trvExpPerdiemData.TypeOfDate == TrvFirstLastBoth::LastDay))
            {
                // Check if any allowance rates exist for the perdiem.
                trvAllowanceRate = TrvAllowanceRate::find(trvPerDiems.RecId, trvExpPerdiemData.TypeOfDate, trvExpPerdiemData.NumberOfHrsDay);
            }

            trvExpPerdiemData.calculateMealDeduction(trvParameters.PerDiemRounding, trvParameters.MealReductionType, trvPerDiems, trvAllowanceRate);
            TrvExpPerdiemData_DS.cacheCalculateMethod(tablemethodstr(TrvExpPerdiemData, deductionWithCurrencyCode));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpTrans_Split</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize values for new expense lines.
        /// </summary>
        public void initValue()
        {
            element.trvExpTransDataSourceInit(trvExpTrans_Split);

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handle new on the AppBar.
        /// </summary>
        public void create(boolean _append = false)
        {
            if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines) || isExpenseReportEditable)
            {
                if (!ExpenseDetails.visible() && !GridView.isVisible())
                {
                    // Creation should only happen in Details or Grid view.
                    element.switchToDetailsView();
                }

                super(_append);
            }
            else
            {
                error("@Expense:ExpenseReportNotEditable");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Write operation on an expense.
        /// When an expense is inserted or updated, update the policy violations for the line and check if itemization needs to be completed.
        /// Updates the enhanced data record's foreign key.
        /// Update the justifications if needed.
        /// </summary>
        public void write()
        {
            boolean anyPreviousDayOrReportViolation = false;

            element.trvExpTransWriteAsyncTasks(trvExpTrans_Split);

            element.dayOrReportProjectPolicyViolations();

            ttsbegin;

            if (!element.parmAsyncEnabled())
            {
                super();
            }
            else
            {
                // If async write is enabled, call insert/update with evaluateSourceDoc parameter = false, instead of super().
                if (!trvExpTrans_Split.RecId)
                {
                    trvExpTrans_Split.insert(false, false);
                }
                else
                {
                    trvExpTrans_Split.update(false);
                }
            }

            // Justification tables are passive joins, we need to take care of writing them manually
            if (SplitMyJustification.visible() && strLTrim(LineJustification_Split.Justification) != '')
            {
                LineJustification_Split_DS.write();
            }

            if (MyHeaderJustification.visible() && strLTrim(HeaderJustification.Justification) != '')
            {
                HeaderJustification_DS.write();
            }

            // When async write is enabled, super is not called for TrvExpTrans therefore we need to
            // manually insert outer joined data sources.
            if (trvExpTrans_Split.ExpType == TrvExpType::CarRental && trvEnhancedCarRentalData_Split.RecId == 0)
            {
                trvEnhancedCarRentalData_Split.TransactionRecord = trvExpTrans_Split.RecId;
                trvEnhancedCarRentalData_Split.insert();
            }

            if (trvExpTrans_Split.ExpType == TrvExpType::Hotel && trvEnhancedHotelData_Split.RecId == 0)
            {
                trvEnhancedHotelData_Split.TransactionRecord = trvExpTrans_Split.RecId;
                trvEnhancedHotelData_Split.insert();
            }

            if (trvExpTrans_Split.ExpType == TrvExpType::Airline && trvEnhancedItineraryData_Split.RecId == 0)
            {
                trvEnhancedItineraryData_Split.TransactionRecord = trvExpTrans_Split.RecId;
                trvEnhancedItineraryData_Split.insert();

                if (trvEnhancedTripLegDetail_Split.RecId == 0)
                {
                    trvEnhancedTripLegDetail_Split.ItineraryRecId = trvEnhancedTripLegDetail_Split.RecId;
                    if (trvEnhancedTripLegDetail_Split.validateWrite())
                    {
                        trvEnhancedTripLegDetail_Split.insert();
                    }
                }
            }
            ttscommit;

            // Reread is needed to update the DS record when super() is not used.
            this.reread();
            this.refresh();

            element.showItemizationError();
            element.showAntiCorruptionMismatchError();
            element.initializeReceiptsTabContext();

            if (!element.parmAsyncEnabled())
            {
                // If there were any previous report-level or day-level project policy violations on this report,
                // or now after the update, then other expenses might have updated statuses too, so we need to research.
                if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
                {
                    if (anyPreviousDayOrReportViolation || trvExpTable.anyDayOrReportProjectPolicyViolations())
                    {
                        TrvExpTrans_Split_DS.research(true);
                    }
                }

                element.showExpensePolicyViolations(trvExpTrans_Split);
            }
            else
            {
                element.doAsyncAction(trvExpTrans_Split.RecId);
            }

            // Refresh display methods
            receiptRequiredObservable.markChanged();
            totalsObservable.markChanged();
        }

]]></Source>
					</Method>
					<Method>
						<Name>errorStatusIndicator</Name>
						<Source><![CDATA[
        /// <summary>
        /// Returns error if the itemization is not completed for the corresponding
        /// adjusted policy violation level for the line. If the expense is not inserted yet,
        /// this will not show any error.
        /// </summary>
        display container errorStatusIndicator(TrvExpTrans _trvExpTrans)
        {
            container result;
            indicatorIconObservable.observe();

            if (indicatorIconObservable.isUpdateNeeded(_trvExpTrans.RecId))
            {
                result = element.expenseErrorStatusIndicator(_trvExpTrans);
                indicatorIconObservable.setCacheValue(_trvExpTrans.recId, result);
            }
            else
            {
                result = indicatorIconObservable.getCacheValue(_trvExpTrans.RecId);
            }

            return result;
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research the expense datasource. Shows policy violations on header if we are in tiles view.
        /// This would be triggered by an action such as adding/removing unreconciled expenses.
        /// </summary>
        /// <param name = "_retainPosition">True if current position needs to be retained; otherwise false.</param>
        public void research(boolean _retainPosition = false)
        {
            super(_retainPosition);

            if (ExpenseTiles.visible())
            {
                TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filter the Data Source based on the type of record passed by parameter.
        /// </summary>
        public void executeQuery()
        {
            this.query().dataSourceTable(tableNum(TrvExpTrans)).clearDynalinks();

            // Filter the split lines for a given split headerrecid.
            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, ParentRecId)).value(queryValue(splitHeaderRecId));
            this.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, CreatedDateTime), SortOrder::Descending);

            if (this.formRun().args() && this.formRun().args().getRequestContextQuery())
            {
                SysQuery::findOrCreateRange(this.queryBuildDataSource(), fieldNum(TrvExpTrans, ExpNumber)).value(expenseReport.ExpNumber);
            }

            if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
            {
                QueryBuildRange workerRange = SysQuery::findOrCreateRange(this.query().dataSourceTable(tablenum(TrvExpTrans)), fieldnum(TrvExpTrans, CreatingWorker));
                workerRange.value(queryValue(creatingWorkerRecId));
                workerRange.status(RangeStatus::Hidden);

                QueryBuildRange companyRange = SysQuery::findOrCreateRange(this.query().dataSourceTable(tablenum(TrvExpTrans)), fieldnum(TrvExpTrans, LegalEntity));
                companyRange.value(queryValue(CompanyInfo::current()));
                companyRange.status(RangeStatus::Hidden);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>cardMerchantId</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display method for merchant Id in card and tile.
        /// </summary>
        display TrvExpMerchantId cardMerchantId(TrvExpTrans _trvExpTrans)
        {
            return _trvExpTrans.MerchantId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isItemizationComplete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display method for itemization complete checkbox.
        /// </summary>
        /// <param name = "_trvExpTrans">Table being displayed</param>
        /// <returns>If the itemization of the line is complete</returns>
        display boolean isItemizationComplete(TrvExpTrans _trvExpTrans)
        {
            return _trvExpTrans.itemizationStatus() == TrvExpItemizationStatus::Completed;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isReceiptRequired</Name>
						<Source><![CDATA[
        /// <summary>
        /// Force execution of display method for updating form
        /// </summary>
        public display boolean isReceiptRequired(TrvExpTrans _expTrans)
        {
            receiptRequiredObservable.observe();
            return _expTrans.isReceiptRequired();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setDefaultProjectFromExpenseReportSplit</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set default project for the split expense line from expense report.
        /// </summary>
        public void setDefaultProjectFromExpenseReportSplit()
        {
            element.setDefaultProjectFromExpenseReport(TrvExpTrans_Split);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the dataset based on the calling table.
        /// </summary>
        public void init()
        {
            super();

            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, SplitLineType)).value(queryValue(TrvExpSplitLineType::SplitLine));
            this.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, CreatedDateTime), SortOrder::Descending);
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the dataset based as per the selected split line.
        /// </summary>
        public void selectionChanged()
        {
            // Deactivate the itemizations tab while moving between the expenses.
            if (SplitExpenseLineItemizeTabPage.isActivePage())
            {
                SplitExpenseLineItemizeTabPage.allowPageDeactivate();
            }

            super();

            // initialize active expense to the split transaction datasources
            element.initActiveExpense(true);

            // Once expense line selection changed, we need to initialize itemization control later.
            itemizedHeaderRecID = 0;

            // If async write has updated this expense, reread now to fetch the latest.
            if (expenseRecIdsToRefresh.in(trvExpTrans_Split.RecId))
            {
                TrvExpTrans_Split_DS.reread();
                expenseRecIdsToRefresh.remove(trvExpTrans_Split.RecId);
            }

            element.setVisibilityForDetailsView();

            // Since we'll only have limited number of views, we have a simple if-else to see which view is currently active.
            // For now, only details view needs to update visibilities when selection changes.
            if (ExpenseDetails.visible() || GridView.visible())
            {
                element.setFieldsAsMandatory();
                // In details view, we only show header violation messages once.
                if (!headerPolicyMessageShown)
                {
                    TrvExpTable.throwInfologsForPolicyViolationLevelMsg();
                    headerPolicyMessageShown = true;
                }


                trvSplitJustificationManager.initJustifications(element.inViewMode());

                trvHeaderJustificationManager.initJustifications(element.inViewMode());
                if (!element.inViewMode())
                {
                    SplitExpenseLineDetailsBodyGroup.setFocus();
                }
            }

            element.enableSplitRelatedButtons();

            element.enableActionsBasedOnSelection();

            // Enable payment details button only when the expense is processed for payment.
            ExpensePaymentDetails.enabled(TrvExpTrans_Split.ApprovalStatus == TrvAppStatus::Ledger);

            // Can delete expense lines when viewing form as a series of expense lines
            if (element.args().menuItemName() == menuItemDisplayStr(TrvExpenseLines))
            {
                if (TrvExpTrans_Split.TrvExpTable == 0)
                {
                    DeleteExpenseLine.enabled(true);
                }
                else
                {
                    TrvExpTable localTrvExpTable = TrvExpTable::findRecId(TrvExpTrans_Split.TrvExpTable);
                    DeleteExpenseLine.enabled(localTrvExpTable.validateDelete(false));
                }
            }

            // Line level workflow logic.
            if (trvExpTrans_Split.lineItemWorkflowEnabled())
            {
                // Validate whether the current user can edit or delete records..
                // Intentionally done after the visibility manager to override settings.
                TrvExpTrans_Split_DS.allowEdit(TrvExpTrans_Split.isEditable());
                TrvExpTrans_Split_DS.allowDelete(TrvExpTrans_Split.validateDelete(false));  // Validate that the expense line can be deleted, but don't throw an error.

                if (element.design().workflowType() != workFlowTypeStr(TrvLineItemTemplate) || element.design().workflowDatasource() != TrvExpTrans_Split_DS.id())
                {
                    element.design().workflowDatasource(TrvExpTrans_Split_DS.id());
                    element.design().workflowType(workFlowTypeStr(TrvLineItemTemplate));
                    element.updateWorkflowControls();
                }
            }

            element.setWorkflowButtons();

            // Reset the tab selection back to receipts for the newly selected expense.
            if (SplitExpenseLineReceiptTabPage.isActivePage())
            {
                element.initializeReceiptsTabContext();
            }
            else
            {
                SplitExpenseLineReceiptTabPage.activatePage();
            }

            if (SplitExpenseLineItemizeTabPage.isActivePage())
            {
                element.initializeItemizationsTabContext();
            }

            // Cannot change expense report unless line is in draft state
            TrvExpTrans_Split_DS.object(fieldNum(TrvExpTrans, ExpNumber)).allowEdit(TrvExpTrans_Split.ApprovalStatus == TrvAppStatus::Create);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CostType</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Change the lookup options based off whether the expense is a credit card, mobile or regular expense.
            /// </summary>
            /// <param name = "_formControl">Control performing the lookup</param>
            /// <param name = "_filterStr">The filter string</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (trvExpTrans_split.PBS_Statement)
                {
                    TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::CreditCardExpense);
                }
                else if (trvExpTrans_split.Mobile_Statement)
                {
                    TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::MobileExpense);
                }
                else
                {
                    ProjId projId = TrvExpTable.ProjId ? TrvExpTable.ProjId : trvExpTrans_split.ProjId;

                    if (projId != '')
                    {
                        TrvExpenseLookupHelper::createProjectCategoryLookup(_formControl, trvExpTrans_split.CreatingWorker, projId);
                    }
                    else
                    {
                        TrvExpenseLookupHelper::createExpenseCategoryLookup(_formControl, TrvCategoryLookupType::RegularExpense);
                    }
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                trvExpTrans_Split_ds.setDefaultProjectFromExpenseReportSplit();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ExchangeCode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.setVisibilityWhenExchCodeChanged();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>MerchantId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Filters the merchant according to the current expense type.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpMerchant::lookupMerchantId(_formControl, TrvExpTrans_Split.ExpType);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjActivityNumber</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project activity number under the current project.
            /// </summary>
            /// <param name="_formControl">
            /// Form control where the activity field is selected.
            /// </param>
            /// <param name="_filterStr">
            /// String to filter the records.
            /// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                changecompany(TrvExpTrans_Split.legalEntityName())
                {
                    HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(TrvExpTrans_Split.ProjId));
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project activities form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(TrvExpTrans_Split.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(smmActivities), smmActivities::find(TrvExpTrans_Split.ProjActivityNumber));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project id, restricting the query to currently running projects.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLookup(creatingWorkerRecId, _formControl,
                    TrvExpTrans_Split.isIntercompany() ? TrvExpTrans_Split.InterCompanyCategory : TrvExpTrans_Split.CostType,
                    TrvExpTrans_Split.legalEntityName(), creatingWorkerLegalEntity);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Sets the 'visible' and 'mandatory' property of Inter company project category field.
            /// </summary>
            public void modified()
            {
                super();

                element.setVisibilityForInterCompanyCategory();
                SplitTrvExpTrans_ProjStatusId.mandatory(TrvExpTrans.ProjId != '');
                TrvExpTrans_ProjStatusId_Grid.mandatory(TrvExpTrans.ProjId != '');
                TrvExpTrans_Split_ds.refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project details form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                MenuFunction    menuFunction    = new MenuFunction(menuItemDisplayStr(ProjTable), MenuItemType::Display);
                Args            args            = new Args();
                FormRun         formRun;
                ProjTable       projTable;

                // We remove the call to super and handle the logic to open the project with the relevant company context.
                // super();

                // Change company to the legal entity of the expense.
                changecompany(TrvExpTrans_Split.legalEntityName())
                {
                    projTable = ProjTable::find(TrvExpTrans_Split.ProjId);

                    if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                    {
                        ProjectOperationsDWHelper dw = ProjectOperationsDWHelper::construct();
                        dw.openProjectDetailsInCE(projTable.ProjId, projTable.DataAreaId);
                    }
                    else
                    {
                        args.lookupRecord(projTable);

                        formRun = menuFunction.create(args);
                        formRun.run();
                        formRun.wait();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjStatusId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup for project line property in the specific legal entity.
            /// </summary>
            /// <param name = "_formControl">The control performing the lookup.</param>
            /// <param name = "_filterStr">The filter string.</param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TrvExpenseProjectHelper::createProjectLinePropertyLookup(_formControl, TrvExpTrans_Split.legalEntityName());
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the project line property form based on the company context.
            /// </summary>
            public void jumpRef()
            {
                changecompany(TrvExpTrans_Split.legalEntityName())
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(ProjLineProperty), ProjLineProperty::find(TrvExpTrans_Split.ProjStatusId));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TransDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Only exchange code needs to update visibility when TransDate is modified.
            /// </summary>
            public void modified()
            {
                super();

                // Update exchange rate control after re-calculation of exchange rate
                element.setVisibilityWhenExchCodeChanged();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvExpTransGuest_Split</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates if the context sets the recid from TrvExpTrans.
        /// </summary>
        /// <returns></returns>
        public boolean validateWrite()
        {
            boolean ret = true;

            if (trvExpTransGuest_Split.TrvExpTrans == 0)
            {
                ret = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the guest recid before writing the <c>TrvExpTransGuest</c> record.
        /// </summary>
        public void write()
        {
            if (trvExpGuest_Split.RecId != 0)
            {
                if (trvExpTransGuest_Split.TrvExpGuest != 0 && trvExpTransGuest_Split.TrvExpGuest != TrvExpGuest_Split.RecId)
                {
                    //
                    // If transaction record had been saved before and is now pointing at a new guest record
                    // check whether old guest record is no longer used and should be deleted
                    //
                    TrvExpGuest::deleteUnusedGuests(trvExpTransGuest_Split);
                }

                trvExpTransGuest_Split.TrvExpGuest = TrvExpGuest_Split.RecId;
            }
            // If guest record does not exist for a new or existing record, throw error.
            else if (trvExpGuest_Split.RecId == 0)
            {
                throw error("@SYS4008059");
            }

            super();

            // If the expense type is gift, we set the summary amounts after we add/update amount.
            if (trvExpTrans_Split.ExpType == TrvExpType::Gift)
            {
                SplitExpenseLineGuestTabPage.setSummaryAmounts();
            }

            // Updates to guest might have caused changes in policy violations for the expense.
            element.showExpensePolicyViolations();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Delete guest from the expense. Deletion of guests can trigger changes in policy violations for the expense.
        /// </summary>
        public void delete()
        {
            super();

            // If the expense type is gift, we set the summary amounts after we delete guest.
            if (trvExpTrans_Split.ExpType == TrvExpType::Gift)
            {
                SplitExpenseLineGuestTabPage.setSummaryAmounts();
            }

            element.showExpensePolicyViolations();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpGuest_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Explicitly insert guest before insert of <c>TrvExpTransGuest</c> record.
        /// </summary>
        public void write()
        {
            if (trvExpGuest_Split.RecId != 0)
            {
                TrvExpGuest orig = trvExpGuest_Split.orig();

                if (orig.GuestId == trvExpGuest_Split.GuestId
                    && orig.Title == trvExpGuest_Split.Title
                    && orig.Company == trvExpGuest_Split.Company)
                {
                    // update existing guest record
                    super();
                }
                else
                {
                    // create a new guest record because key details have changed
                    trvExpGuest_Split.data(TrvExpGuest::findOrCreateNewGuest(TrvExpGuest_Split.GuestId, TrvExpGuest_Split.Company, TrvExpGuest_Split.Title, TrvExpGuest_Split.GuestType, creatingWorkerRecId));
                }
            }
            else
            {
                // Insert new guest data
                trvExpGuest_Split.data(TrvExpGuest::findOrCreateNewGuest(TrvExpGuest_Split.GuestId, TrvExpGuest_Split.Company, TrvExpGuest_Split.Title, TrvExpGuest_Split.GuestType, creatingWorkerRecId));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>GuestId</DataField>
						<Methods>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Override jumpRef method to supress the view details functionality.
            /// </summary>
            public void jumpRef()
            {
                // Suppressing super() call to remove the view details functionality as the
                // there is no form corresponding to TrvExpGuest table.
                // super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedHotelData_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedHotelData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedHotelData_Split.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedCarRentalData_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedCarRentalData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedCarRentalData_Split.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedItineraryData_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedItineraryData is already inserted.
        /// </summary>
        public void write()
        {
            if (trvEnhancedItineraryData_Split.RecId != 0)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvEnhancedTripLegDetail_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call super only when TrvEnhancedTripLegDetail is already inserted.
        /// </summary>
        public void write()
        {
            if (TrvEnhancedTripLegDetail_Split.RecId != 0 && trvEnhancedTripLegDetail_Split.validateWrite())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Skip validateWrite method as it will always fail due to miss RefRecId.
        /// </summary>
        /// <returns>True.</returns>
        public boolean validateWrite()
        {
            return true;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LineJustification_Split</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Save the justification entered.
        /// </summary>
        public void write()
        {
            super();

            indicatorIconObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>TrvExpTrans_ItemizedLines_Split</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display only the itemized lines excluding personal line.
        /// </summary>
        public void init()
        {
            super();
            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, LineType)).value(queryValue(TrvExpLineType::ItemizedLine));
            SysQuery::findOrCreateRange(this.query().dataSourceTable(tableNum(TrvExpTrans)), fieldnum(TrvExpTrans, ExpType)).value(SysQuery::valueNot(TrvExpType::Personal));
            this.query().dataSourceTable(tableNum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, LineNumber));

            SplitTrvItemizationCalendarControl.getTotalValue += eventhandler(element.getItemizedExpenseTotal);
            SplitTrvItemizationCalendarControl.getItemizedValue += eventhandler(element.getExpenseItemizationTotal);
            SplitTrvItemizationCalendarControl.getRemainingValue += eventhandler(element.getRemainingExpenseTotal);
            SplitTrvItemizationCalendarControl.getDayValue += eventhandler(element.getDayItemizationTotal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// When an itemized line is inserted or updated, update the policy violations for the line and the itemized line and check if itemization needs to be completed.
        /// </summary>
        public void write()
        {
            // If this expense is currently being updated async with more than the allowed count of
            // parallel updates, wait for the last update to return.
            if (expenseAsyncTaskMap.exists(TrvExpTrans_ItemizedLines_Split.RecId)
                && expenseAsyncTaskMap.lookup(TrvExpTrans_ItemizedLines_Split.RecId).elements() >= maxParallelAsyncUpdates)
            {
                TrvExpenseAsyncHelper::waitForLastAsyncTask(expenseAsyncTaskMap, TrvExpTrans_ItemizedLines_Split.RecId);
            }

            if (!element.parmAsyncEnabled())
            {
                super();
                element.showExpensePolicyViolations();
                element.showExpensePolicyViolations(TrvExpTrans_ItemizedLines_Split);
            }
            else
            {
                // If async write is enabled, call insert/update with evaluateSourceDoc parameter = false, instead of super().
                if (!TrvExpTrans_ItemizedLines_Split.RecId)
                {
                    TrvExpTrans_ItemizedLines_Split.insert(false, false);
                }
                else
                {
                    TrvExpTrans_ItemizedLines_Split.update(false);
                }

                // Reread is needed to update the DS record when super() is not used.
                this.reread();
                this.refresh();

                element.doAsyncItemizeAction(TrvExpTrans_ItemizedLines_Split.RecId);
                indicatorIconObservable.markChanged();
            }

            TrvExpTrans_Split.reread();
            TrvExpTrans_Split_ds.refresh();

            element.enableItemizedDetailsButton(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// For itemized line, initValue is called just before saving a new line.
        /// Comment out the super here to avoid running the initValue, it is not needed.
        /// </summary>
        public void initValue()
        {
            TrvExpTrans_ItemizedLines_Split.TransDate = SplitTrvItemizationCalendarControl.getFilterDate();
            TrvExpTrans_ItemizedLines_Split.initFromTrvExpItemizedHeader(TrvExpTrans_Split);
            //super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reread the datasource in case there's a pending post-async refresh operation. Show relevant
        /// policy violations or async save errors.
        /// </summary>
        public void selectionChanged()
        {
            super();
            activeItemizedExpense = TrvExpTrans_ItemizedLines_Split;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_Split_DS;

            // If async write has updated this expense, reread now to fetch the latest.
            if (expenseRecIdsToRefresh.in(TrvExpTrans_ItemizedLines_Split.RecId))
            {
                TrvExpTrans_ItemizedLines_Split_DS.reread();
                expenseRecIdsToRefresh.remove(TrvExpTrans_ItemizedLines_Split.RecId);

                element.showExpensePolicyViolations();
                element.showExpensePolicyViolations(TrvExpTrans_ItemizedLines_Split);
            }

            element.enableItemizedDetailsButton(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the itemized expenses.
        /// </summary>
        /// <returns>
        /// Returns the selected record.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();
            activeItemizedExpense = TrvExpTrans_ItemizedLines_Split;
            activeItemizedExpenseDataSource = TrvExpTrans_ItemizedLines_Split_DS;

            SplitItemizationCopyToNextDayButton.enabled(isItemizationCompleted);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh the itemized header datasource after deleting the itemized line.
        /// </summary>
        public void delete()
        {
            super();
            TrvExpTrans_Split.reread();
            TrvExpTrans_Split_ds.refresh();

            element.enableItemizedDetailsButton(true);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AmountCurr</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (isActiveExpenseCreditTrans && !activeExpense.isCreditCardTransanctionInLocalCurrency())
                {
                    TrvExpTrans_ItemizedLines_Split.CreditCardTransactionCurrencyAmount = TrvExpTrans_ItemizedLines_Split.AmountCurr;
                }

                SplitItemizationCopyToNextDayButton.enabled(isItemizationCompleted);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DetailsView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to details view.
        /// </summary>
        public void clicked()
        {
            element.switchToDetailsView();

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvExpenses, DetailsView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GridViewButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in grid view
        /// </summary>
        public void clicked()
        {
            element.switchToGridView();

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvExpenses, GridViewButton));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByCategoryView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by category.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::Category);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvExpenses, GroupByCategoryView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByDateView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by transaction date.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::date);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvExpenses, GroupByDateView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GroupByProjectView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switch to expenses in tiles view grouping by project.
        /// </summary>
        public void clicked()
        {
            element.switchToTileView(TrvExpenseGroupBy::Project);

            // Set personalization setting
            element.configurationHelper().saveConfigurationValue(personalizedViewKey, formControlStr(TrvExpenses, GroupByProjectView));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateExpenseReport</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Makes the call to the create expense report form with the selected unreconciled expenses to be attached.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            TrvNewExpenseReportParameter newExpenseReportParameter = new TrvNewExpenseReportParameter();

            List selectedExpensesList = TrvExpenseLineHelper::getSelectedExpensesForAttachment(TrvExpTrans_DS);

            // User selected cancel when prompted on whether to move already attached lines to the new expense report
            if (!selectedExpensesList)
            {
                return;
            }

            newExpenseReportParameter.parmExpenseLines(selectedExpensesList);
            newExpenseReportParameter.parmTrvWorkerParameter(TrvWorkerParameter::newStandard(creatingWorkerRecId, CompanyInfo::current()));
            newExpenseReportParameter.parmCanSubmitImmediately(true);

            // Call the form to create a new expense report.
            args.caller(element);
            args.openMode(OpenMode::New);
            args.parmObject(newExpenseReportParameter);

            FormRun fr = new MenuFunction(MenuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display).create(args);
            fr.run();
            fr.wait(true);

            //Refresh datasource after dialog completes
            TrvExpTrans_ds.research();
            TrvExpTrans_Split_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BulkEditExpenseLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determine which fields are editable and then open bulk edit form
        /// </summary>
        public void clicked()
        {
            element.performBulkEdit();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CopyExpenseLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current expense line and related data.
        /// </summary>
        public void clicked()
        {
            super();
            element.copyExpenseLine();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MergeExpenseLine</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            TrvExpTrans activeRecord = TrvExpTrans;

            super();

            TrvExpTrans_ds.positionToRecord(activeRecord);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitUnattachedExpenseButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open Split details form.
        /// </summary>
        public void clicked()
        {
            element.openSplitDetailsForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReceiptsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (!ExpenseDetails.visible())
            {
                // Selection changed will attempt to change back to the details tabpage after this method finishes
                calledFromReceiptsButton = true;
            }

            element.switchToDetailsView();
            if (element.isSplitExpenseLine())
            {
                SplitAttachReceipts.setFocus();
            }
            else
            {
                AttachReceipts.setFocus();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemizeButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (!ExpenseDetails.visible())
            {
                // Selection changed will attempt to change back to the details tabpage after this method finishes
                calledFromItemizeButton = true;
            }

            element.switchToDetailsView();

            if (element.isSplitExpenseLine())
            {
                SplitItemizationSubCategoryGrid.setFocus();
            }
            else
            {
                ItemizationSubCategoryGrid.setFocus();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddUnattachedExpenses</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.openUnattachedExpenses();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvAccountingDistExpenseReport</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open accounting distributions form in edit mode.
        /// </summary>
        public void clicked()
        {
            ExpenseInstrumentationLogger adLogger = ExpenseInstrumentationLogger::createLogger('TrvAccountingDistExpenseReport');
            ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(adLogger);

            using (var activityContext = taxActivities.accountingDistributionContext())
            {
                adLogger.logInformation(strFmt('activeExpense.RecId: %1, Expense Number: %2', activeExpense.RecId, activeExpense.ExpNumber));
                // Cannot edit distributions on an expense that is not on an expense report
                if (activeExpense.ExpNumber == "")
                {
                    warning("@Expense:AttachExpenseToExpenseReportToEditDistributions");
                    return;
                }

                // Distributions form will update source document on init.
                // If there is an active async update on the current expense, wait for it to complete
                // to avoid update conflict in distributions form.
                TrvExpenseAsyncHelper::waitForAllAsyncTasks(expenseAsyncTaskMap, activeExpense.RecId, activeExpenseDataSource);

                Args args = new Args();
                args.caller(this.formRun());
                args.parmObject(activeExpenseDataSource);

                // The selected expense line will be passed to the accounting distribution form to display only respective distribution line.
                args.record(activeExpense);

                new MenuFunction(MenuItemDisplayStr(TrvAccountingDistExpenseReport), MenuItemType::Display).run(args);

                //super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostSelectedExpenseLine</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh TrvExpTable data source and Post button in case the expense report approval status changed.
        /// </summary>
        public void clicked()
        {
            // For a submitted expense, the approver may perform tax corrections before posting.
            // Wait for any pending async update tasks on the expense to finish to get the latest source document.
            TrvExpenseAsyncHelper::waitForAllAsyncTasksForAllExpenses(expenseAsyncTaskMap);
            activeExpense.LineLevelPosting = NoYes::Yes;

            super();

            // Refresh post buttons' visibility
            activeExpenseDataSource.research();
            element.enablePostingActionsBasedOnApprovalStatus();
            ExpensePaymentDetails.enabled(activeExpense.ApprovalStatus == TrvAppStatus::Ledger);
            ExpensePaymentDetailsGridView.enabled(TrvExpTrans.ApprovalStatus == TrvAppStatus::Ledger);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubledgerJournalAccountEntry</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set args needed to call Source document form
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            FormRun formRun;
            SourceDocumentLine sourceDocumentLine;
            SourceDocumentLineList  sourceDocumentLineList = SourceDocumentLineList::construct();
            TrvExpTrans selectedExpense = activeExpenseDataSource.getFirst(true);

            if (selectedExpense == null)
            {
                selectedExpense = activeExpenseDataSource.cursor();
            }

            // For a submitted expense, the approver may perform tax corrections before clicking the subledger journal button.
            // Wait for any pending async update tasks on the expense to finish before opening the form that needs the latest source document.
            TrvExpenseAsyncHelper::waitForAllAsyncTasks(expenseAsyncTaskMap, selectedExpense.RecId, activeExpenseDataSource);

            TrvSubmitExpenseReportToWorkflow::updateTrvAccDisctributions(trvExpTable);

            args.name(formStr(SubledgerJournalAccountEntry));
            args.caller(element);
            args.record(trvExpTable);

            selectedExpense.createTaxUncommitted();
            sourceDocumentLine = SourceDocumentLine::find(selectedExpense.SourceDocumentLine);
            sourceDocumentLineList.addEnd(sourceDocumentLine);
            args.parmObject(sourceDocumentLineList);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTransCheckBudget</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the error indicator after checking budget.
        /// </summary>
        public void clicked()
        {
            // For a submitted expense, the approver may perform tax corrections before checking budget.
            // Wait for any pending async update tasks on the expense to finish to get the latest source document.
            TrvExpenseAsyncHelper::waitForAllAsyncTasks(expenseAsyncTaskMap, activeExpense.RecId, activeExpenseDataSource);

            super();

            indicatorIconObservable.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCheckResults</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens budget check results form.
        /// </summary>
        public void clicked()
        {
            // For a submitted expense, the approver may perform tax corrections before checking budget results.
            // Wait for any pending async update tasks on the expense to finish to get the latest source document.
            TrvExpenseAsyncHelper::waitForAllAsyncTasks(expenseAsyncTaskMap, activeExpense.RecId, activeExpenseDataSource);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HeaderReceipts</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the header receipts slider.
        /// </summary>
        public void clicked()
        {
            expenseReport.reread();
            
            caller = element.args().caller();

            TrvReceiptsHelper::launchHeaderReceiptDialog(expenseReport, DocuRef_DS, canEditReceipts);
            TrvReceiptsHelper::openHeaderReceiptDialog(expenseReport, DocuRef_DS, canEditReceipts, caller);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostExpenseReport</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh TrvExpTrans data source and post button in case the expense report approval status changed.
        /// </summary>
        public void clicked()
        {
            // For a submitted expense, the approver may perform tax corrections before posting.
            // Wait for any pending async update tasks on the expense to finish to get the latest source document.
            TrvExpenseAsyncHelper::waitForAllAsyncTasksForAllExpenses(expenseAsyncTaskMap);

            super();

            // Refresh the approval statuses, disallow edit now that the expenses are posted and edit the post buttons' visibility.
            activeExpenseDataSource.research(true);
            activeExpenseDataSource.allowEdit(activeExpense.ApprovalStatus != TrvAppStatus::Ledger);
            element.enablePostingActionsBasedOnApprovalStatus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AccountingDistributionsDocumentView</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open accounting distributions form for the report in view mode.
        /// </summary>
        public void clicked()
        {
            // Distributions form will update source document on init.
            // If there is an active async update on any expense in the report, wait for it to complete
            // to avoid update conflict in distributions form.
            TrvExpenseAsyncHelper::waitForAllAsyncTasksForAllExpenses(expenseAsyncTaskMap);
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpenseEmployee</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the <c>TrvExpense</c> report without showing the report dialog.
        /// </summary>
        public void clicked()
        {
            element.openTrvExpenseReport(menuItemOutputStr(TrvExpenseEmployee));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpense</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the <c>TrvExpense</c> report showing the report dialog.
        /// </summary>
        public void clicked()
        {
            element.openTrvExpenseReport(menuItemOutputStr(TrvExpense));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTableDistributionReport</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Start the <c>TrvExpTableDistributionReport</c> report with a <c>TrvExpTable</c>
        /// record to ensure consistency with the 'Distribute amounts' button.
        /// </summary>
        public void clicked()
        {
            // Ensure that the report generated will contain the most up to date data available.
            TrvExpenseAsyncHelper::waitForAllAsyncTasksForAllExpenses(expenseAsyncTaskMap);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseGridStatusFilter</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret;

            ret = super();

            TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).clearRange(fieldnum(TrvExpTrans, ApprovalStatus));
            TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).clearRange(fieldnum(TrvExpTrans, ExpNumber));

            switch (ExpenseGridStatusFilter.selection())
            {
                case TrvExpensesFilter::NotYetSubmitted:
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ApprovalStatus)).value(queryvalue(TrvAppStatus::Create));
                    break;

                case TrvExpensesFilter::SubmittedButNotApproved:
                    container submittedButNotApproved = [queryvalue(TrvAppStatus::Pending), queryValue(TrvAppStatus::Returned)];
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ApprovalStatus)).value(con2str(submittedButNotApproved));
                    break;

                case TrvExpensesFilter::Approved:
                    container approvedStatus = [queryvalue(TrvAppStatus::Approved), queryValue(TrvAppStatus::Ledger)];
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ApprovalStatus)).value(con2str(approvedStatus));
                    break;

                case TrvExpensesFilter::Unattached:
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ApprovalStatus)).value(queryvalue(TrvAppStatus::Create));
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ExpNumber)).value(SysQuery::valueEmptyString());
                    break;

                case TrvExpensesFilter::All:
                default:
                    TrvExpTrans_DS.query().dataSourceName(tableStr(TrvExpTrans)).addRange(fieldnum(TrvExpTrans, ApprovalStatus)).value(SysQuery::valueNot(TrvAppStatus::Matched));
                    break;
            }

            TrvExpTrans_DS.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_Txt2</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open expense report purposes lookup.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportPurposeLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_Destination</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open lookup with expense report location.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLocationLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_InterCompanyLE</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Trigger a refresh on the current company of the Dimension Entry control after
        /// the user modifies the intercompany legal entity.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateDefaultDimensionCurrentCompany();

                // Update exchange rate control after re-calculation of exchange rate
                element.setVisibilityWhenExchCodeChanged();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for the inter companies.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createInterCompanyLegalEntityLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Trigger a refresh on the current company of the Dimension Entry control after
        /// the user modifies the project ID to account for the intercompany with project
        /// special case.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateDefaultDimensionCurrentCompany();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for project id, resticting the query to currently running projects.
        /// </summary>
        public void lookup()
        {
            TrvExpenseProjectHelper::createProjectLookup(creatingWorkerRecId, this, '', TrvExpTable.intercompanyLegalEntityName(), creatingWorkerLegalEntity);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the project details form based on the company context.
        /// </summary>
        public void jumpRef()
        {
            Args        args;
            FormRun     projTableForm;
            ProjTable   projTable;

            // We remove the call to super and handle the logic to open the project with the relevant company context.
            // super();

            // Change company to the legal entity of the expense.
            changecompany(TrvExpTable.intercompanyLegalEntityName())
            {
                projTable = ProjTable::find(TrvExpTable.ProjId);

                args = new Args();
                args.menuItemName(menuitemdisplaystr(ProjTable));
                args.record(projTable);
                args.name(formstr(ProjTable));
                args.openMode(OpenMode::View);

                projTableForm = classFactory.formRunClass(args);
                projTableForm.init();
                projTableForm.run();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTable_FinalApprover</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup only workers with user associations
        /// </summary>
        public void lookup()
        {
            HcmWorkerLookup::newOnlyWorkersWithUserRelation().lookupWorker(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SetAsDefaultFinalApprover</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the current final approver as the default.
        /// </summary>
        public void clicked()
        {
            TrvInterimFinalApproverHelper::setDefaultFinalApprover(TrvExpTable);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MapTravelRequisition</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for travel requisitions with approval status 'Approved' and reconciliation status 'Open'.
        /// </summary>
        public void lookup()
        {
            TrvRequisitionLookupHelper::createRequisitionLookup(this, CompanyInfo::findDataArea(trvExpTable.InterCompanyLE).RecId, trvExpTable.CreatingWorker);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Based on the field selection, Updates the field TravelRequisitionAmount with amount and currency code.
        /// </summary>
        /// <returns>The same value returned by super().</returns>
        public boolean modified()
        {
            boolean ret;
 
            ret = super();
 
            if (ret && trvReqNumber != MapTravelRequisition.text())
            {
                // Update travel requisition data on the expense report.
                trvReqNumber = MapTravelRequisition.text();
                TrvRequisitionTable trvRequisitionTable = TrvRequisitionTable::findByRequisitionNumberAndCompany(trvReqNumber, CompanyInfo::findDataArea(trvExpTable.InterCompanyLE).RecId);
                boolean existsTrvReqNo = trvReqNumber != '';
 
                if (trvRequisitionTable.CreatingWorker == trvExpTable.CreatingWorker || !existsTrvReqNo)
                {
                    TrvExpTable.changeRequisition(trvReqNumber, trvRequisitionTable);
                    TrvExpTable_ds.reread();
                    activeExpenseDataSource.reread();
                    activeExpenseDataSource.refresh();
 
                    TravelRequisitionAmount.text(TrvExpenseHelper::amountWithCurrencyCode(trvRequisitionTable.totalEstimate(), trvRequisitionTable.LegalEntity));
                    TrvExpTable.setDefaultDimension(trvReqNumber);
 
                    // Switch to details view when there is a travel requisition mapping.
                    if (trvReqNumber)
                    {
                        element.switchToDetailsView();
                    }

                    element.resetMappedReqLine(existsTrvReqNo);
                    element.setVisibilityForTravelReqFields(existsTrvReqNo, existsTrvReqNo);
                }
                else
                {
                    ret = checkFailed("@Expense:TravelRequisitionIsInvalid");
                }
            }
 
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FinancialDimensionsHeaderTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the financial dimensions control
        /// </summary>
        public void pageActivated()
        {
            TrvExpTable_DefaultDimension.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
            TrvExpTable_DefaultDimension.parmCompany(TrvExpTable.ReferenceDataAreaId);
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpensesGroupByComboBox</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Group the expenses based on the combobox selection.
        /// </summary>
        /// <returns>
        /// True if the grouping is successful; otherwise, false.
        /// </returns>
        public int selectionChange()
        {
            int ret;

            ret = super();

            TrvExpTrans_DS.queryBuildDataSource().sortClear();

            switch (ExpensesGroupByComboBox.selection())
            {
                case TrvExpenseGroupBy::Category:
                    TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, CostType), SortOrder::Ascending);
                    break;

                case TrvExpenseGroupBy::Project:
                    TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, ProjId), SortOrder::Ascending);
                    break;

                case TrvExpenseGroupBy::Date:
                    TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, TransDate), SortOrder::Ascending);
                    break;

                case TrvExpenseGroupBy::None:
                default:
                    TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, ExpNumber), SortOrder::Ascending);
                    TrvExpTrans_DS.query().dataSourceTable(tablenum(TrvExpTrans)).addSortField(fieldNum(TrvExpTrans, TransDate), SortOrder::Ascending);
                    break;
            }

            TrvExpTrans_DS.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveExpense</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove the selected expenses from the expense report [details view]
        /// </summary>
        public void clicked()
        {
            // Invoke method to process expense line deletion.
            // This method should be invoked for deletion from both details view and grid view.
            // There is no special processing for deletion from details view.
            element.onExpenseLineDeleted();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BulkEditLines</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determine which fields are editable and then open bulk edit form
        /// </summary>
        public void clicked()
        {
            element.performBulkEdit();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CopyLine</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current expense line and related data.
        /// </summary>
        public void clicked()
        {
            super();
            element.copyExpenseLine();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open split details form.
        /// </summary>
        public void clicked()
        {
            element.openSplitDetailsForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_CostType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the visibility when cost type is modified.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean modified()
        {
            // Default ret to true so if the user cancels the change, no error is shown.
            boolean ret = true;

            // Get the category record based on the category ID entered.
            TrvCostType newCategory = TrvCostType::find(this.Text());
            TrvExpType previousExpType = TrvExpTrans.ExpType;
            if (element.confirmCategoryChange(newCategory))
            {
                ret = super();

                if (ret)
                {
                    element.categoryChanged(previousExpType, newCategory.ExpType);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>cashAdvanceNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup valid cash advances that can be returned.
        /// </summary>
        public void lookup()
        {
            TrvReturnCashHelper::lookupCashAdvanceToReturn(this, creatingWorkerRecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_AmountCurr</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Execute the query of itemized lines datasource.
        /// </summary>
        /// <returns>
        /// True if modified successfully; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.setVisibilityForTaxCorrections();
            TrvExpTrans_ItemizedLines_ds.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTransPersonal_CostType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override the lookup to filter Personal category only.
        /// </summary>
        public void lookup()
        {
            TrvPersonalExpenseHelper::lookupPersonalCategory(this, trvExpTrans.PayMethod);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTransPersonal_AmountCurr</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set personal category as mandatory if AmountCurr is set.
        /// </summary>
        /// <returns>True if modified successfully, otherwise false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TrvExpTransPersonal_CostType.enabled(trvExpTransPersonal.AmountCurr != 0);
            if (trvExpTransPersonal.AmountCurr == 0 && TrvExpTransPersonal_CostType.visible())
            {
                trvExpTransPersonal.CostType = '';
            }

            activeItemizedExpenseDataSource.executeQuery();
            element.initializeItemizationsTabContextVisibility();

            if (TrvExpenseSplitForPersonalAmountFeature::isEnabled())
            {
                TrvExpTransSplit::createSplitHeaderOriginatingLine(activeExpense);

                ttsbegin;
                TrvExpTransSplit splitOriginatingLine = TrvExpTransSplit::splitHeaderOriginatingLineExists(activeExpense.RecId);

                if (splitOriginatingLine)
                {
                    TrvTransactionCurrencyAmount amountForOriginatingLine = activeExpense.CreditCardTransactionCurrencyAmount - trvExpTransPersonal.AmountCurr;

                    if ((activeExpense.CreditCardTransactionCurrencyAmount > 0 && amountForOriginatingLine < 0)
                        || (activeExpense.CreditCardTransactionCurrencyAmount < 0 && amountForOriginatingLine > 0))
                    {
                        throw error("@Expense:IncorrectSplit");
                    }

                    splitOriginatingLine.selectForUpdate(true);
                    splitOriginatingLine.SplitAmount = amountForOriginatingLine;
                    splitOriginatingLine.SplitAllocationFactor = abs ((amountForOriginatingLine / activeExpense.CreditCardTransactionCurrencyAmount) * 100);

                    splitOriginatingLine.write();
                }

                TrvExpTransSplit splitPersonalLine;
                splitPersonalLine.SplitHeaderRecId = activeExpense.RecId;
                splitPersonalLine.CostType = trvExpTransPersonal.CostType;
                splitPersonalLine.InterCompanyLE = trvExpTransPersonal.InterCompanyLE;

                splitPersonalLine.SplitAmount = trvExpTransPersonal.AmountCurr;
                splitPersonalLine.SplitAllocationFactor = abs ((trvExpTransPersonal.AmountCurr / activeExpense.CreditCardTransactionCurrencyAmount) * 100);

                splitPersonalLine.write();
                ttscommit;

                TrvExpTransSplitHelper::createOrUpdateSplitLines(activeExpense.RecId);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTransPersonal_CreditCardTransactionCurrencyAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set personal category as mandatory if CreditCardTransactionCurrencyAmount is set.
        /// </summary>
        /// <returns>True if modified successfully, otherwise false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TrvExpTransPersonal_CostType.enabled(trvExpTransPersonal.CreditCardTransactionCurrencyAmount != 0);
            if (trvExpTransPersonal.CreditCardTransactionCurrencyAmount == 0 && TrvExpTransPersonal_CostType.visible())
            {
                trvExpTransPersonal.CostType = '';
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_VehicleType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Builds a lookup for vehicle types for the selected cost type
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportVehicleTypeLookup(this, TrvExpTrans.CostType);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the category rate form based on the company context.
        /// </summary>
        public void jumpRef()
        {
            changecompany(TrvExpTrans.legalEntityName())
            {
                MenuFunction    menuFunction    = new MenuFunction(menuitemDisplayStr(TrvCostTypeRates), MenuItemType::Display);
                Args            args            = new Args();
                FormRun         formRun;

                args.record(TrvCostType::find(TrvExpTrans.CostType));
                args.caller(element);

                menuFunction.copyCallerQuery(CopyCallerQuery::No);
                formRun = menuFunction.create(args);
                formRun.run();
                formRun.wait();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_DateFrom</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call reset to fetch per diem lines again as the perdiem lines will now change.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetPerDiemVariablesForPerdiemLines();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_DateTo</Name>
				<Type>DateTime</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Call reset to fetch per diem lines again as the perdiem lines will now change.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.resetPerDiemVariablesForPerdiemLines();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_TrvLocations</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Changing location could behave like changing exchange code in per diem scenario.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            element.setVisibilityWhenExchCodeChanged();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_BusinessPurpose</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the line purpose according to the current expense type.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpensePurposeLookup(this, TrvExpTrans.CostType);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_InterCompanyLE</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the 'visible' and 'mandatory' property of Inter company project category field.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.setVisibilityForInterCompanyCategory();
                // Call set visibility for project fields to show/hide project fields for intercompany expense
                // when the category does not allow project.
                trvExpenseLinesVisibilityController.setVisibilityForProjectFieldsForInterCompanyExpense();

                TrvExpTrans_ProjStatusId.mandatory(TrvExpTrans.ProjId != '');
                TrvExpTrans_ProjStatusId_Grid.mandatory(TrvExpTrans.ProjId != '');

                // Set the company context on financial dimensions tab.
                element.updateDefaultDimensionCurrentCompany();
                element.initDimensionEntry();

                if (TrvExpTrans.orig().InterCompanyLE != TrvExpTrans.InterCompanyLE)
                {
                    TrvExpTrans.reinitializeSourceDocumentLine();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for the inter companies.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createInterCompanyLegalEntityLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean         ret;
            boolean         confirmation;

            ret = super();

            if (ret && TrvExpTrans.isIntercompany())
            {
                // Need update the company context on financial dimensions tab as dimensions would vary
                // between intercompany with and without project.
                element.updateDefaultDimensionCurrentCompany();
                element.initDimensionEntry();
            }

            // Update expense line itemizations with the project information from itemized header.
            if (TrvExpTrans.RecId != 0 && TrvExpTrans.LineType == TrvExpLineType::ItemizedHeader)
            {
                TrvExpTrans		itemizedLines;

                // Look for itemized lines populate the dialog only if they exist.
                select count(RecId) from itemizedLines where itemizedLines.ParentRecId == TrvExpTrans.RecId;

                if (itemizedLines.RecId > 0)
                {
                    // do not ask about rolling changes down if there is a itemization due to split to personal
                    confirmation = TrvExpTrans.isSplit || (DialogButton::Yes == Box::yesNoOnce(formStr(TrvExpenses), strFmt("@Expense:UpdateProjectForItemizations", TrvExpTrans.ProjId), DialogButton::No, "@Expense:ConfirmProjectUpdate"));

                    if (confirmation)
                    {
                        ttsbegin;
                        TrvExpTrans.updateProjectInfoForItemizedLines();
                        ttscommit;

                        TrvExpTrans_ItemizedLines.reread();
                        TrvExpTrans_ItemizedLines_DS.research();
                    }
                }
            }

            // Update visibility for Tax Field on changing project
            element.setVisibilityForTaxCorrections();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_InterCompanyCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for project category on a different legal entity.
        /// </summary>
        public void lookup()
        {
            TrvExpenseProjectHelper::createProjectCategoryLookup(this, creatingWorkerRecId, TrvExpTrans.ProjId, TrvExpTrans.legalEntityName(),
                TrvExpTrans.isIntercompany() ? CompanyInfo::findDataArea(TrvExpTrans.InterCompanyLE).RecId : creatingWorkerLegalEntity);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the project category form based on the company context.
        /// </summary>
        public void jumpRef()
        {
            // We remove the call to super and handle the logic to open the form with the relevant company context.
            // super();

            changecompany(TrvExpTrans.legalEntityName())
            {
                element.viewDetailsJumpRef(menuitemDisplayStr(ProjCategory), ProjCategory::find(TrvExpTrans.InterCompanyCategory));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_CountryRegion</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_AddressState</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the State table form.
        /// </summary>
        public void jumpRef()
        {
            MenuFunction menuFunction;
            Args         args = new Args();
            LogisticsAddressState logisticsAddressState;

            logisticsAddressState = LogisticsAddressState::find(trvExpTrans.CountryRegion, trvExpTrans.AddressState);

            menuFunction = new MenuFunction(menuitemDisplayStr(LogisticsAddressState), MenuItemType::Display);

            args.lookupTable(tableNum(LogisticsAddressState));
            args.lookupValue(int642str(logisticsAddressState.RecId));
            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out states for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createStateLookup(this, trvExpTrans.CountryRegion);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editCity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out cities for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createCityLookup(this, trvExpTrans.CountryRegion);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>editZipCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out zip codes for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createZipcodeLookup(this, trvExpTrans.CountryRegion);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_TaxGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the visibility of corrected tax amount when calculated tax amount changes.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            ExpenseInstrumentationLogger tglogger = ExpenseInstrumentationLogger::createLogger('TrvExpTrans_TaxGroup');
            ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(tglogger);

            boolean ret;

            using (var activityContext = taxActivities.taxGroupModifiedContext())
            {
                ret = super();
                // Set the visibility for corrected tax amount entry.
                element.setVisibilityForTaxCorrections();
                tglogger.logInformation(
                    strFmt('TaxGroup changed for Expense Transaction RecId: %1, Expense Number: %2. New Tax Group: %3',
                    activeExpense.RecId, activeExpense.ExpNumber, this.valueStr()));
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();

            TrvLegalEntity taxCompany = TrvExpTrans::getLegalEntityForTax(trvExpTrans);
            CompanyInfo foundDataArea = CompanyInfo::findDataArea(taxCompany);

            if (foundDataArea)
            {
                changecompany(taxCompany)
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(TaxGroup), TaxGroupHeading::find(activeExpense.TaxGroup));
                }
            }
            else
            {
                throw error("@Expense:InvalidExpenseInterCompanyLE");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvLegalEntity taxCompany = TrvExpTrans::getLegalEntityForTax(trvExpTrans);
            CompanyInfo foundDataArea = CompanyInfo::findDataArea(taxCompany);

            if (foundDataArea)
            {
                TrvExpenseLookupHelper::createTaxGroupLookup(this, taxCompany);
            }
            else
            {
                throw error("@Expense:InvalidExpenseInterCompanyLE");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_TaxItemGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the visibility of corrected tax amount when calculated tax amount changes.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            ExpenseInstrumentationLogger tiglogger = ExpenseInstrumentationLogger::createLogger('TrvExpTrans_TaxItemGroup');
            ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(tiglogger);

            boolean ret;

            using (var activityContext = taxActivities.taxItemGroupModifiedContext())
            {
                ret = super();
                // Set the visibility for corrected tax amount entry.
                element.setVisibilityForTaxCorrections();
                tiglogger.logInformation(strFmt('TaxItemGroup modified for Expense Transaction RecId: %1, Expense Number: %2, value: %3',
                    element.activeExpense.RecId, element.activeExpense.ExpNumber, this.valueStr()));
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
            TrvLegalEntity taxCompany = TrvExpTrans::getLegalEntityForTax(trvExpTrans);
            CompanyInfo foundDataArea = CompanyInfo::findDataArea(taxCompany);

            if (foundDataArea)
            {
                changecompany(taxCompany)
                {
                    element.viewDetailsJumpRef(menuitemDisplayStr(TaxItemGroup), TaxItemGroupHeading::find(activeExpense.TaxItemGroup));
                }
            }
            else
            {
                throw error("@Expense:InvalidExpenseInterCompanyLE");
            }

        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvLegalEntity taxCompany = TrvExpTrans::getLegalEntityForTax(trvExpTrans);
            CompanyInfo foundDataArea = CompanyInfo::findDataArea(taxCompany);

            if (foundDataArea)
            {
                TrvExpenseLookupHelper::createTaxItemGroupLookup(this, taxCompany);
            }
            else
            {
                throw error("@Expense:InvalidExpenseInterCompanyLE");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_ExpNumber_Details</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLookupForWorker(this, creatingWorkerRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                TrvExpTrans_DS.reread();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            element.jumpRef_ExpenseReport(this.valueStr());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_IsPreAuthorized</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enables and disables the requisition mapping field and updates the Authorized amount.
        /// </summary>
        /// <returns>Returns the value of the super method</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret && trvExpTrans.IsPreAuthorized)
            {
                TrvExpTrans_MappedToRequisitionLine.enabled(true);
            }
            else
            {
                TrvExpTrans_MappedToRequisitionLine.enabled(false);
                trvExpTrans.MappedToRequisitionLine = 0;
                AuthorizedAmount.realValue(TrvRequisitionLine::find(trvExpTrans.MappedToRequisitionLine).amountToBeReconciled(trvExpTrans.RecId));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_MappedToRequisitionLine</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for travel requisition expense line category.
        /// </summary>
        /// <returns>Returns the data based on the lookup</returns>
        public Common lookupReference()
        {
            TrvRequisitionTable  trvRequisitionTable;

            select firstonly RecId from trvRequisitionTable
                where trvRequisitionTable.RequisitionNumber == trvReqNumber;

            return TrvRequisitionLookupHelper::createRequisitionCategoryLookup(this, trvRequisitionTable.RecId, trvExpTrans.CostType, CompanyInfo::findDataArea(trvExpTable.InterCompanyLE).RecId, trvExpTable.CreatingWorker);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the authorized amount for the selected requisition.
        /// </summary>
        /// <returns>Returns the value of the super method</returns>
        public boolean modified()
        {
            boolean ret = super();

            if (ret)
            {
                TrvRequisitionLine trvRequisitionLine = TrvRequisitionLine::getMappedReqiusition(trvReqNumber, trvExpTrans.MappedToRequisitionLine, creatingWorkerRecId);
 
                AuthorizedAmount.realValue(trvRequisitionLine.amountToBeReconciled(trvExpTrans.RecId));
                if (trvRequisitionLine.RecId)
                {
                    if (TrvParameters::find().IsAllowEditProjectId == TrvProjectEdit::NotEditable && trvExpTrans.ProjId)
                    {
                        trvExpTrans_ProjId.allowedit(false);
                    }
                    else
                    {
                        trvExpTrans_ProjId.allowedit(true);
                    }
                }
                else
                {
                    ret = checkFailed("@Expense:InvalidReconciledAmount");
                }
            }
            
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLineReceiptTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Once this tab page becomes active refresh the receipts list and set the visiblity of the add/remove buttons according to expense status,
        /// the type of line and whether the form is called from AP Clerk view or not.
        /// </summary>
        public void pageActivated()
        {
            super();

            element.initializeReceiptsTabContext();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AttachReceipts</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the attach receipts form.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            args.caller(this.formRun());
            args.parmObject(DocuRef_DS);

            // The selected expense will be passed to the attach receipts form.
            args.record(trvExpTrans);

            new MenuFunction(MenuItemDisplayStr(TrvAttachReceipts), MenuItemType::Display).run(args);

            ExpenseLineReceiptTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UploadReceipt</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the Document Upload form and attach the uploaded file to the header, then link it to the line.
        /// </summary>
        public void clicked()
        {
            str uploadedFileId;
            
            if (trvExpTrans.ExpNumber != '')
            {
                uploadedFileId = this.uploadReceiptToLineAndHeader();
            } 
            else
            {
                uploadedFileId = this.uploadReceiptToLine();
            }

            if (uploadedFileId)
            {
                DocuRef_DS.research();
                TrvExpTrans_DS.reread();
            }

            ExpenseLineReceiptTabPage.setFocus();
        }

]]></Source>
					</Method>
					<Method>
						<Name>uploadReceiptToLineAndHeader</Name>
						<Source><![CDATA[
        /// <summary>
        /// Uploads a receipt to an expense line and its associated report.
        /// </summary>
        /// <returns>File ID of the uploaded file.</returns>
        public str uploadReceiptToLineAndHeader()
        {
            TrvExpTable trvExpTableUpload = TrvExpTable::findRecId(TrvExpTrans.TrvExpTable);
            str uploadedFileId = DocumentFileHelper::getDocumentFromUser(trvExpTableUpload, '', DocumentUploadStyle::Standard);

            // Attach the document to the expense line after it has been uploaded and attached to the header.
            if (uploadedFileId)
            {
                DocuRef attachedDocuRef;
                DocuValue attachedDocuValue;

                select RecId from attachedDocuRef where attachedDocuRef.RefRecId == trvExpTableUpload.RecId && attachedDocuRef.RefTableId == tableNum(TrvExpTable)
                    join attachedDocuValue where attachedDocuValue.RecId == attachedDocuRef.ValueRecId && attachedDocuValue.FileId == str2Guid(uploadedFileId);

                TrvReceiptsHelper::attachReceiptToLine(attachedDocuRef.RecId, TrvExpTrans);
            }

            return uploadedFileId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>uploadReceiptToLine</Name>
						<Source><![CDATA[
        /// <summary>
        /// Uploads a receipt to a expense line that isn't attached to a report
        /// </summary>
        /// <returns>File ID of the uploaded file.</returns>
        public str uploadReceiptToLine()
        {
            str uploadedFileId = DocumentFileHelper::getDocumentFromUser(TrvExpTrans, '', DocumentUploadStyle::Standard);
            
            TrvReceiptsHelper::updateReceiptsAttachedForExpense(TrvExpTrans.RecId);
            TrvReceiptsHelper::evaluatePoliciesForExpense(TrvExpTrans.RecId);

            return uploadedFileId;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenReceipt</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the receipt in a new browser tab if the browser can render it. Else, the browser will prompt for download.
        /// </summary>
        public void clicked()
        {
            TrvReceiptsHelper::displayReceiptInBrowser(DocuValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveReceipts</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove all the selected receipts from the expense record.
        /// </summary>
        public void clicked()
        {
            element.detachSelectedReceipts();
            // Fields like ReceiptsAttached, ProjPolicyText and ProjPolicyStatus needs to be reread.
            TrvExpTrans_DS.reread();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLineItemizeTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize the itemize control.
        /// </summary>
        public void pageActivated()
        {
            super();

            element.initializeItemizationsTabContext();
        }

]]></Source>
					</Method>
					<Method>
						<Name>allowPageDeactivate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Hide itemized line actions from action pane and verify if itemization is completed.
        /// </summary>
        /// <returns></returns>
        public boolean allowPageDeactivate()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                element.setVisibilityForDistributionsButtons();
                element.showItemizationError();
                indicatorIconObservable.markChanged(TrvExpTrans.RecId);
                if (canReadAPDetails)
                {
                    element.setVisibilityForAccountingActionButton(SubledgerJournalAccountEntry, true);
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemizationCopyToNextDayButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current day itemizations to next day.
        /// </summary>
        public void clicked()
        {
            date currentDate = TrvItemizationCalendarControl.getFilterDate();

            TrvExpTrans existingItemizations;

            while select existingItemizations
                where existingItemizations.TransDate == currentDate
                    && existingItemizations.ParentRecId == TrvExpTrans.RecId
            {
                TrvExpTrans newItemization;
                newItemization.data(existingItemizations);
                newItemization.TransDate = currentDate + 1;
                newItemization.ExpTransNumber = TrvExpTrans::GetNewExpTransNumber();
                if (newItemization.validateWrite())
                {
                    newItemization.insert();
                }
            }

            super();

            TrvItemizationCalendarControl.setFilterDate(currentDate + 1);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ItemizedLineDetails</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open another instance of TrvExpenses to show details of the selected itemized line.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            FormRun formRun;
            OpenMode openMode = OpenMode::Edit;

            args.name(formStr(TrvExpenses));
            args.caller(element);
            args.record(TrvExpTrans_ItemizedLines);

            if (element.inViewMode())
            {
                openMode = OpenMode::View;
            }
            args.openMode(openMode);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait(true);

            TrvExpTrans_ItemizedLines.reread();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_ItemizedLines_SubCategoryRecId</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// List of sub categories.
        /// </summary>
        /// <returns>
        /// Sub category lookup table reference with a list of sub categories for a given costtype.
        /// </returns>
        public Common lookupReference()
        {
            return TrvExpenseLookupHelper::createExpenseSubCategoryLookup(this, TrvExpTrans.CostType);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLineGuestTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Disable add/remove of guests based on editability of lines, sets summary and visibility based on expense type.
        /// </summary>
        public void pageActivated()
        {
            super();

            if (guestExpenseRecId != TrvExpTrans.RecId)
            {
                TrvExpTransGuest_DS.executeQuery();
                guestExpenseRecId = TrvExpTrans.RecId;
            }

            GuestActionPane.enabled(trvExpTrans.isEditable() && TrvExpTrans.LineType != TrvExpLineType::ItemizedLine);
            this.setVisibilitiesForGuest();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setSummaryAmounts</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates and sets the summary totals for gift amounts of guests.
        /// </summary>
        void setSummaryAmounts()
        {
            real                giftTotal = 0.0 ;

            giftTotal = TrvGuestHelper::giftAmountTotal(trvExpTrans.RecId);

            ItemizedCostAmount.realValue(giftTotal);
            RemainingAmount.realValue(trvExpTrans.AmountCurr - giftTotal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setVisibilitiesForGift</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets visibility on guest tab for amount field and gift summary.
        /// </summary>
        private void setVisibilitiesForGift(boolean _isVisible)
        {
            FormDataObject formDataObject;

            formDataObject = TrvExpTransGuest_DS.object(fieldnum(TrvExpTransGuest , AmountCurr));

            if (formDataObject)
            {
                formDataObject.visible(_isVisible);
            }

            GiftSummary.visible(_isVisible);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setVisibilitiesForGuest</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets visibility on guest tab based on expense type.
        /// </summary>
        private void setVisibilitiesForGuest()
        {
            if (trvExpTrans.ExpType == TrvExpType::Gift)
            {
                this.setSummaryAmounts();
                this.setVisibilitiesForGift(true);
            }
            else
            {
                this.setVisibilitiesForGift(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddPreviousGuests</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!trvExpTransGuest.RecId)
            {
                trvExpTransGuest_DS.research();
            }

            super();

            ExpenseLineGuestTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddCoworkers</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!trvExpTransGuest.RecId)
            {
                trvExpTransGuest_DS.research();
            }

            super();

            ExpenseLineGuestTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpGuest_GuestId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open a lookup pointing to previous guests form.
        /// </summary>
        public void lookup()
        {
            FormRun formRun;
            Args args = new Args(menuitemdisplaystr(TrvAddPreviousGuests));
            args.record(TrvExpTrans);
            args.parmObject(TrvExpGuest_DS);
            formRun = new FormRun(args);
            formRun.init();
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLinePerdiemTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Fetch perdiem records when the tab is activated.
        /// </summary>
        public void pageActivated()
        {
            // Fetch perdiem data records only if we have not fetched them for this expense line.
            if (perdiemExpenseRecId != TrvExpTrans.RecId)
            {
                TrvExpPerdiemData_DS.executeQuery();
                perdiemExpenseRecId = TrvExpTrans.RecId;
                trvPerDiems = null;
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpPerdiemData_NumberOfBreakfast</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates perdiem on change of number of breakfasts.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TrvExpPerdiemData_DS.calculatePerdiem();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpPerdiemData_NumberOfLunch</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates perdiem on change of number of lunches.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TrvExpPerdiemData_DS.calculatePerdiem();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpPerdiemData_NumberOfDinner</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates perdiem on change of number of dinners.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            TrvExpPerdiemData_DS.calculatePerdiem();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpenseLineFinancialTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Before opening the Financial tab, refresh the DefaultDimension control to match the
        /// correct legal entity selected by the user.
        /// </summary>
        public void pageActivated()
        {
            element.updateDefaultDimensionCurrentCompany();
            element.initDimensionEntry();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_DefaultDimension</Name>
				<Type>Container</Type>
				<Methods>
					<Method>
						<Name>modifyingDimensionValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Removes existing source document line and accounting distributions when a dimension is cleared to force reset of accounting distributions.
        /// </summary>
        /// <param name = "_dimensionAttribute">The dimension attribute that was modified</param>
        /// <param name = "_origValue">The original value for the dimension attribute</param>
        /// <param name = "_newValue">The new value for the dimension attribute</param>
        /// <returns>The result of the super() call</returns>
        protected boolean modifyingDimensionValue(DimensionAttribute _dimensionAttribute, DimensionValue _origValue, DimensionValue _newValue)
        {
            boolean ret;

            ret = super(_dimensionAttribute, _origValue, _newValue);

            if (_newValue == '')
            {
                TrvExpTrans.reinitializeSourceDocumentLine();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseLineDetailsBodyGroup</Name>
				<Type>Group</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        /// <summary>
        /// As the expense split line datasource link is passive do an explicit write when the user focus goes out this group.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean leave()
        {
            boolean ret;

            if (TrvExpTrans.SplitLineType == TrvExpSplitLineType::SplitHeader
                && TrvExpTrans_Split.RecId != 0
                && pmfTableHasChanged(TrvExpTrans_Split))
            {
                if (TrvExpTrans_Split.validateWrite())
                {
                    TrvExpTrans_Split.update();
                    ret = super();
                }
            }
            else
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_CostType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the visibility when cost type is modified.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean modified()
        {
            // Default ret to true so if the user cancels the change, no error is shown.
            boolean ret = true;

            // Get the category record based on the category ID entered.
            TrvCostType newCategory = TrvCostType::find(this.Text());
            TrvExpType previousExpType = TrvExpTrans_Split.ExpType;
            if (element.confirmCategoryChange(newCategory))
            {
                ret = super();

                if (ret)
                {
                    element.categoryChanged(previousExpType, newCategory.ExpType);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_PayMethod</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the valid payment method according to the current expense category.
        /// Exclude methods that are marked Import only from the lookup.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createPaymentMethodLookup(this, trvExpTrans_Split.CostType, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the entered payment method, applying the same filtering that is applied to the lookup.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if (ret && this.valueStr() != trvExpTrans_Split.orig().PayMethod)
            {
                ret = TrvExpenseLookupHelper::validatePaymentMethod(this.valueStr(), trvExpTrans_Split.CostType, true);
                if (!ret)
                {
                    warning(strFmt("@Expense:TableFieldFKViolationMessage", this.valueStr(), fieldpname(TrvExpTrans, PayMethod), tablepname(TrvPayMethod)));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_BusinessPurpose</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters the line purpose according to the current expense type.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpensePurposeLookup(this, TrvExpTrans_Split.CostType);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_InterCompanyLE</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the 'visible' and 'mandatory' property of Inter company project category field.
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.setVisibilityForInterCompanyCategory();
                // Call set visibility for project fields to show/hide project fields for intercompany expense
                // when the category does not allow project.
                trvExpenseSplitLinesVisibilityController.setVisibilityForProjectFieldsForInterCompanyExpense();

                SplitTrvExpTrans_ProjStatusId.mandatory(TrvExpTrans_Split.ProjId != '');
                TrvExpTrans_ProjStatusId_Grid.mandatory(TrvExpTrans_Split.ProjId != '');

                // Set the company context on financial dimensions tab.
                element.updateDefaultDimensionCurrentCompany();
                element.initDimensionEntry();

                if (TrvExpTrans_Split.orig().InterCompanyLE != TrvExpTrans_Split.InterCompanyLE)
                {
                    TrvExpTrans_Split.reinitializeSourceDocumentLine();
                }
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for the inter companies.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createInterCompanyLegalEntityLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_ProjId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update default dimension and initialize the dimension entry tab.
        /// </summary>
        /// <returns>
        /// Returns true if update default dimensions context is successful; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean     ret;
            boolean     confirmation;

            ret = super();

            if (ret && TrvExpTrans_Split.isIntercompany())
            {
                // Need update the company context on financial dimensions tab as dimensions would vary
                // between intercompany with and without project.
                element.updateDefaultDimensionCurrentCompany();
                element.initDimensionEntry();
            }

            // Update expense line itemizations with the project information from itemized header.
            if (TrvExpTrans_Split.RecId != 0 && TrvExpTrans_Split.LineType == TrvExpLineType::ItemizedHeader)
            {
                TrvExpTrans		splitItemizedLines;

                // Look for itemized lines populate the dialog only if they exist.
                select count(RecId) from splitItemizedLines where splitItemizedLines.ParentRecId == TrvExpTrans_Split.RecId;

                if (splitItemizedLines.RecId > 0)
                {
                    confirmation = (DialogButton::Yes == Box::yesNoOnce(formStr(TrvExpenses), strFmt("@Expense:UpdateProjectForItemizations", TrvExpTrans_Split.ProjId), DialogButton::No, "@Expense:ConfirmProjectUpdate"));

                    if (confirmation)
                    {
                        ttsbegin;
                        TrvExpTrans_Split.updateProjectInfoForItemizedLines();
                        ttscommit;

                        TrvExpTrans_ItemizedLines_Split.reread();
                        TrvExpTrans_ItemizedLines_Split_DS.research();
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_InterCompanyCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for project category on a different legal entity.
        /// </summary>
        public void lookup()
        {
            TrvExpenseProjectHelper::createProjectCategoryLookup(this, creatingWorkerRecId, TrvExpTrans_Split.ProjId, TrvExpTrans_Split.legalEntityName(),
                 TrvExpTrans_Split.isIntercompany() ? CompanyInfo::findDataArea(TrvExpTrans_Split.InterCompanyLE).RecId : creatingWorkerLegalEntity);
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the project category form based on the company context.
        /// </summary>
        public void jumpRef()
        {
            // We remove the call to super and handle the logic to open the form with the relevant company context.
            // super();

            changecompany(TrvExpTrans_Split.legalEntityName())
            {
                element.viewDetailsJumpRef(menuitemDisplayStr(ProjCategory), ProjCategory::find(TrvExpTrans_Split.InterCompanyCategory));
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_CountryRegion</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set visiility for tax corrections.
        /// </summary>
        /// <returns>
        /// Returns true if visibility is set for tax corrections; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_AddressState</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the State table form.
        /// </summary>
        public void jumpRef()
        {
            MenuFunction menuFunction;
            Args         args = new Args();
            LogisticsAddressState logisticsAddressState;

            logisticsAddressState = LogisticsAddressState::find(trvExpTrans_Split.CountryRegion, trvExpTrans_Split.AddressState);

            menuFunction = new MenuFunction(menuitemDisplayStr(LogisticsAddressState), MenuItemType::Display);

            args.lookupTable(tableNum(LogisticsAddressState));
            args.lookupValue(int642str(logisticsAddressState.RecId));
            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out states for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createStateLookup(this, trvExpTrans_Split.CountryRegion);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set visiility for tax corrections.
        /// </summary>
        /// <returns>
        /// Returns true if visibility is set for tax corrections; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitEditCity</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out cities for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createCityLookup(this, trvExpTrans_Split.CountryRegion);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitEditZipCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Filters out zip codes for the current country region.
        /// </summary>
        public void lookup()
        {
            TrvExpenseLookupHelper::createZipcodeLookup(this, trvExpTrans_Split.CountryRegion);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_TaxGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the visibility of corrected tax amount when calculated tax amount changes.
        /// </summary>
        /// <returns>
        /// Returns true if visibility is set for tax corrections; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_TaxItemGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the visibility of corrected tax amount when calculated tax amount changes.
        /// </summary>
        /// <returns>
        /// Returns true if visibility is set for tax corrections; otherwise, false.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();
            // Set the visibility for corrected tax amount entry.
            element.setVisibilityForTaxCorrections();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_ExpNumber_Details</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLookupForWorker(this, creatingWorkerRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                TrvExpTrans_Split_DS.reread();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            element.jumpRef_ExpenseReport(this.valueStr());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_IsPreAuthorized</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enables and disables the requisition mapping field and updates the Authorized amount.
        /// </summary>
        /// <returns>Returns the value of the super method</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret && trvExpTrans_Split.IsPreAuthorized)
            {
                SplitTrvExpTrans_MappedToRequisitionLine.enabled(true);
            }
            else
            {
                SplitTrvExpTrans_MappedToRequisitionLine.enabled(false);
                trvExpTrans_Split.MappedToRequisitionLine = 0;
                SplitAuthorizedAmount.realValue(TrvRequisitionLine::find(trvExpTrans_Split.MappedToRequisitionLine).amountToBeReconciled(trvExpTrans_Split.RecId));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_MappedToRequisitionLine</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Lookup for travel requisition expense line category.
        /// </summary>
        /// <returns>Returns the data based on the lookup</returns>
        public Common lookupReference()
        {
            TrvRequisitionTable  trvRequisitionTable;

            select firstonly RecId from trvRequisitionTable
                where trvRequisitionTable.RequisitionNumber == trvReqNumber;

            return TrvRequisitionLookupHelper::createRequisitionCategoryLookup(this, trvRequisitionTable.RecId, trvExpTrans.CostType, CompanyInfo::findDataArea(trvExpTable.InterCompanyLE).RecId, trvExpTable.CreatingWorker);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Updates the authorized amount for the selected requisition.
        /// </summary>
        /// <returns>Returns the value of the super method</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SplitAuthorizedAmount.realValue(TrvRequisitionLine::find(trvExpTrans_Split.MappedToRequisitionLine).amountToBeReconciled(trvExpTrans_Split.RecId));
            if (TrvParameters::find().IsAllowEditProjectId == TrvProjectEdit::NotEditable && trvExpTrans.ProjId)
            {
                trvExpTrans_ProjId.allowedit(false);
            }
            else
            {
                trvExpTrans_ProjId.allowedit(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseLineReceiptTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Once this tab page becomes active refresh the receipts list and set the visiblity of the add/remove buttons according to expense status,
        /// the type of line and whether the form is called from AP Clerk view or not.
        /// </summary>
        public void pageActivated()
        {
            super();

            element.initializeReceiptsTabContext();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitAttachReceipts</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the attach receipts form.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            args.caller(this.formRun());
            args.parmObject(DocuRef_DS);

            // The selected expense will be passed to the attach receipts form.
            args.record(trvExpTrans_Split);

            new MenuFunction(MenuItemDisplayStr(TrvAttachReceipts), MenuItemType::Display).run(args);

            SplitExpenseLineReceiptTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitUploadReceipt</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the Document Upload form and attach the uploaded file to the header, then link it to the line.
        /// </summary>
        public void clicked()
        {
            str uploadedFileId;

            if (TrvExpTrans_Split.TrvExpTable)
            {
                uploadedFileId = this.uploadReceiptToLineAndHeader();
            }
            else
            {
                uploadedFileId = this.uploadReceiptToLine();
            }

            if (uploadedFileId)
            {
                DocuRef_DS.research();
                TrvExpTrans_Split_DS.reread();
            }

            SplitExpenseLineReceiptTabPage.setFocus();
        }

]]></Source>
					</Method>
					<Method>
						<Name>uploadReceiptToLineAndHeader</Name>
						<Source><![CDATA[
        /// <summary>
        /// Uploads a receipt to an expense line and its associated report.
        /// </summary>
        /// <returns>File ID of the uploaded file.</returns>
        public str uploadReceiptToLineAndHeader()
        {
            TrvExpTable trvExpTableUpload = TrvExpTable::findRecId(TrvExpTrans_Split.TrvExpTable);
            str uploadedFileId = DocumentFileHelper::getDocumentFromUser(trvExpTableUpload, '', DocumentUploadStyle::Standard);

            // Attach the document to the expense line after it has been uploaded and attached to the header.
            if (uploadedFileId)
            {
                DocuRef attachedDocuRef;
                DocuValue attachedDocuValue;

                select RecId from attachedDocuRef where attachedDocuRef.RefRecId == trvExpTableUpload.RecId && attachedDocuRef.RefTableId == tableNum(TrvExpTable)
                    join attachedDocuValue where attachedDocuValue.RecId == attachedDocuRef.ValueRecId && attachedDocuValue.FileId == str2Guid(uploadedFileId);

                TrvReceiptsHelper::attachReceiptToLine(attachedDocuRef.RecId, TrvExpTrans_Split);
            }

            return uploadedFileId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>uploadReceiptToLine</Name>
						<Source><![CDATA[
        /// <summary>
        /// Uploads a receipt to a expense line that isn't attached to a report
        /// </summary>
        /// <returns>File ID of the uploaded file.</returns>
        public str uploadReceiptToLine()
        {
            str uploadedFileId = DocumentFileHelper::getDocumentFromUser(TrvExpTrans_Split, '', DocumentUploadStyle::Standard);
            TrvReceiptsHelper::updateReceiptsAttachedForExpense(TrvExpTrans_Split.RecId);
            TrvReceiptsHelper::evaluatePoliciesForExpense(TrvExpTrans_Split.RecId);

            return uploadedFileId;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitOpenReceipt</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open the receipt in a new browser tab if the browser can render it. Else, the browser will prompt for download.
        /// </summary>
        public void clicked()
        {
            TrvReceiptsHelper::displayReceiptInBrowser(DocuValue);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitRemoveReceipts</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove all the selected receipts from the expense record.
        /// </summary>
        public void clicked()
        {
            element.detachSelectedReceipts();
            // Fields like ReceiptsAttached, ProjPolicyText and ProjPolicyStatus needs to be reread.
            TrvExpTrans_Split_DS.reread();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseLineItemizeTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize itemizations tab context.
        /// </summary>
        public void pageActivated()
        {
            super();
            element.initializeItemizationsTabContext();
        }

]]></Source>
					</Method>
					<Method>
						<Name>allowPageDeactivate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Reset the itemization line context for buttons and status indicator.
        /// </summary>
        /// <returns>
        /// Returns true if itemization line context is reset; otherwise, false.
        /// </returns>
        public boolean allowPageDeactivate()
        {
            boolean ret;

            ret = super();
            if (ret)
            {
                element.setVisibilityForDistributionsButtons();
                element.showItemizationError();
                indicatorIconObservable.markChanged(TrvExpTrans.RecId);
                if (canReadAPDetails)
                {
                    element.setVisibilityForAccountingActionButton(SubledgerJournalAccountEntry, true);
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitItemizationCopyToNextDayButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current date itemizations to the next day.
        /// </summary>
        public void clicked()
        {
            date currentDate = SplitTrvItemizationCalendarControl.getFilterDate();

            TrvExpTrans existingItemizations;

            while select existingItemizations
                where existingItemizations.TransDate == currentDate
                    && existingItemizations.ParentRecId == TrvExpTrans_Split.RecId
            {
                TrvExpTrans newItemization;
                newItemization.data(existingItemizations);
                newItemization.TransDate = currentDate + 1;
                newItemization.ExpTransNumber = TrvExpTrans::GetNewExpTransNumber();
                if (newItemization.validateWrite())
                {
                    newItemization.insert();
                }
            }

            super();

            SplitTrvItemizationCalendarControl.setFilterDate(currentDate + 1);

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitItemizedLineDetails</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open another instance of TrvExpenses to show details of the selected itemized line.
        /// </summary>
        public void clicked()
        {
            Args args = new Args();
            FormRun formRun;
            OpenMode openMode = OpenMode::Edit;

            args.name(formStr(TrvExpenses));
            args.caller(element);
            args.record(TrvExpTrans_ItemizedLines_Split);

            if (element.inViewMode())
            {
                openMode = OpenMode::View;
            }
            args.openMode(openMode);

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait(true);

            TrvExpTrans_ItemizedLines_Split.reread();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_ItemizedLines_SubCategoryRecId</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// List of sub categories.
        /// </summary>
        /// <returns>
        /// Sub category lookup table reference with a list of sub categories for a given costtype.
        /// </returns>
        public Common lookupReference()
        {
            return TrvExpenseLookupHelper::createExpenseSubCategoryLookup(this, TrvExpTrans_Split.CostType);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseLineGuestTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Disable add/remove of guests based on editability of lines, sets summary and visibility based on expense type.
        /// </summary>
        public void pageActivated()
        {
            super();

            if (guestExpenseRecId != TrvExpTrans_Split.RecId)
            {
                TrvExpTransGuest_Split_DS.executeQuery();
                guestExpenseRecId = TrvExpTrans_Split.RecId;
            }

            SplitGuestActionPane.enabled(trvExpTrans_Split.isEditable() && TrvExpTrans_Split.LineType != TrvExpLineType::ItemizedLine);
            this.setVisibilitiesForGuest();
        }

]]></Source>
					</Method>
					<Method>
						<Name>setSummaryAmounts</Name>
						<Source><![CDATA[
        /// <summary>
        /// Calculates and sets the summary totals for gift amounts of guests.
        /// </summary>
        void setSummaryAmounts()
        {
            real                giftTotal = 0.0 ;

            giftTotal = TrvGuestHelper::giftAmountTotal(trvExpTrans_Split.RecId);

            SplitItemizedCostAmount.realValue(giftTotal);
            SplitRemainingAmount.realValue(trvExpTrans_Split.AmountCurr - giftTotal);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setVisibilitiesForGift</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets visibility on guest tab for amount field and gift summary.
        /// </summary>
        private void setVisibilitiesForGift(boolean _isVisible)
        {
            FormDataObject formDataObject;

            formDataObject = TrvExpTransGuest_Split_DS.object(fieldnum(TrvExpTransGuest , AmountCurr));

            if (formDataObject)
            {
                formDataObject.visible(_isVisible);
            }

            SplitGiftSummary.visible(_isVisible);
        }

]]></Source>
					</Method>
					<Method>
						<Name>setVisibilitiesForGuest</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets visibility on guest tab based on expense type.
        /// </summary>
        private void setVisibilitiesForGuest()
        {
            if (trvExpTrans_Split.ExpType == TrvExpType::Gift)
            {
                this.setSummaryAmounts();
                this.setVisibilitiesForGift(true);
            }
            else
            {
                this.setVisibilitiesForGift(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitAddPreviousGuests</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!trvExpTransGuest_Split.RecId)
            {
                trvExpTransGuest_Split_DS.research();
            }

            Args args = new Args();
            args.caller(element);
            args.record(TrvExpTrans_split);

            FormRun fr = new MenuFunction(menuItemDisplayStr(TrvAddPreviousGuests), MenuItemType::Display).create(args);
            fr.run();
            fr.wait(true);

            TrvExpTransGuest_Split_DS.executeQuery();
            SplitExpenseLineGuestTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitAddCoworkers</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (!trvExpTransGuest_Split.RecId)
            {
                trvExpTransGuest_Split_DS.research();
            }

            Args args = new Args();
            args.caller(element);
            args.record(TrvExpTrans_split);

            FormRun fr = new MenuFunction(menuItemDisplayStr(TrvAddCoWorkers), MenuItemType::Display).create(args);
            fr.run();
            fr.wait(true);

            TrvExpTransGuest_Split_DS.executeQuery();
            SplitExpenseLineGuestTabPage.setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpGuest_GuestId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open a lookup pointing to previous guests form.
        /// </summary>
        public void lookup()
        {
            FormRun formRun;
            Args args = new Args(menuitemdisplaystr(TrvAddPreviousGuests));
            args.record(TrvExpTrans_Split);
            args.parmObject(TrvExpGuest_Split_DS);
            formRun = new FormRun(args);
            formRun.init();
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseLineFinancialTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        /// <summary>
        /// Before opening the Financial tab, refresh the DefaultDimension control to match the
        /// correct legal entity selected by the user.
        /// </summary>
        public void pageActivated()
        {
            element.updateDefaultDimensionCurrentCompany();
            element.initDimensionEntry();

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitTrvExpTrans_DefaultDimension</Name>
				<Type>Container</Type>
				<Methods>
					<Method>
						<Name>modifyingDimensionValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Removes existing source document line and accounting distributions when a dimension is cleared to force reset of accounting distributions.
        /// </summary>
        /// <param name = "_dimensionAttribute">The dimension attribute that was modified</param>
        /// <param name = "_origValue">The original value for the dimension attribute</param>
        /// <param name = "_newValue">The new value for the dimension attribute</param>
        /// <returns>The result of the super() call</returns>
        protected boolean modifyingDimensionValue(DimensionAttribute _dimensionAttribute, DimensionValue _origValue, DimensionValue _newValue)
        {
            boolean ret;

            ret = super(_dimensionAttribute, _origValue, _newValue);

            if (_newValue == '')
            {
                TrvExpTrans_Split.reinitializeSourceDocumentLine();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CostType_Tile</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override the jumpReft to navigate to the details view
        /// </summary>
        public void jumpRef()
        {
            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TileViewDefaultAction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switches to the details view without setting the view personalization setting.
        /// </summary>
        public void clicked()
        {
            super();

            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveExpenseGridView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove the selected expenses from the expense report
        /// </summary>
        public void clicked()
        {
            // Invoke method to process expense line deletion.
            // This method should be invoked for deletion from both details view and grid view.
            // There is no special processing for deletion from grid view.
            element.onExpenseLineDeleted();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BulkEditLinesGridView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determine which fields are editable and then open bulk edit form
        /// </summary>
        public void clicked()
        {
            element.performBulkEdit();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CopyLineGridView</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Copy the current expense line and related data.
        /// </summary>
        public void clicked()
        {
            super();
            element.copyExpenseLine();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SplitExpenseButtonGridView</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Open split details form.
        /// </summary>
        public void clicked()
        {
            element.openSplitDetailsForm();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_ExpNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            TrvExpenseLookupHelper::createExpenseReportLookupForWorker(this, creatingWorkerRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                TrvExpTrans_DS.reread();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            element.jumpRef_ExpenseReport(this.valueStr());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TrvExpTrans_CostType_Grid</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the visibility when cost type is modified.
        /// </summary>
        /// <returns>Whether or not the operation succeeded.</returns>
        public boolean modified()
        {
            // Default ret to true so if the user cancels the change, no error is shown.
            boolean ret = true;

            // Get the category record based on the category ID entered.
            TrvCostType newCategory = TrvCostType::find(this.Text());
            TrvExpType previousExpType = TrvExpTrans.ExpType;
            if (element.confirmCategoryChange(newCategory))
            {
                ret = super();

                if (ret)
                {
                    element.categoryChanged(previousExpType, newCategory.ExpType);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GridViewDetaultAction</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Switches to the details view without setting the view personalization setting.
        /// </summary>
        public void clicked()
        {
            super();

            element.switchToDetailsView();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTrans</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpTransNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemTimezone</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTable</Name>
			<Table>TrvExpTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionApproverFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AntiCorruptionSubmitterFlag</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Destination</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinalApprover</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreApprovalNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTransGuest</Name>
			<Table>TrvExpTransGuest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpGuest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTrans</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpGuest</Name>
			<Table>TrvExpGuest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSoftDeleted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTransGuest</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocuRef</Name>
			<Table>DocuRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Author</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultAttachment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncyclopediaItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsJustification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailEntryID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailStoreID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTable</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCreate>No</AllowCreate>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocuValue</Name>
			<Table>DocuValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccessInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>File</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDocuSubject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Path</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StorageProviderId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DocuRef</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedHotelData</Name>
			<Table>TrvEnhancedHotelData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CheckInDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckOutDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FolioNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoShowIndicator</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRoomNights</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRoomRent</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalTaxAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedCarRentalData</Name>
			<Table>TrvEnhancedCarRentalData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CarRentalCheckOutDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckOutLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DailyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DaysRented</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MonthlyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegularMileageCharges</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RenterName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalMiles</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WeeklyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedItineraryData</Name>
			<Table>TrvEnhancedItineraryData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepartureDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DomesticIndicator</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeTicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IssuingCarrier</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfLegs</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalTicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PassengerName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketIssueDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyCode</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyInvoiceNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LineJustification</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedTripLegDetail</Name>
			<Table>TrvEnhancedTripLegDetail</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ArrivalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarrierCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityOfOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepartureTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DestinationCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FareAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlightNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItineraryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StopOverCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TripLegNumber</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvEnhancedItineraryData</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTrans_ItemizedLines</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpTransNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemTimezone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTransPersonal</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpTransNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemTimezone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpPerdiemData</Name>
			<Table>TrvExpPerdiemData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MealDeduction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfBreakfast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfDinner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfHrsDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfLunch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeOfDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCheck>No</AllowCheck>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HeaderJustification</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTable</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTrans_Split</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpTransNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemTimezone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTransGuest_Split</Name>
			<Table>TrvExpTransGuest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpGuest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTrans</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpGuest_Split</Name>
			<Table>TrvExpGuest</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSoftDeleted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Title</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTransGuest_Split</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedHotelData_Split</Name>
			<Table>TrvEnhancedHotelData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CheckInDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckOutDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FolioNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuestNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoShowIndicator</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRoomNights</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRoomRent</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalTaxAmount</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedCarRentalData_Split</Name>
			<Table>TrvEnhancedCarRentalData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CarRentalCheckOutDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckOutLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DailyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DaysRented</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MonthlyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegularMileageCharges</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RenterName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnLocation</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalMiles</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WeeklyRentalRate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedItineraryData_Split</Name>
			<Table>TrvEnhancedItineraryData</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepartureDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DomesticIndicator</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeTicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IssuingCarrier</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfLegs</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalTicketNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PassengerName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecid</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketIssueDate</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionRecord</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyCode</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyInvoiceNumber</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelAgencyName</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvEnhancedTripLegDetail_Split</Name>
			<Table>TrvEnhancedTripLegDetail</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ArrivalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CarrierCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityOfOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField10</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField5</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField6</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField7</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField8</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_UserDefinedField9</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DepartureTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DestinationCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FareAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FeeAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlightNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItineraryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceClass</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StopOverCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TravelDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TripLegNumber</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvEnhancedItineraryData_Split</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LineJustification_Split</Name>
			<Table>TrvPolicyViolationJustification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Action</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Justification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustificationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JustifyingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolatingRecord</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ViolationJustificationType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TrvExpTrans_ItemizedLines_Split</Name>
			<Table>TrvExpTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyOverBudgetAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyReconciledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdditionalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressCity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressState</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurr</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApplyAction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillIssuedTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BusinessPurpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAdvanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedTaxAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostOwner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CostType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatingWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deduktion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionBreakfest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionDinner</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeduktionLunch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EntertainmentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchangeRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpTransNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyBilled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyLE</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanySalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntercompanyTransferPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBudgetCheckPending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPreAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSplit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMOwnCar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KMPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LegalEntity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineLevelPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MappedToRequisitionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MerchantId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageFromAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MileageToAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Mobile_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NetTransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotApprovedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberOfPassengers</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalReceiptsRecvd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalSourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBSRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PBS_Statement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PerdiemTimezone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingErrors</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjActivityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPolicyText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptsAttached</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferenceDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReimburseAmt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SplitLineType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubCategoryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncluded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TicketUsed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRowNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvExpTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrvLocations</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TrvExpTrans_Split</JoinSource>
			<LinkType>Passive</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS94130</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleListDetails</Style>
		<WorkflowDataSource xmlns="">TrvExpTable</WorkflowDataSource>
		<WorkflowEnabled xmlns="">Yes</WorkflowEnabled>
		<WorkflowType xmlns="">TrvDocumentTemplate</WorkflowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ViewModesGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>ViewModesButton</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>DetailsView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:DetailsView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GridViewButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GridView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByCategoryView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByCategoriesView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByDateView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByDatesView</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GroupByProjectView</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:GroupByProjectView</Text>
									</AxFormControl>
								</Controls>
								<NormalImage>View</NormalImage>
								<Text>@SYS28196</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>WorkflowButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SubmitButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvSubmit</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RecallButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvCancel</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ResubmitButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvResubmit</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ApproveButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvApprove</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>RejectButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvReject</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UnattachedExpenseLineActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>NewUnattachedExpenseLine</Name>
								<HelpText>@Expense:CreateNewExpense</HelpText>
								<NeededPermission>Create</NeededPermission>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>New</Command>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>DeleteExpenseLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:DeleteTheSelectedExpense</HelpText>
								<NeededPermission>Delete</NeededPermission>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Command>DeleteRecord</Command>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Delete</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateExpenseReport</Name>
								<AllowEdit>No</AllowEdit>
								<HelpText>@Expense:AttachToNewExpenseReportDetails</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<MultiSelect>Yes</MultiSelect>
								<Text>@Expense:NewExpenseReport</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AttachToExpenseReport</Name>
								<AllowEdit>No</AllowEdit>
								<HelpText>@Expense:AttachToExistingExpenseReportDetails</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<MenuItemName>TrvExpenseSelectReportDialog</MenuItemName>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:AttachToExpenseReport</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>BulkEditExpenseLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:BulkEditHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>BulletedList</NormalImage>
								<Text>@SYS190556</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CopyExpenseLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:CopyHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Copy</NormalImage>
								<Text>@Expense:ExpenseLineCopy</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>MergeExpenseLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:MatchDetails</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<CopyCallerQuery>Yes</CopyCallerQuery>
								<MenuItemName>TrvExpenseMerge</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Link</NormalImage>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>SplitUnattachedExpenseButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:SplitExpense</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<MenuItemName>TrvExpenseSplit</MenuItemName>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>DeliveryLine</NormalImage>
								<Text>@SYS24089</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ReceiptsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:ReceiptsHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS4007737</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ItemizeButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:ItemizeHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>No</MultiSelect>
								<Text>@SYS335470</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ExpenseReportFor</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:ExpenseReportsForHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvWorkerPickerExpenseReports</MenuItemName>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseLineActions</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AddUnattachedExpenses</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:AddUnreconciledExpensesHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvUnattachedExpensesDialog</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvAccountingDistExpenseReport</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTrans</DataSource>
								<MenuItemName>TrvAccountingDistExpenseReport</MenuItemName>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AccountingDistributionsView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTrans</DataSource>
								<MenuItemName>AccountingDistributions</MenuItemName>
								<Text>@SYS323891</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PostSelectedExpenseLine</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:PostExpensesHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DataSource>TrvExpTrans</DataSource>
								<MenuItemName>TrvPostExpense</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:PostExpenses</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SubledgerJournalAccountEntry</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@SYS135733</HelpText>
								<Type>Button</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS135346</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>BudgetCheck</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpTransCheckBudget</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTrans</DataSource>
										<MenuItemName>TrvExpTransCheckBudget</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BudgetCheckResults</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTrans</DataSource>
										<MenuItemName>BudgetCheckResults</MenuItemName>
									</AxFormControl>
								</Controls>
								<Text>@Expense:BudgetCheck</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseReportActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>HeaderReceipts</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:HeaderReceiptsHelpText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Expense:HeaderReceipts</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PostExpenseReport</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@Expense:PostExpenseReportHelpText</HelpText>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DataSource>TrvExpTable</DataSource>
								<MenuItemName>TrvPostExpense</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>Yes</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:PostExpenseReport</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>AccountingDistributionsDocumentView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTable</DataSource>
								<MenuItemName>AccountingDistributionsDocumentView</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>PrintActionsGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintActions</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpenseEmployee</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpenseEmployee</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS101289</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpense</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpense</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS101289</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpTableDistributionReport</Name>
										<Type>MenuFunctionButton</Type>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpTableDistributionReport</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Expense:Distributions</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TrvExpReportsBarcodeCoverPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@Expense:PrintExpenseReportBarcodeHelpText</HelpText>
										<Type>MenuFunctionButton</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataSource>TrvExpTable</DataSource>
										<MenuItemName>TrvExpReportsBarcodeCoverPage</MenuItemName>
										<MenuItemType>Output</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@Expense:ExpenseReportCoverPage</Text>
									</AxFormControl>
								</Controls>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Print</NormalImage>
								<Text>@SYS101620</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>EmailExpenseReport</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TrvExpenseEmployeeReportEmail</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>TrvExpTable</DataSource>
								<MenuItemName>TrvExpenseEmployeeReportEmail</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<MultiSelect>No</MultiSelect>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@Expense:EmailReport</Text>
							</AxFormControl>
						</Controls>
						<DataSource>TrvExpTable</DataSource>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormComboBoxControl">
				<Name>ExpenseGridStatusFilter</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ComboBox</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<EnumType>TrvExpensesFilter</EnumType>
				<Label>@Expense:Show</Label>
				<ViewEditMode>Edit</ViewEditMode>
				<Items />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ExpenseDetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HeaderTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>HeaderTab</Name>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>GeneralHeaderTabPage</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ExpenseReportFieldsGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>MyHeaderJustification</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Justification</DataField>
														<DataSource>HeaderJustification</DataSource>
														<Label>@SYS330348</Label>
														<ViewEditMode>Edit</ViewEditMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>SubmitterHeaderJustification</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>submitterJustification</DataMethod>
														<DataSource>TrvExpTable</DataSource>
														<Label>@SYS302375</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>OtherHeaderJustifications</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>approverJustification</DataMethod>
														<DataSource>TrvExpTable</DataSource>
														<Label>@SYS302370</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_Txt2</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Txt2</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_Destination</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Destination</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_InterCompanyLE</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>InterCompanyLE</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_ProjId</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ProjId</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_Txt1</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>Txt1</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_CustAccount</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>CustAccount</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>TrvExpTable_VendAccount</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>VendAccount</DataField>
														<DataSource>TrvExpTable</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>InterimApproverGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>InterimApprovers</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>interimApprovers</DataMethod>
																<DataSource>TrvExpTable</DataSource>
																<Label>@Expense:InterimApprover</Label>
																<ReplaceOnLookup>No</ReplaceOnLookup>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>SelectInterimApprovers</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<AutoRefreshData>Yes</AutoRefreshData>
																<DataSource>TrvExpTable</DataSource>
																<MenuItemName>TrvInterimApproversDialog</MenuItemName>
															</AxFormControl>
														</Controls>
														<Breakable>No</Breakable>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>FinalApproverGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Group</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormReferenceGroupControl">
																<Name>TrvExpTable_FinalApprover</Name>
																<Type>ReferenceGroup</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls />
																<DataSource>TrvExpTable</DataSource>
																<Label>@Expense:FinalApprover</Label>
																<ReferenceField>FinalApprover</ReferenceField>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>SetAsDefaultFinalApprover</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<Text>@Expense:SetAsDefaultFinalApprover</Text>
															</AxFormControl>
														</Controls>
														<Breakable>No</Breakable>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>MapTravelRequisitionGroup</Name>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>MapTravelRequisition</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>TrvExpTable</DataSource>
																<Label>@SYS335111</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>TravelRequisitionAmount</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>String</Type>
																<FormControlExtension
																	i:nil="true" />
																<Label>@SYS335109</Label>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Auto</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<ColumnsMode>Fill</ColumnsMode>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SubmitterAttestation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>SubmitterAttestationText</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>TrvExpTable_AntiCorruptionSubmitterFlag</Name>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>AntiCorruptionSubmitterFlag</DataField>
														<DataSource>TrvExpTable</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<Breakable>No</Breakable>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ApproverAttestation</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Group</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>ApproverAttestationText</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCheckBoxControl">
														<Name>TrvExpTable_AntiCorruptionApproverFlag</Name>
														<Type>CheckBox</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>AntiCorruptionApproverFlag</DataField>
														<DataSource>TrvExpTable</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<Breakable>No</Breakable>
											</AxFormControl>
										</Controls>
										<Caption>@Expense:General</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>FinancialDimensionsHeaderTabPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>DimensionFieldsGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormContainerControl">
														<Name>TrvExpTable_DefaultDimension</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>Container</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension>
															<Name>DimensionEntryControl</Name>
															<ExtensionComponents />
															<ExtensionProperties>
																<AxFormControlExtensionProperty>
																	<Name>parmControllerClassName</Name>
																	<Type>ExtendedDataType</Type>
																	<TypeName>ClassName</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmControlLabelText</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmEnumerationName</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmDataSourceName</Name>
																	<Type>String</Type>
																	<Value>TrvExpTable</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmValueSetReferenceField</Name>
																	<Type>String</Type>
																	<Value>DefaultDimension</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmEnumValueSetReferenceField</Name>
																	<Type>String</Type>
																</AxFormControlExtensionProperty>
															</ExtensionProperties>
														</FormControlExtension>
														<Controls />
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Caption>@SYS138491</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:ExpenseReportHeader</Caption>
						<FastTabExpanded>No</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpenseDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ExpenseLines</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ExpensesGroupByGroup</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ExpensesGroupByComboBox</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ComboBox</Type>
														<FormControlExtension
															i:nil="true" />
														<EnumType>TrvExpenseGroupBy</EnumType>
														<ViewEditMode>Edit</ViewEditMode>
														<Items />
													</AxFormControl>
												</Controls>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ExpenseLinesListGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Pattern>ToolbarList</Pattern>
												<PatternVersion>1.2</PatternVersion>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>ExpenseLinesList</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>cardList</ExtendedStyle>
														<Type>Grid</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ExpenseCard</Name>
																<ExtendedStyle>BusinessCard</ExtendedStyle>
																<Type>Group</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormImageControl">
																		<Name>ExpenseTypeIcon</Name>
																		<ExtendedStyle>ExpenseImage</ExtendedStyle>
																		<Type>Image</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>showExpenseTypeIcon</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS101577</Label>
																		<ShowLabel>No</ShowLabel>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>AmountCurrWithCurrencyCode</Name>
																		<ExtendedStyle>Heading</ExtendedStyle>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Alignment>Left</Alignment>
																		<DataMethod>amountWithCurrencyCode</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>ApprovalStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ExtendedStyle></ExtendedStyle>
																		<Type>ComboBox</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ApprovalStatus</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<ShowLabel>No</ShowLabel>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>MerchantId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Enabled>No</Enabled>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>cardMerchantId</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TransDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransDate</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>CostType</Name>
																		<ExtendedStyle>ImageCaption</ExtendedStyle>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CostType</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<LookupButton>Never</LookupButton>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormImageControl">
																		<Name>Status</Name>
																		<ExtendedStyle>businessCard_notification</ExtendedStyle>
																		<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
																		<Type>Image</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>errorStatusIndicator</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS121619</Label>
																		<NormalImage>Warning</NormalImage>
																		<ShowLabel>No</ShowLabel>
																	</AxFormControl>
																</Controls>
																<ArrangeMethod>None</ArrangeMethod>
																<Style>Card</Style>
															</AxFormControl>
														</Controls>
														<DataSource>TrvExpTrans</DataSource>
														<ShowRowLabels>No</ShowRowLabels>
														<Style>List</Style>
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ExpenseLineDetailsGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneControl">
												<Name>ExpensesActionPane</Name>
												<Type>ActionPane</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>ExpenseActions</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>ButtonGroup</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormCommandButtonControl">
																<Name>AddExpense</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:CreateNewExpenseHelpText</HelpText>
																<Type>CommandButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<Command>New</Command>
																<Text>@Expense:NewExpense</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>RemoveExpense</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:RemoveExpenseHelpText</HelpText>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<AutoRefreshData>Yes</AutoRefreshData>
																<MultiSelect>Yes</MultiSelect>
																<NormalImage>Delete</NormalImage>
																<SaveRecord>No</SaveRecord>
																<Text>@Expense:RemoveExpenseButton</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>BulkEditLines</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:BulkEditHelpText</HelpText>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>Yes</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>BulletedList</NormalImage>
																<Text>@SYS190556</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>CopyLine</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:CopyHelpText</HelpText>
																<Type>Button</Type>
																<FormControlExtension
																	i:nil="true" />
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>Copy</NormalImage>
																<Text>@Expense:ExpenseLineCopy</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>MergeExpense</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:MatchDetails</HelpText>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<AutoRefreshData>Yes</AutoRefreshData>
																<CopyCallerQuery>Yes</CopyCallerQuery>
																<MenuItemName>TrvExpenseMerge</MenuItemName>
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>Link</NormalImage>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>SplitExpenseButton</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<HelpText>@Expense:SplitExpense</HelpText>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<AutoRefreshData>Yes</AutoRefreshData>
																<MenuItemName>TrvExpenseSplit</MenuItemName>
																<MultiSelect>No</MultiSelect>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>DeliveryLine</NormalImage>
																<Text>@SYS24089</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>ExpensePaymentDetails</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Enabled>No</Enabled>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<DataSource>TrvExpTrans</DataSource>
																<MenuItemName>TrvExpensePaymentDetails</MenuItemName>
																<NeedsRecord>Yes</NeedsRecord>
																<NormalImage>PayTender</NormalImage>
																<Text>@SYS55132</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>GAFInformation</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>MenuFunctionButton</Type>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>TaxGSTEditTaxInformation_MY</MenuItemName>
																<NormalImage>Info</NormalImage>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Style>Strip</Style>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ExpenseLineDetailsBodyTabGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ExpenseLineDetailsBodyGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>APExpenseLineDetails</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Group</Type>
																<Visible>No</Visible>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>TrvExpTrans_ApprovalStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ApprovalStatus</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvExpTrans_ReceiptRequired</Name>
																		<AllowEdit>No</AllowEdit>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>isReceiptRequired</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS121500</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvExpTrans_OrigReceiptsRecvd</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OriginalReceiptsRecvd</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>Ledger</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvExpTrans_Voucher</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>Voucher</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvExpTrans_PostingErrors</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>PostingErrors</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>VAT</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>VATRecoveryTaxId</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>vatRecoveryTaxId</DataMethod>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ExpenseLineDetails</Name>
																<Type>Group</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>MyJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Justification</DataField>
																		<DataSource>LineJustification</DataSource>
																		<Label>@SYS330348</Label>
																		<ViewEditMode>Edit</ViewEditMode>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SubmitterJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>submitterJustification</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS302375</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>OtherJustifications</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>approverJustification</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS302370</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_CostType</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CostType</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_SubCategory</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>categoryOrSubCategoryName</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>cashAdvanceNumber</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>cashAdvanceNumber</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS344916</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TrvExpTrans_TransDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransDate</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_MerchantId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MerchantId</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_PayMethod</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PayMethod</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>TrvExpTrans_AmountGroup</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvExpTrans_AmountCurr</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>AmountCurr</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvExpTrans_ExchangeCode</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ExchangeCode</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>editExchRate</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editExchRate</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_AmountMST</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AmountMST</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>TrvExpTrans_CreditCardTransaction</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvExpTrans_CreditCardTransactionCurrencyAmount</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CreditCardTransactionCurrencyAmount</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvExpTrans_CreditCardTransactionCurrency</Name>
																				<AllowEdit>No</AllowEdit>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CreditCardTransactionCurrency</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>TrvExpTransPersonalGroup</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvExpTransPersonal_CostType</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CostType</DataField>
																				<DataSource>TrvExpTransPersonal</DataSource>
																				<Label>@Expense:ExpenseLine_PersonalCategory</Label>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>TrvExpTransPersonal_AmountCurrGroup</Name>
																				<Type>Group</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTransPersonal_AmountCurr</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<Visible>No</Visible>
																						<FormControlExtension
																							i:nil="true" />
																						<AllowNegative>No</AllowNegative>
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTransPersonal</DataSource>
																						<Label>@Expense:ExpenseLine_PersonalAmount</Label>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpTransPersonal_AmountCurr_CurrencyCode</Name>
																						<AllowEdit>No</AllowEdit>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>String</Type>
																						<Visible>No</Visible>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>ExchangeCode</DataField>
																						<DataSource>TrvExpTrans</DataSource>
																						<ShowLabel>No</ShowLabel>
																					</AxFormControl>
																				</Controls>
																				<Breakable>No</Breakable>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>TrvExpTransPersonal_CreditCardTransactionGroup</Name>
																				<Type>Group</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTransPersonal_CreditCardTransactionCurrencyAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<Visible>No</Visible>
																						<FormControlExtension
																							i:nil="true" />
																						<AllowNegative>No</AllowNegative>
																						<DataField>CreditCardTransactionCurrencyAmount</DataField>
																						<DataSource>TrvExpTransPersonal</DataSource>
																						<Label>@Expense:ExpenseLine_PersonalAmount</Label>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpTransPersonal_CreditCardTransactionCurrencyAmount_CurrencyCode</Name>
																						<AllowEdit>No</AllowEdit>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>String</Type>
																						<Visible>No</Visible>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>CreditCardTransactionCurrency</DataField>
																						<DataSource>TrvExpTrans</DataSource>
																						<ShowLabel>No</ShowLabel>
																					</AxFormControl>
																				</Controls>
																				<Breakable>No</Breakable>
																			</AxFormControl>
																		</Controls>
																		<DataSource>TrvExpTransPersonal</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_ReceiptNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReceiptNumber</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_KMOwnCar</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>KMOwnCar</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_KMPrice</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>KMPrice</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_VehicleType</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>VehicleType</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>TrvExpTrans_NumberOfPassengers</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NumberOfPassengers</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_MileageFromAddress</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MileageFromAddress</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_MileageToAddress</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MileageToAddress</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>PerdiemDatesGroup</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateTimeControl">
																				<Name>TrvExpTrans_DateFrom</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>DateTime</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DateFrom</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																				<TimeZoneIndicator>Never</TimeZoneIndicator>
																				<TimezonePreference>NoConversion</TimezonePreference>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateTimeControl">
																				<Name>TrvExpTrans_DateTo</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>DateTime</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DateTo</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																				<TimeZoneIndicator>Never</TimeZoneIndicator>
																				<TimezonePreference>NoConversion</TimezonePreference>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormReferenceGroupControl">
																				<Name>TrvExpTrans_TrvLocations</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>ReferenceGroup</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls />
																				<DataSource>TrvExpTrans</DataSource>
																				<Label>@Expense:PerDiemLocation</Label>
																				<ReferenceField>TrvLocations</ReferenceField>
																				<ReplacementFieldGroup>Location</ReplacementFieldGroup>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																		<FrameType>None</FrameType>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>PerdiemDeductionsGroup</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormIntegerControl">
																				<Name>TrvExpTrans_DeduktionBreakfest</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>Integer</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DeduktionBreakfest</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormIntegerControl">
																				<Name>TrvExpTrans_DeduktionLunch</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>Integer</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DeduktionLunch</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormIntegerControl">
																				<Name>TrvExpTrans_DeduktionDinner</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>Integer</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DeduktionDinner</DataField>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>deductionWithCurrencyCode</Name>
																				<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																				<Type>String</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>deductionWithCurrencyCode</DataMethod>
																				<DataSource>TrvExpTrans</DataSource>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																		<FrameType>None</FrameType>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_Description</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Description</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_InvoiceAmt</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InvoiceAmt</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>TrvExpTrans_BillIssuedTo</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BillIssuedTo</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_BusinessPurpose</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BusinessPurpose</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_EntertainmentLocation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>EntertainmentLocation</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_AdditionalInformation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AdditionalInformation</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_InterCompanyLE</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InterCompanyLE</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_ProjId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjId</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_ProjStatusId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjStatusId</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_ProjActivityNumber</Name>
																		<PreviewPartRef>smmActivitiesPreviewPart</PreviewPartRef>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjActivityNumber</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_TransactionText</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransactionText</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_InterCompanyCategory</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InterCompanyCategory</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@Expense:ExpenseReport_ProjCategory</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_CountryRegion</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CountryRegion</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_AddressState</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AddressState</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>editCity</Name>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editCity</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>editZipCode</Name>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editZipCode</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_TaxGroup</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxGroup</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_TaxItemGroup</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxItemGroup</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvExpTrans_TaxIncluded</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxIncluded</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>calcTaxAmount</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>calcTaxAmount</DataMethod>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_CorrectedTaxAmount</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CorrectedTaxAmount</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_NetTransactionAmount</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NetTransactionAmount</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TrvEnhancedHotelData_CheckInDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CheckInDate</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TrvEnhancedHotelData_CheckOutDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CheckOutDate</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedHotelData_FolioNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>FolioNumber</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedHotelData_GuestName</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>GuestName</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>TrvEnhancedHotelData_GuestNumber</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>GuestNumber</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvEnhancedHotelData_NoShowIndicator</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NoShowIndicator</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>TrvEnhancedHotelData_TotalRoomNights</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalRoomNights</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvEnhancedHotelData_TotalRoomRent</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalRoomRent</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvEnhancedHotelData_TotalTaxAmount</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalTaxAmount</DataField>
																		<DataSource>TrvEnhancedHotelData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_TicketNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketNumber</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvExpTrans_TicketUsed</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketUsed</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_TicketClass</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketClass</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_PassengerName</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PassengerName</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvEnhancedItineraryData_DomesticIndicator</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DomesticIndicator</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>TrvEnhancedTripLegDetail_ServiceClass</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ServiceClass</DataField>
																		<DataSource>TrvEnhancedTripLegDetail</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>TrvEnhancedItineraryData_NumberOfLegs</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NumberOfLegs</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_IssuingCarrier</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IssuingCarrier</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TrvEnhancedItineraryData_TicketIssueDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketIssueDate</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TrvEnhancedItineraryData_DepartureDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DepartureDate</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_OriginalTicketNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OriginalTicketNumber</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_ExchangeTicketNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ExchangeTicketNumber</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_TravelAgencyCode</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TravelAgencyCode</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_TravelAgencyName</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TravelAgencyName</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvEnhancedItineraryData_TravelAgencyInvoiceNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TravelAgencyInvoiceNumber</DataField>
																		<DataSource>TrvEnhancedItineraryData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>TrvExpTrans_ReimburseAmt</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReimburseAmt</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_Reason</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Reason</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TrvExpTrans_ExpNumber_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ExpNumber</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>TrvExpTrans_IsPreAuthorized</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>CheckBox</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IsPreAuthorized</DataField>
																		<DataSource>TrvExpTrans</DataSource>
																		<Label>@SYS153181</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>RequisitionLineAmount</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormReferenceGroupControl">
																				<Name>TrvExpTrans_MappedToRequisitionLine</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>ReferenceGroup</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls />
																				<DataSource>TrvExpTrans</DataSource>
																				<Label>@Expense:TravelReqReconciledAmount</Label>
																				<ReferenceField>MappedToRequisitionLine</ReferenceField>
																				<ReplacementFieldGroup>AccountingCurrencyAmount</ReplacementFieldGroup>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>AuthorizedAmount</Name>
																				<AllowEdit>No</AllowEdit>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@Expense:TravelReqAuthorizedAmount</Label>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>CarRental</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateControl">
																				<Name>TrvEnhancedCarRentalData_CarRentalCheckOutDate</Name>
																				<Type>Date</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CarRentalCheckOutDate</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvEnhancedCarRentalData_CheckOutLocation</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CheckOutLocation</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateControl">
																				<Name>TrvEnhancedCarRentalData_ReturnDate</Name>
																				<Type>Date</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ReturnDate</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvEnhancedCarRentalData_ReturnLocation</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ReturnLocation</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvEnhancedCarRentalData_RenterName</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>RenterName</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>TrvEnhancedCarRentalData_ReservationNumber</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ReservationNumber</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_DaysRented</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DaysRented</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_DailyRentalRate</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>DailyRentalRate</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_WeeklyRentalRate</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>WeeklyRentalRate</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_MonthlyRentalRate</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>MonthlyRentalRate</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_RegularMileageCharges</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>RegularMileageCharges</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>TrvEnhancedCarRentalData_TotalMiles</Name>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>TotalMiles</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormComboBoxControl">
																				<Name>TrvEnhancedCarRentalData_VehicleClass</Name>
																				<Type>ComboBox</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>VehicleClass</DataField>
																				<DataSource>TrvEnhancedCarRentalData</DataSource>
																				<Items />
																			</AxFormControl>
																		</Controls>
																		<DataSource>TrvEnhancedCarRentalData</DataSource>
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<DataSource>TrvExpTrans</DataSource>
														<FrameType>GroupedFieldsLabel</FrameType>
														<Style>BorderedGroup</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ExpenseLineDetailsTabGroup</Name>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormTabControl">
																<Name>ExpenseLineDetailsTab</Name>
																<Type>Tab</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>ExpenseLineReceiptTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Pattern>ToolbarList</Pattern>
																		<PatternVersion>1.2</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>ReceiptsActionPane</Name>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>ReceiptAttachUploadGroup</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>AttachReceipts</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MenuItemName>TrvAttachReceipts</MenuItemName>
																								<MultiSelect>No</MultiSelect>
																								<NormalImage>Invoice</NormalImage>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>UploadReceipt</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>No</MultiSelect>
																								<NormalImage>Upload</NormalImage>
																								<Text>@Expense:UploadReceipt</Text>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>OtherReceiptActions</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>OpenReceipt</Name>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>No</MultiSelect>
																								<NeedsRecord>Yes</NeedsRecord>
																								<NormalImage>Related</NormalImage>
																								<Text>@SYS58571</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>RemoveReceipts</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>Yes</MultiSelect>
																								<NeedsRecord>Yes</NeedsRecord>
																								<NormalImage>Remove</NormalImage>
																								<Text>@SYS311855</Text>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																				</Controls>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>ExpenseReceiptsList</Name>
																				<ExtendedStyle>cardList</ExtendedStyle>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormGroupControl">
																						<Name>Receipt</Name>
																						<ExtendedStyle>BusinessCard</ExtendedStyle>
																						<Pattern>BusinessCardThreeFields</Pattern>
																						<PatternVersion>1.0</PatternVersion>
																						<Type>Group</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormImageControl">
																								<Name>Thumbnail</Name>
																								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
																								<Type>Image</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataMethod>getThumbnail</DataMethod>
																								<DataSource>DocuRef</DataSource>
																								<Label>@SYS15953</Label>
																								<ShowLabel>No</ShowLabel>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormStringControl">
																								<Name>DocuValue_FileName</Name>
																								<ExtendedStyle>Heading</ExtendedStyle>
																								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
																								<Type>String</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataField>Name</DataField>
																								<DataSource>DocuRef</DataSource>
																								<ShowLabel>No</ShowLabel>
																							</AxFormControl>
																						</Controls>
																						<ArrangeMethod>None</ArrangeMethod>
																						<DataSource>DocuValue</DataSource>
																						<Style>Card</Style>
																					</AxFormControl>
																				</Controls>
																				<DataSource>DocuValue</DataSource>
																				<Style>List</Style>
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS4007737</Caption>
																		<DataSource>DocuRef</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>ExpenseLineItemizeTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>TabPage</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl>
																				<Name>TrvItemizationCalendarControl</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<WidthMode>SizeToAvailable</WidthMode>
																				<FormControlExtension>
																					<Name>TrvCalendarControl</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmTargetDataSourceName</Name>
																							<Type>String</Type>
																							<Value>TrvExpTrans_ItemizedLines</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDateFieldName</Name>
																							<Type>String</Type>
																							<Value>TransDate</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDayDetailFieldName</Name>
																							<Type>String</Type>
																							<Value>AmountCurr</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDayDetailField2Name</Name>
																							<Type>String</Type>
																							<Value>CreditCardTransactionCurrencyAmount</Value>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>ItemizationActions</Name>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>ItemizationButtonGroup</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>ItemizationNewButton</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<HelpText>@Expense:ItemizationAddCategoryHelpText</HelpText>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>New</Command>
																								<Text>@Expense:AddItemizationCategory</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>ItemizationDeleteButton</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>DeleteRecord</Command>
																								<NormalImage>Delete</NormalImage>
																								<Text>@SYS4007810</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>ItemizationCopyToNextDayButton</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<HelpText>@Expense:ItemizationCopyToNextDayHelpText</HelpText>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<NormalImage>Copy</NormalImage>
																								<Text>@Expense:ItemizationCopyToNextDay</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>ItemizedLineDetails</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<HelpText>@Expense:ItemizationDetailsHelpText</HelpText>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Text>@Expense:ItemizationDetails</Text>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>ItemizationSubCategoryGrid</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormReferenceGroupControl">
																						<Name>TrvExpTrans_ItemizedLines_SubCategoryRecId</Name>
																						<EnableFormRef>No</EnableFormRef>
																						<Type>ReferenceGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls />
																						<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																						<Mandatory>Yes</Mandatory>
																						<ReferenceField>SubCategoryRecId</ReferenceField>
																						<ReplacementFieldGroup>SubCategoryName</ReplacementFieldGroup>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTrans_ItemizedLines_AmountCurr</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTrans_ItemizedLines_CreditCardTransactionAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>CreditCardTransactionCurrencyAmount</DataField>
																						<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																				<MultiSelect>No</MultiSelect>
																			</AxFormControl>
																		</Controls>
																		<Caption>@Expense:Itemization_TabPageCaption</Caption>
																		<DataSource>TrvExpTrans_ItemizedLines</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>ExpenseLineGuestTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Pattern>ToolbarList</Pattern>
																		<PatternVersion>1.2</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>GuestActionPane</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>GuestAddRemoveGroup</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>AddGuest</Name>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>New</Command>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>RemoveGuest</Name>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>DeleteRecord</Command>
																								<NeedsRecord>Yes</NeedsRecord>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>OtherGuestActions</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>AddPreviousGuests</Name>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>TrvExpTrans</DataSource>
																								<MenuItemName>TrvAddPreviousGuests</MenuItemName>
																								<NormalImage>People</NormalImage>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>AddCoworkers</Name>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>TrvExpTrans</DataSource>
																								<MenuItemName>TrvAddCoworkers</MenuItemName>
																								<NormalImage>People</NormalImage>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTransGuest</DataSource>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>GuestListGrid</Name>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpGuest_GuestId</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>GuestId</DataField>
																						<DataSource>TrvExpGuest</DataSource>
																						<Mandatory>Yes</Mandatory>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpGuest_Company</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>Company</DataField>
																						<DataSource>TrvExpGuest</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpGuest_Title</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>Title</DataField>
																						<DataSource>TrvExpGuest</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTransGuest_AmountCurr</Name>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTransGuest</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTransGuest</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>GiftSummary</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ExtendedStyle>group_totalsContainer</ExtendedStyle>
																				<HeightMode>Auto</HeightMode>
																				<Pattern>FieldsFieldGroups</Pattern>
																				<PatternVersion>1.1</PatternVersion>
																				<Type>Group</Type>
																				<WidthMode>SizeToAvailable</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>TrvExpTrans_AmountCurr1</Name>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTrans</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>ItemizedCostAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Label>@SYS110059</Label>
																						<LabelPosition>Above</LabelPosition>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>RemainingAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Label>@SYS110060</Label>
																						<LabelPosition>Above</LabelPosition>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpTrans_ExchangeCode1</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>ExchangeCode</DataField>
																						<DataSource>TrvExpTrans</DataSource>
																					</AxFormControl>
																				</Controls>
																				<ColumnsMode>Fill</ColumnsMode>
																				<ViewEditMode>View</ViewEditMode>
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS121493</Caption>
																		<DataSource>TrvExpTransGuest</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>ExpenseLinePerdiemTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ConfigurationKey>TrvPerDiem</ConfigurationKey>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>PerdiemGrid</Name>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormDateControl">
																						<Name>TrvExpPerdiemData_TransDate</Name>
																						<AllowEdit>No</AllowEdit>
																						<Type>Date</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>TransDate</DataField>
																						<DataSource>TrvExpPerdiemData</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormIntegerControl">
																						<Name>TrvExpPerdiemData_NumberOfBreakfast</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Integer</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<AllowNegative>No</AllowNegative>
																						<DataField>NumberOfBreakfast</DataField>
																						<DataSource>TrvExpPerdiemData</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormIntegerControl">
																						<Name>TrvExpPerdiemData_NumberOfLunch</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Integer</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<AllowNegative>No</AllowNegative>
																						<DataField>NumberOfLunch</DataField>
																						<DataSource>TrvExpPerdiemData</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormIntegerControl">
																						<Name>TrvExpPerdiemData_NumberOfDinner</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Integer</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<AllowNegative>No</AllowNegative>
																						<DataField>NumberOfDinner</DataField>
																						<DataSource>TrvExpPerdiemData</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>TrvExpPerdiemData_DeductionWithCurrencyCode</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataMethod>deductionWithCurrencyCode</DataMethod>
																						<DataSource>TrvExpPerdiemData</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpPerdiemData</DataSource>
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS334061</Caption>
																		<DataSource>TrvExpPerdiemData</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>ExpenseLineFinancialTabPage</Name>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormContainerControl">
																				<Name>TrvExpTrans_DefaultDimension</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Container</Type>
																				<FormControlExtension>
																					<Name>DimensionEntryControl</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmControllerClassName</Name>
																							<Type>ExtendedDataType</Type>
																							<TypeName>ClassName</TypeName>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmControlLabelText</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmEnumerationName</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDataSourceName</Name>
																							<Type>String</Type>
																							<Value>TrvExpTrans</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmValueSetReferenceField</Name>
																							<Type>String</Type>
																							<Value>DefaultDimension</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmEnumValueSetReferenceField</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																				<Controls />
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS138491</Caption>
																		<DataSource>TrvExpTrans</DataSource>
																	</AxFormControl>
																</Controls>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>SplitExpenseLineDetailsBodyTabGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<Visible>No</Visible>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>SplitExpenseGridGroup</Name>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGridControl">
																<Name>SplitExpenseGrid</Name>
																<AllowEdit>No</AllowEdit>
																<ExtendedStyle>cardList</ExtendedStyle>
																<Type>Grid</Type>
																<Width>125</Width>
																<WidthMode>Manual</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>ExpenseSplitCard</Name>
																		<ExtendedStyle>BusinessCard</ExtendedStyle>
																		<Type>Group</Type>
																		<Width>125</Width>
																		<WidthMode>Manual</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitAmountCurrWithCurrencyCode</Name>
																				<ExtendedStyle>Heading</ExtendedStyle>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Alignment>Left</Alignment>
																				<DataMethod>amountWithCurrencyCode</DataMethod>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDateControl">
																				<Name>SplitTransDate</Name>
																				<Type>Date</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>TransDate</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitCostType</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CostType</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																				<LookupButton>Never</LookupButton>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormImageControl">
																				<Name>SplitStatus</Name>
																				<ExtendedStyle>businessCard_notification</ExtendedStyle>
																				<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
																				<Type>Image</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>errorStatusIndicator</DataMethod>
																				<DataSource>TrvExpTrans_Split</DataSource>
																				<Label>@SYS121619</Label>
																				<NormalImage>Warning</NormalImage>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>None</ArrangeMethod>
																		<Style>Card</Style>
																	</AxFormControl>
																</Controls>
																<DataSource>TrvExpTrans_Split</DataSource>
																<ShowRowLabels>No</ShowRowLabels>
																<Style>List</Style>
															</AxFormControl>
														</Controls>
														<Caption>@SYS69088</Caption>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>SplitExpenseLineDetailsBodyGroup</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>SplitAPExpenseLineDetails</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<Type>Group</Type>
																<Visible>No</Visible>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>SplitTrvExpTrans_ApprovalStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ApprovalStatus</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvExpTrans_ReceiptRequired</Name>
																		<AllowEdit>No</AllowEdit>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>isReceiptRequired</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Label>@SYS121500</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvExpTrans_OrigReceiptsRecvd</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OriginalReceiptsRecvd</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>SplitLedger</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitTrvExpTrans_Voucher</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>Voucher</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitTrvExpTrans_PostingErrors</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>PostingErrors</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>SplitVAT</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitVATRecoveryTaxId</Name>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataMethod>vatRecoveryTaxId</DataMethod>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>SplitExpenseLineDetails</Name>
																<Type>Group</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitMyJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Justification</DataField>
																		<DataSource>LineJustification_Split</DataSource>
																		<Label>@SYS330348</Label>
																		<ViewEditMode>Edit</ViewEditMode>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitSubmitterJustification</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>submitterJustification</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Label>@SYS302375</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitOtherJustifications</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>approverJustification</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Label>@SYS302370</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_CostType</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CostType</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_SubCategory</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>categoryOrSubCategoryName</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvExpTrans_TransDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransDate</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_MerchantId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MerchantId</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_PayMethod</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PayMethod</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>SplitTrvExpTrans_AmountGroup</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>SplitTrvExpTrans_AmountCurr</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>AmountCurr</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitTrvExpTrans_ExchangeCode</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>ExchangeCode</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitEditExchRate</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editExchRate</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvExpTrans_AmountMST</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AmountMST</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>SplitTrvExpTrans_CreditCardTransaction</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>SplitTrvExpTrans_CreditCardTransactionCurrencyAmount</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CreditCardTransactionCurrencyAmount</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>SplitTrvExpTrans_CreditCardTransactionCurrency</Name>
																				<AllowEdit>No</AllowEdit>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>String</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<DataField>CreditCardTransactionCurrency</DataField>
																				<DataSource>TrvExpTrans_Split</DataSource>
																				<ShowLabel>No</ShowLabel>
																			</AxFormControl>
																		</Controls>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_ReceiptNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReceiptNumber</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_Description</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Description</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvExpTrans_InvoiceAmt</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InvoiceAmt</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>SplitTrvExpTrans_BillIssuedTo</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BillIssuedTo</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_BusinessPurpose</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BusinessPurpose</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_EntertainmentLocation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>EntertainmentLocation</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_AdditionalInformation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AdditionalInformation</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_InterCompanyLE</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InterCompanyLE</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_ProjId</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjId</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_ProjStatusId</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjStatusId</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_ProjActivityNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ProjActivityNumber</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_TransactionText</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransactionText</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_InterCompanyCategory</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InterCompanyCategory</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Label>@Expense:ExpenseReport_ProjCategory</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_CountryRegion</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CountryRegion</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_AddressState</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AddressState</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitEditCity</Name>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editCity</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitEditZipCode</Name>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editZipCode</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_TaxGroup</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxGroup</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_TaxItemGroup</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxItemGroup</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvExpTrans_TaxIncluded</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TaxIncluded</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitCalcTaxAmount</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>calcTaxAmount</DataMethod>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvExpTrans_CorrectedTaxAmount</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CorrectedTaxAmount</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvExpTrans_NetTransactionAmount</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NetTransactionAmount</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvEnhancedHotelData_CheckInDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CheckInDate</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvEnhancedHotelData_CheckOutDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CheckOutDate</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedHotelData_FolioNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>FolioNumber</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedHotelData_GuestName</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>GuestName</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>SplitTrvEnhancedHotelData_GuestNumber</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>GuestNumber</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvEnhancedHotelData_NoShowIndicator</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NoShowIndicator</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>SplitTrvEnhancedHotelData_TotalRoomNights</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalRoomNights</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedHotelData_TotalRoomRent</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalRoomRent</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedHotelData_TotalTaxAmount</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalTaxAmount</DataField>
																		<DataSource>TrvEnhancedHotelData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvEnhancedCarRentalData_CarRentalCheckOutDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CarRentalCheckOutDate</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedCarRentalData_CheckOutLocation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CheckOutLocation</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvEnhancedCarRentalData_ReturnDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReturnDate</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedCarRentalData_ReturnLocation</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReturnLocation</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedCarRentalData_RenterName</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>RenterName</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedCarRentalData_DailyRentalRate</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DailyRentalRate</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedCarRentalData_WeeklyRentalRate</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>WeeklyRentalRate</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedCarRentalData_MonthlyRentalRate</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>MonthlyRentalRate</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvEnhancedCarRentalData_TotalMiles</Name>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalMiles</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>SplitTrvEnhancedCarRentalData_VehicleClass</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>VehicleClass</DataField>
																		<DataSource>TrvEnhancedCarRentalData_Split</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>SplitTrvEnhancedTripLegDetail_ServiceClass</Name>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ServiceClass</DataField>
																		<DataSource>TrvEnhancedTripLegDetail_Split</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_TicketNumber</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketNumber</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvExpTrans_TicketUsed</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketUsed</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_TicketClass</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketClass</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvEnhancedItineraryData_DomesticIndicator</Name>
																		<Type>CheckBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DomesticIndicator</DataField>
																		<DataSource>TrvEnhancedItineraryData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormIntegerControl">
																		<Name>SplitTrvEnhancedItineraryData_NumberOfLegs</Name>
																		<Type>Integer</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>NumberOfLegs</DataField>
																		<DataSource>TrvEnhancedItineraryData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvEnhancedItineraryData_IssuingCarrier</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IssuingCarrier</DataField>
																		<DataSource>TrvEnhancedItineraryData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>SplitTrvEnhancedItineraryData_TicketIssueDate</Name>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TicketIssueDate</DataField>
																		<DataSource>TrvEnhancedItineraryData_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>SplitTrvExpTrans_ReimburseAmt</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>Real</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ReimburseAmt</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_Reason</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Reason</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>SplitTrvExpTrans_ExpNumber_Details</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>String</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ExpNumber</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>SplitTrvExpTrans_IsPreAuthorized</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>CheckBox</Type>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IsPreAuthorized</DataField>
																		<DataSource>TrvExpTrans_Split</DataSource>
																		<Label>@SYS153181</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormGroupControl">
																		<Name>SplitRequisitionLineAmount</Name>
																		<Type>Group</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormReferenceGroupControl">
																				<Name>SplitTrvExpTrans_MappedToRequisitionLine</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>ReferenceGroup</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls />
																				<DataSource>TrvExpTrans_Split</DataSource>
																				<Label>@Expense:TravelReqReconciledAmount</Label>
																				<ReferenceField>MappedToRequisitionLine</ReferenceField>
																				<ReplacementFieldGroup>AccountingCurrencyAmount</ReplacementFieldGroup>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormRealControl">
																				<Name>SplitAuthorizedAmount</Name>
																				<AllowEdit>No</AllowEdit>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Real</Type>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<Label>@Expense:TravelReqAuthorizedAmount</Label>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>HorizontalLeft</ArrangeMethod>
																		<Breakable>No</Breakable>
																	</AxFormControl>
																</Controls>
																<FrameType>None</FrameType>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<DataSource>TrvExpTrans</DataSource>
														<FrameType>GroupedFieldsLabel</FrameType>
														<Style>BorderedGroup</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>SplitExpenseLineDetailsTabGroup</Name>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormTabControl">
																<Name>SplitExpenseLineDetailsTab</Name>
																<Type>Tab</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>SplitExpenseLineReceiptTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Pattern>ToolbarList</Pattern>
																		<PatternVersion>1.2</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>SplitReceiptsActionPane</Name>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>SplitReceiptAttachUploadGroup</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>SplitAttachReceipts</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MenuItemName>TrvAttachReceipts</MenuItemName>
																								<MultiSelect>No</MultiSelect>
																								<NormalImage>Invoice</NormalImage>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>SplitUploadReceipt</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>No</MultiSelect>
																								<NormalImage>Upload</NormalImage>
																								<Text>@Expense:UploadReceipt</Text>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>SplitOtherReceiptActions</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>SplitOpenReceipt</Name>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>No</MultiSelect>
																								<NeedsRecord>Yes</NeedsRecord>
																								<NormalImage>Related</NormalImage>
																								<Text>@SYS58571</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>SplitRemoveReceipts</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<MultiSelect>Yes</MultiSelect>
																								<NeedsRecord>Yes</NeedsRecord>
																								<NormalImage>Remove</NormalImage>
																								<Text>@SYS311855</Text>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																				</Controls>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>SplitExpenseReceiptsList</Name>
																				<ExtendedStyle>cardList</ExtendedStyle>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormGroupControl">
																						<Name>SplitReceipt</Name>
																						<ExtendedStyle>BusinessCard</ExtendedStyle>
																						<Pattern>BusinessCardThreeFields</Pattern>
																						<PatternVersion>1.0</PatternVersion>
																						<Type>Group</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormImageControl">
																								<Name>SplitThumbnail</Name>
																								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
																								<Type>Image</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataMethod>getThumbnail</DataMethod>
																								<DataSource>DocuRef</DataSource>
																								<Label>@SYS15953</Label>
																								<ShowLabel>No</ShowLabel>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormStringControl">
																								<Name>SplitDocuValue_FileName</Name>
																								<ExtendedStyle>Heading</ExtendedStyle>
																								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
																								<Type>String</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataField>Name</DataField>
																								<DataSource>DocuRef</DataSource>
																								<ShowLabel>No</ShowLabel>
																							</AxFormControl>
																						</Controls>
																						<ArrangeMethod>None</ArrangeMethod>
																						<DataSource>DocuValue</DataSource>
																						<Style>Card</Style>
																					</AxFormControl>
																				</Controls>
																				<DataSource>DocuValue</DataSource>
																				<Style>List</Style>
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS4007737</Caption>
																		<DataSource>DocuRef</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>SplitExpenseLineItemizeTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Type>TabPage</Type>
																		<WidthMode>SizeToAvailable</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl>
																				<Name>SplitTrvItemizationCalendarControl</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<WidthMode>SizeToAvailable</WidthMode>
																				<FormControlExtension>
																					<Name>TrvCalendarControl</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmTargetDataSourceName</Name>
																							<Type>String</Type>
																							<Value>TrvExpTrans_ItemizedLines_Split</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDateFieldName</Name>
																							<Type>String</Type>
																							<Value>TransDate</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDayDetailFieldName</Name>
																							<Type>String</Type>
																							<Value>CreditCardTransactionCurrencyAmount</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDayDetailField2Name</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>SplitItemizationActions</Name>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>SplitItemizationButtonGroup</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>SplitItemizationNewButton</Name>
																								<HelpText>@Expense:ItemizationAddCategoryHelpText</HelpText>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>New</Command>
																								<Text>@Expense:AddItemizationCategory</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>SplitItemizationDeleteButton</Name>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>DeleteRecord</Command>
																								<NormalImage>Delete</NormalImage>
																								<Text>@SYS4007810</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>SplitItemizationCopyToNextDayButton</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<HelpText>@Expense:ItemizationCopyToNextDayHelpText</HelpText>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<NormalImage>Copy</NormalImage>
																								<Text>@Expense:ItemizationCopyToNextDay</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormButtonControl">
																								<Name>SplitItemizedLineDetails</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<HelpText>@Expense:ItemizationDetailsHelpText</HelpText>
																								<Type>Button</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<NeedsRecord>Yes</NeedsRecord>
																								<Text>@Expense:ItemizationDetails</Text>
																							</AxFormControl>
																						</Controls>
																						<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>SplitItemizationSubCategoryGrid</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormReferenceGroupControl">
																						<Name>SplitTrvExpTrans_ItemizedLines_SubCategoryRecId</Name>
																						<Type>ReferenceGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls />
																						<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																						<Mandatory>Yes</Mandatory>
																						<ReferenceField>SubCategoryRecId</ReferenceField>
																						<ReplacementFieldGroup>SubCategoryName</ReplacementFieldGroup>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitTrvExpTrans_ItemizedLines_AmountCurr</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitTrvExpTrans_ItemizedLines_CreditCardTransactionAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>CreditCardTransactionCurrencyAmount</DataField>
																						<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																				<MultiSelect>No</MultiSelect>
																			</AxFormControl>
																		</Controls>
																		<Caption>@Expense:Itemization_TabPageCaption</Caption>
																		<DataSource>TrvExpTrans_ItemizedLines_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>SplitExpenseLineGuestTabPage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<Pattern>ToolbarList</Pattern>
																		<PatternVersion>1.2</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormActionPaneControl">
																				<Name>SplitGuestActionPane</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>ActionPane</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>SplitGuestAddRemoveGroup</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>SplitAddGuest</Name>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>New</Command>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormCommandButtonControl">
																								<Name>SplitRemoveGuest</Name>
																								<Type>CommandButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<Command>DeleteRecord</Command>
																								<NeedsRecord>Yes</NeedsRecord>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormButtonGroupControl">
																						<Name>SplitOtherGuestActions</Name>
																						<Type>ButtonGroup</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>SplitAddPreviousGuests</Name>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>TrvExpTrans_Split</DataSource>
																								<MenuItemName>TrvAddPreviousGuests</MenuItemName>
																								<NormalImage>People</NormalImage>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>SplitAddCoworkers</Name>
																								<Type>MenuFunctionButton</Type>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>TrvExpTrans_Split</DataSource>
																								<MenuItemName>TrvAddCoworkers</MenuItemName>
																								<NormalImage>People</NormalImage>
																							</AxFormControl>
																						</Controls>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTransGuest_Split</DataSource>
																				<Style>Strip</Style>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGridControl">
																				<Name>SplitGuestListGrid</Name>
																				<Type>Grid</Type>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>SplitTrvExpGuest_GuestId</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>GuestId</DataField>
																						<DataSource>TrvExpGuest_Split</DataSource>
																						<Mandatory>Yes</Mandatory>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>SplitTrvExpGuest_Company</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>Company</DataField>
																						<DataSource>TrvExpGuest_Split</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>SplitTrvExpGuest_Title</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>Title</DataField>
																						<DataSource>TrvExpGuest_Split</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitTrvExpTransGuest_AmountCurr</Name>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTransGuest_Split</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataSource>TrvExpTransGuest_Split</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>SplitGiftSummary</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ExtendedStyle>group_totalsContainer</ExtendedStyle>
																				<HeightMode>Auto</HeightMode>
																				<Pattern>FieldsFieldGroups</Pattern>
																				<PatternVersion>1.1</PatternVersion>
																				<Type>Group</Type>
																				<WidthMode>SizeToAvailable</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitTrvExpTrans_AmountCurr1</Name>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>AmountCurr</DataField>
																						<DataSource>TrvExpTrans_Split</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitItemizedCostAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Label>@SYS110059</Label>
																						<LabelPosition>Above</LabelPosition>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>SplitRemainingAmount</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>Real</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<Label>@SYS110060</Label>
																						<LabelPosition>Above</LabelPosition>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>SplitTrvExpTrans_ExchangeCode1</Name>
																						<Type>String</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>ExchangeCode</DataField>
																						<DataSource>TrvExpTrans_Split</DataSource>
																					</AxFormControl>
																				</Controls>
																				<ColumnsMode>Fill</ColumnsMode>
																				<ViewEditMode>View</ViewEditMode>
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS121493</Caption>
																		<DataSource>TrvExpTransGuest_Split</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>SplitExpenseLineFinancialTabPage</Name>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormContainerControl">
																				<Name>SplitTrvExpTrans_DefaultDimension</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<Type>Container</Type>
																				<FormControlExtension>
																					<Name>DimensionEntryControl</Name>
																					<ExtensionComponents />
																					<ExtensionProperties>
																						<AxFormControlExtensionProperty>
																							<Name>parmControllerClassName</Name>
																							<Type>ExtendedDataType</Type>
																							<TypeName>ClassName</TypeName>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmControlLabelText</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmEnumerationName</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmDataSourceName</Name>
																							<Type>String</Type>
																							<Value>TrvExpTrans_Split</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmValueSetReferenceField</Name>
																							<Type>String</Type>
																							<Value>DefaultDimension</Value>
																						</AxFormControlExtensionProperty>
																						<AxFormControlExtensionProperty>
																							<Name>parmEnumValueSetReferenceField</Name>
																							<Type>String</Type>
																						</AxFormControlExtensionProperty>
																					</ExtensionProperties>
																				</FormControlExtension>
																				<Controls />
																			</AxFormControl>
																		</Controls>
																		<Caption>@SYS138491</Caption>
																		<DataSource>TrvExpTrans_Split</DataSource>
																	</AxFormControl>
																</Controls>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExpenseTiles</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>ExpenseTilesList</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>cardList</ExtendedStyle>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ExpenseTileCard</Name>
												<ExtendedStyle>BusinessCard</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>ExpenseIcon_Tile</Name>
														<ExtendedStyle>ExpenseImage</ExtendedStyle>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>showExpenseTypeIcon</DataMethod>
														<DataSource>TrvExpTrans</DataSource>
														<Label>@SYS101577</Label>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AmountCurrWithCurrencyCode_Tile</Name>
														<ExtendedStyle>Emphasized</ExtendedStyle>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<Alignment>Left</Alignment>
														<DataMethod>amountCurrWithCurrencyCode</DataMethod>
														<DataSource>TrvExpTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>MerchantId_Tile</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle></ExtendedStyle>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>cardMerchantId</DataMethod>
														<DataSource>TrvExpTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ProjId_Tile</Name>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>ProjId</DataField>
														<DataSource>TrvExpTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>ApprovalStatus_Tile</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle></ExtendedStyle>
														<Type>ComboBox</Type>
														<Visible>No</Visible>
														<FormControlExtension
															i:nil="true" />
														<DataField>ApprovalStatus</DataField>
														<DataSource>TrvExpTrans</DataSource>
														<ShowLabel>No</ShowLabel>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>TransDate_Tile</Name>
														<ExtendedStyle>Footer2</ExtendedStyle>
														<Type>Date</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>TransDate</DataField>
														<DataSource>TrvExpTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CostType_Tile</Name>
														<ExtendedStyle>ImageCaption</ExtendedStyle>
														<Type>String</Type>
														<FormControlExtension
															i:nil="true" />
														<DataField>CostType</DataField>
														<DataSource>TrvExpTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormImageControl">
														<Name>Status_Tile</Name>
														<ExtendedStyle>businessCard_notification</ExtendedStyle>
														<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
														<Type>Image</Type>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>errorStatusIndicator</DataMethod>
														<DataSource>TrvExpTrans</DataSource>
														<Label>@SYS121619</Label>
														<NormalImage>Warning</NormalImage>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>None</ArrangeMethod>
												<Style>Card</Style>
											</AxFormControl>
										</Controls>
										<DataSource>TrvExpTrans</DataSource>
										<Style>List</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>TileViewDefaultAction</Name>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Text>@Expense:DetailsView</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GridView</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>ExpensesActionPaneGrid</Name>
										<Type>ActionPane</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ExpenseActionsGrid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>AddExpenseGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:CreateNewExpenseHelpText</HelpText>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<Command>New</Command>
														<Text>@Expense:NewExpense</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RemoveExpenseGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:RemoveExpenseHelpText</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<AutoRefreshData>Yes</AutoRefreshData>
														<MultiSelect>Yes</MultiSelect>
														<NormalImage>Delete</NormalImage>
														<Text>@Expense:RemoveExpenseButton</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>BulkEditLinesGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:BulkEditHelpText</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>BulletedList</NormalImage>
														<Text>@SYS190556</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>CopyLineGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:CopyHelpText</HelpText>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Copy</NormalImage>
														<Text>@Expense:ExpenseLineCopy</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>MergeExpenseGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:MatchDetails</HelpText>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<AutoRefreshData>Yes</AutoRefreshData>
														<CopyCallerQuery>Yes</CopyCallerQuery>
														<MenuItemName>TrvExpenseMerge</MenuItemName>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Link</NormalImage>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>SplitExpenseButtonGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HelpText>@Expense:SplitExpense</HelpText>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<AutoRefreshData>Yes</AutoRefreshData>
														<MenuItemName>TrvExpenseSplit</MenuItemName>
														<MultiSelect>No</MultiSelect>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>DeliveryLine</NormalImage>
														<Text>@SYS24089</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>ExpensePaymentDetailsGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Enabled>No</Enabled>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<DataSource>TrvExpTrans</DataSource>
														<MenuItemName>TrvExpensePaymentDetails</MenuItemName>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>PayTender</NormalImage>
														<Text>@SYS55132</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>GAFInformationGridView</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<MenuItemName>TaxGSTEditTaxInformation_MY</MenuItemName>
														<NormalImage>Info</NormalImage>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>ExpenseGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>PolicyErrorIndicatorGrid</Name>
												<PreviewPartRef>TrvStatusPreview</PreviewPartRef>
												<Type>Image</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>errorStatusIndicator</DataMethod>
												<DataSource>TrvExpTrans</DataSource>
												<Label>@SYS121619</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormImageControl">
												<Name>SplitHeaderIndicator</Name>
												<Type>Image</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>splitHeaderIndicator</DataMethod>
												<DataSource>TrvExpTrans</DataSource>
												<Label>@Expense:SplitHeader</Label>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>TrvExpTrans_TransDate_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransDate</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_ExpNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<Visible>No</Visible>
												<FormControlExtension
													i:nil="true" />
												<DataField>ExpNumber</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>TrvExpTrans_ApprovalStatus_Grid</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ApprovalStatus</DataField>
												<DataSource>TrvExpTrans</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_CostType_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>CostType</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_MerchantId_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>MerchantId</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>TrvExpTrans_AmountCurr_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Real</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>AmountCurr</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_ExchangeCode_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ExchangeCode</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_ProjId_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ProjId</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_ProjStatusId_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ProjStatusId</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TrvExpTrans_ProjActivityNumber_Grid</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ProjActivityNumber</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TrvExpTrans_ReceiptsAttached_Grid</Name>
												<AllowEdit>No</AllowEdit>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>ReceiptsAttached</DataField>
												<DataSource>TrvExpTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TrvExpTrans_ReceiptRequired_Grid</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>isReceiptRequired</DataMethod>
												<DataSource>TrvExpTrans</DataSource>
												<Label>@SYS121500</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TrvExpTrans_IsItemizationMandatory</Name>
												<AllowEdit>No</AllowEdit>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>isItemizationMandatory</DataMethod>
												<DataSource>TrvExpTrans</DataSource>
												<Label>@Expense:ItemizationRequired</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>TrvExpTrans_IsItemizationComplete</Name>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>isItemizationComplete</DataMethod>
												<DataSource>TrvExpTrans</DataSource>
												<Label>@Expense:ItemizationComplete</Label>
											</AxFormControl>
										</Controls>
										<DataSource>TrvExpTrans</DataSource>
										<DefaultAction>GridViewDetaultAction</DefaultAction>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GridViewDetaultAction</Name>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>@Expense:Expenses</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ExpenseReportSummary</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>group_totalsContainer</ExtendedStyle>
				<HeightMode>Auto</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalExpenseReportAmount</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>total</DataMethod>
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS340849</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalPayToEmployee</Name>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>totalPayToEmployee</DataMethod>
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS4007732</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalCreditCard</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>totalCreditCard</DataMethod>
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS4007733</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TotalPersonal</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>totalPersonal</DataMethod>
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS114248</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CompanyCurrency</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>companyCurrency</DataMethod>
						<DataSource>TrvExpTable</DataSource>
						<Label>@SYS101485</Label>
						<LabelPosition>Above</LabelPosition>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<ViewEditMode>View</ViewEditMode>
			</AxFormControl>
			<AxFormControl>
				<Name>TimerControl</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Enabled>No</Enabled>
				<Skip>Yes</Skip>
				<Visible>No</Visible>
				<FormControlExtension>
					<Name>TimerControl</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>interval</Name>
							<Type>Int32</Type>
							<Value>1</Value>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>startOnFormCreation</Name>
							<Type>Enum</Type>
							<TypeName>NoYes</TypeName>
							<Value>No</Value>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>