<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjResourceHoursBookingDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ProjResourceHoursBookingDialog extends FormRun
{
    #TimeConstants

    ResHourSelection    controller;
    ActivityRecId       activity;
    Set                 resourceSet;
    Map                 workingDaysMap;
    Map                 specifyResourceHoursMap;
    AVTimeframeType     timeFrameType;
    ResCommitType       commitType;
    boolean             isRootTask;
    real                taskRemainingHours;
    utcdatetime         activityStartDateTimeValue;
    utcdatetime         activityEndDateTimeValue;
    
    private const real RoundingConstant = 0.01;

}
]]></Source>
			</Method>
			<Method>
				<Name>HourSelection</Name>
				<Source><![CDATA[
    public ResHourSelection HourSelection(ResHourSelection _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        resourceSet = new Set(Types::String);
        workingDaysMap = new Map(Types::String, Types::Integer);
        specifyResourceHoursMap = new Map(Types::Int64, Types::Class);
        date    activityStartDateValue;
        date    activityEndDateValue;

        if (element.args())
        {
            if (!controller)
            {
                controller = element.args().caller() as ResHourSelection;
            }

            timeFrameType = controller.parmAvControl().timescale();
            activity = controller.Activity();
            commitType = controller.parmCommitType();

            if (activity)
            {
                ActivityRecId rootActivity = ActivityFacade::getRootActivity(activity);
                isRootTask = (rootActivity == activity ? true : false);
                [activityStartDateValue, activityEndDateValue] = ActivityFacade::getSchedDates(activity);
                activityStartDateTimeValue = DateTimeUtil::newDateTime(activityStartDateValue, 0);
                activityEndDateTimeValue = DateTimeUtil::newDateTime(activityEndDateValue, #LastSecondOfTheDay);
            }
            else
            {
                isRootTask = true;
            }
        }

        super();

        if (controller)
        {
            ActivityStartDate.visible(activity);
            ActivityendDate.visible(activity);

            if (activity)
            {
                ActivityStartDate.dateValue(activityStartDateValue);
                ActivityEndDate.dateValue(activityEndDateValue);

                PSARSEntityType entityType = ActivityFacade::getActivityType(activity);
                this.design().caption(strFmt("@Res:DistributeEntityHours", strLwr(enum2Str(entityType))));
            }

            if (!activity || isRootTask)
            {
                ActivityStartDate.label("@Res:ProjectSchedulingStartDate");
                ActivityendDate.label("@Res:ProjectSchedulingEndDate");
                this.design().caption(strFmt("@Res:DistributeEntityHours", strLwr(enum2Str(PSARSEntityType::Project))));
            }
            else
            {
                ActivityStartDate.label("@Res:TaskStartDate");
                ActivityendDate.label("@Res:TaskEndDate");
            }

            str timeFrameTypeStr = strLwr(enum2Str(timeFrameType));
            HoursTabPageControl.caption(strFmt("@Res:SpecifyResourceHoursByTimescale", timeFrameTypeStr, strLwr(enum2Str(commitType))));

            boolean isHourOrDayTimeFrame = ((timeFrameType == AVTimeframeType::Hour) || (timeFrameType == AVTimeframeType::Day)) ? true : false;
            PeriodEndDateTimeStr.visible(!isHourOrDayTimeFrame);
            SpecifyResourceHours_DaysLength.visible(!isHourOrDayTimeFrame);

            if (timeFrameType == AVTimeframeType::Hour)
            {
                PeriodStartDateTimeStr.label("@Res:Hour");
            }
            else if (timeFrameType != AVTimeframeType::Day)
            {
                PeriodStartDateTimeStr.label(strFmt("@Res:StartDateWithTimeScale", timeFrameTypeStr));
                PeriodEndDateTimeStr.label(strFmt("@Res:EndDateWithTimeScale", timeFrameTypeStr));
            }

            ActivityTabPageControl.visible(controller.ShowActivitySelection());
            RemainingHours.visible(activity && !isRootTask);

            if (activity && !isRootTask)
            {
                taskRemainingHours = ActivityFacade::getRemainingCapacityInHours(activity, commitType);
            }

            element.setFieldValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSpecifyResourceHoursGrid</Name>
				<Source><![CDATA[
    private void initSpecifyResourceHoursGrid(AvailabilityView _avControl)
    {
        const str collectionKeyDelimiter = '-';

        if (_avControl)
        {
            ListEnumerator scheduleEnum = _avControl.selections().getChartItems().getEnumerator();
            ListEnumerator enumerator = scheduleEnum;
            boolean isWBSTask = (activity && !isRootTask) ? true : false;

            ttsbegin;
            while (enumerator.moveNext())
            {
                ResSpecifyResourceHoursContext specifyResourceHoursContext = new ResSpecifyResourceHoursContext();
                ChartItemDataContract selection = enumerator.current();
                utcdatetime timelineKey = AVUtil::getDateTime(selection.timelineKey());
                AVTimeframe timeframe = AVTimeframe::getTimeframe(timelineKey, timeframeType);
                utcdatetime periodStartDateTime = timeframe.start();
                utcdatetime periodEndDateTime = timeframe.end();

                if (isWBSTask)
                {
                    // Skip adding records to temp table if user has selected dates period outside of the activity task dates range.
                    if ((periodEndDateTime < activityStartDateTimeValue) || (periodStartDateTime > activityEndDateTimeValue))
                    {
                        continue;
                    }
                }

                SpecifyResourceHours.StartDateTime = periodStartDateTime;
                SpecifyResourceHours.EndDateTime = periodEndDateTime;
                specifyResourceHoursContext.parmStartDateTime(periodStartDateTime);

                utcdatetime actualStartDateTime = (isWBSTask && (periodStartDateTime < activityStartDateTimeValue)) ? activityStartDateTimeValue : periodStartDateTime;
                utcdatetime actualEndDateTime = (isWBSTask && (periodEndDateTime > activityEndDateTimeValue)) ? activityEndDateTimeValue : periodEndDateTime;

                SpecifyResourceHours.ActualStartDateTime = actualStartDateTime;
                SpecifyResourceHours.ActualEndDateTime = actualEndDateTime;

                ActivityResourceId collectionKey = selection.collectionKey();
                SpecifyResourceHours.CollectionKey = collectionKey;
                specifyResourceHoursContext.parmCollectionKey(CollectionKey);
                resourceSet.add(collectionKey);

                container keys = str2con(collectionKey, collectionKeyDelimiter);
                ResourceRecId resource = str2Int64(conPeek(keys, 2));
                SpecifyResourceHours.Resource = resource;

                ActivityResourceRecId activityResource = str2Int64(conPeek(keys, 3));
                SpecifyResourceHours.ActivityResource = activityResource;

                if (resource)
                {
                    SpecifyResourceHours.ResourceName = ResourceFacade::getName(resource);
                }
                else
                {
                    SpecifyResourceHours.ResourceName = ActivityResourceFacade::getName(activityResource);
                }

                real resourceCapacity;
                real resourceRemainingCapacity;
                int numberOfWorkingDays = 1;

                if (timeFrameType == AVTimeframeType::Hour || timeFrameType == AVTimeframeType::Day)
                {
                    if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                    {
                        resourceCapacity = this.getCalendarCapacity(collectionKey, periodStartDateTime, timeframeType);
                        resourceRemainingCapacity = this.getRemainingCapacity(isWBSTask, resourceCapacity, collectionKey, periodStartDateTime, timeFrameType);
                    }
                    else
                    {
                        ResRollup rollup = ResRollup::findByActivityResourceId(collectionKey, periodStartDateTime, timeframeType);
                        resourceCapacity = rollup.Capacity;
                        resourceRemainingCapacity = rollup.Remaining;
                    }
                }
                else
                {
                    if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                    {
                        resourceCapacity = this.getCalendarCapacity(collectionKey, periodStartDateTime, timeframeType);
                        resourceRemainingCapacity = this.getRemainingCapacity(isWBSTask, resourceCapacity, collectionKey, periodStartDateTime, timeFrameType);
                        numberOfWorkingDays = this.getNumberOfWorkingDays(collectionKey, actualStartDateTime, actualEndDateTime);
                    }
                    else
                    {
                        utcdatetime rollupStartDay = AVTimeframe::getTimeframe(actualStartDateTime, AVTimeframeType::Day).start();
                        utcdatetime rollupEndDay = AVTimeframe::getTimeframe(actualEndDateTime, AVTimeframeType::Day).End();
                        [resourceCapacity, resourceRemainingCapacity, numberOfWorkingDays] = 
                            ResRollup::getSumOfCapacityRemainingCapacityAndWorkingDaysByActivityResourceId(collectionKey, rollupStartDay, rollupEndDay);
                    }
                }

                SpecifyResourceHours.DaysLength = numberOfWorkingDays;
                specifyResourceHoursContext.parmNumberOfWorkingDays(numberOfWorkingDays);
                SpecifyResourceHours.RemainingCapacity = resourceRemainingCapacity;
                SpecifyResourceHours.Capacity = resourceCapacity;
                specifyResourceHoursContext.parmCapacity(SpecifyResourceHours.Capacity);

                if (!workingDaysMap.exists(collectionKey))
                {
                    workingDaysMap.insert(collectionKey, 0);
                }
                    
                if (resourceCapacity > 0)
                { 
                    int workingDays = workingDaysMap.lookup(collectionKey) + numberOfWorkingDays;
                    workingDaysMap.remove(collectionKey);
                    workingDaysMap.insert(collectionKey, workingDays);
                }
                
                SpecifyResourceHours.insert();
                specifyResourceHoursMap.insert(SpecifyResourceHours.RecId, specifyResourceHoursContext);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarCapacity</Name>
				<Source><![CDATA[
    private real getCalendarCapacity(ActivityResourceId _collectionKey, utcdatetime _periodStartDateTime, AVTimeFrameType _timeFrameType)
    {
        real calendarCapacity;
        
        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);
        utcdatetime periodEndDateTime = AVTimeframe::getTimeframe(_periodStartDateTime, _timeFrameType).end();

        if (resource)
        {
            calendarCapacity = round(ResourceFacade::getCalendarCapacity(resource, _periodStartDateTime, periodEndDateTime) / #SecondsPerHour, RoundingConstant);
        }
        else if (activityResource)
        {
            CalendarRecId calendar = ActivityResourceFacade::getCalendar(activityResource);
            calendarCapacity = round(ResUtil::getCalendarCapacity(calendar, _periodStartDateTime, periodEndDateTime) / #SecondsPerHour, RoundingConstant);
        }

        return calendarCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingCapacity</Name>
				<Source><![CDATA[
    private real getRemainingCapacity(boolean _isWBSTask, real _calendarCapacity, ActivityResourceId _collectionKey, utcdatetime _periodStartDateTime, AVTimeFrameType _timeFrameType)
    {
        real scheduledCapacity;
        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);

        if (resource)
        {
            if (activityResource && _isWBSTask)
            {
                scheduledCapacity = round (ResUtil::getAssignmentScheduledCapacity(resource, activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
            else
            {
                scheduledCapacity = round(ResUtil::getAvailabilityScheduledCapacity(resource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
        }
        else if (activityResource)
        {
            if (_isWBSTask)
            {
                scheduledCapacity = round(ResUtil::getAssignmentScheduledCapacity(resource, activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
            else
            {
                scheduledCapacity = round(ResUtil::getActivityScheduledCapacity(activityResource, _periodStartDateTime, _timeFrameType) / #SecondsPerHour, RoundingConstant);
            }
        }

        return _calendarCapacity - scheduledCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfWorkingDays</Name>
				<Source><![CDATA[
    private int getNumberOfWorkingDays(ActivityResourceId _collectionKey, utcdatetime _startDateTime, utcdatetime _endDateTime)
    {
        int numberOfWorkingDays;

        utcdatetime startDayDateTime = AVTimeframe::getTimeframe(_startDateTime, AVTimeframeType::Day).start();
        utcdatetime endDayDateTime = AVTimeframe::getTimeframe(_endDateTime, AVTimeframeType::Day).End();

        ResourceRecId resource = ResUtil::getResourceRecId(_collectionKey);
        ActivityResourcerecId activityResource = ResUtil::getActivityResourceRecId(_collectionKey);

        if (resource)
        {
            numberOfWorkingDays = ResourceFacade::getNumberOfWorkingDays(resource, startDayDateTime, endDayDateTime);
        }
        else if (activityResource)
        {
            CalendarRecId calendar = ActivityResourceFacade::getCalendar(activityResource);
            numberOfWorkingDays = ResUtil::getNumberOfWorkingDaysByCalendar(calendar, startDayDateTime, endDayDateTime);
        }

        return numberOfWorkingDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservedHourFromMap</Name>
				<Source><![CDATA[
    private void updateReservedHourFromMap(RecId _specifyResourceHoursRecId, real _updatedReservedHours)
    {
        if (specifyResourceHoursMap.exists(_specifyResourceHoursRecId))
        {
            ResSpecifyResourceHoursContext specifyResourceHoursContext = specifyResourceHoursMap.lookup(_specifyResourceHoursRecId);
            specifyResourceHoursContext.parmReservedHours(_updatedReservedHours);
            specifyResourceHoursMap.remove(_specifyResourceHoursRecId);
            specifyResourceHoursMap.insert(_specifyResourceHoursRecId, specifyResourceHoursContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservedHoursWithCapacityFromMap</Name>
				<Source><![CDATA[
    private void updateReservedHoursWithCapacityFromMap(ResActivityResourceId _activityResourceId, real _updatedReservedHours)
    {
        MapEnumerator specifyResourceHoursMapEnum = specifyResourceHoursMap.getEnumerator();
        Map resourceHoursMapUpdateMap = new Map(Types::Int64, Types::Class);

        while (specifyResourceHoursMapEnum.moveNext())
        {
            ResSpecifyResourceHoursContext specifyResourceHoursContext = specifyResourceHoursMapEnum.currentValue();
            if (specifyResourceHoursContext.parmCollectionKey() == _activityResourceId)
            {
                if (specifyResourceHoursContext.parmCapacity() > 0)                
                {
                    specifyResourceHoursContext.parmReservedHours(_updatedReservedHours * specifyResourceHoursContext.parmNumberOfWorkingDays());
                    resourceHoursMapUpdateMap.insert(specifyResourceHoursMapEnum.currentKey(), specifyResourceHoursContext);
                }
                if (specifyResourceHoursContext.parmCapacity() <= 0)
                {
                    specifyResourceHoursContext.parmReservedHours(0);
                    resourceHoursMapUpdateMap.insert(specifyResourceHoursMapEnum.currentKey(), specifyResourceHoursContext);
                }
            }
        }

        if (!resourceHoursMapUpdateMap.empty())
        {
            MapEnumerator resourceHoursMapUpdateSetEnum = resourceHoursMapUpdateMap.getEnumerator();

            while (resourceHoursMapUpdateSetEnum.moveNext())
            {
                specifyResourceHoursMap.remove(resourceHoursMapUpdateSetEnum.currentKey());
                specifyResourceHoursMap.insert(resourceHoursMapUpdateSetEnum.currentKey(), resourceHoursMapUpdateSetEnum.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecifyResourceHoursGrid</Name>
				<Source><![CDATA[
    private void updateSpecifyResourceHoursGrid()
    {
        real proposeHours = HrsBookedPerWorkerCtrl.realValue();

        ttsbegin;
        if (!EditSpecifyResourceHoursGrid.checked() && !resourceSet.empty())
        {
            ProjResourceHoursDistributeType distributionType = HourDistributionType.selection();
            SetEnumerator resourceSetEnum = resourceSet.getEnumerator();
            boolean isWBSTask = (activity && !isRootTask) ? true : false;
            while (resourceSetEnum.moveNext())
            {
                if (distributionType == ProjResourceHoursDistributeType::FrontLoad)
                {
                    real remainingProposeHours = proposeHours;
                    if (isWBSTask && (remainingProposeHours >= taskRemainingHours))
                    {
                        remainingProposeHours = taskRemainingHours;
                    }
                         
                    while select forupdate SpecifyResourceHours
                            order by SpecifyResourceHours.StartDateTime
                            where SpecifyResourceHours.CollectionKey == resourceSetEnum.current()
                    {   
                        real originialReservedHours = SpecifyResourceHours.ReservedHours;

                        // In the case of hard book, the remaining capacity will not changed
                        if (commitType == ResCommitType::HardBook)
                        {
                            SpecifyResourceHours.RemainingCapacity = SpecifyResourceHours.RemainingCapacity + originialReservedHours;
                        }

                        if (SpecifyResourceHours.Capacity > 0 && SpecifyResourceHours.RemainingCapacity > 0)
                        {
                            if (remainingProposeHours > SpecifyResourceHours.RemainingCapacity)
                            {
                                SpecifyResourceHours.ReservedHours = SpecifyResourceHours.RemainingCapacity;
                                remainingProposeHours = remainingProposeHours - SpecifyResourceHours.RemainingCapacity;
                            }
                            else
                            {
                                SpecifyResourceHours.ReservedHours = remainingProposeHours;
                                remainingProposeHours = 0;
                            }
                        }
                        else
                        {
                            SpecifyResourceHours.ReservedHours = 0;
                        }
                        
                        // In the case of hard book, the remaining capacity will not changed
                        if (commitType == ResCommitType::HardBook)
                        {
                            SpecifyResourceHours.RemainingCapacity = SpecifyResourceHours.RemainingCapacity - SpecifyResourceHours.ReservedHours;
                        }
                        
                        SpecifyResourceHours.update();

                        element.updateReservedHourFromMap(SpecifyResourceHours.RecId, SpecifyResourceHours.ReservedHours);
                    }
                }
                else if (distributionType == ProjResourceHoursDistributeType::EvenlyDistribute && !workingDaysMap.empty())
                {
                    int workingDays = workingDaysMap.lookup(resourceSetEnum.current());
                    if (workingDays > 0)
                    {
                        real reservedHoursPerWorkingDays = proposeHours / workingDays;

                        // In the case of hard book, the remaining capacity will not changed
                        if (commitType == ResCommitType::HardBook)
                        {
                            update_recordset SpecifyResourceHours
                                setting RemainingCapacity = SpecifyResourceHours.RemainingCapacity + SpecifyResourceHours.ReservedHours - (reservedHoursPerWorkingDays * SpecifyResourceHours.DaysLength)
                                    where SpecifyResourceHours.CollectionKey == resourceSetEnum.current()
                                        && SpecifyResourceHours.Capacity > 0;

                            update_recordset SpecifyResourceHours
                                setting RemainingCapacity = SpecifyResourceHours.RemainingCapacity + SpecifyResourceHours.ReservedHours
                                    where SpecifyResourceHours.CollectionKey == resourceSetEnum.current()
                                        && SpecifyResourceHours.Capacity <= 0;
                        }

                        update_recordset SpecifyResourceHours
                            setting ReservedHours = reservedHoursPerWorkingDays * SpecifyResourceHours.DaysLength
                                where SpecifyResourceHours.CollectionKey == resourceSetEnum.current()
                                    && SpecifyResourceHours.Capacity > 0;
                       
                        update_recordset SpecifyResourceHours
                            setting ReservedHours = 0
                                where SpecifyResourceHours.CollectionKey == resourceSetEnum.current()
                                    && SpecifyResourceHours.Capacity <= 0;

                        element.updateReservedHoursWithCapacityFromMap(resourceSetEnum.current(), reservedHoursPerWorkingDays);
                    }
                }
            }
        }
        ttscommit;

        SpecifyResourceHours_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValues</Name>
				<Source><![CDATA[
    private void setFieldValues()
    {
        if (!activity)
        {
            if (controller.ShowActivitySelection())
            {
                ActivityTabPageControl.caption(strFmt("@Res:SelectedProject", ProjTable.ProjId, ProjTable.Name));
            }
        }
        
        boolean selectedCustomized = EditSpecifyResourceHoursGrid.checked();
        HrsBookedPerWorkerCtrl.enabled(!selectedCustomized);
        HourDistributionType.enabled(!selectedCustomized);
        SpecifyResourceHoursGrid.allowEdit(selectedCustomized);

        element.setRemainingHours();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainingHours</Name>
				<Source><![CDATA[
    private void setRemainingHours()
    {
        if (activity && !isRootTask)
        {
            RemainingHours.realValue(taskRemainingHours - TotalReservedHours.realValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalReservedHours</Name>
				<Source><![CDATA[
    private void calculateTotalReservedHours()
    {
        real reservedHoursTotal;
        MapEnumerator specifyResourceHoursMapEnum = specifyResourceHoursMap.getEnumerator();

        while (specifyResourceHoursMapEnum.moveNext())
        {
            ResSpecifyResourceHoursContext specifyResourceHoursContext = specifyResourceHoursMapEnum.currentValue();
            reservedHoursTotal += specifyResourceHoursContext.parmReservedHours();
        }

        TotalReservedHours.realValue(reservedHoursTotal);

        element.setRemainingHours();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailDateTime</Name>
				<Source><![CDATA[
    private str getDetailDateTime(utcdatetime _targetDateTime)
    {
        str detailDateTime;

        date targetdate = datetimeUtil::date(_targetDateTime);

        if (timeFrameType == AVTimeframeType::Hour)
        {
            detailDateTime = strFmt("@Res:FullDateFormatWithTime",
                        dayName(dayOfWk(targetdate)),
                        date2StrUsr(targetdate, DateFlags::FormatAll),
                        time2Str(DateTimeUtil::time(_targetDateTime), TimeSeparator::Auto, TimeFormat::Auto));
        }
        else
        {
            detailDateTime = strFmt("@Res:FullDateFormat",
                        dayName(dayOfWk(targetdate)),
                        date2StrUsr(targetdate, DateFlags::FormatAll));
        }

        return detailDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceRemainingCapacity</Name>
				<Source><![CDATA[
    private void updateResourceRemainingCapacity(ResTmpSpecifyResourceHours _specifyResourceHours, real _updatedRemainingCapacity)
    {
        ttsbegin;
        _specifyResourceHours.selectForUpdate();
        _specifyResourceHours.RemainingCapacity = _updatedRemainingCapacity;
        _specifyResourceHours.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// called when close a form
    /// </summary>
    /// <returns>
    /// true if form can be closed
    /// </returns>
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        if (this.closedCancel())
        {
            return ret;
        }

        if (HrsBookedPerWorkerCtrl.realValue() <= 0 && !EditSpecifyResourceHoursGrid.checked() && this.closedOk())
        {
            warning("@SYS4009768");
            return false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ActivityTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            if (!controller)
            {
                controller = element.args().caller() as ResHourSelection;
            }

            if (controller)
            {
                date endDate = DateTimeUtil::date(controller.ActivityEnd());
                this.query().dataSourceName(tableStr(ProjTable)).addRange(
                    fieldNum(ProjTable, psaSchedStartDate)).value(strFmt("((%1 <= %2))",
                    fieldStr(ProjTable, psaSchedStartDate), date2StrXpp(endDate)));

                date startDate = DateTimeUtil::date(controller.ActivityStart());
                this.query().dataSourceName(tableStr(ProjTable)).addRange(
                    fieldNum(ProjTable, psaSchedEndDate)).value(strFmt("((%1 >= %2))",
                    fieldStr(ProjTable, psaSchedEndDate), date2StrXpp(startDate)));

                if (ProjCDSLockingOptionTable::get(ProjCDSLockingOption::ProjectResourcing))
                {
                    this.query().dataSourceName(tableStr(ProjTable)).addRange(
                        fieldNum(ProjTable, ProjDataSource)).value(SysQuery::value(0));
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ProjTable</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();
            element.setFieldValues();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SpecifyResourceHours</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (controller)
            {
                element.initSpecifyResourceHoursGrid(controller.parmAvControl());
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Query specifyResourceHoursQuery = SpecifyResourceHours_ds.query();
            QueryBuildDataSource specifyResourceHoursDS = specifyResourceHoursQuery.dataSourceNo(1);
            specifyResourceHoursDS.addOrderByField(fieldnum(ResTmpSpecifyResourceHours, ResourceName), SortOrder::Ascending);
            specifyResourceHoursDS.addOrderByField(fieldnum(ResTmpSpecifyResourceHours, StartDateTime), SortOrder::Ascending);
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailPeriodStartDateTime</Name>
						<Source><![CDATA[
        display str getDetailPeriodStartDateTime(ResTmpSpecifyResourceHours _record)
        {
            return element.getDetailDateTime(_record.ActualStartDateTime);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDetailPeriodEndDateTime</Name>
						<Source><![CDATA[
        display str getDetailPeriodEndDateTime(ResTmpSpecifyResourceHours _record)
        {
            return element.getDetailDateTime(_record.ActualEndDateTime);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>HrsBookedPerWorkerCtrl</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if (ret && controller)
            {
                element.updateSpecifyResourceHoursGrid();
                element.calculateTotalReservedHours();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HourDistributionType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if (ret && controller)
            {
                element.setFieldValues();
                element.updateSpecifyResourceHoursGrid();
                element.calculateTotalReservedHours();
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditSpecifyResourceHoursGrid</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if (ret && controller)
            {
                element.setFieldValues();
                element.updateSpecifyResourceHoursGrid();
                element.calculateTotalReservedHours();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ResTmpSpecifyResourceHours_ReservedHours</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            real originalReservedHours = SpecifyResourceHours.ReservedHours;

            ret = super();
            if (ret)
            {
                element.updateReservedHourFromMap(SpecifyResourceHours.RecId, SpecifyResourceHours.ReservedHours);
                element.calculateTotalReservedHours();

                // In the case of hard book, the remaining capacity will not changed
                if (commitType == ResCommitType::HardBook)
                {
                    element.updateResourceRemainingCapacity(SpecifyResourceHours, (SpecifyResourceHours.RemainingCapacity + originalReservedHours - SpecifyResourceHours.ReservedHours));
                    SpecifyResourceHours_DS.research(true);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (activity && !isRootTask && RemainingHours.realValue() < 0)
            {
                error("@Res:TaskRemainingHoursLessThanZeroError");
            }
            else if (TotalReservedHours.realValue() <= 0 )
            {
                warning("@Res:TotalReservedHoursHasNoHour");
            }
            else
            {
                super();
        
                if (!controller)
                {
                    controller = element.args().caller() as ResHourSelection;
                }

                ProjId project = ActivityTable.ProjId;
                if (controller && (activity || project))
                {
                    if (!activity)
                    {
                        activity = ProjWBS::getRootActivityRecId(project);
                        controller.Activity(activity);
                    }

                    if (EditSpecifyResourceHoursGrid.checked())
                    {
                        List schedules = new List(Types::Class);

                        while select ActivityResource, Resource, StartDateTime, EndDateTime, ReservedHours from SpecifyResourceHours
                        {
                            ResIReservationSchedule schedule = ResReservationSchedule::construct();
                            schedule.resource(SpecifyResourceHours.Resource);
                            schedule.activityResource(SpecifyResourceHours.ActivityResource);
                            schedule.start(SpecifyResourceHours.StartDateTime);
                            schedule.end(SpecifyResourceHours.EndDateTime);
                            schedule.capacity(SpecifyResourceHours.ReservedHours * #SecondsPerHour);
                            schedules.addEnd(schedule);
                        }

                        controller.parmReserveProcessorType(ResBookingType::Manual);
                        controller.parmReservationScheduleList(schedules);
                    }
                    else
                    {
                        controller.Allocation(HrsBookedPerWorkerCtrl.realValue());

                        ResBookingType bookingType;
                        switch (HourDistributionType.selection())
                        {
                            case ProjResourceHoursDistributeType::FrontLoad:
                                bookingType = ResBookingType::FrontLoadCapacity;
                                break;
                            default:
                                bookingType = ResBookingType::DistributeCapacityEvenly;
                                break;
                        }

                        controller.parmReserveProcessorType(bookingType);
                        controller.parmReservationScheduleList(null);
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ActivityTable</Name>
			<Table>ActivityListOpenView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ProjTable</Name>
			<Table>ProjTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AlternateBudgetProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CertifiedPayroll</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompleteScheduled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractAmendment_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractDate_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractPeriod_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContractValue_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Created</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExtensionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Format</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Header</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobPayType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MinTimeIncrement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OCIP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OCIPGL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetaryControlOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetManagement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjBudgetOverrunOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCarryForwardNegativeBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjCarryForwardRemainingBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjectedEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjectedStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLedgerPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjLinePropertySearch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSADoInvoiceCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAForecastModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAForecastModelIdExternal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAInvoiceMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSANotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqHourValidate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAPReqItemValidate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjTask</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAReadyForInvoicing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAResSchedStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainIncludeLower</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSARetainScheduleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedCalendarId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedConstraintDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedConstraintType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedDefaultDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedEffort</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedFromTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedIgnoreCalendar</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedMilestone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedScheduled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedToTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSASchedUseDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATeleFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATimeMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSATrackCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityExpenseForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityExpenseTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityHourForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityHourTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityItemForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequireActivityItemTrx</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[1]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[2]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>sortingId[3]</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Subject_SA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncCreatedByExternal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncEntityId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncLastTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncToCRM</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SyncVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Template</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimePostDetailSummary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseAlternateProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseBudgeting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidateProjCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WIPProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerPSAArchitect</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsibleFinancial</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsibleSales</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>ActivityTable</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SpecifyResourceHours</Name>
			<Table>ResTmpSpecifyResourceHours</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Activity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActivityResource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActualEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActualStartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Capacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionKey</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DaysLength</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainingCapacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestStartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReservedHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaskName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Caption xmlns="">@Res:DistributeEntityHours</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DistributionGroup</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ActivityTabControl</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ActivityTabPageControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ActivityGrid</Name>
								<ElementPosition>894784852</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityTable_Id</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ProjId</DataField>
										<DataSource>ProjTable</DataSource>
										<FastTabSummary>No</FastTabSummary>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityTable_Name</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>ProjTable</DataSource>
										<FastTabSummary>No</FastTabSummary>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ActivityTable_Customer</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustAccount</DataField>
										<DataSource>ProjTable</DataSource>
										<FastTabSummary>No</FastTabSummary>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>ActivityTable_ProjectManager</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ActivityTable_ProjectManager_DirPerson_FK_Name</Name>
												<DataRelationPath>WorkerResponsible.DirPerson_FK</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>ProjTable</DataSource>
										<ReferenceField>WorkerResponsible</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjTable_PSASchedStartDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSASchedStartDate</DataField>
										<DataSource>ProjTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ProjTable_PSASchedEndDate</Name>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PSASchedEndDate</DataField>
										<DataSource>ProjTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>ActivityTable</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@Res:SelectAProject</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DistributionTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ActivityStartDate</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:FromDate</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ActivityEndDate</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Date</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Res:ToDate</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>HrsBookedPerWorkerCtrl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<AllowNegative>No</AllowNegative>
								<Label>@Res:NumberOfHoursReservePerResource</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>HourDistributionType</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<EnumType>ProjResourceHoursDistributeType</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@Res:SpecifyResourceHoursForStandardDistributionType</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HoursTabPageControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Pattern>Custom</Pattern>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HoursTablPageButtonGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EditSpecifyResourceHoursGrid</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>CheckBox</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:EditReservedHours</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RemainingHours</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:TaskRemainingHours</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TotalReservedHours</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@Res:TotalReservedHours</Label>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>SpecifyResourceHoursGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>894784852</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResTmpSpecifyResourceHours_ResourceName</Name>
										<AllowEdit>No</AllowEdit>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ResourceName</DataField>
										<DataSource>SpecifyResourceHours</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PeriodStartDateTimeStr</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailPeriodStartDateTime</DataMethod>
										<DataSource>SpecifyResourceHours</DataSource>
										<Label>@SYS80056</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PeriodEndDateTimeStr</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getDetailPeriodEndDateTime</DataMethod>
										<DataSource>SpecifyResourceHours</DataSource>
										<Label>@SYS80056</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>SpecifyResourceHours_DaysLength</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Integer</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>DaysLength</DataField>
										<DataSource>SpecifyResourceHours</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>ResTmpSpecifyResourceHours_TaskDateTime</Name>
										<AllowEdit>No</AllowEdit>
										<Type>DateTime</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataField>StartDateTime</DataField>
										<DataSource>SpecifyResourceHours</DataSource>
										<Label>@SYS80056</Label>
										<TimeHours>No</TimeHours>
										<TimeMinute>No</TimeMinute>
										<TimeSeconds>No</TimeSeconds>
										<TimeZoneIndicator>Never</TimeZoneIndicator>
										<TimezonePreference>NoConversion</TimezonePreference>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ResTmpSpecifyResourceHours_RemainingCapacity</Name>
										<AllowEdit>No</AllowEdit>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>Yes</AllowNegative>
										<DataField>RemainingCapacity</DataField>
										<DataSource>SpecifyResourceHours</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ResTmpSpecifyResourceHours_ReservedHours</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>ReservedHours</DataField>
										<DataSource>SpecifyResourceHours</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>SpecifyResourceHours</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@Res:SpecifyResourceHours</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>