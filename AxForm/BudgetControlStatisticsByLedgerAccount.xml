<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetControlStatisticsByLedgerAccount</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetControlStatisticsByLedgerAccount extends FormRun
{
    BudgetControlStatisticsRequest budgetControlStatisticsRequest;

    Args    budgetControlLedgerDimLookupArgs;
    Args    budgetCycleLookupArgs;
    BudgetCycle budgetCycle;
    LedgerRecId primaryLedger;
    DimensionAttributeValueCombination dimensionAttribValueCombination;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form controls.
    /// </summary>
    public void init()
    {
        #SysSystemDefinedButtons

        super();

        // User access to filters on the grid headers and custom filters replaces the need for the filter pane.
        FormCommandButtonControl showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.visible(false);

        if (element.args() && element.args().parmObject())
        {
            BudgetControlRule budgetControlRule;
            budgetControlStatisticsRequest = element.args().parmObject() as BudgetControlStatisticsRequest;

            if (budgetControlStatisticsRequest)
            {
                if (budgetControlStatisticsRequest.parmPrimaryLedgerRecId())
                {
                    primaryLedger = budgetControlStatisticsRequest.parmPrimaryLedgerRecId();
                }

                if (budgetControlStatisticsRequest.parmBudgetCycleRecId())
                {
                    budgetCycle = BudgetCycle::find(budgetControlStatisticsRequest.parmBudgetCycleRecId());

                    // Set the lookup args for the modified method to select and initialize the budget cycle settings.
                    budgetCycleLookupArgs = new Args();
                    budgetCycleLookupArgs.record(budgetCycle);

                    budgetCycleLookup.text(budgetCycle.Name);
                    budgetCycleLookup.modified();
                }

                if (budgetControlStatisticsRequest.parmBudgetGroupName())
                {
                    BudgetControlStatisticsValueOptionButton.selection(BudgetControlStatisticsValueOption::BudgetGroup);
                    BudgetGroupLookup.text(budgetControlStatisticsRequest.parmBudgetGroupName());
                    BudgetGroupLookup.modified();
                }
                else if (budgetControlStatisticsRequest.parmBudgetControlLedgerDimension())
                {
                    BudgetControlStatisticsValueOptionButton.selection(BudgetControlStatisticsValueOption::DimensionValues);
                    ledgerDimensionValues.text(DimensionAttributeValueCombination::find(budgetControlStatisticsRequest.parmBudgetControlLedgerDimension(), false).DisplayValue);
                    ledgerDimensionValues.modified();
                }

                BudgetControlStatisticsValueOptionButton.modified();

                if (budgetControlStatisticsRequest.parmStartDate())
                {
                    startDate.dateValue(budgetControlStatisticsRequest.parmStartDate());
                }

                if (budgetControlStatisticsRequest.parmEndDate())
                {
                    endDate.dateValue(budgetControlStatisticsRequest.parmEndDate());
                }

                if (budgetControlStatisticsRequest.parmIncludeCarryForward())
                {
                    carryForwardAmountsRadioButton.selection(budgetControlStatisticsRequest.parmIncludeCarryForward());
                }
            }

            if (updateTotalsButton.enabled())
            {
                updateTotalsButton.clicked();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetControlStatisticsRequest</c> based on the selections made on the form.
    /// </summary>
    private BudgetControlStatisticsRequest createRequest()
    {
        BudgetControlStatisticsRequest request = BudgetControlStatisticsRequest::construct();

        request.parmPrimaryLedgerRecId(primaryLedger);
        request.parmIncludeCarryForward(carryForwardAmountsRadioButton.selection());
        request.parmStartDate(startDate.dateValue());
        request.parmEndDate(endDate.dateValue());
        request.parmBudgetModelId(budgetModelLookup.text());
        request.parmBudgetControlLedgerDimension(dimensionAttribValueCombination.RecId);
        request.parmBudgetGroupName(budgetGroupLookup.text());
        request.parmBudgetCycleRecId(budgetCycle.RecId);
        request.parmBudgetControlStatisticsValueOption(budgetControlStatisticsValueOptionButton.selection());
        request.parmForceGroupByBudgetSourceLedgerDimension(true);

        return request;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTmpControlStatisticsByDimension</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource BudgetTmpControlStatisticsByDimension_QBDS = this.query().dataSourceTable(tableNum(BudgetTmpControlStatisticsByDimension));

            QueryBuildDataSource DimensionAttributeValueCombination_QBDS = BudgetTmpControlStatisticsByDimension_QBDS.addDataSource(tableNum(DimensionAttributeValueCombination));
            DimensionAttributeValueCombination_QBDS.relations(false);
            DimensionAttributeValueCombination_QBDS.addLink(
                fieldNum(BudgetTmpControlStatisticsByDimension, BudgetSourceLedgerDimension),
                fieldNum(DimensionAttributeValueCombination, RecId),
                BudgetTmpControlStatisticsByDimension_QBDS.name());

            DimensionAttributeValueCombination_QBDS.addOrderByField(fieldNum(DimensionAttributeValueCombination, DisplayValue), SortOrder::Ascending);

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>UpdateTotalsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            BudgetControlStatisticsManager manager = new BudgetControlStatisticsManager();

            BudgetTmpControlStatisticsByDimension budgetTmpControlStatisticsByDimensionLocal =
                manager.populateBudgetTmpControlStatisticsByDimension(element.createRequest());

            DimensionCombinationNameTmp dimensionCombinationNameTmp;
            insert_recordset dimensionCombinationNameTmp (DimensionAttributeValueCombination)
                select BudgetSourceLedgerDimension from budgetTmpControlStatisticsByDimensionLocal
                group by budgetTmpControlStatisticsByDimensionLocal.BudgetSourceLedgerDimension;

            DimensionCombinationNameTmp::getDimensionCombinationNames(dimensionCombinationNameTmp);

            update_recordset budgetTmpControlStatisticsByDimensionLocal
                setting BudgetSourceLedgerDimensionName = dimensionCombinationNameTmp.Name
                join dimensionCombinationNameTmp
                    where dimensionCombinationNameTmp.DimensionAttributeValueCombination
                        == budgetTmpControlStatisticsByDimensionLocal.BudgetSourceLedgerDimension;

            budgetTmpControlStatisticsByDimension.linkPhysicalTableInstance(budgetTmpControlStatisticsByDimensionLocal);

            BudgetTmpControlStatisticsByDimension_DS.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCycleLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun budgetCycleFormLookup;

            budgetCycleLookupArgs = new Args(formStr(BudgetCycleLookup));
            budgetCycleLookupArgs.caller(this);
            budgetCycleLookupArgs.parmEnum(NoYes::No);

            budgetCycleFormLookup = ClassFactory::formRunClassOnClient(budgetCycleLookupArgs);

            budgetCycleFormLookup.init();

            budgetCycleLookup.performFormLookup(budgetCycleFormLookup);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetControlConfiguration  budgetControlConfiguration;
            BudgetControlBudgetCycle    budgetControlBudgetCycle;
            BudgetCycleName             budgetCycleName;
            BudgetModel                 budgetModel;
            boolean ret;

            ret = super();

            budgetCycle = null;
            budgetCycleName = budgetCycleLookup.text();

            if (budgetCycleName == '')
            {
                budgetCycle = null;
            }
            else if (budgetCycleLookupArgs != null &&
                    budgetCycleLookupArgs.dataset() == tableNum(BudgetCycle) &&
                    budgetCycleLookupArgs.record() != null)
            {
                budgetCycle = budgetCycleLookupArgs.record() as BudgetCycle;
                budgetCycleLookupArgs.record(null);
            }
            else
            {
                select firstonly * from budgetCycle
                    where budgetCycle.Name == budgetCycleName
                    exists join budgetControlBudgetCycle
                        where budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == primaryLedger &&
                            budgetControlConfiguration.IsActive == true;
            }

            budgetModelLookup.text('');
            budgetGroupLookup.text('');

            if (budgetCycle)
            {
                select firstonly ModelId from budgetModel
                    where budgetModel.Blocked == NoYes::No
                    exists join budgetControlBudgetCycle
                        where budgetModel.ModelId == budgetControlBudgetCycle.BudgetModelId &&
                            budgetControlBudgetCycle.BudgetCycle == budgetCycle.RecId
                    exists join budgetControlConfiguration
                        where budgetControlConfiguration.RecId == budgetControlBudgetCycle.BudgetControlConfiguration &&
                            budgetControlConfiguration.PrimaryLedger == Ledger::current() &&
                            budgetControlConfiguration.IsActive == true;

                budgetModelLookup.text(budgetModel.ModelId);
                StartDate.dateValue(budgetCycle.getStartDate());
                EndDate.dateValue(budgetCycle.getEndDate());
                UpdateTotalsButton.enabled(true);
            }
            else if (budgetCycleName == '')
            {
                budgetModelLookup.allowEdit(false);
                UpdateTotalsButton.enabled(false);
            }
            else
            {
                budgetModelLookup.allowEdit(false);
                UpdateTotalsButton.enabled(false);
                ret = checkFailed(strFmt("@SYS315908", budgetCycleName, fieldPName(BudgetCycle, Name), tablePName(BudgetCycle)));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetControlStatisticsValueOptionButton</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (BudgetControlStatisticsValueOptionButton.selection() == BudgetControlStatisticsValueOption::DimensionValues)
            {
                ledgerDimensionValues.visible(true);
                budgetGroupLookup.visible(false);
                budgetGroupLookup.text('');
            }
            else
            {
                ledgerDimensionValues.visible(false);
                budgetGroupLookup.visible(true);
                dimensionAttribValueCombination = null;
                ledgerDimensionValues.text('');
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LedgerDimensionValues</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun budgetLedgerDimensionLookup;

            budgetControlLedgerDimLookupArgs = new Args(formStr(BudgetLedgerDimensionLookup));
            budgetControlLedgerDimLookupArgs.caller(this);
            BudgetControlLedgerDimLookupArgs.record(budgetCycle);

            budgetLedgerDimensionLookup = ClassFactory::formRunClassOnClient(budgetControlLedgerDimLookupArgs);

            budgetLedgerDimensionLookup.init();

            ledgerDimensionValues.performFormLookup(budgetLedgerDimensionLookup);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            DimensionDisplayValue controlDimensionDisplayValue;

            ret = super();

            dimensionAttribValueCombination = null;
            if (ledgerDimensionValues.text() == '')
            {
                dimensionAttribValueCombination = null;
            }
            else if (budgetControlLedgerDimLookupArgs != null &&
                 budgetControlLedgerDimLookupArgs.dataset() == tableNum(DimensionAttributeValueCombination) &&
                 budgetControlLedgerDimLookupArgs.record() != null)
            {
                dimensionAttribValueCombination = budgetControlLedgerDimLookupArgs.record() as DimensionAttributeValueCombination;
                budgetControlLedgerDimLookupArgs.record(null);
            }
            else
            {
                controlDimensionDisplayValue = ledgerDimensionValues.text();

                if (controlDimensionDisplayValue)
                {
                    // Find the first DAVC which matches the display value when the user types in a dimension value and tabs off.
                    dimensionAttribValueCombination = BudgetControlStatisticsManager::getLedgerDimensionBudgetControl(controlDimensionDisplayValue);
                    if (dimensionAttribValueCombination == null)
                    {
                        ret = checkFailed(strFmt("@SYS315908", controlDimensionDisplayValue, fieldpname(DimensionAttributeValueCombination, DisplayValue), tablepname(DimensionAttributeValueCombination)));
                    }
                }
            }

            if (dimensionAttribValueCombination)
            {
                RecId activeBudgetCycleTimeSpanRecId = BudgetControlRuleLedgerDimension::getActiveBudgetCycleTimeSpanRecId(Ledger::current(), dimensionAttribValueCombination.RecId);

                if (activeBudgetCycleTimeSpanRecId != budgetCycle.BudgetCycleTimeSpan)
                {
                    // The combination is not valid for the selected budget cycle and active budget control configuration.
                    checkFailed(strFmt("@Budget:ControlStatisticsDimensionValuesParameterError", budgetModelLookup.text()));

                    dimensionAttribValueCombination = null;
                    ledgerDimensionValues.text('');
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetGroupLookup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query                   query          = new Query();
            QueryBuildDataSource    budgetGroup_qbds;
            QueryBuildDataSource    budgetGroupMember_qbds;
            QueryBuildDataSource    budgetControlConfiguration_qbds;

            // Create an instance of SysTableLookup where 'this'
            // is the current form control.
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(BudgetGroupMember), this);

            // Add fields to be shown in the lookup form.
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Name));
            sysTableLookup.addLookupfield(fieldNum(BudgetGroupMember, Description));

            // Limit and arrange the data selection.
            budgetGroupMember_qbds = query.addDataSource(tableNum(BudgetGroupMember));
            budgetGroupMember_qbds.addRange(fieldNum(BudgetGroupMember, ParentBudgetGroupMember)).value(SysQuery::valueEmptyString());
            budgetGroup_qbds = budgetGroupMember_qbds.addDataSource(tableNum(BudgetGroup));
            budgetGroup_qbds.joinMode(JoinMode::InnerJoin);
            budgetGroup_qbds.addLink(fieldNum(BudgetGroupMember, BudgetGroup), fieldNum(BudgetGroup, RecId));
            budgetControlConfiguration_qbds = budgetGroup_qbds.addDataSource(tableNum(BudgetControlConfiguration));
            budgetControlConfiguration_qbds.joinMode(JoinMode::InnerJoin);
            budgetControlConfiguration_qbds.addLink(fieldNum(BudgetGroup, BudgetControlConfiguration), fieldNum(BudgetControlConfiguration, RecId));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, PrimaryLedger)).value(SysQuery::value(primaryLedger));
            budgetControlConfiguration_qbds.addRange(fieldNum(BudgetControlConfiguration, IsActive)).value(int2str(enum2int(NoYes::Yes)));

            // Restrict to the active configuration groups and dates for the selected budget cycle.
            BudgetGroupLedgerDimension::addActiveGroupBudgetCycleRangesToQuery(query, budgetCycle);

            sysTableLookup.parmQuery(query);

            // Perform the lookup.
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            BudgetGroupMember           budgetGroupMember;
            BudgetGroup                 budgetGroup;
            BudgetControlConfiguration  budgetControlConfiguration;
            boolean ret;
            BudgetGroupMemberName   budgetGroupName;

            ret = super();

            budgetGroupName = budgetGroupLookup.text();

            select firstonly BudgetGroup
                from budgetGroupMember
                    where budgetGroupMember.Name == budgetGroupName
                    && budgetGroupMember.ParentBudgetGroupMember == 0
                join *
                    from budgetGroup
                        where budgetGroup.RecId == budgetGroupMember.BudgetGroup
                join RecId
                    from budgetControlConfiguration
                        where budgetControlConfiguration.PrimaryLedger == primaryLedger
                            && budgetControlConfiguration.RecId == budgetGroup.BudgetControlConfiguration;

            if (budgetGroup && budgetGroup.BudgetCycleTimeSpan != budgetCycle.BudgetCycleTimeSpan)
            {
                // The budget group is not valid for the selected budget cycle and active budget control configuration.
                ret = checkFailed(strFmt("@Budget:ControlStatisticsBudgetGroupParameterError", budgetModelLookup.text()));
            }
            else if (!budgetGroupMember.BudgetGroup)
            {
                ret = checkFailed(strFmt("@SYS315908", budgetGroupName, fieldPName(BudgetGroupMember, Name), tablePName(BudgetGroupMember)));
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (budgetCycle)
            {
                if (this.dateValue() < budgetCycle.getStartDate())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionStartDateValidateBudgetCycle", this.dateValue(), budgetCycleLookup.text()));
                }
                else if (this.dateValue() > endDate.dateValue())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionStartDateAfterEndDate", this.dateValue()));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (budgetCycle)
            {
                if (this.dateValue() > budgetCycle.getEndDate())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionEndDateValidateBudgetCycle", this.dateValue(), budgetCycleLookup.text()));
                }
                else if (this.dateValue() < startDate.dateValue())
                {
                    ret = checkFailed(strFmt("@Budget:BudgetControlStatisticsByDimensionEndDateBeforeStartDate", this.dateValue()));
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpControlStatisticsByDimension</Name>
			<Table>BudgetTmpControlStatisticsByDimension</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetControlLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThresholdConsumedPercentage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalActualExpenditures</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalBudgetFundsAvailable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalPreEncumbrances</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalRevisedBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TrackingDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Budget:BudgetControlStatisticsByLedgerAccountCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>UpdateTotalsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>UpdateTotalsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<NeededPermission>Read</NeededPermission>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<DefaultButton>Yes</DefaultButton>
								<Text>@Budget:BudgetInquiryUpdateTotalsButton</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FiltersAndGridTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FiltersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ParametersGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectBudgetCycle</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetCycleLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>BudgetCycleName</ExtendedDataType>
												<Label>@SYS314460</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetModelLookup</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS1966</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SelectDimensionDetail</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormRadioButtonControl">
												<Name>BudgetControlStatisticsValueOptionButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>RadioButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Caption>@Budget:DimensionDetail</Caption>
												<EnumType>BudgetControlStatisticsValueOption</EnumType>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>LedgerDimensionValues</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS152256</Label>
												<LabelPosition>Above</LabelPosition>
												<LookupButton>Always</LookupButton>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetGroupLookup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS127618</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Auto</ArrangeMethod>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Dates</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>StartDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@Budget:BudgetControlStatisticsStartDate</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>EndDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@Budget:BudgetControlStatisticsEndDate</Label>
												<LabelPosition>Above</LabelPosition>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>CarryForwardAmountsRadioButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<Caption>@Budget:CarryForwardAmountsInTotals</Caption>
										<EnumType>BudgetControlStatisticsCarryForwardOption</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalWrap</ArrangeMethod>
								<ColumnsMode>Fill</ColumnsMode>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryParametersTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsGridTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>BalanceDetails</Name>
								<AllowEdit>No</AllowEdit>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>BudgetTmpControlStatisticsByDimension_BudgetSourceLedgerDimension</Name>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>BudgetLedgerDimensionController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
										<Label>@Budget:LedgerAccountLabel</Label>
										<ReferenceField>BudgetSourceLedgerDimension</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTmpControlStatisticsByDimension_BudgetSourceLedgerDimensionName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetSourceLedgerDimensionName</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalActualExpenditures</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalActualExpenditures</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalEncumbrances</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalEncumbrances</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpControlStatisticsByDimension_TotalPreEncumbrances</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TotalPreEncumbrances</DataField>
										<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTmpControlStatisticsByDimension</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryResultsTabPage</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>