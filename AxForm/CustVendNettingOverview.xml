<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustVendNettingOverview</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustVendNettingOverview extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        CustVendNettingAgreement custVendNettingAgreement;

        select firstonly RecId from custVendNettingAgreement
            where custVendNettingAgreement.AgreementStatus == CustVendNettingStatus::Active;

        if (!custVendNettingAgreement.RecId)
        {
            warning("@CashManagement:NoActiveNettingAgreement");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNettingPair</Name>
				<Source><![CDATA[
    private boolean checkNettingPair(CustVendNettingPair _pair)
    {
        CustTable custTable = CustTable::findByCompany(_pair.CreditCompany, _pair.CreditAccountNum);
        boolean ret = (custTable.TaxWithholdCalculate_TH == NoYes::No || custTable.TaxWithholdGroup_TH == '')
            && custTable.TaxWithholdCalculate_IN == NoYes::No;
        VendTable vendTable = VendTable::findByCompany(_pair.DebitCompany, _pair.DebitAccountNum);
        ret = ret && (vendTable.TaxWithholdGroup == '' || vendTable.TaxWithholdCalculate == 0);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    public CustVendNettingBalanceTmp calculateBalance()
    {
        CustVendNettingBalanceTmp tmpCustVendNettingBalance;
        QueryRun nettingPairQueryRun = this.getNettingPair();

        while (nettingPairQueryRun.next())
        {
            CustVendNettingPair nettingPair = nettingPairQueryRun.get(tableNum(CustVendNettingPair));
            if (!element.checkNettingPair(nettingPair))
            {
                continue;
            }
            CustVendNettingAgreement nettingAgreement = nettingPairQueryRun.get(tableNum(CustVendNettingAgreement));

            Set set = new Set(Types::String);
            CustNettingTransTotalView custNettingTrans;
            VendNettingTransView vendNettingTrans;

            CustVendNettingExpireDate expireDate = nettingPair.ExpireDate == dateNull() ? maxDate() : nettingPair.ExpireDate;

            changecompany(nettingPair.CreditCompany)
            {
                while select CurrencyCode, sum(AmountCur) from custNettingTrans
                    group by CurrencyCode
                    where custNettingTrans.AccountNum == nettingPair.CreditAccountNum
                        && nettingPair.CreditAccountType == LedgerJournalACType::Cust
                        && custNettingTrans.DueDate >= nettingPair.StartDate
                        && custNettingTrans.DueDate <= expireDate
                {
                    changecompany(nettingPair.DebitCompany)
                    {
                        select CurrencyCode, sum(AmountCur) from vendNettingTrans
                            where vendNettingTrans.AccountNum == nettingPair.DebitAccountNum
                                && nettingPair.DebitAccountType == LedgerJournalACType::Vend
                                && vendNettingTrans.CurrencyCode == custNettingTrans.CurrencyCode
                                && vendNettingTrans.DueDate >= nettingPair.StartDate
                                && vendNettingTrans.DueDate <= expireDate;

                        tmpCustVendNettingBalance.clear();
                        tmpCustVendNettingBalance = CustVendNettingBalanceTmp::insertTmpBalance(
                            tmpCustVendNettingBalance,
                            nettingAgreement,
                            nettingPair,
                            custNettingTrans.CurrencyCode,
                            custNettingTrans.AmountCur,
                            vendNettingTrans.AmountCur);
                        set.add(custNettingTrans.CurrencyCode);
                    }
                }
            }

            changecompany(nettingPair.DebitCompany)
            {
                while select CurrencyCode, sum(AmountCur) from vendNettingTrans
                    group by CurrencyCode
                    where vendNettingTrans.AccountNum == nettingPair.DebitAccountNum
                        && nettingPair.DebitAccountType == LedgerJournalACType::Vend
                        && vendNettingTrans.DueDate >= nettingPair.StartDate
                        && vendNettingTrans.DueDate <= expireDate
                {
                    if (!set.in(vendNettingTrans.CurrencyCode))
                    {
                        tmpCustVendNettingBalance.clear();
                        tmpCustVendNettingBalance = CustVendNettingBalanceTmp::insertTmpBalance(
                            tmpCustVendNettingBalance,
                            nettingAgreement,
                            nettingPair,
                            vendNettingTrans.CurrencyCode,
                            0,
                            vendNettingTrans.AmountCur);
                        set.add(vendNettingTrans.CurrencyCode);
                    }
                }
            }
        }
        return tmpCustVendNettingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNettingPair</Name>
				<Source><![CDATA[
    private QueryRun getNettingPair()
    {
        Query query = new Query();
        TransDate systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        QueryBuildDataSource qbdsPair = query.addDataSource(tableNum(CustVendNettingPair));

        str expireDateRangeValue = strFmt('(((%1.%2 >= %3) || (%1.%2 = %4)) && (%1.%5 <= %3))',
            qbdsPair.name(),
            fieldStr(CustVendNettingPair, ExpireDate),
            date2StrXpp(systemDate),
            date2StrXpp(dateNull()),
            fieldStr(CustVendNettingPair, StartDate));

        qbdsPair.addRange(fieldNum(CustVendNettingPair, ExpireDate)).value(expireDateRangeValue);

        QueryBuildDataSource qbdsAgree = qbdsPair.addDataSource(tableNum(CustVendNettingAgreement));
        qbdsAgree.addLink(fieldNum(CustVendNettingPair, CustVendNettingAgreement), fieldNum(CustVendNettingAgreement, RecId));
        qbdsAgree.joinMode(JoinMode::InnerJoin);
        qbdsAgree.addRange(fieldNum(CustVendNettingAgreement, AgreementStatus)).value(SysQuery::value(CustVendNettingStatus::Active));

        Common originator = element.args().record();
        FormRun callingForm = element.args().caller();
        if (callingForm && callingForm.name() == formStr(CustVendNettingAgreement) && originator)
        {
            qbdsAgree.addRange(fieldNum(CustVendNettingAgreement, RecId)).value(SysQuery::value(originator.RecId));
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>NettingBalanceTmp</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            NettingBalanceTmp.linkPhysicalTableInstance(element.calculateBalance());

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CreateNetting</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (CustVendNettingAgreement::find(NettingBalanceTmp.NettingAgreementRecId).AgreementStatus == CustVendNettingStatus::Inactive)
            {
                throw error("@CashManagement:AgreementIsInactive");
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>NettingBalanceTmp</Name>
			<Table>CustVendNettingBalanceTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpireDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingAgreementDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingAgreementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingAgreementRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NettingPairRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendCompany</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:CustVendOpenBalanceNettingOverview</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>CreateNetting</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DataSource>NettingBalanceTmp</DataSource>
								<MenuItemName>CustVendCreateNetting</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>NettingProposal</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<MenuItemName>CustVendNettingProposalBatch</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>NettingHistory</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DataSource>NettingBalanceTmp</DataSource>
								<MenuItemName>CustVendNettingHistory</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AgreementName</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>NettingAgreementName</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
						<Label>@CashManagement:Agreement</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AgreementDescription</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>NettingAgreementDescription</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TransBalCur_CurrencyCode</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CurrencyCode</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustCompany</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CustCompany</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>CustAccountNum</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CustAccountNum</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>CustTransBalCur_AmountCur</Name>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CustBalance</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
						<DisplaceNegative>0</DisplaceNegative>
						<DisplaceNegativeMode>Fixed</DisplaceNegativeMode>
						<Label>@CashManagement:CustInvoiceBalance</Label>
						<NoOfDecimals>-1</NoOfDecimals>
						<ShowZero>Yes</ShowZero>
						<SignDisplay>Prefixed</SignDisplay>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendCompany</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>VendCompany</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendAccountNum</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>String</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>VendAccountNum</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>VendTransBalCur_AmountCur</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>VendBalance</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
						<DisplaceNegative>0</DisplaceNegative>
						<DisplaceNegativeMode>Fixed</DisplaceNegativeMode>
						<Label>@CashManagement:VendInvoiceBalance</Label>
						<NoOfDecimals>-1</NoOfDecimals>
						<ShowZero>Yes</ShowZero>
						<SignDisplay>Prefixed</SignDisplay>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ActiveFromDate</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Date</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>StartDate</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ExpireDate</Name>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Date</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ExpireDate</DataField>
						<DataSource>NettingBalanceTmp</DataSource>
					</AxFormControl>
				</Controls>
				<DataSource>NettingBalanceTmp</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>