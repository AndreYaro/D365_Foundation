<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetCheckResults</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetCheckResults extends FormRun
{
    str  budgetSourceRecIds;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        element.initialize();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value of <c>BudgetSource</c> by using arguments.
    /// </summary>
    /// <remarks>
    /// This method uses <c>BudgetSourceCollectionIntegrator</c> class to find <c>BudgetSource</c> record IDs related to the calling form's data source and uses the found <c>BudgetSource</c> record IDs as part of the query restriction for this
    /// <c>BudgetCheckResults</c> inquiry form. This allows dynalink between the calling form data source and this form data source.
    /// </remarks>
    public void initialize()
    {
        BudgetSourceCollectionIntegrator budgetSourceCollectionIntegrator;
        Set             budgetSourceRecIdSet;
        SetEnumerator   budgetSourceRecIdSetEnumerator;

        if (element.args() != null && element.args().record() != null)
        {
            budgetSourceCollectionIntegrator = BudgetSourceCollectionIntegrator::newBudgetSourceCollectionIntegrator(element.args().record());
            budgetSourceRecIdSet = budgetSourceCollectionIntegrator.findBudgetSourceIds();

            if (budgetSourceRecIdSet != null && !budgetSourceRecIdSet.empty())
            {
                budgetSourceRecIdSetEnumerator = budgetSourceRecIdSet.getEnumerator();

                while (budgetSourceRecIdSetEnumerator.moveNext())
                {
                    budgetSourceRecIds = budgetSourceRecIds + int642str(budgetSourceRecIdSetEnumerator.current()) + ',';
                }

                if (strEndsWith(budgetSourceRecIds, ','))
                {
                    budgetSourceRecIds = substr(budgetSourceRecIds, 1, strlen(budgetSourceRecIds)-1);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetCheckResultDetail_Source</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource    budgetCheckResultErrorWarnQbds;

            budgetCheckResultErrorWarnQbds = this.query().dataSourceTable(tablenum(BudgetCheckResultErrorWarningDetail));
            budgetCheckResultErrorWarnQbds.clearRanges();

            budgetCheckResultErrorWarnQbds.addRange(fieldnum(BudgetCheckResultErrorWarningDetail, BudgetControlLedgerDimension)).value(SysQuery::value(budgetCheckResultDetail_Control.BudgetControlLedgerDimension));
            budgetCheckResultErrorWarnQbds.addRange(fieldnum(BudgetCheckResultErrorWarningDetail, BudgetSourceLedgerDimension)).value(SysQuery::valueNotEmptyString());
            budgetCheckResultErrorWarnQbds.addRange(fieldnum(BudgetCheckResultErrorWarningDetail, BudgetSource)).value(SysQuery::value(budgetCheckResultDetail_Control.BudgetSource));

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>BudgetCheckResultDetail_Control</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(tablemethodstr(BudgetCheckResultErrorWarningDetail, displayBudgetCheckResultErrorWarning));
            this.cacheAddMethod(tablemethodstr(BudgetCheckResultErrorWarningDetail, displayBudgetGroup));
            this.cacheAddMethod(tablemethodstr(BudgetCheckResultErrorWarningDetail, displayBudgetSourceCheckResult));
            this.cacheAddMethod(tablemethodstr(BudgetCheckResultErrorWarningDetail, displayGroupAmountOverBudgetAvailable));
            this.cacheAddMethod(tablemethodstr(BudgetCheckResultErrorWarningDetail, displayGroupAmountOverBudgetThreshold));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (budgetCheckResultDetail_Control.RecId != 0)
            {
                budgetControlStatisticsButton.enabled(true);
                budgetControlStatisticsByDimensionButton.enabled(true);
            }
            else
            {
                budgetControlStatisticsButton.enabled(false);
                budgetControlStatisticsByDimensionButton.enabled(false);
            }

            if (budgetCheckResultDetail_Control.BudgetGroupMember == 0)
            {
                GroupAmount.visible(false);
            }
            else
            {
                GroupAmount.visible(true);
            }

            budgetCheckResultDetail_Source_DS.executeQuery();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildDataSource                budgetCheckResultErrorWarnQbds;

            BudgetCheckResultErrorWarningDetail budgetCheckResultErrorWarningDetail;

            Query                               query;
            QueryRun                            queryRun;

            str                                 budgetCheckControlResultErrorWarningRecIds = '';

            if (budgetSourceRecIds)
            {
                query = new Query();
                budgetCheckResultErrorWarnQbds = query.addDataSource(tableNum(BudgetCheckResultErrorWarningDetail));
                budgetCheckResultErrorWarnQbds.addRange(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetSource)).value(budgetSourceRecIds);
                budgetCheckResultErrorWarnQbds.addRange(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetSourceLedgerDimension)).value(SysQuery::valueNotEmptyString());
                budgetCheckResultErrorWarnQbds.addSortField(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetSource));
                budgetCheckResultErrorWarnQbds.addSortField(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetControlLedgerDimension));
                budgetCheckResultErrorWarnQbds.addGroupByField(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetSource));
                budgetCheckResultErrorWarnQbds.addGroupByField(fieldNum(BudgetCheckResultErrorWarningDetail, BudgetControlLedgerDimension));
                budgetCheckResultErrorWarnQbds.addSelectionField(fieldNum(BudgetCheckResultErrorWarningDetail, recId), SelectionField::Max);

                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    budgetCheckResultErrorWarningDetail = queryRun.get(tableNum(BudgetCheckResultErrorWarningDetail));

                    // Get the Recid's for unique budget control ledger dimension per budget source.
                    budgetCheckControlResultErrorWarningRecIds = budgetCheckControlResultErrorWarningRecIds + int642str(budgetCheckResultErrorWarningDetail.RecId) + ',';
                }

                if (strEndsWith(budgetCheckControlResultErrorWarningRecIds, ','))
                {
                    budgetCheckControlResultErrorWarningRecIds = substr(budgetCheckControlResultErrorWarningRecIds, 1, strlen(budgetCheckControlResultErrorWarningRecIds)-1);
                }
            }

            budgetCheckResultErrorWarnQbds = this.query().dataSourceTable(tableNum(BudgetCheckResultErrorWarningDetail));
            budgetCheckResultErrorWarnQbds.clearRanges();
            budgetCheckResultErrorWarnQbds.addRange(fieldNum(BudgetCheckResultErrorWarningDetail, RecId)).value(budgetCheckControlResultErrorWarningRecIds ? budgetCheckControlResultErrorWarningRecIds : '0');

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>RequestBudgetButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BudgetSourceIntegrator budgetSourceIntegrator = BudgetSourceIntegrator::newBudgetSourceIntegratorFromBudgetSource(
                BudgetSource::find(BudgetCheckResultDetail_Source.BudgetSource));

            // Get the transaction date from budget source integrator.
            TransDate transactionDate = budgetSourceIntegrator.getBudgetSourceTrackingDate();

            BudgetCreateTransfer budgetCreateTransfer = BudgetCreateTransfer::construct();

            // Set the budget model to the one used for the current budget check.
            budgetCreateTransfer.parmBudgetModel(
                BudgetControlLedgerDimensionHelper::findBudgetModelByLedgerDimensionAndDate(
                    BudgetCheckResultDetail_Source.PrimaryLedger,
                    BudgetCheckResultDetail_Source.BudgetSourceLedgerDimension,
                    transactionDate).ModelId);

            // Set the budget transfer source number to budget source tracking number from budget source integrator.
            budgetCreateTransfer.parmBudgetTransferSourceNumber(budgetSourceIntegrator.getBudgetSourceTrackingNumber());

            // Set the budget type as Expense.
            budgetCreateTransfer.parmBudgetType(BudgetType::Expense);

            // Set the currency to the accounting currency of the current budget check.
            budgetCreateTransfer.parmCurrency(Ledger::accountingCurrencyByLedger(BudgetCheckResultDetail_Source.PrimaryLedger));

            // Set the currency amount to the budget check failure amount for the ledger account.
            budgetCreateTransfer.parmCurrencyAmount(this.determineCurrencyAmount());

            // Set the ledger dimension.
            budgetCreateTransfer.parmToLedgerDimension(
                BudgetTransactionManager::saveBudgetLedgerDimension(
                    BudgetCheckResultDetail_Source.BudgetSourceLedgerDimension));

            // Set the transaction date. Use current system date when transaction date is not passed in.
            budgetCreateTransfer.parmToLedgerDimensionDate(transactionDate == dateNull() ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : transactionDate);

            changeCompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(BudgetCheckResultDetail_Source.PrimaryLedger)))
            {
                // Change company before launching create transfer form to assure
                // that the form is opened in correct company context.
                BudgetCreateTransferManager::launchCreateTransferForm(budgetCreateTransfer);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>determineCurrencyAmount</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines the default currency amount to be used for requesting the budget transfer.
        /// Defaults to the group amount if exists; otherwise defaults to rule amounts.
        /// </summary>
        /// <returns>
        /// The default currency amount to be used for requesting the budget transfer.
        /// </returns>
        private AmountCur determineCurrencyAmount()
        {
            AmountCur                 currencyAmount;
            BudgetControlErrorWarning budgetControlErrorWarning;

            budgetControlErrorWarning = budgetCheckResultDetail_Control.displayBudgetCheckResultErrorWarning();

            if (budgetCheckResultDetail_Control.BudgetGroupMember != 0)
            {
                if (budgetControlErrorWarning == BudgetControlErrorWarning::BudgetFundsAvailableExceeded)
                {
                    currencyAmount = budgetCheckResultDetail_Control.displayGroupAmountOverBudgetAvailable();
                }
                else if (budgetControlErrorWarning == BudgetControlErrorWarning::BudgetThresholdExceeded)
                {
                    currencyAmount = budgetCheckResultDetail_Control.displayGroupAmountOverBudgetThreshold();
                }
            }
            else
            {
                if (budgetControlErrorWarning == BudgetControlErrorWarning::BudgetFundsAvailableExceeded)
                {
                    currencyAmount = budgetCheckResultDetail_Control.AccountingCurrencyAmountOverAvailable;
                }
                else if (budgetControlErrorWarning == BudgetControlErrorWarning::BudgetThresholdExceeded)
                {
                    currencyAmount = budgetCheckResultDetail_Control.AccountingCurrencyAmountOverThreshold;
                }
            }

            return currencyAmount;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ViewBudgetRequestsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BudgetSourceIntegrator budgetSourceIntegrator = BudgetSourceIntegrator::newBudgetSourceIntegratorFromBudgetSource(
                BudgetSource::find(BudgetCheckResultDetail_Source.BudgetSource));

            BudgetTransactionInquiryRequest budgetTransactionInquiryRequest = BudgetTransactionInquiryRequest::construct();

            // Set the ledger dimension.
            budgetTransactionInquiryRequest.parmLedgerDimension(
                BudgetTransactionManager::saveBudgetLedgerDimension(
                    BudgetCheckResultDetail_Source.BudgetSourceLedgerDimension));

            // Set the budget transfer source number.
            budgetTransactionInquiryRequest.parmTransferSourceNumber(budgetSourceIntegrator.getBudgetSourceTrackingNumber());

            Args args = new Args();
            args.parmObject(budgetTransactionInquiryRequest);

            // Invoke the display menu item and pass the BudgetTransactionInquiryRequest instance.
            MenuFunction budgetTransactionInquiryForm = new MenuFunction(menuitemdisplaystr(BudgetTransactionInquiry), MenuItemType::Display);

            if (budgetTransactionInquiryForm)
            {
                budgetTransactionInquiryForm.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetCheckResultDetail_Source</Name>
			<Table>BudgetCheckResultErrorWarningDetail</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountOverAvailable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountOverThreshold</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetControlLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetGroupMember</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResult</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResultErrorWarning</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResultErrorWarningType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SequenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetCheckResultDetail_Control</Name>
			<Table>BudgetCheckResultErrorWarningDetail</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountOverAvailable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmountOverThreshold</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetControlLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetGroupMember</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResult</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResultErrorWarning</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckResultErrorWarningType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SequenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS128629</Caption>
		<DataSource xmlns="">BudgetCheckResultDetail_Control</DataSource>
		<DialogSize xmlns="">Large</DialogSize>
		<Pattern xmlns="">DialogReadOnly</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>StatisticsButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BudgetControlStatisticsButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetCheckResultDetail_Control</DataSource>
								<MenuItemName>BudgetControlStatisticsByPeriod</MenuItemName>
								<Primary>Yes</Primary>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>StatisticsByDimensionButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BudgetControlStatisticsByDimensionButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetCheckResultDetail_Control</DataSource>
								<MenuItemName>BudgetControlStatisticsByDimension</MenuItemName>
								<Primary>Yes</Primary>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ConfigurationButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BudgetControlConfigurationButton</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>BudgetControlConfigurationViewActive</MenuItemName>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>BudgetCheckResultsGrid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToContent</HeightMode>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormSegmentedEntryControl">
								<Name>DataSource1_BudgetControlLedgerDimension</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>SegmentedEntry</Type>
								<FormControlExtension>
									<Name>SegmentedEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>String</Type>
											<Value>BudgetLedgerDimensionController</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmAccountTypeEnumName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIsDefaultAccount</Name>
											<Type>Enum</Type>
											<TypeName>boolean</TypeName>
											<Value>False</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValidateBlockedForManualEntry</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmLockMainAccountSegment</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmPostingType</Name>
											<Type>Enum</Type>
											<TypeName>LedgerPostingType</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIncludeTotalAccounts</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmIncludeFinancialAccounts</Name>
											<Type>Enum</Type>
											<TypeName>NoYes</TypeName>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<DataSource>BudgetCheckResultDetail_Control</DataSource>
								<ReferenceField>BudgetControlLedgerDimension</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CheckResult</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayBudgetSourceCheckResult</DataMethod>
								<DataSource>BudgetCheckResultDetail_Control</DataSource>
								<Label>@SYS301662</Label>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>CheckResultErrorWarning</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayBudgetCheckResultErrorWarning</DataMethod>
								<DataSource>BudgetCheckResultDetail_Control</DataSource>
								<Label>@SYS301663</Label>
								<Items />
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>BudgetCheckResultDetail_Control</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<RightMargin>5</RightMargin>
						<ShowRowLabels>No</ShowRowLabels>
						<TopMargin>5</TopMargin>
						<VisibleRows>2</VisibleRows>
						<VisibleRowsMode>Fixed</VisibleRowsMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DetailsHeader</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AmountGroup</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>AccountingCurrencyAmountOverAvailable</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountingCurrencyAmountOverAvailable</DataField>
										<DataSource>BudgetCheckResultDetail_Control</DataSource>
										<Label>@SYS191563</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>AccountingCurrencyAmountOverThreshold</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountingCurrencyAmountOverThreshold</DataField>
										<DataSource>BudgetCheckResultDetail_Control</DataSource>
										<Label>@SYS301672</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS301665</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetGroup</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayBudgetGroup</DataMethod>
										<DataSource>BudgetCheckResultDetail_Control</DataSource>
										<Label>@SYS127618</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GroupAccountingCurAmountOverAvailable</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayGroupAmountOverBudgetAvailable</DataMethod>
										<DataSource>BudgetCheckResultDetail_Control</DataSource>
										<Label>@SYS191563</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GroupAccountingCurAmountOverThreshold</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayGroupAmountOverBudgetThreshold</DataMethod>
										<DataSource>BudgetCheckResultDetail_Control</DataSource>
										<Label>@SYS301672</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS301668</Caption>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>LedgerAccountsTab</Name>
						<Type>Tab</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>LedgerAccountsTabPage</Name>
								<Type>TabPage</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>LedgerAccountsActionPane</Name>
										<Type>ActionPane</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>RequestBudgetButtonGroup</Name>
												<Type>ButtonGroup</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>RequestBudgetButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@Budget:RequestTransfer</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ViewBudgetRequestsButton</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<NeedsRecord>Yes</NeedsRecord>
														<Text>@Budget:ViewTransferRequests</Text>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>BudgetSourceLedgerGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToContent</HeightMode>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormSegmentedEntryControl">
												<Name>BudgetSourceLedgerDimension</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>SegmentedEntry</Type>
												<FormControlExtension>
													<Name>SegmentedEntryControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>parmControllerClassName</Name>
															<Type>String</Type>
															<Value>BudgetLedgerDimensionController</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmAccountTypeEnumName</Name>
															<Type>String</Type>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIsDefaultAccount</Name>
															<Type>Enum</Type>
															<TypeName>boolean</TypeName>
															<Value>False</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmValidateBlockedForManualEntry</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmLockMainAccountSegment</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmPostingType</Name>
															<Type>Enum</Type>
															<TypeName>LedgerPostingType</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeTotalAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeFinancialAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<DataSource>BudgetCheckResultDetail_Source</DataSource>
												<ReferenceField>BudgetSourceLedgerDimension</ReferenceField>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetSourceLedgerDimensionLegalEntity</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>displaySourceLedgerDimensionLegalEntity</DataMethod>
												<DataSource>BudgetCheckResultDetail_Source</DataSource>
												<DisplayLength>25</DisplayLength>
												<DisplayLengthMode>Fixed</DisplayLengthMode>
												<Label>@SYS305493</Label>
											</AxFormControl>
										</Controls>
										<DataSource>BudgetCheckResultDetail_Source</DataSource>
										<HighlightActive>No</HighlightActive>
										<MultiSelect>No</MultiSelect>
										<VisibleRows>3</VisibleRows>
										<VisibleRowsMode>Fixed</VisibleRowsMode>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>None</ArrangeMethod>
								<Caption>@SYS321088</Caption>
							</AxFormControl>
						</Controls>
						<Style>FastTabs</Style>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitContainer</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CloseButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS15212</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>