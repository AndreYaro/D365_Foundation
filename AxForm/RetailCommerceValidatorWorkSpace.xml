<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailCommerceValidatorWorkSpace</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailCommerceValidatorWorkSpace extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>getCounter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record based on the given parameters.
    /// </summary>
    /// <param name = "_metricId">The Metric Id.</param>
    /// <param name = "_validationId">The Validation ID.</param>
    /// <param name = "_batchJobId">The batch job Id.</param>
    /// <param name = "_testId">The Test id.</param>
    /// <param name = "_ruleId">The Rule id.</param>
    /// <param name = "_description">Counter's description.</param>
    /// <param name = "_forUpdate">Boolean value, 'true' if the record needs to be updated, otherwise false.</param>
    /// <returns>Created/found buffer of <c>RetailCommerceValidatorCounters</c> table.</returns>
    public RetailCommerceValidatorCounters getCounter(
        RetailCommerceValidatorMetricId _metricId,
        RetailCommerceValidatorId _validationId = '',
        RefRecId _batchJobId = 0,
        RetailCommerceValidatorTestId _testId = '',
        RetailCommerceValidatorRuleId _ruleId = '',
        Description255 _description = '',
        boolean _forUpdate = false)
    {
        RetailCommerceValidatorCounters validatorCounters;

        try
        {
            select firstonly validatorCounters
                where validatorCounters.MetricId == _metricId
                    && validatorCounters.ValidationId == _validationId
                    && validatorCounters.BatchJobId == _batchJobId
                    && validatorCounters.TestId == _testId
                    && validatorCounters.RuleId == _ruleId;
        }
        catch (Exception::Error)
        {
            info::addMessage(Exception::Error, "@Retail:RetailCommerceValidatorGenericErrorMessage");
        }

        return validatorCounters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        // Set Tile refresh rate in 60 sec
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        SysDataCacheConfigurationTable config;

        update_recordset config
            setting RefreshFrequency = parameters.RefreshRateTiles
            where config.ConsumerIdentifier == 'RetailCommerceValidationTotalsTile';

        // Create Number sequence references (in case they don't exist)
        RetailCommerceValidator::createNumberSequences();

        super();

        // Set Grid refresh rate
        ValidationList.refreshInterval(parameters.RefreshRateValidationGrid);

        // Load metadata
        int64 totalMetrics = RetailCommerceValidatorMetrics::load();
        int64 totalEntityTypes = RetailCommerceValidatorEntityTypes::load();
        int64 totalRules = RetailCommerceValidatorRules::load();

        // Increment counters
        RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId", totalMetrics, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId", false, false);
        RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId", totalEntityTypes, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId", false, false);
        RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId", totalRules, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId", false, false);

        // Set workspace elements visibility
        TotalResultsChart.visible(parameters.WorkspaceChartType == RetailCommerceValidatorWorkspaceChartType::Tests);
        element.setTotalPerChannelChartVisibility();
        RulesListTabPage.visible(parameters.ShowRulesTab);
        ParametersBtn.visible(parameters.ShowRetailParameters);
        ExecuteAllValidations.visible(RetailConfigurationParameters::isValidateAllEnabledInChannelMerchandisingConfigurationValidator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshValidatonList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the validations list
    /// </summary>
    private void refreshValidatonList()
    {
        // Refresh Validations list tab page.
        FormRun partRun = ValidationList.getPartFormRun();
        FormDataSource commerceValidatorDataSource;

        for (int i = 0; i <= partRun.dataSourceCount(); i++)
        {
            // First data source is RetailCommerceValidator
            commerceValidatorDataSource = partRun.dataSource(i);

            if (commerceValidatorDataSource.table() == tableNum(RetailCommerceValidator))
            {
                break;
            }
        }

        commerceValidatorDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalPerChannelChartVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the visibility of TotalPerChannelChart formpart.
    /// </summary>
    public void setTotalPerChannelChartVisibility()
    {
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        boolean isVisible = (parameters.WorkspaceChartType == RetailCommerceValidatorWorkspaceChartType::Channel);
        boolean previousVisibility = TotalPerChannelChart.visible();

        // Do not show form part when there are no validations.
        if (isVisible)
        {
            RetailCommerceValidator validator;

            select count(RecId) from validator;

            isVisible = (validator.RecId == 0) ? false : isVisible;
        }

        // Update the data only when changing it's visible state.
        if (previousVisibility != isVisible)
        {
            RetailCommerceValidatorChartTotalizer::updateTotalResultsChart();
            TotalPerChannelChart.refresh();
        }

        TotalPerChannelChart.visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareValidationsContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a container consists of all validation ids.
    /// </summary>
    /// <returns>The container.</returns>
    private container prepareValidationsContainer()
    {
        container validationsCont;
        RetailCommerceValidator validatorLoc;

        while select validatorLoc
        {
            validationsCont += validatorLoc.ValidationId;
        }

        return validationsCont;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CreateAllValidations</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates validations for all stores.
        /// </summary>
        public void clicked()
        {
            RetailCommerceValidator::createAllValidations(false);

            super();

            // Refresh Validations list tab page.
            element.refreshValidatonList();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExecuteAllValidations</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Execute all validations.
        /// </summary>
        public void clicked()
        {
            container validationsCont = element.prepareValidationsContainer();

            if (RetailCommerceValidator::canScheduleValidateSelected(validationsCont, true))
            {
                RetailCommerceValidator::scheduleSelectedValidationsInBatch(validationsCont);
            }

            super();

            // Refresh Validations list.
            element.refreshValidatonList();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalRules</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns>An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidatorCounters counters = element.getCounter("@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId");

            ret.strTileData(int2Str(counters.TotalCount));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event

        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidatorCounters counters = element.getCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated");

            ret.strTileData(int2Str(counters.TotalCount));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalOnlineStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidatorCounters counters = element.getCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated");

            ret.strTileData(int2Str(counters.TotalCount));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidatedStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidatorCounters counters = element.getCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated");

            ret.strTileData(int2Str(counters.TotalCount));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ValidatedOnlineStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidatorCounters counters = element.getCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated");

            ret.strTileData(int2Str(counters.TotalCount));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalPassedOnlineStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidator validator;
            RetailChannelTable channelTable;

            select count(RecId) from validator
                where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Passed
                exists join channelTable
                    where channelTable.OMOperatingUnitID == validator.OMOperatingUnitId
                        && channelTable.ChannelType == RetailChannelType::SharePointOnlineStore;

            ret.strTileData(int2Str(validator.RecId));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalPassedRetailStores</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidator validator;
            RetailChannelTable channelTable;

            select count(RecId) from validator
                where validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Passed
                exists join channelTable
                    where channelTable.OMOperatingUnitID == validator.OMOperatingUnitId
                    && channelTable.ChannelType == RetailChannelType::RetailStore;

            ret.strTileData(int2Str(validator.RecId));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalOnlineStoresWithIssues</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidator validator;
            RetailChannelTable channelTable;

            select count(RecId) from validator
                where ( validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Warning
                    || validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Error)
                exists join channelTable
                    where channelTable.OMOperatingUnitID == validator.OMOperatingUnitId
                && channelTable.ChannelType == RetailChannelType::SharePointOnlineStore;

            ret.strTileData(int2Str(validator.RecId));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TotalRetailStoresWithIssues</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>getData</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the data.
        /// </summary>
        /// <returns> An instance for <c> TileButtonControlData </c> class with data</returns>
        public TileButtonControlData getData()
        {
            TileButtonControlData ret = super();

            RetailCommerceValidator validator;
            RetailChannelTable channelTable;

            select count(RecId) from validator
                where ( validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Warning
                    || validator.ValidationResultStatus == RetailCommerceValidatorResultStatus::Error)
                exists join channelTable
                    where channelTable.OMOperatingUnitID == validator.OMOperatingUnitId
                        && channelTable.ChannelType == RetailChannelType::RetailStore;

            ret.strTileData(int2Str(validator.RecId));

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes click event.
        /// </summary>
        public void clicked()
        {
            // Not providing click event.
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Retail:RetailCommerceValidatorWorkspaceCaption</Caption>
		<Pattern xmlns="">WorkspaceOperational</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Workspace</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>FormActionHeader</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ValidationButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>CreateAllValidations</Name>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<NormalImage>New</NormalImage>
								<Text>@Retail:RetailCommerceValidationCreateAll</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>ExecuteAllValidations</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<NormalImage>Play</NormalImage>
								<Text>@Retail:RetailCommerceValidatorExecuteAllLabel</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ParametersBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<MenuItemName>RetailParameters</MenuItemName>
								<NormalImage>Settings</NormalImage>
								<Text>@SYS7764</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>PanaromaTab</Name>
				<ExtendedStyle>tab_simpleFastTab</ExtendedStyle>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SummaryTabPage</Name>
						<ExtendedStyle>workspace_tileLayout</ExtendedStyle>
						<Pattern>SectionTiles</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalRules</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Text>@Retail:RetailCommerceValidatorTotalRulesTilesText</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorTotalStoresMetricID</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalOnlineStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorTotalOnlineStoresMetricId</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ValidatedStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorValidatedStoresMetricId</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ValidatedOnlineStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorValidatedOnlineStoresMetricId</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalPassedOnlineStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorPassedOnlineStores</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalPassedRetailStores</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorPassedRetailStores</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalOnlineStoresWithIssues</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorOnlineStoresWithIssues</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TotalRetailStoresWithIssues</Name>
								<Type>MenuFunctionButton</Type>
								<FormControlExtension>
									<Name>TileButtonControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>tile</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidationTotalsTile</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>tileDisplay</Name>
											<Type>Enum</Type>
											<TypeName>TileDisplay</TypeName>
											<Value>TextOnly</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<CopyCallerQuery>No</CopyCallerQuery>
								<Text>@Retail:RetailCommerceValidatorRetailStoresWithIssues</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>TotalResultsChart</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>chart_2x2</ExtendedStyle>
								<Type>Container</Type>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidatorTotalResultChart</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>60</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Remote</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
								<ArrangeMethod>HorizontalRight</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>TotalPerChannelChart</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ExtendedStyle>chart_2x2</ExtendedStyle>
								<Type>Container</Type>
								<FormControlExtension>
									<Name>FormPartControl</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentComposite">
											<Name>dataLinks</Name>
											<ExtensionComponents />
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>targetName</Name>
											<Type>String</Type>
											<Value>RetailCommerceValidatorTotalPerChannelChart</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>autoRefreshInterval</Name>
											<Type>Int32</Type>
											<Value>60</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmRunMode</Name>
											<Type>Enum</Type>
											<TypeName>FormPartControlRunMode</TypeName>
											<Value>Remote</Value>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<Caption>@SYS80378</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabbedSectionList</Name>
						<Pattern>SectionTabbedList</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>ValidatorTabbedListTab</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Height>500</Height>
								<HeightMode>Manual</HeightMode>
								<Type>Tab</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>ValidationsListTabPage</Name>
										<Type>TabPage</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormContainerControl">
												<Name>ValidationList</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Container</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension>
													<Name>FormPartControl</Name>
													<ExtensionComponents>
														<AxFormControlExtensionComponent xmlns=""
															i:type="AxFormControlExtensionComponentComposite">
															<Name>dataLinks</Name>
															<ExtensionComponents />
														</AxFormControlExtensionComponent>
													</ExtensionComponents>
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>targetName</Name>
															<Type>String</Type>
															<Value>RetailCommerceValidationList</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>autoRefreshInterval</Name>
															<Type>Int32</Type>
															<Value>20</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmRunMode</Name>
															<Type>Enum</Type>
															<TypeName>FormPartControlRunMode</TypeName>
															<Value>Local</Value>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<Controls />
												<NeededAccessLevel>Delete</NeededAccessLevel>
											</AxFormControl>
										</Controls>
										<Caption>@Retail:RetailCommerceValidatorValidationsText</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>RulesListTabPage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>TabPage</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormContainerControl">
												<Name>RulesList</Name>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Container</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension>
													<Name>FormPartControl</Name>
													<ExtensionComponents>
														<AxFormControlExtensionComponent xmlns=""
															i:type="AxFormControlExtensionComponentComposite">
															<Name>dataLinks</Name>
															<ExtensionComponents />
														</AxFormControlExtensionComponent>
													</ExtensionComponents>
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>targetName</Name>
															<Type>String</Type>
															<Value>RetailCommerceValidatorRules</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>autoRefreshInterval</Name>
															<Type>Int32</Type>
															<Value>0</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmRunMode</Name>
															<Type>Enum</Type>
															<TypeName>FormPartControlRunMode</TypeName>
															<Value>Local</Value>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<Controls />
												<NeededAccessLevel>Delete</NeededAccessLevel>
											</AxFormControl>
										</Controls>
										<Caption>@SYS23052</Caption>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>VerticalTabs</Style>
							</AxFormControl>
						</Controls>
						<Caption>@Retail:RetailCommerceValidatorValidationsText</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
						<PanelStyle>Grid</PanelStyle>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RelatedLinksTabPage</Name>
						<Pattern>SectionRelatedLinks</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS72248</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>