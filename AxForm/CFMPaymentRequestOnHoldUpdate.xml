<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CFMPaymentRequestOnHoldUpdate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CFMPaymentRequestOnHoldUpdate extends FormRun
{
    CFMPaymentRequestTable paymentRequestTable;
}
]]></Source>
			</Method>
			<Method>
				<Name>buildReasonCodeLookupQuery</Name>
				<Source><![CDATA[
    public Query buildReasonCodeLookupQuery()
    {
        FieldName paymentAccountType, oppositePaymentAccountType, accountType, oppositeAccountType;

        Query query = new Query();
        QueryBuildDataSource qbds;

        switch (paymentRequestTable.PaymentAccountType)
        {
            case CFMPaymentAccountType::Bank:
                paymentAccountType = fieldStr(ReasonTable, Bank);
                oppositePaymentAccountType = fieldStr(ReasonTable, RCash);
                break;
            case CFMPaymentAccountType::Cash_RU:
                paymentAccountType = fieldStr(ReasonTable, RCash);
                oppositePaymentAccountType = fieldStr(ReasonTable, Bank);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch (paymentRequestTable.AccountType)
        {
            case CFMAccountType::Vend:
                accountType = fieldStr(ReasonTable, Vend);
                oppositeAccountType = fieldStr(ReasonTable, Cust);
                break;
            case CFMAccountType::Cust:
                accountType = fieldStr(ReasonTable, Cust);
                oppositeAccountType = fieldStr(ReasonTable, Vend);
                break;
            case CFMAccountType::Worker:
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        qbds = query.addDataSource(tableNum(ReasonTable));

        if (paymentRequestTable.AccountType == CFMAccountType::Vend || paymentRequestTable.AccountType == CFMAccountType::Cust)
        {
            qbds.addRange(fieldNum(ReasonTable, RecId)).value(
                strFmt('(((%1.%2 == 1) && (%1.%5 == 0)) || ((%1.%3 == 1) && (%1.%4 == 0)) || ((%1.%2 == 1) && (%1.%3 == 1)))',
                       qbds.name(),
                       accountType,
                       paymentAccountType,
                       oppositeAccountType,
                       oppositePaymentAccountType));
        }
        else if (paymentRequestTable.AccountType == CFMAccountType::Worker)
        {
            qbds.addRange(fieldNum(ReasonTable, RCash)).value(queryValue(NoYes::Yes));
            qbds.addRange(fieldNum(ReasonTable, Cust)).value(queryValue(NoYes::No));
            qbds.addRange(fieldNum(ReasonTable, Vend)).value(queryValue(NoYes::No));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        paymentRequestTable = element.args().record();
        onHoldCheckBox.value(!paymentRequestTable.OnHold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        CFMPaymentRequestTable::onHoldUpdate(paymentRequestTable.RecId, onHoldCheckBox.value(), onHoldReasonCode.valueStr());

        if (paymentRequestTable.dataSource())
        {
            paymentRequestTable.dataSource().reread();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>OnHoldCheckBox</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query query = new Query();
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ReasonTable), this);

            query = element.buildReasonCodeLookupQuery();

            sysTableLookup.addLookupfield(fieldNum(ReasonTable, Reason));
            sysTableLookup.addLookupfield(fieldNum(ReasonTable, Description));

            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@SYS103075</Caption>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DropDialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>MainInstruction</Name>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@CashFlowManagement:ChangeOnHoldStatus</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GroupContent</Name>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>OnHoldCheckBox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@SYS103075</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>OnHoldReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>ReasonCode</ExtendedDataType>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CommandButtonOK</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>