<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HRPDefaultSigningLimitRule</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HRPDefaultSigningLimitRule extends FormRun implements HRPIDefaultSigningLImitRuleAssignment
{
    RefRecId                        policyRuleTypeIndex;
    RefRecId                        policyIndex;
    RefRecId                        defaultLimitRuleRecId;
    SysPolicyRule                   defaultLimitRule;
    HRPAuthorityBasis               authorityBasis;
    HRPTmpDefaultSigningLimitRule   signingLimitRule;
    boolean                         isNew, isRuleDetailsModified;
    boolean                         isRecordExpired;
    boolean                         isApprovalCurrencyLookupSelected, isSpendingCurrencyLookupSelected;
    CurrencyCode                    currencyCode;
    CurrencyCode                    approvalCurrencyCode, spendingCurrencyCode;
    Currency                        currency;
    boolean                         ruleAssignmentResult;

    const str valueDelimiter = ';';

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        try
        {
            // checking if any details are modified for unexpired record
            if (!isRecordExpired)
            {
                element.saveRuleDetails();
            }

            super();
        }

        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        HRPDefaultLimitDetail       defaultLimitDetailCheck;
        HRPLimitParameters          limitParameters;
        QueryBuildRange             qbr;

        super();

        if (!element.args().caller())
        {
            throw error(Error::missingFormActiveBuffer(element.name()));
        }

        policyRuleTypeIndex = str2int64(element.args().parm());
        defaultLimitRule = element.args().record();
        policyIndex = element.args().caller().getPolicyIndex();

        if (defaultLimitRule)
        {
            SysPolicyUtil::filterPolicyRule(hrpDefaultLimitRule_ds, defaultLimitRule);

            defaultLimitRuleRecId = defaultLimitRule.RecId;
            select firstonly LimitBasisType from defaultLimitDetailCheck
                where defaultLimitDetailCheck.DefaultSigningLimitRule == defaultLimitRule.RecId;

            qbr = hrpTmpDefaultSigningLimitRule_ds.query().dataSourceTable(tableNum(HRPTmpDefaultSigningLimitRule))
                .findRange(fieldNum(HRPTmpDefaultSigningLimitRule, DefaultSigningLimitRule));

            if (qbr == null)
            {
                qbr = hrpTmpDefaultSigningLimitRule_ds.query().dataSourceTable(tableNum(HRPTmpDefaultSigningLimitRule))
                    .addRange(fieldNum(HRPTmpDefaultSigningLimitRule, DefaultSigningLimitRule));
            }

            qbr.value(queryValue(defaultLimitRule.RecId));
            hrpTmpDefaultSigningLimitRule_ds.executeQuery();
        }
        else
        {
            isNew = true;
            HRPDefaultLimitRule_ds.create();
        }

        // enabling and disabling controls depend on the form open mode
        if ((defaultLimitRule.RecId > 0) && (defaultLimitRule.ValidTo < DateTimeUtil::utcNow() || defaultLimitRule.ValidFrom == defaultLimitRule.ValidTo))
        {
            defaultSigningLimitRuleGroup.enabled(false);
            hrpTmpDefaultSigningLimitRule_ds.allowCreate(false);
            hrpTmpDefaultSigningLimitRule_ds.allowDelete(false);
            hrpTmpDefaultSigningLimitRule_ds.allowEdit(false);

            defaultSigningLimitNew.enabled(false);
            defaultSigningLimitDelete.enabled(false);
            isRecordExpired = true;
        }
        else
        {
            defaultSigningLimitRuleGroup.enabled(true);
            defaultSigningLimitNew.enabled(true);
            defaultSigningLimitDelete.enabled(false);
        }

        //fetch authority basis from signing limit parameters
        if (defaultLimitDetailCheck)
        {
            authorityBasis = defaultLimitDetailCheck.LimitBasisType;
        }
        else
        {
            select firstonly SigningLimitBasedOn from limitParameters;
            authorityBasis = limitParameters.SigningLimitBasedOn;
        }

        DefaultSigningLimitRuleJob.visible(authorityBasis == HRPAuthorityBasis::Job);
        DefaultSigningLimitRuleCompensation.visible(authorityBasis == HRPAuthorityBasis::Compensation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFormDataSourceCompensationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compensation details into datasource table buffer of <c>HRPTmpDefaultSigningLimitRule</c> table.
    /// </summary>
    public void insertFormDataSourceCompensationDetail()
    {
        HRPDefaultLimitCompensationRule defaultLimitCompensationRule, defaultLimitCompensationRuleGroupBy;
        HRPDefaultLimitDetail           defaultLimitDetail, defaultLimitDetailGroupBy;

        while select RecId,DefaultSigningLimitRule, SigningLimitDocument from defaultLimitDetailGroupBy
            join CompensationLevel, DefaultLimitDetail from defaultLimitCompensationRuleGroupBy
            group by defaultLimitDetailGroupBy.SigningLimitDocument, defaultLimitCompensationRuleGroupBy.CompensationLevel, defaultLimitDetailGroupBy.DefaultSigningLimitRule
                where defaultLimitDetailGroupBy.DefaultSigningLimitRule         == defaultLimitRule.RecId
                    && defaultLimitCompensationRuleGroupBy.DefaultLimitDetail   == defaultLimitDetailGroupBy.RecId
        {
            // logic to insert a single record for both approved and spending amount grouped by document type, compensation level and selected default signing limit rule
            while select defaultLimitDetail
                    where defaultLimitDetail.SigningLimitDocument           == defaultLimitDetailGroupBy.SigningLimitDocument
                        && defaultLimitDetail.DefaultSigningLimitRule       == defaultLimitDetailGroupBy.DefaultSigningLimitRule
                join DefaultLimitDetail, CompensationLevel from defaultLimitCompensationRule
                    where defaultLimitCompensationRule.DefaultLimitDetail   == defaultLimitDetail.RecId
                        && defaultLimitCompensationRule.CompensationLevel   == defaultLimitCompensationRuleGroupBy.CompensationLevel
            {
                element.insertOrUpdateFormDataSource(defaultLimitDetail, defaultLimitCompensationRule.CompensationLevel);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFormDataSourceJobDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts job details into datasource table buffer of <c>HRPTmpDefaultSigningLimitRule</c> table.
    /// </summary>
    [Wrappable(true)]
    protected final void insertFormDataSourceJobDetail()
    {
        HRPDefaultLimitJobRule  defaultLimitJobRule, defaultLimitJobRuleGroupBy;
        HRPDefaultLimitDetail   defaultLimitDetail, defaultLimitDetailGroupBy;

        while select DefaultSigningLimitRule, SigningLimitDocument from defaultLimitDetailGroupBy
            join DefaultLimitDetail, Job from defaultLimitJobRuleGroupBy
            group by defaultLimitDetailGroupBy.SigningLimitDocument, defaultLimitJobRuleGroupBy.Job, defaultLimitDetailGroupBy.DefaultSigningLimitRule
                where defaultLimitDetailGroupBy.DefaultSigningLimitRule == defaultLimitRule.RecId
                    && defaultLimitJobRuleGroupBy.DefaultLimitDetail    == defaultLimitDetailGroupBy.RecId
        {
            //logic to insert a single record for both approved and spending amount grouped by document type, job and selected default signing limit rule
            while select defaultLimitDetail
                    where defaultLimitDetail.SigningLimitDocument       == defaultLimitDetailGroupBy.SigningLimitDocument
                        && defaultLimitDetail.DefaultSigningLimitRule   == defaultLimitDetailGroupBy.DefaultSigningLimitRule
                join DefaultLimitDetail, Job from defaultLimitJobRule
                    where defaultLimitJobRule.DefaultLimitDetail        == defaultLimitDetail.RecId
                        &&  defaultLimitJobRule.Job                     == defaultLimitJobRuleGroupBy.Job
            {
                element.insertOrUpdateFormDataSource(defaultLimitDetail, defaultLimitJobRule.Job);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert or update record in <c>HRPTmpDefaultSigningLimitRule</c> table.
    /// </summary>
    /// <param name="_defaultLimitDetail">
    /// An instance of <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_jobOrCompensation">
    /// List of jobs or compensations selected by the user.
    /// </param>
    /// <param name="_jobOrCompensationRecId">
    /// RecIds from <c>HcmJob</c> or <c>HcmCompensationLevel</c> table based on authority basis.
    /// </param>
    [Wrappable(true)]
    protected final void insertOrUpdateFormDataSource(
                    HRPDefaultLimitDetail           _defaultLimitDetail,
                    RecId                           _jobOrCompensationRecId)
    {
        HRPLimitDocumentType            signingLimitDocumentType;

        signingLimitDocumentType = HRPLimitDocument::getDocumentType(_defaultLimitDetail.SigningLimitDocument);

        ttsbegin;

        select forupdate signingLimitRule
            where signingLimitRule.CompensationRecIds == _jobOrCompensationRecId &&
                signingLimitRule.SigningLimitDocument == signingLimitDocumentType &&
                signingLimitRule.DefaultSigningLimitRule == _defaultLimitDetail.DefaultSigningLimitRule;

        if (_defaultLimitDetail.LimitType == HRPLimitType::Approval)
        {
            signingLimitRule.ApprovalAmount       = _defaultLimitDetail.Amount;
            signingLimitRule.ApprovalCurrency     = _defaultLimitDetail.Currency;
            signingLimitRule.ApprovalDetailRecId  = _defaultLimitDetail.RecId;
        }
        else
        {
            signingLimitRule.SpendingAmount         = _defaultLimitDetail.Amount;
            signingLimitRule.SpendingCurrency       = _defaultLimitDetail.Currency;
            signingLimitRule.SpendingDetailRecId    = _defaultLimitDetail.RecId;
        }

        if (signingLimitRule)
        {
            signingLimitRule.update();
        }
        else
        {
            signingLimitRule.DefaultSigningLimitRule     = _defaultLimitDetail.DefaultSigningLimitRule;
            signingLimitRule.SigningLimitDocument        = signingLimitDocumentType;
            signingLimitRule.CompensationRecIds          = _jobOrCompensationRecId;
            signingLimitRule.Description                 = _defaultLimitDetail.Description;
            signingLimitRule.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDetailGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the form grid.
    /// </summary>
    [Wrappable(true)]
    protected final void populateDetailGrid()
    {
        HRPDefaultLimitRule populateDefaultLimitRule;
        HRPTmpDefaultSigningLimitRule tmpSigningLimitRule;
        HRPSigningLimitPolicyUtil defaultSigninglimitRule;

        //populate the details grid while in edit mode
        if (defaultLimitRule)
        {
            select ValidFrom, ValidTo from populateDefaultLimitRule
                where populateDefaultLimitRule.RecId == defaultLimitRule.RecId;

            validFromDate.dateTimeValue(populateDefaultLimitRule.ValidFrom);
            validToDate.dateTimeValue(populateDefaultLimitRule.ValidTo);

            defaultSigninglimitRule = new HRPSigningLimitPolicyUtil();

            this.insertIntoFormDataSource();

            tmpSigningLimitRule.setTmpData(signingLimitRule);

            while select signingLimitRule
                group by SigningLimitDocument, ApprovalAmount, SpendingAmount, SpendingCurrency, ApprovalCurrency, ApprovalDetailRecId, SpendingDetailRecId
            {
                List compRecIds = new List(Types::Int64);

                while select tmpSigningLimitRule
                    where tmpSigningLimitRule.SigningLimitDocument  == signingLimitRule.SigningLimitDocument
                        && tmpSigningLimitRule.ApprovalAmount       == signingLimitRule.ApprovalAmount
                        && tmpSigningLimitRule.SpendingAmount       == signingLimitRule.SpendingAmount
                        && tmpSigningLimitRule.SpendingCurrency     == signingLimitRule.SpendingCurrency
                        && tmpSigningLimitRule.ApprovalCurrency     == signingLimitRule.ApprovalCurrency
                        && tmpSigningLimitRule.ApprovalDetailRecId  == signingLimitRule.ApprovalDetailRecId
                        && tmpSigningLimitRule.SpendingDetailRecId  == signingLimitRule.SpendingDetailRecId
                {
                    compRecIds.addEnd(tmpSigningLimitRule.CompensationRecIds);
                }

                if (compRecIds.elements() > 0)
                {
                    hrpTmpDefaultSigningLimitRule.DefaultSigningLimitRule     = signingLimitRule.DefaultSigningLimitRule;
                    hrpTmpDefaultSigningLimitRule.SigningLimitDocument        = signingLimitRule.SigningLimitDocument;
                    hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer = compRecIds.pack();
                    hrpTmpDefaultSigningLimitRule.ApprovalAmount              = signingLimitRule.ApprovalAmount;
                    hrpTmpDefaultSigningLimitRule.ApprovalCurrency            = signingLimitRule.ApprovalCurrency;
                    hrpTmpDefaultSigningLimitRule.SpendingAmount              = signingLimitRule.SpendingAmount;
                    hrpTmpDefaultSigningLimitRule.SpendingCurrency            = signingLimitRule.SpendingCurrency;

                    hrpTmpDefaultSigningLimitRule.ApprovalDetailRecId         = signingLimitRule.ApprovalDetailRecId;
                    hrpTmpDefaultSigningLimitRule.SpendingDetailRecId         = signingLimitRule.SpendingDetailRecId;
 
                    HRPDefaultLimitDetailDescription defaultLimitDetailDescription = HRPDefaultLimitDetailDescription::findyByApprovalSpendingRecIds(signingLimitRule.ApprovalDetailRecId, signingLimitRule.SpendingDetailRecId);

                    if (defaultLimitDetailDescription)
                    {
                        hrpTmpDefaultSigningLimitRule.Description = defaultLimitDetailDescription.Description;
                    }
                    else
                    {
                        hrpTmpDefaultSigningLimitRule.Description = signingLimitRule.Description;
                    }

                    hrpTmpDefaultSigningLimitRule.insert();
                }
            }
        }

        hrpTmpDefaultSigningLimitRule_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form data source by inserting the Job or Compensation details.
    /// </summary>
    [Wrappable(true)]
    protected final void insertIntoFormDataSource()
    {
        if (authorityBasis == HRPAuthorityBasis::Compensation)
        {
            element.insertFormDataSourceCompensationDetail();
        }
        else if (authorityBasis == HRPAuthorityBasis::Job)
        {
            element.insertFormDataSourceJobDetail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        element.populateDetailGrid();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRuleDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new default signing limit rule when the current rule has gone through the modifications.
    /// </summary>
    [Wrappable(true)]
    protected final void saveRuleDetails()
    {
        utcdatetime                     newValidFrom, newValidTo;
        Array                           validDates;
        RefRecId                        defaultLimitRuleRecIdCompare;
        RefRecId                        jobOrCompensationRecId;
        HRPSigningLimitPolicyUtil       defaultSigninglimitRule;
        HRPDefaultLimitRule             defaultLimitRuleLocal;

        if (hrpDefaultLimitRule.RecId == 0)
        {
            return;
        }

        validDates = new Array(Types::UtcDateTime);

        ttsbegin;

        hrpTmpDefaultSigningLimitRule.setTmpData(hrpTmpDefaultSigningLimitRule);

        select firstonly RecId from hrpTmpDefaultSigningLimitRule;

        if (hrpTmpDefaultSigningLimitRule.RecId)
        {
            //insert a new rule if the current rule has gone through the modifications
            if (!isNew && isRuleDetailsModified)
            {
                //retrieve the ValidFrom and ValidTo values before retiring the current rule.
                validDates = element.args().caller().getValidFromAndToDate(defaultLimitRule.RecId);
                if (validDates.lastIndex() == 2)
                {
                    newValidFrom = validDates.value(1);
                    newValidTo   = validDates.value(2);

                    //retire the current rule before creating the new rule with the new modifications
                    delete_from defaultLimitRuleLocal
                        where defaultLimitRuleLocal.RecId == defaultLimitRule.RecId;

                    hrpDefaultLimitRule.Policy          = policyIndex;
                    hrpDefaultLimitRule.PolicyRuleType  = policyRuleTypeIndex;
                    hrpDefaultLimitRule.ValidFrom       = newValidFrom;
                    hrpDefaultLimitRule.ValidTo         = newValidTo;
                    hrpDefaultLimitRule.IsInherited     = isInherited.value();
                    hrpDefaultLimitRule.insert();
                }
            }
            defaultLimitRuleRecIdCompare = hrpDefaultLimitRule.RecId;
        }

        if (defaultLimitRuleRecIdCompare && (defaultLimitRuleRecIdCompare != hrpTmpDefaultSigningLimitRule.DefaultSigningLimitRule))
        {
            update_recordset hrpTmpDefaultSigningLimitRule
                setting DefaultSigningLimitRule = defaultLimitRuleRecIdCompare;
        }

        ttscommit;

        defaultSigninglimitRule = new HRPSigningLimitPolicyUtil();

        if (isRuleDetailsModified)
        {
            while select hrpTmpDefaultSigningLimitRule
            {
                //for each job/compensation selected, get the job/compensation recid
                list recIdList = List::create(hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer);
                ListEnumerator listEnumerator = recIdList.getEnumerator();

                while (listEnumerator.moveNext())
                {
                    jobOrCompensationRecId = str2int64(listEnumerator.current());
                    defaultSigninglimitRule.createDefaultLimit(hrpTmpDefaultSigningLimitRule, authorityBasis, jobOrCompensationRecId);
                }

                defaultSigninglimitRule.createLimitDetailDescription(hrpTmpDefaultSigningLimitRule);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SaveValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field values of <c>HrpTmpDefaultSigningLimitRule</c> buffer.
    /// </summary>
    /// <returns>
    /// Returns true, if the validation is passed; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean SaveValidation()
    {
        boolean isValid = true;

        while select hrpTmpDefaultSigningLimitRule
        {
            if (!hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer ||
                    List::create(hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer).elements() == 0)
            {
                str type = this.setRuleDetailsRequiredMessage();

                checkFailed(strFmt("@HCM:SigningLimitRuleDetailsRequired", hrpTmpDefaultSigningLimitRule.SigningLimitDocument, hrpTmpDefaultSigningLimitRule.Description, type));
                isValid = false;
                break;
            }
        }

        if (!isValid)
        {
            hrpTmpDefaultSigningLimitRule_ds.research(true);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRuleDetailsRequiredMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the label for authority basis.
    /// </summary>
    /// <returns>
    /// Returns the label of selected authority basis.
    /// </returns>
    [Wrappable(true)]
    protected final str setRuleDetailsRequiredMessage()
    {
        str type;

        if (authorityBasis == HRPAuthorityBasis::Job)
        {
            type = "@HCM:Jobs";
        }
        else if (authorityBasis == HRPAuthorityBasis::Compensation)
        {
            type = "@HCM:CompensationGrades";
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCompensationRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the rule has already been used in a signing limit for same document type, 
    /// if yes, set ruleAssignmentResult to false; otherwise, assign the rule 
    /// </summary>
    public void assignCompensationRecIds(List recIds)
    {
        ruleAssignmentResult = true;

        container data = recIds.pack();
        if (data != hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer)
        {
            if (hrpTmpDefaultSigningLimitRule.checkDuplicationJobCompensationCombination(data, authorityBasis, true))
            {
                ruleAssignmentResult = false;
            }
            else
            {
                hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer = data;

                hrpTmpDefaultSigningLimitRule.update();
                isRuleDetailsModified = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssignedCompensationValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the rule assignment result of most recent call on <c>assignCompensationRecIds</c> method
    /// </summary>
    public boolean isAssignedCompensationValid()
    {
        return ruleAssignmentResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        if (!element.SaveValidation())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HRPDefaultLimitRule</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            hrpDefaultLimitRule.PolicyRuleType = policyRuleTypeIndex;
            hrpDefaultLimitRule.Policy = policyIndex;

            if (!defaultLimitRule)
            {
                hrpDefaultLimitRule.ValidFrom = element.args().caller().getDefaultStartDate(policyIndex, policyRuleTypeIndex);
                hrpDefaultLimitRule.ValidTo = DateTimeUtil::maxValue();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.queryBuildDataSource().addRange(fieldNum(HRPDefaultLimitRule, Policy)).value(int642Str(policyIndex));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HRPTmpDefaultSigningLimitRule</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (hrpDefaultLimitRule.RecId == 0)
            {
                hrpDefaultLimitRule_ds.write();
            }
            hrpTmpDefaultSigningLimitRule.DefaultSigningLimitRule = hrpDefaultLimitRule.RecId;

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int         ret;
            HRPTmpDefaultSigningLimitRule defaultSigningLimitRuleTmp, defaultSigningLimitRuleCnt;

            ret = super();
            defaultSigningLimitRuleTmp = hrpTmpDefaultSigningLimitRule_ds.cursor();

            if (isRecordExpired == false)
            {
                defaultSigningLimitRuleCnt.setTmpData(hrpTmpDefaultSigningLimitRule);
                select count(RecId) from defaultSigningLimitRuleCnt;
                if (defaultSigningLimitRuleCnt.RecId > 0)
                {
                    defaultSigningLimitDelete.enabled(true);
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ApprovalAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;

                super();

                select Amount from defaultLimitDetail
                    where defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.ApprovalDetailRecId;

                isRuleDetailsModified  = (defaultLimitDetail.Amount != hrpTmpDefaultSigningLimitRule.ApprovalAmount);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ApprovalCurrency</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;

                super();

                select Currency from defaultLimitDetail
                    where defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.ApprovalDetailRecId;

                isRuleDetailsModified  = (defaultLimitDetail.Currency != hrpTmpDefaultSigningLimitRule.ApprovalCurrency);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Description</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;

                super();

                select Description from defaultLimitDetail
                    where defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.SpendingDetailRecId;

                isRuleDetailsModified  = (defaultLimitDetail.Description != hrpTmpDefaultSigningLimitRule.Description);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SigningLimitDocument</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;
                HRPLimitDocument        document;

                super();

                select SigningLimitDocument from defaultLimitDetail
                        where (defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.ApprovalDetailRecId
                            || defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.SpendingDetailRecId)
                    join DocumentType from document
                        where defaultLimitDetail.SigningLimitDocument == document.RecId;

                isRuleDetailsModified  = (document.DocumentType != hrpTmpDefaultSigningLimitRule.SigningLimitDocument);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SpendingAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;

                super();

                select Amount from defaultLimitDetail
                    where defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.SpendingDetailRecId;

                isRuleDetailsModified  = (defaultLimitDetail.Amount != hrpTmpDefaultSigningLimitRule.SpendingAmount);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>SpendingCurrency</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                HRPDefaultLimitDetail   defaultLimitDetail;

                super();

                select Currency from defaultLimitDetail
                    where defaultLimitDetail.RecId == hrpTmpDefaultSigningLimitRule.SpendingDetailRecId;

                isRuleDetailsModified  = (defaultLimitDetail.Currency != hrpTmpDefaultSigningLimitRule.SpendingCurrency);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DefaultSigningLimitNew</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            hrpTmpDefaultSigningLimitRule_ds.create(true);
            defaultSigningLimitDelete.enabled(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DefaultSigningLimitDelete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HRPTmpDefaultSigningLimitRule   defaultSigningLimitRule, defaultSigninglimitRuleCnt;
            HRPExpireWorkerLimits           expireWorkerLimits;
            RefRecId                        defaultSigningLimitRuleRecId, limitDocumentRecId;

            super();

            if (Box::okCancel("@SYS309825", DialogButton::Cancel) == DialogButton::Ok)
            {
                expireWorkerLimits = new HRPExpireWorkerLimits();

                defaultSigningLimitRuleRecId = hrpTmpDefaultSigningLimitRule.DefaultSigningLimitRule;

                limitDocumentRecId = HRPLimitDocument::getLimitDocumentRecId(hrpTmpDefaultSigningLimitRule.SigningLimitDocument);

                defaultSigningLimitRule.setTmpData(hrpTmpDefaultSigningLimitRule);
                defaultSigninglimitRuleCnt.setTmpData(hrpTmpDefaultSigningLimitRule);

                select count(RecId) from defaultSigninglimitRuleCnt;
                if (defaultSigninglimitRuleCnt.RecId == 1)
                {
                    info("@SYS310821");
                }
                else
                {
                    delete_from defaultSigningLimitRule
                        where defaultSigningLimitRule.RecId == hrpTmpDefaultSigningLimitRule.RecId;

                    expireWorkerLimits.expireDefaultSigningLimitRule(defaultSigningLimitRuleRecId, limitDocumentRecId);
                    isRuleDetailsModified = true;
                }
            }

            hrpTmpDefaultSigningLimitRule_ds.executeQuery();
            hrpTmpDefaultSigningLimitRule_ds.refresh();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SigningLimitDocument</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            ret = ret && !hrpTmpDefaultSigningLimitRule.checkDuplicationJobCompensationCombination(hrpTmpDefaultSigningLimitRule.CompensationRecIdsContainer, authorityBasis, true);
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ApprovalCurrency</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>getCurrency</Name>
						<Source><![CDATA[
        /// <summary>
        /// Retrieves the approval currency for the specified currency code.
        /// </summary>
        /// <param name="_currencyCode">
        /// A string value of <c>CurrencyCode</c> data type.
        /// </param>
        public void getCurrency(CurrencyCode _currencyCode)
        {
            hrpTmpDefaultSigningLimitRule.ApprovalCurrency = _currencyCode;

            currencyCode = _currencyCode;

            isApprovalCurrencyLookupSelected = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (isApprovalCurrencyLookupSelected)
            {
                isApprovalCurrencyLookupSelected = false;
            }
            else
            {
                select CurrencyCode from currency where currency.CurrencyCode == this.valueStr();
                if (currency)
                {
                    hrpTmpDefaultSigningLimitRule.ApprovalCurrency = currency.CurrencyCode;
                }
                else
                {
                    hrpTmpDefaultSigningLimitRule.ApprovalCurrency = approvalCurrencyCode;
                    isRuleDetailsModified = false;
                }
            }

            approvalCurrencyCode = strMin();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SpendingCurrency</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>getCurrency</Name>
						<Source><![CDATA[
        /// <summary>
        /// Retrieves the spending currency for the specified currency code.
        /// </summary>
        /// <param name="_currencyCode">
        /// A string value of <c>CurrencyCode</c> data type.
        /// </param>
        public void getCurrency(CurrencyCode _currencyCode)
        {
            hrpTmpDefaultSigningLimitRule.SpendingCurrency = _currencyCode;

            currencyCode = _currencyCode;

            isSpendingCurrencyLookupSelected = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (isSpendingCurrencyLookupSelected)
            {
                isSpendingCurrencyLookupSelected = false;
            }
            else
            {
                select firstonly CurrencyCode from currency where currency.CurrencyCode == this.valueStr();
                if (currency)
                {
                    hrpTmpDefaultSigningLimitRule.SpendingCurrency = currency.CurrencyCode;
                }
                else
                {
                    hrpTmpDefaultSigningLimitRule.SpendingCurrency = spendingCurrencyCode;
                }
            }

            spendingCurrencyCode = strMin();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HRPDefaultLimitRule</Name>
			<Table>HRPDefaultLimitRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsInherited</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Policy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyRuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<ValidTimeStateUpdate>EffectiveBased</ValidTimeStateUpdate>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HRPTmpDefaultSigningLimitRule</Name>
			<Table>HRPTmpDefaultSigningLimitRule</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApprovalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ApprovalDetailRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Compensation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompensationRecIds</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultSigningLimitRule</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LimitBasisType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SigningLimitDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpendingAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpendingCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpendingDetailRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS304453</Caption>
		<DataSource xmlns="">HRPDefaultLimitRule</DataSource>
		<DialogSize xmlns="">Large</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<TitleDataSource xmlns="">HRPTmpDefaultSigningLimitRule</TitleDataSource>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_Group</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Height>0</Height>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DefaultSigningLimitRuleGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>ValidFromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ValidFrom</DataField>
								<DataSource>HRPDefaultLimitRule</DataSource>
								<Label>@SYS35161</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>ValidToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>ValidTo</DataField>
								<DataSource>HRPDefaultLimitRule</DataSource>
								<Label>@SYS102701</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IsInherited</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>IsInherited</DataField>
								<DataSource>HRPDefaultLimitRule</DataSource>
								<Label>@SYS135083</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<LeftMargin>11</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DefaultSigningLimitRuleDetails</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>DefaultSigningLimitRuleActionPane</Name>
								<ElementPosition>1386916521</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>DefaultSigningLimitRuleActionPaneTab</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>DefaultSigningLimitRuleButtonGroup</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Left>0</Left>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DefaultSigningLimitNew</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Text>@SYS2055</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>DefaultSigningLimitDelete</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS21354</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>DefaultSigningLimitRuleCompensation</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
														<MenuItemName>HRPDefaultSigningLimitRuleCompensation</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>DefaultSigningLimitRuleJob</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
														<MenuItemName>HRPDefaultSigningLimitRuleJob</MenuItemName>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1767200083</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SigningLimitDocument</Name>
										<ElementPosition>805306366</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SigningLimitDocument</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
										<Label>@SYS317773</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ApprovalAmount</Name>
										<ElementPosition>1207959550</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>ApprovalAmount</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ApprovalCurrency</Name>
										<ElementPosition>1342177278</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ApprovalCurrency</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SpendingAmount</Name>
										<ElementPosition>1476395006</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AllowNegative>No</AllowNegative>
										<DataField>SpendingAmount</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SpendingCurrency</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>SpendingCurrency</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Description</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265918</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>HRPTmpDefaultSigningLimitRule</DataSource>
							</AxFormControl>
						</Controls>
						<LeftMargin>11</LeftMargin>
						<LeftMarginMode>Fixed</LeftMarginMode>
						<TopMargin>11</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>BorderlessGridContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>2013265918</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CloseButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>CloseForm</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>