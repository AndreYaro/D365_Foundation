<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustPaymEntry</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CustPaymEntry extends FormRun implements LedgerILedgerJournalEngineProvider, CustPaymISettlementAmountCallback, CustPaymISearchReference
{
    LedgerJournalName ledgerJournalName;
    LedgerJournalTable callingLedgerJournalTable;
    FormRun callingForm;

    NumberSeqFormHandler voucherNumberSeq;
    LedgerJournalEngine_CustPayment ledgerJournalEngine;
    LedgerJournalFormTrans_Payment journalFormTrans;
    boolean enableLedgerJournalTrans_W;

    TransDate lastTransDate;
    CompanyId lastCompany;

    CompanyId primarySharedCompany;
    container sharedCompanyList;

    CustPaymSettlementManager settlementManager;
    AutoSettle parameterAutoSettle;

    Voucher singleVoucher;

    boolean isPaymChanged;
    RecId prevLedgerJournalTableRecId;

    RecId currentOffsetMainAccountId;

    FormObservableLink markedObservableLink;
    CustOpenTransWithIdRef searchCustOpenTransWithIdRef;

    #define.appendStr(',0')
    #ISOCountryRegionCodes

}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the form as it is closing.
    /// </summary>
    public void close()
    {
        changecompany(ledgerJournalTrans.company())
        {
            journalFormTrans.formClosePre();

            super();

            this.clearPayment();

            this.voucherNumberSeqHandler().formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToFormOffsetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset account type for the CustPaymEntry form corresponding to
    /// the specified offset account type for the LedgerJournalTrans table.
    /// </summary>
    /// <param name="_tableOffsetType">
    /// The offset account type of the table.
    /// </param>
    /// <returns>
    /// The offset account type of the form.
    /// </returns>
    public LedgerJournalACTypeForCustPaym convertToFormOffsetType(LedgerJournalACType _tableOffsetType)
    {
        LedgerJournalACTypeForCustPaym formOffsetType;
        Debug::assert(
            (_tableOffsetType == LedgerJournalACType::Bank)
            || (_tableOffsetType == LedgerJournalACType::Ledger));

        if (_tableOffsetType == LedgerJournalACType::Bank)
        {
            formOffsetType = LedgerJournalACTypeForCustPaym::Bank;
        }
        else
        {
            formOffsetType = LedgerJournalACTypeForCustPaym::Ledger;
        }

        return formOffsetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToTableOffsetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset account type for the LedgerJournalTrans table corresponding
    /// to the specified offset account type for the CustPaymEntry form.
    /// </summary>
    /// <param name="_formOffsetType">
    /// The offset account type of the form.
    /// </param>
    /// <returns>
    /// The offset account type of the table.
    /// </returns>
    public LedgerJournalACType convertToTableOffsetType(LedgerJournalACTypeForCustPaym _formOffsetType)
    {
        LedgerJournalACType tableOffsetType;
        Debug::assert(
            (_formOffsetType == LedgerJournalACTypeForCustPaym::Bank)
            || (_formOffsetType == LedgerJournalACTypeForCustPaym::Ledger));

        if (_formOffsetType == LedgerJournalACTypeForCustPaym::Bank)
        {
            tableOffsetType = LedgerJournalACType::Bank;
        }
        else
        {
            tableOffsetType = LedgerJournalACType::Ledger;
        }

        return tableOffsetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymForCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the payment currently on the form.
    /// </summary>
    /// <remarks>
    /// The payment has just been created.
    /// </remarks>
    public void displayPaymForCreate()
    {
        element.modifyCustAccount(false);
        element.modifyPaymMode(false);
        element.modifyOffsetAccount();
        element.modifyCurrency(false);

        transReferenceId.enabled(true);
        transReferenceId.text('');
        showDocumentButton.enabled(false);
        element.updateConditionalControls();

        ledgerJournalTrans_ds.refresh();

        element.fillGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableCashRegister_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables section with Cash Register information.
    /// If section is enabled, fills it.
    /// </summary>
    public void enableDisableCashRegister_W()
    {
        if (CashRegisterProcessingBase::isEnabledForCurrentUser())
        {
            CashRegisterOperator_W cashRegisterOperator = CashRegisterOperator_W::currentOperator();
            boolean emptyValues = true;
            if (cashRegisterOperator)
            {
                CashRegisterTerminalRecId_W cashRegisterTerminalRecId = cashRegisterOperator.Terminal;
                CashRegisterTerminal_W cashRegisterTerminal = CashRegisterTerminal_W::find(cashRegisterTerminalRecId);

                if (LedgerJournalTrans_W_DS.object(fieldNum(LedgerJournalTrans_W, CashRegisterTerminal)).allowEdit(
                    ledgerJournalEngine.needInitCashRegisterTerminal_W(ledgerJournalTrans)))
                {
                    emptyValues = false;
                    LocationRecId.value(cashRegisterOperator.Location);
                    RegisterRecId.value(cashRegisterTerminal.CashRegister);
                    OperatorRecId.value(cashRegisterOperator.RecId);
                }
            }
            
            if (emptyValues)
            {
                LocationRecId.value(0);
                RegisterRecId.value(0);
                OperatorRecId.value(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the grid containing the open transactions available for settlement.
    /// </summary>
    /// <remarks>
    /// The underlying query is updated and the grid will be empty if there are no
    /// transactions for the customer or the customer is not specified.
    /// </remarks>
    public void fillGrid()
    {
        this.updateGridQueryForMultiCompany();

        custTransOpen_ds.executeQuery();

        element.updateTotalSettleAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedCompanyList</Name>
				<Source><![CDATA[
    private container getSharedCompanyList(CompanyId _company)
    {
        Debug::assert(_company != '');

        if (_company != primarySharedCompany)
        {
            sharedCompanyList = CustVendOpenTransManager::findSharedServiceCompanies(_company);

            primarySharedCompany = _company;
        }

        return sharedCompanyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveSingleVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the single voucher is applicable and present.
    /// </summary>
    /// <returns>
    /// true if the single voucher is applicable and present; otherwise, false.
    /// </returns>
    public boolean haveSingleVoucher()
    {
        if (ledgerJournalName.NewVoucher == NewVoucher::OneVoucher)
        {
            return (singleVoucher != '');
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs one-time form initialization before it opens.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The correct argument was not provided.
    /// </exception>
    public void init()
    {
        if (this.args().dataset() == tableNum(LedgerJournalTable))
        {
            // entry mode pre
            callingLedgerJournalTable = this.args().record();

            this.initForNewJournal();

            journalFormTrans = new LedgerJournalFormTrans_Payment(element);
        }
        else
        {
            throw error(Error::missingRecord(tableStr(LedgerJournalTable)));
        }

        enableLedgerJournalTrans_W = LedgerJournalTrans_W::isLegalEntityInCountryRegion();

        super();

        // the dimAccountController will alway be account type of Customer so only need to set parameters on offset
        OffsetAccount.parmJournalName(callingLedgerJournalTable.JournalName);
        OffsetAccount.parmPostingType(LedgerPostingType::LedgerJournal);
        OffsetAccount.parmValidateBlockedForManualEntry(true);

        LedgerJournalEngine::updateSegmentedEntryForFixedOffsetAccount(OffsetAccount, callingLedgerJournalTable, ledgerJournalTrans);

        this.updateGridQuery();

        journalFormTrans.formInitPost();

        // create this empty to avoid null references
        settlementManager = CustPaymSettlementManager::newForEmpty();

        lastTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        lastCompany = curext();
        parameterAutoSettle = CustParameters::find().AutoSettle;

        callingForm = this.args().caller();

        if (!(callingLedgerJournalTable.OffsetAccountType == LedgerJournalACType::Bank
            || callingLedgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
            && callingLedgerJournalTable.FixedOffsetAccount == NoYes::Yes)
        {
            Box::warning("@SYS342539");
        }

        element.initDefaultGL_Setting();

        markedObservableLink = new FormObservableLink();

        if (CashRegisterProcessingBase::isEnabledForCurrentUser())
        {
            CashRegister_W.visible(true);
        }

        ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, BridgingBankAccount)).visible(FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableBridgingBankAccountFields</Name>
				<Source><![CDATA[
    private void enableBridgingBankAccountFields()
    {
        if (FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()))
        {
            boolean isBridgingAccountByBank = CustVendPaymModeTable::isPaymModeBridgingAccountByBank(ledgerJournalTrans.PaymMode, ModuleCustVend::Cust);
            ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, BridgingBankAccount)).enabled(isBridgingAccountByBank);
            ledgerJournalTrans_ds.object(fieldNum(LedgerJournalTrans, BankDepositVoucher)).enabled(!CustPaymModeTable::find(ledgerJournalTrans.PaymMode).FurtherPosting);
            OffsetAccountType.enabled(!isBridgingAccountByBank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultGL_Setting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default setting for Customer Payment.
    /// </summary>
    /// <remarks>
    /// This method gets the Default Offset Account type from GL setup for Customer Payment and sets the values to Ledger Journal.
    /// </remarks>
    public void initDefaultGL_Setting()
    {
        if (callingLedgerJournalTable.OffsetAccountType == LedgerJournalACType::Bank)
        {
            ledgerJournalTrans.setOffsetLedgerDimension(
                callingLedgerJournalTable,
                callingLedgerJournalTable.OffsetAccountType,
                callingLedgerJournalTable.OffsetLedgerDimension);
        }
        else if (callingLedgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.setOffsetLedgerDimension(
                callingLedgerJournalTable,
                callingLedgerJournalTable.OffsetAccountType,
                ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(
                    callingLedgerJournalTable.OffsetLedgerDimension,
                    ledgerJournalTrans.getOffsetCompany()));
        }
        else
        {
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
        }

        if (callingLedgerJournalTable.FixedOffsetAccount == NoYes::Yes)
        {
            offsetAccountType.allowEdit(false);
            offsetAccount.allowEdit(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization when the LedgerJournalTable record changes.
    /// </summary>
    /// <remarks>
    /// The new record is expected to already be in place when this method is called.
    /// </remarks>
    public void initForNewJournal()
    {
        LedgerJournalTrans custPaym;
        Debug::assert(callingLedgerJournalTable.RecId != prevLedgerJournalTableRecId);

        voucherNumberSeq = null;
        singleVoucher = '';

        if (callingLedgerJournalTable == null)
        {
            ledgerJournalName = null;
        }
        else
        {
            ledgerJournalName = LedgerJournalName::find(callingLedgerJournalTable.JournalName);
        }

        if (this.isSingleVoucherNeeded())
        {
            select firstonly custPaym
            where custPaym.JournalNum == callingLedgerJournalTable.JournalNum;
            if (custPaym != null)
            {
                singleVoucher = custPaym.Voucher;
            }
        }

        // mark everything as up-to-date because it will prevent the LedgerJournalTrans
        // data source's LinkActive method from thinking the parent LedgerJournalTable
        // table has changed when it hasn't
        prevLedgerJournalTableRecId = callingLedgerJournalTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form for a new payment that is ready to be settled against.
    /// </summary>
    /// <remarks>
    /// The payment has to be inserted before it can be settled against.
    /// </remarks>
    public void initForNewPaym()
    {
        // <GIN>
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        #ISOCountryRegionCodes
        // </GIN>

        if (!ledgerJournalTrans
            && ledgerJournalTrans.TransDate != dateNull()
            && ledgerJournalTrans.Company != ''
            && ledgerJournalTrans.parmLedgerDimension())
        {
            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                ledgerJournalTransTaxExtensionIN = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
                ledgerJournalTransTaxExtensionIN.TaxModelDocLineExtensionIN::init(ledgerJournalTrans);
                ledgerJournalTrans.packledgerJournalTransTaxExtensionIN(ledgerJournalTransTaxExtensionIN);
            }
            // </GIN>

            ledgerJournalEngine.initDefaultDimension(ledgerJournalTrans);
            ledgerJournalTrans.insert();

            if (enableLedgerJournalTrans_W)
            {
                LedgerJournalTrans_W.SysExtensionSerializerExtensionMap::insertAfterBaseTable(ledgerJournalTrans);
            }

            if (ledgerJournalTrans.isTaxIntegrationEnabled())
            {
                LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                ledgerJournalTransTaxExtension.LedgerJournalTrans = ledgerJournalTrans.RecId;
                ledgerJournalTransTaxExtension.defaultRow();
                ledgerJournalTransTaxExtension.save(ledgerJournalTrans);
            }
        }

        if (ledgerJournalTrans
            && settlementManager.wasInitializedWithoutCustPayment())
        {
            settlementManager = CustPaymSettlementManager::construct(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewVoucherNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether a new voucher is applicable and needed.
    /// </summary>
    /// <returns>
    /// true if a new voucher is applicable and needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The voucher that is needed may be a regular voucher or a single voucher.
    /// </remarks>
    public boolean isNewVoucherNeeded()
    {
        if (ledgerJournalName.NewVoucher == NewVoucher::OneVoucher)
        {
            return (singleVoucher == '');
        }
        else
        {
            return (ledgerJournalName.NewVoucher == NewVoucher::BalanceSheet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleVoucherNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether a single voucher is applicable and needed.
    /// </summary>
    /// <returns>
    /// true if a single voucher is applicable and needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A single voucher is needed for the first payment in the journal.
    /// </remarks>
    public boolean isSingleVoucherNeeded()
    {
        if (ledgerJournalName.NewVoucher == NewVoucher::OneVoucher)
        {
            return (singleVoucher == '');
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the LedgerJournalEngine class.
    /// </summary>
    /// <returns>
    /// An instance of the LedgerJournalEngine class.
    /// </returns>
    /// <remarks>
    /// This method is required by the LedgerJournalCheck class. The
    /// LedgerJournalEngine_CustPayment class is not used directly, it is used
    /// only to support the LedgerJournalFormTrans_Payment class.
    /// </remarks>
    public LedgerJournalEngine ledgerJournalEngine()
    {
        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes an args object containing the form and datasource objects.
    /// </summary>
    /// <returns>
    /// An args object.
    /// </returns>
    public Args makeArgs()
    {
        Args args;
        args = new Args(formStr(CustPaymEntry));
        args.menuItemName(menuItemDisplayStr(CustPaymEntry));
        args.caller(element);
        args.record(custTransOpen);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyAgreement_RU</Name>
				<Source><![CDATA[
    void modifyAgreement_RU()
    {
        SalesAgreementHeader salesAgreementHeader;
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        AgreementHeaderDefault agreementHeaderDefault;
        SalesAgreementHeaderDefault salesAgreementHeaderDefault;

        if (ledgerJournalTrans.AccountAgreementId_RU)
        {
            ledgerJournalEngine = new LedgerJournalEngine_CustPayment();

            salesAgreementHeaderExt = ledgerJournalEngine.findAgreementHeaderExt_RU(ledgerJournalTrans) as SalesAgreementHeaderExt_RU;

            salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

            agreementHeaderDefault = salesAgreementHeader.agreementHeaderDefault();
            salesAgreementHeaderDefault = salesAgreementHeader.salesAgreementHeaderDefault();

            ledgerJournalEngine.setAgreement_RU(ledgerJournalTrans);

            ledgerJournalTrans.CurrencyCode = salesAgreementHeader.Currency;
            element.modifyCurrency(true);

            if (agreementHeaderDefault.PaymentTerms)
            {
                ledgerJournalTrans.Payment = agreementHeaderDefault.PaymentTerms;
                ledgerJournalEngine.paymentModified(ledgerJournalTrans);
            }

            ledgerJournalTrans.CashDiscCode = agreementHeaderDefault.CashDiscountCode;
            ledgerJournalEngine.cashDiscCodeModified(ledgerJournalTrans);

            if (salesAgreementHeaderDefault.CustomerMethodOfPayment)
            {
                ledgerJournalTrans.PaymMode = salesAgreementHeaderDefault.CustomerMethodOfPayment;
                ledgerJournalTrans.paymModeModified();
                ledgerJournalTrans.setAgreementEmptyValues_RU(AccountOffsetaccount::OffsetAccount);

                element.modifyPaymMode(true);
            }

            if (salesAgreementHeaderDefault.CustomerPaymentSpec)
            {
                ledgerJournalTrans.PaymSpec = salesAgreementHeaderDefault.CustomerPaymentSpec;
            }

            ledgerJournalEngine.initCustPostingProfile(ledgerJournalTrans);
        }
        else
        {
            ledgerJournalTrans.clearAgreementDimension_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parts of the currency that are not a part of the payment
    /// and optionally performs defaulting related to changing the currency.
    /// </summary>
    /// <param name="_performDefaulting">
    /// A Boolean value that indicates whether to perform defaulting related to the corresponding field.
    /// </param>
    /// <remarks>
    /// This method will not result in any messages.
    /// </remarks>
    public void modifyCurrency(boolean _performDefaulting)
    {
        if (ledgerJournalTrans.CurrencyCode != '')
        {
            if (!Currency::exist(ledgerJournalTrans.CurrencyCode))
            {
                Debug::assert(false);

                ledgerJournalTrans.CurrencyCode = '';
            }

            if (_performDefaulting)
            {
                ledgerJournalTrans.initForCurrency(callingLedgerJournalTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parts of the customer that are not a part of the payment and
    /// optionally performs defaulting related to changing the customer.
    /// </summary>
    /// <param name="_performDefaulting">
    /// A Boolean value that indicates whether to perform defaulting related to
    /// the corresponding field.
    /// </param>
    /// <remarks>
    /// This method will not result in any messages.
    /// </remarks>
    public void modifyCustAccount(boolean _performDefaulting)
    {
        CustTable cust;

        if (ledgerJournalTrans.Company == '' || !ledgerJournalTrans.parmLedgerDimension())
        {
            custAccountName.text('');
        }
        else
        {
            cust = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
            if (!cust)
            {
                Debug::assert(false);

                ledgerJournalTrans.parmLedgerDimension(0);
            }
            else if (_performDefaulting)
            {
                ledgerJournalTrans.initFromCustTable(cust);

                // these may have changed
                this.modifyPaymMode(false);
                this.modifyOffsetAccount();
                this.modifyCurrency(true);

                //Set the Default setting from GL if the Fixed Offset Account is set
                if (callingLedgerJournalTable.FixedOffsetAccount == NoYes::Yes)
                {
                    element.initDefaultGL_Setting();
                }
            }

            custAccountName.text(cust.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parts of the offset account that are not a part of the payment.
    /// </summary>
    /// <remarks>
    /// This method will not result in any messages.
    /// </remarks>
    public void modifyOffsetAccount()
    {
        LedgerAccount ledgerAccount;
        MainAccount mainAccount;
        BankAccountTable bankAccount;

        if (!ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            offsetAccountName.text('');
        }
        else
        {
            switch (ledgerJournalTrans.OffsetAccountType)
            {
                case LedgerJournalACType::Ledger:
                    changecompany(ledgerJournalTrans.getOffsetCompany())
                    {
                        ledgerAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
                        mainAccount = MainAccount::findByMainAccountId(ledgerAccount);
                    }
                    if (!mainAccount)
                    {
                        Debug::assert(false);
                        ledgerJournalTrans.parmOffsetLedgerDimension(0);
                    }
                    offsetAccountName.text(mainAccount.localizedName());
                    break;

                case LedgerJournalACType::Bank:
                    bankAccount = BankAccountTable::findByCompany(
                        ledgerJournalTrans.getOffsetCompany(),
                        ledgerJournalTrans.parmOffsetAccount());

                    if (!bankAccount)
                    {
                        Debug::assert(false);

                        ledgerJournalTrans.parmOffsetLedgerDimension(0);
                    }

                    offsetAccountName.text(bankAccount.Name);
                    break;

                default:
                    Debug::assert(false);
                    break;
            }
        }

        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            // Rereading the reference datasources to ensure that all controls, like CustAccount, get updated with the known data.
            ledgerJournalTrans_DS.rereadReferenceDataSources();
        }

        ledgerJournalEngine.initCustPostingProfile(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the parts of the payment method that are not a part of the
    /// payment and optionally performs defaulting related to changing the
    /// payment method.
    /// </summary>
    /// <param name="_performDefaulting">
    /// A Boolean value that indicates whether to perform defaulting related to the corresponding field.
    /// </param>
    /// <remarks>
    /// This method will not result in any messages.
    /// </remarks>
    public void modifyPaymMode(boolean _performDefaulting)
    {
        CustPaymModeTable paymMode;
        if (ledgerJournalTrans.PaymMode == '')
        {
            paymModeName.text('');
        }
        else
        {
            paymMode = CustPaymModeTable::find(ledgerJournalTrans.PaymMode);
            if (!paymMode)
            {
                Debug::assert(false);

                ledgerJournalTrans.PaymMode = '';
            }
            else if (_performDefaulting)
            {
                ledgerJournalTrans.initFromCustPaymModeTable(paymMode);

                // this may have changed
                this.modifyOffsetAccount();
            }

            paymModeName.text(paymMode.Name);
        }

        this.enableBridgingBankAccountFields();

        ledgerJournalEngine.initPaymentOrderBudgetTrans_RU(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the settlement grid when the information displayed could change.
    /// </summary>
    /// <remarks>
    /// The underlying query is not changed.
    /// </remarks>
    public void refreshGrid()
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            custTransOpen_ds.refresh();

            element.updateTotalSettleAmountCur();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        transReferenceId.enabled(true);

        // initialize the first record
        ledgerJournalTrans_ds.create();

        //Enable/Disable the Mark Transaction Button
        element.updateMarkTransactionsButton();

        element.enablePaymCompanyAndCustAccount(true);

        this.hideSaveAndRestoreButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConditionalControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state of the controls that are conditionally available.
    /// </summary>
    public void updateConditionalControls()
    {
        transReferenceId.allowEdit(this.canAllowEditTransReferenceId());

        transReferenceId.enabled(this.canEnableTransReferenceId());

        saveButton.enabled(this.canEnableSaveButton());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAllowEditTransReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>TransReferenceId</c> field on the form can be edited.
    /// </summary>
    /// <returns>
    /// true if <c>Company</c> or <c>LedgerDimension</c> field on the <c>LedgerJournalTrans</c> table buffer is not set; otherwise, false.
    /// </returns>
    protected boolean canAllowEditTransReferenceId()
    {
        return ledgerJournalTrans.Company == '' || !ledgerJournalTrans.parmLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableTransReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>TransReferenceId</c> field on the form can be enabled.
    /// </summary>
    /// <returns>
    /// true if <c>Company</c> or <c>LedgerDimension</c> field on the <c>LedgerJournalTrans</c> table buffer is not set or the <c>TransReferenceID</c> control on the form is empty; otherwise, false.
    /// </returns>
    protected boolean canEnableTransReferenceId()
    {
        return transReferenceId.valueStr() != ''
                || ledgerJournalTrans.Company == ''
                || !ledgerJournalTrans.parmLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableSaveButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>SaveButton</c> control on the form can be enabled. 
    /// </summary>
    /// <returns>
    /// true if <c>TransDate</c>, <c>Company</c> or <c>LedgerDimension</c> field on the <c>LedgerJournalTrans</c> table buffer is not set; otherwise, false.
    /// </returns>
    protected boolean canEnableSaveButton()
    {
       return ledgerJournalTrans.TransDate != dateNull() 
           && ledgerJournalTrans.Company != '' 
           && ledgerJournalTrans.parmLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignDynamics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the controls for allowing editing behavior.
    /// </summary>
    /// <param name="_allowEdit">
    /// A boolean value for enabling or disable the controls.
    /// </param>
    public void updateDesignDynamics(boolean _allowEdit)
    {
        crossRate.allowEdit(_allowEdit);
        settleAmountCur.allowEdit(_allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query for the parts that do not vary for the life of the form.
    /// </summary>
    public void updateGridQuery()
    {
        Query q;
        QueryBuildDataSource dataSource;
        q = custTransOpen_ds.query();

        dataSource = q.dataSourceTable(tableNum(CustTransOpen));
        dataSource.addOrderByField(fieldNum(CustTransOpen, DueDate));
        dataSource.addOrderByField(fieldNum(CustTransOpen, DataAreaId));

        dataSource = q.dataSourceTable(tableNum(CustTrans));
        dataSource.addOrderByField(fieldNum(CustTrans, Voucher));

        // The following fields are automatically generated by the CustTransIdRef index
        // and placed first in the Order By clause for the grid.
        // We explicitly specify the field positions here to enforce sort order.
        dataSource = q.dataSourceTable(tableNum(CustTransIdRef));
        dataSource.addOrderByField(fieldNum(CustTransIdRef, Partition));
        dataSource.addOrderByField(fieldNum(CustTransIdRef, DataAreaId));
        dataSource.addOrderByField(fieldNum(CustTransIdRef, TransRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridQueryForAgreement_RU</Name>
				<Source><![CDATA[
    public void updateGridQueryForAgreement_RU()
    {
        Query query;
        QueryBuildDataSource transDataSource;
        RecId dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (dimAttrRecId)
        {
            query               = custTransOpen_ds.query();
            transDataSource     = query.dataSourceTable(tableNum(CustTrans));

            SysQuery::addDimensionAttributeRange(query,
                transDataSource.name(),
                fieldStr(CustTrans, DefaultDimension),
                DimensionComponent::DimensionAttribute,
                ledgerJournalTrans.AccountAgreementId_RU ? ledgerJournalTrans.AccountAgreementId_RU : SysQuery::valueUnlimited(),
                DimensionAttribute::find(dimAttrRecId).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridQueryForMultiCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query for the parts that change with the displayed payment.
    /// </summary>
    public void updateGridQueryForMultiCompany()
    {
        Query q;
        QueryBuildDataSource custDataSource;
        QueryBuildDataSource transDataSource;
        QueryBuildDataSource transOpenDataSource;
        CompanyId company;
        container companyList;
        int i;

        QueryBuildDataSource custTransDataSource;

        q = custTransOpen_ds.query();

        transOpenDataSource = q.dataSourceTable(tableNum(CustTransOpen));

        // Clear these because having the LedgerJournalTrans as an arg adds extra stuff to the query
        transOpenDataSource.clearDynalinks();

        custTransDataSource = q.dataSourceTable(tableNum(CustTrans));

        QueryBuildRange billOfExchangeStatusRange = SysQuery::findOrCreateRange(custTransDataSource, fieldNum(CustTrans, BillOfExchangeStatus));
        billOfExchangeStatusRange.value(queryValue(CustVendNegInstStatus::None));
        billOfExchangeStatusRange.status(RangeStatus::Hidden);

        if (ledgerJournalTrans.Company != ''
            && ledgerJournalTrans.parmLedgerDimension()
            && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            // Include multi-company records
            q.clearCompanyRange();

            companyList = this.getSharedCompanyList(ledgerJournalTrans.Company);
            for (i = 1; i <= conLen(companyList); i++)
            {
                company = conPeek(companyList, i);

                q.addCompanyRange(company);
            }
        }
            // Clear this in case it was set below
        transOpenDataSource.clearRange(fieldNum(CustTransOpen, AccountNum));

        custDataSource = q.dataSourceTable(tableNum(CustTable));
        if (custDataSource == null)
        {
            transDataSource = q.dataSourceTable(tableNum(CustTrans));

            custDataSource = transDataSource.addDataSource(tableNum(CustTable));

            custDataSource.addSelectionField(fieldNum(CustTable, Party));

            // Make these joins 1:1 because there are 2 tables (CustTable,
            // CustTransIfRef) at the same level. See also bug 34601.
            custDataSource.fetchMode(QueryFetchMode::One2One);
            q.dataSourceTable(tableNum(CustTransIdRef)).fetchMode(QueryFetchMode::One2One);
        }

        // The party ID range is required for multi-company support
        if (CustPaymEntryPerfImproveFlight::instance().isEnabled())
        {
            container rangeCon;
            QueryBuildRange transOpenRange = transOpenDataSource.addRange(fieldNum(CustTransOpen, AccountNum));
            if (conLen(companyList) == 0)
            {
                companyList = [curExt()];
            }

            for (i = 1; i <= conLen(companyList); i++)
            {
                company = conPeek(companyList, i);
                changecompany(company)
                {
                    rangeCon = this.updateContainerRange(rangeCon, this.generateAccountNumRange(ledgerJournalTrans.findCustTable().Party));
                }
            }
            transOpenRange.value(con2str(rangeCon));
        }

        QueryBuildRange range = custDataSource.findRange(fieldNum(CustTable, Party));
        if (range == null)
        {
            range = custDataSource.addRange(fieldNum(CustTable, Party));
        }
        range.value(SysQuery::value(ledgerJournalTrans.findCustTable().Party));

        custDataSource.relations(true);
        custDataSource.joinMode(JoinMode::InnerJoin);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            element.updateGridQueryForAgreement_RU();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccountNumRange</Name>
				<Source><![CDATA[
    private str generateAccountNumRange(DirPartyRecId _partyId)
    {
        CustTable custTable = CustTable::findByPartyRecId(_partyId);
        if (custTable)
        {
            return SysQuery::value(custTable.AccountNum);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerRange</Name>
				<Source><![CDATA[
    private container updateContainerRange(container _rangeCon, str _generatedRange)
    {
        if (_generatedRange != '')
        {
            _rangeCon += _generatedRange;
        }
        return _rangeCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterestAndFine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates interest and fine values according to the payment date
    /// </summary>
    public void updateInterestAndFine_BR()
    {
        Query           query;
        QueryRun        queryRun;
        CustTransOpen   custTransOpenToBeUpdated;
        AmountCur       discAmountToTake;

        query   = CustTransOpen_ds.query();

        queryRun = new QueryRun(query);

        boolean isFineInterestCalculated;
        while (queryRun.next())
        {
            custTransOpenToBeUpdated    = queryRun.get(tableNum(CustTransOpen));
            discAmountToTake            = settlementManager.calcCashDiscAmountToTake(custTransOpenToBeUpdated);

            settlementManager.updateInterestAndFine_BR(custTransOpenToBeUpdated.company(), custTransOpenToBeUpdated, ledgerJournalTrans.TransDate, custTransOpenToBeUpdated.AmountCur, discAmountToTake);
            if (!isFineInterestCalculated && (custTransOpenToBeUpdated.FineAmount_BR || custTransOpenToBeUpdated.InterestAmount_BR))
            {
                isFineInterestCalculated = true;
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00066, funcName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkTransactionsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables the <c>MarkTransactionsButton</c> based on some particular selections on the form.
    /// </summary>
    public void updateMarkTransactionsButton()
    {
        if (CustParameters::findByCompany(curext()).UseSettlementPriority)
        {
            markTransactionsButton.visible(true);

            // Enable or disable the 'Mark Transactions' Button based on the
            if (ledgerJournalTrans.displayCustPaymAmount() > 0 && ledgerJournalTrans.parmLedgerDimension())
            {
                markTransactionsButton.enabled(true);
            }
            else
            {
                markTransactionsButton.enabled(false);
            }
        }
        else
        {
            markTransactionsButton.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRemainingPaymAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount of the payment that is not settled.
    /// </summary>
    /// <remarks>
    /// The controls that are based on this value are also updated.
    /// </remarks>
    public void updateRemainingPaymAmountCur()
    {
        AmountCur remainingAmount;
        remainingAmount = ledgerJournalTrans.displayCustPaymAmount() - settlementManager.getMarkedTotal();

        remainingPaymAmountCur.realValue(remainingAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total amount of the pending settlements for the payment.
    /// </summary>
    /// <remarks>
    /// The controls that are based on this value are also updated.
    /// </remarks>
    public void updateTotalSettleAmountCur()
    {
        totalSettlePaymAmountCur.realValue(settlementManager.getMarkedTotal());

        this.updateRemainingPaymAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherNumberSeqHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the NumberSeqFormHandler class.
    /// </summary>
    /// <returns>
    /// An instance of the NumberSeqFormHandler class.
    /// </returns>
    /// <remarks>
    /// The instance is initialized on-demand.
    /// </remarks>
    public NumberSeqFormHandler voucherNumberSeqHandler()
    {
        LedgerJournalName journalName;
        if (voucherNumberSeq == null)
        {
            journalName = LedgerJournalName::find(callingLedgerJournalTable.JournalName);
            Debug::assert(journalName.RecId != 0);

            // can't use construct because it requires LedgerJournalEngine which isn't used here
            voucherNumberSeq = new NumberSeqFormHandler();

            if (journalName.VoucherAllocatedAtPosting)
            {
                voucherNumberSeq.parmNumberSequenceId(LedgerParameters::numRefLedgerTempVoucher().numberSequenceTable().RecId);
            }
            else
            {
                voucherNumberSeq.parmNumberSequenceId(journalName.NumberSequenceTable);
            }
            voucherNumberSeq.parmFormDataSource(ledgerJournalTrans_ds);
            voucherNumberSeq.parmFieldIdNum(fieldNum(LedgerJournalTrans, Voucher));
            voucherNumberSeq.parmDontThrowOnMissingRefSetUp(false);
        }

        return voucherNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymCompanyAndCustAccount</Name>
				<Source><![CDATA[
    private void enablePaymCompanyAndCustAccount(boolean _enable)
    {
        PaymCompany.allowEdit(_enable);
        CustAccount.allowEdit(_enable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideSaveAndRestoreButtons</Name>
				<Source><![CDATA[
    private void hideSaveAndRestoreButtons()
    {
        #SysSystemDefinedButtons

        FormCommandButtonControl saveCommandButton = this.control(this.controlId(#SystemDefinedSaveButton)) as FormCommandButtonControl;
        if (saveCommandButton)
        {
            saveCommandButton.visible(false);
        }

        FormCommandButtonControl restoreCommandButton = this.control(this.controlId(#SystemDefinedRestoreButton)) as FormCommandButtonControl;
        if (restoreCommandButton)
        {
            restoreCommandButton.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForNewSettlementAmount</Name>
				<Source><![CDATA[
    public void updateForNewSettlementAmount(AmountCur _totalSettledAmount)
    {
        CustTransOpen_DS.research(true);
        this.updateTotalSettleAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPayment</Name>
				<Source><![CDATA[
    private void clearPayment()
    {
        changecompany(ledgerJournalTrans.company())
        {
            ledgerJournalTrans_ds.delete();

            ledgerJournalTrans_ds.create();

            element.updateMarkTransactionsButton();
        }

        element.enablePaymCompanyAndCustAccount(true);

        searchCustOpenTransWithIdRef = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #task

        int ret = 0;

        switch (_taskId)
        {
            case #taskDeleteRecord:
                this.clearPayment();
                break;

            case #taskNew:
                if (saveButton.enabled())
                {
                    saveButton.clicked();
                }
                break;

            default:
                ret = super(_taskId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custOpenTransUsedInSearchByTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the CustOpenTrans reference record used in searching by transaction.
    /// </summary>
    /// <param name = "_custOpenTransWithIdRef">Reference to an open customer transaction.</param>
    /// <returns>The reference record of the open customer transaction.</returns>
    public CustOpenTransWithIdRef custOpenTransUsedInSearchByTransaction(CustOpenTransWithIdRef _custOpenTransWithIdRef = searchCustOpenTransWithIdRef)
    {
        searchCustOpenTransWithIdRef = _custOpenTransWithIdRef;
        return searchCustOpenTransWithIdRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the payment using the specified open transaction.
    /// </summary>
    /// <param name="_transOpen">
    /// The open customer transaction to use in the initialization.
    /// </param>
    /// <param name="_trans">
    /// The customer transaction corresponding to the open customer transation.
    /// </param>
    /// <remarks>
    /// The open transaction is used to create a matching payment.
    /// </remarks>
    public void initFromCustTransOpen(CustTransOpen _transOpen, CustTrans _trans)
    {
        CustTransCashDisc cashDisc;
        boolean wasItMarked;

        Debug::assert(_transOpen.RecId != 0);

        if (ledgerJournalTrans.parmLedgerDimension())
        {
            // no-op because the form may run this multiple times
            return;
        }

        // default the fields of the payment
        ledgerJournalTrans.Company = _transOpen.company();
        ledgerJournalTrans.parmAccount(_transOpen.AccountNum);

        // perform form defaulting
        element.initForNewPaym();
        element.modifyCustAccount(true);

        if (Currency::exist(_trans.CurrencyCode))
        {
            // do this after the cust defaulting so it isn't overrwritten
            ledgerJournalTrans.CurrencyCode = _trans.CurrencyCode;

            element.modifyCurrency(true);
        }

        changecompany(_transOpen.company())
        {
            cashDisc = CustTransCashDisc::findByUseCashDisc(
                    tableNum(CustTransOpen),
                    _transOpen.RecId,
                    _transOpen.UseCashDisc,
                    ledgerJournalTrans.TransDate,
                    CustPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode));
        }

        element.enablePaymCompanyAndCustAccount(false);

        settlementManager.setPaym(ledgerJournalTrans);

        wasItMarked = settlementManager.markTrans(ledgerJournalTrans, _transOpen, _trans, false, true);

        // display the payment
        ledgerJournalTrans_ds.refresh();
        element.updateConditionalControls();
        element.fillGrid();

        isPaymChanged = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangesForEmptyAccountNumber</Name>
				<Source><![CDATA[
    private void setQueryRangesForEmptyAccountNumber()
    {
        Query formQuery = CustTransOpen_ds.query();

        // Include records from a single company in this way because
        // the query's cross company option can't be changed at runtime
        formQuery.clearCompanyRange();
        formQuery.addCompanyRange(curext());

        QueryBuildRange accountNumberRange = SysQuery::findOrCreateRange(CustTransOpen_DS.queryBuildDataSource(), fieldNum(CustTransOpen, AccountNum));
        accountNumberRange.value(SysQuery::valueEmptyString());

        QueryBuildDataSource custDataSource = formQuery.dataSourceTable(tableNum(CustTable));

        if (custDataSource)
        {
            // Clear this in case it was set previously
            custDataSource.clearRange(fieldNum(CustTable, Party));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current transaction allows settlement.
    /// </summary>
    /// <param name = "_custTransOpen">The current record of <c>CustTransOpen</c>.</param>
    /// <returns>true if the open transaction allows settlement; otherwise false.</returns>
    protected boolean allowSettlement(CustTransOpen _custTransOpen)
    {
        //This method is used for extensibility.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransMarkedThatDoesNotAllowSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the current transaction marked for settlement when the current transaction does not allow settlement. 
    /// </summary>
    /// <param name = "_custTransOpen">The current instance of <c>CustTransOpen</c>.</param>
    /// <returns>true when the open transaction is marked for settlement; otherwise false.</returns>
    protected boolean isTransMarkedThatDoesNotAllowSettlement(CustTransOpen _custTransOpen)
    {
        //This method is used for extensibility.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should initialize the default dimension. 
    /// </summary>
    /// <param name = "_isExisting">Identifies if the current <c>LedgerJournalTrans</c> record is new or existing.</param>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_ledgerJournalTransOrig">The original values of current <c>LedgerJournalTrans</c> record.</param>
    /// <returns>true when the default dimension should be initalized; otherwise false.</returns>
    protected boolean shouldInitDefaultDimension(boolean _isExisting, LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans _ledgerJournalTransOrig)
    {
        boolean ret;

        if (!_isExisting
            || _ledgerJournalTransOrig.Company != _ledgerJournalTrans.Company
            || _ledgerJournalTransOrig.parmLedgerDimension() != _ledgerJournalTrans.parmLedgerDimension()
            || _ledgerJournalTransOrig.AccountType != _ledgerJournalTrans.AccountType)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitOffsetDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should initialize the offset default dimension.
    /// </summary>
    /// <param name = "_isExisting">Identifies if the current <c>LedgerJournalTrans</c> record is new or existing.</param>
    /// <param name = "_ledgerJournalTrans">The current <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_ledgerJournalTransOrig">The original values of current <c>LedgerJournalTrans</c> record.</param>
    /// <returns>true when the offset default dimension should be initalized; otherwise false.</returns>
    protected boolean shouldInitOffsetDefaultDimension(boolean _isExisting, LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans _ledgerJournalTransOrig)
    {
        boolean ret;
    
        if (!_isExisting
            || _ledgerJournalTransOrig.getOffsetCompany() != _ledgerJournalTrans.getOffsetCompany()
            || _ledgerJournalTransOrig.parmOffsetLedgerDimension() != _ledgerJournalTrans.parmOffsetLedgerDimension()
            || _ledgerJournalTransOrig.OffsetAccountType != _ledgerJournalTrans.OffsetAccountType
            || _ledgerJournalTrans.OffsetDefaultDimension == 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustTrans</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            QueryBuildRange rangeApprovedOnly = this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans, Approved));
            rangeApprovedOnly.value(queryValue(NoYes::Yes));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LedgerJournalTrans</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            return;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the data source of the LedgerJournalTrans table.
        /// </summary>
        public void init()
        {
            super();

            // this call is dependent on the LedgerJournalEngine_CustPayment class
            journalFormTrans.datasourceInitPost(ledgerJournalTrans);

            // The LedgerJournalEngine_CustPayment class indirectly supports
            // the LedgerJournalFormTrans_Payment class in the case where the
            // LedgerJournalTable table is restricted to single user access.
            ledgerJournalEngine = new LedgerJournalEngine_CustPayment(element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the payment can be deleted from the database.
        /// </summary>
        /// <returns>
        /// true if the payment can be deleted; otherwise, false.
        /// </returns>
        public boolean validateDelete()
        {
            boolean isValid;
            // do not call super because it results in a confirmation dialog,
            // invoke the corresponding table method directly instead
            isValid = ledgerJournalTrans.validateDelete();

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the payment with the values that do not vary.
        /// </summary>
        /// <remarks>
        /// The payment is not considered changed at this point.
        /// </remarks>
        public void initValue()
        {
            boolean                  isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
            LedgerVoucherTypeRule_CN ledgerVoucherTypeRule;
            LedgerVoucherType_CN     ledgerVoucherType;

            super();

            ledgerJournalTrans.TransactionType = LedgerTransType::Payment;

            ledgerJournalTrans.Company = lastCompany;
            ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;

            //Set the default value selected in GL>Setup>Journals>JournalNames
            element.initDefaultGL_Setting();

            ledgerJournalTrans.JournalNum = callingLedgerJournalTable.JournalNum;

            ledgerJournalTrans.TransDate = lastTransDate;

            ledgerJournalTrans.Approved = NoYes::Yes;
            ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());

            if (element.haveSingleVoucher())
            {
                ledgerJournalTrans.Voucher = singleVoucher;
            }

            if (isChineseVoucher && !ledgerJournalTrans.LedgerVoucherType_CN)
            {
                ledgerVoucherTypeRule = LedgerVoucherTypeRule_CN::newFromVoucher(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher);
               
                if (ledgerVoucherTypeRule)
               
                {
                    ledgerVoucherType = ledgerVoucherTypeRule.getVoucherType();
                    if (ledgerVoucherType.RecId != 0)
                    {
                        ledgerJournalTrans.LedgerVoucherType_CN = ledgerVoucherType.RecId;
                        ledgerJournalTrans.Voucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(ledgerVoucherType.NumberSequenceTable, ledgerJournalTrans.TransDate, true).voucher();
                    }
                }
            }

            isPaymChanged = false;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editPaymAmountCur</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the amount of the payment.
        /// </summary>
        /// <param name="_set">
        /// true if the amount of the payment is set; otherwise, false.
        /// </param>
        /// <param name="_paymAmountCur">
        /// The new amount of the payment when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The amount of the payment.
        /// </returns>
        public edit AmountCurDebit editPaymAmountCur(boolean _set, AmountCurDebit _paymAmountCur)
        {
            AmountCur paymAmount;
            if (_set)
            {
                ledgerJournalTrans.convertCustPaymAmountCurToDebitCredit(_paymAmountCur);

                settlementManager.setPaym(ledgerJournalTrans);

                element.updateTotalSettleAmountCur();

                isPaymChanged = true;

                element.updateMarkTransactionsButton();
            }

            paymAmount = ledgerJournalTrans.displayCustPaymAmount();

            return paymAmount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editOffsetAccountType</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the offset account type.
        /// </summary>
        /// <param name="_set">
        /// true if the offset account type is set; otherwise, false.
        /// </param>
        /// <param name="_formAccountType">
        /// The new offset account type when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The offset account type.
        /// </returns>
        public edit LedgerJournalACTypeForCustPaym editOffsetAccountType(boolean _set, LedgerJournalACTypeForCustPaym _formAccountType)
        {
            LedgerJournalACTypeForCustPaym formAccountType;
            if (_set)
            {
                ledgerJournalTrans.OffsetAccountType = element.convertToTableOffsetType(_formAccountType);

                // manually invoke because of the edit method
                ledgerJournalTrans.modifiedField(fieldNum(LedgerJournalTrans, OffsetAccountType));

                element.modifyOffsetAccount();

                isPaymChanged = true;
            }

            formAccountType = element.convertToFormOffsetType(ledgerJournalTrans.OffsetAccountType);

            return formAccountType;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            // we are switching to a different LedgerJournalTable record
            if (callingLedgerJournalTable.RecId != prevLedgerJournalTableRecId)
            {
                // the LedgerJournalTable record switch is valid because the calling record was updated

                element.voucherNumberSeqHandler().formMethodDataSourceLinkActive();

                // update the journal form manager
                journalFormTrans.datasourceLinkActivePre();

                // update the form
                element.initForNewJournal();

                // Clear the current payment and create a new payment
                element.clearPayment();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Deletes the payment.
        /// </summary>
        public void delete()
        {
            super();

            if (element.isNewVoucherNeeded())
            {
                // the voucher on the table buffer may need to be handled
                element.voucherNumberSeqHandler().formMethodDataSourceDelete();
            }

            settlementManager.deleteAll();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Writes the payment to the database.
        /// </summary>
        /// <remarks>
        /// The insert is not done by the user because settling requires the record ID
        /// to be set.
        /// </remarks>
        public void write()
        {
            boolean isExisting;
            LedgerJournalTrans ledgerJournalTransOrig;

            ttsbegin;

            isExisting = (ledgerJournalTrans.RecId != 0);

            if (isExisting)
            {
                ledgerJournalTransOrig.data(ledgerJournalTrans.orig());

                if (settlementManager.isPaymSettled())
                {
                    ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                }
                else
                {
                    if (parameterAutoSettle)
                    {
                        ledgerJournalTrans.SettleVoucher = SettlementType::OpenTransact;
                    }
                    else
                    {
                        ledgerJournalTrans.SettleVoucher = SettlementType::None;
                    }
                }
            }

            if (element.shouldInitDefaultDimension(isExisting, ledgerJournalTrans, ledgerJournalTransOrig))
            {
                ledgerJournalEngine.initDefaultDimension(ledgerJournalTrans);
            }

            if (element.shouldInitOffsetDefaultDimension(isExisting, ledgerJournalTrans, ledgerJournalTransOrig))
            {
                ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans);
            }

            ledgerJournalEngine.updateCustBankAccountIdFromDebitMandateId(ledgerJournalTrans);

            super();

            if (element.isSingleVoucherNeeded())
            {
                singleVoucher = ledgerJournalTrans.Voucher;
            }

            element.voucherNumberSeqHandler().formMethodDataSourceWrite();

            if (enableLedgerJournalTrans_W)
            {
                LedgerJournalTrans_W.SysExtensionSerializerExtensionMap::insertAfterBaseTable(ledgerJournalTrans);
            }

            ttscommit;

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                LedgerJournalTransPayment_BR.data(LedgerJournalTrans.getPaymentExtension_BR());
            }
            // </GBR>

            if (isExisting)
            {
                // only update these for the user save
                lastTransDate = ledgerJournalTrans.TransDate;
                lastCompany = ledgerJournalTrans.Company;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the payment can be saved to the database.
        /// </summary>
        /// <returns>
        /// true if the payment can be saved; otherwise, false.
        /// </returns>
        /// <remarks>
        /// The save button is disabled until these conditions are met.
        /// </remarks>
        public boolean validateWrite()
        {
            boolean isValid;
            isValid = super();

            if (!element.voucherNumberSeqHandler().formMethodDataSourceValidateWrite())
            {
                isValid = false;
            }

            if (isValid && ledgerJournalTrans.TransDate == dateNull())
            {
                isValid = checkFailed("@SYS114582");
            }

            if (isValid && ledgerJournalTrans.Company == '')
            {
                isValid = checkFailed("@SYS115146");
            }

            if (isValid && ledgerJournalTrans.CurrencyCode == '')
            {
                isValid = checkFailed("@SYS114584");
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates and initializes a new payment.
        /// </summary>
        /// <param name="_append">
        /// true for append; otherwise, false.
        /// </param>
        public void create(boolean _append = false)
        {
            element.voucherNumberSeqHandler().formMethodDataSourceCreatePre();

            super(_append);

            if (element.isNewVoucherNeeded())
            {
                // a voucher is needed on the table buffer
                element.voucherNumberSeqHandler().formMethodDataSourceCreate();
            }

            settlementManager = CustPaymSettlementManager::newForEmpty();

            element.displayPaymForCreate();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            OffsetAccount.parmCurrency(ledgerJournalTrans.CurrencyCode);
            OffsetAccount.parmDataAreaId(ledgerJournalTrans.getOffsetCompany());
            OffsetAccount.parmControlDate(ledgerJournalTrans.TransDate);

            LedgerJournalEngine::updateSegmentedEntryForFixedOffsetAccount(OffsetAccount, callingLedgerJournalTable, ledgerJournalTrans);
            
            element.enableDisableCashRegister_W();
            element.enableBridgingBankAccountFields();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AccountAgreementId_RU</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                LedgerJournalEngine.agreementLookup_RU(_formControl, LedgerJournalTrans, _filterStr);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ledgerJournalEngine.initCustPostingProfile(ledgerJournalTrans);

                settlementManager.deleteAll();

                element.modifyAgreement_RU();

                settlementManager.setPaym(ledgerJournalTrans);

                element.fillGrid();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            public void jumpRef()
            {
                ledgerJournalEngine.agreementJumpRef_RU(ledgerJournalTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>BankDepositVoucher</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.modifyOffsetAccount();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Company</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean isValid;

                // These have to be cleared here or a validation message will result
                ledgerJournalTrans.parmLedgerDimension(0);
                ledgerJournalTrans.PaymMode = '';

                isValid = super();

                return isValid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Clean up after the old account
                settlementManager.deleteAll();

                // Handle the new (blank) account
                element.modifyCustAccount(false);
                element.modifyPaymMode(false);
                element.modifyOffsetAccount();
                CustAccount.setDataAreaId(ledgerJournalTrans.Company, true);

                element.updateConditionalControls();
                element.fillGrid();

                isPaymChanged = true;

                element.updateMarkTransactionsButton();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CurrencyCode</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean isValid;
                isValid = super();

                if (isValid && (ledgerJournalTrans.CurrencyCode != ''))
                {
                    if (!Currency::exist(ledgerJournalTrans.CurrencyCode))
                    {
                        isValid = checkFailed(strFmt("@SYS117888", ledgerJournalTrans.CurrencyCode));
                    }
                }

                return isValid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                OffsetAccount.parmCurrency(ledgerJournalTrans.CurrencyCode);

                element.modifyCurrency(true);

                settlementManager.setPaym(ledgerJournalTrans);

                element.refreshGrid();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>dataAreaId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                OffsetAccount.parmDataAreaId(ledgerJournalTrans.getOffsetCompany());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>LedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // clean up after the old account
                settlementManager.deleteAll();

                // handle the new account
                element.initForNewPaym();
                element.modifyCustAccount(true);

                settlementManager.setPaym(ledgerJournalTrans);

                element.updateConditionalControls();
                element.fillGrid();

                ledgerJournalEngine.accountModified(ledgerJournalTrans);

                isPaymChanged = true;

                element.updateMarkTransactionsButton();

                element.enableDisableCashRegister_W();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetAccountType</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                LedgerJournalEngine::updateSegmentedEntryForFixedOffsetAccount(OffsetAccount, callingLedgerJournalTable, ledgerJournalTrans);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>OffsetLedgerDimension</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.modifyOffsetAccount();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PaymMode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                ledgerJournalEngine.paymModeModified(ledgerJournalTrans);

                super();

                element.modifyPaymMode(true);

                settlementManager.setPaym(ledgerJournalTrans);

                ledgerJournalTrans_ds.refresh();

                element.refreshGrid();

                isPaymChanged = true;

                element.enableDisableCashRegister_W();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TransDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                OffsetAccount.parmControlDate(ledgerJournalTrans.TransDate);

                element.modifyCurrency(true);

                settlementManager.setPaym(ledgerJournalTrans);

                element.updateConditionalControls();

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    CustTransOpen_ds.executeQuery();
                }
                // </GBR>

                element.refreshGrid();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Txt</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                isPaymChanged = true;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CustTransOpen</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            // If no customer is selected, disable the Grid.
            if (!ledgerJournalTrans.LedgerDimension)
            {
                element.setQueryRangesForEmptyAccountNumber();
                SelectToPay_Grid.enabled(false);
            }
            else
            {
                SelectToPay_Grid.enabled(true);

                if (BrazilParameters::isEnabled())
                {
                    element.updateInterestAndFine_BR();
                }
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>editInterestAmount_BR</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the Interest amount.
        /// </summary>
        /// <param name="_set">
        /// true if the discount amount is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_finInterestAmount">
        /// The new Interest amount when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The Interest amount.
        /// </returns>
        public edit FinInterestAmount_BR editInterestAmount_BR(
            boolean _set,
            CustTransOpen _custTransOpen,
            AmountCur _finInterestAmount)
        {
            if (_set)
            {
                settlementManager.updateFinInterestAmountPaymCur_BR(_custTransOpen.company(), _custTransOpen, _finInterestAmount);
                element.updateTotalSettleAmountCur();
            }

            return _custTransOpen.InterestAmount_BR;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editFineAmount_BR</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the Fine amount.
        /// </summary>
        /// <param name="_set">
        /// true if the discount amount is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_fineAmount">
        /// The new Interest amount when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The Fine amount.
        /// </returns>
        public edit FineAmount_BR editFineAmount_BR(
            boolean  _set,
            CustTransOpen _custTransOpen,
            AmountCur _fineAmount)
        {
            if (_set)
            {
                settlementManager.updateFineAmountPaymCur_BR(_custTransOpen.company(), _custTransOpen, _fineAmount);
                element.updateTotalSettleAmountCur();
            }

            return _custTransOpen.FineAmount_BR;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editDiscAmountCur</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the discount amount.
        /// </summary>
        /// <param name="_set">
        /// true if the discount amount is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_discAmountCur">
        /// The new discount amount when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The discount amount.
        /// </returns>
        /// <remarks>
        /// The discount amount is in the currency of the open transaction.
        /// </remarks>
        public edit CustCashDiscAmount editDiscAmountCur(
            boolean _set,
            CustTransOpen _custTransOpen,
            CustCashDiscAmount _discAmountCur)
        {
            boolean isUpdated;
            CustTransCashDisc cashDisc;
            // <GBR>
            FinInterestAmount_BR    previousFinInterestAmount;
            FineAmount_BR           previousFineAmount;
            // </GBR>

            if (_set)
            {
                isUpdated = settlementManager.updateCashDiscAmount(_custTransOpen, _discAmountCur);

                if (isUpdated)
                {
                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        previousFinInterestAmount   = _custTransOpen.InterestAmount_BR;
                        previousFineAmount          = _custTransOpen.FineAmount_BR;
                    }
                    // </GBR>

                    custTransOpen_ds.reread();

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        _custTransOpen.InterestAmount_BR    = previousFinInterestAmount;
                        _custTransOpen.FineAmount_BR        = previousFineAmount;
                    }
                    // </GBR>
                }

                element.updateTotalSettleAmountCur();
            }

            cashDisc = settlementManager.findCashDisc(_custTransOpen);

            return cashDisc.CashDiscAmount;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Invoked when the row in the settlement grid changes.
        /// </summary>
        /// <returns>
        /// The active state.
        /// </returns>
        public int active()
        {
            int activeState;
            boolean isMarked;

            activeState = super();

            showDocumentButton.enabled(true);

            isMarked = settlementManager.isTransMarked(custTransOpen);

            crossRate.allowEdit(isMarked);
            settleAmountCur.allowEdit(isMarked);

            if (settlementManager.isAlreadyMarked(custTransOpen))
            {
                markInvoiceLineButton.enabled(false);
            }
            else
            {
                markInvoiceLineButton.enabled(CustOpenTransLineManager::setMarkInvoiceButton(element.makeArgs()));
            }

            if (isMarked
                && ((custTransOpen.UseCashDisc == UseCashDisc::Always)
                    || (custTransOpen.UseCashDisc == UseCashDisc::Normal
                        && CustParameters::find().CashDiscForPartialPaym)))
            {
                editCashDiscToTake.allowEdit(true);
            }
            else
            {
                editCashDiscToTake.allowEdit(false);
            }

            return activeState;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayIsAlreadyMarkedIcon</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the image indicating whether the open transaction is marked for
        /// settlement from another payment.
        /// </summary>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <returns>
        /// The image indicating whether the open transaction is marked for settlement
        /// from another payment.
        /// </returns>
        public display container displayIsAlreadyMarkedIcon(CustTransOpen _custTransOpen)
        {
            ImageReference image;
            container imageContainer;

            if (settlementManager.isAlreadyMarked(_custTransOpen))
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::InUse);
                imageContainer = image.pack();
            }

            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCrossRate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the cross rate.
        /// </summary>
        /// <param name="_set">
        /// true if the cross rate is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_crossRate">
        /// The new cross rate when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// The cross rate.
        /// </returns>

        public edit CrossExchRate editCrossRate(
            boolean _set,
            CustVendTransOpen _custTransOpen,
            CrossExchRate _crossRate)
        {
            Amount newCrossRate;
            if (_set)
            {
                if ((ledgerJournalTrans.CurrencyCode != custTrans.CurrencyCode)
                    || (ledgerJournalTrans.DataAreaId != custTrans.DataAreaId))
                {
                    // only update if the currencies are not the same
                    settlementManager.updateCrossRate(_custTransOpen, _crossRate);
                }

                element.updateTotalSettleAmountCur();
            }

            newCrossRate = settlementManager.getCrossRate(_custTransOpen);

            return newCrossRate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSettleAmountCur</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the settle amount.
        /// </summary>
        /// <param name="_set">
        /// true if the settle amount is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_settleAmountCur">
        /// The new settle amount.
        /// </param>
        /// <returns>
        /// The settle amount.
        /// </returns>

        public edit AmountCur editSettleAmountCur(
            boolean _set,
            CustTransOpen _custTransOpen,
            AmountCur _settleAmountCur)
        {
            if (_set)
            {
                settlementManager.updateSettleAmount(_custTransOpen, _settleAmountCur);

                element.updateTotalSettleAmountCur();
            }

            return settlementManager.getSettleAmount(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editIsMarkedForSettlement</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets whether the open transaction is marked for settlement.
        /// </summary>
        /// <param name="_set">
        /// true if marked for settlement is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_isMarkedForSettlement">
        /// The new marked for settlement when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// Whether the open transaction is marked for settlement.
        /// </returns>
        public edit boolean editIsMarkedForSettlement(
            boolean _set,
            CustTransOpen _custTransOpen,
            boolean _isMarkedForSettlement)
        {
            CustTrans trans;
            boolean isMarked;
            boolean wasItMarked;
            boolean allowMarkingPastPaymAmount;
            CustSettlementPriorityProcessing custPaymEntry;

            markedObservableLink.observe();

            if (_set)
            {
                trans = _custTransOpen.joinChild();

                if (_isMarkedForSettlement)
                {
                    if (!element.allowSettlement(_custTransOpen))
                    {
                        return element.isTransMarkedThatDoesNotAllowSettlement(_custTransOpen);
                    }

                    if (settlementManager.isAlreadyFullyMarked(_custTransOpen))
                    {
                        markInvoiceLineButton.enabled(false);

                        str messageForMarkedTransaction = SpecTransManager::getTransactionMarkedMessageByRef(
                            _custTransOpen.company(),
                            _custTransOpen.TableId,
                            _custTransOpen.RecId);

                        throw error(messageForMarkedTransaction);
                    }

                    if ((!trans.Prepayment) || (Box::yesNo("@SYS68879", DialogButton::No) == DialogButton::Yes))
                    {
                        if (isConfigurationKeyEnabled(configurationKeyNum(PublicSector)))
                        {
                            // create the new object
                            custPaymEntry = CustSettlementPriorityProcessing::constructCustPaymEntry(settlementManager, ledgerJournalTrans, custTransOpen_ds);
                        }

                        if (!isConfigurationKeyEnabled(configurationKeyNum(PublicSector)) || custPaymEntry.isMarked(trans,_custTransOpen))
                        {
                            allowMarkingPastPaymAmount = (ledgerJournalTrans.displayCustPaymAmount() == 0);

                            // not a prepayment or the user confirmed to mark it anyway
                            wasItMarked = settlementManager.markTrans(ledgerJournalTrans, _custTransOpen, trans, allowMarkingPastPaymAmount, false);

                            crossRate.allowEdit(wasItMarked);

                            settleAmountCur.allowEdit(wasItMarked);

                            if (wasItMarked
                                && ((custTransOpen.UseCashDisc == UseCashDisc::Always)
                                    || (custTransOpen.UseCashDisc == UseCashDisc::Normal
                                        && CustParameters::find().CashDiscForPartialPaym)))
                            {
                                editCashDiscToTake.allowEdit(true);
                            }
                            else
                            {
                                editCashDiscToTake.allowEdit(false);
                            }
                        }
                        else if (this.executeValidateCreditNoteRestriction())
                        {
                            if (_custTransOpen.AmountCur > 0)
                            {
                                checkFailed("@SPS659");
                            }
                            else
                            {
                                if (custPaymEntry.invoiceExistWithCreditNoteRestriction())
                                {
                                    checkFailed("@SPS649");
                                }
                                else
                                {
                                    checkFailed("@SPS659");
                                }
                            }
                        }

                        CustDirectDebitMandate::validateSettlement(
                            _custTransOpen.AccountNum,
                            ledgerJournalTrans.company(),
                            ledgerJournalTrans.PaymMode,
                            trans);
                    }
                }
                else
                {
                    settlementManager.unmarkTrans(ledgerJournalTrans, _custTransOpen);

                    crossRate.allowEdit(false);
                    settleAmountCur.allowEdit(false);
                    editCashDiscToTake.allowEdit(false);
                }

                element.updateTotalSettleAmountCur();

                isPaymChanged = true;

                markInvoiceLineButton.enabled(CustOpenTransLineManager::setMarkInvoiceButton(element.makeArgs()));
            }

            isMarked = settlementManager.isTransMarked(_custTransOpen);

            return isMarked;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeValidateCreditNoteRestriction</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines if validation of credit note restriction should occur.
        /// </summary>
        /// <returns>
        /// true if validation of credit note restriction should occur; otherwise, false.
        /// </returns>
        protected boolean executeValidateCreditNoteRestriction()
        {
            return isConfigurationKeyEnabled(configurationKeyNum(PublicSector))? true : false;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscAlreadyTaken</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets the cash discount amount taken that corresponds to the open transaction in the transaction currency.
        /// settlement from another payment.
        /// </summary>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <returns>
        /// The cash discount amount taken in the transaction currency.
        /// </returns>
        public display CashDiscAmount displayCashDiscAlreadyTaken(CustTransOpen _custTransOpen)
        {
            return settlementManager.getCashDiscAmountTaken(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCashDiscToTake</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets the cash discount amount.
        /// </summary>
        /// <param name="_set">
        /// true if the discount amount is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_cashDiscToTake">
        /// The new cash discount amount.
        /// </param>
        /// <returns>
        /// The cash discount amount.
        /// </returns>
        public edit CashDiscAmount editCashDiscToTake(boolean _set, CustTransOpen _custTransOpen, AmountCur _cashDiscToTake)
        {
            CashDiscAmount cashDiscAmount;
            if (_set)
            {
                settlementManager.updateCashDiscToTake(_custTransOpen, _cashDiscToTake);
            }

            cashDiscAmount = settlementManager.getCashDiscAmountToTake(_custTransOpen);

            return cashDiscAmount;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LedgerJournalTransPayment_BR</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (ledgerJournalTrans.RecId)
            {
                if (BrazilParameters::isEnabled() && !LedgerJournalTransPayment_BR.RefRecId)
                {
                    LedgerJournalTransPayment_BR.initFromLedgerJournalTrans(ledgerJournalTrans);
                }
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (BrazilParameters::isEnabled())
            {
                LedgerJournalTransPayment_BR_ds.autoQuery(NoYes::Yes);
                LedgerJournalTransPayment_BR_ds.linkType(DataSourceLinkTypePropertyValues::Outer);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LedgerJournalTrans_W</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (enableLedgerJournalTrans_W && LedgerJournalTrans_W.LedgerJournalTrans != 0)
            {
                // Only write the child table if the country context is set to one that the table has fields linked to and the child table has the parent FK set
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = LedgerJournalTrans_W.LedgerJournalTrans ? super() : true;
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (enableLedgerJournalTrans_W)
            {
                // Switch the link type as fields appear in the grid that require an outerjoin
                ledgerJournalTrans_W_ds.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CashRegisterTerminal</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                RegisterRecId.value(CashRegisterTerminal_W::find(LedgerJournalTrans_W.CashRegisterTerminal).CashRegister);
                LedgerJournalTrans_W_DS.write();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret = super();

                if (ret)
                {
                    if (LedgerJournalTrans_W.CashRegisterTerminal
                        && CashRegisterTerminal_W::find(LedgerJournalTrans_W.CashRegisterTerminal).Location != LocationRecId.value())
                    {
                        ret = checkFailed(strFmt("@FiscalServices:AS_LedgerJournalTransCustPaym_Form_CashTerm", CashRegisterLocation_W::find(LocationRecId.value()).Code));
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return CashRegisterTerminal_W::lookupTerminalForLocation(_formReferenceControl, LocationRecId.value());
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ClearButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.clearPayment();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SaveButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            int markedRecordCount;

            if (ledgerJournalTrans.amount() == 0)
            {
                // A payment amount was not specified. A journal will not be created.
                throw error("@SYS330422");
            }

            if (PaymTerm::isCashAccount(ledgerJournalTrans.Payment))            
            {
                markedRecordCount = SpecTrans::getSpecTransCount(ledgerJournalTrans.company(), ledgerJournalTrans.TableId, LedgerJournalTrans.RecId);                
                if (markedRecordCount == 1)
                {
                    ledgerJournalTrans.setCustPaymentTermsOfPaymentByInvoice();                    
                }             
            }

            changecompany(ledgerJournalTrans.company())
            {
                if ((ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
                    || (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
                        && BankAccountTable::checkIsActive(ledgerJournalTrans.parmOffsetAccount())))
                {
                    super();

                    if (ledgerJournalTrans.amount() != 0)
                    {
                        // <GEERU>
                        ttsbegin;
                        // </GEERU>
                        ledgerJournalTrans_ds.write();
                        ledgerJournalEngine.calcPaymentFee(ledgerJournalTrans);
                        // <GEERU>
                        this.insertBudgetTrans_RU();
                        ttscommit;
                        // </GEERU>
                    }

                    ledgerJournalTrans_ds.create();
                }
            }

            element.enablePaymCompanyAndCustAccount(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>insertBudgetTrans_RU</Name>
						<Source><![CDATA[
        void insertBudgetTrans_RU()
        {
            PaymentOrderBudgetTrans_RU trans = ledgerJournalEngine.paymentOrderBudgetTrans_RU();

            if (! trans.RecId && trans.JournalNum)
            {
                trans.insert();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustAccount</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Debug::assert(ledgerJournalTrans.AccountType == LedgerJournalACType::Cust);

            CustTable::lookupCustomer(this, ledgerJournalTrans.Company);
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        public boolean checkUseCustomLookup(int _enumVal, int _secondaryAccountTypeEnumValue)
        {
            return true;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransReferenceId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Opens the lookup form for the search transaction.
        /// </summary>
        public void lookup()
        {
            Args e = new Args(formStr(CustPaymIdRefLookup));
            e.caller(element);

            FormRun lookupForm = ClassFactory::formRunClassOnClient(e);
            lookupForm.init();

            this.performFormLookup(lookupForm);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            CustTransOpen transOpen;
            CustTrans trans;

            ret = super();

            if (ret && this.valueStr() != '')
            {
                if (!element.custOpenTransUsedInSearchByTransaction())
                {
                    if (this.hasMultipleOpenTransReferences(this.valueStr()))
                    {
                        this.lookup();
                        return ret;
                    }

                    CustOpenTransWithIdRef valueCustOpenTransWithIdRef;

                    select firstonly crosscompany valueCustOpenTransWithIdRef
                        where valueCustOpenTransWithIdRef.TransRefId == this.valueStr();

                    element.custOpenTransUsedInSearchByTransaction(valueCustOpenTransWithIdRef);
                }

                changecompany(element.custOpenTransUsedInSearchByTransaction().Company)
                {
                    transOpen = CustTransOpen::find(element.custOpenTransUsedInSearchByTransaction().CustTransOpenRecId);
                    trans = transOpen.custTrans();
                }

                element.initFromCustTransOpen(transOpen, trans);

                transDate.setFocus();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>isInvalidOpenTransReference</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks if there is any invalid open transactions exists for the payment reference.
        /// </summary>
        /// <param name = "_referenceId">Customer payment reference id.</param>
        /// <returns>
        /// true, if there is any invalid open transactions exists for the payment reference; otherwise false.
        /// </returns>
        protected boolean isInvalidOpenTransReference(Num _referenceId)
        {
            CustOpenTransWithIdRef custOpenTransWithIdRef;

            select crosscompany count(RecId) from custOpenTransWithIdRef
                where custOpenTransWithIdRef.TransRefId == _referenceId;

            return custOpenTransWithIdRef.RecId == 0;
        }

]]></Source>
					</Method>
					<Method>
						<Name>hasMultipleOpenTransReferences</Name>
						<Source><![CDATA[
        /// <summary>
        /// Checks if the customer payment entry has multiple open transaction references.
        /// </summary>
        /// <param name = "_referenceId">Customer payment reference id.</param>
        /// <returns>
        /// true, if the customer payment has multiple open transaction references; otherwise, false.
        /// </returns>
        protected boolean hasMultipleOpenTransReferences(Num _referenceId)
        {
            CustOpenTransWithIdRef custOpenTransWithIdRef;

            select crosscompany count(RecId) from custOpenTransWithIdRef
                where custOpenTransWithIdRef.TransRefId == _referenceId;

            return custOpenTransWithIdRef.RecId > 1;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (this.valueStr() != '' && this.isInvalidOpenTransReference(this.valueStr()))
            {
                throw warning("@SYS119588");
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OffsetAccount</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
            {
                super();
            }
            else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
            {
                BankAccountTable::lookupBankAccount(this, ledgerJournalTrans.OffsetCompany);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>checkUseCustomLookup</Name>
						<Source><![CDATA[
        public boolean checkUseCustomLookup(int _enumVal, int _secondaryAccountTypeEnumValue)
        {
            return (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank);
        }

]]></Source>
					</Method>
					<Method>
						<Name>onSegmentChanged</Name>
						<Source><![CDATA[
        public void onSegmentChanged(DimensionControlSegment _segment)
        {
            currentOffsetMainAccountId = ledgerJournalEngine.onSegmentChangedForOffsetAccount(this, _segment, currentOffsetMainAccountId, ledgerJournalTrans);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            CustSettlementPriorityProcessing custSettlePriorityPaymEntry = CustSettlementPriorityProcessing::constructCustPaymEntry(settlementManager, ledgerJournalTrans, custTransOpen_ds);
            custSettlePriorityPaymEntry.markAllSelected(CustTransOpen_DS);

            crossRate.allowEdit(true);
            settleAmountCur.allowEdit(true);

            if (((custTransOpen.UseCashDisc == UseCashDisc::Always)
                || (custTransOpen.UseCashDisc == UseCashDisc::Normal
                    && CustParameters::find().CashDiscForPartialPaym)))
            {
                editCashDiscToTake.allowEdit(true);
            }
            else
            {
                editCashDiscToTake.allowEdit(false);
            }

            custTransOpen_Ds.executeQuery();
            element.updateTotalSettleAmountCur();
            ledgerJournalTrans_ds.refresh();

            // Raise a notification on the edit method since multiple transactions can be marked
            markedObservableLink.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CustSettlementPriorityProcessing        custSettlePriorityPaymEntry;
            super();

            // create the new object
            custSettlePriorityPaymEntry = CustSettlementPriorityProcessing::constructCustPaymEntry(settlementManager, ledgerJournalTrans, custTransOpen_ds);
            custSettlePriorityPaymEntry.unmarkAll();

            crossRate.allowEdit(false);
            settleAmountCur.allowEdit(false);
            editCashDiscToTake.allowEdit(false);

            custTransOpen_Ds.executeQuery();
            element.updateTotalSettleAmountCur();
            ledgerJournalTrans_ds.refresh();

            // Raise a notification on the edit method since multiple transactions can be unmarked
            markedObservableLink.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkTransactionsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CustSettlementPriorityProcessing        custSettlePriorityPaymEntry;
            DialogButton                            markTransDialogButton;

            // create the new object
            custSettlePriorityPaymEntry = CustSettlementPriorityProcessing::constructCustPaymEntry(settlementManager, ledgerJournalTrans, custTransOpen_ds);

            if (custSettlePriorityPaymEntry.isAlreadyMarked())
            {
                // ask the user if he wants to unmark all transactions and do the marking again
                markTransDialogButton = Box::yesNo("@SYS135033", DialogButton::Yes);

                // if yes unmark transactions else do nothing and return
                if (markTransDialogButton == DialogButton::Yes)
                {
                    custSettlePriorityPaymEntry.unmarkAllTransactions();
                    custTransOpen_ds.executeQuery();
                }
                else
                {
                    return;
                }
            }

            // call the marking process
            // if no transactions is marked due to any reason, show the infolog and return
            if (!custSettlePriorityPaymEntry.markTransactionsByPriority())
            {
                info("@SYS135034");
                return;
            }

            custTransOpen_ds.executeQuery();
            element.updateTotalSettleAmountCur();

            // Raise a notification on the edit method since multiple transactions can be marked
            markedObservableLink.markChanged();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkInvoiceLineButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;
            args = new Args(formStr(CustPaymEntry));
            args.caller(element);
            args.parmObject(settlementManager);
            args.record(custTransOpen);

            new MenuFunction(menuitemDisplayStr(CustPaymEntryByLine), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustTrans</Name>
			<Table>CustTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingEvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelledPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Closed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompanyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConcessionContractId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConcessionSettlementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ControlNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Interest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdj</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymManBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymManLackDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfileClose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailCustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailStoreId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTerminalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Settlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerJournalTrans</Name>
			<Table>LedgerJournalTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountAgreementId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcknowledgementDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Addressing_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgreementCompany_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCurDebit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnnouncementNum_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Attachments_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAgreementExt_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankBillOfExchangeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankTransTypeCur_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankChequeDepositTransRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankChequeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankClientDocumentTypeId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCommAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyDealCourse_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCurrencyTransferLog_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDepositNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDepositVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankNegInstRecipientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPaymentRegistrationNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPrintAccountNum_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankPromissoryNoteNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankReconcileAccountAtPost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRespWorkerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankSpecAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankVendAccountId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSourceLedgerEntryUnposted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Cancel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashReceiptNum_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CFDIUUID_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Company</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedInvoiceDate_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedInvoiceId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectionType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymDeliveryNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymSectionNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustEinvoicePaymTransNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustFactureAutoCreate_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendAccount_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendName_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendNegInstProtestReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DateCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitCurrencyCode_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DelayTaxCalculation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_AssessableValue_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CompanyLocation_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ConsignmentNoteNum_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsDuty_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsTariffCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_CustomsTariffDirection_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseRecordType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseTariffCodes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ExciseType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_GTAServiceCategory_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_MaximumRetailPrice_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_NatureOfAssessee_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_NonRecoverablePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SalesTaxFormTypes_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_ServiceCodeTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_SoftwareDeclReceived_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxSetoffVoucher_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TaxWithholdCode_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TCSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_TDSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_VATGoodsType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Due</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorCodePayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUSalesList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignBankFee_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForeignVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreqValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FurtherPostingRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FurtherPostingType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GSTHSTTaxType_CA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InformByPhone_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InformByTelex_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntBank_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntraComVATDueDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invisible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceSeries_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastTransferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalDlvDate_ES</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerVoucherType_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Listcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LoadingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoiceCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkedInvoiceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRCCGeneralLedgerId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPrintTxtOnCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRRefPaymID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NegInstId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoEdit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffSessionId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountAgreementId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAgreementCompany_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetPostingProfile_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetTxt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperationType_MX</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentPriority_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSequenceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInstruction4</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymPurpose_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PoolRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchIdRange</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchLedgerPosting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashDocRepresPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashDocRepresType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RCashPayTransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCopyReverse_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseDateComment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitteeCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepresPersonCard_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RepresPersonName_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReverseEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipBlockedForManualEntryCheck</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099Fields</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax1099StateAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBase_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxDirectionControl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxItemGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAlternateVendorAcct_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCalculate_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transfer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferCurrency_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transferred</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredOn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Triangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VatDueDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNumJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOnPayment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATOperationCode_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATPaymRefRecId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATTaxAgentVendAccount_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendBankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendPaymFeeGroup_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher_CN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransOpen</Name>
			<Table>CustTransOpen</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastInterestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PossibleCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledLinePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledTotalAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementPriorityCashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransIdRef</Name>
			<Table>CustTransIdRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransRefType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>CustTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>TransRecIdIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustBillingClassification</Name>
			<Table>CustBillingClassification</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCourse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditNoteNumberSeq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInterest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNumberSeq</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RestrictCreditNote</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseBillingClassCollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseFromPostingProfile</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTrans</JoinSource>
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerJournalTransPayment_BR</Name>
			<Table>LedgerJournalTransPayment_BR</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BorderoSequenceNum_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPCompanyDocument_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPPaymentType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPPaymentWay_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmountCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinInterestAmountCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdEditStatus_BR</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<JoinSource>LedgerJournalTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LedgerJournalTrans_W</Name>
			<Table>LedgerJournalTrans_W</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CashRegisterTerminal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryPurpose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChargeBearer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocalInstrument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceLevel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>LedgerJournalTrans</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS114323</Caption>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<TitleDataSource xmlns="">LedgerJournalTrans</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane_MainButtons</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>MainButtons</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ClearButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Text>@SYS2079</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>SaveButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<NeededPermission>Manual</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DefaultButton>Yes</DefaultButton>
								<Text>@SYS114331</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<DataSource>LedgerJournalTrans</DataSource>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Body_Top</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PaymentInfoLeft</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustomerSearchGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SearchGroup_Account</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PaymCompany</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<DataField>Company</DataField>
												<DataSource>LedgerJournalTrans</DataSource>
												<Label>@SYS13342</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormSegmentedEntryControl">
												<Name>CustAccount</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_CustAccount</HelpText>
												<Type>SegmentedEntry</Type>
												<FormControlExtension>
													<Name>SegmentedEntryControl</Name>
													<ExtensionComponents />
													<ExtensionProperties>
														<AxFormControlExtensionProperty>
															<Name>parmControllerClassName</Name>
															<Type>String</Type>
															<Value>DimensionDynamicAccountController</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmAccountTypeEnumName</Name>
															<Type>String</Type>
															<Value>AccountType</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIsDefaultAccount</Name>
															<Type>Enum</Type>
															<TypeName>boolean</TypeName>
															<Value>False</Value>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmValidateBlockedForManualEntry</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmLockMainAccountSegment</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmPostingType</Name>
															<Type>Enum</Type>
															<TypeName>LedgerPostingType</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeTotalAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
														<AxFormControlExtensionProperty>
															<Name>parmIncludeFinancialAccounts</Name>
															<Type>Enum</Type>
															<TypeName>NoYes</TypeName>
														</AxFormControlExtensionProperty>
													</ExtensionProperties>
												</FormControlExtension>
												<DataSource>LedgerJournalTrans</DataSource>
												<Label>@SYS302</Label>
												<ReferenceField>LedgerDimension</ReferenceField>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Columns>3</Columns>
										<Columnspace>0</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SearchGroup_AccountName</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustAccountName</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>CustName</ExtendedDataType>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@CashManagement:SearchForCustomerBy</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TransactionSearchGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>SearchGroup_Transaction</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TransReferenceId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>100</Width>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Num</ExtendedDataType>
												<Label>@CashManagement:Transaction</Label>
												<LookupButton>Always</LookupButton>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@CashManagement:SearchForCustomerByTransaction</Caption>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PaymentInfoMiddle</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentInfo_Info</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PaymentInfo_TransDate</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>TransDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_TransDate</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>TransDate</DataField>
												<DataSource>LedgerJournalTrans</DataSource>
												<Label>@SYS75144</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PaymentInfo_Deposit</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PaymReference</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_PaymReference</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PaymReference</DataField>
												<DataSource>LedgerJournalTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>IsDeposit</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_IsDeposit</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankDepositVoucher</DataField>
												<DataSource>LedgerJournalTrans</DataSource>
												<Label>@SYS23659</Label>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Columns>2</Columns>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PaymentInfo_PaymAmount</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PaymAmountAndCurrency</Name>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>PaymAmountCur</Name>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>0</Width>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editPaymAmountCur</DataMethod>
														<DataSource>LedgerJournalTrans</DataSource>
														<Label>@SYS53072</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PaymCurrency</Name>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_PaymCurrency</HelpText>
														<Left>0</Left>
														<LeftMode>RightEdge</LeftMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>CurrencyCode</DataField>
														<DataSource>LedgerJournalTrans</DataSource>
														<DisplayLength>3</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>TotalSettlePaymAmountCur</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1227133512</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_TotalSettlePaymAmountCur</HelpText>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<FormControlExtension
													i:nil="true" />
												<Border>None</Border>
												<ExtendedDataType>AmountCur</ExtendedDataType>
												<Label>@SYS77911</Label>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>RemainingPaymAmountCur</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1840700268</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_RemainingPaymAmountCur</HelpText>
												<Skip>Yes</Skip>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>0</Width>
												<FormControlExtension
													i:nil="true" />
												<Border>None</Border>
												<ExtendedDataType>AmountCur</ExtendedDataType>
												<Label>@SYS78228</Label>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PaymentInfoRight</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentInfo_Amounts</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TransTxt</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<FormControlExtension
											i:nil="true" />
										<DataField>Txt</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PaymentDefaultsGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PaymentInfo_PaymMode</Name>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<Width>0</Width>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PaymMode</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>PaymMode</DataField>
														<DataSource>LedgerJournalTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PaymModeName</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Skip>Yes</Skip>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>Description</ExtendedDataType>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Columns>2</Columns>
												<Columnspace>0</Columnspace>
												<ColumnspaceMode>Fixed</ColumnspaceMode>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>OffsetAccountGroup</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>BridgingBankAccount</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>BridgingBankAccount</DataField>
														<DataSource>LedgerJournalTrans</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>OffsetAccountType</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_OffsetAccountType</HelpText>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editOffsetAccountType</DataMethod>
														<DataSource>LedgerJournalTrans</DataSource>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormSegmentedEntryControl">
														<Name>OffsetAccount</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>SegmentedEntry</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension>
															<Name>SegmentedEntryControl</Name>
															<ExtensionComponents />
															<ExtensionProperties>
																<AxFormControlExtensionProperty>
																	<Name>parmControllerClassName</Name>
																	<Type>String</Type>
																	<Value>DimensionDynamicAccountController</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmAccountTypeEnumName</Name>
																	<Type>String</Type>
																	<Value>OffsetAccountType</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmIsDefaultAccount</Name>
																	<Type>Enum</Type>
																	<TypeName>boolean</TypeName>
																	<Value>False</Value>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmValidateBlockedForManualEntry</Name>
																	<Type>Enum</Type>
																	<TypeName>NoYes</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmLockMainAccountSegment</Name>
																	<Type>Enum</Type>
																	<TypeName>NoYes</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmPostingType</Name>
																	<Type>Enum</Type>
																	<TypeName>LedgerPostingType</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmIncludeTotalAccounts</Name>
																	<Type>Enum</Type>
																	<TypeName>NoYes</TypeName>
																</AxFormControlExtensionProperty>
																<AxFormControlExtensionProperty>
																	<Name>parmIncludeFinancialAccounts</Name>
																	<Type>Enum</Type>
																	<TypeName>NoYes</TypeName>
																</AxFormControlExtensionProperty>
															</ExtensionProperties>
														</FormControlExtension>
														<DataSource>LedgerJournalTrans</DataSource>
														<ReferenceField>OffsetLedgerDimension</ReferenceField>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>OffsetAccountName</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Skip>Yes</Skip>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>AccountName</ExtendedDataType>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalLeft</ArrangeMethod>
												<Columns>3</Columns>
												<Columnspace>0</Columnspace>
												<ColumnspaceMode>Fixed</ColumnspaceMode>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Caption>@CashManagement:PaymentDefaults</Caption>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Auto</ArrangeMethod>
								<Columnspace>0</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Agreement_RU</Name>
								<CountryRegionCodes>RU</CountryRegionCodes>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Agreement_RU_AgreementCompany_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AgreementCompany_RU</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Agreement_RU_AccountAgreementId_RU</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AccountAgreementId_RU</DataField>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Agreement_RU_M_accountAgreementDocumentTitle_RU</Name>
										<AllowEdit>No</AllowEdit>
										<CountryRegionCodes>RU</CountryRegionCodes>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>accountAgreementDocumentTitle_RU</DataMethod>
										<DataSource>LedgerJournalTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Agreement_RU</DataGroup>
								<DataSource>LedgerJournalTrans</DataSource>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CashRegister_W</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>LocationRecId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ExtendedDataType>CashRegisterLocationRecId_W</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>CashRegisterTerminal_W</Name>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>LedgerJournalTrans_W</DataSource>
								<ReferenceField>CashRegisterTerminal</ReferenceField>
								<ReplacementFieldGroup>Code</ReplacementFieldGroup>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>RegisterRecId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ExtendedDataType>CashRegisterRecId_W</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>OperatorRecId</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ExtendedDataType>CashRegisterOperatorRecId_W</ExtendedDataType>
							</AxFormControl>
						</Controls>
						<Caption>@FiscalServices:AS_LedgerJournalTransCustPaym_From_TabCashRegister</Caption>
						<DataSource>LedgerJournalTrans_W</DataSource>
					</AxFormControl>
				</Controls>
				<Columns>4</Columns>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Body_Bottom</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ToolbarList</Pattern>
				<PatternVersion>1.2</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ActionPane</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPane</Type>
						<VerticalSpacingMode>Fixed</VerticalSpacingMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>SelectClearButtons</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<LeftMode>LeftEdge</LeftMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>SelectAllButton</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<NeededPermission>Manual</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@CashManagement:MarkSelectedForSettlement</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ClearAllButton</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<NeededPermission>Manual</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MultiSelect>Yes</MultiSelect>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@CashManagement:UnmarkAll</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>GridButtons</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ShowDocumentButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>2</VerticalSpacing>
										<VerticalSpacingMode>Fixed</VerticalSpacingMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>CustTrans</DataSource>
										<MenuItemName>CustTrans</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS73003</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>MarkTransactionsButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<NeededPermission>Manual</NeededPermission>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@SYS300456</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>MarkInvoiceLineButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataSource>CustTransOpen</DataSource>
										<MenuItemName>CustPaymEntryByLine</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Columnspace>0</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>SelectToPay_Grid</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>IsAlreadyMarkedIcon</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>252645134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Image</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayIsAlreadyMarkedIcon</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>''</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IsMarkedForSettlement</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>378967701</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_IsMarkedForSettlement</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataMethod>editIsMarkedForSettlement</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>@SYS19120</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReferenceId</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>505290268</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_ReferenceId</HelpText>
								<PreviewPartRef>CustPaymEntryOpenTransPreviewPart</PreviewPartRef>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TransRefId</DataField>
								<DataSource>CustTransIdRef</DataSource>
								<Label>@SYS107394</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>ReferenceType</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>631612835</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_ReferenceType</HelpText>
								<Skip>Yes</Skip>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TransRefType</DataField>
								<DataSource>CustTransIdRef</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>DueDate</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1136903103</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_DueDate</HelpText>
								<Skip>Yes</Skip>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>DueDate</DataField>
								<DataSource>CustTransOpen</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>AmountAvailableToPay</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1263225670</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_AmountAvailableToPay</HelpText>
								<Skip>Yes</Skip>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>AmountCur</DataField>
								<DataSource>CustTransOpen</DataSource>
								<Label>@SYS114325</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Currency</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1389548237</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_Currency</HelpText>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CurrencyCode</DataField>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>DiscAmountCur</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1642193371</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_DiscAmountCur</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editDiscAmountCur</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>@SYS11829</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>editCashDiscToTake</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1768515938</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_editCashDiscToTake</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editCashDiscToTake</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>@sys128701</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>displayCashDiscAlreadyTaken</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1894838505</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_displayCashDiscAlreadyTaken</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayCashDiscAlreadyTaken</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>@sys96101</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>SettleAmountCur</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2021161072</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_SettleAmountCur</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editSettleAmountCur</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<Label>@SYS81847</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>CrossRate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1515870804</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_CrossRate</HelpText>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<AllowNegative>No</AllowNegative>
								<DataMethod>editCrossRate</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>ReferenceGroup</Name>
								<ElementPosition>1946157054</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FieldDescriptions_AccountsPayable:CustPaymEntry_ReferenceGroup</HelpText>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ReferenceGroup_BillingClassification</Name>
										<DataRelationPath>CustBillingClassification</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>CustTrans</DataSource>
								<ReferenceField>CustBillingClassification</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>editFineAmount_BR</Name>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>1971158393</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editFineAmount_BR</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>editInterestAmount_BR</Name>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>1996159732</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editInterestAmount_BR</DataMethod>
								<DataSource>CustTransOpen</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
						</Controls>
						<DataSource>CustTransOpen</DataSource>
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>