<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ProjSalesPriceHour</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
    public class ProjSalesPriceHour extends FormRun
    {
        QueryBuildRange     criteriaProjId;
        QueryBuildRange     criteriaResource;
        QueryBuildRange     criteriaResourceCategory;
        QueryBuildRange     criteriaProjPriceGroup;
        QueryBuildRange     criteriaProjValidFor;

        boolean             fromMainSetup;
        CurrencyCode        currencyCode;
        ProjId              relationProjId;
        ProjPriceGroupID    relationPriceGroup;
        ProjId              projId;
        CustAccount         relationCustAccount;
        str                 relationDisplayText;

        #DEFINE.star("*")
        #DEFINE.displayOptionBlank("")
        #DEFINE.displayOptionTable("@SYS8868")
        #DEFINE.displayOptionGroup("@SYS3815")
        #DEFINE.displayOptionAll("@SYS11696")

        PriceDiscGroup          priceDiscGroup;
        ProjTable               projTable;
        ProjInvoiceTable        projInvoiceTable;
        CustTable               custTable;
        ProjJournalTrans        projJournalTrans;
        ProjForecastEmpl        projForecastEmpl;
        SMAAgreementTable       agreementTable;
        SMAServiceOrderTable    smaServiceOrderTable;
        ProjCategory            projCategory;
        HcmWorker               hcmWorker;
        ResourceView            resourceView;
        ResourceCategoryView    resourceCategoryView;
        SalesQuotationTable     salesQuotationTable;
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /*
        str                     sProjId;
        */
    public void init()
    {
        /*
        ProjTable    tProjTable;
        */
        super();

        currencyCode        = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
        relationCustAccount = '';
        relationProjId      = '';
        relationDisplayText = '';

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            // Record is required from the calling dataset
            if ((!element.args().record()) && (element.args().dataset()))
            {
                throw error("@SYS34359");
            }

            // Set defaults depending on the dataset
            switch (element.args().dataset())
            {
                case tableNum(PriceDiscGroup):
                    topGroup.visible(false);
                    displayOption.selection(TableGroupAll::GroupId);
                    break;

                case tableNum(ProjTable):
                    projTable           = element.args().record();
                    currencyCode        = projTable.currencyId();
                    relationProjId      = projTable.ProjId;
                    relationPriceGroup  = projTable.ProjPriceGroup;
                    relationDisplayText = relationProjId;
                    break;

                case tableNum(ProjInvoiceTable):
                    projInvoiceTable    = element.args().record();
                    currencyCode        = projInvoiceTable.CurrencyId;
                    relationProjId      = projInvoiceTable.ProjInvoiceProjId;
                    relationPriceGroup  = projInvoiceTable.ProjPriceGroup;
                    relationDisplayText = relationProjId;
                    break;

                case tableNum(CustTable):
                    custTable           = element.args().record();
                    currencyCode        = custTable.Currency;
                    relationCustAccount = custTable.AccountNum;
                    relationPriceGroup  = custTable.PriceGroup;
                    relationDisplayText = relationCustAccount;
                    break;

                case tableNum(ProjJournalTrans):
                    projJournalTrans    = element.args().record();
                    projTable           = ProjTable::find(projJournalTrans.ProjId);
                    currencyCode        = projTable.currencyId();
                    relationProjId      = projJournalTrans.ProjId;
                    relationPriceGroup  = projTable.ProjPriceGroup;
                    relationDisplayText = relationProjId;
                    break;

                case tableNum(ProjForecastEmpl):
                    projForecastEmpl    = element.args().record();
                    projTable           = ProjTable::find(projForecastEmpl.ProjId);
                    currencyCode        = projTable.currencyId();
                    relationProjId      = projForecastEmpl.ProjId;
                    relationPriceGroup  = projTable.ProjPriceGroup;
                    relationDisplayText = relationProjId;
                    break;

                case(tableNum(SMAAgreementTable)):
                    agreementTable      = element.args().record();
                    projTable           = ProjTable::find(agreementTable.ProjId);
                    currencyCode        = projTable.currencyId();
                    relationProjId      = projTable.ProjId;
                    relationPriceGroup  = projTable.ProjPriceGroup;
                    relationDisplayText = relationProjId;
                    break;

                case(tableNum(SMAServiceOrderTable)):
                    smaServiceOrderTable = element.args().record();
                    projTable            = ProjTable::find(smaServiceOrderTable.ProjId);
                    currencyCode         = projTable.currencyId();
                    relationProjId       = projTable.ProjId;
                    relationPriceGroup   = projTable.ProjPriceGroup;
                    relationDisplayText  = relationProjId;
                    break;

                case(tableNum(ProjCategory)):
                    projCategory        = element.args().record();
                    relationDisplayText = projCategory.CategoryId;
                    break;

                case(tableNum(HcmWorker)):
                    hcmWorker           = element.args().record();
                    relationDisplayText = hcmWorker.PersonnelNumber;
                    break;

                case(tablenum(ResourceView)):
                    resourceView        = element.args().record();
                    relationDisplayText = resourceView.ResourceId;
                    break;

                case(tablenum(ResourceCategoryView)):
                    resourceCategoryView    = element.args().record();
                    relationDisplayText     = resourceCategoryView.CategoryId;
                    break;

                case(tableNum(SalesQuotationTable)):
                    salesQuotationTable = element.args().record();
                    relationCustAccount = salesQuotationTable.CustAccount;
                    currencyCode        = salesQuotationTable.CurrencyCode;
                    relationPriceGroup  = salesQuotationTable.PriceGroupId;
                    relationDisplayText = salesQuotationTable.CustAccount;
                    break;
            }

            relation.text(relationDisplayText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceGroupFields</Name>
				<Source><![CDATA[
    void initPriceGroupFields()
    {
        boolean     existingRecord;

        // Check if its an existing record
        if (projHourSalesPrice.RecId)
        {
            existingRecord = true;
        }

        // Disable and enable fields based on the value of ProjValidFor and where it was called
        switch (projHourSalesPrice.ProjValidFor)
        {
            case TableGroupAll::Table :
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).allowEdit(false);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).skip(true);
                if ((element.args().dataset()) &&
                   ((element.args().dataset() != tableNum(ProjInvoiceTable)) &&
                    (element.args().dataset() != tableNum(CustTable)) &&
                    (element.args().dataset() != tableNum(HcmWorker)) &&
                    (element.args().dataset() != tableNum(ResourceView)) &&
                    (element.args().dataset() != tableNum(ResourceCategoryView)) &&
                    (element.args().dataset() != tableNum(ProjCategory)) &&
                    (element.args().dataset() != tableNum(SalesQuotationTable))) || existingRecord)
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).skip(true);
                }
                else
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).allowEdit(true);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).skip(false);
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).allowEdit(true);
                        projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).skip(false);
                        projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).allowEdit(true);
                        projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).skip(false);
                    }
                }
                break;

            case TableGroupAll::GroupId:
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).allowEdit(false);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).skip(true);
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).skip(true);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).skip(true);
                }

                if ((element.args().dataset()) &&
                    ((element.args().dataset() != tableNum(HcmWorker)) &&
                    (element.args().dataset() != tableNum(ResourceView)) &&
                    (element.args().dataset() != tableNum(ResourceCategoryView)) &&
                    (element.args().dataset() != tableNum(ProjCategory))) || existingRecord)
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).skip(true);
                }
                else
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).allowEdit(true);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).skip(false);
                }
                break;

            case TableGroupAll::All:
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).allowEdit(false);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).skip(true);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).allowEdit(false);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).skip(true);
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId)).skip(true);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, psaCustAccount)).skip(true);
                }
                break;
        }

        if ((displayOption.valueStr() == #displayOptionBlank) &&
            (element.args().dataset() != tableNum(PriceDiscGroup)) && !existingRecord)
        {
            projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).allowEdit(true);
            projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).skip(false);
        }
        else
        {
            if (element.args().dataset() &&
                ((element.args().dataset() == tablenum(HcmWorker)) ||
                (element.args().dataset() == tablenum(ResourceView)) ||
                (element.args().dataset() == tablenum(ResourceCategoryView)) ||
                (element.args().dataset() == tablenum(projCategory))))
            {
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).allowEdit(true);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).skip(false);
            }
            else
            {
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).allowEdit(false);
                projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjValidFor)).skip(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelation</Name>
				<Source><![CDATA[
    void initRelation()
    {
        projHourSalesPrice_ds.allowCreate(true);

        // Set value to relation field this is either ProjId, Price Group of empty.
        switch (displayOption.valueStr())
        {
            case #displayOptionBlank, #displayOptionAll:
                relation.text('');
                break;

            case #displayOptionTable:
                relation.text(relationDisplayText);
                break;

            case #displayOptionGroup:
                relation.text(relationPriceGroup);

                //
                // Don't allow to add records when there is no Price Group assigned to a ProjId except if
                // its called from main setup, EmplTable or ProjCategory
                //
                if ((!relationPriceGroup) && (!fromMainSetup) &&
                    ((element.args().dataset() != tableNum(HcmWorker)) &&
                     (element.args().dataset() != tablenum(ResourceView)) &&
                     (element.args().dataset() != tablenum(ResourceCategoryView)) &&
                     (element.args().dataset() != tableNum(ProjCategory))))
                {
                    projHourSalesPrice_ds.allowCreate(false);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    void reSelect()
    {
        // Rerun the query to get a new set of data based on the new Display Option selected
        this.initRelation();
        projHourSalesPrice_ds.init();
        projHourSalesPrice_ds.executeQuery();
        projHourSalesPrice_ds.queryRun().saveUserSetup(false);

        // Don't display any records if ProjId or PriceGroup are empty except it is called from
        // HcmWorker, ResourceView, ResourceCategoryView, ProjCategory, Custtable, ProjInvoiceTable , SalesQuotationTable
        //
        if (!fromMainSetup &&
            (element.args().dataset() != tableNum(HcmWorker)) &&
            (element.args().dataset() != tablenum(ResourceView)) &&
            (element.args().dataset() != tablenum(ResourceCategoryView)) &&
            (element.args().dataset() != tableNum(ProjCategory)) &&
            (((displayOption.valueStr() == #displayOptionTable) &&
            (!relationProjId) &&
            (element.args().dataset() != tableNum(CustTable)) &&
            (element.args().dataset() != tableNum(SalesQuotationTable)) &&
            (element.args().dataset() != tableNum(ProjInvoiceTable))) ||
            ((displayOption.valueStr() == #displayOptionGroup) &&
            (!relationPriceGroup))))
        {
            projHourSalesPrice.doClear();
        }

        projHourSalesPrice_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field access based on the current state.
    /// </summary>
    public void setFieldAccess()
    {
        ProjHourSalesPrice_DS.object(fieldnum(ProjHourSalesPrice, ResourceCategory)).allowEdit(ProjHourSalesPrice.CategoryId == '');
        ProjHourSalesPrice_DS.object(fieldnum(ProjHourSalesPrice, ResourceCategory)).skip(ProjHourSalesPrice.CategoryId != '');

        ProjHourSalesPrice_DS.object(fieldnum(ProjHourSalesPrice, CategoryId)).allowEdit(ProjHourSalesPrice.ResourceCategory == 0);
        ProjHourSalesPrice_DS.object(fieldnum(ProjHourSalesPrice, CategoryId)).skip(ProjHourSalesPrice.ResourceCategory != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh resource list page on close
    /// </summary>
    public void close()
    {
        Object      callerFormObject;
        FormName    callerFormName;

        super();

        callerFormObject = element.args().caller();
        if (callerFormObject != null)
        {
            callerFormName = callerFormObject.name();
            if (callerFormName == formStr(ResResourcesListPage) ||
                callerFormName == formStr(ResResourcesListPageV2))
            {
                callerFormObject.refreshResourceList();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ProjHourSalesPrice</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                element.initPriceGroupFields();
            }

            element.setFieldAccess();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        void linkActive()
        {
            if (!isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                switch (element.args().dataset())
                {
                    case(tableNum(ProjTable)):
                        projTable       = element.args().record();
                        currencyCode    = projTable.currencyId();
                        projId          = projTable.ProjId;
                        criteriaProjId.value(projId + #star);
                        break;

                    case(tableNum(SMAAgreementTable)):
                        agreementTable  = element.args().record();
                        projTable       = ProjTable::find(agreementTable.ProjId);
                        currencyCode    = projTable.currencyId();
                        projId          = projTable.ProjId;
                        criteriaProjId.value(projId);
                        break;
                }
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        void init()
        {
            Query                   query;
            QueryBuildDataSource    qB;

            super();

            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                // Initialize choices in DisplayOption
                if (!(displayOption.getText(1)))
                {
                    if (!(element.args().dataset()))
                    {
                        displayOption.add(#displayOptionBlank);
                        fromMainSetup = true;
                    }

                    displayOption.add(#displayOptionTable);
                    displayOption.add(#displayOptionGroup);
                    displayOption.add(#displayOptionAll);
                }

                projHourSalesPrice_ds.autoQuery(false);
                query   = new Query();
                qB      = query.addDataSource(tableNum(ProjHourSalesPrice));

                // Caller is form PriceDiscGroup
                if ((element.args().dataset()) == tableNum(PriceDiscGroup))
                {
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjId)).skip(true);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).allowEdit(false);
                    projHourSalesPrice_ds.object(fieldNum(ProjHourSalesPrice, ProjPriceGroup)).skip(true);

                    priceDiscGroup         = element.args().record();
                    relationPriceGroup     = priceDiscGroup.GroupId;
                    criteriaProjPriceGroup = qB.addRange(fieldNum(ProjHourSalesPrice, ProjPriceGroup));
                    criteriaProjPriceGroup.value(relationPriceGroup);
                }
                else
                {
                    element.initRelation();

                    // Initialize query depending on selection in DisplayOption
                    switch (displayOption.valueStr())
                    {
                        case #displayOptionBlank :
                            break;

                        case #displayOptionTable :

                            switch (element.args().dataset())
                            {
                                case tableNum(ProjTable):
                                    criteriaProjId = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                                    projTable       = element.args().record();
                                    projId          = projTable.ProjId;
                                    criteriaProjId.value(projId + #star);
                                    break;

                                case tableNum(ProjInvoiceTable):
                                    criteriaProjId         = qB.addRange(fieldNum(ProjHourSalesPrice, psaProjInvoiceProjId));
                                    projInvoiceTable       = element.args().record();
                                    criteriaProjId.value(projInvoiceTable.ProjInvoiceProjId + #star);
                                    break;

                                case tableNum(CustTable):
                                    criteriaProjId         = qB.addRange(fieldNum(ProjHourSalesPrice, psaCustAccount));
                                    custTable              = element.args().record();
                                    criteriaProjId.value(custTable.AccountNum + #star);
                                    break;

                                case(tableNum(ProjJournalTrans)):
                                    criteriaProjId   = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                                    projJournalTrans = element.args().record();
                                    criteriaProjId.value(projJournalTrans.ProjId);
                                    break;

                                case(tableNum(ProjForecastEmpl)):
                                    criteriaProjId   = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                                    projForecastEmpl = element.args().record();
                                    criteriaProjId.value(projForecastEmpl.ProjId);
                                    break;

                                case(tableNum(SMAAgreementTable)):
                                    criteriaProjId = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                                    agreementTable = element.args().record();
                                    criteriaProjId.value(agreementTable.ProjId);
                                    break;

                                case(tableNum(SMAServiceOrderTable)):
                                    criteriaProjId = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                                    smaServiceOrderTable = element.args().record();
                                    criteriaProjId.value(smaServiceOrderTable.ProjId);
                                    break;

                                case(tableNum(ProjCategory)):
                                    criteriaProjId  = qB.addRange(fieldNum(ProjHourSalesPrice, CategoryId));
                                    projCategory    = element.args().record();
                                    criteriaProjId.value(projCategory.CategoryId + #star);
                                    break;

                                case(tableNum(HcmWorker)):
                                    criteriaResource = qB.addRange(fieldnum(ProjHourSalesPrice, Resource));
                                    hcmWorker       = element.args().record();
                                    criteriaResource.value(queryValue(ResourceFacade::findByWorker(hcmWorker.RecId)));
                                    break;

                                case(tablenum(ResourceView)):
                                    criteriaResource    = qB.addRange(fieldnum(ProjHourSalesPrice, Resource));
                                    resourceView        = element.args().record();
                                    criteriaResource.value(queryValue(resourceView.RecId));
                                    break;

                                case(tablenum(ResourceCategoryView)):
                                    criteriaResourceCategory    = qB.addRange(fieldnum(ProjHourSalesPrice, ResourceCategory));
                                    resourceCategoryView        = element.args().record();
                                    criteriaResourceCategory.value(queryValue(resourceCategoryView.RecId));
                                    break;

                                case tableNum(SalesQuotationTable):
                                    criteriaProjId         = qB.addRange(fieldNum(ProjHourSalesPrice, psaCustAccount));
                                    salesQuotationTable    = element.args().record();
                                    criteriaProjId.value(salesQuotationTable.CustAccount + #star);
                                    break;

                                default:
                                    criteriaProjValidFor = qB.addRange(fieldNum(ProjHourSalesPrice, ProjValidFor));
                                    criteriaProjValidFor.value(int2str(TableGroupAll::Table));
                                    break;
                            }
                            break;

                        case #displayOptionGroup :

                            switch (element.args().dataset())
                            {
                                case tableNum(ProjTable),
                                     tableNum(ProjInvoiceTable),
                                     tableNum(CustTable),
                                     tableNum(ProjJournalTrans),
                                     tableNum(ProjForecastEmpl),
                                     tableNum(SMAAgreementTable),
                                     tableNum(SMAServiceOrderTable),
                                     tableNum(SalesQuotationTable):
                                    criteriaProjPriceGroup = qB.addRange(fieldNum(ProjHourSalesPrice, ProjPriceGroup));
                                    if (relationPriceGroup)
                                    {
                                        criteriaProjPriceGroup.value(relationPriceGroup);
                                    }
                                    break;

                                default:
                                    criteriaProjValidFor = qB.addRange(fieldNum(ProjHourSalesPrice, ProjValidFor));
                                    criteriaProjValidFor.value(int2str(TableGroupAll::GroupId));
                                    break;
                            }
                            break;

                        case #displayOptionAll :

                            criteriaProjValidFor = qB.addRange(fieldNum(ProjHourSalesPrice, ProjValidFor));
                            criteriaProjValidFor.value(int2str(TableGroupAll::All));
                            break;
                    }
                }
                projHourSalesPrice_ds.query(query);
            }
            else
            {
                switch (element.args().dataset())
                {
                    case tableNum(ProjTable), tableNum(SMAAgreementTable),tableNum(ProjForecastEmpl):
                        projHourSalesPrice_ds.autoQuery(false);
                        query   = new Query();
                        qB      = query.addDataSource(tableNum(ProjHourSalesPrice));

                        criteriaProjId      = qB.addRange(fieldNum(ProjHourSalesPrice, ProjId));
                        projHourSalesPrice_ds.query(query);
                        break;
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();

            projHourSalesPrice.CurrencyId = currencyCode;
            if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
            {
                projHourSalesPrice.ProjId = '';
                projHourSalesPrice.ProjPriceGroup = '';

                switch (displayOption.valueStr())
                {
                    case #displayOptionBlank :
                        projHourSalesPrice.ProjValidFor = TableGroupAll::Table;
                        break;

                    case #displayOptionTable :
                        if (element.args().dataset() == tableNum(ProjInvoiceTable))
                        {
                            projHourSalesPrice.psaProjInvoiceProjId = relationProjId;
                        }
                        else if (element.args().dataset() == tableNum(CustTable) ||
                                element.args().dataset() == tableNum(SalesQuotationTable))
                        {
                            projHourSalesPrice.psaCustAccount = relationCustAccount;
                        }
                        else
                        {
                            projHourSalesPrice.ProjId = relationProjId;
                        }

                        projHourSalesPrice.ProjValidFor = TableGroupAll::Table;
                        break;

                    case #displayOptionGroup :
                        projHourSalesPrice.ProjPriceGroup = relationPriceGroup;
                        projHourSalesPrice.ProjValidFor = TableGroupAll::GroupId;
                        break;

                    case #displayOptionAll :
                        projHourSalesPrice.ProjValidFor = TableGroupAll::All;
                        break;
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Only set the Sales Currency for a new record
                if (projHourSalesPrice.RecId == 0)
                {
                    projHourSalesPrice.CurrencyId = ProjTable::find(projHourSalesPrice.ProjId).currencyId();
                    projHourSalesPrice_ds.refresh();
                }
                if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                    && projHourSalesPrice.ProjId != ''
                    && (projHourSalesPrice.psaProjInvoiceProjId != '' || projHourSalesPrice.psaCustAccount != ''))
                {
                    projHourSalesPrice.ProjId = '';
                    throw error("@PSA11510");
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ProjValidFor</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.initPriceGroupFields();
                projHourSalesPrice.ProjId = '';
                projHourSalesPrice.ProjPriceGroup = '';
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    projHourSalesPrice.psaCustAccount = '';
                    projHourSalesPrice.psaProjInvoiceProjId = '';
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PSACustAccount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                    && projHourSalesPrice.psaCustAccount != ''
                    && (projHourSalesPrice.ProjId != '' || projHourSalesPrice.psaProjInvoiceProjId != ''))
                {
                    projHourSalesPrice.psaCustAccount = '';
                    throw error("@PSA11510");
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PSAProjInvoiceProjId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(Project))
                    && projHourSalesPrice.psaProjInvoiceProjId != ''
                    && (projHourSalesPrice.ProjId != '' || projHourSalesPrice.psaCustAccount != ''))
                {
                    projHourSalesPrice.psaProjInvoiceProjId = '';
                    throw error("@PSA11510");
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    ProjInvoiceTable::psaLookupProjInvoiceProjId(_formControl, projHourSalesPrice.psaCustAccount);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Resource</DataField>
						<Methods>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Determines whether the input to the Resource field is a valid ResourceId or not.
            /// </summary>
            /// <param name = "_formReferenceControl">
            /// The form control that is bound to the Resource field.
            /// </param>
            /// <returns>
            /// The <c>HcmResource</c> record buffer that references the selected record.
            /// </returns>
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                ResourceView ret;

                ret = super(_formReferenceControl);

                if (ret.RecId && !ResourceLookup::validateResource(ret.RecId, projHourSalesPrice))
                {
                    ret = null;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Opens the resource lookup.
            /// </summary>
            /// <param name = "_formReferenceControl">
            /// The form control that is bound to the Resource field.
            /// </param>
            /// <returns>
            /// The <c>HcmResource</c> record buffer that references the selected record.
            /// </returns>
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                return ResourceLookup::lookupResource(_formReferenceControl, projHourSalesPrice, false);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>ResourceCategory</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Filters out the "Team member" role  from the <c>ResourceCategory</c> lookup menu.
            /// </summary>
            /// <param name = "_formReferenceControl">
            /// The <c>ResourceCategory</c> reference control.
            /// </param>
            /// <returns>
            /// Returns the selected <c>ResourceCategoryView</c> object.
            /// </returns>
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                SysReferenceTableLookup     sysRefTableLookup;
                Query                       lookupQuery = new Query();
                QueryBuildDataSource        lookupQueryDataSource;
                QueryBuildDataSource        PSASchedRoleQueryDataSource;

                sysRefTableLookup = SysReferenceTableLookup::newParameters(tableNum(ResourceCategoryView), _formReferenceControl);

                sysRefTableLookup.addLookupfield(fieldNum(ResourceCategoryView, CategoryId));
                sysRefTableLookup.addLookupfield(fieldNum(ResourceCategoryView, Name));

                lookupQueryDataSource = lookupQuery.addDataSource(tableNum(ResourceCategoryView));

                PSASchedRoleQueryDataSource = lookupQueryDataSource.addDataSource(tableNum(PSASchedRole));
                PSASchedRoleQueryDataSource.relations(false);
                PSASchedRoleQueryDataSource.joinMode(JoinMode::ExistsJoin);
                PSASchedRoleQueryDataSource.addLink(fieldNum(ResourceCategoryView, RecId), fieldNum(PSASchedRole, RecId));
                PSASchedRoleQueryDataSource.addRange(fieldNum(PSASchedRole, DefaultResourceCategory)).value(SysQuery::valueNot(1));

                sysRefTableLookup.parmQuery(lookupQuery);

                return sysRefTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DisplayOption</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.reSelect();
            QuickFilter.applyFilter();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjHourSalesPrice_ResourceCategory</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets field access based on modification.
        /// </summary>
        /// <returns>
        /// The boolean of modification.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.setFieldAccess();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProjHourSalesPrice_CategoryId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets field access based on modified action.
        /// </summary>
        /// <returns>
        /// Boolean of modification.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.setFieldAccess();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ProjHourSalesPrice</Name>
			<Table>ProjHourSalesPrice</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CategoryId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_Worker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjPriceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjSalesPriceModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjSalesPricing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjValidFor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSACustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Resource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS73781</Caption>
		<DataSource xmlns="">ProjHourSalesPrice</DataSource>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<TitleDataSource xmlns="">ProjHourSalesPrice</TitleDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1193046470</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>ProjHourSalesPrice_CategoryId</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomFilter</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>DisplayOption</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PriceDisc</ConfigurationKey>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ComboType>List</ComboType>
								<Label>@Proj:Display</Label>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Relation</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>PriceDisc</ConfigurationKey>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS9114</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ProjHourSalesPrice_TransDate</Name>
						<ElementPosition>390451572</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Date</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransDate</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>ProjHourSalesPrice_ResourceCategory</Name>
						<HeightMode>Auto</HeightMode>
						<Type>ReferenceGroup</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<DataSource>ProjHourSalesPrice</DataSource>
						<ReferenceField>ResourceCategory</ReferenceField>
						<ReplacementFieldGroup>ResourceCategoryId</ReplacementFieldGroup>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_CategoryId</Name>
						<ElementPosition>585677358</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CategoryId</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormReferenceGroupControl">
						<Name>ProjHourSalesPrice_Resource</Name>
						<HeightMode>Auto</HeightMode>
						<Type>ReferenceGroup</Type>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<DataSource>ProjHourSalesPrice</DataSource>
						<ReferenceField>Resource</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjHourSalesPrice_ProjValidFor</Name>
						<ElementPosition>976128930</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjValidFor</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_ProjId</Name>
						<ElementPosition>1171354716</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjId</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_PSAProjInvoiceProjId</Name>
						<ElementPosition>1262866803</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PSAProjInvoiceProjId</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_PSACustAccount</Name>
						<ElementPosition>1354378890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>PSACustAccount</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_PriceGroup</Name>
						<ElementPosition>1366580502</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjPriceGroup</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ProjHourSalesPrice_CurrencyId</Name>
						<ElementPosition>1561806288</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>CurrencyId</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ProjHourSalesPrice_ProjSalesPriceModel</Name>
						<ElementPosition>1757032074</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjSalesPriceModel</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>ProjHourSalesPrice_Pricing</Name>
						<ElementPosition>1952257860</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@FieldDescriptions_ProjectManagementAndAccounting:ProjSalesPriceHour_ProjHourSalesPrice_Pricing</HelpText>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DataField>ProjSalesPricing</DataField>
						<DataSource>ProjHourSalesPrice</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
				</Controls>
				<AlternateRowShading>No</AlternateRowShading>
				<DataSource>ProjHourSalesPrice</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>