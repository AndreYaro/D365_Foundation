<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>FBTaxAssessmentCreate_BR</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class FBTaxAssessmentCreate_BR extends FormRun
{
    TaxType_BR          taxType;

    FBBookingPeriod_BR  fbBookingPeriod;

    FormControl         callerFormControl;
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        if (this.closedOk())
        {
            callerFormControl.dataSourceObject().executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        try
        {
            ttsbegin;
            if (this.createTaxAssessment())
            {
                this.createAllAssessmentDetails();
                
                if (taxType == TaxType_BR::PIS)
                {
                    taxType = TaxType_BR::COFINS;
                    this.createTaxAssessment();
                    this.createAllAssessmentDetails();
                }
                
                super();
            }
            ttscommit;
        }
        catch
        {
            infolog.setInfoLogLevel(SysInfologLevel::All);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
    private void createAllAssessmentDetails()
    {
        FBTaxAssessment_BR              fbTaxAssessment;

        while select fbTaxAssessment
            where fbTaxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && fbTaxAssessment.TaxType == taxType
        {
            FBTaxAssessmentDetailCreator_BR::construct(fbTaxAssessment).createAllAssessmentDetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessment</Name>
				<Source><![CDATA[
    private FBTaxAssessment_BR createTaxAssessment()
    {
        FBParametersPerState_BR parametersPerState = FBParametersPerState_BR::find(fbBookingPeriod.fiscalEstablishment().postalAddress());
        
        switch (taxType)
        {
            case TaxType_BR::IPI:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentIPI(fbBookingPeriod, ipiAssessmentPeriodicity.selection());
            
            case TaxType_BR::ICMS:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentICMS(fbBookingPeriod,
                                                                          FBGeneralAdjustmentCode_BR::find(parametersPerState.icmsGeneralAdjustmentCode).RecId,
                                                                          FBGeneralAdjustmentCode_BR::find(parametersPerState.ICMSGeneralAdjustmentCodeFixedAsset).RecId,
                                                                          FBFiscalDocumentAdjustmentCodeICMS_BR::find(parametersPerState.ICMSFiscalDocumentAdjustmentCode).RecId,
                                                                          FBFiscalDocumentAdjustmentCodeICMS_BR::find(parametersPerState.ICMSFiscalDocumentAdjCodeFixedAsset).RecId,
                                                                          FBObservationCodeTable_BR::find(parametersPerState.icmsfbObservationCodeTable).RecId);

            case TaxType_BR::ICMSST:
                FBTaxAssessment_BR taxAssessment = FBTaxAssessmentCreator_BR::createTaxAssessmentICMSST(fbBookingPeriod, state.valueStr());
                taxAssessment.CreditInventoryAdjustment = CreditInventoryAdjustment.value();
                taxAssessment.write();
                return taxAssessment;

            case TaxType_BR::ICMSDiff:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentICMSDIF(fbBookingPeriod, state.valueStr());

            case TaxType_BR::ISS:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentISS(fbBookingPeriod);

            case TaxType_BR::PIS:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentPIS(fbBookingPeriod);

            case TaxType_BR::COFINS:
                return FBTaxAssessmentCreator_BR::createTaxAssessmentCOFINS(fbBookingPeriod);

            case TaxType_BR::INSSCPRB:
                return FBTaxAssessment_BR::createTaxAssessmentINSSCPRB(fbBookingPeriod, state.valueStr());
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        callerFormControl = element.args().callerFormControl();

        switch (element.args().menuItemName())
        {
            case menuitemDisplayStr(FBTaxAssessmentICMSCreate_BR):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10001, funcName());
                taxType = TaxType_BR::ICMS;
                break;

            case menuitemDisplayStr(FBTaxAssessmentICMSSTCreate_BR):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10003, funcName());
                taxType = TaxType_BR::ICMSST;
                break;

            case menuitemDisplayStr(FBTaxAssessmentICMSDIFCreate_BR):
                taxType = TaxType_BR::ICMSDiff;
                break;

            case menuitemDisplayStr(FBTaxAssessmentIPICreate_BR):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10004, funcName());
                taxType = TaxType_BR::IPI;
                break;

            case menuitemDisplayStr(FBTaxAssessmentISSCreate_BR):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10005, funcName());
                taxType = TaxType_BR::ISS;
                break;

            case menuitemDisplayStr(FBTaxAssessmentPISCOFINSCreate_BR):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10006, funcName());
                taxType = TaxType_BR::PIS;
                break;

            case menuitemDisplayStr(FBTaxAssessmentINSSCPRBCreate_BR):
                taxType = TaxType_BR::INSSCPRB;
                break;

            default: throw error("@SYS22996");
        }

        state.allowEdit(taxType == TaxType_BR::ICMSST || taxType == TaxType_BR::ICMSDiff);

        element.initFromBookingPeriod();

        element.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBookingPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controls from <c>FBBookingPeriod_BR</c> table record
    /// </summary>
    public void initFromBookingPeriod()
    {
        if (callerFormControl.formRun().args().dataset() == tableNum(FBBookingPeriod_BR))
        {
            fbBookingPeriod = callerFormControl.formRun().args().record();
            
            bookingPeriod.text(fbBookingPeriod.FiscalEstablishmentId);
            bookingPeriod.allowEdit(false);
            
            element.updateControlsValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFBBookingPeriod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>FBBookingPeriod_BR</c> table buffer
    /// </summary>
    /// <param name="_common">
    /// A <c>Common</c> table buffer
    /// </param>
    public void setFBBookingPeriod_BR(Common _common)
    {
        if (_common.TableId == tableNum(FBBookingPeriod_BR))
        {
            fbBookingPeriod = _common;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlsValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controls values
    /// </summary>
    public void updateControlsValues()
    {
        switch (taxType)
        {
            case TaxType_BR::ICMSST:
                state.text('');
                break;

            case TaxType_BR::ICMS:
            case TaxType_BR::IPI:
            case TaxType_BR::ISS:
                state.text(fbBookingPeriod.fiscalEstablishment().postalAddress().State);
                break;
        }

        fiscalEstablishmentDataArea.text(fbBookingPeriod.FiscalEstablishmentDataArea);
        periodMonth.selection           (fbBookingPeriod.PeriodMonth);
        periodYear.value                (fbBookingPeriod.PeriodYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        if (taxType != TaxType_BR::IPI)
        {
            ipiAssessmentPeriodicity.visible(false);
        }

        if (taxType != TaxType_BR::PIS && taxType != TaxType_BR::COFINS && taxType != TaxType_BR::INSSCPRB)
        {
            State.visible(true);
        }
        else
        {
            State.visible(false);
        }

        CreditInventoryAdjustment.visible(taxType == TaxType_BR::ICMSST && State.valueStr() == fbBookingPeriod.fiscalEstablishment().postalAddress().State);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>BookingPeriod</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            FormRun formRun;
            Args    args;
            
            args = new Args(formStr(FBBookingPeriodLookup_BR));
            args.caller(element.args().caller());
            args.menuItemName(element.args().menuItemName());
            args.menuItemType(element.args().menuItemType());
            
            formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();
            
            this.performFormLookup(formRun);
            
            element.setFBBookingPeriod_BR(formRun.selectRecordModeSelectedRecord());
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateControlsValues();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>State</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            #ISOCountryRegionCodes

            if (taxType == TaxType_BR::ICMSDiff)
            {
                LogisticsAddressState::lookupStateId(this, SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoBR));
            }
            else
            {
                FiscalEstablishmentIEPerState_BR::lookupStateId(this, fbBookingPeriod.fiscalEstablishment().RecId, SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoBR));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            
            if (ret)
            {
                element.updateDesign();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS4082467</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>BookingPeriodGroup</Name>
						<ElementPosition>1286253223</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BookingPeriod</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS4082186</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FiscalEstablishmentDataArea</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>894784852</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>DataAreaId</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>State</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PeriodMonth</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FBBookingPeriodMonth_BR</ExtendedDataType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormIntegerControl">
								<Name>PeriodYear</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Integer</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FBBookingPeriodYear_BR</ExtendedDataType>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4082186</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TaxAssessmentIPI</Name>
						<ElementPosition>1521134248</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>IPIAssessmentPeriodicity</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<EnumType>FBIPIAssessmentPeriodicity_BR</EnumType>
								<Items />
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TaxAssessmentICMSST</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>CreditInventoryAdjustment</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FilterExpression>%1</FilterExpression>
								<HelpText>@FiscalBooks_SpedFiscal:FieldHelp_CreditInventoryAdjustment</HelpText>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@FiscalBooks_SpedFiscal:FieldLabel_CreditInventoryAdjustment</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>