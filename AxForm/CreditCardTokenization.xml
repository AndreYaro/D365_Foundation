<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CreditCardTokenization</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class CreditCardTokenization extends FormRun
{
    CreditCardTokenizationArgs tokenizationArgs;
    RetailTokenScope tokenScopeOverride;
    boolean isCustomerTokenScopeSelectionEnabled;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        // Initialize control values from parmObject
        tokenizationArgs = this.args().parmObject();
        CreditCardControl.parmTokenizationPageUrl(tokenizationArgs.parmTokenizationPageUrl());
        CreditCardControl.parmTokenizationContent(tokenizationArgs.parmTokenizationContent());
        CreditCardControl.parmTokenizationPageSubmitUrl(tokenizationArgs.parmTokenizationPageSubmitUrl());
        CreditCardControl.parmTokenizationMessageOrigin(tokenizationArgs.parmTokenizationMessageOrigin());

        tokenScopeOverride = tokenizationArgs.parmTokenScopeOverride();
        isCustomerTokenScopeSelectionEnabled = tokenizationArgs.parmPromptForTokenScope();

        if (RetailNonRecurringTokenFeatureExposure::isEnabled())
        {
            if (tokenScopeOverride != RetailTokenScope::Unknown)
            {
                // When the token scope override is set, the scope cannot be selected and 
                // no warnings are shown since it is assumed that additional messaging is handled by the caller
                this.setTokenScopeGroupMode(false, false, tokenScopeOverride == RetailTokenScope::Customer);
            }
            else if (isCustomerTokenScopeSelectionEnabled || tokenizationArgs.parmIsSupportSalesOrderScope())
            {
                // In this case we allow to select customer scope.
                if (tokenizationArgs.parmIsSupportSalesOrderScope())
                {
                    // In this case we are capturing sales order scope token but also allowing to select
                    // Customer order scope for the token.
                    warning("@Retail:RetailNonRecurringTokenIsNotAllowedToCreateWarning");
                    isCustomerTokenScopeSelectionEnabled = true;
                }

                this.setTokenScopeGroupMode(true, true, false);
            }
            else
            {
                // In this case we assume that the form was called by legacy caller
                // and we are capturing Customer scope token for backward compatibility.
                this.setTokenScopeGroupMode(false, false, true);
            }
        }
        else
        {
            // when the feature is not enabled we fallback to previous logic that presents customer scope
            // selection checkbox control when corresponding parameter is set.
            if (isCustomerTokenScopeSelectionEnabled)
            {
                this.setTokenScopeGroupMode(true, true, false);
            }
            else
            {
                // In this case we assume that the form was called by legacy caller
                // and we are capturing Customer scope token for backward compatibility.
                this.setTokenScopeGroupMode(false, false, true);
            }
        }

        NoteStringControl.text(tokenizationArgs.parmNote());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTokenScopeGroupMode</Name>
				<Source><![CDATA[
    private void setTokenScopeGroupMode(boolean _isVisible, boolean _isEnabled, boolean _isChecked)
    {
        ScopeTokenGroupControl.visible(_isVisible);
        IsCustomerScopedTokenCheckBoxControl.enabled(_isEnabled);
        IsCustomerScopedTokenCheckBoxControl.checked(_isChecked);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ViewDisclaimer</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display the card payment disclaimer.
        /// </summary>
        public void clicked()
        {
            str strMessage = this.getDisclaimerText();
            str strTitle = "@Retail:ViewCardPaymentDisclaimerCaption";
            Box::info(strMessage, strTitle);
        }

]]></Source>
					</Method>
					<Method>
						<Name>getDisclaimerText</Name>
						<Source><![CDATA[
        private str getDisclaimerText()
        {
            str strMessage;
            if (FeatureStateProvider::isFeatureEnabled(RetailRestrictCreditCardUsageFeature::instance()))
            {
                strMessage = "@Retail:ViewCardPaymentDisclaimerForRestrictFeatureText";
            }
            else
            {
                strMessage = "@Retail:ViewCardPaymentDisclaimerText";
            }

            return strMessage;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initialize</Name>
						<Source><![CDATA[
        /// <summary>
        /// Default the help text for the disclaimer.
        /// </summary>
        protected void initialize()
        {
            super();

            this.helpText(this.getDisclaimerText());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreditCardControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>onTokenized</Name>
						<Source><![CDATA[
        /// <summary>
        /// Handles token access code when tokenization is completed.
        /// </summary>
        /// <param name = "tokenAccessCode">The token access code.</param>
        public void onTokenized(str tokenAccessCode)
        {
            super(tokenAccessCode);

            // Save token access code and other addition information to tokenization object
            // which is part of form args.
            tokenizationArgs.parmtokenAccessCode(tokenAccessCode);
            tokenizationArgs.parmNote(NoteStringControl.text());

            if (FeatureStateProvider::isFeatureEnabled(RetailRestrictCreditCardUsageFeature::instance()))
            {
                if (tokenScopeOverride != RetailTokenScope::Unknown)
                {
                    tokenizationArgs.parmTokenScope(tokenScopeOverride);
                }
                else if (IsCustomerScopedTokenCheckBoxControl.value())
                {
                    tokenizationArgs.parmTokenScope(RetailTokenScope::Customer);
                }
                else if (RetailNonRecurringTokenFeatureExposure::isEnabled() && !tokenizationArgs.parmIsSupportSalesOrderScope())
                {
                    tokenizationArgs.parmTokenScope(RetailTokenScope::NonRecurring);
                }
                else
                {
                    tokenizationArgs.parmTokenScope(RetailTokenScope::SalesOrder);
                }
            }
            else
            {
                tokenizationArgs.parmTokenScope(RetailTokenScope::Unknown);
            }

            // Close form.
            element.closeOk();
        }

]]></Source>
					</Method>
					<Method>
						<Name>onCancelled</Name>
						<Source><![CDATA[
        /// <summary>
        /// Triggers when the tokenization is cancelled.
        /// </summary>
        public void onCancelled()
        {
            super();

            // Tokenization is cancelled.
            // Close form.
            element.closeCancel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ScopeTokenViewDisclaimer</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display the card payment disclaimer.
        /// </summary>
        public void clicked()
        {
            str strMessage = "@Retail:ViewCardPaymentScopedTokenDisclaimerText";
            str strTitle = "@Retail:ViewCardPaymentDisclaimerCaption";
            Box::info(strMessage, strTitle);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            // Start tokenizing the card
            CreditCardControl.tokenizeAsync();

            // Do not close the form yet.
            // Form will be closed when tokenization finishes.
            // super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Cancel</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Cancel the tokenization
            CreditCardControl.cancelAsync();

            // Do not close the form yet.
            // Form will be closed when cancellation finishes.
            // super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Retail:CreditCardTokenizationCaption</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>DisclaimerActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>DisclaimerButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ViewDisclaimer</Name>
								<HelpText>@Retail:ViewCardPaymentDisclaimerText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Big>Yes</Big>
								<NormalImage>Info</NormalImage>
								<Text>@Retail:ViewCardPaymentDisclaimer</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CreditCardControlGroup</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>CreditCardControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HeightMode>SizeToAvailable</HeightMode>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>CreditCardControl</Name>
							<ExtensionComponents />
							<ExtensionProperties />
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ScopeTokenGroupControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>IsCustomerScopedTokenCheckBoxControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CheckBox</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:CreditCardTokenizationIsCustomerScopedToken</Label>
								<Style>Checkbox</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ScopeTokenViewDisclaimer</Name>
								<HelpText>@Retail:ViewCardPaymentScopedTokenDisclaimerText</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Big>Yes</Big>
								<NormalImage>Info</NormalImage>
								<Style>Link</Style>
								<Text>@Retail:ViewCardPaymentDisclaimer</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalRight</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>AdditionalInfomationTabPage</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>NoteStringControl</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS116740</Label>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@Retail:CreditCardTokenizationAdditionalGroup</Caption>
						<FastTabExpanded>Yes</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>