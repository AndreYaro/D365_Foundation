<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RAssetLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RAssetLookup extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        element.selectMode(accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormControl callingControl  = SysTableLookup::getCallerControl(element.args());
        boolean filterLookup = false;

        if (callingControl is FormStringControl)
        {
            FormStringControl formStringControl = callingControl as FormStringControl;

            filterLookup = SysTableLookup::filterLookupPreRun(formStringControl, accountNum, rAssetTable_ds);

            super();

            SysTableLookup::filterLookupPostRun(filterLookup, formStringControl.text(), accountNum, rAssetTable_ds);
        }
        else if (callingControl is SegmentedEntryControl)
        {
            SegmentedEntryControl segmentedEntryControl = callingControl as SegmentedEntryControl;

            filterLookup = SegmentedEntryTableLookup::filterSegmentedLookupPreRun(segmentedEntryControl, accountNum, rAssetTable_ds);

            super();

            SysTableLookup::filterLookupPostRun(filterLookup, segmentedEntryControl.valueStr(), accountNum, rAssetTable_ds);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Override this method to support custom server form call backs
    ///  in the SegmentedEntryControl.
    /// </summary>
    /// <param name = "_selectedRecord">The record selected in the lookup.</param>
    public void closeSelectRecord(Common _selectedRecord)
    {
        FormControl callingControl = SysTableLookup::getCallerControl(element.args());

        if (callingControl is SegmentedEntryControl)
        {
            SegmentedEntryControl sec = callingControl as SegmentedEntryControl;
            RAssetTable rAstTable = _selectedRecord as RAssetTable;
            sec.updateCustomLookupNaturalKey(rAstTable.AccountNum);
            this.close();
        }
        else
        {
            super(_selectedRecord);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RAssetTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query()
                .dataSourceNo(1)
                .clearDynalinks();
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Common common = element.args().record();
            
            RAssetTransType assetTransType;
            if (element.args().parm())
            {
                assetTransType = str2enum(assetTransType, element.args().parm());
            }
            else
            {
                assetTransType = RAssetTransType::Depreciation;
            }

            QueryBuildRange statusQueryBuildRange = this.query()
                .dataSourceNo(1)
                .addRange(fieldNum(RAssetTable, Status));

            switch (common.TableId)
            {
                case tableNum(RAssetPurchTrans):
                    RAssetPurchTrans rAssetPurchTrans = common as RAssetPurchTrans;

                    switch (rAssetPurchTrans.TableTableId)
                    {
                        case tableNum(PurchLine):
                            PurchLine purchLine = rAssetPurchTrans.purchLine();

                            statusQueryBuildRange.value(queryValue(purchLine.creditNoteLine()
                                ? RAssetStatus::PurchInvoice
                                : RAssetStatus::NoAcquisition));

                            if (purchLine.ItemId)
                            {
                                this.query()
                                    .dataSourceNo(1)
                                    .addRange(fieldNum(RAssetTable, AssetGroup))
                                    .value(queryValue(InventTable::find(purchLine.ItemId).AssetGroupId_RU));
                            }
                            break;

                        case tableNum(VendInvoiceInfoLine):
                            statusQueryBuildRange.value(queryValue(RAssetStatus::NoAcquisition));
                            
                            VendInvoiceInfoLine infoLine = rAssetPurchTrans.vendInvoiceInfoLine() as VendInvoiceInfoLine;
                            if (infoLine.ItemId)
                            {
                                this.query()
                                    .dataSourceNo(1)
                                    .addRange(fieldNum(RAssetTable, AssetGroup))
                                    .value(queryValue(InventTable::find(infoLine.ItemId).AssetGroupId_RU));
                            }
                            break;

                        case tableNum(LedgerJournalTrans):
                            statusQueryBuildRange.value(queryValue(RAssetStatus::NoAcquisition));
                            break;

                        default:
                            break;
                    }

                    QueryBuildDataSource queryBuildDataSource = this.query()
                        .dataSourceNo(1)
                        .addDataSource(tableNum(RAssetScrap));

                    queryBuildDataSource.joinMode(JoinMode::NoExistsJoin);
                    queryBuildDataSource.relations(true);

                    queryBuildDataSource.addRange(fieldNum(RAssetScrap, Assembling))
                        .value(enum2str(NoYes::Yes));

                    queryBuildDataSource.addRange(fieldNum(RAssetScrap, StornoRecId))
                        .value(SysQuery::valueEmptyString());

                    break;

                case tableNum(SalesLine):
                    SalesLine salesLine = common as SalesLine;

                    if (salesLine.creditNoteLine())
                    {
                        RAssetStatusType::allowStatusRangeValue(this.query(),
                            assetTransType,
                            identifierStr(allowDisposalSaleReverse));
                    }
                    else
                    {
                        RAssetStatusType::allowStatusRangeValue(this.query(), assetTransType);
                    }

                    if (common.(fieldNum(SalesLine,ItemId)))
                    {
                        this.query()
                            .dataSourceNo(1)
                            .addRange(fieldNum(RAssetTable, AssetGroup))
                            .value(queryValue(InventTable::find(common.(fieldNum(SalesLine,ItemId))).AssetGroupId_RU));
                    }
                    break;

                case tableNum(CustInvoiceLine):
                    CustInvoiceLine custInvoiceLine = common as CustInvoiceLine;
                    if (custInvoiceLine.AmountCur < 0)  // creditNote
                    {
                        RAssetStatusType::allowStatusRangeValue(this.query(),
                            assetTransType,
                            identifierStr(allowDisposalSaleReverse));
                    }
                    else
                    {
                        RAssetStatusType::allowStatusRangeValue(this.query(), assetTransType);
                        
                        CustInvoiceLineMapping lineMapping;
                        select firstonly RecId, ParentInvoiceLineRecId from lineMapping
                            where lineMapping.CustInvoiceLineRecId == custInvoiceLine.RecId;

                        if (lineMapping
                            && lineMapping.ParentInvoiceLineRecId)
                        {
                            statusQueryBuildRange.value(
                                strFmt('(%1 == "%2")', fieldStr(RAssetTable, AccountNum), CustInvoiceLine::find(lineMapping.ParentInvoiceLineRecId).AssetId_RU));
                        }
                    }
                    break;

                case tableNum(RAssetInventoryTable):
                    RAssetStatusType::allowStatusRangeValue(this.query(), assetTransType);

                    if (common.(fieldNum(RAssetInventoryTable, StartDate)))
                    {
                        this.query()
                            .dataSourceNo(1)
                            .addRange(fieldNum(RAssetTable, AcquisitionDate))
                            .value(queryRange(dateNull(), common.(fieldNum(RAssetInventoryTable ,StartDate))));

                        queryBuildDataSource = this.query()
                            .dataSourceNo(1)
                            .addDataSource(tableNum(RAssetMoveHist));

                        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
                        queryBuildDataSource.relations(true);
                        queryBuildDataSource.addSortField(fieldNum(RAssetMoveHist, ChangeDate), SortOrder::Descending);

                        queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, ChangeDate))
                            .value(queryRange(dateNull(), common.(fieldNum(RAssetInventoryTable, StartDate))));

                        queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, NewLocation))
                            .value(queryValue(common.(fieldNum(RAssetInventoryTable, Location))));

                        queryBuildDataSource = this.query()
                            .dataSourceNo(1)
                            .addDataSource(tableNum(RAssetStandards));

                        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                        queryBuildDataSource.relations(true);
                    }
                    break;

                case tableNum(LedgerJournalTrans):
                    LedgerJournalTrans ledgerJournalTrans = common as LedgerJournalTrans;

                    if (element.args().parm()
                        && ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::AssetBudgets_RU)
                    {
                        RAssetStatusType::allowStatusRangeValue(this.query(), assetTransType);
                    }
                    break;

                default:
                    RAssetStatusType::allowStatusRangeValue(this.query(), assetTransType);
                    break;
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RAssetTable</Name>
			<Table>RAssetTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNumMain</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountNumReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcquisitionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcquisitionPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ActNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessedTaxType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetBelonged</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetReplaceCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetUse</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Barcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BuildingStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DenominatorShare</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Documents</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuaranteeDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsPolicyNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceDate1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceDate2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuredValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvKartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvKartNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LandCadastralNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LandTaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LandType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Make</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Model</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumeratorShare</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PassportNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchInternalInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotaTypesRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegisterRemovalDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SerialNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxBaseUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportTaxCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VatRefundingStartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleEcoClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleModel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehiclePlateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehiclePlateNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VehicleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WrkCtrId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<OnlyFetchActive>Yes</OnlyFetchActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>RAssetNumIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS2483</Caption>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">SizeToContent</HeightMode>
		<Pattern xmlns="">LookupGridOnly</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">Lookup</Style>
		<TitleDataSource xmlns="">RAssetTable</TitleDataSource>
		<WidthMode xmlns="">SizeToAvailable</WidthMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<AllowEdit>No</AllowEdit>
				<ElementPosition>1073741823</ElementPosition>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Grid</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AccountNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountNum</DataField>
						<DataSource>RAssetTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AssetTable_Name</Name>
						<ElementPosition>1288490187</ElementPosition>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Name</DataField>
						<DataSource>RAssetTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>AssetTable_Status</Name>
						<ElementPosition>1717986916</ElementPosition>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Status</DataField>
						<DataSource>RAssetTable</DataSource>
						<Items />
					</AxFormControl>
				</Controls>
				<DataSource>RAssetTable</DataSource>
				<MultiSelect>No</MultiSelect>
				<ShowRowLabels>No</ShowRowLabels>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>