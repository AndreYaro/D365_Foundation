<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>SettlementWriteOffDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class SettlementWriteOffDialog extends FormRun
{
    private SettlementWriteOffIFormInterface callingInterface;
    private SettlementWriteOffController writeOffController;
    private SettlementWriteOffOrigin writeOffOrigin;
    private ModuleCustVend module;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        // Require a specified module
        if (element.args() && element.args().parmEnumType() == enumNum(ModuleCustVend))
        {
            module = element.args().parmEnum();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        // Require the SettlementWriteOffIFormInterface
        if (element.args() && element.args().caller() && element.args().caller() is SettlementWriteOffIFormInterface)
        {
            callingInterface = element.args().caller() as SettlementWriteOffIFormInterface;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        this.initStaticText();
        this.initFieldsFromOrigin();
        this.initAndCalculateAdjustmentAmount();

        SettlementWriteOffDialogTmp.linkPhysicalTableInstance(this.populateDialogTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCalculateAdjustmentAmount</Name>
				<Source><![CDATA[
    private void initAndCalculateAdjustmentAmount()
    {
        Common originator = callingInterface.getOriginator();

        SettlementWriteOffDefaults defaults = SettlementWriteOffDefaultsFactory::constructDefaults(module);

        writeOffController = SettlementWriteOffController::newFromTransaction(
            SettlementWriteOffTransactionContext::newFromRecord(originator),
            SettlementWriteOffCalculatorFactory::constructCalculator(writeOffOrigin, defaults),
            SettlementWriteOffJournalProcessorFactory::constructJournalProcessor(writeOffOrigin, defaults));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldsFromOrigin</Name>
				<Source><![CDATA[
    private void initFieldsFromOrigin()
    {
        writeOffOrigin = callingInterface.getSettlementWriteOffOrigin();

        if (writeOffOrigin == SettlementWriteOffOrigin::Account)
        {
            EditInJournal.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStaticText</Name>
				<Source><![CDATA[
    private void initStaticText()
    {
        if (module == ModuleCustVend::Cust)
        {
            SettleRemainderToAccount.label("@AccountsReceivable:CustSettlementWriteOffDialogAccount");
        }
        else if (module == ModuleCustVend::Vend)
        {
            SettleRemainderToAccount.label("@AccountsPayable:VendSettlementWriteOffDialogAccount");
        }

        SettlementWriteOffReasonCodeResolver reasonCodeResolver = SettlementWriteOffReasonCodeResolverFactory::constructResolver(module);
        AdjustmentReasonDescription.text(reasonCodeResolver.getReasonCodeDescription(reasonCodeResolver.getDefaultReasonCode()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDialogTmp</Name>
				<Source><![CDATA[
    private SettlementWriteOffDialogTmp populateDialogTmp()
    {
        SettlementWriteOffReasonCodeResolver reasonCodeResolver = SettlementWriteOffReasonCodeResolverFactory::constructResolver(module);

        return SettlementWriteOffDialogTmp::insertAdjustment(
            reasonCodeResolver.getDefaultAccount(),
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
            writeOffController.getPotentialAdjustmentAmount(),
            reasonCodeResolver.getDefaultReasonCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the form on confirmation.
    /// </summary>
    /// <remarks>
    /// Confirmation of the settlement remainder begins the settle remainder process.
    /// Both the dialog and the parent form are closed.
    /// If a journal is created, then the user will be redirected to that form.
    /// </remarks>
    public void closeOk()
    {
        callingInterface.setSettlementWriteOffInProgress(true);

        super();

        if (writeOffOrigin == SettlementWriteOffOrigin::Account)
        {
            // This must occur prior to creating new write off data to guarantee that
            // that the transactions have been settled and SpecTrans cleared
            callingInterface.settlementWriteOffPost();
        }

        this.closeParentForm();

        SettlementWriteOffJournalContract journalContract = this.createSettlementWriteOffJournalContract();
        LedgerJournalId writeOffJournalNum = writeOffController.processSettlementWriteOff(journalContract);

        if (writeOffOrigin == SettlementWriteOffOrigin::Account && SettlementWriteOffDialogTmp.EditInJournal)
        {
            this.transferUIToJournal(writeOffJournalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementWriteOffJournalContract</Name>
				<Source><![CDATA[
    private SettlementWriteOffJournalContract createSettlementWriteOffJournalContract()
    {
        SettlementWriteOffJournalContract journalContract;
        if (writeOffOrigin == SettlementWriteOffOrigin::Account)
        {
            CustVendTable custVendTable = callingInterface.getOriginator() as CustVendTable;

            journalContract = SettlementWriteOffJournalContract::newFromAccount(custVendTable.AccountNum);
            journalContract.parmAdjustmentCurrency(custVendTable.Currency);
        }
        else if (writeOffOrigin == SettlementWriteOffOrigin::PaymentJournal)
        {
            LedgerJournalTrans ledgerJournalTrans = callingInterface.getOriginator() as LedgerJournalTrans;

            journalContract = SettlementWriteOffJournalContract::newFromJournal(ledgerJournalTrans.RecId);
            journalContract.parmAdjustmentCurrency(ledgerJournalTrans.CurrencyCode);
        }

        journalContract.parmAdjustmentAccount(SettlementWriteOffDialogTmp.AdjustmentAccountDimension);
        journalContract.parmAdjustmentDate(SettlementWriteOffDialogTmp.AdjustmentDate);
        journalContract.parmAdjustmentReasonCode(SettlementWriteOffDialogTmp.AdjustmentReasonCode);
        journalContract.parmTransferAccount(SettlementWriteOffDialogTmp.TransferAccount);
        journalContract.parmShouldPostCreatedJournal(!SettlementWriteOffDialogTmp.EditInJournal);

        return journalContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferUIToJournal</Name>
				<Source><![CDATA[
    private void transferUIToJournal(LedgerJournalId _journalNum)
    {
        MenuFunction menuFunction;

        if (module == ModuleCustVend::Cust)
        {
            menuFunction = new MenuFunction(menuItemDisplayStr(LedgerJournalTable_CustPaym), MenuItemType::Display);
        }
        else if (module == ModuleCustVend::Vend)
        {
            menuFunction = new MenuFunction(menuItemDisplayStr(LedgerJournalTable5), MenuItemType::Display);
        }

        LedgerJournalTable writeOffJournalHeader = LedgerJournalTable::find(_journalNum);

        Args args = new Args();
        args.lookupRecord(writeOffJournalHeader);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeParentForm</Name>
				<Source><![CDATA[
    private void closeParentForm()
    {
        element.args().caller().closeOk();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableOk</Name>
				<Source><![CDATA[
    private void enableOk()
    {
        Ok.enabled(SettlementWriteOffDialogTmp.AdjustmentAccountDimension != 0);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SettlementWriteOffDialogTmp</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            element.enableOk();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>AdjustmentReasonCode</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                SettlementWriteOffReasonCodeResolverFactory::constructResolver(module).lookupReasonCode(_formControl, _filterStr);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                SettlementWriteOffReasonCodeResolver reasonCodeResolver = SettlementWriteOffReasonCodeResolverFactory::constructResolver(module);

                SettlementWriteOffDialogTmp.AdjustmentAccountDimension = reasonCodeResolver.mergeDimensionsWithReasonCodeMainAccount(SettlementWriteOffDialogTmp.AdjustmentReasonCode, SettlementWriteOffDialogTmp.AdjustmentAccountDimension);
                AdjustmentReasonDescription.text(reasonCodeResolver.getReasonCodeDescription(SettlementWriteOffDialogTmp.AdjustmentReasonCode));

                element.enableOk();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>AdjustmentAccount</Name>
				<Type>SegmentedEntry</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret = super();

            element.enableOk();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SettleRemainderToAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if (module == ModuleCustVend::Cust)
            {
                CustTable::lookupCustomer(this, curExt(), CustTableLookupDisplayType::Default);
            }
            else if (module == ModuleCustVend::Vend)
            {
                VendTable::lookupVendor(this, curExt());
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SettlementWriteOffDialogTmp</Name>
			<Table>SettlementWriteOffDialogTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdjustmentAccountDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdjustmentReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EditInJournal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferAccount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:SettlementWriteOffSettleRemainder</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SecondaryTitle</Name>
				<AllowEdit>No</AllowEdit>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@CashManagement:SettlementWriteOffDialogSecondaryCaption</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Content</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AdjustmentAmount</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AdjustmentAmount</DataField>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AdjustmentDate</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AdjustmentDate</DataField>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AdjustmentReasonCode</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AdjustmentReasonCode</DataField>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>AdjustmentReasonDescription</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Description</ExtendedDataType>
						<Label>@SYS25589</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormSegmentedEntryControl">
						<Name>AdjustmentAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>SegmentedEntry</Type>
						<FormControlExtension>
							<Name>SegmentedEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>String</Type>
									<Value>LedgerDimensionAccountController</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmAccountTypeEnumName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIsDefaultAccount</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValidateBlockedForManualEntry</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLockMainAccountSegment</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPostingType</Name>
									<Type>Enum</Type>
									<TypeName>LedgerPostingType</TypeName>
									<Value>LedgerJournal</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeTotalAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmIncludeFinancialAccounts</Name>
									<Type>Enum</Type>
									<TypeName>NoYes</TypeName>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
						<ReferenceField>AdjustmentAccountDimension</ReferenceField>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SettleRemainderToAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransferAccount</DataField>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>EditInJournal</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CheckBox</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataField>EditInJournal</DataField>
						<DataSource>SettlementWriteOffDialogTmp</DataSource>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Ok</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@CashManagement:SettlementWriteOffSettleRemainder</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS12778</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>