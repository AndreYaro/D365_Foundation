<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailCustEmailNotificationLog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailCustEmailNotificationLog extends FormRun
{
    boolean                             recordChanged, resendClick;
    Str1260                             searchTextValue;
    str                                 receiverEmailAddressNew, receiverEmailAddressOrg;
    MCREMailSearchType                  mCREMailSearchType;
    QueryBuildRange                     queryBuildRange;
    FormRun                             caller;
    RetailEventNotificationService      retailEventNotificationService;
    TmpRetailEventNotificationLog       tmpRetailEventNotificationLog;
    CustTable                           custTable;
    #define.noOfRecords(50)

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        super();

        retailEventNotificationService = new RetailEventNotificationService();

        // Get the caller form and then find the customer.
        custTable =  element.args().record();
        element.resetFiltersAndRefreshUI(custTable.AccountNum);
        element.updateDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisplay</Name>
				<Source><![CDATA[
    void updateDisplay()
    {
        //Refresh the HTML preview of the message body.
        notificationPreview.parmHtml(RetailCustEmailNotificationLog.EmailMessage);
        RetailCustEmailNotificationLog_ReceiverEmailAddress.text(RetailCustEmailNotificationLog.ReceiverEmailAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if form can be closed.
    /// </summary>
    /// <returns>True if the form can be closed; otherwise, false.</returns>
    public boolean canClose()
    {
        boolean       ret;

        ret = super();

        this.SendMailOrDiscardChanges();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTempData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the TmpRetailEventNotificationLog table.
    /// </summary>
    private void clearTempData()
    {
        ttsBegin;

        // Clear all the records from tmpRetailEventNotificationLog table.
        delete_from tmpRetailEventNotificationLog;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderSearchString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find sales order serach string.
    /// </summary>
    /// <param name="salesId">
    /// Sales id.
    /// </param>
    /// <param name="searchValue">
    /// The search value.
    /// </param>
    /// <param name="_forKeywordSearch">
    /// Whether, for keyword search.
    /// </param>
    /// <returns>
    /// Sales order search string.
    /// </returns>
    private str getSalesOrderSearchString(SalesId salesId, str1260 searchValue, boolean _forKeywordSearch = false )
    {
        str         searchString;
        SalesTable  salesTable, salesTableLocal;

        // Find the salestable record for specified sales id.
        salesTableLocal =  SalesTable::find(salesId);

        // Check the current sales order record against search string and
        // get the recids for that matches the specified search criteria.
        select RecId, SalesId from salesTable
        where salesTable.SalesId like searchValue && salesTable.RecId == salesTableLocal.RecId;

        if (salesTable.RecId)
        {
            if (_forKeywordSearch)
            {
                searchString = searchString + strFmt( ' || (%1.%2 == %3', tablestr(RetailEventNotificationLog),
                                                                fieldstr(RetailEventNotificationLog, SalesOrder),
                                                                queryValue(salesTable.RecId) +') ');
            }
            else
            {
                searchString = searchString + queryValue(salesTable.RecId);
            }
        }

        return searchString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRunEmailSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filter the email records as per applied criteria.
    /// </summary>
    void mcrRunEmailSearch()
    {
        str queryValue;

        RetailCustEmailNotificationLog_ds.query().dataSourceNo(1).clearRanges();

        if (EmailSearchType.selection() == MCREMailSearchType::EmailDate)
        {
            searchTextValue = SearchDate.valueStr();
        }
        else
        {
            searchTextValue = searchtext.valueStr();
        }

        // If there is search criteria then only apply filtering. Otherwise populate top 50 records only.
        if (searchTextValue != '')
        {
            this.resetFiltersAndRefreshUI(custTable.AccountNum, false);

            switch (EmailSearchType.selection())
            {
                casE MCREMailSearchType::EmailDate:

                    queryBuildRange = RetailCustEmailNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailCustEmailNotificationLog, SentDateTime));
                    queryBuildRange.value(searchTextValue);
                    break;

                case MCREMailSearchType::EmailAddress:

                    queryBuildRange = RetailCustEmailNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailCustEmailNotificationLog,ReceiverEmailAddress));
                    queryBuildRange.value(searchTextValue);
                    break;

                case MCREMailSearchType::SalesOrderNumber:

                    queryBuildRange = RetailCustEmailNotificationLog_ds.query().dataSourceNo(1).addRange(fieldNum(RetailCustEmailNotificationLog,SalesOrderNo));
                    queryBuildRange.value(searchTextValue);
                    break;

                case MCREMailSearchType::DefaultEmailSearch:

                    queryBuildRange =  RetailCustEmailNotificationLog_ds.query().dataSourceNo(1).addRange((fieldNum(RetailCustEmailNotificationLog,EmailMessage)), 1, QueryRangeType::FullText);

                    queryValue =  '((RetailCustEmailNotificationLog.EmailMessage freetext "' + searchTextValue + '")|| (RetailCustEmailNotificationLog.SalesOrderNo like "' + searchTextValue + '") || (RetailCustEmailNotificationLog.EmailSubject like "' + searchTextValue + '") || (RetailCustEmailNotificationLog.ReceiverEmailAddress like  "' + searchTextValue + '"))';
                    queryBuildRange.value(queryValue);
                    sleep(10000); // 10 seconds sleep time for query to filter complete execution.
                    break;
            }

            RetailCustEmailNotificationLog_ds.executeQuery();
            this.getFilteredRecord();
        }
        else
        {
            this.resetFiltersAndRefreshUI(custTable.AccountNum, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// For resending the mail.
    /// </summary>
    /// <param name="isModifiedEmailAddress">
    /// If receiever mail address has been modified.
    /// </param>
    public void resendMail(boolean isModifiedEmailAddress = false)
    {
        str                                 fromAddr, toAddr, subject, message;
        RetailEventNotificationLog          retailEventNotificationLog;

        // If receiver email has been modified, then set the email fields from tmpRetailEventNotificationLog table.
        if (isModifiedEmailAddress)
        {
            fromAddr = tmpRetailEventNotificationLog.SenderEmailAddress;
            toAddr = receiverEmailAddressNew;
            subject = tmpRetailEventNotificationLog.EmailSubject;
            message = tmpRetailEventNotificationLog.EmailMessage;
        }
        else
        {
            // Set the email fields from current record.
            fromAddr = retailCustEmailNotificationLog.SenderEmailAddress;
            toAddr = retailCustEmailNotificationLog.ReceiverEmailAddress;
            subject = retailCustEmailNotificationLog.EmailSubject;
            message = retailCustEmailNotificationLog.EmailMessage;
        }

        // Check, if receiver mail address is valid or not.
        if (SysEmailDistributor::validateEmail(toAddr))
        {
            retailEventNotificationService.trySendEmail(RetailEventNotificationSendEmailParameters::construct(fromAddr, toAddr, subject, message));

            ttsbegin;

            retailEventNotificationLog.SenderEmailAddress = fromAddr;
            retailEventNotificationLog.ReceiverEmailAddress = toAddr;
            retailEventNotificationLog.EmailSubject = subject;
            retailEventNotificationLog.EmailMessage = message;
            retailEventNotificationLog.SentDateTime = DateTimeUtil::utcNow();

            // If receiver email has been modified, then set the  fields from tmpRetailEventNotificationLog table.
            if (isModifiedEmailAddress)
            {
                retailEventNotificationLog.DefaultLanguage = tmpRetailEventNotificationLog.DefaultLanguage;
                retailEventNotificationLog.RefRecId =  tmpRetailEventNotificationLog.RefRecId;
                retailEventNotificationLog.EventNotificationType =  tmpRetailEventNotificationLog.EventNotificationType;
                retailEventNotificationLog.SalesOrder =  tmpRetailEventNotificationLog.SalesOrder;
            }
            else
            {
                // Set the  fields values from current record.
                retailEventNotificationLog.DefaultLanguage = retailCustEmailNotificationLog.DefaultLanguage;
                retailEventNotificationLog.RefRecId =  retailCustEmailNotificationLog.RefRecId;
                retailEventNotificationLog.EventNotificationType =  retailCustEmailNotificationLog.EventNotificationType;
                retailEventNotificationLog.SalesOrder =  retailCustEmailNotificationLog.SalesOrder;
            }

            retailEventNotificationLog.insert();

            ttscommit;

            info(strFmt("@SYS73254", "@SYP4860578"));
            recordChanged = false;
            element.mcrRunEmailSearch();
        }
        else
        {
            recordChanged = false;
            info("@SYS96644");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SendMailOrDiscardChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show a dialog button asking to send mail to modified receiver or discard the change in receiver email address.
    /// </summary>
    public void SendMailOrDiscardChanges()
    {
        DialogButton  dialogButton;

        // Check, if receiveremailaddress has been changed and mail has not been sent.
        if (recordChanged && (!resendClick))
        {
            dialogButton= Box::okCancel
                        ("@Retail:ResendEmailConfirmationMessage"
                        , DialogButton::Yes);

            // If choose ok then resend the mail.
            if (dialogButton == DialogButton::Ok)
            {
                element.resendMail(true);
            }
            else
            {
                // Assume cancel for all other cases and update the receiver email with previous value to discard the modified changes in receiever mail address.
                recordChanged = false;
                element.mcrRunEmailSearch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the RetailCustEmailnotificationlog table.
    /// </summary>
    private void clearData()
    {
        ttsBegin;

        // Clearing all the records from the retailCustEmailNotificationLog table.
        delete_from retailCustEmailNotificationLog;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilteredRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch top 50 records from the filtered data.
    /// </summary>
    public void getFilteredRecord()
    {
        int                             counter = 0;
        RetailCustEmailNotificationLog  localRetailCustEmailNotificationLog;

        this.clearTempData();

        localRetailCustEmailNotificationLog = RetailCustEmailNotificationLog_ds.getFirst() as RetailCustEmailNotificationLog;

        // Iterate on RetailCustEmailNotificationLog_ds untill record is found or counter does not exceeds 50.
        while (localRetailCustEmailNotificationLog && counter < #noOfRecords)
        {
            ttsbegin;

            tmpRetailEventNotificationLog.ReceiverEmailAddress = localRetailCustEmailNotificationLog.ReceiverEmailAddress;
            tmpRetailEventNotificationLog.DefaultLanguage = localRetailCustEmailNotificationLog.DefaultLanguage;
            tmpRetailEventNotificationLog.EmailSubject = localRetailCustEmailNotificationLog.EmailSubject;
            tmpRetailEventNotificationLog.EmailMessage = localRetailCustEmailNotificationLog.EmailMessage;
            tmpRetailEventNotificationLog.EventNotificationType = localRetailCustEmailNotificationLog.EventNotificationType;
            tmpRetailEventNotificationLog.SentDateTime = localRetailCustEmailNotificationLog.SentDateTime;
            tmpRetailEventNotificationLog.SenderEmailAddress = localRetailCustEmailNotificationLog.SenderEmailAddress;
            tmpRetailEventNotificationLog.SalesOrder = localRetailCustEmailNotificationLog.SalesOrder;
            tmpRetailEventNotificationLog.RefRecId = localRetailCustEmailNotificationLog.RefRecId;
            tmpRetailEventNotificationLog.RecId = localRetailCustEmailNotificationLog.RecId;
            tmpRetailEventNotificationLog.insert();

            ttscommit;

            // Get the next record from the datasource.
            localRetailCustEmailNotificationLog = RetailCustEmailNotificationLog_ds.getNext() as RetailCustEmailNotificationLog;
            counter++;
        }

        // Repopulate the RetailCustEmailNotificationLog table with filtered record.
        this.clearData();
        this.populateData(custTable.AccountNum, true);

        SELECT EmailMessage, EmailSubject, SalesOrder, ReceiverEmailAddress, DefaultLanguage, RefRecID, RecID,
            SenderEmailAddress, SentDateTime, EventNotificationType
                FROM retailCustEmailNotificationLog;

        RetailCustEmailNotificationLog_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// For populating data to retailCustEmailNotificationLog table.
    /// on customer service form.
    /// </summary>
    /// <param name="custAccountNumber">
    /// Customer account number.
    /// </param>
    /// <param name="filteredData">
    /// Whether populate filtered data.
    /// </param>
    private void populateData(AccountNumber custAccountNumber, boolean filteredData = false)
    {
        SalesTable                  salesTable;
        RetailEventNotificationLog  retailEventNotificationLog;

        // Check if data is to be populated before search. Then load whole data to the table.
        if (!filteredData)
        {
            // load all the record from the retailEventNotificationLog table for the selected customer.
            While SELECT RefRecId, RecId, EmailMessage, EmailSubject, SalesOrder, ReceiverEmailAddress, DefaultLanguage,
            SenderEmailAddress, SentDateTime, EventNotificationType
                FROM retailEventNotificationLog
                order by SentDateTime desc
                join CustAccount, RecId, SalesId from salesTable
                where  salesTable.RecId == retailEventNotificationLog. salesorder &&
                    salesTable.CustAccount ==  custAccountNumber
            {
                ttsbegin;

                retailCustEmailNotificationLog.ReceiverEmailAddress = retailEventNotificationLog.ReceiverEmailAddress;
                retailCustEmailNotificationLog.DefaultLanguage = retailEventNotificationLog.DefaultLanguage;
                retailCustEmailNotificationLog.EmailSubject = retailEventNotificationLog.EmailSubject;
                retailCustEmailNotificationLog.EmailMessage = retailEventNotificationLog.EmailMessage;
                retailCustEmailNotificationLog.EventNotificationType = retailEventNotificationLog.EventNotificationType;
                retailCustEmailNotificationLog.SentDateTime = retailEventNotificationLog.SentDateTime;
                retailCustEmailNotificationLog.SenderEmailAddress = retailEventNotificationLog.SenderEmailAddress;
                retailCustEmailNotificationLog.SalesOrder = retailEventNotificationLog.SalesOrder;
                retailCustEmailNotificationLog.RefRecId = retailEventNotificationLog.RefRecId;
                retailCustEmailNotificationLog.RecId = retailEventNotificationLog.RecId;
                retailCustEmailNotificationLog.SalesOrderNo = salesTable.SalesId;
                retailCustEmailNotificationLog.insert();

                ttscommit;
            }
        }
        else
        {
            // load all the record from the tmpRetailEventNotificationLog table returned after filtering.
            While SELECT RefRecID, RecID, EmailMessage, EmailSubject, SalesOrder, ReceiverEmailAddress, DefaultLanguage,
            SenderEmailAddress, SentDateTime, EventNotificationType
                FROM tmpRetailEventNotificationLog
            {
                ttsbegin;

                retailCustEmailNotificationLog.ReceiverEmailAddress = tmpRetailEventNotificationLog.ReceiverEmailAddress;
                retailCustEmailNotificationLog.DefaultLanguage = tmpRetailEventNotificationLog.DefaultLanguage;
                retailCustEmailNotificationLog.EmailSubject = tmpRetailEventNotificationLog.EmailSubject;
                retailCustEmailNotificationLog.EmailMessage = tmpRetailEventNotificationLog.EmailMessage;
                retailCustEmailNotificationLog.EventNotificationType = tmpRetailEventNotificationLog.EventNotificationType;
                retailCustEmailNotificationLog.SentDateTime = tmpRetailEventNotificationLog.SentDateTime;
                retailCustEmailNotificationLog.SenderEmailAddress = tmpRetailEventNotificationLog.SenderEmailAddress;
                retailCustEmailNotificationLog.SalesOrder = tmpRetailEventNotificationLog.SalesOrder;
                retailCustEmailNotificationLog.RefRecId = tmpRetailEventNotificationLog.RefRecId;
                retailCustEmailNotificationLog.RecId = tmpRetailEventNotificationLog.RecId;
                retailCustEmailNotificationLog.insert();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTop50Record</Name>
				<Source><![CDATA[
    /// <summary>
    /// For populating top 50 sent email for the selected customer
    /// on customer service form.
    /// </summary>
    /// <param name="custAccountNumber">
    /// Customer account number
    /// </param>
    private void populateTop50Record(AccountNumber custAccountNumber)
    {
        SalesTable                  salesTable;
        int                         counter;
        RetailEventNotificationLog  retailEventNotificationLog;

        // Populate retailCustEmailNotificationLog table with top 50 sent email record from retailEventNotificationLog table.
        While SELECT EmailMessage, EmailSubject, SalesOrder, ReceiverEmailAddress, DefaultLanguage,
        SenderEmailAddress, SentDateTime, EventNotificationType
            FROM retailEventNotificationLog
            order by SentDateTime desc
            join CustAccount, SalesId from salesTable
            where  salesTable.RecId == retailEventNotificationLog. salesorder &&
                salesTable.CustAccount ==  custAccountNumber
        {
            if (counter == #noOfRecords)
            {
                break;
            }

            ttsbegin;

            retailCustEmailNotificationLog.ReceiverEmailAddress = retailEventNotificationLog.ReceiverEmailAddress;
            retailCustEmailNotificationLog.DefaultLanguage = retailEventNotificationLog.DefaultLanguage;
            retailCustEmailNotificationLog.EmailSubject = retailEventNotificationLog.EmailSubject;
            retailCustEmailNotificationLog.EmailMessage = retailEventNotificationLog.EmailMessage;
            retailCustEmailNotificationLog.EventNotificationType = retailEventNotificationLog.EventNotificationType;
            retailCustEmailNotificationLog.SentDateTime = retailEventNotificationLog.SentDateTime;
            retailCustEmailNotificationLog.SenderEmailAddress = retailEventNotificationLog.SenderEmailAddress;
            retailCustEmailNotificationLog.SalesOrder = retailEventNotificationLog.SalesOrder;
            retailCustEmailNotificationLog.RefRecId = retailEventNotificationLog.RecId;
            retailCustEmailNotificationLog.SalesOrderNo = salesTable.SalesId;
            retailCustEmailNotificationLog.insert();

            ttscommit;

            counter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFiltersAndRefreshUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Repopulate the retailCustEmailnotificationlog table.
    /// </summary>
    /// <param name="_custAccountNumber">
    /// Customer Account number.
    /// </param>
    /// <param name="populateTop50Only">
    /// If laod only top 50 record.
    /// </param>
    /// <param name="_filteredData">
    /// If laod from filter data.
    /// </param>
    public void resetFiltersAndRefreshUI(AccountNumber _custAccountNumber, boolean populateTop50Only = true, boolean _filteredData = false)
    {
        this.clearData();

        // If need to populate only top 50 record.
        if (populateTop50Only)
        {
            this.populateTop50Record(_custAccountNumber);
        }
        else
        {
            this.populateData(_custAccountNumber, _filteredData);
        }

        RetailCustEmailNotificationLog_ds.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailCustEmailNotificationLog</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Determines the currently active row.
        /// </summary>
        /// <returns>The active row no</returns>
        public int active()
        {
            int ret;

            ret = super();
            element.updateDisplay();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes if different grid row is selected.
        /// </summary>
        public void selectionChanged()
        {
            super();

            element.SendMailOrDiscardChanges();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>ReceiverEmailAddress</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            /// <summary>
            /// Validate thge input value against valid mail format.
            /// </summary>
            /// <returns>True if validates successfully; otherwise, false.</returns>
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (!SysEmailDistributor::validateEmail(RetailCustEmailNotificationLog_ReceiverEmailAddress.valueStr()))
                {
                    info("@SYS96644");
                    ret = false;
                }

                receiverEmailAddressNew = RetailCustEmailNotificationLog_ReceiverEmailAddress.valueStr();

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>btnResend</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control gets the focus.
        /// </summary>
        public void gotFocus()
        {
            super();

            resendClick = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lostFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control leaves the focus.
        /// </summary>
        public void lostFocus()
        {
            super();

            resendClick = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Esecutes when button control is clicked.
        /// </summary>
        public void clicked()
        {
            super();

            element.resendMail();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>QuickFilterControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>applyFilter</Name>
						<Source><![CDATA[
        public void applyFilter()
        {
            super();
            element.updateDisplay();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailSearchType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when text is changed inside the control.
        /// </summary>
        /// <returns>True if the control state is modifies successfully; otherwise, false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            SearchText.text('');

            // Check if the serach criteria is email.Then visible date control.
            if (EmailSearchType.selection() == MCREMailSearchType::EmailDate)
            {
                SearchText.visible(false);
                SearchDate.visible(true);
            }
            else
            {
                SearchText.visible(true);
                SearchDate.visible(false);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SearchText</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when text is changed inside the control.
        /// </summary>
        /// <returns>True if the control state is modifies successfully; otherwise, false.</returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.mcrRunEmailSearch();
            element.updateDisplay();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmailSearch</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.mcrRunEmailSearch();
            element.updateDisplay();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailCustEmailNotificationLog_ReceiverEmailAddress</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>gotFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when Control get the focus.
        /// </summary>
        public void gotFocus()
        {
            receiverEmailAddressOrg = RetailCustEmailNotificationLog_ReceiverEmailAddress.valueStr();

            ttsbegin;

            tmpRetailEventNotificationLog.SenderEmailAddress = retailCustEmailNotificationLog.SenderEmailAddress;
            tmpRetailEventNotificationLog.DefaultLanguage = retailCustEmailNotificationLog.DefaultLanguage;
            tmpRetailEventNotificationLog.EmailSubject = retailCustEmailNotificationLog.EmailSubject;
            tmpRetailEventNotificationLog.EmailMessage = retailCustEmailNotificationLog.EmailMessage;
            tmpRetailEventNotificationLog.EventNotificationType = retailCustEmailNotificationLog.EventNotificationType;
            tmpRetailEventNotificationLog.SentDateTime = retailCustEmailNotificationLog.SentDateTime;
            tmpRetailEventNotificationLog.SalesOrder = retailCustEmailNotificationLog.SalesOrder;
            tmpRetailEventNotificationLog.RefRecId = retailCustEmailNotificationLog.RecId;
            tmpRetailEventNotificationLog.ReceiverEmailAddress = receiverEmailAddressOrg;
            tmpRetailEventNotificationLog.insert();

            ttscommit;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes when control leaves.
        /// </summary>
        /// <returns>True if the control leave is completed successfully; otherwise, false.</returns>
        public boolean leave()
        {
            boolean ret;
            ret = super();

            // If receiver email address has been modified then insert th original record into  tmpRetailEventNotificationLog table.
            if (receiverEmailAddressOrg != receiverEmailAddressNew)
            {
                recordChanged = true;
                resendClick = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lostFocus</Name>
						<Source><![CDATA[
        /// <summary>
        /// Executes When control lost the focus.
        /// </summary>
        public void lostFocus()
        {
            super();
            receiverEmailAddressNew = RetailCustEmailNotificationLog_ReceiverEmailAddress.valueStr();
            if (receiverEmailAddressOrg == receiverEmailAddressNew)
            {
                recordChanged = false;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members
			i:nil="true" xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailCustEmailNotificationLog</Name>
			<Table>RetailCustEmailNotificationLog</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultLanguage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailMessage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailSubject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EventNotificationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiverEmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOrderNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SenderEmailAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SentDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RET4160305</Caption>
		<DataSource xmlns="">RetailCustEmailNotificationLog</DataSource>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">SimpleListDetails</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>btnResend</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@GLS62537</HelpText>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@GLS62537</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<DataSource>RetailCustEmailNotificationLog</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Grid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>RetailEventNotificationLog_EventNotificationType</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>EventNotificationType</DataField>
								<DataSource>RetailCustEmailNotificationLog</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateTimeControl">
								<Name>RetailEventNotificationLog_SentDateTime</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>DateTime</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>SentDateTime</DataField>
								<DataSource>RetailCustEmailNotificationLog</DataSource>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>No</AlternateRowShading>
						<DataSource>RetailCustEmailNotificationLog</DataSource>
						<GridLinesStyle>Vertical</GridLinesStyle>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderSearch</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Header</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CustomerSearch</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TypeText</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>EmailSearchType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>MCREMailSearchType</EnumType>
										<Label>@MCR11899</Label>
										<ShowLabel>No</ShowLabel>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SearchText</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>SearchDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Date</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>ValidToDate</ExtendedDataType>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>CustSearchButtonGroup</Name>
								<Type>ButtonGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>EmailSearch</Name>
										<HelpText>@MCR28316</HelpText>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS60181</Text>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
				<FrameType>None</FrameType>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>EmailDetails</Name>
				<HeightMode>SizeToContent</HeightMode>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>HeaderPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>DetailsHeader</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustEmailNotificationLog_SenderEmailAddress</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SenderEmailAddress</DataField>
										<DataSource>RetailCustEmailNotificationLog</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustEmailNotificationLog_ReceiverEmailAddress</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ReceiverEmailAddress</DataField>
										<DataSource>RetailCustEmailNotificationLog</DataSource>
										<Label>@RET4160572</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RetailCustEmailNotificationLog_EmailSubject</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EmailSubject</DataField>
										<DataSource>RetailCustEmailNotificationLog</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>RetailCustEmailNotificationLog_EventNotificationType1</Name>
										<AllowEdit>No</AllowEdit>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>EventNotificationType</DataField>
										<DataSource>RetailCustEmailNotificationLog</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateTimeControl">
										<Name>RetailCustEmailNotificationLog_SentDateTime1</Name>
										<AllowEdit>No</AllowEdit>
										<Type>DateTime</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>SentDateTime</DataField>
										<DataSource>RetailCustEmailNotificationLog</DataSource>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<LeftMargin>5</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
								<TopMargin>5</TopMargin>
								<TopMarginMode>Fixed</TopMarginMode>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@EPR4460226</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>DetailsTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PreveiwTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl>
								<Name>notificationPreview</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<FormControlExtension>
									<Name>HtmlViewerControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>htmlField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
							</AxFormControl>
						</Controls>
						<Caption>@RET490394</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>