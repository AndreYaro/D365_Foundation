<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>LedgerJournalTransDimension</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class LedgerJournalTransDimension extends FormRun
{
    Common                              originator;
    LedgerJournalTrans                  ledgerJournalTrans;
    CustVendPaymJournalFee              custVendPaymJournalFee;
    LedgerEliminationRuleLine           ledgerEliminationRuleLine;

    ProjBegBalJournalTrans_CostSales    projBegBalJournalTrans_CostSales;
    ProjBegBalJournalTrans_Fee          projBegBalJournalTrans_Fee;
    ProjBegBalJournalTrans_OnAcc        projBegBalJournalTrans_OnAcc;
    ProjJournalTrans                    projJournalTrans;
    InventJournalTrans                  inventJournalTrans;

    NoYes                               isDefaultDimension;

    // <GIN>
    EximDBKSchemesLine_IN           eximDBKSchemesLine;
    TmpEximTotalDBKTrans_IN         tmpEximTotalDBKTrans;
    boolean                         countryRegion_IN;
    #ISOCountryRegionCodes
    // </GIN>

    RPayTrans   rPayTrans;

    // <GTE>
    TaxEngineTaxJournalLine taxEngineTaxJournalLine;
    // </GTE>

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        boolean allowEdit = true;
        AccessRight accessRight;

        // <GIN>
        countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        super();

        accessRight = FormSecurity::getMenuItemAccessRight(this);
        if (accessRight <= AccessRight::View)
        {
            allowEdit = false;
        }

        originator = element.args().record();
        isDefaultDimension = element.args().parmEnum();

        tmpLedgerBase.RecordTableId = originator.TableId;
        tmpLedgerBase.RecordRecId = originator.RecId;

        this.initFromCaller(allowEdit);

        DimensionEntryControl.reactivate();

        tmpLedgerBase.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form based on the caller.
    /// </summary>
    /// <param name = "allowEdit">
    /// Identfies form editing rights.
    /// </param>
    public void initFromCaller(boolean allowEdit)
    {
        FormRun caller;
        FormDataSource fds;
        LedgerJournalWFApprovalStatus ledgerJournalWFApprovalStatus;

        switch (originator.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = originator as LedgerJournalTrans;

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(ledgerJournalTrans.ledgerJournalTable().Posted);
                }

                ledgerJournalWFApprovalStatus = ledgerJournalTrans.ledgerJournalTable().WorkflowApprovalStatus;

                if (allowEdit &&
                    (ledgerJournalWFApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval ||
                    ledgerJournalWFApprovalStatus == LedgerJournalWFApprovalStatus::Approved))
                {
                    allowEdit = false;
                }
                // <GEERU><GEEU>
                if (RCashParameters::isCashModuleEnabled())
                {
                    caller = element.args().caller();
                    if (!caller && FormDataUtil::isFormDataSource(ledgerJournalTrans) && FormDataUtil::getFormDataSource(ledgerJournalTrans))
                    {
                        fds     = FormDataUtil::getFormDataSource(ledgerJournalTrans);
                        caller  = fds.formRun();
                    }

                    if (caller)
                    {
                        switch (caller.name())
                        {
                            case formStr(LedgerTransPreview_RU):
                                allowEdit = false;
                                break;

                            case formStr(LedgerJournalTransRCash):
                                allowEdit = !ledgerJournalTrans.NoEdit;
                                break;
                        }
                    }
                }
                // </GEERU></GEEU>

                if (isDefaultDimension)
                {
                    this.design().caption("@SYS300591");
                    tmpLedgerBase.DefaultDimension = ledgerJournalTrans.DefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300594", ledgerJournalTrans.Company),
                        ledgerJournalTrans.Company,
                        ErrorTolerance::Warning,
                        ledgerJournalTrans.TransDate);
                }
                else
                {
                    this.design().caption("@SYS300592");
                    tmpLedgerBase.DefaultDimension  = ledgerJournalTrans.OffsetDefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300585", ledgerJournalTrans.getOffsetCompany()),
                        ledgerJournalTrans.getOffsetCompany(),
                        ErrorTolerance::Warning,
                        ledgerJournalTrans.TransDate);
                }

                DimensionEntryControl.parmValidateBlockedForManualEntry(true);

                break;

            case tableNum(CustVendPaymJournalFee):
                this.design().caption("@SYS300593");

                custVendPaymJournalFee = originator as CustVendPaymJournalFee;
                ledgerJournalTrans = LedgerJournalTrans::findByRef(custVendPaymJournalFee.company(),
                    custVendPaymJournalFee.RefRecId);

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(ledgerJournalTrans.ledgerJournalTable().Posted);
                }

                ledgerJournalWFApprovalStatus = ledgerJournalTrans.ledgerJournalTable().WorkflowApprovalStatus;

                if (allowEdit &&
                    (ledgerJournalWFApprovalStatus == LedgerJournalWFApprovalStatus::PendingApproval ||
                    LedgerJournalWFApprovalStatus == LedgerJournalWFApprovalStatus::Approved))
                {
                    allowEdit = false;
                }

                tmpLedgerBase.DefaultDimension = custVendPaymJournalFee.DefaultDimension;

                this.initDimensionEntryControl(
                    allowEdit,
                    strFmt("@SYS300586", custVendPaymJournalFee.company()),
                    custVendPaymJournalFee.company(),
                    ErrorTolerance::Warning,
                    ledgerJournalTrans.TransDate);

                break;

            case tableNum(LedgerEliminationRuleLine):
                this.design().caption("@SYS307259");

                ledgerEliminationRuleLine = originator as LedgerEliminationRuleLine;
                tmpLedgerBase.DefaultDimension = ledgerEliminationRuleLine.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    strFmt("@SYS307248", ledgerEliminationRuleLine.company()),
                    ledgerEliminationRuleLine.company(),
                    ErrorTolerance::Error,
                    DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));

                break;

            case tableNum(ProjBegBalJournalTrans_CostSales):
                projBegBalJournalTrans_CostSales = originator as ProjBegBalJournalTrans_CostSales;

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(projBegBalJournalTrans_CostSales.projJournalTable().Posted);
                }

                this.design().caption("@SYS138491");

                tmpLedgerBase.DefaultDimension = projBegBalJournalTrans_CostSales.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    "@SYS300591",
                    projBegBalJournalTrans_CostSales.company(),
                    ErrorTolerance::Warning,
                    projBegBalJournalTrans_CostSales.TransDate);

                break;

            case tableNum(ProjBegBalJournalTrans_Fee):
                projBegBalJournalTrans_Fee = originator as ProjBegBalJournalTrans_Fee;

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(projBegBalJournalTrans_Fee.projJournalTable().Posted);
                }

                this.design().caption("@SYS138491");

                tmpLedgerBase.DefaultDimension = projBegBalJournalTrans_Fee.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    "@SYS300591",
                    projBegBalJournalTrans_Fee.company(),
                    ErrorTolerance::Warning,
                    projBegBalJournalTrans_Fee.TransDate);

                break;

            case tableNum(ProjBegBalJournalTrans_OnAcc):
                projBegBalJournalTrans_OnAcc = originator as ProjBegBalJournalTrans_OnAcc;

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(projBegBalJournalTrans_OnAcc.projJournalTable().Posted);
                }

                this.design().caption("@SYS138491");

                tmpLedgerBase.DefaultDimension = projBegBalJournalTrans_OnAcc.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    "@SYS300591",
                    projBegBalJournalTrans_OnAcc.company(),
                    ErrorTolerance::Warning,
                    projBegBalJournalTrans_OnAcc.TransDate);

                break;

            case tableNum(ProjJournalTrans):
                projJournalTrans = originator as ProjJournalTrans;

                if (allowEdit)
                {
                    allowEdit = !(projJournalTrans.projJournalTable().Posted);
                }

                tmpLedgerBase.DefaultDimension = projJournalTrans.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    strFmt("@SYS300594", projJournalTrans.company()),
                    projJournalTrans.company(),
                    ErrorTolerance::Warning,
                    projJournalTrans.TransDate);

                break;

            case tableNum(InventJournalTrans):
                inventJournalTrans = originator as InventJournalTrans;

                if (allowEdit)
                {
                    allowEdit = !(inventJournalTrans.inventJournalTable().Posted);
                }

                tmpLedgerBase.DefaultDimension = inventJournalTrans.DefaultDimension;
                this.initDimensionEntryControl(
                    allowEdit,
                    strFmt("@SYS300586", inventJournalTrans.company()),
                    inventJournalTrans.company(),
                    ErrorTolerance::Warning,
                    inventJournalTrans.TransDate);

                break;

                // <GIN>
            case tableNum(EximDBKSchemesLine_IN):
                if (countryRegion_IN)
                {
                    eximDBKSchemesLine  = originator as EximDBKSchemesLine_IN;

                    // don't allow edit if transaction is posted
                    allowEdit = (EximDBKSchemesTable_IN::find(eximDBKSchemesLine.SchemesTableRecId).Status != EximDBKTransStatus_IN::Closed);

                    if (isDefaultDimension)
                    {
                        this.design().caption("@SYS300591");

                        tmpLedgerBase.DefaultDimension = eximDBKSchemesLine.DefaultDimension;
                        this.initDimensionEntryControl(
                            allowEdit,
                            strFmt("@SYS300594", eximDBKSchemesLine.company()),
                            eximDBKSchemesLine.company(),
                            ErrorTolerance::Warning,
                            DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
                    }
                    else
                    {
                        this.design().caption("@SYS300592");

                        tmpLedgerBase.DefaultDimension  = eximDBKSchemesLine.OffsetDefaultDimension;
                        this.initDimensionEntryControl(
                            allowEdit,
                            strFmt("@SYS300585", eximDBKSchemesLine.company()),
                            eximDBKSchemesLine.company(),
                            ErrorTolerance::Warning,
                            DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
                    }
                }
                break;
            case tableNum(TmpEximTotalDBKTrans_IN):
                if (countryRegion_IN)
                {
                    tmpEximTotalDBKTrans  = originator as TmpEximTotalDBKTrans_IN;

                    this.design().caption("@SYS300591");

                    tmpLedgerBase.DefaultDimension = tmpEximTotalDBKTrans.DefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300594", tmpEximTotalDBKTrans.company()),
                        tmpEximTotalDBKTrans.company(),
                        ErrorTolerance::Warning,
                        DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
                }

                break;
                // </GIN>
                // <RUP>
            case tableNum(RPayTrans):
                rPayTrans  = originator as RPayTrans;

                if (isDefaultDimension)
                {
                    this.design().caption("@SYS300591");

                    tmpLedgerBase.DefaultDimension = rPayTrans.DefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300594", rPayTrans.company()),
                        curext(),
                        ErrorTolerance::Warning,
                        DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
                }
                else
                {
                    this.design().caption("@SYS300592");

                    tmpLedgerBase.DefaultDimension = rPayTrans.OffsetDefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300594", rPayTrans.company()),
                        curext(),
                        ErrorTolerance::Warning,
                        DateTimeUtil::date(DateTimeUtil::getSystemDateTime()));
                }

                break;
                // </RUP>

            // <GTE>
            case tableNum(TaxEngineTaxJournalLine):
                taxEngineTaxJournalLine = originator as TaxEngineTaxJournalLine;

                // don't allow edit if transaction is posted
                if (allowEdit)
                {
                    allowEdit = !(taxEngineTaxJournalLine.TaxEngineTaxJournal().Posted);
                }

                if (isDefaultDimension)
                {
                    this.design().caption("@SYS300591");
                    tmpLedgerBase.DefaultDimension = taxEngineTaxJournalLine.DefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300594", taxEngineTaxJournalLine.company()),
                        curExt(),
                        ErrorTolerance::Warning,
                        taxEngineTaxJournalLine.TransDate);
                }
                else
                {
                    this.design().caption("@SYS300592");
                    tmpLedgerBase.DefaultDimension  = taxEngineTaxJournalLine.OffsetDefaultDimension;
                    this.initDimensionEntryControl(
                        allowEdit,
                        strFmt("@SYS300585", taxEngineTaxJournalLine.company()),
                        curExt(),
                        ErrorTolerance::Warning,
                        taxEngineTaxJournalLine.TransDate);
                }

                DimensionEntryControl.parmValidateBlockedForManualEntry(true);
                break;
                // </GTE>
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionEntryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimension entry control.
    /// </summary>
    /// <param name = "_allowEdit">
    /// A boolean value that indicates whether the controls are editable.
    /// </param>
    /// <param name = "_introGrouplabel">
    /// The label to use as introductory text above the added controls.
    /// </param>
    /// <param name = "_company">
    /// The company used to filter the list of <c>DimensionAttribute</c> records.
    /// </param>
    /// <param name = "_errorTolerance">
    /// The action to perform when a non-active value is entered.
    /// </param>
    /// <param name = "_date">
    /// The date to use for validating the date values in the <c>ActiveFrom</c> and <c>ActiveTo</c> fields to
    /// determine the active state of a value.
    /// </param>
    public void initDimensionEntryControl(
        NoYes _allowEdit,
        str _introGrouplabel,
        SelectableDataArea _company,
        ErrorTolerance _errorTolerance,
        date _date)
    {
        DimensionEntryControl.allowEdit(_allowEdit);
        DimensionEntryControl.parmControlLabelText(_introGrouplabel);
        DimensionEntryControl.parmCompany(_company);
        DimensionEntryControl.parmNonActiveValueErrorTolerance(_errorTolerance);
        DimensionEntryControl.parmActiveValueFilterDate(_date);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TmpLedgerBase</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            switch (originator.TableId)
            {
                case tableNum(LedgerJournalTrans):
                    if (isDefaultDimension)
                    {
                        ledgerJournalTrans.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    else
                    {
                        ledgerJournalTrans.OffsetDefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    break;

                case tableNum(CustVendPaymJournalFee):
                    custVendPaymJournalFee.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(LedgerEliminationRuleLine):
                    ledgerEliminationRuleLine.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(ProjBegBalJournalTrans_CostSales):
                    projBegBalJournalTrans_CostSales.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(ProjBegBalJournalTrans_Fee):
                    projBegBalJournalTrans_Fee.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(ProjBegBalJournalTrans_OnAcc):
                    projBegBalJournalTrans_OnAcc.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(ProjJournalTrans):
                    projJournalTrans.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;

                case tableNum(InventJournalTrans):
                    inventJournalTrans.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    break;
                // <GIN>
                case tableNum(EximDBKSchemesLine_IN):
                    if (countryRegion_IN)
                    {
                        if (isDefaultDimension)
                        {
                            eximDBKSchemesLine.DefaultDimension = tmpLedgerBase.DefaultDimension;
                        }
                        else
                        {
                            eximDBKSchemesLine.OffsetDefaultDimension = tmpLedgerBase.DefaultDimension;
                        }
                    }
                    break;
                case tableNum(TmpEximTotalDBKTrans_IN):
                    if (countryRegion_IN)
                    {
                        tmpEximTotalDBKTrans.DefaultDimension   = tmpLedgerBase.DefaultDimension;
                    }
                    break;
                // </GIN>
                // <RUP>
                case tableNum(RPayTrans):
                    if (isDefaultDimension)
                    {
                        rPayTrans.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    else
                    {
                        rPayTrans.OffsetDefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    break;
                // </RUP>
                // <GTE>
                case tableNum(TaxEngineTaxJournalLine):
                    if (isDefaultDimension)
                    {
                        taxEngineTaxJournalLine.DefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    else
                    {
                        taxEngineTaxJournalLine.OffsetDefaultDimension = tmpLedgerBase.DefaultDimension;
                    }
                    break;
                // </GTE>
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TmpLedgerBase</Name>
			<Table>TmpLedgerBase</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>COSCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>COSNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Counter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>id</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IdName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isCredit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Module</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecordRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecordTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCodeString</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TraceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS300591</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>DimensionEntryControl</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormContainerControl">
						<Name>DimensionEntryControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Container</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>DimensionEntryControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmControllerClassName</Name>
									<Type>ExtendedDataType</Type>
									<TypeName>ClassName</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmControlLabelText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEnumerationName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmDataSourceName</Name>
									<Type>String</Type>
									<Value>TmpLedgerBase</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmValueSetReferenceField</Name>
									<Type>String</Type>
									<Value>DefaultDimension</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmEnumValueSetReferenceField</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<Controls />
					</AxFormControl>
				</Controls>
				<HideIfEmpty>No</HideIfEmpty>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoLeft</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>