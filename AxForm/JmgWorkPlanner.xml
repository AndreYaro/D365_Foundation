<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>JmgWorkPlanner</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class JmgWorkPlanner extends FormRun
    {
        const int EmployeeTab = 1;
        const int ProfileTab = 2;

        JmgWorkPlannerForm  allWorkPlannerForm;
        JmgWorkPlannerForm  profileGroupWorkPlannerForm;
        JmgWorkPlannerForm  employeeWorkPlannerForm;

        JmgGroupCalcId      calcGroupIdParm;
        JmgGroupApproveId   approveGroupIdParm;
        JmgProfileGroupId   profileGroupIdParm;
        boolean             showWeekendParm;
        boolean             showPlannedAbsenceParm;
        JmgColor            absenceColorParm;
        boolean             employeeOverlayParm;
        boolean             profileGroupOverlayParm;
        boolean             showStandardProfileParm;

        boolean             changingTabs;

        boolean             unsavedChanges;
        boolean             composeWasCancelled;
        boolean             mustRefreshEmployeeTable;

        #DEFINE.CurrentVersion(1)
        #LOCALMACRO.CurrentList
            calcGroupIdParm,
            approveGroupIdParm,
            profileGroupIdParm,
            showWeekendParm,
            showPlannedAbsenceParm,
            absenceColorParm,
            employeeOverlayParm,
            profileGroupOverlayParm,
            showStandardProfileParm
        #ENDMACRO

}
]]></Source>
			</Method>
			<Method>
				<Name>approveGroupId</Name>
				<Source><![CDATA[
    public edit JmgGroupApproveId approveGroupId(boolean _set, JmgGroupApproveId _value)
    {
        JmgWorkPlannerForm_Employee e;
        if (_set    &&
            this.promptSaveChanges())
        {
            approveGroupIdParm = _value;
            e = employeeWorkPlannerForm;
            e.parmApprovalGroup(approveGroupIdParm);

            this.refreshEmployeeTable();
        }
        return approveGroupIdParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGroupId</Name>
				<Source><![CDATA[
    public edit JmgGroupCalcId calcGroupId(boolean _set, JmgGroupCalcId _value)
    {
        JmgWorkPlannerForm_Employee e;
        if (_set    &&
            this.promptSaveChanges())
        {
            calcGroupIdParm = _value;
            e = employeeWorkPlannerForm;
            e.parmCalculationGroup(calcGroupIdParm);

            this.refreshEmployeeTable();
        }
        return calcGroupIdParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;

        ret = super();

        ret = element.promptSaveChanges();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeDateInterval</Name>
				<Source><![CDATA[
    public void changeDateInterval()
    {
        if ((this.getFromDate() != allWorkPlannerForm.fromDate()    ||
             this.getToDate()   != allWorkPlannerForm.toDate())     &&
            element.promptSaveChanges())
        {
            this.resetWeekTotals();
            allWorkPlannerForm.changeDateInterval(this.getFromDate(), this.getToDate());
            profileGroupWorkPlannerForm.changeDateInterval(this.getFromDate(), this.getToDate());
            employeeWorkPlannerForm.changeDateInterval(this.getFromDate(), this.getToDate());
            employeeWorkPlannerForm.loadData();
            this.setTableLayout();
            this.initProfiles();
            this.initTotalTimes();
            this.initWeekTotals();
        }
        else
        {
            fromDate.dateValue(allWorkPlannerForm.fromDate());
            toDate.dateValue(allWorkPlannerForm.toDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        super();

        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInterval</Name>
				<Source><![CDATA[
    void copyInterval()
    {
        allTable.rows(allWorkPlannerForm.numberOfRows());
        profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
        employeeTable.rows(employeeWorkPlannerForm.numberOfRows());

        element.initTotalTimes();
        element.initWeekTotals();

        unsavedChanges = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    public JmgDate getFromDate()
    {
        return fromDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    public JmgDate getToDate()
    {
        return toDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkPlannerForm</Name>
				<Source><![CDATA[
    public JmgWorkPlannerForm getWorkPlannerForm(JmgProfileCalendarType _type)
    {
        switch (_type)
        {
            case JmgProfileCalendarType::All:
                return allWorkPlannerForm;
            case JmgProfileCalendarType::ProfileGroup:
                return profileGroupWorkPlannerForm;
            case JmgProfileCalendarType::Employee:
                return employeeWorkPlannerForm;
        }
        return employeeWorkPlannerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        Map profileTimes;
        changingTabs    = false;
        unsavedChanges  = false;

        xSysLastValue::getLast(this);

        super();

        fromDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - dayOfMth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) + 1);
        toDate.dateValue(endmth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        profileTimes                = Map::create(JmgWorkPlannerForm::getProfileTimes());
        allWorkPlannerForm          = new JmgWorkPlannerForm_All(allTable, this.getFromDate(), this.getToDate(), profileTimes);
        profileGroupWorkPlannerForm = new JmgWorkPlannerForm_ProfileGroup(profileGroupTable,
                                                                          this.getFromDate(),
                                                                          this.getToDate(),
                                                                          profileTimes,
                                                                          allWorkPlannerForm,
                                                                          profileGroupOverlayParm,
                                                                          showWeekendParm);
        employeeWorkPlannerForm     = new JmgWorkPlannerForm_Employee(employeeTable,
                                                                      this.getFromDate(),
                                                                      this.getToDate(),
                                                                      profileTimes,
                                                                      allWorkPlannerForm,
                                                                      profileGroupWorkPlannerForm,
                                                                      absenceColorParm,
                                                                      approveGroupIdParm,
                                                                      calcGroupIdParm,
                                                                      employeeOverlayParm,
                                                                      showPlannedAbsenceParm,
                                                                      showStandardProfileParm,
                                                                      showWeekendParm);

        allWorkPlannerForm.parmShowWeekend(showWeekendParm);

        absenceColor.setColor(absenceColorParm);
        approveGroupId.text(approveGroupIdParm);
        calcGroupId.text(calcGroupIdParm);
        overlayProfileCalendar.value(employeeOverlayParm);
        overlayProfileGroup.value(profileGroupOverlayParm);
        profileGroupId.text(profileGroupIdParm);
        showPlannedAbsence.value(showPlannedAbsenceParm);
        standardProfile.value(showStandardProfileParm);
        showWeekend.value(showWeekendParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        calcGroupIdParm = '';
        approveGroupIdParm = '';
        profileGroupIdParm = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalTimes</Name>
				<Source><![CDATA[
    public void initTotalTimes(int _tabNo = Tab.tab())
    {
        int i;

        if (_tabNo == ProfileTab)
        {
            this.refreshAllTotalTime();

            for (i = 1; i <= profileGroupWorkPlannerForm.numberOfRows(); i++)
            {
                this.refreshProfileGroupTotalTime(i);
            }
        }
        else
        {
            for (i = 1; i <= employeeWorkPlannerForm.numberOfRows(); i++)
            {
                this.refreshEmployeeTotalTime(i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProfiles</Name>
				<Source><![CDATA[
    public void initProfiles()
    {
        for (int i = 1; i <= allWorkPlannerForm.numberOfRows(); i++)
        {
            for (int j = 2; j <= allWorkPlannerForm.numberOfColumns(); j++)
            {
                this.refreshAllProfile(j, i);
            }
        }

        for (int i = 1; i <= profileGroupWorkPlannerForm.numberOfRows(); i++)
        {
            for (int j = 2; j <= profileGroupWorkPlannerForm.numberOfColumns(); j++)
            {
                this.refreshProfileProfile(j, i);
            }
        }

        for (int i = 1; i <= employeeWorkPlannerForm.numberOfRows(); i++)
        {
            for (int j = 2; j <= employeeWorkPlannerForm.numberOfColumns(); j++)
            {
                this.refreshEmployeeProfile(j, i);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWeekTotals</Name>
				<Source><![CDATA[
    public void initWeekTotals(int _tabNo = Tab.tab())
    {
        int i;
        int j;
        for (i = 1; i <= allWorkPlannerForm.numberOfColumns(); i++)
        {
            if (allWorkPlannerForm.isWeekTotalColumn(i))
            {
                if (_tabNo == ProfileTab)
                {
                    for (j = 1; j <= allWorkPlannerForm.numberOfRows(); j++)
                    {
                        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                        //          - JmgWorkPlannerForm.loadData()
                        //          - JmgWorkPlannerForm_All.loadData()
                        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                        allTable.cell(i, j).data(allWorkPlannerForm.getWeekTotal(i, j));
                        allTable.updateCell(i, j);
                    }

                    for (j = 1; j <= profileGroupWorkPlannerForm.numberOfRows(); j++)
                    {
                        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                        //          - JmgWorkPlannerForm.loadData()
                        //          - JmgWorkPlannerForm_All.loadData()
                        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                        profileGroupTable.cell(i, j).data(profileGroupWorkPlannerForm.getWeekTotal(i, j));
                        profileGroupTable.updateCell(i, j);
                    }
                }
                else
                {
                    for (j = 1; j <= employeeWorkPlannerForm.numberOfRows(); j++)
                    {
                        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                        //          - JmgWorkPlannerForm.loadData()
                        //          - JmgWorkPlannerForm_All.loadData()
                        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                        employeeTable.cell(i, j).data(employeeWorkPlannerForm.getWeekTotal(i, j));
                        employeeTable.updateCell(i, j);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileGroupId</Name>
				<Source><![CDATA[
    public edit JmgProfileGroupId profileGroupId(boolean _set, JmgProfileGroupId _value)
    {
        if (_set    &&
            this.promptSaveChanges())
        {
            profileGroupIdParm = _value;
            jmgProfileTable_DS.executeQuery();
        }
        return profileGroupIdParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptSaveChanges</Name>
				<Source><![CDATA[
    public boolean promptSaveChanges()
    {
        boolean         ret;
        DialogButton    button;
        if (unsavedChanges)
        {
            button = Box::yesNoCancel("@SYS57876", DialogButton::Cancel);

            switch (button)
            {
                case DialogButton::Yes:
                    element.save();
                    ret = true;
                    break;
                case DialogButton::No:
                    unsavedChanges = false;
                    ret = true;
                    break;
                default:
                    ret = false;
                    break;
            }
        }
        else
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllTotalTime</Name>
				<Source><![CDATA[
    public void refreshAllTotalTime()
    {
        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
        //          - JmgWorkPlannerForm.loadData()
        //          - JmgWorkPlannerForm_All.loadData()
        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
        allTable.cell(1, 1).data(allWorkPlannerForm.getTotalTime(1));
        allTable.updateCell(1, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllProfile</Name>
				<Source><![CDATA[
    public void refreshAllProfile(int _column, int _row)
    {
        if (!allWorkPlannerForm.isWeekTotalColumn(_column))
        {
            allTable.cell(_column, _row).data(allWorkPlannerForm.getCellContent(_column, _row).getData());
            allTable.updateCell(_column, _row);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshColumn</Name>
				<Source><![CDATA[
    public void refreshColumn(int _column, int _weekTotalColumn)
    {
        for (int i = 1; i <= profileGroupWorkPlannerForm.numberOfRows(); i++)
        {
            // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
            //          - JmgWorkPlannerForm.loadData()
            //          - JmgWorkPlannerForm_All.loadData()
            //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
            profileGroupTable.cell(_weekTotalColumn, i).data(profileGroupWorkPlannerForm.getWeekTotal(_weekTotalColumn, i));
            profileGroupTable.updateCell(_weekTotalColumn, i);

            element.refreshProfileGroupTotalTime(i);
            profileGroupTable.updateCell(_column, i);

            element.refreshProfileProfile(_column, i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshEmployeeTable</Name>
				<Source><![CDATA[
    public void refreshEmployeeTable()
    {
        employeeTable.rows(employeeWorkPlannerForm.numberOfRows());
        for (int i = 1; i <= employeeWorkPlannerForm.numberOfRows(); i++)
        {
            element.refreshEmployeeTotalTime(i);

            for (int j = 2; j < employeeWorkPlannerForm.numberOfColumns(); j++)
            {
                if (!allWorkPlannerForm.isWeekTotalColumn(j))
                {
                    element.refreshEmployeeProfile(j, i);
                }
            }
        }
        this.initWeekTotals(EmployeeTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshEmployeeTotalTime</Name>
				<Source><![CDATA[
    public void refreshEmployeeTotalTime(int _row)
    {
        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
        //          - JmgWorkPlannerForm.loadData()
        //          - JmgWorkPlannerForm_All.loadData()
        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
        employeeTable.cell(1, _row).data(employeeWorkPlannerForm.getTotalTime(_row));
        employeeTable.updateCell(1, _row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshEmployeeProfile</Name>
				<Source><![CDATA[
    public void refreshEmployeeProfile(int _column, int _row)
    {
        if (!employeeWorkPlannerForm.isWeekTotalColumn(_column))
        {
            employeeTable.cell(_column, _row).data(employeeWorkPlannerForm.getCellContent(_column, _row).getData());
            employeeTable.updateCell(_column, _row);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProfileGroupTotalTime</Name>
				<Source><![CDATA[
    public void refreshProfileGroupTotalTime(int _row)
    {
        // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
        //          - JmgWorkPlannerForm.loadData()
        //          - JmgWorkPlannerForm_All.loadData()
        //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
        profileGroupTable.cell(1, _row).data(profileGroupWorkPlannerForm.getTotalTime(_row));
        profileGroupTable.updateCell(1, _row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProfileProfile</Name>
				<Source><![CDATA[
    public void refreshProfileProfile(int _column, int _row)
    {
        if (!profileGroupWorkPlannerForm.isWeekTotalColumn(_column))
        {
            profileGroupTable.cell(_column, _row).data(profileGroupWorkPlannerForm.getCellContent(_column, _row).getData());
            profileGroupTable.updateCell(_column, _row);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTables</Name>
				<Source><![CDATA[
    public void refreshTables()
    {
        allWorkPlannerForm.loadData();
        profileGroupWorkPlannerForm.loadData();
        employeeWorkPlannerForm.loadData();

        allTable.rows(allWorkPlannerForm.numberOfRows());
        profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
        employeeTable.rows(employeeWorkPlannerForm.numberOfRows());

        this.initProfiles();
        this.initTotalTimes();

        unsavedChanges = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUnsavedChanges</Name>
				<Source><![CDATA[
    public void resetUnsavedChanges()
    {
        composeWasCancelled = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWeekTotals</Name>
				<Source><![CDATA[
    private void resetWeekTotals()
    {
        int i;
        int j;
        for (i = 1; i <= allWorkPlannerForm.numberOfColumns(); i++)
        {
            if (allWorkPlannerForm.isWeekTotalColumn(i))
            {
                for (j = 1; j <= allWorkPlannerForm.numberOfRows(); j++)
                {
                    allTable.cell(i, j).data('');
                    allTable.updateCell(i, j);
                }

                for (j = 1; j <= profileGroupWorkPlannerForm.numberOfRows(); j++)
                {
                    profileGroupTable.cell(i, j).data('');
                    profileGroupTable.updateCell(i, j);
                }

                for (j = 1; j <= employeeWorkPlannerForm.numberOfRows(); j++)
                {
                    employeeTable.cell(i, j).data('');
                    employeeTable.updateCell(i, j);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.setTableLayout();

        super();

        this.hideSystemSaveButton();

        this.initProfiles();
        this.initTotalTimes();
        this.initWeekTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideSystemSaveButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide the save button.
    /// </summary>
    private void hideSystemSaveButton()
    {
        FormCommandButtonControl saveButton = element.control(this.controlId('SystemDefinedSaveButton')) as FormCommandButtonControl;
        saveButton.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    public void save()
    {
        allWorkPlannerForm.saveData();
        profileGroupWorkPlannerForm.saveData();
        employeeWorkPlannerForm.saveData();

        unsavedChanges = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableLayout</Name>
				<Source><![CDATA[
    public void setTableLayout()
    {
        allTable.rows(allWorkPlannerForm.numberOfRows());
        allTable.columns(allWorkPlannerForm.numberOfColumns());

        profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
        profileGroupTable.columns(profileGroupWorkPlannerForm.numberOfColumns());

        employeeTable.rows(employeeWorkPlannerForm.numberOfRows());
        employeeTable.columns(employeeWorkPlannerForm.numberOfColumns());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version;
        boolean ret;
        version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #Task
        int ret;

        ret = super(_taskId);

        if (ret && _taskId == #taskRefresh)
        {
            element.refreshTables();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>JmgProfileTable</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            profileGrid.arrange();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            Query                   q;
            QueryBuildDataSource    qbds1;
            QueryBuildDataSource    qbds;
            QueryBuildRange         qbr;

            if (element.promptSaveChanges())
            {
                q       = new Query();
                qbds1   = q.addDataSource(tableNum(JmgProfileTable));

                if (profileGroupIdParm)
                {
                    qbds = qbds1.addDataSource(tableNum(JmgProfileRelation));
                    qbr = qbds.addRange(fieldNum(JmgProfileRelation, ProfileGroupId));
                    qbr.value(profileGroupIdParm);
                    qbds.joinMode(JoinMode::ExistsJoin);
                    qbds.addLink(fieldNum(JmgProfileTable, Profile), fieldNum(JmgProfileRelation, ProfileId));
                }

                this.query(q);

                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>profileTime</Name>
						<Source><![CDATA[
        public display JmgLabelProfileTimeTotal profileTime(JmgProfileTable _jmgProfileTable)
        {
            return allWorkPlannerForm.getProfileTime(_jmgProfileTable.Profile);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(JmgProfileTable)).clearDynalinks();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _record, FormRowDisplayOption _options)
        {
            JmgProfileTable profile;
            profile = _record;

            _options.backColor(profile.Color);

            super(_record, _options);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Save</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.save();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JmgProfileCalendarCopy</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            allTable.rows(allWorkPlannerForm.numberOfRows());
            profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
            employeeTable.rows(employeeWorkPlannerForm.numberOfRows());

            element.initProfiles();
            element.initTotalTimes();
            element.initWeekTotals();

            if (!composeWasCancelled)
                unsavedChanges = true;

            composeWasCancelled = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JmgProfileCalendarCopyTheInterval</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            MenuFunction        mf;
            Args                args;

            //calling menuItem JmgProfileCalendarCopyInterval
            args = new Args(element);
            args.record(jmgProfileTable);
            mf = new MenuFunction(menuitemActionStr(JmgProfileCalendarCopyInterval), MenuItemType::Action);
            args.parmEnumType(enumNum(NoYes));
            mf.run(args);

            allTable.rows(allWorkPlannerForm.numberOfRows());
            profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
            employeeTable.rows(employeeWorkPlannerForm.numberOfRows());

            element.initProfiles();
            element.initTotalTimes();
            element.initWeekTotals();

            if (args.parmEnum() == NoYes::Yes)
                unsavedChanges = true;
            else
                unsavedChanges = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearChanges</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            element.refreshTables();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JmgWorkPlanner_Employee</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (element.promptSaveChanges())
                super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>JmgWorkPlanner_Profile</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if (element.promptSaveChanges())
                super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.changeDateInterval();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.changeDateInterval();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowWeekend</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            showWeekendParm = this.value();

            allWorkPlannerForm.parmShowWeekend(showWeekendParm);
            profileGroupWorkPlannerForm.parmShowWeekend(showWeekendParm);
            employeeWorkPlannerForm.parmShowWeekend(showWeekendParm);

            allTable.rows(allWorkPlannerForm.numberOfRows());
            profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
            employeeTable.rows(employeeWorkPlannerForm.numberOfRows());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearProfile</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (this.value())
            {
                profileGrid.enabled(false);
            }
            else
            {
                profileGrid.enabled(true);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChange</Name>
						<Source><![CDATA[
        public boolean tabChange(int _FromTab)
        {
            boolean ret;

            changingTabs = true;
            ret = super(_fromTab);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _FromTab, int _ToTab)
        {
            super(_fromTab, _toTab);

            clearProfile.setFocus();

            if (_ToTab == EmployeeTab && mustRefreshEmployeeTable)
            {
                element.refreshEmployeeTable();
                mustRefreshEmployeeTable = false;
            }
            else
            {
                element.initWeekTotals(_toTab);
            }
            element.initTotalTimes(_toTab);

            changingTabs = false;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OverlayProfileCalendar</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            JmgWorkPlannerForm_Employee e;
            boolean                     ret;
            int                         i;
            ret = super();

            e   = employeeWorkPlannerForm;
            employeeOverlayParm = this.value();
            e.parmOverlay(employeeOverlayParm);

            // Redraw table.
            employeeTable.rows(employeeWorkPlannerForm.numberOfRows());
            for (i = 1; i <= employeeWorkPlannerForm.numberOfRows(); i++)
            {
                element.refreshEmployeeTotalTime(i);
            }
            element.initWeekTotals();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StandardProfile</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            int     i;
            JmgWorkPlannerForm_Employee emplForm = employeeWorkPlannerForm;

            ret = super();

            showStandardProfileParm = this.value() == NoYes::Yes;
            emplForm.parmShowStandardProfile(showStandardProfileParm);

            // Redraw table.
            employeeTable.rows(employeeWorkPlannerForm.numberOfRows());
            for (i = 1; i <= employeeWorkPlannerForm.numberOfRows(); i++)
            {
                element.refreshEmployeeTotalTime(i);
            }

            element.initWeekTotals();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ShowPlannedAbsence</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            showPlannedAbsenceParm = this.value();
            employeeWorkPlannerForm.parmShowPlannedAbsence(showPlannedAbsenceParm);

            employeeTable.columns(employeeWorkPlannerForm.numberOfColumns());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AbsenceColor</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            this.setColor(ColorSelection::selectColor(this, employeeWorkPlannerForm.parmAbsenceColor()));
        }

]]></Source>
					</Method>
					<Method>
						<Name>setColor</Name>
						<Source><![CDATA[
        public void setColor(JmgColor _color)
        {
            employeeWorkPlannerForm.parmAbsenceColor(_color);
            absenceColorParm = _color;

            this.backgroundColor(_color);
            this.value(_color);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EmployeeTable</Name>
				<Type>Table</Type>
				<Methods>
					<Method>
						<Name>activeCellChanged</Name>
						<Source><![CDATA[
        public void activeCellChanged()
        {
            int column;
            int row;
            super();

            if (!changingTabs)
            {
                if (clearProfile.value())
                {
                    [column, row] = employeeWorkPlannerForm.setProfileAt(this.column(), this.row(), '');
                }
                else
                {
                    [column, row] = employeeWorkPlannerForm.setProfileAt(this.column(), this.row(), jmgProfileTable.Profile);
                }
                unsavedChanges = true;

                // Refresh week total
                // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                //          - JmgWorkPlannerForm.loadData()
                //          - JmgWorkPlannerForm_All.loadData()
                //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                employeeTable.cell(column, row).data(employeeWorkPlannerForm.getWeekTotal(column, row));
                employeeTable.updateCell(column, row);

                element.refreshEmployeeProfile(this.column(), this.row());
                element.refreshEmployeeTotalTime(this.row());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>colLabel</Name>
						<Source><![CDATA[
        public str colLabel(int _column)
        {
            str ret;

            if (employeeWorkPlannerForm)
            {
                ret = employeeWorkPlannerForm.getColumnLabel(_column);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editControl</Name>
						<Source><![CDATA[
        public FormControl editControl(int _column, int _row)
        {
            return employeeWorkPlannerForm.getCellContent(_column, _row).getControl();
        }

]]></Source>
					</Method>
					<Method>
						<Name>rowLabel</Name>
						<Source><![CDATA[
        public str rowLabel(int _row)
        {
            str ret;

            if (employeeWorkPlannerForm)
            {
                ret = employeeWorkPlannerForm.getRowLabel(_row);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllTable</Name>
				<Type>Table</Type>
				<Methods>
					<Method>
						<Name>activeCellChanged</Name>
						<Source><![CDATA[
        public void activeCellChanged()
        {
            int                             column;
            int                             row;
            JmgProfileId                    oldProfileId;
            JmgWorkPlannerForm_ProfileGroup p;
            JmgWorkPlannerForm_Employee     e;
            super();

            if (!changingTabs)
            {
                p = profileGroupWorkPlannerForm;
                oldProfileId = allWorkPlannerForm.getProfileAt(this.column(), this.row());
                if (clearProfile.value())
                {
                    [column, row] = allWorkPlannerForm.setProfileAt(this.column(), this.row(), '');
                }
                else
                {
                    [column, row] = allWorkPlannerForm.setProfileAt(this.column(), this.row(), jmgProfileTable.Profile);
                }
                unsavedChanges = true;
                mustRefreshEmployeeTable = true;

                // Refresh week total
                e = employeeWorkPlannerForm;
                p.overlayColumnUpdated(this.column(), oldProfileId, e);
                // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                //          - JmgWorkPlannerForm.loadData()
                //          - JmgWorkPlannerForm_All.loadData()
                //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                allTable.cell(column, row).data(allWorkPlannerForm.getWeekTotal(column, row));
                allTable.updateCell(column, row);

                element.refreshAllProfile(this.column(), this.row());
                element.refreshAllTotalTime();

                element.refreshColumn(this.column(), column);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>colLabel</Name>
						<Source><![CDATA[
        public str colLabel(int _column)
        {
            str ret;

            if (allWorkPlannerForm)
            {
                ret = allWorkPlannerForm.getColumnLabel(_column);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editControl</Name>
						<Source><![CDATA[
        public FormControl editControl(int _column, int _row)
        {
            return allWorkPlannerForm ? allWorkPlannerForm.getCellContent(_column, _row).getControl(): null;
        }

]]></Source>
					</Method>
					<Method>
						<Name>rowLabel</Name>
						<Source><![CDATA[
        public str rowLabel(int _row)
        {
            str ret;

            if (allWorkPlannerForm)
            {
                ret = allWorkPlannerForm.getRowLabel(_row);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OverlayProfileGroup</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            JmgWorkPlannerForm_ProfileGroup p;
            boolean                         ret;
            int                             i;
            ret = super();

            p   = profileGroupWorkPlannerForm;
            profileGroupOverlayParm = this.value();
            p.parmOverlay(profileGroupOverlayParm);

            // Redraw table.
            profileGroupTable.rows(profileGroupWorkPlannerForm.numberOfRows());
            for (i = 1; i <= profileGroupWorkPlannerForm.numberOfRows(); i++)
            {
                element.refreshProfileGroupTotalTime(i);
            }
            element.initWeekTotals();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ProfileGroupTable</Name>
				<Type>Table</Type>
				<Methods>
					<Method>
						<Name>activeCellChanged</Name>
						<Source><![CDATA[
        public void activeCellChanged()
        {
            int column;
            int row;

            JmgWorkPlannerForm_Employee e;
            JmgProfileId                oldProfileId;
            super();

            if (!changingTabs)
            {
                e = employeeWorkPlannerForm;
                oldProfileId = profileGroupWorkPlannerForm.getProfileAt(this.column(), this.row());
                if (clearProfile.value())
                {
                    [column, row] = profileGroupWorkPlannerForm.setProfileAt(this.column(), this.row(), '');
                }
                else
                {
                    [column, row] = profileGroupWorkPlannerForm.setProfileAt(this.column(), this.row(), jmgProfileTable.Profile);
                }

                // Refresh week total
                e.overlayColumnUpdated(this.column(), oldProfileId, profileGroupWorkPlannerForm.getRowLabel(this.row()));

                // TwC BP error mitigated. RecordLevelSecurity is ensured in methods
                //          - JmgWorkPlannerForm.loadData()
                //          - JmgWorkPlannerForm_All.loadData()
                //          - JmgWorkPlannerForm_Employee.initPlannedAbsence()
                profileGroupTable.cell(column, row).data(profileGroupWorkPlannerForm.getWeekTotal(column, row));
                profileGroupTable.updateCell(column, row);

                element.refreshProfileProfile(this.column(), this.row());
                element.refreshProfileGroupTotalTime(this.row());

                unsavedChanges = true;
                mustRefreshEmployeeTable = true;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>colLabel</Name>
						<Source><![CDATA[
        public str colLabel(int _column)
        {
            str ret;

            if (profileGroupWorkPlannerForm)
            {
                ret = profileGroupWorkPlannerForm.getColumnLabel(_column);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editControl</Name>
						<Source><![CDATA[
        public FormControl editControl(int _column, int _row)
        {
            if (overlayProfileGroup.value())
            {
                JmgWorkPlannerForm_ProfileGroup pgForm = profileGroupWorkPlannerForm;
                return pgForm.getCellContent(_column, _row).getControl();
            }

            return profileGroupWorkPlannerForm.getCellContent(_column, _row).getControl();
        }

]]></Source>
					</Method>
					<Method>
						<Name>rowLabel</Name>
						<Source><![CDATA[
        public str rowLabel(int _row)
        {
            str ret;

            if (profileGroupWorkPlannerForm)
            {
                ret = profileGroupWorkPlannerForm.getRowLabel(_row);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>JmgProfileTable</Name>
			<Table>JmgProfileTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Color</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayAgreement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Profile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS40014</Caption>
		<Columns xmlns="">3</Columns>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<Pattern xmlns="">Custom</Pattern>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<TitleDataSource xmlns="">JmgProfileTable</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>357913941</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Save</Name>
								<ElementPosition>1946157054</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
								<NormalImage>Save</NormalImage>
								<Text>@SYS12229</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>JmgProfileCalendarCopy</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>JmgProfileCalendarCopy</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>JmgProfileCalendarCopyTheInterval</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS39045</HelpText>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<MenuItemName>JmgProfileCalendarCopyInterval</MenuItemName>
								<MenuItemType>Action</MenuItemType>
								<Text>@SYS39044</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>ClearChanges</Name>
								<ElementPosition>1778384894</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS40087</HelpText>
								<NeededPermission>Update</NeededPermission>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS40086</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>PrintButton</Name>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS97940</HelpText>
								<Type>MenuButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>JmgWorkPlanner_Employee</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>JmgWorkPlanner_Employee</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>JmgWorkPlanner_Profile</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>JmgWorkPlanner_Profile</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
								</Controls>
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Text>@SYS920</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group1</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Height>0</Height>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>250</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateIntervalSelection</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>FromDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>FromDate</ExtendedDataType>
								<LabelAlignment>Right</LabelAlignment>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>ToDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>ToDate</ExtendedDataType>
								<LabelAlignment>Right</LabelAlignment>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ShowWeekend</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@FieldDescriptions_HRM:JmgWorkPlanner_ShowWeekend</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS40018</Label>
								<LabelAlignment>Right</LabelAlignment>
							</AxFormControl>
						</Controls>
						<Caption>@SYS22526</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ProfileGroup</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ProfileGroupId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>profileGroupId</DataMethod>
								<LabelAlignment>Right</LabelAlignment>
							</AxFormControl>
						</Controls>
						<Caption>@SYS38522</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Profiles</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>ClearProfile</Name>
								<AlignControl>No</AlignControl>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS40012</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS40013</Label>
								<LabelAlignment>Right</LabelAlignment>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>ProfileGrid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>JmgProfileTable_Profile</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Profile</DataField>
										<DataSource>JmgProfileTable</DataSource>
										<LabelAlignment>Right</LabelAlignment>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>JmgProfileTable_Description</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>JmgProfileTable</DataSource>
										<LabelAlignment>Right</LabelAlignment>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>profileTime</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>profileTime</DataMethod>
										<DataSource>JmgProfileTable</DataSource>
										<LabelAlignment>Right</LabelAlignment>
									</AxFormControl>
								</Controls>
								<DataSource>JmgProfileTable</DataSource>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
						<Caption>@SYS39501</Caption>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>VSplitter</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<Style>SplitterVerticalContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612734</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Height>0</Height>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>EmployeeView</Name>
						<ElementPosition>1073741823</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Filters</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Filter</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CalcGroupId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>calcGroupId</DataMethod>
												<LabelAlignment>Right</LabelAlignment>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ApproveGroupId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>approveGroupId</DataMethod>
												<LabelAlignment>Right</LabelAlignment>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<Columns>2</Columns>
										<Caption>@SYS35881</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DisplayOptions</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>OverlayProfileCalendar</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS40016</HelpText>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS40015</Label>
												<LabelAlignment>Right</LabelAlignment>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>StandardProfile</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612734</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS38567</Label>
												<LabelAlignment>Right</LabelAlignment>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>ShowPlannedAbsence</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1879048190</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS38584</Label>
												<LabelAlignment>Right</LabelAlignment>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>AbsenceColor</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2013265918</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@FieldDescriptions_HRM:JmgWorkPlanner_AbsenceColor</HelpText>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>50</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColorRGB>
													<Red>5</Red>
													<Green>0</Green>
													<Blue>0</Blue>
												</BackgroundColorRGB>
												<ColorScheme>RGB</ColorScheme>
												<ForegroundColorRGB>
													<Red>8</Red>
													<Green>0</Green>
													<Blue>0</Blue>
												</ForegroundColorRGB>
												<Label>@SYS3414</Label>
												<LabelAlignment>Right</LabelAlignment>
												<LabelForegroundColorRGB>
													<Red>31</Red>
													<Green>0</Green>
													<Blue>0</Blue>
												</LabelForegroundColorRGB>
												<ShowZero>No</ShowZero>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Caption>@SYS26572</Caption>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Auto</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EmplTableGroup</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTableControl">
										<Name>EmployeeTable</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<Skip>Yes</Skip>
										<Type>Table</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StringEdit2</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>ButtonFace3D</BackgroundColor>
												<Label>@SCM:NotApplicableControl</Label>
												<LabelAlignment>Right</LabelAlignment>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Caption>@SYS303638</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@SYS68207</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ProfileGroupView</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Height>0</Height>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>0</Width>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AllGroup</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTableControl">
										<Name>AllTable</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Table</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StringEdit</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>ButtonFace3D</BackgroundColor>
												<Label>@SCM:NotApplicableControl</Label>
												<LabelAlignment>Right</LabelAlignment>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
										<Columns>1</Columns>
										<Rows>1</Rows>
									</AxFormControl>
								</Controls>
								<Caption>@SYS11696</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProfileGroups</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>OverlayProfileGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@FieldDescriptions_HRM:JmgWorkPlanner_OverlayProfileGroup</HelpText>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS40015</Label>
										<LabelAlignment>Right</LabelAlignment>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTableControl">
										<Name>ProfileGroupTable</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>0</Height>
										<HeightMode>SizeToAvailable</HeightMode>
										<Skip>Yes</Skip>
										<Type>Table</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>0</Width>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>StringEdit1</Name>
												<ElementPosition>1073741823</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackgroundColor>ButtonFace3D</BackgroundColor>
												<Label>@SCM:NotApplicableControl</Label>
												<LabelAlignment>Right</LabelAlignment>
												<ShowLabel>No</ShowLabel>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Caption>@SYS38522</Caption>
							</AxFormControl>
						</Controls>
						<Caption>@SYS38522</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
