<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailWorkspaceConfiguration</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailWorkspaceConfiguration extends FormRun implements IRetailOrgHierarchyLookupCallback
{
    RetailWorkspaceConfigurationType  retailWorkspaceConfigurationType;
    HierarchyPurpose    hierarchyPurpose;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize form and control values.
    /// </summary>
    public void init()
    {
        this.retailWorkspaceConfigurationType = element.args().parmEnum();

        this.hierarchyPurpose = RetailWorkspaceConfigurationHelper::getHierarchyPurpose(this.retailWorkspaceConfigurationType);

        super();

        RetailWorkspaceConfiguration currentConfiguration = RetailWorkspaceConfiguration::findOrCreateForCurrentUser(retailWorkspaceConfigurationType);
        QueryBuildDataSource dataSource = RetailWorkspaceConfiguration_DS.queryBuildDataSource();
        QueryBuildRange queryRange = dataSource.addRange(fieldNum(RetailWorkspaceConfiguration, RecId));
        queryRange.value(queryValue(currentConfiguration.RecId));

        RetailWorkspaceConfiguration_DS.executeQuery();

        this.initializeUIControls(retailWorkspaceConfigurationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUIControls</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    private void initializeUIControls(RetailWorkspaceConfigurationType _retailWorkspaceConfigurationType)
    {
        switch (_retailWorkspaceConfigurationType)
        {
            case RetailWorkspaceConfigurationType::PricingDiscountWorkspace:
            case RetailWorkspaceConfigurationType::CategoryProductManagementWorkspace:
                this.initializeChannelGroup();
                this.enableCateogryGroup();
                break;
            case RetailWorkspaceConfigurationType::ChannelDeploymentWorkspace:
            case RetailWorkspaceConfigurationType::CatalogManagementWorkspace:
            case RetailWorkspaceConfigurationType::ChannelOperationsWorkspace:
                this.initializeChannelGroup();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeChannelGroup</Name>
				<Source><![CDATA[
    private void initializeChannelGroup()
    {
        str SelectedOrgTypeName = '';
        OMInternalOrganization omInternalOrganization;
        OMHierarchyRelationship omHierarchyRelationship;
        OMHierarchyType omHierarchyType;

        // By default Channel filter is disabled, but enable it in this function to initialize channel group.
        // Note: there are workspaces which may not need channel group, so for those workspaces ChannelFilter will be disabled.
        ChannelFilter.visible(true);

        select firstonly Name from omInternalOrganization
            exists join omHierarchyRelationship
                where omInternalOrganization.RecId == omHierarchyRelationship.ChildOrganization &&
                      omHierarchyRelationship.RecId == RetailWorkspaceConfiguration.OMHierarchyRelationship;

        select oMHierarchyType
                join oMHierarchyRelationship
                    where oMHierarchyRelationship.HierarchyType == omHierarchyType.RecId && omHierarchyRelationship.RecId == RetailWorkspaceConfiguration.OMHierarchyRelationship;

        HierarchyType.text(omHierarchyType.Name);

        ChannelNames.text(omInternalOrganization.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCateogryGroup</Name>
				<Source><![CDATA[
    private void enableCateogryGroup()
    {
        CategoryFilter.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the dialog and raises a filterProvider event.
    /// </summary>
    public void closeOk()
    {
        // refresh the workspace with the new selected filter
        if (this.parmFilterProvider())
        {
            this.parmFilterProvider().parmChangeEvent().raiseEvent();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeOrgHierarchyLookupCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Callback method that will be executed when the user make a selection in the <c>RetailOrgHierarchyTreeLookup</c> form.
    /// </summary>
    /// <param name = "_originatingFilterControl">The control that is used to invoke the lookup.</param>
    /// <param name = "_selectedOmHierarchyRelationShip">The <c>OMHierarchyRelationship</c> <c>RecId</c> that represents the selected node.</param>
    public void executeOrgHierarchyLookupCallback(FormStringControl _originatingFilterControl, RefRecId _selectedOmHierarchyRelationShip)
    {
        // If RetailOrgHierarchyTreeLookup invokes this callback for returning a lookup result originating from the 'ChannelNames' control process it here.
        if (_originatingFilterControl.name() == ChannelNames.name())
        {
            //save the selected filter value to the current users workspace configuration table.
            ttsbegin;
            RetailWorkspaceConfiguration.OMHierarchyRelationship = _selectedOmHierarchyRelationShip;
            RetailWorkspaceConfiguration.update();
            ttscommit;

            OMHierarchyRelationship oMHierarchyRelationship;
            OMHierarchyType oMHierarchyType;

            select oMHierarchyType
                join oMHierarchyRelationship
                    where oMHierarchyRelationship.HierarchyType == oMHierarchyType.RecId && oMHierarchyRelationship.RecId == _selectedOmHierarchyRelationShip;

            HierarchyType.text(oMHierarchyType.Name);
        }
      // For extensibility: If RetailOrgHierarchyTreeLookup invokes this callback for a lookup result originating from other controls in this form 
      // then handle the result in the post handler of this method.

    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailWorkspaceConfiguration</Name>
				<Methods />
				<Fields>
					<Field>
						<DataField>Category</DataField>
						<Methods>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Lookup of Cateogory tree for given hierarchy
            /// </summary>
            /// <param name = "formReferenceControl"></param>
            /// <returns></returns>
            public Common lookupReference(FormReferenceControl formReferenceControl)
            {
                EcoResCategoryHierarchy retailHierarchy;

                // If RetailWorkspaceConfiguration.CategoryHierarchy is been saved, then use it for lookup of Category. If not, then Get default category hierarchy for Retail Role.
                if ( RetailWorkspaceConfiguration.CategoryHierarchy)
                {
                    retailHierarchy = EcoResCategoryHierarchy::find(RetailWorkspaceConfiguration.CategoryHierarchy);
                }
                else
                {
                    retailHierarchy = RetailWorkspaceConfigurationHelper::getDefaultCategoryHierarchy(EcoResCategoryNamedHierarchyRole::Retail);
                }

                Common ret = EcoResCategory::lookupCategoryHierarchy(formReferenceControl, retailHierarchy);

                if (ret.TableId == tableNum(EcoResCategory))
                {
                    EcoResCategory  ecoResCategoryLocal = ret.data();

                    // update the current Category hierarchy if selected category belongs to another hierarchy.
                    if (ecoResCategoryLocal.RecId
                                && RetailWorkspaceConfiguration.CategoryHierarchy != ecoResCategoryLocal.CategoryHierarchy)
                    {
                        RetailWorkspaceConfiguration.CategoryHierarchy = ecoResCategoryLocal.CategoryHierarchy;
                    }
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>resolveReference</Name>
								<Source><![CDATA[
            /// <summary>
            /// Resolve Reference to category based on change Category hierarchy
            /// </summary>
            /// <param name = "formReferenceControl"></param>
            /// <returns></returns>
            public Common resolveReference(FormReferenceControl formReferenceControl)
            {
                EcoResCategoryHierarchy  selectedCategoryHierarchy  = EcoResCategoryHierarchy::find(RetailWorkspaceConfiguration.CategoryHierarchy);

                Common ret = EcoResCategory::resolveCategoryHierarchy(formReferenceControl,  selectedCategoryHierarchy);

                return ret.RecId ? ret : null;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CategoryHierarchy</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Update Category with new defaults if Category hierarchy is changed that will change category too.
            /// </summary>
            public void modified()
            {
                super();

                RetailWorkspaceConfiguration.Category = EcoResCategory::getRoot(RetailWorkspaceConfiguration.CategoryHierarchy).RecId;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ChannelNames</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override lookup method to show list of operating units using tree control in the hierarchy purpose.
        /// </summary>
        public void lookup()
        {
            // Invoke organization hierarchy lookup form for selecting the workspace level organization hierarchy (aka channel) filter.
            RetailOrgHierarchyTreeLookup::lookup(this, RetailWorkspaceConfiguration.OMHierarchyRelationship, hierarchyPurpose, false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validate user input.
        /// </summary>
        /// <remarks>Empty string is allowed as an input to this control.</remarks>
        /// <returns>True if valid; otherwise false.</returns>
        public boolean validate()
        {
            OMInternalOrganization internalOrganization;
            OMHierarchyRelationship hierarchyRelationship;
            OMHierarchyType hierarchyTypeTable;

            boolean ret;

            ret = super();

            if (ret && this.valueStr() != '')
            {
                // If the user enters name of omInternalOrganizaton, select the specified organization and return the node that appears first in the omHierarchyRelationship list.
                // this is done as a single omInternalOrganization can appear in different hierarchy types,
                // (i.e. there can be multiple entries of the organization in OMHierarchyRelastionship table).
                select firstonly hierarchyRelationship
                exists join internalOrganization
                where internalOrganization.Name == this.valueStr() &&
                    hierarchyRelationship.ChildOrganization == internalOrganization.RecId;

                // set the hierarchy type name
                select hierarchyTypeTable
                    where hierarchyTypeTable.RecId == hierarchyRelationship.HierarchyType;

                HierarchyType.text(hierarchyTypeTable.Name);

                ret = ret && (hierarchyRelationship.RecId != 0);
            }

            if (ret) // if input applied by the user is valid
            {
                // Save current filter value to the workspace configuration table.
                ttsbegin;
                RetailWorkspaceConfiguration.OMHierarchyRelationship = hierarchyRelationship.RecId;
                RetailWorkspaceConfiguration.update();
                ttscommit;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            // If channel filter is set to blank set the HierarchyType name to blank as well.
            if (this.valueStr() == '')
            {
                HierarchyType.text('');
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailWorkspaceConfiguration</Name>
			<Table>RetailWorkspaceConfiguration</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryHierarchy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OMOperatingUnitID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperatingUnitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailConnDatabaseProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UserId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkspaceName</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@REX:ConfigureMyWorkspace</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>HeaderText</Name>
				<ConfigurationKey>Retail</ConfigurationKey>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text></Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ConfigurationFiltersGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ChannelFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HierarchyType</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@REX:ChannelHierarchy</Label>
								<ReplaceOnLookup>No</ReplaceOnLookup>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ChannelNames</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>Retail</ConfigurationKey>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Alignment>Left</Alignment>
								<Label>@REX:ChannelLabel</Label>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<NeededAccessLevel>Edit</NeededAccessLevel>
						<Caption>@REX:ChannelLabel</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CategoryFilter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>Retail</ConfigurationKey>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>RetailWorkspaceConfiguration_CategoryHierarchy</Name>
								<ConfigurationKey>Retail</ConfigurationKey>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>RetailWorkspaceConfiguration</DataSource>
								<ReferenceField>CategoryHierarchy</ReferenceField>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>RetailWorkspaceConfiguration_Category</Name>
								<ConfigurationKey>Retail</ConfigurationKey>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<DataSource>RetailWorkspaceConfiguration</DataSource>
								<Label>@SYS11718</Label>
								<ReferenceField>Category</ReferenceField>
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<NeededAccessLevel>Edit</NeededAccessLevel>
						<Caption>@SYS32339</Caption>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1879048190</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Top>0</Top>
				<TopMode>BottomEdge</TopMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>