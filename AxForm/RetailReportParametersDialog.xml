<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailReportParametersDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/// <summary>
/// This dialog displays the from date, to date and the store parameters for retail reports.
/// </summary>
[Form]
public class RetailReportParametersDialog extends FormRun implements RetailReportParametersInterface
{
    str operatingUnitNumber;

}
]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the value of the from date parameter.
    /// </summary>
    public void setFromDate(date _fromDate)
    {
        ReportFromDate.dateValue(_fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the value of the to date parameter.
    /// </summary>
    public void setToDate(date _toDate)
    {
        ReportToDate.dateValue(_toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStoreId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the value of the store id parameter.
    /// </summary>
    public void setStoreId(str _storeId)
    {
        reportStoreId.text(_storeId);
        if (System.String::IsNullOrEmpty(_storeId))
        {
            ReportStoreId.text("@Retail:RetailReportDefaultStoreDisplay");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOperatingUnitNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the value of the operating unit number parameter.
    /// </summary>
    public void setOperatingUnitNumber(str _operatingUnitNumber)
    {
        operatingUnitNumber = _operatingUnitNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retreives the value of the from date parameter.
    /// </summary>
    /// <returns>report from date parameter value.</returns>
    public date getFromDate()
    {
        return ReportFromDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retreives the value of the to date parameter.
    /// </summary>
    /// <returns>report to date parameter value.</returns>
    public date getToDate()
    {
        return ReportToDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoreId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retreives the value of the store id parameter.
    /// </summary>
    /// <returns>report store id parameter</returns>
    public str getStoreId()
    {
        if (ReportStoreId.text() == "@Retail:RetailReportDefaultStoreDisplay")
        {
            return "";
        }
        else
        {
            return ReportStoreId.text();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperatingUnitNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retreives the value of the store operating unit number parameter.
    /// </summary>
    /// <returns>Operating unit number for the selected store.</returns>
    public str getOperatingUnitNumber()
    {
        return operatingUnitNumber;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ReportFromDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the dates entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            date fromDate = ReportFromDate.dateValue();
            date toDate = ReportToDate.dateValue();

            // If from date > to date, then set the the to date = from date.
            if (fromDate > toDate)
            {
                ReportToDate.dateValue(fromDate);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportToDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method validates the dates entered.
        /// </summary>
        /// <returns>Value returned by base class method.</returns>
        public boolean modified()
        {
            boolean ret;
            ret = super();

            date fromDate = ReportFromDate.dateValue();
            date toDate = ReportToDate.dateValue();

            // If from date > to date, then set the the from date = to date.
            if (fromDate > toDate)
            {
                ReportFromDate.dateValue(toDate);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportStoreId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method gets the operating unit number for the selected store.
        /// </summary>
        public boolean modified()
        {
            boolean ret;
            ret = super();
            operatingUnitNumber = this.getOperatingUnitNumber(ReportStoreId.text());

            // If a store with the store number is found, set it to blank.
            if (System.String::IsNullOrEmpty(operatingUnitNumber))
            {
                ReportStoreId.text("@Retail:RetailReportDefaultStoreDisplay");
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>getOperatingUnitNumber</Name>
						<Source><![CDATA[
        private str getOperatingUnitNumber(str storeNumber)
        {
            RetailStoreView store;
            select firstonly store where store.StoreNum == storeNumber;
            str opUnitNumber;

            // If a store with the store number is found, return the operating unit number.
            if (store != null)
            {
                opUnitNumber = store.OperatingUnitNum;
            }

            return opUnitNumber;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@Retail:ReportParametersCaption</Caption>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ContentSection</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ReportFromDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:RetailReportFromDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>ReportToDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Retail:RetailReportToDate</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>ReportStoreId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>RetailStoreId</ExtendedDataType>
						<Label>@Retail:RetailReportStoreNumber</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitSection</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<Text>@Retail:RetailReportOKButton</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>@Retail:RetailReportCancelButton</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>