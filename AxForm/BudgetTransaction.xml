<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetTransaction</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetTransaction extends FormRun implements DimensionHierarchyIPreview, SysIFilterConsumerForm, OfficeIGeneratedWorkbookCustomExporter
{
    #resAppl
    #task

    RefRecId                              userLockedHeader;
    boolean                               allowDelete;
    boolean                               allowEditHeader;
    boolean                               allowEditLine;
    boolean                               isWorkflowHeaderSubmitted;
    boolean                               isVisibleVoucherAndPosting;
    BudgetTransactionManager              budgetTransactionManager;
    BudgetType                            budgetType;

    BudgetTransactionAllowTransferManager allowTransferManager;

    Args                                  accountStructureLookupArgs;

    DimensionHierarchyId                  accountStructureId;

    // <GCN>
    LedgerShowDebCRedController_CN        showDRsCRsController;
    boolean                               enableShowDRsCRs;
    #ISOCountryRegionCodes
    // </GCN>

    BudgetTransactionHeader               lookupBudgetTransactionHeader;
    BudgetTransactionLine                 lookupBudgetTransactionLine;

    boolean                               isBudgetTransactionTypeContextSpecified;
    BudgetTransactionType                 budgetTransactionTypeContext;

    Map                                   accountStructuresWithBudgetDimensions;

}
]]></Source>
			</Method>
			<Method>
				<Name>registerDatasourceOnQueryingEvent</Name>
				<Source><![CDATA[
    public void registerDatasourceOnQueryingEvent()
    {
        BudgetTransactionHeader_DS.OnQueryExecuting += eventhandler(this.parmFilterFormQueryEventHandler().applyFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetTransactionLine</Name>
				<Source><![CDATA[
    private boolean saveBudgetTransactionLine()
    {
        boolean isLineSaved;

        if (budgetTransactionLine.RecId == 0)
        {
            // Force save the budget transaction line.
            isLineSaved = budgetTransactionLine_ds.leaveRecord(true);
        }
        else
        {
            isLineSaved = budgetTransactionLine_ds.leaveRecord();
        }

        return isLineSaved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow()
    {
        // Can only submit the header workflow.
        return budgetTransactionHeader.isWorkflowAbleToSubmit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowControls</Name>
				<Source><![CDATA[
    public void updateWorkflowControls()
    {
        if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::None)
        {
            budgetTransactionHeaderWorkflowDropDialog.enabled(false);
            budgetTransactionLineWorkflowDropDialog.enabled(false);
        }
        else
        {
            budgetTransactionHeaderWorkflowDropDialog.enabled(true);

            if (budgetTransactionLine &&
                budgetTransactionHeader.WorkflowStatus != BudgetTransactionWorkflowStatus::None &&
                BudgetTransactionHeader.WorkflowStatus != BudgetTransactionWorkflowStatus::NotSubmitted)
            {
                if (budgetTransactionLine.getWorkflowWorkItemForCurrentUser(false))
                {
                    budgetTransactionLineWorkflowDropDialog.enabled(true);
                }
                else
                {
                    budgetTransactionLineWorkflowDropDialog.enabled(false);
                }
            }
            else
            {
                budgetTransactionLineWorkflowDropDialog.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSegmentedEntryControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the segmented entry control.
    /// </summary>
    public void initSegmentedEntryControl()
    {
        if (!accountStructureId)
        {
            BudgetLineGrid_BudgetSegmentedEntry.setAccountStructure(
                DimensionAttributeValueCombination::find(budgetTransactionLine.LedgerDimension).AccountStructure,
                false);
        }
        else
        {
            BudgetLineGrid_BudgetSegmentedEntry.setAccountStructure(accountStructureId, false);
        }

        BudgetLineGrid_BudgetSegmentedEntry.parmControlDate(budgetTransactionLine.Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesForBudgetHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any budget transaction lines exist for the budget transaction header.
    /// </summary>
    /// <returns>
    ///    true if at least one line exists for the specified budget transaction header; otherwise, false.
    /// </returns>
    public boolean hasLinesForBudgetHeader()
    {
        boolean hasLinesForBudgetHeader = false;

        if (budgetTransactionHeader.RecId)
        {
            // Get the count from the database.
            hasLinesForBudgetHeader = BudgetTransactionManager::hasLinesForBudgetHeader(budgetTransactionHeader);
        }

        return hasLinesForBudgetHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a budget transaction header to the not in use state.
    /// </summary>
    public void clearInUse()
    {
        if (BudgetTransactionManager::clearInUse(userLockedHeader))
        {
            // If the in use has been cleared, reset the locked header id.
            userLockedHeader = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the in use status and possibly reclaims the transaction number that was allocated.
    /// </summary>
    public void close()
    {
        if (!budgetTransactionHeader.RecId && budgetTransactionHeader.TransactionNumber)
        {
            // Form is being closed without saving the budget transaction header.
            // Release the transaction number that was allocated to the budget transaction header.
            NumberSeq::releaseNumber(BudgetParameters::numRefBudgetTransactionId().NumberSequenceId, budgetTransactionHeader.TransactionNumber);
        }

        // Need to reread from the datasource because the in use status
        // may have changed since the form displayed the header previously.
        budgetTransactionHeader_ds.reread();

        if (budgetTransactionHeader.InUseBy == curUserId())
        {
            // Clear the in use by the current user.
            element.clearInUse();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmDeleteForWorkflowApproved</Name>
				<Source><![CDATA[
    public boolean confirmDeleteForWorkflowApproved()
    {
        boolean isConfirmed = true;

        if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Approved &&
            Box::yesNo(strFmt("@SYS323416", budgetTransactionHeader.TransactionNumber), DialogButton::No) == DialogButton::No)
        {
            // The delete to the approved transaction was not confirmed.
            isConfirmed = false;
        }

        return isConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmEditForWorkflowApproved</Name>
				<Source><![CDATA[
    public boolean confirmEditForWorkflowApproved()
    {
        boolean isConfirmed = true;

        if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Approved &&
            Box::yesNo("@SYS323417", DialogButton::No) == DialogButton::No)
        {
            // The edit to the approved transaction was not confirmed.
            isConfirmed = false;

            budgetTransactionHeader_ds.reread();
            budgetTransactionHeader_ds.rereadReferenceDataSources();
            budgetTransactionHeader_ds.refresh();

            budgetTransactionLine_ds.reread();
            budgetTransactionLine_ds.rereadReferenceDataSources();
            budgetTransactionLine_ds.refresh();
        }

        return isConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsForMultipleRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method enables or disables buttons when there are multiple records selected.
    /// </summary>
    public void enableButtonsForMultipleRecords()
    {
        BudgetTransactionHeader budgetTransactionHeaderMarked;
        boolean                 canUpdateBudgetForMarkedRecords = true;

        // Get the marked records in the datasource by passing 1 to getFirst.
        budgetTransactionHeaderMarked = budgetTransactionHeader_ds.getFirst(1) as BudgetTransactionHeader;

        if (budgetTransactionHeaderMarked)
        {
            updateBudgetButton.enabled(true);

            budgetTransactionHeader_ds.allowDelete(true);
            budgetTransactionLine_ds.allowDelete(true);
        }

        while (budgetTransactionHeaderMarked && canUpdateBudgetForMarkedRecords)
        {
            if (budgetTransactionHeaderMarked.TransactionStatus == BudgetTransactionStatus::Completed ||
                budgetTransactionHeaderMarked.isUserBlocked(false) ||
                budgetTransactionHeaderMarked.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected ||
                budgetTransactionHeaderMarked.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted)
            {
                // Budget transaction is either confirmed or is in workflow process.
                updateBudgetButton.enabled(false);

                budgetTransactionHeader_ds.allowDelete(false);
                budgetTransactionLine_ds.allowDelete(false);

                canUpdateBudgetForMarkedRecords = false;
            }
            else if (budgetTransactionHeaderMarked.WorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted)
            {
                // Budget transaction needs to be submitted to workflow.
                updateBudgetButton.enabled(false);
            }

            budgetTransactionHeaderMarked = budgetTransactionHeader_ds.getNext() as BudgetTransactionHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openLinesInExcel</Name>
				<Source><![CDATA[
    public void openLinesInExcel()
    {
        str templateName = this.getExcelTemplateName();
        const str fileExtension = 'xlsx';

        DocuFileSaveResult saveResult = DocuFileSave::promptForSaveLocation(templateName, fileExtension, "@Budget:BudgetRegisterEntryOpenInExcel", "@SYS129613");

        if (saveResult.parmAction() != DocuFileSaveAction::Cancel)
        {
            DocuTemplate template = DocuTemplate::findTemplate(OfficeAppApplicationType::Excel, templateName);

            if (template && template.TemplateID == templateName)
            {
                Map filtersToApply = new Map(Types::String, Types::Class);

                // Create header filters.
                LegalEntityDataAreaId legalEntityId = curExt();

                ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(tablestr(BudgetRegisterEntryHeaderEntity));

                // Filter by both the entity key [LedgalEntityId, EntryNumer] and primary company context [DataAreaId]
                // to allow all entity lookup and publishing functions to execute.
                var filter = filterBuilder.and(
                    filterBuilder.and(
                        filterBuilder.areEqual(fieldStr(BudgetRegisterEntryHeaderEntity, LegalEntityId), legalEntityId),
                        filterBuilder.areEqual(fieldStr(BudgetRegisterEntryHeaderEntity, DataAreaId), legalEntityId)),
                    filterBuilder.areEqual(fieldStr(BudgetRegisterEntryHeaderEntity, EntryNumber), budgetTransactionHeader.TransactionNumber));

                filtersToApply.insert(tablestr(BudgetRegisterEntryHeaderEntity), filter);

                // Create line filters.
                filterBuilder = new ExportToExcelFilterTreeBuilder(tablestr(BudgetRegisterEntryLineEntity));

                // Filter by both the entity key [LedgalEntityId, EntryNumer] and primary company context [DataAreaId]
                // to allow all entity lookup and publishing functions to execute.
                filter = filterBuilder.and(
                    filterBuilder.and(
                        filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, LegalEntityId), legalEntityId),
                        filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, DataAreaId), legalEntityId)),
                    filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, EntryNumber), budgetTransactionHeader.TransactionNumber));

                filtersToApply.insert(tablestr(BudgetRegisterEntryLineEntity), filter);

                // Generate the workbook using the template and filters.
                System.IO.MemoryStream templateStream = new System.IO.MemoryStream();

                DocuTemplateRender renderer = new DocuTemplateRender();
                renderer.renderTemplateToStream(template, filtersToApply, templateStream, OfficeTrimmable::construct(legalEntityId));

                templateStream.Seek(0, System.IO.SeekOrigin::Begin);

                // Pass the workbook to the user.
                DocuFileSave::processSaveResult(templateStream, saveResult);
            }
            else
            {
                warning(strFmt("@ApplicationFoundation:DocuTemplateNotFound", templateName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcelTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the excel template.
    /// </summary>
    /// <returns>
    /// Returns the string value of template name.
    /// </returns>
    protected str getExcelTemplateName()
    {
        if (BudgetParameters::find().DeriveAccountStructureFromCombination)
        {
            return resourceStr(BudgetRegisterEntryWithoutAccountStructureTemplate);
        }
        else
        {
            return resourceStr(BudgetRegisterEntryTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">The menu item.</param>
    /// <returns>
    /// Returns the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item;
    /// otherwise, null.
    /// </returns>
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem)
    {
        ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::construct();

        ExportToExcelDataEntityInfo entity = new ExportToExcelDataEntityInfo();
        entity.entityName(tablestr(BudgetRegisterEntryLineEntity));

        LegalEntityDataAreaId legalEntityId = curExt();

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(entity.entityName());

        // Filter by both the entity key [LedgalEntityId, EntryNumer] and primary company context [DataAreaId]
        // to allow all entity lookup and publishing functions to execute.
        var filter = filterBuilder.and(
            filterBuilder.and(
                filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, LegalEntityId), legalEntityId),
                filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, DataAreaId), legalEntityId)),
            filterBuilder.areEqual(fieldStr(BudgetRegisterEntryLineEntity, EntryNumber), budgetTransactionHeader.TransactionNumber));

        entity.filter(filter);

        context.entities().addEnd(entity);

        ExportToExcelDataEntityBindingInfo binding = new ExportToExcelDataEntityBindingInfo();
        binding.entityName(entity.entityName());

        binding.useFieldGroup(false);
        this.addGroupFieldsToFieldList(
            tableStr(BudgetRegisterEntryLineEntity),
            tableFieldGroupStr(BudgetRegisterEntryLineEntity, AutoReport),
            binding.fieldList());

        binding.fieldList().addEnd(fieldStr(BudgetRegisterEntryLineEntity, DataAreaId));

        context.bindings().addEnd(binding);

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupFieldsToFieldList</Name>
				<Source><![CDATA[
    private void addGroupFieldsToFieldList(TableName _tableName, FieldGroupName _fieldGroupName, List _fieldList)
    {
        TableId tableId = tableName2Id(_tableName);
        DictFieldGroup fieldGroup = new DictFieldGroup(tableId, _fieldGroupName);
        FieldId fieldId;

        if (fieldGroup)
        {
            for (int i = 1; i <= fieldGroup.numberOfFields(); i++)
            {
                fieldId = fieldGroup.field(i);

                if (fieldId)
                {
                    _fieldList.addEnd(fieldId2Name(tableId, fieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">The menu options to be customized.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        ListIterator dataEntityOptionsIterator = new ListIterator(_menuOptions.dataEntityOptions());

        // Remove auto-added data entities from the menu.
        while (dataEntityOptionsIterator.more())
        {
            dataEntityOptionsIterator.delete();
        }

        // Add a custom export option for BudgetRegisterEntryLineEntity so a custom filter can be added later.
        OfficeGeneratedExportMenuItem menuItem = OfficeGeneratedExportMenuItem::construct(tableStr(BudgetRegisterEntryLineEntity), tableStr(BudgetRegisterEntryLineEntity));
        menuItem.displayName("@Budget:BudgetAccountEntries");
        _menuOptions.customMenuItems().addEnd(menuItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyId</Name>
				<Source><![CDATA[
    public DimensionHierarchyId getHierarchyId(int _dataSourceId)
    {
        return accountStructureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructureId</Name>
				<Source><![CDATA[
    public DimensionHierarchyId getAccountStructureId(Name _accountStructureName)
    {
        DimensionHierarchyId accountStructureIdWithBudgetDimensions;

        if (!accountStructuresWithBudgetDimensions)
        {
            accountStructuresWithBudgetDimensions = new Map(Types::String, Types::Int64);
        }

        if (accountStructuresWithBudgetDimensions.exists(_accountStructureName))
        {
            accountStructureIdWithBudgetDimensions = accountStructuresWithBudgetDimensions.lookup(_accountStructureName);
        }
        else
        {
            accountStructureIdWithBudgetDimensions = BudgetTransactionManager::getAccountStructure(budgetTransactionHeader.PrimaryLedger, _accountStructureName);

            if (accountStructureIdWithBudgetDimensions)
            {
                // Only cache account structures that have budget dimensions in order to
                // repeat validation messages from the getAccountStructure call above for invalid names.
                accountStructuresWithBudgetDimensions.insert(_accountStructureName, accountStructureIdWithBudgetDimensions);
            }
        }

        return accountStructureIdWithBudgetDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountStructureId</Name>
				<Source><![CDATA[
    public boolean validateAccountStructureId(Name _accountStructureName)
    {
        DimensionHierarchyId accountStructureIdWithBudgetDimensions = element.getAccountStructureId(_accountStructureName);

        return accountStructureIdWithBudgetDimensions != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideNegativeDRCRController_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide the DR and CR fields in form <c>BudgetTransaction</c>
    /// </summary>
    private void hideNegativeDRCRController_CN()
    {
        BudgetLineGrid_AmountCredit.visible(false);
        BudgetLineGrid_AmountDebit.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the BudgetTransactionManager class.
    /// Initializes the form when called from ListPages.
    /// </summary>
    public void init()
    {
        if (element.args() && !element.args().caller() && !element.args().record())
        {
            // No record or caller context has been set, try to get the record from the URL or the request context.
            if (!element.args().getRequestContextQuery())
            {
                element.args().requestContextQuery(Global::getClientURLQueryValue('q'));
            }

            str contextQuery = element.args().getRequestContextQuery();

            FormRunConfigurationUserWorkspace formRunConfigurationUserWorkspace;

            select firstonly formRunConfigurationUserWorkspace
                where formRunConfigurationUserWorkspace.WorkspaceName == contextQuery;

            if (contextQuery && !formRunConfigurationUserWorkspace.RecId)
            {
                BudgetTransactionHeader recordFromWFContext = BudgetWorkflowHelper::getBudgetHeaderRecordFromQuery(contextQuery);
                element.args().record(recordFromWFContext);
            }
            else if (formRunConfigurationUserWorkspace.RecId)
            {
                element.args().requestContextQuery(Global::getClientURLQueryValue(''));
            }
        }

        if (element.args().record() && !FormDataUtil::isFormDataSource(element.args().record()))
        {
            if (element.args().dataset() == tableNum(BudgetTransactionHeader))
            {
                // The form was called from code to lookup the specified budget transaction header record.
                // Set the record to be found upon the first executeQuery call.
                lookupBudgetTransactionHeader = element.args().record() as BudgetTransactionHeader;
                element.args().lookupRecord(lookupBudgetTransactionHeader);
            }
            else if (element.args().dataset() == tableNum(BudgetTransactionLine))
            {
                // The form was called from code to lookup the specified budget transaction line record.
                // Set the record to be found upon the first executeQuery call.
                lookupBudgetTransactionLine = element.args().record() as BudgetTransactionLine;
                lookupBudgetTransactionHeader = lookupBudgetTransactionLine.getBudgetTransactionHeader();
                element.args().lookupRecord(lookupBudgetTransactionHeader);
            }

            if (lookupBudgetTransactionHeader)
            {
                appl.setDefaultCompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(lookupBudgetTransactionHeader.PrimaryLedger)), false);
            }
        }

        budgetTransactionManager = BudgetTransactionManager::construct();

        if (element.args().parmEnumType() == enumNum(BudgetTransactionType))
        {
            isBudgetTransactionTypeContextSpecified = true;
            budgetTransactionTypeContext = element.args().parmEnum();
        }

        // <GCN>
        enableShowDRsCRs = LedgerShowDebCRedController_CN::isShowDRsCRsFeatureEnabled();
        if (enableShowDRsCRs)
        {
            showDRsCRsController = LedgerShowDebCRedController_CN::construct(BudgetTransactionLine.TableId);
        }
        // </GCN>

        super();

        // <GCN>
        if (!enableShowDRsCRs)
        {
            this.hideNegativeDRCRController_CN();
        }
        // </GCN>

        // Set the initial status of the datasources.
        // This can't be done via the datasource properties because then security is not properly applied.
        budgetTransactionHeader_ds.allowDelete(false);
        budgetTransactionLine_ds.allowEdit(false);
        budgetTransactionLine_ds.allowCreate(false);
        budgetTransactionLine_ds.allowDelete(false);

        isVisibleVoucherAndPosting = LedgerParameters::find().IsBudgetAppropriationEnabled == NoYes::Yes;
        displayJournalizingDefinitionCode.visible(isVisibleVoucherAndPosting);
        voucherButtonLinesActions.visible(isVisibleVoucherAndPosting);

        if (BudgetParameters::find().DeriveAccountStructureFromCombination)
        {
            BudgetLineGrid_AccountStructure.allowEdit(false);
        }
        else
        {
            BudgetLineGrid_AccountStructure.allowEdit(true);
        }

        if (FeatureStateProvider::isFeatureEnabled(BudgetTransactionFormPerfEnhancementFeature::instance()))
        {
            switch (element.args().menuItemName())
            {
                case menuitemDisplayStr(BudgetTransactionDraft):
                    this.design().caption("@Budget:DraftBudgetRegisterEntries");
                    break;

                case menuitemDisplayStr(BudgetTransactionCompleted):
                    #SysSystemDefinedButtons
                    FormCommandButtonControl newButton = this.control(this.controlId(#SystemDefinedNewButton)) as FormCommandButtonControl;
                    newButton.enabled(false);

                    this.design().caption("@Budget:CompletedBudgetRegisterEntries");
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorkflowConfiguration</Name>
				<Source><![CDATA[
    public Common loadWorkflowConfiguration()
    {
        return budgetTransactionHeader.getWorkflowVersionTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionToHeader</Name>
				<Source><![CDATA[
    public void positionToHeader(BudgetTransactionId _transactionNumber)
    {
        element.args().lookupRecord(BudgetTransactionHeader::findByTransactionNumber(_transactionNumber, Ledger::current()));
        budgetTransactionHeader_ds.research(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchSelectedHeader</Name>
				<Source><![CDATA[
    public void researchSelectedHeader()
    {
        BudgetTransactionId selectedBudgetTransactionId = budgetTransactionHeader.TransactionNumber;

        budgetTransactionHeader_ds.reread();
        budgetTransactionHeader_ds.refresh();
        element.positionToHeader(selectedBudgetTransactionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkflowStatus</Name>
				<Source><![CDATA[
    public void resetWorkflowStatus(boolean _research = true)
    {
        if (budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft &&
            budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Approved)
        {
            // Reset the workflow status based on the current budget transaction code.
            BudgetTransactionHeader::resetWorkflowStatus(budgetTransactionHeader.RecId);

            budgetTransactionHeader_ds.reread();
            budgetTransactionHeader_ds.refresh();

            if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::None)
            {
                warning(strFmt(
                    "@SYS323414",
                    fieldId2pname(tableNum(BudgetTransactionCode), fieldNum(BudgetTransactionCode, WorkflowTableSequenceNumber)),
                    formStr(BudgetTransactionCode)));
            }

            if (_research)
            {
                budgetTransactionLine_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditBudgetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editable state of the budget type controls on the form.
    /// </summary>
    public void setAllowEditBudgetType()
    {
        if (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer)
        {
            if (budgetTransactionLine_ds.numberOfRowsLoaded() > 0)
            {
                // Set the budget type variable so that all lines will have the same budget type.
                budgetType = budgetTransactionHeader.getBudgetType();
            }

            if (budgetTransactionLine_ds.numberOfRowsLoaded() > 1)
            {
                // There is more than one line; don't allow budget type to be changed.
                budgetLineGrid_BudgetType.allowEdit(false);
            }
            else
            {
                // There are either no lines or one line; budget type can be changed
                // based on the workflow status for the active line.
                budgetLineGrid_BudgetType.allowEdit(allowEditLine);
            }
        }
        else if ((budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Encumbrance) ||
                 (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::PreEncumbrance))
        {
            // Disable the budget type fields because of the header's transaction type.
            budgetLineGrid_BudgetType.allowEdit(false);

            // The budget type for encumbrance or pre-encumbrance lines is always expense.
            budgetType = BudgetType::Expense;
        }
        else
        {
            // Enable the budget type fields based on the workflow status for the active line.
            budgetLineGrid_BudgetType.allowEdit(allowEditLine);

            // The default budget type for lines is expense.
            budgetType = BudgetType::Expense;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditTransferLedgerBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editable status of the TransferLedgerBalances button.
    /// </summary>
    /// <param name="_allowEdit">
    /// Indicates whether the controls on the form should be editable or not.
    /// </param>
    public void setAllowEditTransferLedgerBalances(boolean _allowEdit)
    {
        if (_allowEdit &&
            allowEditHeader  &&
            ((budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Amendment) ||
             (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::OriginalBudget)))
        {
            transferLedgerBalancesButton.enabled(true);
        }
        else
        {
            transferLedgerBalancesButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editable status of the update budget button.
    /// </summary>
    /// <param name="_allowEdit">
    /// Indicates whether the controls on the form should be editable or not.
    /// </param>
    /// <param name="_checkLineRecordExists">
    /// Indicates whether to check for budget transaction line record or not.
    /// </param>
    public void setAllowEditUpdateBudget(boolean _allowEdit, boolean _checkLineRecordExists = true)
    {
        if (_allowEdit == true &&
            (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::NotSubmitted ||
             budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted ||
             budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected))
        {
            // Disable the UpdateBudget button.
            updateBudgetButton.enabled(false);
        }
        else
        {
            if (_checkLineRecordExists)
            {
                updateBudgetButton.enabled(allowEditHeader && this.hasLinesForBudgetHeader());
            }
            else
            {
                updateBudgetButton.enabled(allowEditHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowNewDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enable property of the new and delete buttons.
    /// </summary>
    /// <param name="_allowEdit">
    /// Indicates whether the controls on the form should be editable or not.
    /// </param>
    public void setAllowNewDelete(boolean _allowEdit)
    {
        if (_allowEdit &&
            allowDelete)
        {
            // Enable the header delete action.
            budgetTransactionHeader_ds.allowDelete(true);
        }
        else
        {
            // Disable the header delete action.
            budgetTransactionHeader_ds.allowDelete(false);
        }

        if (_allowEdit)
        {
            // Enable the line's new button based on whether the header is submitted to workflow.
            addCommandButton.enabled(!isWorkflowHeaderSubmitted);

            // Enable the line's delete button based on whether delete is allowed.
            removeCommandButton.enabled(allowDelete);
        }
        else
        {
            // Disable the line new and delete buttons.
            addCommandButton.enabled(false);
            removeCommandButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditRecordMode</Name>
				<Source><![CDATA[
    public void setEditRecordMode()
    {
        if (element.inViewMode())
        {
            // Put the form in edit mode.
            element.task(#taskEditRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsAllowEditState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editable state of the controls on the form.
    /// </summary>
    public void setFieldsAllowEditState()
    {
        budgetTransactionHeader_ds.allowDelete(allowDelete);
        budgetTransactionLine_ds.allowEdit(allowEditLine);
        budgetTransactionLine_ds.allowDelete(allowDelete);

        // New lines can be created if the user is editing the header for workflow.
        budgetTransactionLine_ds.allowCreate(allowEditHeader);

        if (budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft)
        {
            // Can't disable the entire header datasource because the InUse checkbox must
            // be editable when other header fields are disabled for draft transactions.
            budgetTransactionHeader_ds.allowEdit(true);
            tabPageDetails.enabled(true);

            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, Date)).allowEdit(allowEditHeader);
            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, IsOneTimeAmendment)).allowEdit(allowEditHeader);
            select_editBudgetModel.allowEdit(allowEditHeader);

            // Set the budget transaction code editable state based on if any budget lines exist
            // and whether the workflow is being processed.
            // The allowDelete flag has the same conditions for use.
            select_BudgetTransactionCode.allowEdit(allowDelete);

            // Set the reason code and comment editable state based on the workflow status.
            select_editReasonCode.allowEdit(allowEditHeader);
            select_editReasonComment.allowEdit(allowEditHeader);

            // Set the UpdateBudget button editable state.
            element.setAllowEditUpdateBudget(allowEditHeader);

            element.setAllowEditTransferLedgerBalances(allowEditHeader);

            element.setAllowNewDelete(allowEditHeader);

            // If the header can't be edited because it is in use, the user must be able to unmark in use.
            status_editIsInUse.allowEdit(!allowEditHeader && !userLockedHeader);

            openLinesInExcel.enabled(allowEditHeader);
        }
        else
        {
            budgetTransactionHeader_ds.allowEdit(false);
            updateBudgetButton.enabled(false);
            transferLedgerBalancesButton.enabled(false);
            openLinesInExcel.enabled(false);

            element.setAllowNewDelete(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormState</Name>
				<Source><![CDATA[
    public void setFormState()
    {
        // Set the form state to reflect the current state of the header and lines.
        element.setFormStateForHeader();
        element.setFormStateForLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormStateForHeader</Name>
				<Source><![CDATA[
    public void setFormStateForHeader()
    {
        if (userLockedHeader != 0 &&
            (userLockedHeader != budgetTransactionHeader.RecId ||
            element.inViewMode()))
        {
            element.clearInUse();
        }

        // Need to reread from the datasource because the in use status
        // may have changed since the form displayed the header previously.
        budgetTransactionHeader_ds.reread();

        element.setFormViewEditMode();

        if ((budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed) ||
             (budgetTransactionHeader.isUserBlocked(false) && (userLockedHeader == 0)))
        {
            // Transactions that are completed or in use are not editable.
            allowEditHeader = false;
            allowEditLine = false;
            allowDelete = false;
            isWorkflowHeaderSubmitted = false;
        }
        else
        {
            if (budgetTransactionHeader.RecId &&
                userLockedHeader == 0 &&
                !element.inViewMode())
            {
                BudgetTransactionManager::setInUse(budgetTransactionHeader_ds);
                userLockedHeader = budgetTransactionHeader.RecId;
            }

            // Get whether the workflow user is permitted to edit the header.
            // When workflow is not submitted and not rejected this returns true.
            allowEditHeader = budgetTransactionHeader.isWorkflowUserPermittedToEdit();
            allowEditLine = allowEditHeader;

            if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Submitted)
            {
                // Set the workflow header submitted flag to prevent form actions from occurring.
                isWorkflowHeaderSubmitted = true;

                // Prevent submitted workflows from being deleted.
                allowDelete = false;
            }
            else
            {
                isWorkflowHeaderSubmitted = false;

                if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::Rejected)
                {
                    // Prevent rejected workflows from deleted.
                    // Rejected workflows must be recalled before being deleted.
                    allowDelete = false;
                }
                else
                {
                    allowDelete = true;
                }
            }
        }

        // Need to show or hide the One Time Amendment field depending on the transaction type.
        element.setIfOneTimeAmendmentVisible();

        // Set the status of the budget type fields based on the type of transaction.
        element.setAllowEditBudgetType();

        // Set the editable status of the form.
        element.setFieldsAllowEditState();

        // Set the visible state of the workflow controls.
        element.setVisibleWorkflowControls();

        // Set the enabled state of the workflow drop dialog buttons.
        element.updateWorkflowControls();

        if (isVisibleVoucherAndPosting)
        {
            displayJournalizingDefinitionCode.visible(budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft);
        }

        // Set header title information.
        headerTransactionStatus.text(enum2str(budgetTransactionHeader.TransactionStatus));

        if (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer)
        {
            // Construct an instance of the allow transfer manager and process the transaction.
            allowTransferManager = BudgetTransactionAllowTransferManager::construct(budgetTransactionHeader.RecId);
            allowTransferManager.checkBudgetTransaction(false);
        }

        // Refresh the datasource to display all the bound field changes.
        budgetTransactionHeader_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormStateForLine</Name>
				<Source><![CDATA[
    public void setFormStateForLine()
    {
        if (budgetTransactionLine_ds.numberOfRowsLoaded() > 0)
        {
            // Default whether line edit is allowed based on the header.
            allowEditLine = allowEditHeader;

            if (isWorkflowHeaderSubmitted)
            {
                // When the header workflow is running, determine whether the workflow user is allowed to edit the line.
                // The line may be in a rejected or request change state that requires updating.
                allowEditLine = budgetTransactionLine.isWorkflowUserPermittedToEdit();
            }

            // Set the status of the budget type fields based on the workflow status.
            element.setAllowEditBudgetType();

            // Set the editable status of the form based the workflow status.
            element.setFieldsAllowEditState();

            // If a line has been saved, enable the budget transaction inquiry buttons.
            budgetTransInquiryButtonLinesActions.enabled(true);
            reverseInquiryButtonLinesActions.enabled(true);
            budgetBalancesLinesActions.enabled(true);
            budgetBalancesActualsLinesActions.enabled(true);
            budgetControlStatisticsByDimensionLinesActions.enabled(true);

            if (budgetTransactionLine.ledgerDimensionHasMainAccount() && allowEditLine)
            {
                cashflowForecast_IncludeInCashFlowForecast.enabled(true);
            }
            else
            {
                cashflowForecast_IncludeInCashFlowForecast.enabled(false);
            }

            if (budgetTransactionLine.isCashFlowEnabled())
            {
                cashflowButtonLinesActions.enabled(true);
            }
            else
            {
                cashflowButtonLinesActions.enabled(false);
            }

            if (budgetTransactionLine.BudgetType == BudgetType::Expense
                && Ledger::isLedgerBudgetControlEnabled(budgetTransactionHeader.PrimaryLedger))
            {
                budgetCheckResultsButtonLinesActions.enabled(true);
            }
            else
            {
                budgetCheckResultsButtonLinesActions.enabled(false);
            }

            allocateByPeriodButtonLinesActions.enabled(allowEditHeader && !isWorkflowHeaderSubmitted);

            // Enable the Enter Recurrence button.
            copyButtonLinesActions.enabled(allowEditHeader && !isWorkflowHeaderSubmitted);

            if (budgetTransactionHeader.BudgetTransactionType != BudgetTransactionType::Encumbrance && budgetTransactionHeader.BudgetTransactionType != BudgetTransactionType::PreEncumbrance)
            {
                // Enable the allocate by term button.
                allocateByTermButtonLinesActions.enabled(allowEditHeader && !isWorkflowHeaderSubmitted);
            }
            else
            {
                allocateByTermButtonLinesActions.enabled(false);
            }
        }
        else
        {
            // The user is also allowed to edit new lines.
            allowEditLine = true;

            if ((budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer) &&
                (budgetTransactionLine_ds.numberOfRowsLoaded() > 1))
            {
                // At least one other line already exists for the Transfer so don't allow the budget type to be edited on this new line.
                budgetLineGrid_BudgetType.allowEdit(false);
            }

            budgetTransInquiryButtonLinesActions.enabled(false);
            reverseInquiryButtonLinesActions.enabled(false);
            budgetBalancesLinesActions.enabled(false);
            budgetBalancesActualsLinesActions.enabled(false);
            budgetCheckResultsButtonLinesActions.enabled(false);
            budgetControlStatisticsByDimensionLinesActions.enabled(false);
            allocateByPeriodButtonLinesActions.enabled(false);
            allocateByTermButtonLinesActions.enabled(false);
            copyButtonLinesActions.enabled(false);
            cashflowButtonLinesActions.enabled(false);
        }

        // Set the enabled state of the workflow drop dialog buttons.
        element.updateWorkflowControls();

        if (isVisibleVoucherAndPosting)
        {
            voucherButtonLinesActions.enabled(budgetTransactionLine.GeneralJournalEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormViewEditMode</Name>
				<Source><![CDATA[
    public void setFormViewEditMode(boolean _resetViewEditMode = false)
    {
        if (!_resetViewEditMode && budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed)
        {
            // Completed transactions are never editable.
            // Hide the client view and edit mode buttons.
            element.design().viewEditMode(ViewEditMode::View);
        }
        else
        {
            // Let the user control the view and edit mode.
            element.design().viewEditMode(ViewEditMode::Auto);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIfOneTimeAmendmentVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides or shows the OneTimeAmendment field on the budget transaction header
    /// based on the transaction type of the header.
    /// </summary>
    public void setIfOneTimeAmendmentVisible()
    {
        if (budgetTransactionHeader.BudgetTransactionType != BudgetTransactionType::Amendment)
        {
            // If the transaction type is not Amendment, hide the One Time amendment field.
            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, IsOneTimeAmendment)).visible(false);

            // Need to set allowEdit here otherwise the field will appear as enabled when the form first opens.
            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, IsOneTimeAmendment)).allowEdit(allowEditHeader);
        }
        else
        {
            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, IsOneTimeAmendment)).visible(true);
            budgetTransactionHeader_ds.object(fieldNum(BudgetTransactionHeader, IsOneTimeAmendment)).allowEdit(allowEditHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleWorkflowControls</Name>
				<Source><![CDATA[
    public void setVisibleWorkflowControls()
    {
        if (budgetTransactionHeader.WorkflowStatus == BudgetTransactionWorkflowStatus::None)
        {
            status_WorkflowStatus.visible(false);
            lineWorkflowStatusImage.visible(false);
            lineStatus.visible(false);
        }
        else
        {
            status_WorkflowStatus.visible(true);
            status_WorkflowStatus.update();
            lineWorkflowStatusImage.visible(true);
            lineStatus.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        boolean wasInViewMode;
        int ret;
        BudgetTransactionId selectedBudgetTransactionId;

        wasInViewMode = element.inViewMode();

        if (_taskId == #taskNew
            && element.dataSource().id() == budgetTransactionHeader_ds.id())
        {
            // The existing header record may have been completed and set to view only mode.
            // Reset the view edit mode to allow the new task set the correct mode.
            element.setFormViewEditMode(true);

            // Set the form to line details view.
            element.task(#taskSwitchToLineDetailsView);
        }

        if (_taskId == #taskRefresh || _taskId == #taskSwitchToDetailsView)
        {
            // The query has a join to a view and does not maintain position.
            // Track the selected transaction ID to reposition to after the task executes.
            selectedBudgetTransactionId = budgetTransactionHeader.TransactionNumber;
        }

        ret = super(_taskId);

        switch (_taskId)
        {
            case #taskEditRecord:
                // Update the form state for the budget transaction.
                element.setFormState();

                // Set the form to line details view.
                element.task(#taskSwitchToLineDetailsView);

                break;

            case #taskNew:
                if (wasInViewMode &&
                    element.dataSource().id() == budgetTransactionLine_ds.id())
                {
                    // Update the form state when adding lines while in view mode
                    // as adding lines changes the form into edit mode.
                    element.setFormState();
                }

                break;

            case #taskSwitchToHeaderDetailsView:
                // Research the header datasource to clear the selected records from the grid view.
                element.researchSelectedHeader();
                break;

            case #taskSwitchToLineDetailsView:
                // Research the header datasource to clear the selected records from the grid view.
                element.researchSelectedHeader();
                break;

            case #taskDoneEditRecord:
                // Clear the in use status.
                element.clearInUse();

                // Research the datasource so that any changes are displayed.
                element.researchSelectedHeader();
                break;

            case #taskRefresh:
            case #taskSwitchToDetailsView:
                if (selectedBudgetTransactionId)
                {
                    // Reposition to the selected transaction ID.
                    element.positionToHeader(selectedBudgetTransactionId);
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetTransactionCodeModified</Name>
				<Source><![CDATA[
    private void budgetTransactionCodeModified()
    {
        // Call reset workflow status for approved ahead of the set budget transaction code in order to get the
        // warning message for the user that the workflow is no longer needed for the specified transaction code.
        element.resetWorkflowStatus();

        // Set the BudgetTransactionHeader fields based on the new BudgetTransactionCode.
        budgetTransactionHeader.setBudgetTransactionCode(budgetTransactionHeader.BudgetTransactionCode);

        if (budgetTransactionHeader.BudgetTransactionType != BudgetTransactionType::Amendment)
        {
            // Unmark the OneTime field if the transaction type is not Amendment.
            budgetTransactionHeader.IsOneTimeAmendment = false;
        }

        // Enable or disable the budget type fields depending on the budget transaction type
        // of the budget transaction code that was selected.
        if ((budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Encumbrance) ||
            (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::PreEncumbrance))
        {
            budgetLineGrid_BudgetType.allowEdit(false);
        }
        else
        {
            budgetLineGrid_BudgetType.allowEdit(true);
        }

        element.setIfOneTimeAmendmentVisible();

        element.setAllowEditTransferLedgerBalances(allowEditHeader);

        budgetTransactionHeader_ds.cacheCalculateMethod(tableMethodStr(BudgetTransactionHeader, displayJournalizingDefinitionCode));

        // Need to refresh the header datasource because the transaction type may have changed.
        budgetTransactionHeader_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTransactionHeader</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            element.enableButtonsForMultipleRecords();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean isValid;

            isValid = super();

            if (isValid &&
                !element.confirmDeleteForWorkflowApproved())
            {
                // The workflow has been approved and the delete was not confirmed.
                isValid = false;
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        /// <summary>
        /// Manages the number sequence when a budget transaction header becomes active.
        /// </summary>
        public void linkActive()
        {
            if (budgetTransactionHeader)
            {
                budgetTransactionManager.formMethodDataSourceLinkActive(element, budgetTransactionHeader_ds);
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Manages the number sequence and disables form controls during the deletion of a budget transaction header.
        /// </summary>
        public void delete()
        {
            BudgetTransactionId budgetTransactionId = budgetTransactionHeader.TransactionNumber;

            // The super() call will prompt the user and ask if they want to delete the record.
            // If the user selects no, execution is stopped and the rest of the method is not executed.
            super();

            userLockedHeader = 0;

            budgetTransactionManager.formMethodDataSourceDelete(element, budgetTransactionHeader_ds);

            // Release the transaction number that was allocated to the budget transaction header.
            NumberSeq::releaseNumber(BudgetParameters::numRefBudgetTransactionId().NumberSequenceId, budgetTransactionId);

            // Disable the update UpdateBudget button.
            updateBudgetButton.enabled(false);

            // Disable the allocate by period button.
            allocateByPeriodButtonLinesActions.enabled(false);

            // Disable the allocate by term button.
            allocateByTermButtonLinesActions.enabled(false);

            // Disable the copy Lines button.
            copyButtonLinesActions.enabled(false);

            // Disable the transfer ledger balances button.
            transferLedgerBalancesButton.enabled(false);

            // Disable the budget transaction lines tab control and associated buttons.
            tabPageDetails.enabled(false);

            // Clear header title information.
            headerTransactionStatus.text('');

            allowEditHeader = false;
            allowEditLine = false;
            isWorkflowHeaderSubmitted = false;

            // Update the workflow controls.
            element.updateWorkflowControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        /// <summary>
        /// Manages the number sequence during the creation of a budget transaction header.
        /// </summary>
        /// <param name="_append">
        /// A Boolean flag that indicates whether to insert the record after or before the current
        /// cursor position. If true, the new record is inserted after the current record.
        /// </param>
        public void create(boolean _append = false)
        {
            boolean ret;

            // Validate the number sequence for Budget Transaction Number.
            ret = BudgetTransactionManager::checkBudgetTransactionNumberSequence();

            if (ret)
            {
                budgetTransactionManager.formMethodDataSourceCreatePre(element, budgetTransactionHeader_ds);

                super(_append);

                // Clear the defaults that may have been applied on the new record from the passed in query.
                // If these fields on not cleared the form will not be enabled correctly and the values
                // should only be set based on explicit user actions.
                budgetTransactionHeader.BudgetTransactionType = 0;
                budgetTransactionHeader.WorkflowStatus = BudgetTransactionWorkflowStatus::None;
                budgetTransactionHeader.TransactionStatus = BudgetTransactionStatus::Draft;
                budgetTransactionHeader.InUseBy = '';
                budgetTransactionHeader.TransferSourceNumber = '';
                budgetTransactionHeader.IsOneTimeAmendment = NoYes::No;

                if (isBudgetTransactionTypeContextSpecified)
                {
                    budgetTransactionHeader.BudgetTransactionType = budgetTransactionTypeContext;
                    budgetTransactionHeader.BudgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(budgetTransactionTypeContext).RecId;

                    if (budgetTransactionHeader.BudgetTransactionCode)
                    {
                        element.budgetTransactionCodeModified();
                    }
                }

                budgetTransactionManager.formMethodDataSourceCreate(element, budgetTransactionHeader_ds);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Manages the number sequence during a write and the ordering of budget transactions.
        /// </summary>
        public void write()
        {
            if (!budgetTransactionHeader.RecId)
            {
                budgetTransactionManager.formMethodDataSourceWrite(element, budgetTransactionHeader_ds);
            }

            super();

            // Reset the workflow status.
            element.resetWorkflowStatus();

            // Refresh the budget transaction data so that the transactions appear in the correct order.
            element.researchSelectedHeader();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Validates the number sequence during a write.
        /// </summary>
        /// <returns>
        /// The result of the super call plus the result of calling the formMethodDataSourceValidateWrite method
        /// on the BudgetTransactionManager class.
        /// </returns>
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (ret && !budgetTransactionManager.formMethodDataSourceValidateWrite(element, budgetTransactionHeader_ds))
            {
                ret = false;
            }

            if (ret &&
                !element.confirmEditForWorkflowApproved())
            {
                // The workflow has been approved and the changes were not confirmed.
                ret = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// Sets the editable state of fields on the budget transaction form
        /// based on the budget transaction header.
        /// </summary>
        /// <returns>
        /// The result of the super call.
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();

            element.setFormStateForHeader();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            // Filter the budget transactions based on the current legal entity.
            BudgetTransactionManager::addPrimaryLedgerRangeToQuery(this.query());

            if (isBudgetTransactionTypeContextSpecified)
            {
                // Filter the budget transactions based on the current context
                BudgetTransactionManager::addBudgetTransactionTypeRangeToQuery(this.query(), budgetTransactionTypeContext);
            }

            if (FeatureStateProvider::isFeatureEnabled(BudgetTransactionFormPerfEnhancementFeature::instance()))
            {
                switch (element.args().menuItemName())
                {
                    case menuitemDisplayStr(BudgetTransactionDraft):
                        BudgetTransactionManager::addTransactionStatusRangeToQuery(this.query(), BudgetTransactionStatus::Draft);
                        break;

                    case menuitemDisplayStr(BudgetTransactionCompleted):
                        BudgetTransactionManager::addTransactionStatusRangeToQuery(this.query(), BudgetTransactionStatus::Completed);
                        break;
                }
            }

            budgetTransactionHeader_ds.cacheAddMethod(tableMethodStr(BudgetTransactionHeader, displayJournalizingDefinitionCode));
        }

]]></Source>
					</Method>
					<Method>
						<Name>research</Name>
						<Source><![CDATA[
        /// <summary>
        /// Research the BudgetTransactionHeader datasource.
        /// </summary>
        /// <param name = "_retainPosition">True if current position needs to be retained; otherwise false.</param>
        public void research(boolean _retainPosition = false)
        {
            if (_retainPosition)
            {
                element.researchSelectedHeader();
            }
            else
            {
                super(_retainPosition);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BudgetTransactionCode</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean isValid;

                isValid = super();

                if (isValid &&
                    !element.confirmEditForWorkflowApproved())
                {
                    // The workflow has been approved and the changes were not confirmed.
                    isValid = false;
                }

                return isValid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>jumpRef</Name>
								<Source><![CDATA[
            /// <summary>
            /// Adds the 'Go to Main Table Form' option to the context menu for the <c>TransactionCode</c> field.
            /// </summary>
            public void jumpRef()
            {
                BudgetTransactionCode budgetTransCodeLocal = BudgetTransactionCode::find(budgetTransactionHeader.BudgetTransactionCode);

                // Pass the BudgetTransactionCode record, so that the Budget Transaction code form
                // highlights it as an active record
                BudgetTransactionCode::jumpRefBudgetTransactionCode(budgetTransCodeLocal, this);
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                element.budgetTransactionCodeModified();
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookupReference</Name>
								<Source><![CDATA[
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common ret;

                if (element.hasLinesForBudgetHeader())
                {
                    ret = BudgetTransactionManager::lookupBudgetTransactionCode(_formReferenceControl, true, budgetTransactionHeader.BudgetTransactionType);
                }
                else if (isBudgetTransactionTypeContextSpecified)
                {
                    ret = BudgetTransactionManager::lookupBudgetTransactionCode(_formReferenceControl, true, budgetTransactionTypeContext);
                }
                else
                {
                    ret = BudgetTransactionManager::lookupBudgetTransactionCode(_formReferenceControl);
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>BudgetTransactionLine</Name>
				<Methods>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            if (!accountStructureId)
            {
                // If account structure is not defaulting from previous line, check for default account structure if only one for the ledger.
                accountStructureId = BudgetTransactionManager::getDefaultAccountStructureId(budgetTransactionHeader.PrimaryLedger);

                if (accountStructureId)
                {
                    // The budget ledger dimension controller is initialized with default account structure id.
                    this.editAccountStructure(true, BudgetTransactionLine, DimensionHierarchy::find(accountStructureId).Name);
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;

            ret = super();

            if (ret &&
                !element.confirmEditForWorkflowApproved())
            {
                // The workflow has been approved and the changes were not confirmed.
                ret = false;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean isValid;

            isValid = super();

            if (isValid &&
                !element.confirmDeleteForWorkflowApproved())
            {
                // The workflow has been approved and the delete was not confirmed.
                isValid = false;
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editAccountStructure</Name>
						<Source><![CDATA[
        public edit Name editAccountStructure(boolean _set, BudgetTransactionLine _budgetTransactionLine, Name _name)
        {
            DimensionHierarchy accountStructure;
            Name accountStructureName;
            recId accountStructureIdOrig;
            recId accountStructureIdLocal;

            if (_set
                && hasTableAccess(tableNum(DimensionAttributeValueCombination))
                && hasTableAccess(tableNum(DimensionHierarchy))
                && hasTableAccess(tableNum(Ledger))
                && hasTableAccess(tableNum(LedgerChartOfAccounts))
                && hasTableAccess(tableNum(LedgerStructure))
                && hasTableAccess(tableNum(DimensionAttribute))
                && hasTableAccess(tableNum(DimensionHierarchyLevel))
                && hasTableAccess(tableNum(BudgetPrimaryLedgerDimensionAttribute)))
            {
                if (_budgetTransactionLine.LedgerDimension)
                {
                    accountStructureIdOrig = DimensionAttributeValueCombination::find(_budgetTransactionLine.LedgerDimension).AccountStructure;
                }

                accountStructureIdLocal = element.getAccountStructureId(_name);

                if (accountStructureIdLocal &&
                    accountStructureIdLocal != accountStructureIdOrig)
                {
                    // The selected Account structure exists, is in the ledger, has at least one
                    // dimension attribute enabled for budget, and dimension values have not yet been entered on the line.
                    accountStructureId = accountStructureIdLocal;
                    element.initSegmentedEntryControl();
                    _budgetTransactionLine.LedgerDimension = 0;

                    budgetTransactionLine_ds.rereadReferenceDataSources();
                }
            }

            return _budgetTransactionLine.getAccountStructureName(accountStructureId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            this.cacheAddMethod(tableMethodStr(BudgetTransactionLine, displayBudgetCheckResult));
            this.cacheAddMethod(tableMethodStr(BudgetTransactionLine, displayBudgetCheckResultText));
            this.cacheAddMethod(tableMethodStr(BudgetTransactionLine, displayWorkflowStatusImage));

            // <GCN>
            if (enableShowDRsCRs)
            {
                showDRsCRsController.addAmountControl(budgetLineGrid_Amount);
                showDRsCRsController.addAmountCreditControl(budgetLineGrid_AmountCredit);
                showDRsCRsController.addAmountDebitControl(budgetLineGrid_AmountDebit);

                showDRsCRsController.initControls();
            }
            // </GCN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method controls whether buttons on this form are enabled or disabled.
        /// </summary>
        /// <returns>
        /// The result of the super call.
        /// </returns>
        public int active()
        {
            int ret;

            if (budgetTransactionLine.RecId)
            {
                // Set the date and account structure for existing budget transaction line.
                element.initSegmentedEntryControl();
            }

            ret = super();

            element.setFormStateForLine();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        /// <summary>
        /// Set form control statuses when a budget transaction line is deleted.
        /// </summary>
        public void delete()
        {
            if (budgetTransactionLine.RecId &&
                budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer)
            {
                // Remove the line from the allow transfer manager.
                allowTransferManager.removeBudgetTransactionLine(budgetTransactionLine.RecId);
            }

            super();

            if ((budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer) &&
                (budgetTransactionLine_ds.numberOfRowsLoaded() <= 1))
            {
                // There are now less than two lines in the Transfer; allow the budget type to be edited.
                budgetLineGrid_BudgetType.allowEdit(true);

                // Set the default budget type since the last line may have just been deleted.
                budgetType = BudgetType::Expense;
            }

            // Set the UpdateBudget button editable state.
            element.setAllowEditUpdateBudget(allowEditHeader);

            element.setAllowNewDelete(allowEditHeader);

            // Disable the budget transaction inquiry buttons.
            budgetTransInquiryButtonLinesActions.enabled(false);
            budgetBalancesLinesActions.enabled(false);
            budgetBalancesActualsLinesActions.enabled(false);
            budgetControlStatisticsByDimensionLinesActions.enabled(false);

            // Disable the allocate by period button.
            allocateByPeriodButtonLinesActions.enabled(false);

            // Disable the allocate by term button.
            allocateByTermButtonLinesActions.enabled(false);

            // Disable the enter Recurrence button.
            copyButtonLinesActions.enabled(false);

            allowEditLine = false;

            // Reset the workflow status.
            element.resetWorkflowStatus();

            // Update the workflow controls.
            element.updateWorkflowControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        /// Writes a budget transaction line.
        /// </summary>
        public void write()
        {
            // Disables to force a write operation on a record.
            this.forceWrite(false);

            // Only allow a line to be written if the line is in an editable state.
            if (allowEditLine)
            {
                BudgetTransactionManager::formMethodDataSourceWriteLine(budgetTransactionLine_ds);
            }

            // Update the budget control result value for the budget transaction line.
            budgetTransactionLine_ds.cacheCalculateMethod(tableMethodStr(BudgetTransactionLine, displayBudgetCheckResult));

            // Set the UpdateBudget button editable state.
            element.setAllowEditUpdateBudget(allowEditHeader, false);

            // Reset the workflow status.
            element.resetWorkflowStatus();

            // <GCN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                && showDRsCRsController.parmShowNegativeInRed())
            {
                budgetTransactionLine_ds.clearDisplayOption(budgetTransactionLine);
            }
            // </GCN>

            // Can't call super method because of budgetary control; refresh the datasource record and form after the write.
            budgetTransactionLine_ds.reread();
            budgetTransactionLine_ds.active();
            budgetTransactionLine_ds.refresh();

            if (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer)
            {
                allowTransferManager.checkBudgetTransactionLine(budgetTransactionLine.RecId, true);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initializes the budget transaction line.
        /// </summary>
        public void initValue()
        {
            // Initialize the line with values from the parent (Header).
            budgetTransactionLine.initFromBudgetTransactionHeader(budgetTransactionHeader);

            // Default the budget type of the line to the form's current budget type state.
            budgetTransactionLine.BudgetType = budgetType;

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _record, FormRowDisplayOption _options)
        {
            super(_record, _options);

            // <GCN>
            if (LedgerShowDebCRedController_CN::isNegativeAmountsInRedFeatureEnabled())
            {
                showDRsCRsController.showNegativeAmountsInRed(_record, _options);
            }
            // </GCN>
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();

            if (lookupBudgetTransactionLine)
            {
                // Display the lookup record.
                element.args().lookupRecord(lookupBudgetTransactionLine);

                // Reset the lookup record to ensure it is only set on the first form load.
                lookupBudgetTransactionLine = null;
                lookupBudgetTransactionHeader = null;
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>OpenLinesInExcel</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            element.openLinesInExcel();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateBudgetButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            BudgetTransactionHeader budgetTransactionToUpdateBudget;

            // Get the marked records in the datasource by passing 1 to getFirst.
            // If no records are returned use the selected record.
            if (budgetTransactionHeader_ds.getFirst(1))
            {
                budgetTransactionToUpdateBudget = budgetTransactionHeader_ds.getFirst(1) as BudgetTransactionHeader;
            }
            else
            {
                budgetTransactionToUpdateBudget = budgetTransactionHeader;
            }

            if (budgetTransactionToUpdateBudget)
            {
                while (budgetTransactionToUpdateBudget)
                {
                    // Find the record in the datasource and reread it from the database. The datasource cache will also be updated.
                    element.args().lookupRecord(budgetTransactionToUpdateBudget);
                    budgetTransactionHeader_ds.reread();

                    // Check the status of the header to validate whether a workflow status reset is needed.
                    if (budgetTransactionToUpdateBudget.TransactionStatus == BudgetTransactionStatus::Draft &&
                        budgetTransactionToUpdateBudget.WorkflowStatus == BudgetTransactionWorkflowStatus::None &&
                        BudgetTransactionCode::isWorkflowTableSequenceNumberValid(budgetTransactionToUpdateBudget.BudgetTransactionCode))
                    {
                        // Reset the workflow status as the budget transaction code now requires workflow.
                        budgetTransactionToUpdateBudget.initWorkflowStatus();
                    }

                    budgetTransactionToUpdateBudget = budgetTransactionHeader_ds.getNext() as BudgetTransactionHeader;
                }
            }

            element.researchSelectedHeader();

            // The update budget balances button control may no longer be enabled and focusable.
            // Advance to the next control in the tab sequence and set focus to maintain accessibility.
            element.getPrevField(updateBudgetButton).setFocus();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransferLedgerBalancesButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            // Refresh the datasource so that any changes during the transfer process are displayed.
            element.researchSelectedHeader();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetModelButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            xMenuFunction menuFunction = this.menufunction();

            menuFunction.openMode(this.openMode());

            menuFunction.run(new Args(element));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TransactionCodeButton</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            xMenuFunction menuFunction = this.menufunction();

            menuFunction.openMode(this.openMode());

            menuFunction.run(new Args(element));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Select_editBudgetModel</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the lookup for the budget model field.
        /// </summary>
        public void lookup()
        {
            BudgetModel::lookupBudgetModel(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified;

            isModified = super();

            if (isModified)
            {
                if (budgetTransactionLine)
                {
                    // The budget model was modified and a budget transaction line exists.
                    // Research to get the changed line information.
                    budgetTransactionLine_ds.research(true);
                }
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Select_editReasonCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds the 'Go to Main Table Form' option to the context menu for reason code field.
        /// </summary>
        public void jumpRef()
        {
            // Pass the account type of Ledger, so that the relevant form shows.
            ReasonTable::jumpRef(ReasonCodeAccountTypeAll::Ledger);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ReasonFormTable::reasonCodeLookup(this, LedgerJournalACType::Ledger, LedgerJournalACType::Ledger, true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>displayJournalizingDefinitionCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            new MenuFunction(menuitemDisplayStr(JournalizingDefinition), MenuItemType::Display).run();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Status_editIsInUse</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// Enables the budget transaction header and line when the in use field is modified.
        /// </summary>
        /// <returns>
        /// The result of the super call.
        /// </returns>
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                // Write the datasource as InUseBy value has been cleared. This will also refresh the budget transaction data.
                budgetTransactionHeader_ds.write();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddCommandButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.confirmEditForWorkflowApproved())
            {
                // Reset the workflow status.
                element.resetWorkflowStatus();

                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CopyButtonLinesActions</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.confirmEditForWorkflowApproved()
                && element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                // Reset the workflow status.
                element.resetWorkflowStatus(false);

                element.setEditRecordMode();

                budgetTransactionLine_DS.research();
                budgetTransactionLine_DS.last();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateByPeriodButtonLinesActions</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.confirmEditForWorkflowApproved()
                && element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                // Reset the workflow status.
                element.resetWorkflowStatus(false);

                element.setEditRecordMode();

                budgetTransactionLine_DS.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllocateByTermButtonLinesActions</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.confirmEditForWorkflowApproved()
                && element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            super(_formRun);

            if (_formRun.closedOk())
            {
                // Reset the workflow status.
                element.resetWorkflowStatus(false);

                element.setEditRecordMode();

                budgetTransactionLine_DS.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CashflowButtonLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            ttsbegin;
            budgetTransactionLine.updateLedgerCashflow(LedgerCoverage::construct(budgetTransactionLine));
            ttscommit;

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetTransInquiryButtonLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReverseInquiryButtonLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetCheckResultsButtonLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>VoucherButtonLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetBalancesLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetBalancesActualsLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetControlStatisticsByDimensionLinesActions</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (element.saveBudgetTransactionLine())
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>lineWorkflowStatusImage</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>toolTip</Name>
						<Source><![CDATA[
        public str toolTip()
        {
            return "@SYS323421";
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetLineGrid_Date</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.initSegmentedEntryControl();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetLineGrid_AccountStructure</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            DimensionHierarchyId currentAccountStructureId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, this.valueStr()).RecId;

            DimensionHierarchyId lookupAccountStructureId = BudgetPrimaryLedgerDimensionAttribute::lookupAccountStructure(this, currentAccountStructureId).RecId;

            // If the user selected an account structure in the lookup, update the form's account structure state.
            if (lookupAccountStructureId != 0)
            {
                accountStructureId = lookupAccountStructureId;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            DimensionHierarchyId selectedAccountStructureId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, this.valueStr()).RecId;
            DimensionHierarchyHelper::jumpRefAccountStructure(selectedAccountStructureId, element);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid;

            isValid = super();

            if (isValid)
            {
                isValid = element.validateAccountStructureId(this.text());
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetLineGrid_Amount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            AmountCur oldTransactionCurrencyAmount = budgetTransactionLine.TransactionCurrencyAmount;

            ret = super();

            if (ret)
            {
                AmountCur newTransactionCurrencyAmount = budgetTransactionLine.TransactionCurrencyAmount;

                if (BudgetTransactionLine.RecId)
                {
                    if (oldTransactionCurrencyAmount == 0 || newTransactionCurrencyAmount == 0)
                    {
                        // If the transaction currency amount changes to/from 0, update the form state
                        // to correctly enable/disable the buttons dependent on amount value.
                        element.setFormStateForLine();
                    }
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>WorkflowStatusImage</Name>
				<Type>Image</Type>
				<Methods>
					<Method>
						<Name>toolTip</Name>
						<Source><![CDATA[
        public str toolTip()
        {
            return "@SYS323421";
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTransactionHeader</Name>
			<Table>BudgetTransactionHeader</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSubModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOneTimeAmendment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferSourceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>WorkflowStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Date</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>TransactionNumberIdx</Index>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<StartPosition>Last</StartPosition>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetTransactionLine</Name>
			<Table>BudgetTransactionLine</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetBudget_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Comment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalEntry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncludeInCashFlowForecast</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjTransBudgetTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>WorkflowStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Date</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetTransactionHeader</JoinSource>
			<CounterField>LineNumber</CounterField>
			<Index>LineNumberIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>BudgetTransactionHeaderView</Name>
			<Table>BudgetTransactionHeaderView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetModelDataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetModelType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetSubModelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetTransactionType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExistBudgetTransactionLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExpenseBudgetTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOneTimeAmendment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryLedger</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevenueBudgetTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferSourceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkflowStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>BudgetTransactionHeader</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@SYS129613</Caption>
		<DataSource xmlns="">BudgetTransactionHeader</DataSource>
		<Pattern xmlns="">DetailsTransaction</Pattern>
		<PatternVersion xmlns="">1.4</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DetailsFormTransaction</Style>
		<TitleDataSource xmlns="">BudgetTransactionHeader</TitleDataSource>
		<WorkflowDataSource xmlns="">BudgetTransactionHeader</WorkflowDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPaneHeader</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>MaintainGroup</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>OpenLinesInExcel</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:BudgetRegisterEntryOpenInExcel</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>BudgetTransactionHeaderWorkflowDropDialogButtonGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormDropDialogButtonControl">
								<Name>BudgetTransactionHeaderWorkflowDropDialog</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>DropDialogButton</Type>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetTransactionHeader</DataSource>
								<MenuItemName>BudgetTransactionHeaderWorkflowDropDialog</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<NormalImage>Workflow</NormalImage>
							</AxFormControl>
						</Controls>
						<DataSource>BudgetTransactionHeader</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ProcessGroup</Name>
						<ElementPosition>1342177275</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>UpdateBudgetButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>BudgetTransactionPost</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS71207</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>TransferGroup</Name>
						<ElementPosition>1610612730</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>TransferLedgerBalancesButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetTransactionHeader</DataSource>
								<MenuItemName>BudgetTransferLedgerBalances</MenuItemName>
								<MenuItemType>Action</MenuItemType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS312921</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>SetupGroup</Name>
						<ElementPosition>1073741820</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuButtonControl">
								<Name>SetupMenuButton</Name>
								<Type>MenuButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>BudgetModelButton</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>BudgetModel</MenuItemName>
										<OpenMode>New</OpenMode>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>TransactionCodeButton</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>BudgetTransactionCode</MenuItemName>
										<OpenMode>New</OpenMode>
										<SaveRecord>No</SaveRecord>
										<Text>@SYS127776</Text>
									</AxFormControl>
								</Controls>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS342635</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<DataSource>BudgetTransactionHeader</DataSource>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationList</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<Visible>No</Visible>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>NavigationListQuickFilter</Name>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>HeaderGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>NavigationListGrid</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Grid</Type>
						<WidthMode>SizeToContent</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BudgetTransactionHeader_TransactionNumberNav</Name>
								<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_TransactionNumberNav</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>TransactionNumber</DataField>
								<DataSource>BudgetTransactionHeader</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>BudgetTransactionHeader_BudgetTransactionTypeNav</Name>
								<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_BudgetTransactionTypeNav</HelpText>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>BudgetTransactionType</DataField>
								<DataSource>BudgetTransactionHeader</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>BudgetTransactionHeader_TransactionStatusNav</Name>
								<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_TransactionStatusNav</HelpText>
								<Type>ComboBox</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>TransactionStatus</DataField>
								<DataSource>BudgetTransactionHeader</DataSource>
								<Items />
							</AxFormControl>
						</Controls>
						<DataSource>BudgetTransactionHeader</DataSource>
						<MultiSelect>No</MultiSelect>
						<ShowRowLabels>No</ShowRowLabels>
						<Style>List</Style>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
				<Style>SidePanel</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageDetails</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>HeaderInfo</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacingMode>Fixed</VerticalSpacingMode>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HeaderTitle</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_HeaderTitle</HelpText>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionNumber</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
										<ShowLabel>No</ShowLabel>
										<Style>TitleField</Style>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>HeaderTransactionStatusGroup</Name>
										<ElementPosition>1610612733</ElementPosition>
										<ExtendedStyle>entityStatus</ExtendedStyle>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HeaderTransactionStatus</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Skip>Yes</Skip>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS191107</Label>
												<ShowLabel>No</ShowLabel>
												<ViewEditMode>View</ViewEditMode>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalRight</ArrangeMethod>
										<BottomMargin>0</BottomMargin>
										<BottomMarginMode>Fixed</BottomMarginMode>
										<LeftMargin>0</LeftMargin>
										<LeftMarginMode>Fixed</LeftMarginMode>
										<RightMargin>0</RightMargin>
										<RightMarginMode>Fixed</RightMarginMode>
										<TopMargin>0</TopMargin>
										<TopMarginMode>Fixed</TopMarginMode>
										<Breakable>No</Breakable>
										<FrameType>None</FrameType>
										<ViewEditMode>View</ViewEditMode>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<DataSource>BudgetTransactionHeader</DataSource>
								<FrameType>None</FrameType>
								<Style>DetailTitleContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>DetailsTab</Name>
								<AlignControl>No</AlignControl>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Tab</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>LineView</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>TabPage</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTabControl">
												<Name>TabLineView</Name>
												<AlignControl>No</AlignControl>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Tab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>LineViewHeader</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Pattern>FieldsFieldGroups</Pattern>
														<PatternVersion>1.1</PatternVersion>
														<Type>TabPage</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>Transaction</Name>
																<ElementPosition>858993458</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>Transaction_Date</Name>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Transaction_Date</HelpText>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Date</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Transaction_TransferSourceNumber</Name>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Transaction_TransferSourceNumber</HelpText>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransferSourceNumber</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																</Controls>
																<DataGroup>Transaction</DataGroup>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>Select_Group</Name>
																<ElementPosition>1288490187</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editBudgetModel</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>429496728</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editBudgetModel</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Mandatory>Yes</Mandatory>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormReferenceGroupControl">
																		<Name>Select_BudgetTransactionCode</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_BudgetTransactionCode</HelpText>
																		<Type>ReferenceGroup</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>Select_BudgetTransactionCode_Name</Name>
																				<DataRelationPath>BudgetTransactionCode</DataRelationPath>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>String</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																			</AxFormControl>
																		</Controls>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<ReferenceField>BudgetTransactionCode</ReferenceField>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Select_TransactionType</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>858993456</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_TransactionType</HelpText>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BudgetTransactionType</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editReasonCode</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741820</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editReasonCode</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editReasonComment</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1288490184</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editReasonComment</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>Select_IsOneTimeAmendment</Name>
																		<ElementPosition>1503238548</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_IsOneTimeAmendment</HelpText>
																		<Type>CheckBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IsOneTimeAmendment</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>displayJournalizingDefinitionCode</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1717986912</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_displayJournalizingDefinitionCode</HelpText>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>displayJournalizingDefinitionCode</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>BudgetModelIdHidden</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1932735276</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BudgetModelId</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																</Controls>
																<Caption>@SYS2245</Caption>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>Status</Name>
																<ElementPosition>1717986916</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>Status_editIsInUse</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>715827882</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>CheckBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editIsInUse</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Label>@SYS10653</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Status_InUseBy</Name>
																		<ElementPosition>1073741823</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InUseBy</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Status_TransactionStatus</Name>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Status_TransactionStatus</HelpText>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransactionStatus</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Status_WorkflowStatus</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1789569705</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>WorkflowStatus</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																</Controls>
																<DataGroup>Status</DataGroup>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<Caption>@SYS339215</Caption>
														<DataSource>BudgetTransactionHeader</DataSource>
														<FastTabExpanded>Yes</FastTabExpanded>
														<Scrollbars>Auto</Scrollbars>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>LineViewLines</Name>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>TabPage</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormActionPaneControl">
																<Name>LinesActionPaneStrip</Name>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>ActionPane</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormActionPaneTabControl">
																		<Name>LinesActionsTab</Name>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>ActionPaneTab</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonGroupControl">
																				<Name>LinesRecordActions</Name>
																				<ElementPosition>1073741822</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Left>0</Left>
																				<Type>ButtonGroup</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormCommandButtonControl">
																						<Name>AddCommandButton</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1073741822</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<Type>CommandButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																						<Command>New</Command>
																						<MultiSelect>Yes</MultiSelect>
																						<NormalImage>Add</NormalImage>
																						<Primary>Yes</Primary>
																						<ShowShortCut>No</ShowShortCut>
																						<Text>@SYS319116</Text>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormCommandButtonControl">
																						<Name>RemoveCommandButton</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1610612734</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<Type>CommandButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																						<Command>DeleteRecord</Command>
																						<MultiSelect>Yes</MultiSelect>
																						<NormalImage>Delete</NormalImage>
																						<Primary>Yes</Primary>
																						<SaveRecord>No</SaveRecord>
																						<ShowShortCut>No</ShowShortCut>
																						<Text>@SYS135131</Text>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormDropDialogButtonControl">
																						<Name>BudgetTransactionLineWorkflowDropDialog</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<Type>DropDialogButton</Type>
																						<FormControlExtension
																							i:nil="true" />
																						<DataSource>BudgetTransactionLine</DataSource>
																						<MenuItemName>BudgetTransactionLineWorkflowDropDialog</MenuItemName>
																						<NeedsRecord>Yes</NeedsRecord>
																						<NormalImage>Workflow</NormalImage>
																					</AxFormControl>
																				</Controls>
																				<DataSource>BudgetTransactionLine</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonGroupControl">
																				<Name>LinesOtherActions</Name>
																				<ElementPosition>1610612733</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Left>0</Left>
																				<Type>ButtonGroup</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormDropDialogButtonControl">
																						<Name>CopyButtonLinesActions</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>920350134</ElementPosition>
																						<Enabled>No</Enabled>
																						<FilterExpression>%1</FilterExpression>
																						<Type>DropDialogButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataSource>BudgetTransactionLine</DataSource>
																						<MenuItemName>BudgetTransactionLineReplicate</MenuItemName>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormDropDialogButtonControl">
																						<Name>AllocateByPeriodButtonLinesActions</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1227133512</ElementPosition>
																						<Enabled>No</Enabled>
																						<FilterExpression>%1</FilterExpression>
																						<Type>DropDialogButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataSource>BudgetTransactionLine</DataSource>
																						<MenuItemName>BudgetAllocateByPeriod</MenuItemName>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormDropDialogButtonControl">
																						<Name>AllocateByTermButtonLinesActions</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1533916890</ElementPosition>
																						<Enabled>No</Enabled>
																						<FilterExpression>%1</FilterExpression>
																						<Type>DropDialogButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataSource>BudgetTransactionLine</DataSource>
																						<MenuItemName>BudgetAllocateByTerm</MenuItemName>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormMenuButtonControl">
																						<Name>RelatedInfoMenuButtonLinesActions</Name>
																						<ElementPosition>1840700268</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<Type>MenuButton</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<Controls>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>CashflowButtonLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>613566756</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>LedgerCoverage</MenuItemName>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>BudgetTransInquiryButtonLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>920350134</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetTransactionInquiry</MenuItemName>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>ReverseInquiryButtonLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>1227133512</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetTransactionReverseInquiry</MenuItemName>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>BudgetCheckResultsButtonLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>1533916890</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetCheckResults</MenuItemName>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>VoucherButtonLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>1840700268</ElementPosition>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>ledgertransvoucher</MenuItemName>
																								<Text>@SYS86923</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>BudgetBalancesLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>1942961394</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetBalances</MenuItemName>
																								<Text>@SYS1614</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>BudgetBalancesActualsLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>2045222520</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetBalancesActualsByPeriods</MenuItemName>
																								<Text>@SYS324528</Text>
																							</AxFormControl>
																							<AxFormControl xmlns=""
																								i:type="AxFormMenuFunctionButtonControl">
																								<Name>BudgetControlStatisticsByDimensionLinesActions</Name>
																								<AutoDeclaration>Yes</AutoDeclaration>
																								<ElementPosition>2045222520</ElementPosition>
																								<Enabled>No</Enabled>
																								<FilterExpression>%1</FilterExpression>
																								<Type>MenuFunctionButton</Type>
																								<VerticalSpacing>-1</VerticalSpacing>
																								<FormControlExtension
																									i:nil="true" />
																								<DataSource>BudgetTransactionLine</DataSource>
																								<MenuItemName>BudgetControlStatisticsByDimension</MenuItemName>
																								<Text>@SYS129937</Text>
																							</AxFormControl>
																						</Controls>
																						<Text>@SYS312926</Text>
																					</AxFormControl>
																				</Controls>
																				<DataSource>BudgetTransactionLine</DataSource>
																			</AxFormControl>
																		</Controls>
																		<AlignChild>No</AlignChild>
																		<AlignChildren>No</AlignChildren>
																		<ArrangeMethod>Vertical</ArrangeMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																	</AxFormControl>
																</Controls>
																<AlignChild>No</AlignChild>
																<AlignChildren>No</AlignChildren>
																<ArrangeMethod>Vertical</ArrangeMethod>
																<DataSource>BudgetTransactionLine</DataSource>
																<Style>Strip</Style>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGridControl">
																<Name>LinesGrid</Name>
																<ElementPosition>1610612734</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Grid</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>BudgetCheckResult_Ctrl</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
																		<ElementPosition>429496728</ElementPosition>
																		<ExtendedStyle>budgetCheckResult_status</ExtendedStyle>
																		<PreviewPartRef>BudgetCheckResultPreview</PreviewPartRef>
																		<Skip>Yes</Skip>
																		<Type>ComboBox</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>displayBudgetCheckResult</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<DisplayLength>1</DisplayLength>
																		<DisplayLengthMode>Fixed</DisplayLengthMode>
																		<Label>@SYS342081</Label>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormImageControl">
																		<Name>lineWorkflowStatusImage</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>644245092</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>Image</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>displayWorkflowStatusImage</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<Label>@SYS106702</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>BudgetLineGrid_Date</Name>
																		<ElementPosition>858993456</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>Date</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Date</DataField>
																		<DataSource>BudgetTransactionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>BudgetLineGrid_AccountStructure</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741820</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<PreviewPartRef>DimensionHierarchyPreview</PreviewPartRef>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editAccountStructure</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<Label>@SYS129015</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormSegmentedEntryControl">
																		<Name>BudgetLineGrid_BudgetSegmentedEntry</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1288490184</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>SegmentedEntry</Type>
																		<FormControlExtension>
																			<Name>SegmentedEntryControl</Name>
																			<ExtensionComponents />
																			<ExtensionProperties>
																				<AxFormControlExtensionProperty>
																					<Name>parmControllerClassName</Name>
																					<Type>String</Type>
																					<Value>BudgetLedgerDimensionController</Value>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmAccountTypeEnumName</Name>
																					<Type>String</Type>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmIsDefaultAccount</Name>
																					<Type>Enum</Type>
																					<TypeName>boolean</TypeName>
																					<Value>False</Value>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmValidateBlockedForManualEntry</Name>
																					<Type>Enum</Type>
																					<TypeName>NoYes</TypeName>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmLockMainAccountSegment</Name>
																					<Type>Enum</Type>
																					<TypeName>NoYes</TypeName>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmPostingType</Name>
																					<Type>Enum</Type>
																					<TypeName>LedgerPostingType</TypeName>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmIncludeTotalAccounts</Name>
																					<Type>Enum</Type>
																					<TypeName>NoYes</TypeName>
																				</AxFormControlExtensionProperty>
																				<AxFormControlExtensionProperty>
																					<Name>parmIncludeFinancialAccounts</Name>
																					<Type>Enum</Type>
																					<TypeName>NoYes</TypeName>
																				</AxFormControlExtensionProperty>
																			</ExtensionProperties>
																		</FormControlExtension>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<ReferenceField>LedgerDimension</ReferenceField>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>BudgetLineGrid_Amount</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1503238548</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetLineGrid_Amount</HelpText>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editTransactionCurrencyAmount</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<Label>@SYS98362</Label>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>BudgetLineGrid_BudgetType</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1717986912</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetLineGrid_BudgetType</HelpText>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editBudgetType</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>BudgetLineGrid_Currency</Name>
																		<ElementPosition>1932735276</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransactionCurrency</DataField>
																		<DataSource>BudgetTransactionLine</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>BudgetLineGrid_AmountDebit</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<CountryRegionCodes>CN,JP</CountryRegionCodes>
																		<ElementPosition>2004318066</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<CacheDataMethod>Yes</CacheDataMethod>
																		<DataMethod>editTransactionCurAmountDebit_CN</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>BudgetLineGrid_AmountCredit</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<CountryRegionCodes>CN,JP</CountryRegionCodes>
																		<ElementPosition>2075900856</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<CacheDataMethod>Yes</CacheDataMethod>
																		<DataMethod>editTransactionCurAmountCredit_CN</DataMethod>
																		<DataSource>BudgetTransactionLine</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>BudgetLineGrid_Comment</Name>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Comment</DataField>
																		<DataSource>BudgetTransactionLine</DataSource>
																	</AxFormControl>
																</Controls>
																<DataSource>BudgetTransactionLine</DataSource>
																<Style>Tabular</Style>
																<VisibleRows>5</VisibleRows>
																<VisibleRowsMode>Fixed</VisibleRowsMode>
															</AxFormControl>
														</Controls>
														<Caption>@SYS127777</Caption>
														<DataSource>BudgetTransactionLine</DataSource>
														<FastTabExpanded>Always</FastTabExpanded>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>LineViewLineDetails</Name>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>TabPage</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormTabControl">
																<Name>LineDetailsTabPage</Name>
																<Type>Tab</Type>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormTabPageControl">
																		<Name>LineGeneralTab</Name>
																		<Pattern>FieldsFieldGroups</Pattern>
																		<PatternVersion>1.1</PatternVersion>
																		<Type>TabPage</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>LineStatus</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1610612733</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Type>Group</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<Visible>No</Visible>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormComboBoxControl">
																						<Name>LineStatus_WorkflowStatus</Name>
																						<FilterExpression>%1</FilterExpression>
																						<Type>ComboBox</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>WorkflowStatus</DataField>
																						<DataSource>BudgetTransactionLine</DataSource>
																						<Items />
																					</AxFormControl>
																				</Controls>
																				<DataGroup>Workflow</DataGroup>
																				<DataSource>BudgetTransactionLine</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>Amount</Name>
																				<ElementPosition>1288490187</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Amount</HelpText>
																				<Type>Group</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>Amount_Quantity</Name>
																						<ElementPosition>1073741822</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Amount_Quantity</HelpText>
																						<Type>Real</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataMethod>editQuantity</DataMethod>
																						<DataSource>BudgetTransactionLine</DataSource>
																						<NoOfDecimals>-1</NoOfDecimals>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormRealControl">
																						<Name>Amount_Price</Name>
																						<ElementPosition>1610612733</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Amount_Price</HelpText>
																						<Type>Real</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataMethod>editPrice</DataMethod>
																						<DataSource>BudgetTransactionLine</DataSource>
																						<NoOfDecimals>-1</NoOfDecimals>
																					</AxFormControl>
																				</Controls>
																				<Caption>@SYS6928</Caption>
																				<DataSource>BudgetTransactionLine</DataSource>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormGroupControl">
																				<Name>CashFlowForecast</Name>
																				<ElementPosition>1717986916</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<Type>Group</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<FormControlExtension
																					i:nil="true" />
																				<Controls>
																					<AxFormControl xmlns=""
																						i:type="AxFormCheckBoxControl">
																						<Name>CashFlowForecast_IncludeInCashFlowForecast</Name>
																						<AutoDeclaration>Yes</AutoDeclaration>
																						<ElementPosition>1073741822</ElementPosition>
																						<FilterExpression>%1</FilterExpression>
																						<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_CashFlowForecast_IncludeInCashFlowForecast</HelpText>
																						<Type>CheckBox</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>IncludeInCashFlowForecast</DataField>
																						<DataSource>BudgetTransactionLine</DataSource>
																					</AxFormControl>
																					<AxFormControl xmlns=""
																						i:type="AxFormStringControl">
																						<Name>CashFlowForecast_TaxGroup</Name>
																						<FilterExpression>%1</FilterExpression>
																						<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_CashFlowForecast_TaxGroup</HelpText>
																						<Type>String</Type>
																						<VerticalSpacing>-1</VerticalSpacing>
																						<FormControlExtension
																							i:nil="true" />
																						<DataField>TaxGroup</DataField>
																						<DataSource>BudgetTransactionLine</DataSource>
																					</AxFormControl>
																				</Controls>
																				<DataGroup>CashflowForecast</DataGroup>
																				<DataSource>BudgetTransactionLine</DataSource>
																			</AxFormControl>
																		</Controls>
																		<ColumnsMode>Fill</ColumnsMode>
																		<HideIfEmpty>No</HideIfEmpty>
																		<Caption>@SYS2952</Caption>
																	</AxFormControl>
																</Controls>
															</AxFormControl>
														</Controls>
														<Columns>3</Columns>
														<Caption>@SYS313165</Caption>
														<DataSource>BudgetTransactionLine</DataSource>
														<FastTabExpanded>No</FastTabExpanded>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<Style>FastTabs</Style>
											</AxFormControl>
										</Controls>
										<LeftMargin>0</LeftMargin>
										<LeftMarginMode>Fixed</LeftMarginMode>
										<RightMargin>0</RightMargin>
										<RightMarginMode>Fixed</RightMarginMode>
										<BackgroundColor>DynBackgroundBlue</BackgroundColor>
										<PanelStyle>DetailsLine</PanelStyle>
										<Scrollbars>Auto</Scrollbars>
										<Style>DetailsFormDetails</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>HeaderPanel</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>TabPage</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormTabControl">
												<Name>HeaderDetailsTab</Name>
												<Type>Tab</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormTabPageControl">
														<Name>HeaderDetailsTabPage</Name>
														<Pattern>FieldsFieldGroups</Pattern>
														<PatternVersion>1.1</PatternVersion>
														<Type>TabPage</Type>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>TransactionHeader</Name>
																<ElementPosition>858993458</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>TransactionHeader_Date</Name>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_TransactionHeader_Date</HelpText>
																		<Type>Date</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Date</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>TransactionHeader_TransferSourceNumber</Name>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_TransactionHeader_TransferSourceNumber</HelpText>
																		<Type>String</Type>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransferSourceNumber</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																</Controls>
																<DataGroup>Transaction</DataGroup>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>Select_GroupHeader</Name>
																<ElementPosition>1288490187</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editBudgetModelHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>429496728</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editBudgetModel</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Mandatory>Yes</Mandatory>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormReferenceGroupControl">
																		<Name>Select_BudgetTransactionCodeHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>644245092</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_BudgetTransactionCodeHeader</HelpText>
																		<Type>ReferenceGroup</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormStringControl">
																				<Name>Select_BudgetTransactionCode_NameHeader</Name>
																				<DataRelationPath>BudgetTransactionCode</DataRelationPath>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>String</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																			</AxFormControl>
																		</Controls>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<FrameType>None</FrameType>
																		<ReferenceField>BudgetTransactionCode</ReferenceField>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Select_TransactionTypeHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>858993456</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_TransactionTypeHeader</HelpText>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BudgetTransactionType</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editReasonCodeHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1073741820</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editReasonCode</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Select_editReasonCommentHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1288490184</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editReasonComment</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>Select_IsOneTimeAmendmentHeader</Name>
																		<ElementPosition>1503238548</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Select_IsOneTimeAmendmentHeader</HelpText>
																		<Type>CheckBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>IsOneTimeAmendment</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>displayJournalizingDefinitionCodeHeader</Name>
																		<AllowEdit>No</AllowEdit>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1717986912</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_displayJournalizingDefinitionCodeHeader</HelpText>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>displayJournalizingDefinitionCode</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>BudgetModelIdHiddenHeader</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1932735276</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BudgetModelId</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																</Controls>
																<Caption>@SYS2245</Caption>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>StatusHeader</Name>
																<ElementPosition>1717986916</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormCheckBoxControl">
																		<Name>Status_editIsInUseHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>715827882</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>CheckBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>editIsInUse</DataMethod>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Label>@SYS10653</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Status_InUseByHeader</Name>
																		<ElementPosition>1073741823</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InUseBy</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Status_TransactionStatusHeader</Name>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_Status_TransactionStatusHeader</HelpText>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TransactionStatus</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>Status_WorkflowStatusHeader</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1789569705</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>WorkflowStatus</DataField>
																		<DataSource>BudgetTransactionHeader</DataSource>
																		<Items />
																	</AxFormControl>
																</Controls>
																<DataGroup>Status</DataGroup>
																<DataSource>BudgetTransactionHeader</DataSource>
															</AxFormControl>
														</Controls>
														<ColumnsMode>Fill</ColumnsMode>
														<Caption>@SYS339215</Caption>
													</AxFormControl>
												</Controls>
												<Style>FastTabs</Style>
											</AxFormControl>
										</Controls>
										<DataSource>BudgetTransactionHeader</DataSource>
										<FastTabExpanded>Yes</FastTabExpanded>
										<PanelStyle>DetailsHeader</PanelStyle>
										<Scrollbars>Auto</Scrollbars>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<ShowTabs>No</ShowTabs>
							</AxFormControl>
						</Controls>
						<PanelStyle>Details</PanelStyle>
						<Scrollbars>Auto</Scrollbars>
						<Style>DetailsFormDetails</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPageGrid</Name>
						<AllowEdit>No</AllowEdit>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CustomFilterGroup</Name>
								<Pattern>CustomAndQuickFilters</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl>
										<Name>HeaderGridQuickFilter</Name>
										<FormControlExtension>
											<Name>QuickFilterControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>targetControlName</Name>
													<Type>String</Type>
													<Value>HeaderGrid</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>defaultColumnName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>placeholderText</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<FrameType>None</FrameType>
								<Style>CustomFilter</Style>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>HeaderGrid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>WorkflowStatusImage</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayWorkflowStatusImage</DataMethod>
										<DataSource>BudgetTransactionHeader</DataSource>
										<Label>@SYS106702</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTransactionHeader_TransactionNumber</Name>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_TransactionNumber</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionNumber</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>BudgetTransactionHeader_Date</Name>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_Date</HelpText>
										<Type>Date</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Date</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTransactionHeader_BudgetModelId</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetModelId</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
										<DisplayLength>20</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>BudgetTransactionHeader_BudgetTransactionCode</Name>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_BudgetTransactionCode</HelpText>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>BudgetTransactionHeader</DataSource>
										<ReferenceField>BudgetTransactionCode</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BudgetTransactionHeader_BudgetTransactionType</Name>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_BudgetTransactionType</HelpText>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetTransactionType</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BudgetTransactionHeader_TransactionStatus</Name>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransactionStatus</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
										<Label>@SYS109287</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTransactionHeader_ExpenseAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExpenseBudgetTotal</DataField>
										<DataSource>BudgetTransactionHeaderView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTransactionHeader_RevenueAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevenueBudgetTotal</DataField>
										<DataSource>BudgetTransactionHeaderView</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTransactionHeader_TransferSourceNumber</Name>
										<HelpText>@FieldDescriptions_Budgeting:BudgetTransaction_BudgetTransactionHeader_TransferSourceNumber</HelpText>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransferSourceNumber</DataField>
										<DataSource>BudgetTransactionHeader</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>BudgetTransactionHeader_InUseBy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Image</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayInUseImage</DataMethod>
										<DataSource>BudgetTransactionHeader</DataSource>
										<Label>@SYS10653</Label>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTransactionHeader</DataSource>
								<DefaultAction>MainDefaultActionButton</DefaultAction>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>MainDefaultActionButton</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Command>DetailsView</Command>
							</AxFormControl>
						</Controls>
						<PanelStyle>Grid</PanelStyle>
						<Style>DetailsFormGrid</Style>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<ShowTabs>No</ShowTabs>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts>
		<AxFormPartReference xmlns="">
			<Name>BudgetTransactionTotals</Name>
			<DataSource>BudgetTransactionHeader</DataSource>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetTransactionTotalsPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetBalancesPart</Name>
			<DataSource>BudgetTransactionLine</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetBalancesPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetBalancesActuals</Name>
			<DataSource>BudgetTransactionLine</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetBalancesActualsPart</MenuItemName>
		</AxFormPartReference>
		<AxFormPartReference xmlns="">
			<Name>BudgetTransactionLineBudgetControlStatisticsPart</Name>
			<DataSource>BudgetTransactionLine</DataSource>
			<DataSourceRelation>SelfLink</DataSourceRelation>
			<IsLinked>Yes</IsLinked>
			<MenuItemName>BudgetTransactionLineBudgetControlStatisticsPart</MenuItemName>
		</AxFormPartReference>
	</Parts>
</AxForm>