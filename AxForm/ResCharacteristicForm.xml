<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>ResCharacteristicForm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class ResCharacteristicForm extends FormRun
{
    private ResCharacteristicsController controller;
    private Set excludedCharacteristicSet;
    private Query characteristicQuery;
    private QueryBuildRange characteristicRange;
    private utcdatetime validFrom = DateTimeUtil::minValue();
    private utcdatetime validTo = DateTimeUtil::getSystemDateTime();

}
]]></Source>
			</Method>
			<Method>
				<Name>resourceCharacteristics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the resource characteristics controller.
    /// </summary>
    /// <param name = "_controller">Resource characteristics controller.</param>
    /// <returns>Resource characteristics controller.</returns>
    public ResCharacteristicsController resourceCharacteristics(ResCharacteristicsController _controller = controller)
    {
        controller = _controller;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize resource characteristics form data.
    /// </summary>
    public void init()
    {
        if (element.args())
        {
            element.addCharacteristicsValueToSet();
        }

        super();

        if (controller)
        {
            RoleTimeframe.visible(controller.enableRoleSelection());
        }

        CharacteristicSet.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCharacteristicsValueToSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add characteristic set enum value to set.
    /// </summary>
    /// <returns>
    /// Return characteristic set.
    /// </returns>
    protected Set addCharacteristicsValueToSet()
    {
        excludedCharacteristicSet = new Set(Types::Enum);
        excludedCharacteristicSet.add(ResCharacteristicSetEnum::Name);

        if (!controller)
        {
            controller = element.args().caller() as ResCharacteristicsController;
        }

        if (controller)
        {
            if (!controller.enableRoleSelection())
            {
                excludedCharacteristicSet.add(ResCharacteristicSetEnum::Role);
            }

            if (!controller.enableProjectSelection())
            {
                excludedCharacteristicSet.add(ResCharacteristicSetEnum::Project);
            }
        }
        return excludedCharacteristicSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of roles chosen for the search.
    /// </summary>
    /// <returns>Number of roles chosen for the search.</returns>
    public int getRoleCount()
    {
        select count(RecId) from ResTmpCharacteristicSelected
            where ResTmpCharacteristicSelected.CharacteristicSet == ResCharacteristicSetEnum::Role;
        return int642int(ResTmpCharacteristicSelected.RecId);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>ResCharacteristicView</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize CharacteristicSet.
        /// </summary>
        public void init()
        {
            super();

            characteristicQuery = this.query();

            // set initial range value
            QueryBuildDataSource characteristicDS = this.queryBuildDataSource();
            characteristicRange = characteristicDS.addRange(fieldnum(ResCharacteristicView, CharacteristicSet));
            characteristicRange.value(queryValue(CharacteristicSet.selection()));
            characteristicDS.addSortField(fieldnum(ResCharacteristicView, Name));

            SelectableDataArea currentDataArea = curExt();

            // add company filter for role initially set disabled
            QueryBuildDataSource categoryDS = characteristicDS.addDataSource(tablenum(ResourceCategoryView));
            QueryBuildRange categoryRange = categoryDS.addRange(fieldnum(ResourceCategoryView, DataAreaId));
            categoryRange.value(queryValue(currentDataArea));

            categoryDS.addLink(fieldnum(ResCharacteristicView, Characteristic), fieldnum(ResourceCategoryView, RecId));
            categoryDS.enabled(false);

            // add company filter for projects initially set disabled
            QueryBuildDataSource projectDS = characteristicDS.addDataSource(tableNum(ProjTable));
            QueryBuildRange projectRange = projectDS.addRange(fieldNum(ProjTable, DataAreaId));
            projectRange.value(queryValue(currentDataArea));

            projectDS.addLink(fieldnum(ResCharacteristicView, Characteristic), fieldnum(ProjTable, RecId));
            projectDS.enabled(false);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>ResTmpCharacteristicSelected</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        /// Initialize selected characteristics.
        /// </summary>
        public void init()
        {
            super();

            if (!controller)
            {
                controller = element.args().caller() as ResCharacteristicsController;
            }

            if (controller)
            {
                ResSearchCriteria searchCriteria = controller.searchCriteria();
                ResTmpCharacteristicSelected existingCriteria = searchCriteria.getCriteriaRecords();

                while select existingCriteria
                {
                    if (!excludedCharacteristicSet.in(existingCriteria.CharacteristicSet))
                    {
                        ResTmpCharacteristicSelected.data(existingCriteria.data());
                        ResTmpCharacteristicSelected.doInsert();

                        ExcludedCharacteristics.data(existingCriteria.data());
                        ExcludedCharacteristics.doInsert();
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getRecord</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get specified record in data source.
        /// </summary>
        /// <param name = "_record">Common record object.</param>
        /// <returns>True when the record is found. Otherwise, false.</returns>
        public boolean getRecord(Common _record)
        {
            ResTmpCharacteristicSelected selection;
            ResCharacteristicView current = _record as ResCharacteristicView;

            int selectionCount = ResTmpCharacteristicSelected_DS.numberOfRowsLoaded();
            int selectionIdx = 1;
            for (selectionIdx = 1; selectionIdx <= selectionCount; selectionIdx++)
            {
                selection = ResTmpCharacteristicSelected_DS.cursor(selectionIdx) as ResTmpCharacteristicSelected;
                if (selection.CharacteristicSet == current.CharacteristicSet
                    && selection.CharacteristicId == current.Name)
                {
                    return true;
                }
            }

            return false;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CharacteristicSet</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Changes the characteristic set to filter on in ResCharacteristicView.
        /// </summary>
        /// <returns>1 when processed successfully. Otherwise, 0.</returns>
        public int selectionChange()
        {
            int ret = super();

            if (ret)
            {
                ResCharacteristicSetEnum selection = this.selection();
                characteristicRange.value(queryValue(selection));

                // enable/disable range for roles
                QueryBuildDataSource categoryDS = characteristicQuery.dataSourceTable(tablenum(ResourceCategoryView));
                categoryDS.enabled(selection == ResCharacteristicSetEnum::Role);

                // enable/disable Range for projects
                QueryBuildDataSource projectDS = characteristicQuery.dataSourceTable(tablenum(ProjTable));
                projectDS.enabled(selection == ResCharacteristicSetEnum::Project);

                FilterCharacteristics.parmFilterValue('');
                ResCharacteristicView_DS.executeQuery();
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>update</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update list of options in the characteristic set.
        /// </summary>
        public void update()
        {
            super();

            SysDictEnum dictEnum = new SysDictEnum(enumnum(ResCharacteristicSetEnum));
            for (int i = 0; i < dictEnum.values(); i++)
            {
                int value = dictEnum.index2Value(i);
                if (!excludedCharacteristicSet.in(value))
                {
                    this.add(dictEnum.index2Label(i));
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RoleTimeframe</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update the search timeframe for roles.
        /// </summary>
        /// <returns>1 when processed successfully. Otherwise, 0.</returns>
        public int selectionChange()
        {
            int ret = super();

            if (ret)
            {
                // get timeframe
                ResRoleSearchTimeframe timeframe;
                timeframe = str2enum(timeframe, this.valueStr());

                // determine validFrom and validTo
                switch (timeframe)
                {
                    case ResRoleSearchTimeframe::Anytime:
                        validFrom = DateTimeUtil::minValue();
                        validTo = DateTimeUtil::getSystemDateTime();
                        break;
                    case ResRoleSearchTimeframe::PastSixMonths:
                        validFrom = DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -6);
                        validTo = DateTimeUtil::getSystemDateTime();
                        break;
                    case ResRoleSearchTimeframe::PastYear:
                        validFrom = DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -12);
                        validTo = DateTimeUtil::getSystemDateTime();
                        break;
                }

                ttsbegin;

                // update role ValidFrom and ValidTo, if any
                while select forupdate ResTmpCharacteristicSelected
                where ResTmpCharacteristicSelected.CharacteristicSet == ResCharacteristicSetEnum::Role
                {
                    ResTmpCharacteristicSelected.ValidFrom = validFrom;
                    ResTmpCharacteristicSelected.ValidTo = validTo;
                    ResTmpCharacteristicSelected.update();
                }

                ttscommit;
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>update</Name>
						<Source><![CDATA[
        /// <summary>
        /// Update role timeframe control state.
        /// </summary>
        public void update()
        {
            super();
            boolean isEnabled = element.getRoleCount() && true;
            this.enabled(isEnabled);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddCharacteristicButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Adds a criteria to the search.
        /// </summary>
        public void clicked()
        {
            super();

            ClassId searchCriteriaItemId = ResSearchCriteriaItemFactory::getSearchCriteriaItemId(CharacteristicSet.selection());
            ResSearchCriteria searchCriteria = controller.searchCriteria();
            ResISearchCriteriaItem searchCriteriaItem = searchCriteria.getCriteriaItem(searchCriteriaItemId);
            searchCriteriaItem = searchCriteriaItem ? searchCriteriaItem : ClassFactory::makeObjectOnServer(searchCriteriaItemId);

            void insertIntoSelected(ResCharacteristicView record)
            {
                if (!ResTmpCharacteristicSelected_DS.getRecord(record))
                {
                    ResTmpCharacteristicSelected.CharacteristicSet = record.CharacteristicSet;
                    ResTmpCharacteristicSelected.CharacteristicId = record.Name;

                    if (record.CharacteristicSet == ResCharacteristicSetEnum::Role)
                    {
                        ResTmpCharacteristicSelected.ValidFrom = validFrom;
                        ResTmpCharacteristicSelected.ValidTo = validTo;
                    }
                    else
                    {
                        utcdatetime validity = DateTimeUtil::getSystemDateTime();
                        ResTmpCharacteristicSelected.ValidFrom = validity;
                        ResTmpCharacteristicSelected.ValidTo = validity;
                    }

                    searchCriteriaItem.addValue(record.Name);
                    ResTmpCharacteristicSelected.insert();

                    // insert into exclusion list
                    ExcludedCharacteristics.CharacteristicSet = record.CharacteristicSet;
                    ExcludedCharacteristics.CharacteristicId = record.Name;
                    ExcludedCharacteristics.insert();
                }
            }

            Array marked = ResCharacteristicView_DS.recordsMarked();
            ResCharacteristicView record;

            if (marked.lastIndex() > 1)
            {
                for (record = getFirstSelection(ResCharacteristicView_DS); record; record = ResCharacteristicView_DS.getNext())
                {
                    insertIntoSelected(record);
                    ResCharacteristicView_DS.markRecord(record, 0);
                }
                ResTmpCharacteristicSelected_DS.research();
            }
            else
            {
                record = ResCharacteristicView_DS.getFirst(1);
                if (record)
                {
                    insertIntoSelected(record);
                    ResTmpCharacteristicSelected_DS.research();
                    ResCharacteristicView_DS.markRecord(record, 0);
                }
            }

            controller.searchCriteria().setCriteriaItem(searchCriteriaItem);
            ResCharacteristicView_DS.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemoveCharacteristicButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Removes all selected criteria from the search.
        /// </summary>
        public void clicked()
        {
            super();

            ResSearchCriteria searchCriteria = controller.searchCriteria();
            ResTmpCharacteristicSelected tmpCharacteristicSelected;
            FormDataSource ds = ResTmpCharacteristicSelected_DS;

            tmpCharacteristicSelected = ds.getFirst(true) ? ds.getFirst(true) : ds.cursor();

            ClassId searchCriteriaItemId;
            ResISearchCriteriaItem searchCriteriaItem;

            while (tmpCharacteristicSelected)
            {
                searchCriteriaItemId = ResSearchCriteriaItemFactory::getSearchCriteriaItemId(tmpCharacteristicSelected.CharacteristicSet);
                searchCriteriaItem = searchCriteria.getCriteriaItem(searchCriteriaItemId);
                searchCriteriaItem.removeValue(tmpCharacteristicSelected.CharacteristicId);

                if (!searchCriteriaItem.getValues())
                {
                    searchCriteria.removeCriteriaItem(classIdGet(searchCriteriaItem));
                }

                delete_from ExcludedCharacteristics
                    where ExcludedCharacteristics.CharacteristicSet == tmpCharacteristicSelected.CharacteristicSet
                    && ExcludedCharacteristics.CharacteristicId == tmpCharacteristicSelected.CharacteristicId;

                tmpCharacteristicSelected.delete();
                tmpCharacteristicSelected = ResTmpCharacteristicSelected_DS.getNext();
            }

            ResTmpCharacteristicSelected_DS.research();
            ResCharacteristicView_ds.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>ResCharacteristicView</Name>
			<Table>ResCharacteristicView</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Characteristic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicIdentifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<MaxAccessRight>View</MaxAccessRight>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ResTmpCharacteristicSelected</Name>
			<Table>ResTmpCharacteristicSelected</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Characteristic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicIdentifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicSetDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>ExcludedCharacteristics</Name>
			<Table>ResTmpCharacteristicSelected</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Characteristic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicIdentifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CharacteristicSet</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>ResCharacteristicView</JoinSource>
			<LinkType>NotExistJoin</LinkType>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Res:ChooseCharacteristics</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>CharacteristicSet</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<Label>@Res:CharacteristicType</Label>
						<ViewEditMode>Edit</ViewEditMode>
						<Items />
					</AxFormControl>
					<AxFormControl>
						<Name>FilterCharacteristics</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>Characteristics</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>RoleTimeframe</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Enabled>No</Enabled>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>ResRoleSearchTimeframe</EnumType>
						<Label>@Res:RoleTimeframe</Label>
						<ViewEditMode>Edit</ViewEditMode>
						<Items />
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Style>DialogContent</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>CharacteristicsGroup</Name>
				<ExtendedStyle>listPanel</ExtendedStyle>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ListPanel</Pattern>
				<PatternVersion>1.3</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ListPanel</Name>
						<ExtendedStyle>listPanel</ExtendedStyle>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AvailablePanel</Name>
								<ExtendedStyle>listPanel_availPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Characteristics</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CharacteristicName</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>ResCharacteristicView</DataSource>
												<Text>Name</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CharacteristicDescription</Name>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>Description</DataField>
												<DataSource>ResCharacteristicView</DataSource>
												<Text>Description</Text>
											</AxFormControl>
										</Controls>
										<DataSource>ResCharacteristicView</DataSource>
										<DefaultAction>AddCharacteristicButton</DefaultAction>
										<HighlightActive>No</HighlightActive>
									</AxFormControl>
								</Controls>
								<Caption>@Res:AvailableCharacteristics</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AddRemoveActionsPanel</Name>
								<ExtendedStyle>listPanel_buttonPanel</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>AddCharacteristicButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NormalImage>MoveRight</NormalImage>
										<Text>@SYS2318</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RemoveCharacteristicButton</Name>
										<Type>Button</Type>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<MultiSelect>Yes</MultiSelect>
										<NormalImage>MoveLeft</NormalImage>
										<Text>@SYS311855</Text>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SelectedPanel</Name>
								<ExtendedStyle>listPanel_selPanel</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>CharacteristicChoices</Name>
										<Type>Grid</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>ChoiceName</Name>
												<AllowEdit>No</AllowEdit>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>CharacteristicId</DataField>
												<DataSource>ResTmpCharacteristicSelected</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>ChoiceCharacteristicSet</Name>
												<AllowEdit>No</AllowEdit>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<DataField>CharacteristicSet</DataField>
												<DataSource>ResTmpCharacteristicSelected</DataSource>
												<Label>Type</Label>
												<ViewEditMode>View</ViewEditMode>
												<Items />
											</AxFormControl>
										</Controls>
										<DataSource>ResTmpCharacteristicSelected</DataSource>
										<DefaultAction>RemoveCharacteristicButton</DefaultAction>
									</AxFormControl>
								</Controls>
								<Caption>@Res:SearchCriteria</Caption>
								<ViewEditMode>View</ViewEditMode>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitButtonGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OkButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>