<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetBalancesActualsByFocus</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetBalancesActualsByFocus extends FormRun implements DimensionCombinationIPreview
{
    BudgetCalculateBalance budgetCalculateBalance;
    boolean doExecuteQueryForBalanceRequest;

    private const str GeneralLedgerBalanceFeatureWhatsNewGuidStr = '{2347caa5-342f-420a-a1c4-6566baf0c8c6}';

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #SysSystemDefinedButtons

        super();

        if (GeneralLedgerBalanceFeatureRecommendationFlight::instance().isEnabled()
            && !FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            SystemNotificationsWhatsNewManager::AddWhatsNewWithActionLink(
                GeneralLedgerBalanceFeatureWhatsNewGuidStr,
                "@GeneralLedger:GeneralLedgerBalanceFeature",
                "@GeneralLedger:GeneralLedgerBalanceFeatureSummary",
                DimensionFocusGroup.name(),
                "@GeneralLedger:GeneralLedgerBalanceFeatureLink");
        }

        // User access to filters on the grid headers replaces the need for the filter pane.
        FormCommandButtonControl showFiltersButton = this.control(this.controlId(#SystemDefinedShowFiltersButton)) as FormCommandButtonControl;
        showFiltersButton.visible(false);

        budgetCalculateBalance = this.args().parmObject() as BudgetCalculateBalance;

        if (budgetCalculateBalance)
        {
            dimensionFocus.text(budgetCalculateBalance.parmDimensionFocus());
            budgetModelId.text(budgetCalculateBalance.parmBudgetModelId());
            includeSubModels.value(budgetCalculateBalance.parmIncludeSubModels());
            budgetTransactionStatus.selection(budgetCalculateBalance.parmBudgetTransactionStatusFilterValue());
            postingLayer.selection(enum2int(budgetCalculateBalance.parmLedgerCategory()));
            startDate.dateValue(budgetCalculateBalance.parmStartDate());
            endDate.dateValue(budgetCalculateBalance.parmEndDate());

            if (this.args().dataset() == tableNum(BudgetTmpBalancesActuals) &&
                this.args().record())
            {
                budgetTmpBalancesActuals.linkPhysicalTableInstance(this.args().record());
            }
            else
            {
                budgetTmpBalancesActuals.linkPhysicalTableInstance(budgetCalculateBalance.calculateDimensionFocusBalances());
            }

            doExecuteQueryForBalanceRequest = true;
        }
        else
        {
            budgetCalculateBalance = new BudgetCalculateBalance();

            // Set the parms for default values of budget transaction status and ledger category.
            budgetCalculateBalance.parmBudgetTransactionStatusFilterValue(budgetTransactionStatus.selection());
            budgetCalculateBalance.parmLedgerCategory(any2Enum(postingLayer.selection()));

            // Set the start date and end date to current fiscal year.
            FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            startDate.dateValue(fiscalCalendarYear.StartDate);
            budgetCalculateBalance.parmStartDate(fiscalCalendarYear.StartDate);
            endDate.dateValue(fiscalCalendarYear.EndDate);
            budgetCalculateBalance.parmEndDate(fiscalCalendarYear.EndDate);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            element.setPublicSectorFieldsVisible();
        }

        BudgetBalancesActualsGroupByType.visible(true);

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (doExecuteQueryForBalanceRequest)
        {
            // An initial budget calculate balance request was provided.
            // Execute the query to display the results.
            budgetTmpBalancesActuals_ds.executeQuery();

            doExecuteQueryForBalanceRequest = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsForMultipleRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method enables or disables buttons when there are multiple records selected.
    /// </summary>
    public void enableButtonsForMultipleRecords()
    {
        if (BudgetTmpBalancesActuals_DS.recordsMarked().lastIndex() == 0)
        {
            // Enable the Period balances, Budget register entries and General journal entries buttons.
            periodBalances.enabled(true);
            budgetRegisterEntries.enabled(true);
            generalJournalEntries.enabled(true);
        }
        else
        {
            // Disable the Period balances, Budget register entries and General journal entries buttons.
            periodBalances.enabled(false);
            budgetRegisterEntries.enabled(false);
            generalJournalEntries.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNamesAndValues</Name>
				<Source><![CDATA[
    private Map getDimensionNamesAndValues()
    {
        // Build dimension attribute name and value pairs for selected dimension focus value.
        Map dimensionNamesAndValues = BudgetInquiryHelper::buildDimensionNamesAndValuesForFocusCombination(this.getDimensionCombination(budgetTmpBalancesActuals), budgetCalculateBalance.parmDimensionFocus());

        return dimensionNamesAndValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionCombination</Name>
				<Source><![CDATA[
    private DimensionAttributeValueCombination getDimensionCombination(BudgetTmpBalancesActuals _budgetTmpBalancesActuals)
    {
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        if (_budgetTmpBalancesActuals.FocusLedgerDimension)
        {
            dimensionAttributeValueCombination = this.getFocusCombination(_budgetTmpBalancesActuals);
        }
        else
        {
            dimensionAttributeValueCombination = this.getSourceCombination(_budgetTmpBalancesActuals);
        }

        return dimensionAttributeValueCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFocusCombination</Name>
				<Source><![CDATA[
    private DimensionAttributeValueCombination getFocusCombination(BudgetTmpBalancesActuals _budgetTmpBalancesActuals)
    {
        return DimensionAttributeValueCombination::find(_budgetTmpBalancesActuals.FocusLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCombination</Name>
				<Source><![CDATA[
    private DimensionAttributeValueCombination getSourceCombination(BudgetTmpBalancesActuals _budgetTmpBalancesActuals)
    {
        return DimensionAttributeValueCombination::find(
            budgetCalculateBalance.getDimensionFocusNameTmp(_budgetTmpBalancesActuals.DimensionFocus).LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameValueList</Name>
				<Source><![CDATA[
    public DimensionNameValueListContract getNameValueList(Common _previewSourceRecord)
    {
        BudgetTmpBalancesActuals sourceBudgetTmpBalancesActuals = _previewSourceRecord as BudgetTmpBalancesActuals;

        DimensionAttributeValueCombination dimensionCombination = this.getDimensionCombination(sourceBudgetTmpBalancesActuals);
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, budgetCalculateBalance.parmDimensionFocus());

        return LedgerDimensionFacade::getDimensionNameValueListFromLedgerDimensionForHierarchy(dimensionCombination, dimensionHierarchy.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validateParameters()
    {
        boolean isValid = true;

        if (!budgetCalculateBalance.parmDimensionFocus())
        {
            // Dimension focus was not entered.
            isValid = checkFailed(strfmt("@SYS110217", "@SYS83218"));
        }

        if (!budgetCalculateBalance.parmBudgetModelId())
        {
            // Budget model was not entered.
            isValid = checkFailed(strfmt("@SYS110217", "@SYS1966"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPublicSectorFieldsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the visiblity of apportionment and preliminary fields on the form based on the <c>UseOnlyApportionment</c> and
    ///  <c>SumPreliminaryBudget</c> checkboxes in <c>BudgetControlConfiguration</c> table.
    /// </summary>
    private void setPublicSectorFieldsVisible()
    {
        LedgerRecId primaryLedgerRecId = Ledger::current();

        BudgetTmpBalancesActuals_ApportionmentBudget.visible(BudgetControlConfiguration::isApportionmentBudgetEnabled(primaryLedgerRecId));
        BudgetTmpBalancesActuals_PreliminaryBudget.visible(BudgetControlConfiguration::isPreliminaryBudgetEnabled(primaryLedgerRecId));
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BudgetTmpBalancesActuals</Name>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged()
        {
            super();

            element.enableButtonsForMultipleRecords();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Update</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (element.validateParameters())
            {
                // Populate the budgetTmpBalance table and call the linkPhysicalTableInstance method to attach records to datasource.
                budgetTmpBalancesActuals.linkPhysicalTableInstance(budgetCalculateBalance.calculateDimensionFocusBalances());

                boolean isAmountType = budgetCalculateBalance.parmBudgetBalancesActualsGroupByType() == BudgetBalancesActualsGroupByType::AmountType;

                // Set the visibility of amount type and budget account type field.
                BudgetTmpBalancesActuals_BudgetAccountType.visible(!isAmountType);
                BudgetTmpBalancesActuals_AmountType.visible(isAmountType);

                // Execute the query.
                budgetTmpBalancesActuals_ds.research();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PeriodBalances</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            Map dimensionNamesAndValues = element.getDimensionNamesAndValues();

            budgetCalculateBalance.parmDimensionNamesAndValues(dimensionNamesAndValues);

            LedgerDimensionBase ledgerDimensionRecId;

            if (budgetTmpBalancesActuals.FocusLedgerDimension)
            {
                ledgerDimensionRecId = budgetTmpBalancesActuals.FocusLedgerDimension;
            }
            else
            {
                // In cases where the focus combination DimensionAttributeValueCombination record does not exist,
                // generate the record in order to have the correct context to pass through to the BudgetBalancesActualsByPeriod form.
                ledgerDimensionRecId = BudgetInquiryHelper::getDimensionFocusCombinationForLedgerDimension(
                    budgetCalculateBalance.parmDimensionFocus(),
                    element.getSourceCombination(budgetTmpBalancesActuals).RecId);
            }

            budgetCalculateBalance.parmLedgerDimension(ledgerDimensionRecId);
            budgetCalculateBalance.parmBudgetType(budgetTmpBalancesActuals.BudgetType);

            Args args = new Args();
            args.parmObject(budgetCalculateBalance);

            MenuFunction budgetBalancesActualsForm = new MenuFunction(this.menuItemName(), MenuItemType::Display);

            if (budgetBalancesActualsForm)
            {
                budgetBalancesActualsForm.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetRegisterEntries</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            BudgetTransactionInquiryRequest budgetTransactionInquiryRequest = BudgetTransactionInquiryRequest::construct();

            // Set parms to budgetTransactionInquiryRequest from budgetCalculateBalance
            budgetTransactionInquiryRequest.parmBudgetModelId(budgetCalculateBalance.parmBudgetModelId());
            budgetTransactionInquiryRequest.parmIncludeSubModels(budgetCalculateBalance.parmIncludeSubModels());
            budgetTransactionInquiryRequest.parmTransactionStatus(budgetCalculateBalance.parmBudgetTransactionStatusFilterValue());
            budgetTransactionInquiryRequest.parmStartDate(budgetCalculateBalance.parmStartDate());
            budgetTransactionInquiryRequest.parmEndDate(budgetCalculateBalance.parmEndDate());
            budgetTransactionInquiryRequest.parmDimensionAttributeValueSet(element.getDimensionNamesAndValues());

            Args args = new Args();
            args.parmObject(budgetTransactionInquiryRequest);

            MenuFunction budgetTransactionInquiryForm = new MenuFunction(this.menuItemName(), MenuItemType::Display);

            if (budgetTransactionInquiryForm)
            {
                budgetTransactionInquiryForm.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GeneralJournalEntries</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            LedgerTrialBalanceListPageBalanceParms ledgerTrialBalanceListPageBalanceParms = LedgerTrialBalanceListPageBalanceParms::construct();

            // Set parms to ledgerTrialBalanceListPageBalanceParms from budgetCalculateBalance
            ledgerTrialBalanceListPageBalanceParms.parmDimensionSetHierarchy(
                DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, budgetCalculateBalance.parmDimensionFocus()));
            ledgerTrialBalanceListPageBalanceParms.parmPostingLayers(con2List([budgetCalculateBalance.parmLedgerCategory()]));
            ledgerTrialBalanceListPageBalanceParms.parmStartDate(budgetCalculateBalance.parmStartDate());
            ledgerTrialBalanceListPageBalanceParms.parmEndDate(budgetCalculateBalance.parmEndDate());
            ledgerTrialBalanceListPageBalanceParms.parmIncludeOpeningPeriods(true);
            ledgerTrialBalanceListPageBalanceParms.parmIncludeClosingAdjustments(false);
            ledgerTrialBalanceListPageBalanceParms.parmIncludeClosingTransactions(false);

            Args args = new Args();
            args.parmObject(ledgerTrialBalanceListPageBalanceParms);
            args.record(element.getFocusCombination(budgetTmpBalancesActuals));

            MenuFunction ledgerTransAccountForm = new MenuFunction(this.menuItemName(), MenuItemType::Display);

            if (ledgerTransAccountForm)
            {
                ledgerTransAccountForm.run(args);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DimensionFocus</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the lookup for the dimension focus field.
        /// </summary>
        public void lookup()
        {
            DimensionHierarchyHelper::lookupDimensionSet(this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmDimensionFocus(this.valueStr());
            }

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid = super();

            if (isValid)
            {
                isValid = BudgetTransactionManager::validateDimensionFocus(this.valueStr());
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetModelId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// Creates the lookup for the budget model field.
        /// </summary>
        public void lookup()
        {
            // Show models that are stopped.
            BudgetModel::lookupBudgetModel(this, true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid = super();

            if (isValid)
            {
                // Ensure the budget model exists, and is the only one selected.
                isValid = BudgetModel::exist(HeadingSub::Heading, this.valueStr(), this.valueStr());
            }

            return isValid;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmBudgetModelId(this.valueStr());

                if (BudgetModel::find(HeadingSub::SubModel, this.valueStr()))
                {
                    // Enable the include sub models checkbox control if submodels exist for budget model.
                    includeSubModels.enabled(true);
                }
                else
                {
                    // Disable and uncheck the include sub models checkbox control if submodels don't exists for budget model.
                    includeSubModels.enabled(false);
                    includeSubModels.checked(false);
                }
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IncludeSubModels</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmIncludeSubModels(this.checked());
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetTransactionStatus</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmBudgetTransactionStatusFilterValue(this.selection());
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PostingLayer</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmLedgerCategory(any2Enum(this.selection()));
            }

            return isModified;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>StartDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmStartDate(this.dateValue());
            }

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid = super();

            if (!this.dateValue())
            {
                isValid = checkFailed(strfmt("@SYS110217", "@SYS2168"));
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EndDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean isModified = super();

            if (isModified)
            {
                budgetCalculateBalance.parmEndDate(this.dateValue());
            }

            return isModified;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid = super();

            if (!this.dateValue())
            {
                isValid = checkFailed(strfmt("@SYS110217", "@SYS22882"));
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BudgetBalancesActualsGroupByType</Name>
				<Type>RadioButton</Type>
				<Methods>
					<Method>
						<Name>selectionChange</Name>
						<Source><![CDATA[
        public int selectionChange()
        {
            int ret = super();
    
            budgetCalculateBalance.parmBudgetBalancesActualsGroupByType(BudgetBalancesActualsGroupByType.selection());

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetTmpBalancesActuals</Name>
			<Table>BudgetTmpBalancesActuals</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ApportionmentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditLedgerAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DebitLedgerAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionFocus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionFocusName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FocusLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerAmountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentOfBudget</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreliminaryAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RevisedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Variance</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Budget:BudgetBalancesActualsByFocusCaption</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToContent</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Left>0</Left>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>Update</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>CommandButton</Type>
								<FormControlExtension
									i:nil="true" />
								<Text>@Budget:BudgetInquiryUpdateTotalsButton</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>PeriodBalances</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetTmpBalancesActuals</DataSource>
								<MenuItemName>BudgetBalancesActualsByPeriods</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS14487</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>BudgetRegisterEntries</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetTmpBalancesActuals</DataSource>
								<MenuItemName>BudgetTransactionInquiry</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>GeneralJournalEntries</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<Type>MenuFunctionButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataSource>BudgetTmpBalancesActuals</DataSource>
								<MenuItemName>LedgerTransAccountDisplayAllWithDate</MenuItemName>
								<NeedsRecord>Yes</NeedsRecord>
								<Text>@SYS345299</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>FiltersAndGridTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>FiltersTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Filters</Name>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DimensionFocusGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DimensionFocus</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>Name</ExtendedDataType>
												<Label>@SYS83218</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BudgetModelGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BudgetModelId</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>String</Type>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>BudgetModelId</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>IncludeSubModels</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>CheckBox</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS133169</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>StatusPostingLayerGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>BudgetTransactionStatus</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<EnumType>AllDraftCompleted</EnumType>
												<Label>@SYS191107</Label>
												<Selection>2</Selection>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>PostingLayer</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>ComboBox</Type>
												<FormControlExtension
													i:nil="true" />
												<EnumType>CurrentOperationsTax</EnumType>
												<Items />
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DateGroup</Name>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>StartDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS2168</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>EndDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Type>Date</Type>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS22882</Label>
											</AxFormControl>
										</Controls>
										<Breakable>No</Breakable>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRadioButtonControl">
										<Name>BudgetBalancesActualsGroupByType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>RadioButton</Type>
										<FormControlExtension
											i:nil="true" />
										<EnumType>BudgetBalancesActualsGroupByType</EnumType>
										<Items />
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<ViewEditMode>Edit</ViewEditMode>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryParametersTabPage</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>DetailsGridTabPage</Name>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<Type>Grid</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTmpBalancesActuals_DimensionFocus</Name>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DimensionFocus</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BudgetTmpBalancesActuals_DimensionFocusName</Name>
										<PreviewPartRef>DimensionCombinationPreviewPart</PreviewPartRef>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>DimensionFocusName</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_PreliminaryBudget</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PreliminaryAmount</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BudgetTmpBalancesActuals_BudgetAccountType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetAccountType</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>BudgetTmpBalancesActuals_AmountType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>BudgetType</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_RevisedAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>RevisedAmount</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_ApportionmentBudget</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>ApportionmentAmount</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_LedgerAmount</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>LedgerAmount</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_Variance</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Variance</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>BudgetTmpBalancesActuals_PercentOfBudget</Name>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>PercentOfBudget</DataField>
										<DataSource>BudgetTmpBalancesActuals</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>BudgetTmpBalancesActuals</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@Budget:BudgetInquiryResultsTabPage</Caption>
						<FastTabExpanded>Always</FastTabExpanded>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>