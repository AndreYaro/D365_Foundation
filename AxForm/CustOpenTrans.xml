<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>CustOpenTrans</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.CashManagement.Instrumentation;

[Form]
#ISOCountryRegionCodes
public class CustOpenTrans extends FormRun implements CustPaymISettlementAmountCallback, SettlementWriteOffIFormInterface
{
    #isoCountryRegionCodes

    private str CustOpenTransFormReenableObsoletePdsDatasourceFlight = CashManagementFlights::CustOpenTransFormReenableObsoletePdsDatasourceFlight;

    private const int PostMode = 0;
    private const int SaveMode = 1;

    CustVendOpenTransManager manager;
    TaxWithhold_CustPaym taxWithhold;
    container companies;

    Common originator;
    FormRun callingForm;
    LedgerJournalType ledgerJournalType;

    NoYes showError;

    CustTransDetails custTransDetails;
    CustVendDisputeHelper disputeHelper;
    QueryBuildRange qbrPartyId;

    FormObservableLink markedObservableLink;

    CustSettlementPriorityProcessing custSettlePriorityOpenTrans;

    DataAreaId currentCompany;
    DataAreaId loggedinCompany;

    CustInterestWriteOffUnPostedJournal custInterestWriteOffUnPostedJournal;

    container pdsDateRanges; // Obsolete July 30, 2020
    QueryBuildDataSource custTransOpenQueryDS; // Obsolete July 30, 2020

    CustVendSettle_Cust custVendSettle;
    boolean isConsEnabled;

    boolean currentlyUnmarkingAll;

    private int formCloseMode;

    [FormObservable]
    CashDiscAmount cashDiscAmount;
    [FormObservable]
    AmountMST markedTotalMst;
    [FormObservable]
    AmountCur markedTotalCur;
    [FormObservable]
    AmountMST cashDiscTotalMst;
    [FormObservable]
    AmountCur cashDiscTotalCur;
    [FormObservable]
    AmountMST custBalanceMst;
    [FormObservable]
    AmountCur journalTransAmountDisplayCur;
    [FormObservable]
    AmountMST journalTransAmountMst;
    [FormObservable]
    NoYes isPrimaryPaymentImageNeeded;

    CustTrans custTransOriginator;
    private SettlementWriteOffUIController settlementWriteOffUIController;

    // <GEERU>
    boolean countryRegion_RU;
    // </GEERU>

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean canClose;

        canClose = super();

        if (!settlementWriteOffUIController.parmIsSettlementWriteOffInProgress())
        {
            // determine if user wants to close when marked total is not within over/under amount
            canClose = manager.validateMarkedTotalWithinOverUnder();
        }

        if (canClose)
        {
            canClose = manager.validateBankLCSettlement();

            // <GEERU>
            if (countryRegion_RU && originator.TableId == tableNum(LedgerJournalTrans))
            {
                if (manager.validateSettlePostingDate(manager.parmSettlePostingType(), manager.parmSettlePostingDate()) == false)
                {
                    custTransOpen_ds.research();
                    custTransOpen_ds.refresh();
                    return false;
                }
            }
            // </GEERU>
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if settlement can occur when marked total is not within over/under amount.
    /// </summary>
    /// <returns>true if settlement can occur; otherwise, false.</returns>
    protected boolean canSettle()
    {
        return manager.validateMarkedTotalWithinOverUnder() && manager.validateMarkedWithCrossRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDynalink</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clear dynalinks for the CustTransOpen data source so that the caller's dataAreaId doesn't restrict the query
    /// </summary>
    /// <remarks>
    ///     Method contains public sector specific code. The empty implementation is provided in SYS layer to avoid the SI layer conflict.
    /// </remarks>
    public void clearDynalink()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    public AccountNum custAccount()
    {
        CustTable callerCustTable;

        if (element.args().record() && element.args().record().TableId == tableNum(CustTable))
        {
            callerCustTable = element.args().record();
            return callerCustTable.AccountNum;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransRefresh</Name>
				<Source><![CDATA[
    void custTransRefresh()
    {
        element.doRefresh();
        custTransOpen_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable the consolidation invoice related controls.
    /// </summary>
    public void updateDesignConsInvoice_JP()
    {
        custConsInvoiceSettle_JP.visible(isConsEnabled);
        ConsId.visible(isConsEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCashDiscTotalCur</Name>
				<Source><![CDATA[
    public display AmountCur displayCashDiscTotalCur()
    {
        return cashDiscTotalCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCashDiscTotalMst</Name>
				<Source><![CDATA[
    public display AmountMST displayCashDiscTotalMst()
    {
        return cashDiscTotalMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustBalanceMst</Name>
				<Source><![CDATA[
    public display AmountMST displayCustBalanceMst()
    {
        return custBalanceMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMarkedTotalCur</Name>
				<Source><![CDATA[
    public display AmountCur displayMarkedTotalCur()
    {
        return markedTotalCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMarkedTotalMst</Name>
				<Source><![CDATA[
    public display AmountMST displayMarkedTotalMst()
    {
        return markedTotalMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransferredAmountCur</Name>
				<Source><![CDATA[
    public display AmountCur displayTransferredAmountCur()
    {
        return journalTransAmountDisplayCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransferredAmountMst</Name>
				<Source><![CDATA[
    public display AmountCur displayTransferredAmountMst()
    {
        return journalTransAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCallerAllowEdit</Name>
				<Source><![CDATA[
    public boolean doesCallerAllowEdit()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        SalesTable          salesTable;
        CustInvoiceTable    custInvoiceTable;
        FormDataSource      callerDataSource;
        boolean             allowEdit = true;
        FormRun             formRun;
        Object              caller;

        callerDataSource = FormDataUtil::getFormDataSource(element.args().record());

        switch (originator.TableId)
        {
            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans = originator;

                // Change to account company because this is where the payment terms exists
                changecompany(ledgerJournalTrans.Company)
                {
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                        && ledgerJournalTrans.PaymReference)
                    {
                        allowEdit = true && callerDataSource.allowEdit();
                    }
                    else if (!ledgerJournalTrans.allowSettlement())
                    {
                        allowEdit = false;
                    }
                }
                break;

            case tableNum(SalesTable) :
                salesTable = originator;

                if (PaymTerm::find(salesTable.Payment).CashLedgerDimension != 0)
                {
                    allowEdit = false;
                }
                else
                {
                    caller = element.args().caller();
                    if (caller && SysDictClass::isEqualOrSuperclass(classIdGet(caller), classNum(FormRun)))
                    {
                        formRun = caller;
                        if (formRun.name() == formStr(SalesTableListPage))
                        {
                            allowEdit = true;
                        }
                    }
                }
                break;

            case tableNum(CustInvoiceTable) :
                custInvoiceTable = originator;

                if (PaymTerm::find(custInvoiceTable.Payment).CashLedgerDimension != 0)
                {
                    allowEdit = false;
                }
                break;

            case tableNum(CustTable) :
                // Coming from CustTable (Or the list pages since they all pass in
                // CustTable record with args) this we always be editable.
                allowEdit = true;
                break;
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefresh</Name>
				<Source><![CDATA[
    public void doRefresh()
    {
        custTransOpen_ds.reread();
        custTransOpen_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs settlement on the marked transactions.
    /// </summary>
    protected void doSettlement()
    {
        manager.updateSpecTransWithSelectedDate();

        CashManagementEventSource eventSource = CashManagementEventSource::Log;
        eventSource.EventWriteCustOpenTransDoSettlementCalled();

        manager.settleMarkedTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDateTypeUsedToCalcDisc</Name>
				<Source><![CDATA[
    public edit CashDiscUsedToCalcDisc editDateTypeUsedToCalcDisc(boolean _set, CashDiscUsedToCalcDisc _discCalcDateType)
    {
        if (_set)
        {
            manager.updateDateTypeUsedToCalcDisc(_discCalcDateType);
            manager.parmDateTypeUsedToCalcDisc(_discCalcDateType);

            this.updateDesignDynamic();

            CustVendTransCashDisc applicableCustVendTransCashDisc =  manager.findApplicableCustVendTransCashDisc(custTransOpen);
            custTransCashDisc_ds.positionToRecordByValue(fieldNum(CustTransCashDisc, RecId), int642Str(applicableCustVendTransCashDisc.RecId));
        }

        return manager.parmDateTypeUsedToCalcDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDateUsedToCalcDisc</Name>
				<Source><![CDATA[
    public edit TransDate editDateUsedToCalcDisc(boolean _set, TransDate _cashDiscCalcDate)
    {
        if (_set)
        {
            manager.updateDateUsedToCalcDisc(_cashDiscCalcDate);
            manager.parmDateUsedToCalcDisc(_cashDiscCalcDate);

            // Update dynamic controls & refresh form as auto-redraw is not triggered
            element.updateDesignDynamic();

            CustVendTransCashDisc applicableCustVendTransCashDisc =  manager.findApplicableCustVendTransCashDisc(custTransOpen);
            custTransCashDisc_ds.positionToRecordByValue(fieldNum(CustTransCashDisc, RecId), int642Str(applicableCustVendTransCashDisc.RecId));
        }

        return manager.parmDateUsedToCalcDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSettlePostingDate</Name>
				<Source><![CDATA[
    public edit TransDate editSettlePostingDate(boolean _set, TransDate _settlePostingDate)
    {
        if (_set)
        {
            manager.parmSettlePostingDate(_settlePostingDate);
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                custVendSettle.datePrinciple(manager.parmSettlePostingType());
                custVendSettle.saveDate(manager.parmSettlePostingDate());
                xSysLastValue::saveLast(custVendSettle);
            }
        }

        return manager.parmSettlePostingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editSettlePostingType</Name>
				<Source><![CDATA[
    public edit SettleDatePrinc editSettlePostingType(boolean _set, SettleDatePrinc _settlePostingType)
    {
        if (_set)
        {
            manager.parmSettlePostingType(_settlePostingType);

            this.updateDesignDynamic();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                custVendSettle.datePrinciple(manager.parmSettlePostingType());
                custVendSettle.saveDate(manager.parmSettlePostingDate());
                xSysLastValue::saveLast(custVendSettle);
            }
        }

        return manager.parmSettlePostingType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterBySalesOrder_CZ</Name>
				<Source><![CDATA[
    void filterBySalesOrder_CZ()
    {
        str                     recIdStr;
        QueryBuildDataSource    qbds;

        void clearRange()
        {
            qbds.clearRange(fieldNum(CustTransOpen, RecId));
            filterBySalesOrder_CZ.text("@GLS111726");
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
        {
            qbds = custTransOpen_ds.query().dataSourceTable(tableNum(CustTransOpen));
            if (qbds.findRange(fieldNum(CustTransOpen, RecId)))
            {
                clearRange();
            }
            else
            {
                recIdStr = CzCustVendTransOpenFilter::filter(element, originator);
                if (recIdStr)
                {
                    findOrCreateRange_W(qbds, fieldNum(CustTransOpen, RecId), recIdStr);
                    filterBySalesOrder_CZ.text("@SYS122038");
                }
                else
                {
                    clearRange();
                }
            }

            custTransOpen_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date that will be used for this settlement.
    /// </summary>
    /// <returns>
    /// Transaction date for this settlement.
    /// </returns>
    public TransDate getTransDate_BR()
    {
        TransDate           transDate;
        LedgerJournalTrans  ledgerJournalTrans;

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans  = originator;
            transDate           =  ledgerJournalTrans.TransDate;
        }
        else
        {
            transDate           =  dateNull();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerNameFromTableIdDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the customer name based on the tableId of the originator buffer.
    /// </summary>
    /// <param name = "_custOpenTrans">The <c>FomRun</c> of the calling form.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> where a <c>CustName</c> can be returned.</param>
    delegate void customerNameFromTableIdDelegate(FormRun            _custOpenTrans,
                                                  EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerNameFromTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the customer name based on the tableId of the originator buffer.
    /// </summary>
    /// <returns>A <c>CustName</c></returns>
    private CustName customerNameFromTableId()
    {
        CustName custName;
        switch (originator.TableId)
        {
            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = originator;
                ledgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;

                if (ledgerJournalType == LedgerJournalType::Daily ||
                    ledgerJournalType == LedgerJournalType::CustPayment ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeDraw ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeRedraw ||
                    ledgerJournalType == LedgerJournalType::CustPaymRemittance ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle)
                {
                    this.updateDataSourceBillOfExchange(ledgerJournalTrans, ledgerJournalType);
                }

                if ((TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled() || BrazilParameters::isEnabled())
                    && (ledgerJournalType == LedgerJournalType::Daily || ledgerJournalType == LedgerJournalType::CustPayment))
                {
                    if (BrazilParameters::isEnabled())
                    {
                        if (!ledgerJournalTrans.handleWriteTaxWithholdEditStatus_BR())
                        {
                            throw Exception::Error;
                        }
                    }
                    taxWithhold = TaxWithhold::construct(ledgerJournalTrans);
                    taxWithholdTab.visible(true);
                }

                if (#PdsRebateEnabled)
                {
                    pdsFunctions.visible(true);
                }

                custName = ledgerJournalTrans.accountName();
                break;

            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJour = originator;
                custName = custInvoiceJour.custTable_InvoiceAccount().name();
                break;

            case tableNum(SalesTable):
                SalesTable salesTable = originator;
                custName = salesTable.customerName();
                break;

            case tableNum(CustInvoiceTable):
                CustInvoiceTable custInvoiceTable = originator;
                custName = custInvoiceTable.customerName();
                break;

            case tableNum(CustTable) :
                if (#PdsRebateEnabled)
                {
                    pdsFunctions.visible(true);
                }

                CustTable customer = originator;
                custName = customer.name();
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.customerNameFromTableIdDelegate(this, result);
                if(result.hasResult())
                {
                    custName = result.result();
                }
                else
                {
                    Debug::assert(false);
                }
                break;
        }
        return custName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        originator = element.args().record();
        callingForm = element.args().caller();

        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (originator.RecId == 0)
        {
            throw error(Error::missingParameter(this));
        }

        if (originator.TableId == tableNum(CustTrans))
        {
            custTransOriginator = originator;
            CustTable custTableOriginator = CustTable::find(custTransOriginator.AccountNum);
            originator = custTableOriginator;
        }

        loggedinCompany = curext();

        super();

        CustName custName = this.customerNameFromTableId();
        element.setFormCaptionForCustomer(custName);

        showError = NoYes::Yes;

        isConsEnabled = CustConsInvoiceType_JP::isCustConsInvoiceEnabled();

        // Update data source & design aspects that don't change for the lifespan of the form
        this.updateDataSourceStatic();
        this.updateDesignStatic();

        if (!element.doesCallerAllowEdit())
        {
            selectAllButton.enabled(false);
            clearAllButton.enabled(false);
        }

        this.updateMarkTransactionsButton();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            element.setTaxWithholdVisible_IN();
        }

        if (BrazilParameters::isEnabled())
        {
            CustTrans_FiscalEstablishmentId_BR.visible(true);
        }

        custTransOpen_CashDiscAccount.parmPostingType(LedgerPostingType::None);

        manager = CustVendOpenTransManager::construct(originator);

        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
            taxWithholdTrans_ds.object(fieldNum(TaxWithholdTrans, TaxWithholdItemGroupHeading_TH)).mandatory(true);
            taxWithholdTrans_TaxWithholdGroup.mandatory(true);
        }

        element.updateMarkedTotals();
        if (manager.findAnyPrimaryPayments())
        {
            isPrimaryPaymentImageNeeded = NoYes::Yes;
        }

        markTrans.setFocus();

        if (element.args().lookupRecord() is CustTransOpen)
        {
            custTransOpen_DS.setRecord(element.args().lookupRecord());
        }

        markedObservableLink = new FormObservableLink();

        if(manager.findAnyBankLCNumber())
        {
            bankLCNumber.visible(true);
        }

        if(manager.findAnyBankLCShipmentLineNum())
        {
            bankLCShipmentLineNum.visible(true);
        }

        if (callingForm && callingForm.name() == formStr(SettlementView))
        {
            this.overrideCompanyRange(custTransOpen_ds.query());

            qbrPartyId.value(queryValue(manager.getParty()));
        }

        // <GTE><GIN>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            displayTaxTransactionId_IN.visible(true);
        }
        // </GTE><GIN>

        this.initSettleWriteOff();

        TaxWithholdTrans_TaxWithholdExchRate.visible(TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormCaptionForCustomer</Name>
				<Source><![CDATA[
    private void setFormCaptionForCustomer(CustName _custName)
    {
        element.design().caption(strfmt("@CashManagement:SettleOpenTransFor", _custName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    void initFromCaller()
    {
        // Validate that calling record exists
        if (originator.RecId == 0)
        {
            switch (originator.TableId)
            {
                case tableNum(CustTable):
                    throw error("@SYS22842");

                case tableNum(CustInvoiceJour):
                case tableNum(SalesTable), tableNum(CustInvoiceTable), tableNum(LedgerJournalTrans):
                    throw error("@SYS22996");

                default:
                    Debug::assert(false);
                    break;
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custVendSettle = CustVendSettle::construct(SysModule::Cust);

            manager.parmSettlePostingType(custVendSettle.datePrinciple());
            if (manager.parmSettlePostingType() == SettleDatePrinc::SelectDate)
            {
                manager.parmSettlePostingDate(custVendSettle.saveDate());
            }
        }

        this.initSettleWriteOff();

        // Update dynamic data source & design aspects based on changing data from the caller
        this.updateDataSourceDynamic();
        this.updateDesignDynamic();

        // Initialize the CustSettlementPriorityProcessing object
        custSettlePriorityOpenTrans = CustSettlementPriorityProcessing::constructCustOpenTrans(manager, custTransOpen_ds);
        this.updateMarkTransactionsButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSettleWriteOff</Name>
				<Source><![CDATA[
    private void initSettleWriteOff()
    {
        settlementWriteOffUIController = SettlementWriteOffUIControllerFactory::constructUIController(ModuleCustVend::Cust, originator);
        settlementWriteOffUIController.initSettleRemainderControl(SettleRemainder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxBranchControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the status of controls that for Thailand Multiple Tax branches feature.
    /// </summary>
    public void initTaxBranchControls()
    {
        // For Thailand MTB controls based on sys fields, they are set as invisiable by default.
        // Needs to init their status here.
        displayTaxBranchDimension_TH.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryModificationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the form's query need to be modified.
    /// </summary>
    /// <returns>
    /// true if the form's query needs to be modified; otherwise, false
    /// </returns>
    /// <remarks>
    /// If the intercompany accounting configuration key is enabled and the journal is not a bill of exchange redraw,
    /// protest, remittance, or settled journal the query needs to be modified.
    /// </remarks>
    protected boolean isQueryModificationRequired()
    {
        boolean isQueryModificationRequired;

        if (originator.TableId == tableNum(LedgerJournalTrans) &&
            (ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest ||
            ledgerJournalType == LedgerJournalType::CustBillOfExchangeRedraw ||
            ledgerJournalType == LedgerJournalType::CustPaymRemittance ||
            ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle))
        {
            isQueryModificationRequired = false;
        }
        else
        {
            isQueryModificationRequired = isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting));
        }

        return isQueryModificationRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return this.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_PaymentReference</Name>
				<Source><![CDATA[
    public str ledgerJournalTrans_PaymentReference()
    {
        LedgerJournalTrans callerLedgerJournalTrans;

        if (element.args().record() && element.args().record().TableId == tableNum(LedgerJournalTrans))
        {
            callerLedgerJournalTrans = element.args().record();
            return callerLedgerJournalTrans.PaymReference;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes an args object containing the form and datasource objects.
    /// </summary>
    /// <returns>
    /// An args object.
    /// </returns>

    public Args makeArgs()
    {
        Common custTable;
        Args args;

        custTable = CustTable::find(CustTrans::findByCompany(custTransOpen.company(),custTransOpen.RefRecId).AccountNum);

        args = new Args(formStr(CustOpenTrans));
        args.menuItemName(menuItemDisplayStr(CustOpenTrans));
        args.caller(element);
        args.record(custTransOpen);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markWithBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Mark transaction according to Billing Classification.
    /// </summary>
    /// <param name="_custTransOpen">
    ///     Buffer of <c>CustTransOpen</c> table that contains open transactions
    /// </param>
    public void markWithBillingClassification(CustTransOpen _custTransOpen)
    {
        CustTrans trans;
        CustSettlementPriorityProcessing custPriorityProcessing;

        if (manager.getTransMarked(_custTransOpen))
        {
            // create the new object
            custPriorityProcessing = CustSettlementPriorityProcessing::constructCustOpenTrans(manager, custTransOpen_ds);

            trans = _custTransOpen.joinChild();

            if (custPriorityProcessing.isMarked(trans,_custTransOpen) == true)
            {
                manager.getTransMarked(_custTransOpen);
            }
            else
            {
                manager.updateTransMarked(_custTransOpen, NoYes::No);
                element.updateDesignDynamic();
                custTransOpen_ds.refresh();
                markInvoiceLines.enabled(false);
                if (_custTransOpen.AmountCur > 0)
                {
                    checkFailed("@SPS659");
                }
                else
                {
                    if (custPriorityProcessing.invoiceExistWithCreditNoteRestriction())
                    {
                        checkFailed("@SPS649");
                    }
                    else
                    {
                        checkFailed("@SPS659");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideCompanyRange</Name>
				<Source><![CDATA[
    private void overrideCompanyRange(Query _query)
    {
        if (_query && manager)
        {
            // Clear company range
            _query.clearCompanyRange();

            // Get current shared service companies
            companies = manager.getSharedServiceCompaniesByParty();

            for (Counter i = 1; i <= conLen(companies); i++)
            {
                _query.addCompanyRange(conPeek(companies, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCallBackForClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a call back to the calling form when this form is closing.
    /// </summary>
    /// <remarks>
    /// The call back is only made if the method exists on the calling form.
    /// </remarks>
    private void performCallBackForClose()
    {
        Object obj;

        if (callingForm != null)
        {
            if (SysFormRun::hasMethod(callingForm, identifierStr(enableSettlement)))
            {
                obj = callingForm;
                obj.enableSettlement();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveMarkedTransactions</Name>
				<Source><![CDATA[
    public boolean promptRemoveMarkedTransactions()
    {
        if (element.args() && element.args().record() && element.args().record().TableId == tableNum(LedgerJournalTrans))
        {
            custInterestWriteOffUnPostedJournal = CustInterestWriteOffUnPostedJournal::findByLedgerJournalTrans(element.args().record().RecId);
        }

        return (!custInterestWriteOffUnPostedJournal.RecId && SpecTrans::promptRemoveMarkedTransactions()) ||
             (custInterestWriteOffUnPostedJournal.RecId && Box::yesNo(strfmt("@SYS76498", "@SYS24027", "@SYS328999"), DialogButton::No, "@SYS342420") == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reinit</Name>
				<Source><![CDATA[
    void reinit()
    {
        custTrans_ds.executeQuery();
        custTransOpen_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdVisible_IN</Name>
				<Source><![CDATA[
    void setTaxWithholdVisible_IN()
    {
        TaxWithholdParameters_IN    taxWithholdParameters;

        taxWithholdParameters = TaxWithholdParameters_IN::find();
        custTransOpen_ds.object(fieldNum(CustTransOpen, tdsAmount_IN)).visible(taxWithholdParameters.tdsActivate);
        custTransOpen_ds.object(fieldNum(CustTransOpen, tcsAmount_IN)).visible(taxWithholdParameters.tcsActivate);
        custTransOpen_ds.object(fieldNum(CustTransOpen, TaxWithholdAmountOrigin_IN)).visible(taxWithholdParameters.tdsActivate || taxWithholdParameters.tcsActivate);
        custTransReferenceVoucher_IN.visible(taxWithholdParameters.tdsActivate || taxWithholdParameters.tcsActivate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSourceBillOfExchange</Name>
				<Source><![CDATA[
    void updateDataSourceBillOfExchange(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalType _ledgerJournalType)
    {
        #define.dataSourceNumBOE(2)

        FormDataSource formDataSource = this.dataSource(#dataSourceNumBOE);

        if (_ledgerJournalType == LedgerJournalType::CustBillOfExchangeDraw ||
            _ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest ||
            _ledgerJournalType == LedgerJournalType::CustBillOfExchangeRedraw ||
            _ledgerJournalType == LedgerJournalType::CustPaymRemittance ||
            _ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle)
        {
            Query query = formDataSource.query();
            QueryBuildDataSource qbds_CustBillOfExchangeTrans = query.dataSourceTable(tableNum(CustTrans)).addDataSource(tableNum(CustBillOfExchangeTrans));
            QueryBuildRange qbr_Status = qbds_CustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, Status));

            if ((_ledgerJournalType == LedgerJournalType::CustPaymRemittance
                || _ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest)
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
            {
                QueryBuildDataSource qbds_CustBillOfExchangeJour = query.dataSourceTable(tableNum(CustBillOfExchangeTrans)).addDataSource(tableNum(CustBillOfExchangeJour));
                qbds_CustBillOfExchangeJour.joinMode(JoinMode::InnerJoin);
                qbds_CustBillOfExchangeJour.relations(true);
                // In addition to the relation fields, the Sequence Number must also be involved in the
                // join in order to relate reorganized BOE transactions to the correct CustBillOfExchangeJour records.
                qbds_CustBillOfExchangeJour.addLink(fieldNum(CustBillOfExchangeTrans, Status), fieldNum(CustBillOfExchangeJour, Status));

                if (_ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest)
                {
                    qbds_CustBillOfExchangeJour.addLink(fieldNum(CustBillOfExchangeTrans, SeqNum), fieldNum(CustBillOfExchangeJour, BillOfExchangeSeqNum));
                }
            }

            if (_ledgerJournalType != LedgerJournalType::CustBillOfExchangeDraw)
            {
                query.clearCompanyRange();
                query.addCompanyRange(curExt());
            }

            QueryBuildRange qbr_RemittanceType;

            switch (_ledgerJournalType)
            {
                case LedgerJournalType::CustBillOfExchangeDraw :
                    qbds_CustBillOfExchangeTrans.joinMode(JoinMode::NoExistsJoin);
                    qbds_CustBillOfExchangeTrans.relations(true);
                    break;

                case LedgerJournalType::CustPaymRemittance :
                    qbr_Status.value(queryValue(CustVendNegInstStatus::Drawn)  + ',' +
                        queryValue(CustVendNegInstStatus::Redrawn));

                    qbds_CustBillOfExchangeTrans.joinMode(JoinMode::InnerJoin);
                    qbds_CustBillOfExchangeTrans.relations(true);

                    // In addition to the relation fields, the Sequence Number must also be involved in the
                    // join in order to relate reorganized BOE transactions to the correct CustTrans records.
                    qbds_CustBillOfExchangeTrans.addLink(fieldNum(CustTrans, BillOfExchangeSeqNum), fieldNum(CustBillOfExchangeTrans, SeqNum));
                    break;

                case LedgerJournalType::CustBillOfExchangeProtest :
                    qbr_Status.value(queryValue(CustVendNegInstStatus::Drawn)  + ',' +
                        queryValue(CustVendNegInstStatus::Redrawn)+ ',' +
                        queryValue(CustVendNegInstStatus::Remitted));

                    qbr_RemittanceType = qbds_CustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, BankRemittanceType));
                    qbr_RemittanceType.value(queryValue(_ledgerJournalTrans.BankRemittanceType));

                    qbds_CustBillOfExchangeTrans.joinMode(JoinMode::ExistsJoin);
                    qbds_CustBillOfExchangeTrans.relations(true);

                    // In addition to the relation fields, the Sequence Number must also be involved in the
                    // join in order to relate reorganized BOE transactions to the correct CustTrans records.
                    qbds_CustBillOfExchangeTrans.addLink(fieldNum(CustTrans, BillOfExchangeSeqNum), fieldNum(CustBillOfExchangeTrans, SeqNum));
                    break;

                case LedgerJournalType::CustBillOfExchangeRedraw :
                    qbr_Status.value(queryValue(CustVendNegInstStatus::Protested));
                    qbds_CustBillOfExchangeTrans.joinMode(JoinMode::InnerJoin);
                    qbds_CustBillOfExchangeTrans.relations(true);

                    // In addition to the relation fields, the Sequence Number must also be involved in the
                    // join in order to relate reorganized BOE transactions to the correct CustTrans records.
                    qbds_CustBillOfExchangeTrans.addLink(fieldNum(CustTrans, BillOfExchangeSeqNum), fieldNum(CustBillOfExchangeTrans, SeqNum));
                    break;

                case LedgerJournalType::CustBillOfExchangeSettle :
                    if (_ledgerJournalTrans.BankAccountId)
                    {
                        qbr_Status.value(queryValue(CustVendNegInstStatus::Remitted));
                    }
                    else
                    {
                        qbr_Status.value(queryValue(CustVendNegInstStatus::Drawn) + ',' +
                                         queryValue(CustVendNegInstStatus::Protested) + ',' +
                                         queryValue(CustVendNegInstStatus::Redrawn) + ',' +
                                         queryValue(CustVendNegInstStatus::Remitted));
                    }

                    QueryBuildRange qbr_BankAccount = qbds_CustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, RemittedToBankAccountId));
                    qbr_BankAccount.value(queryValue(_ledgerJournalTrans.BankAccountId));

                    qbr_RemittanceType = qbds_CustBillOfExchangeTrans.addRange(fieldNum(CustBillOfExchangeTrans, BankRemittanceType));
                    qbr_RemittanceType.value(queryValue(_ledgerJournalTrans.BankRemittanceType));

                    qbds_CustBillOfExchangeTrans.joinMode(JoinMode::ExistsJoin);
                    qbds_CustBillOfExchangeTrans.relations(true);

                    // In addition to the relation fields, the Sequence Number must also be involved in the
                    // join in order to relate reorganized BOE transactions to the correct CustTrans records.
                    qbds_CustBillOfExchangeTrans.addLink(fieldNum(CustTrans, BillOfExchangeSeqNum), fieldNum(CustBillOfExchangeTrans, SeqNum));
                    break;

                default :
            }
        }
        else
        {
            formDataSource.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans, BillOfExchangeStatus)).value(queryValue(CustVendNegInstStatus::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSourceDynamic</Name>
				<Source><![CDATA[
    public void updateDataSourceDynamic()
    {
        Query query;

        if (this.isQueryModificationRequired())
        {
            query = custTransOpen_ds.query();

            this.overrideCompanyRange(query);
        }

        // Set the PartyId range to the current customer's PartyId
        Debug::assert(qbrPartyId != null);
        qbrPartyId.value(queryValue(manager.getParty()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSourceStatic</Name>
				<Source><![CDATA[
    public void updateDataSourceStatic()
    {
        Query query = custTransOpen_ds.query();

        // Clear dynalinks for the CustTransOpen data source so that the caller's dataAreaId doesn't restrict the query
        QueryBuildDataSource qbdsCustTransOpen = query.dataSourceTable(tableNum(CustTransOpen));
        qbdsCustTransOpen.clearDynalinks();

        // Add CustTable data source with PartyId range off CustTrans data source
        QueryBuildDataSource qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));

        // Modify the link between CustTrans and CustTransOpen for better performance
        qbdsCustTrans.clearLinks();
        qbdsCustTrans.addLink(fieldNum(CustTransOpen, RefRecId), fieldNum(CustTrans, RecId));
        qbdsCustTrans.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsCustTable = qbdsCustTrans.addDataSource(tableNum(CustTable));
        if (CustVendOpenTransFormPerfImproveFlight::instance().isEnabled())
        {
            qbdsCustTable.relations(false);
            qbdsCustTable.addLink(fieldNum(CustTransOpen, AccountNum), fieldNum(CustTable, AccountNum), qbdsCustTransOpen.name());
        }
        else
        {
            qbdsCustTable.relations(true);
        }
        qbdsCustTable.joinMode(JoinMode::InnerJoin);

        // This needs to be set as it could be the second data source joined to the CustTrans.
        // This will force it to be treated as an inner join if it is the second joined data source.
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);

        // minimize data returned from the query by specifying selection fields for only the required columns
        qbdsCustTable.addSelectionField(fieldNum(CustTable, Party));

        qbrPartyId = qbdsCustTable.addRange(fieldNum(CustTable, Party));

        // SpecTransMarked is only used for filtering marked records
        this.setSpecTransDS(false);

        if (!isFlightEnabled(CustOpenTransFormReenableObsoletePdsDatasourceFlight))
        {
            this.deactivatePdsCustTrandOpenDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivatePdsCustTrandOpenDataSource</Name>
				<Source><![CDATA[
    private void deactivatePdsCustTrandOpenDataSource()
    {
        QueryBuildDataSource pdsCustTransOpenDS = custTransOpen_ds.query().dataSourceName(identifierStr(pdsCustTransOpen_DateRanged));

        if (pdsCustTransOpenDS != null)
        {
            pdsCustTransOpenDS.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignDynamic</Name>
				<Source><![CDATA[
    public void updateDesignDynamic()
    {
        LedgerJournalTrans ledgerJournalTrans;
        NoYes cashDiscOnInvoice;

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = originator;
        }

        this.updateDesignDynamicTabularFieldLabels();

        // Settlement posting date control
        if (settlePostingDate.visible() == true && manager.parmSettlePostingType() == SettleDatePrinc::SelectDate)
        {
            settlePostingDate.enabled(true);
        }
        else
        {
            settlePostingDate.enabled(false);
        }

        // Date to use for calculating discount control
        if (dateUsedToCalcDisc.visible() == true)
        {
            if (SpecTrans::existMarkedPayment(originator.company(), originator.TableId, originator.RecId) == true)
            {
                // Disable when primary payment is selected
                dateUsedToCalcDisc.enabled(false);
                dateTypeUsedToCalcDisc.enabled(false);
            }
            else if (manager.parmDateTypeUsedToCalcDisc() == CashDiscUsedToCalcDisc::SelectedDate)
            {
                dateUsedToCalcDisc.enabled(true);
                dateTypeUsedToCalcDisc.enabled(true);
            }
            else if (manager.parmDateTypeUsedToCalcDisc() == CashDiscUsedToCalcDisc::TransactionDate)
            {
                dateUsedToCalcDisc.enabled(false);
                dateTypeUsedToCalcDisc.enabled(true);
            }
        }
        else
        {
            dateUsedToCalcDisc.enabled(false);
            dateTypeUsedToCalcDisc.enabled(false);
        }

        // Cross rate control - Overview grid
        if (settleExchRate.visible() == true &&
            originator.TableId == tableNum(LedgerJournalTrans)  ||
            (originator.TableId != tableNum(LedgerJournalTrans) &&
            SpecTrans::existMarkedPayment(originator.company(), originator.TableId, originator.RecId)== true))
        {
            settleExchRate.enabled(true);
        }
        else
        {
            settleExchRate.enabled(false);
        }

        // Transaction reorganization button
        if (manager.canReorganizeTrans(custTrans) == true)
        {
            custVendTransReorgButton.enabled(true);
        }
        else
        {
            custVendTransReorgButton.enabled(false);
        }

        // Enable or disable based on transaction being marked
        if (manager.getTransMarked(custTransOpen) == NoYes::Yes)
        {
            settleField.allowEdit(true);
            settlePaymCur.allowEdit(true);

            if (this.shouldEnableCrossRate(ledgerJournalTrans))
            {
                settleExchRate.allowEdit(true);
            }
            else
            {
                settleExchRate.allowEdit(false);
            }
        }
        else
        {
            settleField.allowEdit(false);
            settlePaymCur.allowEdit(false);
            settleExchRate.allowEdit(false);
        }

        if (custTransOpen.RecId != 0)
        {
            // Enable editing of the cash discount data source if there is an open record
            custTransCashDisc_ds.allowEdit(true);

            // TaxParameters need to come from the company of the current open transaction
            changecompany(custTransOpen.company())
            {
                cashDiscOnInvoice = TaxParameters::find().CashDiscOnInvoice;
            }

            if (cashDiscOnInvoice)
            {
                // Disable Cash discount group on Overview tab
                cashDiscGroup.enabled(false);

                // Disable Cash discount tab
                cashDiscTabPage.enabled(false);
                // Restrict editing of the Use cash disc field
                CustTransOpen_UseCashDisc.allowEdit(false);
            }
            else
            {
                // Enable Cash discount group on Overview tab
                cashDiscGroup.enabled(true);

                // Enable Cash discount tab
                cashDiscTabPage.enabled(true);
                // Allow editing of the Use cash disc field
                CustTransOpen_UseCashDisc.allowEdit(true);
            }
        }
        else
        {
            // There is no open transaction record, disable the cash discount data source editing
            custTransCashDisc_ds.allowEdit(false);
        }

        boolean cfmPaymentRequestsEnabled = CFMParameters::isPaymentRequestsEnabled();
        boolean allowEditCFMPaymentRequestFields = true;

        if (custTrans.RecId != 0)
        {
            // Editing of CompanyBankAccountId field of CustTrans data source
            if (custTrans.allowEditCompanyBankAccountId() == true)
            {
                custTrans_ds.object(fieldNum(CustTrans, CompanyBankAccountId)).allowEdit(true);
            }
            else
            {
                custTrans_ds.object(fieldNum(CustTrans, CompanyBankAccountId)).allowEdit(false);
            }

            if (cfmPaymentRequestsEnabled)
            {
                allowEditCFMPaymentRequestFields = !CFMPaymentRequestTable::existByHeader(CFMPaymentRequestSourceType::CustInvoice, custTrans.RecId);

                custTrans_ds.object(fieldNum(CustTrans, CompanyBankAccountId)).allowEdit(allowEditCFMPaymentRequestFields);
                custTrans_ds.object(fieldNum(CustTrans, ThirdPartyBankAccountId)).allowEdit(custTrans.allowEditThirdPartyBankAccountId() && allowEditCFMPaymentRequestFields);
            }
			else
            {
                // Editing of ThirdPartyBankAccountId field of CustTrans data source
                if (custTrans.allowEditThirdPartyBankAccountId() == true)
                {
                    custTrans_ds.object(fieldNum(CustTrans, ThirdPartyBankAccountId)).allowEdit(true);
                }
                else
                {
                    custTrans_ds.object(fieldNum(CustTrans, ThirdPartyBankAccountId)).allowEdit(false);
                }
            }
        }

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
            {
                if (ledgerJournalTrans.TaxWithholdGroup != '' &&
                    custTrans.Invoice != '' &&
                    manager.getTransMarked(custTransOpen) == NoYes::Yes)
                {
                    // Allow creates, edits, and deletions on the tax withhold trans datasource
                    taxWithholdTrans_ds.allowCreate(true);
                    taxWithholdTrans_ds.allowEdit(true);
                    taxWithholdTrans_ds.allowDelete(true);
                }
                else
                {
                    // Disallow creates, edits, and deletions on the tax withhold trans datasource
                    taxWithholdTrans_ds.allowCreate(false);
                    taxWithholdTrans_ds.allowEdit(false);
                    taxWithholdTrans_ds.allowDelete(false);
                }
            }
        }

        // Editing of PaymMode field of CustTrans data source
        if (cfmPaymentRequestsEnabled)
        {
            custTrans_ds.object(fieldNum(CustTrans, PaymMode)).allowEdit(custTransDetails != null && allowEditCFMPaymentRequestFields);
            custTrans_ds.object(fieldNum(CustTrans, PaymSpec)).allowEdit(allowEditCFMPaymentRequestFields);
            custTransOpen_ds.object(fieldNum(CustTransOpen, DueDate)).allowEdit(allowEditCFMPaymentRequestFields);
        }
		else
        {
            if (custTransDetails != null)
            {
                custTrans_ds.object(fieldNum(CustTrans, PaymMode)).allowEdit(true);
            }
            else
            {
                custTrans_ds.object(fieldNum(CustTrans, PaymMode)).allowEdit(false);
            }
        }
        // Editing of cash discount amount to take, is only editable when line is marked and date to use for calculating
        // discount is selected date and use cash discount is always
        // or when use cash discount is normal and partial discounts are allowed
        if ((manager.getTransMarked(custTransOpen) == NoYes::Yes)
            && (manager.parmDateTypeUsedToCalcDisc() == CashDiscUsedToCalcDisc::SelectedDate)
            && ((custTransOpen.UseCashDisc == UseCashDisc::Always)
                || (custTransOpen.UseCashDisc == UseCashDisc::Normal
                    && CustParameters::find().CashDiscForPartialPaym == true)))
        {
            // Enable Disc to take fields
            cashDiscToTake.allowEdit(true);

            if (cashDiscToTakePaymCur.visible() == true)
            {
                cashDiscToTakePaymCur.allowEdit(true);
            }
        }
        else
        {
            cashDiscToTake.allowEdit(false);

            if (cashDiscToTakePaymCur.visible() == true)
            {
                cashDiscToTakePaymCur.allowEdit(false);
            }
        }

        if (manager.getSpecTransCount() > 1)
        {
            updateNow.enabled(true);
        }
        else
        {
            updateNow.enabled(false);
        }

        CustDirectDebitMandate::defaultAndDisplayMandate(
            custTrans.AccountNum,
            custTrans.PaymMode,
            custTrans.DirectDebitMandate,
            false,
            custTrans_ds,
            fieldNum(CustTrans, DirectDebitMandate));

        settlementWriteOffUIController.updateSettleRemainderControl(SettleRemainder, manager);

        if (UnmarkInUseByButton.isVisible()
            && manager.getTransMarkedByOtherSpec(custTransOpen)
            && SpecTrans::findByRef(custTransOpen.company(), CustTransOpen.TableId, CustTransOpen.RecId).SpecTableId == tableNum(SpecContext))
        {
            UnmarkInUseByButton.enabled(true);
        }
        else
        {
            UnmarkInUseByButton.enabled(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableCrossRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cross rate need to be enable.
    /// </summary>
    /// <returns>
    /// true if the cross rate need to be enable; otherwise, false
    /// </returns>
    /// <remarks>
    /// If the currency code for invoice and payment code should be different, the cross rate for invoice is enable.
    /// </remarks>
    protected boolean shouldEnableCrossRate(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean shouldEnableCrossRate = false;
        boolean shouldEnableCrossRateForAccountingCurrencyPayment = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoMX]);
        boolean custVendSettleEnableCrossRateFlightEnabled = CustVendSettleEnableCrossRateFlight::instance().isEnabled();
        CurrencyCode accountingCurrencyCode = Ledger::accountingCurrency();

        if (_ledgerJournalTrans
            && originator.TableId == tableNum(LedgerJournalTrans)
            && CustTrans.CurrencyCode != _ledgerJournalTrans.CurrencyCode)
        {
            if (custVendSettleEnableCrossRateFlightEnabled
                || (CustTrans.CurrencyCode != accountingCurrencyCode
                    && (_ledgerJournalTrans.CurrencyCode != accountingCurrencyCode
                        || shouldEnableCrossRateForAccountingCurrencyPayment)))
            {
                shouldEnableCrossRate = true;
            }
        }
        else
        {
            SpecTrans refSpecTrans = SpecTrans::findByRef(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId);
            if (originator.TableId != tableNum(LedgerJournalTrans)
                && refSpecTrans.Payment == NoYes::No)
            {
                CurrencyCode markedPaymentCurrencyCode = SpecTrans::getMarkedPaymentCurrency(originator.company(), originator.TableId, originator.RecId);
                CurrencyCode currentCurrencyCode = custTrans.CurrencyCode;
   
                if ((accountingCurrencyCode != markedPaymentCurrencyCode
                        || shouldEnableCrossRateForAccountingCurrencyPayment)
                    && markedPaymentCurrencyCode != currentCurrencyCode
                    && currentCurrencyCode != accountingCurrencyCode)
                {
                    shouldEnableCrossRate = true;
                }
            }
        }

        return shouldEnableCrossRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignDynamicTabularFieldLabels</Name>
				<Source><![CDATA[
    private void updateDesignDynamicTabularFieldLabels()
    {
        CurrencyCode transactionCurrency = manager.getCustVendTransOpenCurrency(custTransOpen);
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();
        str transactionCurrencyText = strFmt("@CashManagement:TransactionCurrency", transactionCurrency);
        str accountingCurrencyText = strFmt("@CashManagement:AccountingCurrency", accountingCurrency);

        cashDiscTransCurLabel.text(transactionCurrencyText);
        balanceMstLabel.text(accountingCurrencyText);

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            CurrencyCode paymentCurrency = manager.getDisplayCurrency();
            str paymentCurrencyText = strFmt("@CashManagement:PaymentCurrency", paymentCurrency);
            str settlePaymCurLabel = strFmt("@SYS114017", paymentCurrency);

            cashDiscPaymCurLabel.text(paymentCurrencyText);
            balanceCurLabel.text(paymentCurrencyText);
            settlePaymCur.label(settlePaymCurLabel);
        }
        else
        {
            CurrencyCode customerCurrency = manager.getDisplayCurrency();
            str customerCurrencyText = strFmt("@CashManagement:CustomerCurrency", customerCurrency);

            balanceCurLabel.text(customerCurrencyText);
        }

        if (BrazilParameters::isEnabled())
        {
            CurrencyCode displayCurrencyForLabels = manager.getDisplayCurrency();

            interestAndFine_InterestAmountPaymCur_BR.label(strFmt("@SYS53547", displayCurrencyForLabels));
            interestAndFine_FineAmountPaymCur_BR.label(strFmt("@GLS50821", displayCurrencyForLabels));
            this.updateDesignInterestFine_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignInterestFine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design related to brazilian interest and fine feature.
    /// </summary>
    public void updateDesignInterestFine_BR()
    {
        TransDate           transDate;

        transDate = element.getTransDate_BR();

        if (custTransOpen.DueDate < transDate)
        {
            custTransOpen_DS.object(fieldNum(CustTransOpen, FineAmount_BR)).enabled(true);
            custTransOpen_DS.object(fieldNum(CustTransOpen, InterestAmount_BR)).enabled(true);
        }
        else
        {
            custTransOpen_DS.object(fieldNum(CustTransOpen, FineAmount_BR)).enabled(false);
            custTransOpen_DS.object(fieldNum(CustTransOpen, InterestAmount_BR)).enabled(false);
        }

        if (custTransOpen.AmountCur < 0)
        {
            custTransOpen_DS.object(fieldNum(CustTransOpen, FineCode_BR)).enabled(false);
            custTransOpen_DS.object(fieldNum(CustTransOpen, InterestCode_BR)).enabled(false);
        }
        else
        {
            custTransOpen_DS.object(fieldNum(CustTransOpen, FineCode_BR)).enabled(true);
            custTransOpen_DS.object(fieldNum(CustTransOpen, InterestCode_BR)).enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignStatic</Name>
				<Source><![CDATA[
    public void updateDesignStatic()
    {
        switch (originator.TableId)
        {
            case tableNum(LedgerJournalTrans):
                // Show Transferred balances controls
                showtransferredAmount.visible(true);
                showTransferredAmountCur.visible(true);
                TransferredAmountLabel.visible(true);

                // Hide Settlement posting date group
                settlePostingTypeDate.visible(countryRegion_RU);

                // Hide Date to use to calc discount group
                dateUsedToCalcDiscGroup.visible(false);

                // Hide Payment marked control
                paymentSpec.visible(false);

                // Show Cross rate control
                settleExchRate.visible(true);

                // Show Amount to settle in CUR control
                settlePaymCur.visible(true);

                // Show Discount amount in CUR control
                CashDiscPaymCur.visible(true);

                // Show Alternate cash discount account control
                CustTransOpen_CashDiscAccount.visible(true);

                queryButton.visible(true);

                // Hide Mark payment button
                markPayment.visible(false);

                this.setCloseMode(SaveMode);

                // Show or hide fields based on journal type
                if (ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest ||
                    ledgerJournalType == LedgerJournalType::CustPaymRemittance ||
                    ledgerJournalType == LedgerJournalType::CustBillOfExchangeSettle)
                {
                    // Show Bill of exchange group
                    billOfExchange_Overview.visible(true);

                    // Hide Transaction reorganization button
                    custVendTransReorgButton.visible(false);
                }
                else if (ledgerJournalType == LedgerJournalType::CustBillOfExchangeRedraw)
                {
                    // Show Bill of exchange group
                    billOfExchange_Overview.visible(true);

                    // Show Transaction reorganization button
                    custVendTransReorgButton.visible(true);
                }
                else
                {
                    // Hide Bill of exchange group
                    billOfExchange_Overview.visible(false);

                    // Show Transaction reorganization button
                    custVendTransReorgButton.visible(true);
                }

                if (ledgerJournalType == LedgerJournalType::Daily ||
                    ledgerJournalType == LedgerJournalType::CustPayment)
                {
                    // Show Full settlement control
                    fullSettlement.visible(true);

                    if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
                    {
                        // Show Tax withhold tab
                        taxWithholdTab.visible(true);
                    }
                }
                else
                {
                    // Hide Full settlement control
                    fullSettlement.visible(false);

                    if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
                    {
                        // Hide Tax withhold tab
                        taxWithholdTab.visible(false);
                    }
                }

                break;

            case tableNum(CustTable):
                // Hide Transferred balances controls
                showtransferredAmount.visible(false);
                showTransferredAmountCur.visible(false);
                TransferredAmountLabel.visible(false);

                // Show Settlement posting date group
                settlePostingTypeDate.visible(true);

                // Show Date to use to calc discount group
                dateUsedToCalcDiscGroup.visible(true);

                // Show Payment marked control
                paymentSpec.visible(true);

                // Hide BOE group
                billOfExchange_Overview.visible(false);

                // Show Cross rate control
                settleExchRate.visible(true);

                // Hide Amount to settle in CUR control
                settlePaymCur.visible(false);

                // Hide Discount amount in CUR control
                CashDiscPaymCur.visible(false);

                // Show Alternate cash discount account control
                CustTransOpen_CashDiscAccount.visible(true);

                // Show Transaction reorganization button
                custVendTransReorgButton.visible(true);

                queryButton.visible(true);

                // Show Unmark in use by button
                if (CustTransSettleTransactionFeature::isEnabled())
                {
                    UnmarkInUseByButton.visible(true);
                }

                // Show Mark payment button
                markPayment.visible(true);

                this.setCloseMode(PostMode);

                if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
                {
                    // Hide Tax withhold tab
                    taxWithholdTab.visible(false);
                }

                break;

            case tableNum(CustInvoiceJour):
                this.updateDesignStaticForCustInvoiceJour();
                break;

            case tableNum(SalesTable):
                this.updateDesignStaticForSalesTable();
                break;

            case tableNum(CustInvoiceTable):
                // Hide Transferred balances controls
                showtransferredAmount.visible(false);
                showTransferredAmountCur.visible(false);
                TransferredAmountLabel.visible(false);

                // Hide Settlement posting date group
                settlePostingTypeDate.visible(false);

                // Show Date to use for cash discount group
                dateUsedToCalcDiscGroup.visible(true);

                // Hide Payment marked control
                paymentSpec.visible(false);

                // Hide Full settlement control
                fullSettlement.visible(false);

                // Hide BOE group
                billOfExchange_Overview.visible(false);

                // Hide Cross rate control
                settleExchRate.visible(false);

                // Hide Amount to settle in CUR control
                settlePaymCur.visible(false);

                // Hide Discount amount in CUR control
                CashDiscPaymCur.visible(false);

                // Hide Alternate cash discount account control
                CustTransOpen_CashDiscAccount.visible(false);

                // Hide Transaction reorganization button
                custVendTransReorgButton.visible(false);

                queryButton.visible(true);

                // Show Unmark in use by button
                if (CustTransSettleTransactionFeature::isEnabled())
                {
                    UnmarkInUseByButton.visible(true);
                }

                // Hide Mark payment button
                markPayment.visible(false);

                this.setCloseMode(SaveMode);

                filterBySalesOrder_CZ.text("@GLS111741");
                break;

            default:
                Debug::assert(false);
                break;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            element.updateDesignConsInvoice_JP();
        }

        // <GCN>
        // Update design for golden tax integration.
        if (CustParameters::find().TaxIntegrationSystem_CN)
        {
            displayTaxExternalInvoiceId_CN.visible(true);
        }
        // <GCN>

        if (countryRegion_RU)
        {
            billOfExchange_Overview.visible(! countryRegion_RU);

            balances_W.visible(true);
            if (balances_W.visible())
            {
                custTransDetails.initBalanceList_RU(balanceList);
            }
        }

        CustSpecTransOverview.text("@CashManagement:CustVendSpecTransOverviewSettlementLocation");
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignStaticForCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the design for the customer invoice journal.
    /// </summary>
    protected void updateDesignStaticForCustInvoiceJour()
    {
        this.updateDesignStaticForCustInvoiceJourAndSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignStaticForSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the design for the sales table.
    /// </summary>
    protected void updateDesignStaticForSalesTable()
    {
        this.updateDesignStaticForCustInvoiceJourAndSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignStaticForCustInvoiceJourAndSalesTable</Name>
				<Source><![CDATA[
    private void updateDesignStaticForCustInvoiceJourAndSalesTable()
    {
        // Hide Transferred balances controls
        showtransferredAmount.visible(false);
        showTransferredAmountCur.visible(false);
        TransferredAmountLabel.visible(false);

        // Hide Settlement posting date group
        settlePostingTypeDate.visible(false);

        // Show Date to use for cash discount group
        dateUsedToCalcDiscGroup.visible(true);

        // Hide Payment marked control
        paymentSpec.visible(false);

        // Hide Full settlement control
        fullSettlement.visible(false);

        // Hide BOE group
        billOfExchange_Overview.visible(false);

        // Hide Cross rate control
        settleExchRate.visible(false);

        // Hide Amount to settle in CUR control
        settlePaymCur.visible(false);

        // Hide Discount amount in CUR control
        CashDiscPaymCur.visible(false);

        // Hide Alternate cash discount account control
        CustTransOpen_CashDiscAccount.visible(false);

        // Hide Transaction reorganization button
        custVendTransReorgButton.visible(false);

        queryButton.visible(true);

        // Show Unmark in use by button
        if (CustTransSettleTransactionFeature::isEnabled())
        {
            UnmarkInUseByButton.visible(true);
        }

        // Hide Mark payment button
        markPayment.visible(false);

        this.setCloseMode(SaveMode);

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
        {
            // Hide Tax withhold tab
            taxWithholdTab.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCloseMode</Name>
				<Source><![CDATA[
    private void setCloseMode(int _formCloseMode)
    {
        formCloseMode = _formCloseMode;

        switch (formCloseMode)
        {
            case PostMode:
                Save.visible(false);
                updateNow.visible(true);
                Cancel.visible(true);
                break;

            case SaveMode:
                Save.visible(true);
                updateNow.visible(false);
                Cancel.visible(false);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkTransactionsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the access of <c>MarkTransactionsButton</c> button based on some particular selections on the form.
    /// </summary>
    void updateMarkTransactionsButton()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        CustTransOpen           primaryPayment;

        if (CustParameters::findByCompany(loggedinCompany).UseSettlementPriority == NoYes::No)
        {
            markTransactionsButton.visible(false);
            return;
        }

        switch (originator.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = originator;

                if ((ledgerJournalType == LedgerJournalType::CustPayment)
                    || (ledgerJournalType == LedgerJournalType::Daily && ledgerJournalTrans.AccountType == LedgerJournalACType::Cust))
                {
                    markTransactionsButton.visible(true);

                    if (ledgerJournalTrans.AmountCurCredit != 0)
                    {
                        markTransactionsButton.enabled(true);
                    }
                    else
                    {
                        markTransactionsButton.enabled(false);
                    }
                }
                else
                {
                    markTransactionsButton.visible(false);
                }
                break;

            case tableNum(CustTable):
                if (custSettlePriorityOpenTrans != null)
                {
                    primaryPayment = custSettlePriorityOpenTrans.getPrimaryPayment();

                    // Enable/Disables the 'Mark Transactions' Button based on the
                    if (primaryPayment.RecId != 0        &&
                        primaryPayment.AmountCur < 0 )
                    {
                        markTransactionsButton.enabled(true);
                    }
                    else
                    {
                        markTransactionsButton.enabled(false);
                    }
                }
                break;

            default:
                markTransactionsButton.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWithhold_BR_TH</Name>
				<Source><![CDATA[
    public void updateTaxWithhold_BR_TH(
        CustTransOpen _custTransOpen,
        AmountCur _settleAmountCur,
        CrossExchRate _crossRate)
    {
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        TaxWithholdTrans   localTaxWithholdTrans;

        // Find the spec trans for the transaction
        specTrans = manager.getSpecTrans(_custTransOpen);

        ttsbegin;

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = originator;

            if (taxWithhold)
            {
                ttsbegin;
                delete_from localTaxWithholdTrans
                    where localTaxWithholdTrans.SpecTransId == specTrans.RecId;
                ttscommit;

                if (BrazilParameters::isEnabled())
                {
                    taxWithhold.createTaxWithholdTrans(
                        custTrans,
                        manager.getSpecTrans(_custTransOpen),
                        manager.getSettleAmount(_custTransOpen) + manager.getCashDiscAmountToTake(_custTransOpen),
                        manager.getSpecTrans(_custTransOpen).CrossRate);
                }
                else
                {
                    taxWithhold.createTaxWithholdTrans_TH(
                        manager.getSpecTrans(_custTransOpen),
                        manager.getSpecTrans(_custTransOpen).CrossRate);
                }
            }
        }

        ttscommit;

        taxWithholdTrans_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkedTotals</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void updateMarkedTotals()
    {
        markedTotalMst = manager.getMarkedTotalMst();
        cashDiscTotalMst = manager.getCashDiscTotalMst();
        markedTotalCur = manager.getMarkedTotalDisplayCur();
        cashDiscTotalCur = manager.getCashDiscTotalDisplayCur();
        custBalanceMst = manager.getCustVendBalanceMst();
        journalTransAmountDisplayCur = manager.getJournalTransAmountDisplayCur();
        journalTransAmountMst = manager.getJournalTransAmountMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscValues</Name>
				<Source><![CDATA[
    private void updateCashDiscValues(CustTransOpen _custTransOpen)
    {
        cashDiscAmount = manager.getCashDiscAmount(_custTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close(boolean _refreshCaller = true)
    {
        super();

        if (_refreshCaller)
        {
            this.refreshCaller();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        switch (formCloseMode)
        {
            case PostMode:
                manager.resetMarkedTrans();
                break;

            case SaveMode:
                this.closeOk();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        // If transactions were marked, write back to originating record if needed
        manager.updateOriginatorForMarkedTrans();

        // update all SpecTrans records with date used to calculate discount
        manager.updateSpecTransWithSelectedDate();

        super();

        this.performCallBackForClose();

        TaxWithhold::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForNewSettlementAmount</Name>
				<Source><![CDATA[
    public void updateForNewSettlementAmount(AmountCur _totalSettledAmount)
    {
        CustTransOpen_DS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh calling form after performing the settlement operation.
    /// </summary>
    public void refreshCaller()
    {
        IFormRefreshable caller = element.args().caller() as IFormRefreshable;

        if (caller != null)
        {
            caller.callerRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();

        if (custTransOriginator)
        {
            if (CustOpenTransPositionRecordReplacementFlight::instance().isEnabled())
            {
                element.args().lookupRecord(CustTrans::find(custTransOriginator.RecId));
            }
            else
            {
                custTrans_DS.positionToRecordByValue(fieldnum(CustTrans,RecId), int642Str(custTransOriginator.RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetMarkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can the current transaction be marked for settlement.
    /// </summary>
    /// <param name = "_custTransOpen">The current <c>CustTransOpen</c> record.</param>
    /// <param name = "_markTrans">Identifies if the item is being marked or unmarked.</param>
    /// <returns>true if the record can be marked; otherwise false.</returns>
    protected boolean canSetMarkTrans(CustTransOpen _custTransOpen, NoYes _markTrans)
    {
        boolean ret;

        if (!custInterestWriteOffUnPostedJournal.RecId
            || _markTrans == NoYes::Yes
            || Box::yesNo(strfmt("@SYS76498", "@SYS328999", "@SYS73804"), DialogButton::No) == DialogButton::Yes)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionSettlementState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current transaction for settlement.
    /// </summary>
    /// <param name = "_custTransOpen">
    ///     The current <c>CustTransOpen</c> record.
    /// </param>
    /// <param name = "_markTrans">
    ///     Identifies if the item is being marked or unmarked.
    /// </param>
    /// <returns>
    ///     true if the current transaction can be marked for settlement; otherwise, false.
    /// </returns>
    protected boolean updateTransactionSettlementState(CustTransOpen _custTransOpen, NoYes _markTrans)
    {
        #ISOCountryRegionCodes
        LedgerJournalTrans  ledgerJournalTrans;
        CustTrans invoiceTransaction;

        if (element.canSetMarkTrans(_custTransOpen, _markTrans))
        {
            // Validate if the line is duty drawback transaction line.
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                if (_markTrans
                            && EximParameters_IN::checkDBKParameters()
                            && EximDBKTrans_IN::existCustTransaction(_custTransOpen)
                            && Box::yesNo("@GLS62031"
                                        , DialogButton::No) == DialogButton::No)
                {
                    return NoYes::No;
                }
            }
            manager.updateTransMarked(_custTransOpen, _markTrans);

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                manager.updateTransMarkedAdjustJournals_IN(_custTransOpen, _markTrans);
            }

            if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
                        && _markTrans == NoYes::Yes
                        && originator.TableId == tableNum(LedgerJournalTrans)
                        && taxWithhold != null)
            {
                taxWithhold.createTaxWithholdTrans_TH(
                            manager.getSpecTrans(_custTransOpen),
                            manager.getSpecTrans(_custTransOpen).CrossRate);
            }

            if (BrazilParameters::isEnabled())
            {
                if(originator.TableId == tableNum(LedgerJournalTrans))
                {
                    ledgerJournalTrans = originator;

                    if (_markTrans == NoYes::Yes)
                    {
                        // Calculating Interest and Fine amounts
                        manager.calcAndUpdateFine_BR(_custTransOpen.company(),
                                                                 _custTransOpen,
                                                                 ledgerJournalTrans.TransDate);
                        manager.calcAndUpdateInterest_BR(_custTransOpen.company(),
                                                                     _custTransOpen,
                                                                     ledgerJournalTrans.TransDate);
                    }
                    else
                    {
                        // Reseting the Interest and Fine amounts
                        manager.calcAndUpdateFine_BR(_custTransOpen.company(),
                                                                 _custTransOpen,
                                                                 dateNull());
                        manager.calcAndUpdateInterest_BR(_custTransOpen.company(),
                                                                     _custTransOpen,
                                                                     dateNull());
                    }
                    _custTransOpen.update();
                }
            }

            if (BrazilParameters::isEnabled()
                        && _markTrans == NoYes::Yes
                        && originator.TableId == tableNum(LedgerJournalTrans)
                        && taxWithhold != null)
            {
                taxWithhold.createTaxWithholdTrans(
                            custTrans,
                            manager.getSpecTrans(_custTransOpen),
                            manager.getSettleAmount(_custTransOpen, false) + manager.getCashDiscAmountToTake(_custTransOpen),
                            manager.getSpecTrans(_custTransOpen).CrossRate);
            }

            element.updateDesignDynamic();

            if (_markTrans == NoYes::Yes && ledgerJournalType == LedgerJournalType::CustPayment)
            {
                ledgerJournalTrans = originator;
                invoiceTransaction = _custTransOpen.custTrans();

                CustDirectDebitMandate::validateSettlement(
                            _custTransOpen.AccountNum,
                            ledgerJournalTrans.company(),
                            ledgerJournalTrans.PaymMode,
                            invoiceTransaction);
            }

            if (TaxWithholdingGlobalFeature::isItemWHTSupportedInCountryRegionOrParamEnabled())
            {
                taxWithholdTrans_ds.executeQuery();
            }

            // Enable/Disable 'Mark transactions' button
            element.updateMarkTransactionsButton();

            markInvoiceLines.enabled(CustOpenTransLineManager::setMarkInvoiceButton(element.makeArgs()));

            custInterestWriteOffUnPostedJournal.reread();

            if (element.checkBillingClassification())
            {
                element.markWithBillingClassification(_custTransOpen);
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the billing classification is enabled.
    /// </summary>
    /// <returns>
    /// true if the billing classification is enabled; otherwise, false.
    /// </returns>
    protected boolean checkBillingClassification()
    {
        boolean ret;

        if (CustParameters::isBillingClassificationEnabled())
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterGridBySpecTransMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters records by the existence of a matching <c>SpecTrans</c> record.
    /// </summary>
    /// <param name = "_joinMode">The join mode for the <c>SpecTrans</c> datasource.</param>
    protected void filterGridBySpecTransMarked(JoinMode _joinMode)
    {
        QueryBuildDataSource specTransQBDS = SpecTransMarked_ds.queryBuildDataSource();

        SpecTransManager::filterDataSourceBySpecTransMarked(specTransQBDS, _joinMode, originator);

        if (_joinMode == JoinMode::InnerJoin)
        {
            this.setSpecTransDS(true);
        }
        else
        {
            this.setSpecTransDS(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpecTransDS</Name>
				<Source><![CDATA[
    private void setSpecTransDS(boolean _enabled)
    {
        QueryBuildDataSource specTransQBDS = SpecTransMarked_ds.queryBuildDataSource();

        if (specTransQBDS)
        {
            specTransQBDS.enabled(_enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementWriteOffPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes marked transactions for posting.
    /// </summary>
    public void settlementWriteOffPost()
    {
        this.doSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementWriteOffOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the originating context for settlement write off.
    /// </summary>
    /// <returns>The origin for write off.</returns>
    public SettlementWriteOffOrigin getSettlementWriteOffOrigin()
    {
        SettlementWriteOffOrigin origin;

        if (originator.TableId == tableNum(LedgerJournalTrans))
        {
            origin = SettlementWriteOffOrigin::PaymentJournal;
        }
        else if (originator.TableId == tableNum(CustTable))
        {
            origin = SettlementWriteOffOrigin::Account;
        }

        return origin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the originating table record for settlement write off.
    /// </summary>
    /// <returns>The origin record.</returns>
    public Common getOriginator()
    {
        return originator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementWriteOffInProgress</Name>
				<Source><![CDATA[
    public void setSettlementWriteOffInProgress(boolean _isSettlementWriteOffInProgress)
    {
        settlementWriteOffUIController.parmIsSettlementWriteOffInProgress(_isSettlementWriteOffInProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZeroAmount</Name>
				<Source><![CDATA[
    private NoYes checkZeroAmount(CustTransOpen _custTransOpen, NoYes _markTrans)
    {
        if (_markTrans && _custTransOpen.AmountCur == 0)
        {
            if (_custTransOpen.isZeroAmount() && _custTransOpen.isTransClosed())
            {
                Voucher voucher = _custTransOpen.custTrans().Voucher;

                if (Box::yesNo(strFmt("@CashManagement:CustVendOpenTransZeroAmountRemoveConfirm", voucher), DialogButton::No, "", "@CashManagement:CustVendOpenTransZeroAmountRemoveBottomText") == DialogButton::Yes)
                {
                    ttsbegin;
                    _custTransOpen.delete();
                    ttscommit;

                    custTransOpen_ds.research();
                    info(strFmt("@CashManagement:CustVendOpenTransZeroAmountRemoveInfo", voucher));

                    return NoYes::No;
                }
                else
                {
                    return NoYes::No;
                }
            }
            else
            {
                throw error("@CashManagement:CustVendOpenTransZeroAmountDataError");
            }
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>CustTransOpen</Name>
				<Methods>
					<Method>
						<Name>unmarkTaxWithhold_BR</Name>
						<Source><![CDATA[
        boolean unmarkTaxWithhold_BR(CustVendTransOpen _vendTransOpen, NoYes _markTrans)
        {
            Common              currentLine;
            boolean             exceptionDuringUnselectAll;
            boolean             stopUnmarkingTax = NoYes::No;

            if (!_markTrans && taxWithhold && originator.TableId == tableNum(LedgerJournalTrans))
            {
                if (!currentlyUnmarkingAll && taxWithhold.needsToUnselectAll_BR(_vendTransOpen, originator))
                {
                    currentLine.RecId = this.cursor().RecId;
                    if (Box::yesNo("@GLS2053", DialogButton::No, "@GLS2052") == DialogButton::Yes)
                    {
                        try
                        {
                            currentlyUnmarkingAll = true;
                            this.first();
                            do
                            {
                                if (this.editMarkTrans(false, this.cursor(), NoYes::No) && TaxWithhold::hasWithhold_BR(this.cursor(), originator))
                                {
                                    this.editMarkTrans(true, this.cursor(), NoYes::No);
                                }
                            }
                            while (this.next());

                            currentlyUnmarkingAll = false;
                            this.refresh();
                        }
                        catch
                        {
                            exceptionDuringUnselectAll = true;
                        }

                        element.args().lookupRecord(currentLine);
                        this.research();

                        if (exceptionDuringUnselectAll)
                        {
                            throw Exception::Error;
                        }

                        stopUnmarkingTax = NoYes::Yes;
                    }
                }
            }

            return stopUnmarkingTax;
        }

]]></Source>
					</Method>
					<Method>
						<Name>calculateWHTWithDiscount_TH</Name>
						<Source><![CDATA[
        public void calculateWHTWithDiscount_TH(CustCashDiscAmount _origChangedDiscAmount)
        {
            if (markTrans.value()
                && custTransCashDisc.CashDiscAmount != _origChangedDiscAmount
                && originator.TableId == tableNum(LedgerJournalTrans)
                && taxWithholdTrans.RecId != 0)
            {
                element.updateTaxWithhold_BR_TH(
                    custTransOpen,
                    manager.getSettleAmount(custTransOpen) + custTransCashDisc.CashDiscAmount,
                    manager.getSpecTrans(custTransOpen).CrossRate);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
                && taxWithhold
                && manager.getTransMarked(custTransOpen) == NoYes::Yes
                && manager.getCrossRate(custTransOpen) != 0)
            {
                taxWithhold.updateAllTaxWithholdTransSpec(manager.getSpecTrans(custTransOpen));
            }

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCashDiscToTakePaymCur</Name>
						<Source><![CDATA[
        public edit AmountCur editCashDiscToTakePaymCur(boolean _set, CustTransOpen _custTransOpen, AmountCur _cashDiscToTakePaymCur)
        {
            if (_set)
            {
                manager.updateCashDiscAmountToTakePaymCur(_custTransOpen, _cashDiscToTakePaymCur);
            }

            return manager.getCashDiscAmountToTakePaymCur(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCashDiscToTake</Name>
						<Source><![CDATA[
        public edit CashDiscAmount editCashDiscToTake(boolean _set, CustTransOpen _custTransOpen, AmountCur _cashDiscToTake)
        {
            if (_set)
            {
                manager.updateCashDiscAmountToTake(_custTransOpen, _cashDiscToTake);
            }

            return manager.getCashDiscAmountToTake(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscDate</Name>
						<Source><![CDATA[
        public display CashDiscdate displayCashDiscDate(CustTransOpen _custTransOpen)
        {
            CashDiscdate returnCashDiscDate;

            returnCashDiscDate = manager.getCashDiscDate(_custTransOpen);

            return returnCashDiscDate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            element.initFromCaller();

            element.clearDynalink();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            markInvoiceLines.enabled(CustOpenTransLineManager::setMarkInvoiceButton(element.makeArgs()));
            // Get the dispute information for the transaction
            disputeHelper = CustVendDisputeHelper::construct(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId);
            element.updateDesignDynamic();

            element.updateCashDiscValues(custTransOpen);
            element.updateMarkedTotals();

            CustTransCashDisc_ds.linkActive();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTransMarkedByOtherSpec</Name>
						<Source><![CDATA[
        public display container displayTransMarkedByOtherSpec(CustTransOpen _custTransOpen)
        {
            ImageReference image;
            container imageContainer;

            if (manager.getTransMarkedByOtherSpec(_custTransOpen))
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::InUse);
                imageContainer = image.pack();
            }

            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayPrimaryPaymentMarked</Name>
						<Source><![CDATA[
        public display container displayPrimaryPaymentMarked(CustTransOpen _custTransOpen)
        {
            ImageReference image;
            container imageContainer;

            if (isPrimaryPaymentImageNeeded && manager.getMarkedPrimaryPayment(_custTransOpen))
            {
                image = ImageReference::constructForSymbol(ImageReferenceSymbol::Info);
                imageContainer = image.pack();
            }

            return imageContainer;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayTaxTransactionId_IN</Name>
						<Source><![CDATA[
        /// <summary>
        /// Display  TaxTransactionId of TaxDocumentExtension_IN
        /// </summary>
        /// <param name = "_custTransOpen">CustTransOpen</param>
        /// <returns>TaxTransactionId</returns>
        public display InvoiceId displayTaxTransactionId_IN(CustTransOpen _custTransOpen)
        {
            CustInvoiceJour                 custInvoiceJour;
            TaxDocumentRowTransaction       taxDocumentRowTransaction;
            TaxDocumentRowTransaction_IN    taxDocumentRowTransaction_IN;
            TaxDocumentExtension_IN         taxDocumentExtension_IN;

            CustTrans custTransLoc = _custTransOpen.custTrans();

            taxDocumentExtension_IN = TaxDocumentExtensionUtils::getTaxDocumentExtensionByVoucherAndDate(custTransLoc.Voucher, custTransLoc.TransDate);

            return taxDocumentExtension_IN.TaxTransactionId;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editMarkTrans</Name>
						<Source><![CDATA[
        public edit NoYes editMarkTrans(boolean _set, CustTransOpen _custTransOpen, NoYes _markTrans)
        {
            NoYes returnMarkTrans;

            markedObservableLink.observe();

            if (element.checkZeroAmount(_custTransOpen, _markTrans) == NoYes::No)
            {
                return NoYes::No;
            }

            if (_set)
            {
                if (BrazilParameters::isEnabled() && this.unmarkTaxWithhold_BR(_custTransOpen, _markTrans))
                {
                    return manager.getTransMarked(_custTransOpen);
                }

                if(!element.updateTransactionSettlementState(_custTransOpen, _markTrans))
                {
                    return NoYes::No;
                }
            }

            returnMarkTrans = manager.getTransMarked(_custTransOpen);

            return returnMarkTrans;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editFullSettlement</Name>
						<Source><![CDATA[
        public edit NoYes editFullSettlement(boolean _set, CustTransOpen _custTransOpen, NoYes _fullSettlement)
        {
            NoYes returnFullSettlement;

            markedObservableLink.observe();

            if (_set)
            {
                if (_fullSettlement && manager.getJournalTransAmountMst() == 0)
                {
                    warning("@SYS122493");
                }
                else
                {
                    manager.updateFullSettlement(_custTransOpen, _fullSettlement);
                    this.refresh();
                    element.updateMarkedTotals();
                }

                settlementWriteOffUIController.updateSettleRemainderControl(SettleRemainder, manager);
            }

            returnFullSettlement = manager.getFullSettlement(_custTransOpen);

            return returnFullSettlement;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCrossRate</Name>
						<Source><![CDATA[
        public edit CrossExchRate editCrossRate(boolean _set, CustTransOpen _custTransOpen, CrossExchRate _crossRate)
        {
            CrossExchRate returnCrossRate;

            markedObservableLink.observe();

            if (_set)
            {
                manager.updateCrossRate(_custTransOpen, _crossRate);

                if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
                    && originator.TableId == tableNum(LedgerJournalTrans)
                    && taxWithholdTrans.RecId != 0)
                {
                    element.updateTaxWithhold_BR_TH(
                        _custTransOpen,
                        manager.getSettleAmount(_custTransOpen) + custTransCashDisc.CashDiscAmount,
                        manager.getSpecTrans(_custTransOpen).CrossRate);
                }

                element.updateMarkedTotals();

                if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled() == NoYes::Yes)
                {
                    this.setCrossRateForCFDI(_custTransOpen, _crossRate);
                }

            }

            returnCrossRate = manager.getCrossRate(_custTransOpen);

            return returnCrossRate;
        }

]]></Source>
					</Method>
					<Method>
						<Name>setCrossRateForCFDI</Name>
						<Source><![CDATA[
        private void setCrossRateForCFDI(CustTransOpen _custTransOpen, CrossExchRate _crossRate)
        {
            ttsbegin;

            CustTrans custTransLoc = _custTransOpen.custTrans();
            CustTrans_W custTrans_WLoc = custTransLoc.custTrans_W();
            custTrans_WLoc.selectForUpdate(custTrans_WLoc.RecId != 0);
            custTrans_WLoc.CrossRate_MX = _crossRate * 100;
            custTrans_WLoc.write();
            custTransLoc.packCustTrans_W(custTrans_WLoc.data());

            ttscommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSettleAmountCur</Name>
						<Source><![CDATA[
        public edit AmountCur editSettleAmountCur(boolean _set, CustTransOpen _custTransOpen, AmountCur _settleAmountCur)
        {
            AmountCur returnSettleAmountCur;

            markedObservableLink.observe();

            if (_set)
            {
                manager.updateSettleAmount(_custTransOpen, _settleAmountCur);

                if (TaxWithholdingGlobalFeature::isItemWHTSupportedInCountryRegionOrParamEnabled()
                    && originator.TableId == tableNum(LedgerJournalTrans)
                    && taxWithholdTrans.RecId != 0)
                {
                    element.updateTaxWithhold_BR_TH(
                        _custTransOpen,
                        manager.getSettleAmount(_custTransOpen) + custTransCashDisc.CashDiscAmount,
                        manager.getSpecTrans(_custTransOpen).CrossRate);
                }

                custTransOpen_ds.refresh();

                element.updateMarkedTotals();
                settlementWriteOffUIController.updateSettleRemainderControl(SettleRemainder, manager);
            }

            returnSettleAmountCur = manager.getSettleAmount(_custTransOpen);

            return returnSettleAmountCur;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editSettleAmountPaymCur</Name>
						<Source><![CDATA[
        public edit AmountCur editSettleAmountPaymCur(boolean _set, CustTransOpen _custTransOpen, AmountCur _settleAmountPaymCur)
        {
            AmountCur returnSettleAmountPaymCur;

            markedObservableLink.observe();

            if (_set)
            {
                manager.updateSettleAmountPaymCur(_custTransOpen, _settleAmountPaymCur);

                if (TaxWithholdingGlobalFeature::isItemWHTSupportedInCountryRegionOrParamEnabled()
                    && originator.TableId == tableNum(LedgerJournalTrans)
                    && taxWithholdTrans.RecId != 0)
                {
                    element.updateTaxWithhold_BR_TH(
                        _custTransOpen,
                        manager.getSettleAmount(_custTransOpen) + custTransCashDisc.CashDiscAmount,
                        manager.getSpecTrans(_custTransOpen).CrossRate);
                }

                custTransOpen_ds.refresh();

                element.updateMarkedTotals();
            }

            returnSettleAmountPaymCur = manager.getSettleAmountPaymCur(_custTransOpen);

            return returnSettleAmountPaymCur;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCashDiscAmountPaymCur</Name>
						<Source><![CDATA[
        public edit AmountCur editCashDiscAmountPaymCur(boolean _set, CustTransOpen _custTransOpen, AmountCur _cashDiscAmountPaymCur)
        {
            if (_set)
            {
                manager.updateCashDiscAmountPaymCur(_custTransOpen, custTransCashDisc, _cashDiscAmountPaymCur);
                element.updateCashDiscValues(_custTransOpen);
                element.updateMarkedTotals();

                // Updating the CustTransCashDisc record via the edit method requires an executeQuery/reread to
                // get the most current data on the form
                if (!custTransCashDisc && _cashDiscAmountPaymCur != 0)
                {
                    custTransCashDisc_ds.executeQuery();
                }
                else
                {
                    custTransCashDisc_ds.reread();
                }

                // refresh the values displayed.
                custTransCashDisc_ds.refresh();

                // Updating the CustTransCashDisc record updates the CustTransOpen.
                // Need to reread to get most current data on the form.
                custTransOpen_ds.reread();
            }

            return manager.getCashDiscAmountPaymCur(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>editCashDiscAmount</Name>
						<Source><![CDATA[
        public edit CashDiscAmount editCashDiscAmount(boolean _set, CustTransOpen _custTransOpen, AmountCur _cashDiscAmount)
        {
            if (_set)
            {
                manager.updateCashDiscAmount(_custTransOpen, custTransCashDisc, _cashDiscAmount);
                element.updateCashDiscValues(_custTransOpen);
                element.updateMarkedTotals();

                // Updating the CustTransCashDisc record via the edit method requires a executeQuery/reread to
                // get the most current data on the form
                if (!custTransCashDisc && _cashDiscAmount != 0)
                {
                    custTransCashDisc_ds.executeQuery();
                }
                else
                {
                    custTransCashDisc_ds.reread();
                }

                // refresh the values displayed.
                custTransCashDisc_ds.refresh();

                // Updating the CustTransCashDisc record updates the CustTransOpen.
                // Need to reread to get most current data on the form.
                custTransOpen_ds.reread();
            }

            return manager.getCashDiscAmount(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscTaken</Name>
						<Source><![CDATA[
        public display CashDiscAmount displayCashDiscTaken(CustTransOpen _custTransOpen)
        {
            return manager.getCashDiscAmountTaken(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayCashDiscTakenPaymCur</Name>
						<Source><![CDATA[
        public display AmountCur displayCashDiscTakenPaymCur(CustTransOpen _custTransOpen)
        {
            return manager.getCashDiscAmountTakenPaymCur(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayFullSettlementCashDiscPaymCur</Name>
						<Source><![CDATA[
        public display AmountCur displayFullSettlementCashDiscPaymCur(CustTransOpen _custTransOpen)
        {
            return manager.getFullSettlementCashDiscPaymCur(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayFullSettlementCashDisc</Name>
						<Source><![CDATA[
        public display AmountCur displayFullSettlementCashDisc(CustTransOpen _custTransOpen)
        {
            return manager.getFullSettlementCashDisc(_custTransOpen);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void executeQuery()
        {
            if (DisableFirstFastOnCustOpenTransFormFlight::instance().isEnabled())
            {
                this.queryBuildDataSource().firstFast(false);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>DueDate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                TransDate           transDate;

                super();

                if (!BrazilParameters::isEnabled())
                {
                    return;
                }

                element.updateDesignInterestFine_BR();

                if (manager.getTransMarked(custTransOpen) == NoYes::Yes)
                {
                    transDate = element.getTransDate_BR();
                    if (custTransOpen.InterestCode_BR && custTransOpen.FineCode_BR)
                    {
                        if ((Box::yesNo(strFmt("@GLS1268",
                                                fieldPName(CustTransOpen, DueDate),
                                                fieldPName(CustTransOpen, InterestAmount_BR),
                                                fieldPName(CustTransOpen, FineAmount_BR)),
                                                DialogButton::No) == DialogButton::Yes))
                        {
                            manager.calcAndUpdateInterest_BR(custTransOpen.company(),
                                                         custTransOpen,
                                                         transDate);
                            manager.calcAndUpdateFine_BR(custTransOpen.company(),
                                                  custTransOpen,
                                                  transDate);
                        }
                    }
                    else
                    {
                        if (custTransOpen.InterestCode_BR)
                        {
                            if (Box::yesNo(strFmt("@GLS1009",fieldPName(CustTransOpen, DueDate),
                                            fieldPName(CustTransOpen, InterestAmount_BR)), DialogButton::No) == DialogButton::Yes)
                            {
                                manager.calcAndUpdateInterest_BR(custTransOpen.company(),
                                                             custTransOpen,
                                                             transDate);
                            }
                        }
                        else
                        {
                            if (custTransOpen.FineCode_BR)
                            {
                                if ((Box::yesNo(strFmt("@GLS1009",fieldPName(CustTransOpen, DueDate),
                                                fieldPName(CustTransOpen, FineAmount_BR)), DialogButton::No) == DialogButton::Yes))
                                {
                                    manager.calcAndUpdateFine_BR(custTransOpen.company(),
                                                          custTransOpen,
                                                          transDate);
                                }
                            }
                        }
                    }
                }
                // Update open trans record
                custTransOpen_ds.write();

                custTransOpen_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FineAmount_BR</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                manager.updateFineAmount_BR(custTransOpen.company(),
                                               custTransOpen,
                                               custTransOpen.FineAmount_BR);

                // Update open trans record
                custTransOpen_ds.write();

                custTransOpen_ds.refresh();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret && custTransOpen.FineAmount_BR < 0)
                {
                    error("@GLS1233");
                    return false;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>FineCode_BR</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                TransDate           transDate;
                LedgerJournalTrans  ledgerJournalTrans;

                super();

                if (Box::yesNo(strFmt("@GLS1009",
                    fieldPName(CustTransOpen, FineCode_BR), fieldPName(CustTransOpen, FineAmount_BR)),
                    DialogButton::No) == DialogButton::Yes)
                {
                    if (custTrans.Invoice && custTransOpen.AmountCur > 0)
                    {
                        if (originator.TableId == tableNum(LedgerJournalTrans))
                        {
                            ledgerJournalTrans  = originator;
                            transDate           = ledgerJournalTrans.TransDate;
                        }
                        else
                        {
                            transDate           =  dateNull();
                        }

                        manager.calcAndUpdateFine_BR(custTransOpen.company(),
                                              custTransOpen,
                                              transDate);

                        // Update open trans record
                        custTransOpen_ds.write();

                        custTransOpen_ds.refresh();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InterestAmount_BR</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret && custTransOpen.InterestAmount_BR < 0)
                {
                    error("@GLS931");
                    return false;
                }

                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                manager.updateInterestAmount_BR(custTransOpen.company(),
                                                custTransOpen,
                                                custTransOpen.InterestAmount_BR);

                // Update open trans record
                custTransOpen_ds.write();

                custTransOpen_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InterestCode_BR</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                TransDate           transDate;
                LedgerJournalTrans  ledgerJournalTrans;

                super();

                if (Box::yesNo(strFmt("@GLS1009",
                    fieldPName(CustTransOpen, InterestCode_BR), fieldPName(CustTransOpen, InterestAmount_BR)),
                    DialogButton::No) == DialogButton::Yes)
                {
                    if (custTrans.Invoice && custTransOpen.AmountCur > 0)
                    {
                        if (originator.TableId == tableNum(LedgerJournalTrans))
                        {
                            ledgerJournalTrans  = originator;
                            transDate           = ledgerJournalTrans.TransDate;
                        }
                        else
                        {
                            transDate           =  dateNull();
                        }
                        manager.calcAndUpdateInterest_BR(custTransOpen.company(),
                                                     custTransOpen,
                                                     transDate);

                        // Update open trans record
                        custTransOpen_ds.write();

                        custTransOpen_ds.refresh();
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>UseCashDisc</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                manager.updateUseCashDisc(custTransOpen);

                // Update open trans record
                custTransOpen_ds.write();

                CustVendTransCashDisc applicableCustVendTransCashDisc =  manager.findApplicableCustVendTransCashDisc(custTransOpen);
                custTransCashDisc_ds.positionToRecordByValue(fieldNum(CustTransCashDisc, RecId), int642Str(applicableCustVendTransCashDisc.RecId));

                custTransOpen_ds.refresh();

                if (custTransOpen.UseCashDisc == UseCashDisc::Never)
                {
                    CustTransCashDisc_CashDiscAmount1.allowEdit(false);
                    possibleCashDiscPaymCur.allowEdit(false);
                }
                else
                {
                    CustTransCashDisc_CashDiscAmount1.allowEdit(true);
                    possibleCashDiscPaymCur.allowEdit(true);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CustTrans</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            QueryBuildRange criteriaApproved = this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans, Approved));
            criteriaApproved.value(int2Str(NoYes::Yes));

            // Initialize CustTransDetails here for displaying payment, interest note & collection letter data on tabs
            custTransDetails = new CustTransDetails(custTrans);

            this.object(fieldNum(CustTrans, CustBillingClassification)).visible(CustParameters::isBillingClassificationEnabled());

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.cacheAddMethod(tableMethodStr(CustTrans, agreementId_RU));
                this.cacheAddMethod(tableMethodStr(CustTrans, agreementDocumentTitle_RU));
            }

            if (BrazilParameters::isEnabled())
            {
                this.cacheAddMethod(tableMethodStr(CustTrans, fiscalEstablishmentId_BR));
            }

            if (originator.TableId != tableNum(LedgerJournalTrans))
            {
                this.query().dataSourceTable(tableNum(CustTrans)).addRange(fieldNum(CustTrans, BillOfExchangeStatus)).value(queryValue(CustVendNegInstStatus::None));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            FormTabPageControl formControl;

            ret = super();

            // Reload the dimension defaulting controller as the company may have changed
            if (custTrans.company() != currentCompany)
            {
                currentCompany = custTrans.company();
                formControl = tabControl.getActivePage();
                DimensionEntryControl.parmCompany(currentCompany);
                DimensionEntryControl.reactivate();
                formControl.activatePage();

                // Reset the dimension controller default accounts as the company may have changed
                custTransOpen_CashDiscAccount.parmPostingType(LedgerPostingType::None);
                custTransOpen_CashDiscAccount.parmCurrentLedgerCOA(LedgerChartOfAccounts::current());
                custTransOpen_CashDiscAccount.setDataAreaId(currentCompany);
            }

            // CustTransDetails used for displaying payment, interest note & collection letter data
            custTransDetails.setCustVendTrans(custTrans);

            custTrans_ds.allowEdit(element.doesCallerAllowEdit());

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
               && balances_W.visible())
            {
                custTransDetails.createBalanceList_RU(balanceList);
            }

            custTrans_ds.reread();
            custTrans_ds.refresh();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayBankLCNumber</Name>
						<Source><![CDATA[
        public display BankLCNumber displayBankLCNumber(CustTrans _custTrans)
        {
            BankLCNumber lcNumber = manager.getBankLCNumber(_custTrans);
            
            return lcNumber;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayBankLCShipmentLineNum</Name>
						<Source><![CDATA[
        public display BankLCShipmentLineNum displayBankLCShipmentLineNum(CustTrans _custTrans)
        {
            BankLCShipmentLineNum lcShipmentLineNum = manager.getBankLCShipmentLineNum(_custTrans);

            return lcShipmentLineNum;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PaymMode</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (BrazilParameters::isEnabled())
                {
                    custTransEPRemit_BR_ds.reread();
                    custTransEPRemit_BR_ds.refresh();
                    custTransPayment_BR.paymspecModified_BR(custTrans.PaymMode, custTrans.PaymSpec);
                    custTransPayment_BR_ds.refresh();
                }

                custTrans.DirectDebitMandate = CustDirectDebitMandate::defaultAndDisplayMandate(
                    custTrans.AccountNum,
                    custTrans.PaymMode,
                    custTrans.DirectDebitMandate,
                    false,
                    custTrans_ds,
                    fieldNum(CustTrans,DirectDebitMandate));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PaymSpec</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                if (BrazilParameters::isEnabled())
                {
                    custTransEPRemit_BR_ds.reread();
                    custTransEPRemit_BR_ds.refresh();
                    custTransPayment_BR.paymspecModified_BR(custTrans.PaymMode, custTrans.PaymSpec);
                    custTransPayment_BR_ds.refresh();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CustTransCashDisc</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            boolean isTempRecord = custTransCashDisc.RecId == 0;

            super();

            manager.clearCashDiscountCaches(custTransOpen);

            if (!isTempRecord)
            {
                manager.updateAmountToSettleForMarkedTransaction(custTransOpen);
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>linkActive</Name>
						<Source><![CDATA[
        public void linkActive()
        {
            super();

            CustVendTransCashDisc applicableCustVendTransCashDisc =  manager.findApplicableCustVendTransCashDisc(custTransOpen);
            this.positionToRecordByValue(fieldNum(CustTransCashDisc, RecId), int642Str(applicableCustVendTransCashDisc.RecId));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (custTransCashDisc.CashDiscDue == CashDiscDue::CashDisc
                && custTransOpen.UseCashDisc != UseCashDisc::Never)
            {
                custTransCashDisc_ds.allowEdit(true);
                CustTransCashDisc_CashDiscAmount1.allowEdit(true);
                possibleCashDiscPaymCur.allowEdit(true);
            }
            else
            {
                custTransCashDisc_ds.allowEdit(false);
                CustTransCashDisc_CashDiscAmount1.allowEdit(false);
                possibleCashDiscPaymCur.allowEdit(false);
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
            super(_append);

            if (custTransCashDisc.RecId == 0)
            {
                // set the proper company for CP cross-company scenarios.
                custTransCashDisc.company(custTransOpen.company());
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>displaySettleAmountForCashDisc</Name>
						<Source><![CDATA[
        public display AmountCur displaySettleAmountForCashDisc(CustTransCashDisc _custTransCashDisc)
        {
            AmountCur settleAmountForCashDisc;

            settleAmountForCashDisc = manager.getSettleAmountForCashDisc(custTransOpen, _custTransCashDisc);

            return settleAmountForCashDisc;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CashDiscAmount</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean isValid;

                isValid = super();

                if (isValid)
                {
                    isValid = manager.validateCashDiscAmount(custTransOpen, custTransCashDisc.CashDiscAmount);
                }

                return isValid;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Update cash discount record before updating related records
                custTransCashDisc_ds.write();

                manager.updateCashDiscAmount(custTransOpen, custTransCashDisc);
                element.updateMarkedTotals();

                // Updating the CustTransCashDisc record updates the CustTransOpen automatically.
                // Need to reread to display most current data on the form.
                custTransOpen_ds.reread();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CashDiscdate</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Update cash discount record before updating related
                custTransCashDisc_ds.write();

                manager.updateCashDiscDate(custTransOpen, custTransCashDisc);

                custTransOpen_ds.refresh();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>TaxWithholdTrans</Name>
				<Methods>
					<Method>
						<Name>withholdOriginGross</Name>
						<Source><![CDATA[
        public display NoYes withholdOriginGross(TaxWithholdTrans _taxWithholdTrans)
        {
            TmpTaxWithhold tmpTaxWithhold;

            tmpTaxWithhold = taxWithhold.findTmpTaxWithhold(_taxWithholdTrans);
            return tmpTaxWithhold.WithholdOriginGross;
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxWithholdExclude</Name>
						<Source><![CDATA[
        public display TaxWithholdExclude taxWithholdExclude(TaxWithholdTrans _taxWithholdTrans)
        {
            TmpTaxWithhold tmpTaxWithhold;

            tmpTaxWithhold = taxWithhold.findTmpTaxWithhold(_taxWithholdTrans);
            return tmpTaxWithhold.TaxWithholdExclude;
        }

]]></Source>
					</Method>
					<Method>
						<Name>taxWithholdRoundOff</Name>
						<Source><![CDATA[
        public display TaxWithholdRoundOff taxWithholdRoundOff(TaxWithholdTrans _taxWithholdTrans)
        {
            TmpTaxWithhold tmpTaxWithhold;

            tmpTaxWithhold = taxWithhold.findTmpTaxWithhold(_taxWithholdTrans);
            return tmpTaxWithhold.TaxWithholdRoundOff;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            CustTable customer;

            super();

            customer = CustTable::findByCompany(custTrans.company(), custTrans.AccountNum);

            taxWithhold.initTaxWithholdTrans(
                taxWithholdTrans,
                custTrans,
                manager.getSpecTrans(custTransOpen),
                manager.getSettleAmount(custTransOpen),
                customer.TaxWithholdGroup_TH);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            QueryBuildRange qbrSpecTransId;
            QueryBuildRange qbrPosted;

            this.query().allowCrossCompany(true);
            this.query().clearCompanyRange();
            this.query().addCompanyRange(custTransOpen.company());

            qbrSpecTransId = this.query().dataSourceTable(tableNum(TaxWithholdTrans)).findRange(fieldNum(TaxWithholdTrans, SpecTransId));

            if (!qbrSpecTransId)
            {
                qbrSpecTransId = this.query().dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, SpecTransId));
            }

            qbrSpecTransId.value(queryValue(manager.getSpecTrans(custTransOpen).RecId));

            qbrPosted = this.query().dataSourceTable(tableNum(TaxWithholdTrans)).findRange(fieldNum(TaxWithholdTrans, Posted));

            if (!qbrPosted)
            {
                qbrPosted = this.query().dataSourceTable(tableNum(TaxWithholdTrans)).addRange(fieldNum(TaxWithholdTrans, Posted));
            }

            qbrPosted.value(queryValue(NoYes::No));

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            if (TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam())
            {
                if (taxWithholdTrans.TaxWithholdCurrency && taxWithholdTrans.PaymCurrency)
                {
                    TaxWithholdTrans_TaxWithholdExchRate.allowEdit(!(taxWithholdTrans.TaxWithholdCurrency == taxWithholdTrans.PaymCurrency));
                    TaxWithholdTrans_TaxWithholdExchRate.mandatory(TaxWithholdTrans_TaxWithholdExchRate.allowEdit());
                }
                else
                {
                    TaxWithholdTrans_TaxWithholdExchRate.allowEdit(false);
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>InvoiceAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                specTrans = manager.getSpecTrans(custTransOpen);
                taxWithhold.calcWithholdAmounts(taxWithholdTrans, specTrans.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InvoiceExemptedAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans   specTransLocal;

                super();

                specTransLocal = manager.getSpecTrans(custTransOpen);

                if (TaxWithholdExemptChange_THFlight::instance().isEnabled())
                {
                    taxWithhold.calcWithholdAmounts(
                        taxWithholdTrans,
                        specTransLocal.CrossRate,
                        false,
                        true);
                }
                else
                {
                    taxWithholdTrans.data(
                        taxWithhold.calcWithholdAmounts(
                            taxWithholdTrans,
                            specTransLocal.CrossRate,
                            false,
                            true));
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InvoiceNotTaxableByTreaty</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                specTrans = manager.getSpecTrans(custTransOpen);

                taxWithhold.calcNotTaxableByTreaty(taxWithholdTrans, specTrans.CrossRate);
                taxWithhold.calcWithholdAmounts(taxWithholdTrans, specTrans.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InvoiceNotTaxableExpenses</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans   specTransLocal;
                super();

                specTransLocal = manager.getSpecTrans(custTransOpen);
                taxWithhold.calcNotTaxableExpenses(
                    taxWithholdTrans,
                    specTransLocal.CrossRate);

                taxWithhold.calcWithholdAmounts(
                    taxWithholdTrans,
                    specTransLocal.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InvoiceTaxAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                specTrans = manager.getSpecTrans(custTransOpen);

                taxWithhold.calcWithholdAmounts(taxWithholdTrans, specTrans.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>InvoiceTaxWithholdAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                specTrans = manager.getSpecTrans(custTransOpen);

                taxWithhold.changeTaxWithholdAmount(taxWithholdTrans, specTrans.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxWithholdAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                // The InvoiceTaxWithholdTrans has been updated based on new TaxWithholdAmount after super().
                specTrans = manager.getSpecTrans(custTransOpen);
                taxWithhold.changeTaxWithholdAmount(taxWithholdTrans, specTrans.CrossRate);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TaxWithholdCode</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
                {
                    TaxWithhold::lookupTaxWithholdCodeBasedOnGroups(
                        _formControl,
                        taxWithholdTrans.TaxWithholdGroup,
                        taxWithholdTrans.TaxWithholdItemGroupHeading_TH);
                }
                else
                {
                    taxWithhold.lookupTaxWithholdCode(_formControl, taxWithholdTrans.TaxWithholdGroup);
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                SpecTrans specTrans;

                super();

                specTrans = manager.getSpecTrans(custTransOpen);

                if (BrazilParameters::isEnabled() && !taxWithholdTrans.IntersectionWithholdBaseAmount_BR)
                {
                    taxWithholdTrans.IntersectionWithholdBaseAmount_BR = TaxWithhold::getTotalInvoiceTaxWithholdBaseAmount_BR(custTrans);
                }

                taxWithhold.initFromTaxWithholdCode(taxWithholdTrans, specTrans.CrossRate);

                if (BrazilParameters::isEnabled())
                {
                    TaxWithholdTrans_ds.research(true);
                }

                if (TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam())
                {
                    if (taxWithholdTrans.TaxWithholdCurrency && taxWithholdTrans.PaymCurrency)
                    {
                        TaxWithholdTrans_TaxWithholdExchRate.allowEdit(!(taxWithholdTrans.TaxWithholdCurrency == taxWithholdTrans.PaymCurrency));
                    }
                    else
                    {
                        TaxWithholdTrans_TaxWithholdExchRate.allowEdit(false);
                    }
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>pdsCustTransOpen_DateRanged</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            if (isFlightEnabled(CustOpenTransFormReenableObsoletePdsDatasourceFlight))
            {
                custTransOpenQueryDS = custTransOpen_DS.query().dataSourceName(identifierStr(pdsCustTransOpen_DateRanged));

                //add it as a link to the parent data source
                //this is not automatic as it is applied to surrogate keys

                custTransOpenQueryDS.addLink(fieldNum(CustTransOpen, RecId), fieldNum(CustTransOpen, RecId));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (isFlightEnabled(CustOpenTransFormReenableObsoletePdsDatasourceFlight))
            {
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;

            if (isFlightEnabled(CustOpenTransFormReenableObsoletePdsDatasourceFlight))
            {
                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustTrans_IN</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // do not allow to insert new record when CustTrans is edited.
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                custTrans_IN_ds.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustTransEPRemit_BR</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (BrazilParameters::isEnabled())
            {
                custTransEPRemit_BR_ds.linkType(FormLinkType::Active);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>BankFolder</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                EPBankFolders_BR::EPBankFoldersLookup(_formControl,CustVendType_BR::Customer, custTrans.PaymMode);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>DocumentType</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                EPDocumentTypes_BR::EPDocumentTypeLookup(_formControl,CustVendType_BR::Customer, custTrans.PaymMode);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Instruction_1</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                EPInstructions_BR::EPInstructionsLookup(_formControl,CustVendType_BR::Customer, custTrans.PaymMode);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>Instruction_2</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                EPInstructions_BR::EPInstructionsLookup(_formControl,CustVendType_BR::Customer, custTrans.PaymMode);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>CustTransPayment_BR</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;

            ret = super();

            custTransPayment_BR_ds.reread();
            custTransPayment_BR_ds.refresh();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (BrazilParameters::isEnabled())
            {
                custTransPayment_BR_DS.autoQuery(true);
                custTransPayment_BR_DS.linkType(DataSourceLinkTypePropertyValues::Outer);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustTrans_W</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoIN, #isoJP]) && custTrans_W.CustTrans != 0)
            {
                // no-op because a record with an empty FK is not valid
                super();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoIN, #isoJP]))
            {
                this.linkType(FormLinkType::OuterJoin);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>SpecTransMarked</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            // The marked transaction data source should never run a validate write operation.
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // The marked transaction data source should never run a write operation.
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>CustDispute</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            if (isConfigurationKeyEnabled(configurationkeynum(Collections)))
            {
                CustDispute_ds.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            // The customer dispute should never run validate write operation.
            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            // The customer dispute should never run write operation.
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>DateUsedToCalcDisc</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateCashDiscValues(custTransOpen);
            element.updateMarkedTotals();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FilterValue_RU</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            manager.createLookupForAgreement(this, tableNum(CustTrans));
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            manager.setFilterValueForAgreement(custTransOpen_ds,
                                               tableNum(CustTrans),
                                               filterValue_RU.text());

            custTransOpen_ds.research();

            return true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            SalesAgreementHeader salesAgreementHeader;

            ret = super();

            if (ret && this.valueStr())
            {
                salesAgreementHeader = SalesAgreementHeader::findAgreementId(this.valueStr());

                if (! salesAgreementHeader || salesAgreementHeader.CustAccount != manager.getCustVendAccountNum())
                {
                    ret = false;
                }
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OverviewTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();

            CustVendTransCashDisc applicableCustVendTransCashDisc =  manager.findApplicableCustVendTransCashDisc(custTransOpen);
            custTransCashDisc_ds.positionToRecordByValue(fieldNum(CustTransCashDisc, RecId), int642Str(applicableCustVendTransCashDisc.RecId));

            element.updateCashDiscValues(custTransOpen);
            element.updateMarkedTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();

            CustSettlementPriorityProcessing custSettlementPriorityOpenTrans = CustSettlementPriorityProcessing::constructCustOpenTrans(manager, CustTransOpen_DS);
            custSettlementPriorityOpenTrans.markAllSelected(CustTransOpen_DS);

            // Raise a notification on the edit method associated with the MarkTrans checkbox control.
            markedObservableLink.markChanged();

            element.updateDesignDynamic();
            element.updateMarkedTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearAllButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CustSettlementPriorityProcessing        custSettlementPriorityOpenTrans;

            super();

            if (!custInterestWriteOffUnPostedJournal.RecId ||
                Box::yesNo(strfmt("@SYS76498", "@SYS328999", "@SYS73804"), DialogButton::No) == DialogButton::Yes)
            {
                // create the new object
                custSettlementPriorityOpenTrans = CustSettlementPriorityProcessing::constructCustOpenTrans(manager, custTransOpen_ds);
                custSettlementPriorityOpenTrans.unmarkAll();
                custTransOpen_ds.refresh();

                element.updateDesignDynamic();
                element.updateMarkTransactionsButton();

                custTransOpen_ds.executeQuery();
            }

            element.updateMarkedTotals();
            isPrimaryPaymentImageNeeded = NoYes::No;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkedOnly</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.filterGridBySpecTransMarked(JoinMode::InnerJoin);
            element.reInit();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AllTransactions</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.filterGridBySpecTransMarked(JoinMode::OuterJoin);
            element.reInit();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UnmarkInUseByButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            SpecTrans specTrans;
            select firstonly specTrans
                where specTrans.RefCompany == custTransOpen.company()
                    && specTrans.RefTableId == custTransOpen.TableId
                    && specTrans.RefRecId == custTransOpen.RecId
                    && specTrans.SpecTableId == tableNum(SpecContext);

            if (specTrans.RecId)
            {
                int64 inUseTime = DateTimeUtil::getDifference(DateTimeUtil::utcNow(), specTrans.createdDateTime);
                int64 days = inUseTime / VendInvoiceInUseTimeConstants::SecondsInDay;
                int64 hours = (inUseTime mod VendInvoiceInUseTimeConstants::SecondsInDay) / VendInvoiceInUseTimeConstants::SecondsInHour;
                int64 minutes = (inUseTime mod VendInvoiceInUseTimeConstants::SecondsInHour) / VendInvoiceInUseTimeConstants::SecondsInMinute;

                str message = strFmt("@CashManagement:UnmarkInUseByMessage", days, hours, minutes);
                if (Box::yesNo(message, DialogButton::No) == DialogButton::Yes)
                {
                    ttsbegin;
                    select firstonly forupdate specTrans
                        where specTrans.RefCompany == custTransOpen.company()
                            && specTrans.RefTableId == custTransOpen.TableId
                            && specTrans.RefRecId == custTransOpen.RecId
                            && specTrans.SpecTableId == tableNum(SpecContext);
                    specTrans.delete();
                    ttscommit;

                    manager.clearMarkedByOtherSpec(custTransOpen);
                    custTransOpen_ds.research(true);
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustVendTransReorgButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if (manager.reorganizeMarkedTrans() == true)
            {
                custTransOpen_ds.executeQuery();

                element.updateDesignDynamic();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkPayment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            if (manager.getMarkedPrimaryPayment(custTransOpen) == NoYes::Yes)
            {
                // Remove primary designation only - does not unmark transaction
                manager.updateMarkedPrimaryPayment(custTransOpen, NoYes::No);

                isPrimaryPaymentImageNeeded = NoYes::No;
            }
            else
            {
                if (SpecTrans::existMarkedPayment(originator.company(), originator.TableId, originator.RecId))
                {
                    throw error("@SYS67734");
                }

                if (custTransOpen)
                {
                    if (manager.getTransMarked(custTransOpen) == NoYes::No)
                    {
                        showError = NoYes::No;
                        manager.updateTransMarked(custTransOpen, NoYes::Yes);
                        showError = NoYes::Yes;
                    }

                    manager.updateMarkedPrimaryPayment(custTransOpen, NoYes::Yes);

                    isPrimaryPaymentImageNeeded = NoYes::Yes;
                }
            }

            custTransOpen_ds.refresh();

            // Raise a notification on the edit method associated with the MarkTrans checkbox control.
            markedObservableLink.markChanged();

            element.updateDesignDynamic();
            element.updateMarkTransactionsButton();
            element.updateMarkedTotals();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FilterBySalesOrder_CZ</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.filterBySalesOrder_CZ();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkInvoiceLines</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;

            args = new Args(formStr(CustOpenTrans));
            args.caller(element);
            args.parmObject(manager);
            args.record(custTransOpen);

            if ((originator.TableId) ==  tableNum(LedgerJournalTrans))
            {
                args.parmEnum(tableNum(LedgerJournalTrans));
            }
            else
            {
                args.parmEnum(tableNum(CustTable));
            }

            new MenuFunction(menuitemDisplayStr(CustPaymEntryByLine), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkTransactionsButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            DialogButton markTransDialogButton;

            if (custSettlePriorityOpenTrans.isAlreadyMarked())
            {
                // ask the user if he wants to unmark all transactions and do the marking again
                markTransDialogButton = Box::yesNo("@SYS135033", DialogButton::Yes);

                // if yes unmark transactions else do nothing and return
                if (markTransDialogButton == DialogButton::Yes)
                {
                    custSettlePriorityOpenTrans.unmarkAllTransactions();
                    custTransOpen_ds.executeQuery();
                }
                else
                {
                    return;
                }
            }

            if (!custSettlePriorityOpenTrans.markTransactionsByPriority(str2Date(dateUsedToCalcDisc.valueStr(), 1)))
            {
                // if no transactions is marked due to any reason, show the infolog and return
                info("@SYS135034");
                return;
            }

            custTransOpen_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MarkTrans</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            element.updateMarkedTotals();

            if (!this.value())
            {
                isPrimaryPaymentImageNeeded = NoYes::No;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Overview_CustTrans_Invoice</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args(element);
            args.record(custTrans);

            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(CustTrans), MenuItemType::Display);
            menuFunction.run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustTransCashDisc_CashDiscAmount1</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid;

            isValid = super();

            if (isValid)
            {
                isValid = manager.validateCashDiscAmount(custTransOpen, this.realValue());
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>possibleCashDiscPaymCur</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean isValid;

            isValid = super();

            if (isValid)
            {
                CashDiscAmount cashDiscAmountTransCur = manager.convertAmountPaymCurToAmountTransCur(custTransOpen, this.realValue());
                isValid = manager.validateCashDiscAmount(custTransOpen, cashDiscAmountTransCur);
            }

            return isValid;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustTransOpen_UseCashDisc</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            element.updateMarkedTotals();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CustTransOpen_DueDate1</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if (BrazilParameters::isEnabled())
            {
                custTransEPRemit_BR.RemitOccCode = EPRemitOccCode_BR::Code_03;
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DirectDebitMandate</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>lookupReference</Name>
						<Source><![CDATA[
        public Common lookupReference()
        {
            return CustDirectDebitMandate::lookupReference(
                custTrans.AccountNum,
                this);
        }

]]></Source>
					</Method>
					<Method>
						<Name>resolveReference</Name>
						<Source><![CDATA[
        public Common resolveReference()
        {
            return CustDirectDebitMandate::resolveReference(
                custTrans.AccountNum,
                this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CashDiscTabPage</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            boolean allowEdit = true;

            if (custTransOpen.RecId == 0)
            {
                allowEdit = false;
            }

            custTransCashDisc_ds.allowCreate(allowEdit);
            custTransCashDisc_ds.allowDelete(allowEdit);
            custTransCashDisc_ds.allowEdit(allowEdit);

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>TaxWithholdTrans_TaxWithholdExchRate</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            SpecTrans specTrans;
            boolean ret = super();

            if (!TaxWithholdTrans.TaxWithholdExchRate)
            {
                throw error(strfmt("@SYS84378", "@Tax_WithholdTax:TaxWithholdExchRate"));
            }
            else
            {
                specTrans = manager.getSpecTrans(custTransOpen);
                taxWithhold.changeTaxWithholdExchangeRate(taxWithholdTrans, specTrans.CrossRate);
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateNow</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            // Close the current form before processing so info messages will be displayed on the parent form.
            element.close(false);

            // determine if user wants to close when marked total is not within over/under amount
            boolean canSettle = element.canSettle();

            if (canSettle)
            {
                element.doSettlement();
            }

            element.refreshCaller();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SettleRemainder</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            super();

            Args args = new Args();
            args.caller(element);

            settlementWriteOffUIController.openSettlementWriteOffDialog(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<AllowPreLoading>No</AllowPreLoading>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>CustTransOpen</Name>
			<Table>CustTransOpen</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastInterestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PossibleCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledLinePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledTotalAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementPriorityCashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTrans</Name>
			<Table>CustTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingEvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Approved</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Approver</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankRemittanceFileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillOfExchangeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancelledPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CashPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Closed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CollectionLetter</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CollectionLetterCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CompanyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConcessionContractId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConcessionSettlementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ControlNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBillingClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DeliveryMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DocumentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>DocumentNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EUROTriangulation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ExchAdjustment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchRateSecond</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Interest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceProject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LastExchAdj</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleAccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastSettleCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LastSettleDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>LastSettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRPaymOrderID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>OffsetRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymManBatch</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymManLackDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PaymReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>PostingProfileClose</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Prepayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailCustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailStoreId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTerminalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetailTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>sequenceNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SettleAmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>SettleAmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleAmountReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Settlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>TransType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Txt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransCashDisc</Name>
			<Table>CustTransCashDisc</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CashDiscAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Manual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<AllowCheck>No</AllowCheck>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>TaxWithholdTrans</Name>
			<Table>TaxWithholdTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CanBeReversed_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CompetenceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustVendTransOpenRecId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExemptedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntersectionWithholdBaseAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Invoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceExemptedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNotTaxableByTreaty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceNotTaxableExpenses</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceTaxAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceTaxWithholdAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceWithholdBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJourTransRecId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotTaxableByTreaty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NotTaxableExpenses</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartyId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymExemptedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymNotTaxableByTreaty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymNotTaxableExpenses</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymTaxWithholdAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymVendor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymWithholdBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Posted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCustVendTransRecId_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Settled</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Source_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxExemptedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxNotTaxableByTreaty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxNotTaxableExpenses</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRepCounter_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxTaxWithholdAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxType_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdComponentGroupTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdComponentTable_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdCurrency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdIsSelected_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdPeriod_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdSlipNum_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorType_TH</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransPaymId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VoucherInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WithholdBaseAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAccumulatedBaseAmount</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<AllowCheck>No</AllowCheck>
			<Index>VoucherDateIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>pdsCustTransOpen_DateRanged</Name>
			<Table>CustTransOpen</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AmountMST</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankLCExportLine</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscountLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExchAdjUnrealizedReporting</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmount_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmountPaymCur_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastInterestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PossibleCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledLinePercent_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledTotalAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettlementPriorityCashDiscDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UseCashDisc</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<JoinSource>CustTransOpen</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>RecId</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTrans_IN</Name>
			<Table>CustTrans_IN</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransEPRemit_BR</Name>
			<Table>CustTransEPRemit_BR</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccountID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankFolder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConfLayoutGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustSettleRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTransOpenRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Instruction_1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Instruction_2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemitOccCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RetOccCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTransPayment_BR</Name>
			<Table>CustTransPayment_BR</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPPaymentType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EPPaymentWay_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FineCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterestCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoQuery>No</AutoQuery>
			<JoinSource>CustTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustTrans_W</Name>
			<Table>CustTrans_W</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdvancePayment_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectReporting_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustConsInvoice_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimensionReporting_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoicePostingType_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrepaymentFactureId_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefVoucher_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RTax25Amortisation_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxWithholdAmountOrigin_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSAmount_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSAmount_IN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>SpecTransMarked</Name>
			<Table>SpecTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Balance01</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscToTake</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CrossRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ErrorCodePayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FullSettlement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SelectedDateUsedToCalcCashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecCompany</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SpecTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTransOpen</JoinSource>
			<LinkType>OuterJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>CustDispute</Name>
			<Table>CustDispute</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AmountCur</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FollowUpDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAutomaticUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastPayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Note</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatusChangedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCurrency</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>CustTrans</JoinSource>
			<LinkType>Passive</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:SettleTransactions</Caption>
		<DialogSize xmlns="">Full</DialogSize>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">DialogTabs</Pattern>
		<PatternVersion xmlns="">1.3</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<TitleDataSource xmlns="">CustTrans</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>HeaderGroup</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>SettlePostingTypeDate</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>SettlePostingType</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editSettlePostingType</DataMethod>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>SettlePostingDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editSettlePostingDate</DataMethod>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<Caption>@SYS114020</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DateUsedToCalcDiscGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>DateTypeUsedToCalcDisc</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editDateTypeUsedToCalcDisc</DataMethod>
								<ShowLabel>No</ShowLabel>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>DateUsedToCalcDisc</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editDateUsedToCalcDisc</DataMethod>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<Caption>@CashManagement:DateUsedForCalcDisc</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>FilterByAgreementGroup</Name>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>FilterValue_RU</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<CountryRegionCodes>RU</CountryRegionCodes>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>Range</ExtendedDataType>
								<LookupButton>Always</LookupButton>
								<ReplaceOnLookup>No</ReplaceOnLookup>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4082001</Caption>
					</AxFormControl>
				</Controls>
				<Columns>2</Columns>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>TabControl</Name>
				<AlignControl>No</AlignControl>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1789569705</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>OverviewTabPage</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>GridActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>SelectionButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>SelectAllButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986912</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MultiSelect>Yes</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<Text>@CashManagement:MarkSelectedForSettlement</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ClearAllButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1932735276</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<MultiSelect>Yes</MultiSelect>
												<Text>@CashManagement:UnmarkAll</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuButtonControl">
												<Name>ShowMarked</Name>
												<Type>MenuButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>MarkedOnly</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<Text>@CashManagement:ShowMarkedOnly</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>AllTransactions</Name>
														<Type>Button</Type>
														<FormControlExtension
															i:nil="true" />
														<MultiSelect>Yes</MultiSelect>
														<Text>@CashManagement:ShowMarkedAll</Text>
													</AxFormControl>
												</Controls>
												<MultiSelect>Yes</MultiSelect>
												<Text>@CashManagement:ShowMarked</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>UnmarkInUseByButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<Enabled>No</Enabled>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<MultiSelect>No</MultiSelect>
												<Text>@CashManagement:UnmarkInUseBy</Text>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>GridButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>CustVendTransReorgButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ConfigurationKey>PaymSched</ConfigurationKey>
												<ElementPosition>644245092</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@CashManagement:ApplyPaymSchedule</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuButtonControl">
												<Name>CustConsInvoiceSettle_JP</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ConfigurationKey>LedgerBasic</ConfigurationKey>
												<CountryRegionCodes>JP</CountryRegionCodes>
												<ElementPosition>751619274</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>CustConsInvoiceSettleQuery_JP</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTransOpen</DataSource>
														<MenuItemName>CustConsInvoiceSettleQuery_JP</MenuItemName>
														<MenuItemType>Action</MenuItemType>
													</AxFormControl>
												</Controls>
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@GLS60235</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuButtonControl">
												<Name>QueryButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993456</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>LedgerTransVoucher1</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTrans</DataSource>
														<MenuItemName>LedgerTransVoucher1</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>CustSettlement</Name>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTrans</DataSource>
														<MenuItemName>CustSettlement</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>CustSpecTransOverview</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTransOpen</DataSource>
														<MenuItemName>CustSpecTransOverview</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>CustTransOpenLastUpdateCollectionLetter</Name>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTransOpen</DataSource>
														<MenuItemName>CustTransOpenLastUpdatedCollectionLetter</MenuItemName>
													</AxFormControl>
												</Controls>
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS1657</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MarkPayment</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@CashManagement:MarkAsPrimaryPayment</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>FilterBySalesOrder_CZ</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ConfigurationKey>CzCustVendAdvanceInvoices</ConfigurationKey>
												<CountryRegionCodes>CZ,HU,PL</CountryRegionCodes>
												<ElementPosition>1181116002</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@GLS111726</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>MarkInvoiceLines</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1288490184</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<DataSource>CustTransOpen</DataSource>
												<MenuItemName>CustPaymEntryByLine</MenuItemName>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MarkTransactionsButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1503238548</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS300456</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuButtonControl">
												<Name>PdsFunctions</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2004318066</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>PdsRebateTable_Rebate</Name>
														<ElementPosition>1879048190</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTransOpen</DataSource>
														<MenuItemName>PdsRebateTable_Rebate</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>PdsRebateTable_TMA</Name>
														<ElementPosition>2013265918</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<DataSource>CustTransOpen</DataSource>
														<MenuItemName>PdsRebateTable_TMA</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>TAMRebateTable_BillBack</Name>
														<ElementPosition>2035635539</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>TAMRebateTable_BillBack</MenuItemName>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonSeparatorControl">
														<Name>Separator1</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>2058005160</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ButtonSeparator</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>OriginalDocumentOld</Name>
														<ElementPosition>2102744402</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextOnly</ButtonDisplay>
														<MenuItemName>OriginalDocument_IN</MenuItemName>
													</AxFormControl>
												</Controls>
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS10340</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>OriginalDocument</Name>
												<ElementPosition>2075900856</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<DataSource>CustTrans</DataSource>
												<MenuItemName>OriginalDocument_IN</MenuItemName>
											</AxFormControl>
										</Controls>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>656175558</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>Ismarked</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>85217604</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>14</Height>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>14</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransMarkedByOtherSpec</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS21707</Label>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>PaymentSpec</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>127826406</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>14</Height>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>14</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayPrimaryPaymentMarked</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS68092</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>MarkTrans</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>170435208</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>editMarkTrans</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS19120</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>FullSettlement</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>FullSettlement</ConfigurationKey>
										<ElementPosition>213044010</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>editFullSettlement</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@CashManagement:FullySettle</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Overview_CustTrans_Invoice</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>596523228</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Invoice</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayTaxTransactionId_IN</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>IN</CountryRegionCodes>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxTransactionId_IN</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS25395</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayTaxExternalInvoiceId_CN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>CN</CountryRegionCodes>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxExternalInvoiceId_CN</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransOpen_DueDate</Name>
										<ElementPosition>468696822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>DueDate</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>CustBillingClassification</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>ReferenceGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>CustTrans</DataSource>
										<ReferenceField>CustBillingClassification</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransOpen_CashDiscdate1</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>357913940</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCashDiscDate</DataMethod>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Amount</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1464193395</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>CustTransOpen</DataSource>
										<DisplaceNegative>0</DisplaceNegative>
										<DisplaceNegativeMode>Fixed</DisplaceNegativeMode>
										<NoOfDecimals>-1</NoOfDecimals>
										<SignDisplay>Prefixed</SignDisplay>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ConsId</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>JP</CountryRegionCodes>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>dispConsId_JP</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrencyCode</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1561806288</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>CustTrans</DataSource>
										<Label>@SYS7572</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>settleField</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1757032074</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSettleAmountCur</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS114018</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>settlePaymCur</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1854644967</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editSettleAmountPaymCur</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<Label>@SYS114017</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettleExchRate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1659419181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editCrossRate</DataMethod>
										<DataSource>CustTransOpen</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>BillOfExchange_Overview</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>CustBillOfExchange</ConfigurationKey>
										<ElementPosition>681740832</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BillOfExchange_Overview_BillOfExchangeID</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BillOfExchangeID</DataField>
												<DataSource>CustTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>BillOfExchange_Overview_BillOfExchangeSeqNum</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BillOfExchangeSeqNum</DataField>
												<DataSource>CustTrans</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>BillOfExchange_Overview_BillOfExchangeStatus</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BillOfExchangeStatus</DataField>
												<DataSource>CustTrans</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BillOfExchange_Overview_BankRemittanceFileId</Name>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BankRemittanceFileId</DataField>
												<DataSource>CustTrans</DataSource>
											</AxFormControl>
										</Controls>
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataGroup>BillOfExchange</DataGroup>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BankLCNumber</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>BankDocument</ConfigurationKey>
										<Type>String</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayBankLCNumber</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>BankLCShipmentLineNum</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>BankDocument</ConfigurationKey>
										<Type>Integer</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayBankLCShipmentLineNum</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>displayTaxBranchDimension_TH</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>829709590</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTaxBranchDimension</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>CustTransReferenceVoucher_IN</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>IN</CountryRegionCodes>
										<ElementPosition>319566015</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CustTransReferenceVoucher_IN_Voucher</Name>
												<DataRelationPath>CustTransReference</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>CustTrans_IN</DataSource>
										<Label>@GLS222673</Label>
										<ReferenceField>CustTransRefRecId</ReferenceField>
										<ReplacementFieldGroup>CustTransReferenceVoucher_IN</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTransOpen_TCSAmount_IN</Name>
										<ElementPosition>1457155509</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TCSAmount_IN</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTransOpen_TDSAmount_IN</Name>
										<ElementPosition>766958445</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TDSAmount_IN</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTransOpen_TaxWithholdAmountOrigin_IN</Name>
										<ElementPosition>724349634</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdAmountOrigin_IN</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_FiscalEstablishmentId_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<CountryRegionCodes>BR</CountryRegionCodes>
										<ElementPosition>404783619</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>fiscalEstablishmentId_BR</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CustTransCollectionLetterCode</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CollectionLetterCode</DataField>
										<DataSource>CustTransOpen</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>DisputeStatus</Name>
										<AllowEdit>No</AllowEdit>
										<ConfigurationKey>Collections</ConfigurationKey>
										<Type>ComboBox</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>Status</DataField>
										<DataSource>CustDispute</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>CustTransOpen</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GridFooter</Name>
								<Pattern>Custom</Pattern>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CashDiscTabularGroup</Name>
										<ExtendedStyle>tabularFields</ExtendedStyle>
										<Pattern>TabularFields</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscCaption</Name>
												<ExtendedStyle>tabularFields_title</ExtendedStyle>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscCaptionText</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_titleText</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS4376</Text>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscHeaders</Name>
												<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscColumnZero</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text></Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscAmountHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@CashManagement:CashDiscountAmount</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscTakenHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@CashManagement:CashDiscountTaken</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscToTakeHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@CashManagement:CashDiscountToTake</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscFullSettlementHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ConfigurationKey>FullSettlement</ConfigurationKey>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@CashManagement:CashDiscountFullSettlement</Text>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscTransCur</Name>
												<ExtendedStyle>tabularFields_row</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscTransCurLabel</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text></Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CustTransCashDisc_CashDiscAmount1</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>536870910</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editCashDiscAmount</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CashDiscTaken</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741820</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayCashDiscTaken</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CashDiscToTake</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655760</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editCashDiscToTake</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>FullSettlementCashDisc</Name>
														<ConfigurationKey>FullSettlement</ConfigurationKey>
														<ElementPosition>1789569700</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayFullSettlementCashDisc</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscPaymCur</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_row</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CashDiscPaymCurLabel</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text></Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>possibleCashDiscPaymCur</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>715827880</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editCashDiscAmountPaymCur</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CashDiscTakenPaymCur</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1252698790</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayCashDiscTakenPaymCur</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CashDiscToTakePaymCur</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612730</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>editCashDiscToTakePaymCur</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>FullSettlementCashDiscPaymCur</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ConfigurationKey>FullSettlement</ConfigurationKey>
														<ElementPosition>1968526670</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>displayFullSettlementCashDiscPaymCur</DataMethod>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscUseCashDisc</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ExtendedStyle>tabularFields_row</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>UseCashDiscLabel</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS67801</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>CustTransOpen_UseCashDisc</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>255652812</ElementPosition>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>UseCashDisc</DataField>
														<DataSource>CustTransOpen</DataSource>
														<DisplayLength>1</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<ShowLabel>No</ShowLabel>
														<Items />
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CashDiscFooter</Name>
												<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>Restricted</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>InvoiceDetails</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields</ExtendedStyle>
										<Pattern>TabularFields</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Type>Group</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InvoiceDetailsCaption</Name>
												<ExtendedStyle>tabularFields_title</ExtendedStyle>
												<HeightMode>SizeToAvailable</HeightMode>
												<Type>Group</Type>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>InvoiceDetailsCaptionText</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_titleText</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS12128</Text>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InvoiceDetailsHeaders</Name>
												<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>InvoiceDetailsDateHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS7402</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>InvoiceDetailsCompanyHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@GeneralLedger:Company</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>InvoiceDetailsVoucherHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS12371</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>InvoiceDetailsDescriptionHeader</Name>
														<AllowEdit>No</AllowEdit>
														<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
														<Type>StaticText</Type>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS13566</Text>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InvoiceDetailsValues</Name>
												<ExtendedStyle>tabularFields_row</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>TransDate</Name>
														<AlignControl>No</AlignControl>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>426088020</ElementPosition>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>TransDate</DataField>
														<DataSource>CustTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CustTrans_Company</Name>
														<ElementPosition>383479218</ElementPosition>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>dataAreaId</DataField>
														<DataSource>CustTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CustTrans_Voucher</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>298261614</ElementPosition>
														<Skip>Yes</Skip>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>Voucher</DataField>
														<DataSource>CustTrans</DataSource>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Txt</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1521134247</ElementPosition>
														<Skip>Yes</Skip>
														<Top>0</Top>
														<TopMode>BottomEdge</TopMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>Txt</DataField>
														<DataSource>CustTrans</DataSource>
														<DisplayLength>20</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<ShowLabel>No</ShowLabel>
													</AxFormControl>
												</Controls>
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InvoiceDetailsFooter</Name>
												<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<AllowUserSetup>No</AllowUserSetup>
												<ArrangeMethod>None</ArrangeMethod>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<AllowUserSetup>Restricted</AllowUserSetup>
										<ArrangeMethod>None</ArrangeMethod>
										<FrameType>None</FrameType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>CashDiscGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1252698792</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Pattern>FieldsFieldGroups</Pattern>
										<PatternVersion>1.1</PatternVersion>
										<Top>0</Top>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InterestFineAmount_BR</Name>
												<CountryRegionCodes>BR</CountryRegionCodes>
												<Type>Group</Type>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CustTransOpen_InterestAmount_BR</Name>
														<ElementPosition>2028178995</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>InterestAmount_BR</DataField>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CustTransOpen_FineAmount_BR</Name>
														<ElementPosition>2087831320</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<DataField>FineAmount_BR</DataField>
														<DataSource>CustTransOpen</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<ColumnsMode>Fill</ColumnsMode>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Caption>@SYS23823</Caption>
								<FrameOptionButton>Hide</FrameOptionButton>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>CustTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>GeneralTabPage</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Ledger</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>TransType</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransType</DataField>
										<DataSource>CustTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Correct</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Correct</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>CustTrans_W_InvoicePostingType_RU</Name>
										<ElementPosition>1503238551</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoicePostingType_RU</DataField>
										<DataSource>CustTrans_W</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PostingProfile</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingProfile</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Invoice</Name>
								<ElementPosition>1744830462</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_Invoice</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Invoice</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>Invoice_Approver</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Invoice_Approver_PersonnelNumber</Name>
												<DataRelationPath>HcmWorker</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>CustTrans</DataSource>
										<ReferenceField>Approver</ReferenceField>
										<ReplacementFieldGroup>PersonnelNumber</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CustTrans_Approved</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Approved</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_DocumentNum</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocumentNum</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTrans_DocumentDate</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocumentDate</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_OrderAccount</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>OrderAccount</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Invoice_TaxInvoiceSalesId</Name>
										<ElementPosition>1829337920</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxInvoiceSalesId</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_W_PrepaymentFactureId_W</Name>
										<ElementPosition>1988410782</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PrepaymentFactureId_W</DataField>
										<DataSource>CustTrans_W</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormReferenceGroupControl">
								<Name>CustTrans_CustBillingClass</Name>
								<ElementPosition>1342177278</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>ReferenceGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_CustBillingClass_BillingClassification</Name>
										<DataRelationPath>CustBillingClassification</DataRelationPath>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
									</AxFormControl>
								</Controls>
								<DataSource>CustTrans</DataSource>
								<FrameType>None</FrameType>
								<ReferenceField>CustBillingClassification</ReferenceField>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Agreement_RU</Name>
								<CountryRegionCodes>RU</CountryRegionCodes>
								<ElementPosition>1342177277</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Agreement_RU_M_agreementId_RU</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>agreementId_RU</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Agreement_RU_M_agreementDocumentTitle_RU</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>agreementDocumentTitle_RU</DataMethod>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Agreement_RU</DataGroup>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExchRates</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ExchAdjustment_LastExchAdj</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastExchAdj</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExchRates_LastExchAdjVoucher</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastExchAdjVoucher</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchRates_LastExchAdjRate</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastExchAdjRate</DataField>
										<DataSource>CustTrans</DataSource>
										<MinNoOfDecimals>4</MinNoOfDecimals>
										<MinNoOfDecimalsMode>Fixed</MinNoOfDecimalsMode>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchRates_LastExchAdjRateReporting</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastExchAdjRateReporting</DataField>
										<DataSource>CustTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Breakable>No</Breakable>
								<DataGroup>ExchangeRates</DataGroup>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS19924</Caption>
						<DataSource>CustTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PaymentTabPage</Name>
						<ElementPosition>1879048190</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentGroup</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransOpen_DueDate1</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DueDate</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransOpen_BankDiscNoticeDeadline1</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankDiscNoticeDeadline</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymentReference</Name>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymReference</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymMode</Name>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymMode</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymSpec</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymSpec</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_EPPaymentType_BR</Name>
										<ElementPosition>1163220305</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EPPaymentType_BR</DataField>
										<DataSource>CustTransPayment_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CustTrans_EPPaymentWay_BR</Name>
										<ElementPosition>1252698790</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EPPaymentWay_BR</DataField>
										<DataSource>CustTransPayment_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PaymMethod</Name>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymMethod</DataField>
										<DataSource>CustTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>DirectDebitMandate</Name>
										<ElementPosition>1476395002</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DirectDebitMandate_MandateReference</Name>
												<DataRelationPath>CustDirectDebitMandate</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>CustTrans</DataSource>
										<ReferenceField>DirectDebitMandate</ReferenceField>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Prepayment</Name>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Prepayment</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS828</Caption>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Billofexchange</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Billofexchange_BillOfExchangeID</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BillOfExchangeID</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>Billofexchange_BillOfExchangeSeqNum</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BillOfExchangeSeqNum</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>Billofexchange_BillOfExchangeStatus</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BillOfExchangeStatus</DataField>
										<DataSource>CustTrans</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Billofexchange_BankRemittanceFileId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankRemittanceFileId</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>BillOfExchange</DataGroup>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ElectronicPayment</Name>
								<ElementPosition>1503238551</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_DocumentType</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>DocumentType</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ElectronicPayment_RemitOccCode</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RemitOccCode</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ElectronicPayment_RemitDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RemitDate</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_BankInvoiceId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankInvoiceId</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_BankFolder</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankFolder</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_Instruction_1</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Instruction_1</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_Instruction_2</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Instruction_2</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_BankAccountID</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>BankAccountID</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_JournalNum</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>JournalNum</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElectronicPayment_ConfLayoutGroupId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ConfLayoutGroupId</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ElectronicPayment_RetOccCode</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RetOccCode</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>ElectronicPayment_RetDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>RetDate</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormInt64Control">
										<Name>ElectronicPayment_CustTransOpenRefRecId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Int64</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CustTransOpenRefRecId</DataField>
										<DataSource>CustTransEPRemit_BR</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>ElectronicPayment</DataGroup>
								<DataSource>CustTransEPRemit_BR</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InterestAndFine</Name>
								<CountryRegionCodes>BR</CountryRegionCodes>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InterestAndFine_FineAmount_BR</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FineAmount_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InterestAndFine_FineAmountPaymCur_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FineAmountPaymCur_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InterestAndFine_FineCode_BR</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>FineCode_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InterestAndFine_InterestAmount_BR</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InterestAmount_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InterestAndFine_InterestAmountPaymCur_BR</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InterestAmountPaymCur_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InterestAndFine_InterestCode_BR</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>InterestCode_BR</DataField>
										<DataSource>CustTransOpen</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>InterestAndFine</DataGroup>
								<DataSource>CustTransOpen</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AmountGroup</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymentCurrencyCode</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTrans_AmountCur</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>CustTrans</DataSource>
										<Label>@SYS81978</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTrans_AmountMST</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountMST</DataField>
										<DataSource>CustTrans</DataSource>
										<Label>@SYS81979</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>AmountCur</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountCur</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>AmountMST</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>AmountMST</DataField>
										<DataSource>CustTransOpen</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ExchAdjustment</Name>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>ExchAdjustment</DataField>
										<DataSource>CustTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>EUROTriangulation</Name>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>EUROTriangulation</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS12227</Caption>
								<DataSource>CustTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS828</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SettlementTabPage</Name>
						<ElementPosition>2013265918</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Settlement</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettleAmountCur</Name>
										<ElementPosition>429496728</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SettleAmountCur</DataField>
										<DataSource>CustTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SettleAmountMST</Name>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SettleAmountMST</DataField>
										<DataSource>CustTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LastSettleVoucher</Name>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastSettleVoucher</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LastSettleAccountNum</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastSettleAccountNum</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>LastSettleCompany</Name>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastSettleCompany</DataField>
										<DataSource>CustTrans</DataSource>
										<Label>@SYS115826</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>LastSettleDate</Name>
										<ElementPosition>1503238548</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>LastSettleDate</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CustTrans_Settlement</Name>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Settlement</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Settlement_SettleAmountReporting</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SettleAmountReporting</DataField>
										<DataSource>CustTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataGroup>Settlement</DataGroup>
								<DataSource>CustTrans</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SettlementStatus</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Closed</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Closed</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PostingProfileClose</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PostingProfileClose</DataField>
										<DataSource>CustTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>SettlementStatus</DataGroup>
								<DataSource>CustTrans</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS10163</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Balances_W</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<CountryRegionCodes>RU</CountryRegionCodes>
						<ElementPosition>2046820350</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormListViewControl">
								<Name>BalanceList</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ListView</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<GridLines>Yes</GridLines>
								<RowSelect>Yes</RowSelect>
								<ViewType>Report</ViewType>
							</AxFormControl>
						</Controls>
						<Caption>@GLS107088</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>CashDiscTabPage</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2080374782</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>NewDeleteActionPane</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>NewDeleteButtonGroup</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>NewButton</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>DeleteButton</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
												<NeedsRecord>Yes</NeedsRecord>
											</AxFormControl>
										</Controls>
										<DataSource>CustTransCashDisc</DataSource>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridCashDisc</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>CustTransCashDisc_CashDiscdate</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CashDiscdate</DataField>
										<DataSource>CustTransCashDisc</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTransCashDisc_CashDiscAmount</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CashDiscAmount</DataField>
										<DataSource>CustTransCashDisc</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CustTransCashDisc_RemainingAmount</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displaySettleAmountForCashDisc</DataMethod>
										<DataSource>CustTransCashDisc</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>CustTransCashDisc</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FooterGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormSegmentedEntryControl">
										<Name>CustTransOpen_CashDiscAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Left>0</Left>
										<LeftMode>RightEdge</LeftMode>
										<Type>SegmentedEntry</Type>
										<FormControlExtension>
											<Name>SegmentedEntryControl</Name>
											<ExtensionComponents />
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmControllerClassName</Name>
													<Type>String</Type>
													<Value>LedgerDimensionDefaultAccountController</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIsDefaultAccount</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmValidateBlockedForManualEntry</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmLockMainAccountSegment</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmPostingType</Name>
													<Type>Enum</Type>
													<TypeName>LedgerPostingType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeTotalAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmIncludeFinancialAccounts</Name>
													<Type>Enum</Type>
													<TypeName>NoYes</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmAccountTypeEnumName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</FormControlExtension>
										<DataSource>CustTransOpen</DataSource>
										<ReferenceField>CashDiscountLedgerDimension</ReferenceField>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS4376</Caption>
						<DataSource>CustTransCashDisc</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabFinancialDimensions</Name>
						<ElementPosition>2130706430</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Pattern>DimensionEntryControl</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormContainerControl">
								<Name>DimensionEntryControl</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Container</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension>
									<Name>DimensionEntryControl</Name>
									<ExtensionComponents />
									<ExtensionProperties>
										<AxFormControlExtensionProperty>
											<Name>parmControllerClassName</Name>
											<Type>ExtendedDataType</Type>
											<TypeName>ClassName</TypeName>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmControlLabelText</Name>
											<Type>String</Type>
											<Value>@SYS101181</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumerationName</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmDataSourceName</Name>
											<Type>String</Type>
											<Value>CustTrans</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmValueSetReferenceField</Name>
											<Type>String</Type>
											<Value>DefaultDimension</Value>
										</AxFormControlExtensionProperty>
										<AxFormControlExtensionProperty>
											<Name>parmEnumValueSetReferenceField</Name>
											<Type>String</Type>
										</AxFormControlExtensionProperty>
									</ExtensionProperties>
								</FormControlExtension>
								<Controls />
							</AxFormControl>
						</Controls>
						<HideIfEmpty>No</HideIfEmpty>
						<Caption>@SYS138491</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TaxWithholdTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
						<ElementPosition>2139095038</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>WithholdingTaxActionStrip</Name>
								<Type>ActionPane</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>FormMenuButtonWithholdingTax</Name>
										<Type>ButtonGroup</Type>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>WithholdingNew</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>New</Command>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCommandButtonControl">
												<Name>WithholdingDelete</Name>
												<Type>CommandButton</Type>
												<FormControlExtension
													i:nil="true" />
												<Command>DeleteRecord</Command>
											</AxFormControl>
										</Controls>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
								</Controls>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridTaxWithhold</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_VoucherInvoice</Name>
										<ElementPosition>268435454</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>VoucherInvoice</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_Invoice</Name>
										<ElementPosition>402653181</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Invoice</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>TaxWithholdTrans_CompetenceDate</Name>
										<ElementPosition>536870908</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>CompetenceDate</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_InvoiceCurrency</Name>
										<ElementPosition>671088635</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceCurrency</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_InvoiceAmount</Name>
										<ElementPosition>805306362</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_InvoiceTaxAmount</Name>
										<ElementPosition>939524089</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceTaxAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>invoiceAmountExclTax</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741816</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>invoiceAmountExclTax</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
										<Label>@SYS81797</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_TaxWithholdCode</Name>
										<ElementPosition>1207959543</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdCode</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>withholdOriginGross</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1342177270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>withholdOriginGross</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
										<Label>@SYS81688</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdExclude</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1476394997</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>TaxWithholdExclude</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
										<Label>@SYS81799</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_TaxWithholdGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1588243107</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editTaxWithholdGroup</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_InvoiceExemptedAmount</Name>
										<ElementPosition>1610612724</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceExemptedAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_InvoiceWithholdBaseAmount</Name>
										<ElementPosition>1744830451</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceWithholdBaseAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_InvoiceTaxWithholdAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048178</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InvoiceTaxWithholdAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_TaxWithholdAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2013265905</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TaxWithholdTrans_TaxWithholdItemGroupHeading</Name>
										<ElementPosition>2102744399</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>TaxWithholdTrans_TaxWithholdItemGroupHeading_TaxWithholdItemGroup</Name>
												<DataRelationPath>TaxWithholdItemGroupHeading_TH</DataRelationPath>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
											</AxFormControl>
										</Controls>
										<DataSource>TaxWithholdTrans</DataSource>
										<ReferenceField>TaxWithholdItemGroupHeading_TH</ReferenceField>
									</AxFormControl>
								</Controls>
								<DataSource>TaxWithholdTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupTaxWithhold</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_TaxNotTaxableByTreaty</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxNotTaxableByTreaty</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_TaxNotTaxableExpenses</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxNotTaxableExpenses</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_TaxWithholdCurrency</Name>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxWithholdCurrency</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_TaxWithholdExchRate</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<HelpText>@Tax_WithholdTax:WithholdingTaxCurrencyHelp</HelpText>
										<Type>Real</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>editTaxWithholdExchRate</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
										<Label>@Tax_WithholdTax:TaxWithholdExchRate</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_TaxTaxWithholdAmount</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TaxTaxWithholdAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdRoundOff</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>TaxWithholdRoundOff</DataMethod>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TaxWithholdTrans_PaymCurrency</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymCurrency</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>TaxWithholdTrans_PaymTaxWithholdAmount</Name>
										<ElementPosition>1840700268</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymTaxWithholdAmount</DataField>
										<DataSource>TaxWithholdTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<DataSource>TaxWithholdTrans</DataSource>
								<FrameType>None</FrameType>
								<OptionValue>2</OptionValue>
							</AxFormControl>
						</Controls>
						<Caption>@SYS7372</Caption>
						<DataSource>TaxWithholdTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<BottomMargin>0</BottomMargin>
				<BottomMarginMode>Fixed</BottomMarginMode>
				<LeftMargin>0</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>0</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<TopMargin>0</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Footer</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TotalsGroup</Name>
						<ElementPosition>1073741823</ElementPosition>
						<ExtendedStyle>tabularFields</ExtendedStyle>
						<FilterExpression>%1</FilterExpression>
						<Pattern>TabularFields</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TableCaption</Name>
								<ExtendedStyle>tabularFields_title</ExtendedStyle>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalsRowHeader</Name>
								<ExtendedStyle>tabularFields_rowHeader</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>TotalsColumn0</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text></Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>TransferredAmountLabel</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@CashManagement:EnteredPaymentAmount</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>RemainingAmountLabel</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@CashManagement:SettlementBalance</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>CashDiscountTotalLabel</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS110920</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>CustomerBalanceLabel</Name>
										<AllowEdit>No</AllowEdit>
										<ExtendedStyle>tabularFields_colLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text>@AccountsPayable:CustomerBalance</Text>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalancesMst</Name>
								<ElementPosition>858993458</ElementPosition>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BalanceMstLabel</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text></Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showtransferredAmount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransferredAmountMst</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ShowRemainAmount</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayMarkedTotalMst</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showCashDiscTotal</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCashDiscTotalMst</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showCustBalance</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCustBalanceMst</DataMethod>
										<Label>@SYS16704</Label>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalancesCur</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<ExtendedStyle>tabularFields_row</ExtendedStyle>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStaticTextControl">
										<Name>BalanceCurLabel</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ExtendedStyle>tabularFields_rowLabel</ExtendedStyle>
										<Type>StaticText</Type>
										<FormControlExtension
											i:nil="true" />
										<Text></Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showTransferredAmountCur</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayTransferredAmountCur</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ShowRemainAmountCur</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayMarkedTotalCur</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>showCashDiscTotalCur</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCashDiscTotalCur</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
								</Controls>
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalsFooter</Name>
								<ExtendedStyle>tabularFields_rowFooter</ExtendedStyle>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<AllowUserSetup>No</AllowUserSetup>
								<ArrangeMethod>None</ArrangeMethod>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<AllowUserSetup>Restricted</AllowUserSetup>
						<ArrangeMethod>None</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Caption>@SYS8311</Caption>
				<FrameOptionButton>Hide</FrameOptionButton>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>DialogCommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Save</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>UpdateNow</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>429496728</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<NeededPermission>Update</NeededPermission>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<MultiSelect>Yes</MultiSelect>
						<Text>@SYS41360</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>SettleRemainder</Name>
						<AllowEdit>No</AllowEdit>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<Text>@CashManagement:SettlementWriteOffSettleRemainder</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>