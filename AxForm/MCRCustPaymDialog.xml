<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRCustPaymDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

[Form]
public class MCRCustPaymDialog extends FormRun
{
    Common argsRecord;
    boolean allowAlternateReturnPayments = false;
    boolean continueEdit = true;
    boolean mcrGiftCardPoliciesEnabled;
    List  listCreditCardAuthTrans = new List(Types::Int64);
    RetailStoreTenderTypeId originalTenderTypeId;
    str accessCode;
    str nonRecurringPropertiesXmlString;
    RetailTokenScope tokenScope;
    boolean allowCreationNonRecurringToken = true;
    boolean isFutureOrder;
    boolean isReturnOrder;
    private boolean isDefaultRetailCustomer = false;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Source>
			</Method>
			<Method>
				<Name>addNewCardHolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads customer credit card creation form and populates
    ///     selected payment record with returned values.
    /// </summary>
    void addNewCardHolder()
    {
        CreditCardPaymentCardTokenize   cardTokenize;
        CreditCardProcessors            activeCreditCardProcessors;
        CreditCardCust                  newCreditCardCust;

        boolean promptForTokenScope = this.isTokenScopePromptRequired();

        activeCreditCardProcessors = CreditCardProcessors::findActiveProcessor();
        cardTokenize = CreditCardPaymentCardTokenize::construct();
        cardTokenize.init(activeCreditCardProcessors.Name);

        cardTokenize.parmCustAccount(mcrCustPaymTable.CustAccount);
        cardTokenize.parmArgRecId(argsRecord.RecId);
        cardTokenize.parmArgTableId(argsRecord.TableId);
        cardTokenize.parmPromptForTokenScope(promptForTokenScope);
        cardTokenize.parmIsSupportSalesOrderScope(isReturnOrder || isFutureOrder);
        if (!cardTokenize.getFromDialog())
        {
            return;
        }

        boolean isNonRecurring = RetailNonRecurringTokenFeatureExposure::isEnabled() && cardTokenize.getTokenScope() == RetailTokenScope::NonRecurring;
        if (isNonRecurring)
        {
            // Save the association of the access code with the payment line for a non-recurring token
            accessCode = cardTokenize.parmAccessCode();
            nonRecurringPropertiesXmlString = cardTokenize.getXmlString();
            tokenScope = cardTokenize.getTokenScope();
            mcrCustPaymTable.IsNonRecurring = NoYes::Yes;
            CreditCard_M_editCreditCard.pasteText(strRep('*', 16));
        }
        else
        {
            if (cardTokenize.getTokenScope() == RetailTokenScope::NonRecurring)
            {
                throw error("@Retail:RetailNonRecurringTokenFeatureDisabledError");
            }

            newCreditCardCust = CreditCard::addCreditCard(cardTokenize.getXmlString(),
                mcrCustPaymTable.CustAccount,
                activeCreditCardProcessors.RecId);
            eventSource.EventWriteRetailRecurringTokenMCRCustPaymTableCreated(mcrCustPaymTable.RecId);
        }
        if (newCreditCardCust)
        {
            // Will need to switch based on new checkbox for call center.
            CreditCardCust::scopeCreditCardToken(newCreditCardCust.RecId, cardTokenize.getTokenScope());

            mcrCustPaymTable.PaymInfoRecId = newCreditCardCust.RecId;
            mcrCustPaymTable.PaymInfoTableId = newCreditCardCust.TableId;
            mcrCustPaymTable_ds.cacheCalculateMethod(tableMethodStr(MCRCustPaymTable, editCreditCard));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTokenScopePromptRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the customer account is a Retail default customer and if the restrict credit card usages feature is enabled.
    /// </summary>
    /// <returns></returns>
    private boolean isTokenScopePromptRequired()
    {
        MCROrderParameters  mcrOrderParameters = MCROrderParameters::find();
        boolean promptForTokenScope = FeatureStateProvider::isFeatureEnabled(RetailRestrictCreditCardUsageFeature::instance()) && mcrOrderParameters.MCRAllowCustomerCardOnFile == NoYes::Yes;

        if (promptForTokenScope)
        {
            // Cannot prompt for token scope if default customer, has to be scoped to SalesOrder for default customer.
            promptForTokenScope = !isDefaultRetailCustomer;
        }

        if (!allowCreationNonRecurringToken)
        {
            promptForTokenScope = false;
        }

        return promptForTokenScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeCardCaptureExtension</Name>
				<Source><![CDATA[
    private RetailTokenScope invokeCardCaptureExtension()
    {
        // We don't invoke extension unless the non-recurring token feature is turned on (for backward compatibility)
        if (!RetailNonRecurringTokenFeatureExposure::isEnabled())
        {
            return RetailTokenScope::Unknown;
        }

        int tableId = argsRecord.TableId;
        RefRecId recId = argsRecord.RecId;

        CreditCardExtensionParameters extensionParams = CreditCardExtensionParameters::constructCreditCardCaptureParameters(
            mcrCustPaymTable.CustAccount,
            tableId,
            recId);

        CreditCardExtensions::onCapturingCreditCardDetails(extensionParams);

        RetailTokenScope tokenScopeOverride = extensionParams.getTokenScope();
        //We only allow overriding the scope to Customer or SaleOrder value
        if (tokenScopeOverride != RetailTokenScope::Customer && tokenScopeOverride != RetailTokenScope::SalesOrder)
        {
            tokenScopeOverride = RetailTokenScope::Unknown;
        }

        // we don't allow overriding token scope for default retail customer
        if (isDefaultRetailCustomer)
        {
            tokenScopeOverride = RetailTokenScope::Unknown;
        }

        return tokenScopeOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args()
            || !element.args().record())
        {
            throw error(strFmt("@MCR10663", element.name()) + "  " + "@MCR10664");
        }
        argsRecord = element.args().record();

        if (argsRecord.TableId == tableNum(MCRCustPaymTable))
        {
            MCRCustPaymTable editMcrCustPaymTable = MCRCustPaymTable::findByRecID(argsRecord.RecId);

            if (RetailTenderDiscount::existsForTenderType(editMcrCustPaymTable.TenderTypeId, editMcrCustPaymTable.CardTypeId))
            {
                throw error("@Retail:InvalidPaymentEditError");
            }
        }

        if (element.args().parmEnumType() == enumnum(MCRAllowAlternateReturnPayments))
        {
            allowAlternateReturnPayments = element.args().parmEnum();
        }

        if (argsRecord.TableId == tableNum(SalesTable))
        {
            SalesTable salesTable = argsRecord;
            isReturnOrder = salesTable.ReturnStatus != ReturnStatusHeader::None;
            isFutureOrder = argsRecord.mcrIsOrderInFuture();
        }

        // Allow non-recurring token creation only for calls from MCRAllowAlternateReturnPayments dialog
        allowCreationNonRecurringToken = element.args().callerName() == formStr(MCRSalesOrderRecap) && !isFutureOrder;
        isDefaultRetailCustomer = CustTable::isCustomerDefaultForRetail(mcrCustPaymTable.CustAccount);

        mcrGiftCardPoliciesEnabled = RetailParameters::find().UseGiftCardPolicies;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        MCRCustPaymTotals mcrCustPaymTotals;
        super();

        // If a payment record is passed in
        //  don't create a new one
        if (argsRecord.TableId != tableNum(MCRCustPaymTable))
        {
            // or if a record that only allows 1 payment is passed in
            switch (argsRecord.TableId)
            {
                case tableNum(LedgerJournalTrans):
                case tableNum(MCRContinuityCustHeader):
                case tableNum(MCRInstallmentPlanSalesTable):
                    if (MCRCustPaymTable::findByRefRecIDRefTableID(argsRecord.RecId, argsRecord.TableId))
                    {
                        break;
                    }
                default:
                    mcrCustPaymTable_ds.create();
            }
            // If the related record is not installment then allow payment to be edited if parent can be.
            if (argsRecord.TableId != tableNum(MCRInstallmentPlanSalesTable))
            {
                mcrCustPaymTotals = MCRCustPaymTotals::construct(argsRecord.TableId, argsRecord.RecId);
                mcrCustPaymTable_ds.allowEdit(mcrCustPaymTotals.allowEdit());
            }
        }
        else
        {
            mcrCustPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId, mcrCustPaymTable.RefRecId);
            mcrCustPaymTable_ds.allowEdit(mcrCustPaymTotals.allowEdit());
        }

        element.refreshFromMemory();

        element.updatePaymTypeControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymTypeControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the form controls based on the payment method.
    /// </summary>
    public void updatePaymTypeControls()
    {
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        MCRCustPaymType cardType;

        void setControl(FormControl _control, boolean _visible)
        {
            if (_control.visible() != _visible)
            {
                _control.visible(_visible);
            }
        }

        boolean commercePaymentsEnabled = RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(mcrCustPaymTable.salesTable(), funcName());

        createCCBtn.enabled(false);

        setControl(mcrCustPaymTable_CardTypeId, false);
        setControl(GiftCardPolicy, false);
        MCRCustPaymTable_IsPrepay.allowEdit(true);
        switch (mcrCustPaymTable.CustPaymType)
        {
            case MCRCustPaymType::LoyaltyCard:
                setControl(mcrCustPaymTable_CardTypeId, true);
                MCRCustPaymTable_IsPrepay.enabled(true);
                setControl(creditCardGroup, false);
                setControl(checkGroup, false);
                setControl(giftCardGroup, false);
                MCRCustPaymTable_IsPrepay.allowEdit(false);
                setControl(loyaltyCardGroup, true);

                // Default to the loyalty card number on sales order.
                RefRecId loyaltyCardRecId = mcrCustPaymTable.salesTable().retailSalesTable().RetailLoyaltyCard;
                if (loyaltyCardRecId)
                {
                    RetailLoyaltyCard retailLoyaltyCard = RetailLoyaltyCard::find(loyaltyCardRecId);
                    mcrCustPaymTable.editRetailLoyaltyCardId(true, retailLoyaltyCard.CardNumber);
                }
                break;
            case MCRCustPaymType::CreditCard:
            case MCRCustPaymType::GiftCard:
                setControl(mcrCustPaymTable_CardTypeId, true);
                MCRCustPaymTable_IsPrepay.enabled(true);
                cardType = MCRCustPaymTable::getMCRCardTypeFromCardTypeId(mcrCustPaymTable.CardTypeId);
                if (cardType == MCRCustPaymType::CreditCard)
                {
                    setControl(giftCardGroup, false);
                    setControl(checkGroup, false);
                    setControl(loyaltyCardGroup, false);
                    setControl(creditCardGroup, true);
                    creditCardGroup.enabled(true);
                    creditCardGroup.skip(false);
                    if (mcrCustPaymTable_ds.allowEdit())
                    {
                        createCCBtn.enabled(true);
                    }
                }
                else if (cardType == MCRCustPaymType::GiftCard)
                {
                    setControl(creditCardGroup, false);
                    setControl(checkGroup, false);
                    setControl(loyaltyCardGroup, false);
                    setControl(giftCardGroup, true);
                    setControl(GiftCardPolicy, mcrGiftCardPoliciesEnabled);
                    MCRCustPaymTable_IsPrepay.allowEdit(commercePaymentsEnabled ? false : true);

                    Select RecId from retailStoreTenderTypeTable
                        where retailStoreTenderTypeTable.tenderTypeId == Identification_TenderTypeId.text()
                            && retailStoreTenderTypeTable.Channel == mcrCustPaymTable.Channel
                            && retailStoreTenderTypeTable.ConnectorName != '';

                    MCRCustPaymTable_IsPrepay.allowEdit(retailStoreTenderTypeTable.RecId ? false : true);
                    this.setupExternalGiftCard();
                }
                
                break;
            case MCRCustPaymType::Check:
                setControl(creditCardGroup, false);
                setControl(giftCardGroup, false);
                setControl(checkGroup, true);
                setControl(loyaltyCardGroup, false);
                MCRCustPaymTable_IsPrepay.enabled(false);
                break;
            case MCRCustPaymType::Cash:
                setControl(creditCardGroup, false);
                setControl(giftCardGroup, false);
                setControl(checkGroup, false);
                setControl(loyaltyCardGroup, false);
                MCRCustPaymTable_IsPrepay.enabled(true);
                MCRCustPaymTable_IsPrepay.allowEdit(commercePaymentsEnabled ? false : true);
                break;
            case MCRCustPaymType::OnAccount:
                setControl(creditCardGroup, true);
                creditCardGroup.enabled(false);
                creditCardGroup.skip(true);
                setControl(giftCardGroup, false);
                setControl(checkGroup, false);
                setControl(loyaltyCardGroup, false);
                MCRCustPaymTable_IsPrepay.enabled(false);
                MCRCustPaymTable_IsPrepay.allowEdit(commercePaymentsEnabled ? false : true);
                break;
            default:
                setControl(creditCardGroup, true);
                creditCardGroup.enabled(false);
                creditCardGroup.skip(true);
                setControl(giftCardGroup, false);
                setControl(checkGroup, false);
                setControl(loyaltyCardGroup, false);
                MCRCustPaymTable_IsPrepay.enabled(true);
                break;
        }

        // IsPrepay cannot be changed for Return order.
        // Or when the status has changed from NotSubmitted we are disabling IsPrepay.
        if (mcrCustPaymTable.getReturnOrder() || mcrCustPaymTable.Status != MCRCustPaymStatus::NotSubmitted)
        {
            MCRCustPaymTable_IsPrepay.enabled(false);
        }

        // allow/disallow editing of fields for the current record
        if (mcrCustPaymTable_ds.allowEdit())
        {
            mcrCustPaymTable.setAllowEditInDataSource();
        }

        switch (argsRecord.TableId)
        {
            case tableNum(MCRInstallmentPlanSalesTable):
            case tableNum(MCRContinuityCustHeader):
                identification_Amount.visible(false);
            case tableNum(LedgerJournalTrans):
                identification_PercentAmount.visible(false);
                break;
            // no default, show everything
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        continueEdit = true;

        if (argsRecord.TableId == tableNum(MCRCustPaymTable))
        {
            MCRCustPaymTable editMcrCustPaymTable = MCRCustPaymTable::findByRecID(argsRecord.RecId);

            SalesTable salesTable = SalesTable::findRecId(mcrCustPaymTable.RefRecId);

            // Checking for picked/packed but not invoiced lines.
            DialogButton res = McrCustPaymHelper::askToContinueIfPickedOrPackedLinesButNotInvoiced(salesTable);
        
            if (res != DialogButton::Yes)
            {
                continueEdit = false;
            }
        }

        Object callerForm = element.args().caller();

        // check if caller has method setInstallmentAmounts
        if (callerForm && formHasMethod(callerForm, identifierstr(setInstallmentAmounts)))
        {
            callerForm.setInstallmentAmounts();
        }

        if (callerForm && formHasMethod(callerForm, identifierstr(setExternalGiftCard)))
        {
            if (mcrCustPaymTable.isExternalGiftCardPayment())
            {
                RetailExternalGiftCard retailExternalGiftCard = new RetailExternalGiftCard();
                retailExternalGiftCard.RetailExternalGiftCardRecId = mcrCustPaymTable.PaymInfoRecId;
                retailExternalGiftCard.CardNumber = GiftCard_M_editGiftCard.text();
                retailExternalGiftCard.Pin = GiftCard_M_Pin.text();
                retailExternalGiftCard.Expiration = GiftCard_M_ExpirationDate.text();
                callerForm.setExternalGiftCard(retailExternalGiftCard);
            }
        }

        super();

        // Make sure all CreditCardAuthTrans point to this MCRCustPaym
        ListIterator myIterator = new ListIterator(listCreditCardAuthTrans);
        while (myIterator.more())
        {
            int64 recId = myIterator.value();
            CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::find(recId, true);
            
            if (creditCardAuthTrans)
            {
                ttsbegin;
                creditCardAuthTrans.MCRPaymRecId = mcrCustPaymTable.RecId;
                creditCardAuthTrans.update();
                ttscommit;
            }
            
            myIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTenderDiscountAmount</Name>
				<Source><![CDATA[
    public void getTenderDiscountAmount()
    {
        MCRCustPaymTable_ds.object(fieldNum(MCRCustPaymTable, PercentAmount)).allowEdit(true);

        if (!RetailOrdersFeatureControl::isApplyRetailTenderDiscountToRetailOrdersFeatureEnabled())
        {
            return;
        }

        TenderDiscountAmount.visible(false);
        NewBalanceWhenPaidWithTenderDiscount.visible(false);

        if (RetailTenderDiscount::existsForTenderType(mcrCustPaymTable.TenderTypeId, mcrCustPaymTable.CardTypeId))
        {
            MCRCustPaymTable_ds.object(fieldNum(MCRCustPaymTable, PercentAmount)).allowEdit(false);

            SalesTable salesTable = mcrCustPaymTable.salesTable();

            MCRCustPaymTotals mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);

            RetailSalesOrderCalculator retailCalculator = RetailSalesOrderCalculator::construct(salesTable.SalesId);

            Amount amountDue = mcrCustPaymTotals.getTotalSalesAmount() - mcrCustPaymTotals.getTotalPaymAmount();

            RetailTenderDiscountLine retailTenderDiscountLine = retailCalculator.getEstimateTenderDiscount(
                mcrCustPaymTable.TenderTypeId,
                mcrCustPaymTable.CardTypeId,
                amountDue);

            AmountCur totalTenderDiscountAmount = retailTenderDiscountLine.DiscountAmount;
            AmountCur paymentAmount = retailTenderDiscountLine.PaymentAmount;

            TenderDiscountAmount.visible(totalTenderDiscountAmount);
            TenderDiscountAmount.realValue(totalTenderDiscountAmount);

            NewBalanceWhenPaidWithTenderDiscount.visible(paymentAmount);
            NewBalanceWhenPaidWithTenderDiscount.realValue(paymentAmount);

            // only for new payments
            if (!mcrCustPaymTable.RecId)
            {
                mcrCustPaymTable.PercentAmount = 0;
                mcrCustPaymTable.Amount = paymentAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFromMemory</Name>
				<Source><![CDATA[
    private void refreshFromMemory()
    {
        Object callerForm = element.args().caller();

        if (callerForm && formHasMethod(callerForm, identifierstr(getExternalGiftCard)))
        {
            if (mcrCustPaymTable && mcrCustPaymTable.isExternalGiftCardPayment())
            {
                RetailExternalGiftCard retailExternalGiftCard = callerForm.getExternalGiftCard(mcrCustPaymTable.PaymInfoRecId);

                if (retailExternalGiftCard)
                {
                    GiftCard_M_editGiftCard.text(retailExternalGiftCard.CardNumber);
                    GiftCard_M_Pin.text(retailExternalGiftCard.Pin);
                    GiftCard_M_ExpirationDate.text(retailExternalGiftCard.Expiration);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromMemory</Name>
				<Source><![CDATA[
    private void removeFromMemory()
    {
        Object callerForm = element.args().caller();

        if (callerForm && formHasMethod(callerForm, identifierstr(removeExternalGiftCard)))
        {
            if (mcrCustPaymTable && mcrCustPaymTable.isExternalGiftCardPayment())
            {
                callerForm.removeExternalGiftCard(mcrCustPaymTable.PaymInfoRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingBalance</Name>
				<Source><![CDATA[
    private real getRemainingBalance()
    {
        real balance = 0.0;
        Object callerForm = element.args().caller();

        if (callerForm && formHasMethod(callerForm, identifierstr(getRemainingBalance)))
        {
            balance = callerForm.getRemainingBalance();
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupExternalGiftCard</Name>
				<Source><![CDATA[
    private void setupExternalGiftCard()
    {
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable retailTenderTypeCardTable;
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardProcessors creditCardProcessors;
        RetailExternalGiftCardTable retailExternalGiftCardTable;
        RetailChannelRecId retailChannelRecId = mcrCustPaymTable.Channel;
        CustCurrencyCode custCurrencyCode = mcrCustPaymTable.getCurrency();
        RetailSharedParameters retailSharedParameters;

        boolean foundExternalGiftCard = false;
        retailSharedParameters = RetailSharedParameters::find();

        if (retailSharedParameters && retailSharedParameters.EnableAdvancedExternalGiftCard)
        {
            // Filter by channel, external gift card payment methods
            while
                select cardTypeId, tenderTypeId, Channel, IsPinRequired, IsExpirationDateRequired from retailStoreTenderTypeCardTable
                    where retailStoreTenderTypeCardTable.cardTypeId == MCRCustPaymTable_CardTypeId.text()
                        && retailStoreTenderTypeCardTable.tenderTypeId == Identification_TenderTypeId.text()
                        && retailStoreTenderTypeCardTable.Channel == retailChannelRecId
                    join cardTypeId, cardTypes from retailTenderTypeCardTable
                        where retailTenderTypeCardTable.cardTypeId == retailStoreTenderTypeCardTable.cardTypeId
                            && retailTenderTypeCardTable.cardTypes == RetailCardTypesBase::GiftCard
                    join tenderTypeId, Channel, ConnectorName from retailStoreTenderTypeTable
                        where retailStoreTenderTypeTable.tenderTypeId == retailStoreTenderTypeCardTable.tenderTypeId
                            && retailStoreTenderTypeTable.Channel == retailChannelRecId
                            && retailStoreTenderTypeTable.ConnectorName != ''
                    join ConnectorName, CreditCardProcessors, SecureMerchantProperties from creditCardAccountSetup
                        where creditCardAccountSetup.ConnectorName == retailStoreTenderTypeTable.ConnectorName
                    join RecId from creditCardProcessors
                        where creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors
            {

                // check payment processors properties
                var merchant = creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(false, '');
                CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(merchant);

                CreditCardPaymentProperty property = properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::SupportedCurrencies);
                str supportedCurrencies = property ? ';' + property.parmStringValue() + ';' : '';

                // Check this connector supports the required currency
                if (supportedCurrencies != '' && strScan(supportedCurrencies, ';' + custCurrencyCode + ';', 1, strLen(supportedCurrencies) ))
                {
                    property = properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::SupportedTenderTypes);
                    str supportedTenderTypes = property ? ';' + property.parmStringValue() + ';' : '';

                    // Check this connector supports GiftCard
                    if (supportedTenderTypes != '' && strScan(supportedTenderTypes, ';' + Microsoft.Dynamics.Retail.PaymentSDK.Portable.CardType::GiftCard.ToString() + ';', 1, strLen(supportedTenderTypes) ))
                    {
                        foundExternalGiftCard = true;
                        GiftCard_M_Pin.enabled(retailStoreTenderTypeCardTable.IsPinRequired == NoYes::Yes);
                        GiftCard_M_ExpirationDate.enabled(retailStoreTenderTypeCardTable.IsExpirationDateRequired == NoYes::Yes);
                        GiftCardBalanceRefresh.enabled(true);

                        if (mcrCustPaymTable.PaymInfoTableId == 0 || mcrCustPaymTable.PaymInfoTableId != tableNum(RetailExternalGiftCardTable))
                        {
                            // Insert new record in RetailExternalGiftCardTable
                            retailExternalGiftCardTable.CreditCardProcessors = creditCardAccountSetup.CreditCardProcessors;
                            retailExternalGiftCardTable.HistoricBalance = 0.0;
                            retailExternalGiftCardTable.insert();
                        }
                        else
                        {
                            // Update RetailExternalGiftCardTable
                            ttsbegin;

                            retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId, true);
                        
                            if (retailExternalGiftCardTable)
                            {
                                retailExternalGiftCardTable.CreditCardProcessors = creditCardAccountSetup.CreditCardProcessors;
                                retailExternalGiftCardTable.HistoricBalance = 0.0;
                                retailExternalGiftCardTable.update();
                            }
                            else
                            {
                                retailExternalGiftCardTable.CreditCardProcessors = creditCardAccountSetup.CreditCardProcessors;
                                retailExternalGiftCardTable.HistoricBalance = 0.0;
                                retailExternalGiftCardTable.insert();
                            }

                            ttscommit;
                        }
                    
                        mcrCustPaymTable.PaymInfoTableId = tableNum(RetailExternalGiftCardTable);
                        mcrCustPaymTable.PaymInfoRecId = retailExternalGiftCardTable.RecId;
                        mcrCustPaymTable.CurrencyCode = custCurrencyCode;
                        break;
                    }
                }
            }
        }

        GiftCard_M_Pin.visible(foundExternalGiftCard);
        GiftCard_M_ExpirationDate.visible(foundExternalGiftCard);
        GiftCardBalanceRefresh.visible(foundExternalGiftCard);

        if (!foundExternalGiftCard)
        {
            GiftCard_M_Pin.enabled(false);
            GiftCard_M_ExpirationDate.enabled(false);
            GiftCardBalanceRefresh.enabled(false);

            if (element.args().parmEnumType() == enumnum(MCRAllowAlternateReturnPayments))
            {
                allowAlternateReturnPayments = element.args().parmEnum();
            }

        }
        else
        {
            allowAlternateReturnPayments = false;
            this.callExternalGiftCardBalanceWhenReady();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callExternalGiftCardBalanceWhenReady</Name>
				<Source><![CDATA[
    private void callExternalGiftCardBalanceWhenReady()
    {
        RetailExternalGiftCardTable retailExternalGiftCardTable;

        if (mcrCustPaymTable.PaymInfoTableId != tableNum(RetailExternalGiftCardTable) || mcrCustPaymTable.PaymInfoRecId == 0)
        {
            return;
        }

        if (strLen(GiftCard_M_editGiftCard.text()) == 0)
        {
            return;
        }

        if (GiftCard_M_Pin.enabled() && strLen(GiftCard_M_Pin.text()) == 0)
        {
            return;
        }

        if (GiftCard_M_ExpirationDate.enabled() && strLen(GiftCard_M_ExpirationDate.text()) == 0)
        {
            return;
        }

        // Okay everything has been entered
        retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId, true);

        if (retailExternalGiftCardTable && retailExternalGiftCardTable.HistoricBalance == 0.0)
        {
            // Get the gift card balance and store on RetailExternalGiftCardTable
            RetailExternalGiftCard retailExternalGiftCard = new RetailExternalGiftCard();
            retailExternalGiftCard.RetailExternalGiftCardRecId = mcrCustPaymTable.PaymInfoRecId;
            retailExternalGiftCard.CardNumber = GiftCard_M_editGiftCard.text();
            retailExternalGiftCard.Pin = GiftCard_M_Pin.text();
            retailExternalGiftCard.Expiration = GiftCard_M_ExpirationDate.text();
            retailExternalGiftCard.RequirePin = GiftCard_M_Pin.enabled();
            retailExternalGiftCard.RequireExpirationDate = GiftCard_M_ExpirationDate.enabled();

            MCRCustPaym mcrCustPaym = MCRCustPaym::construct(mcrCustPaymTable);
            mcrCustPaym.paramRetailExternalGiftCard(retailExternalGiftCard);
            real giftCardBalance = mcrCustPaym.processBalance();

            // Handled by CreditCardProviderProce
            ttsbegin;
            retailExternalGiftCardTable.MaskedCardNumber = MCRGiftCard::maskCardNum(GiftCard_M_editGiftCard.text());
            retailExternalGiftCardTable.HistoricBalance = giftCardBalance;
            retailExternalGiftCardTable.update();
            ttscommit;

            GiftCard_M_DisplayAvailableBalance.update();

            // Only calculate amount due if new entry

            if (!mcrCustPaymTable)
            {
                real remainingBalance = this.getRemainingBalance();
                if (remainingBalance >= giftCardBalance)
                {
                    mcrCustPaymTable.Amount = giftCardBalance;
                }
                else
                {
                    mcrCustPaymTable.Amount = remainingBalance;
                }

                Identification_Amount.update();
            }

            listCreditCardAuthTrans.addEnd(retailExternalGiftCard.CreditCardAuthTransRecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>MCRCustPaymTable</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            mcrCustPaymTable.RefTableId = argsRecord.TableId;
            mcrCustPaymTable.RefRecId = argsRecord.RecId;
            mcrCustPaymTable.AllowAlternateReturnPayments = allowAlternateReturnPayments;

            mcrCustPaymTable.setCustAccount();

            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource queryBuildDataSource;

            super();

            if (argsRecord.TableId == tableNum(MCRCustPaymTable))
            {
                // Due to a relation on the MCRCustPaymTable that points to itself
                //  have to reset dynalink to link it to itself by recId
                queryBuildDataSource = this.queryBuildDataSource();
                queryBuildDataSource.clearDynalinks();
                queryBuildDataSource.addRange
                        (fieldNum(MCRCustPaymTable, RecId))
                        .value(SysQuery::value(argsRecord.RecId));
            }
            if (argsRecord.TableId == tableNum(LedgerJournalTrans)
                || argsRecord.TableId == tableNum(MCRInstallmentPlanSalesTable))
            {
                identification_Amount.enabled(false);
            }

            mcrCustPaymTable_ds.cacheAddMethod(tableMethodStr(MCRCustPaymTable, editCreditCard), false);
            mcrCustPaymTable_ds.cacheAddMethod(tableMethodStr(MCRCustPaymTable, displayName), false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        /// <summary>
        /// Override validate write method to set alternate payment for return field before validation
        /// and unlink credit card refunds when card is changed.
        /// </summary>
        public boolean validateWrite()
        {
            if (!element.continueEdit)
            {
                return false;
            }

            boolean ret;

            mcrCustPaymTable.AllowAlternateReturnPayments = allowAlternateReturnPayments;

            if (allowAlternateReturnPayments)
            {
                this.unlinkCCPaymentForEditRefund();
            }

            if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::Check)
            {
                SalesLine salesLine;
                select firstonly RecId from salesLine
                        where salesLine.SalesId == mcrCustPaymTable.salesTable().SalesId &&
                            (salesLine.InventTransIdReturn || salesLine.SalesQty < 0);

                if (salesLine.RecId)
                {
                    mcrCustPaymTable.CustPaymType = MCRCustPaymType::RefundCheck;
                }
            }

            ret = super();

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>unlinkCCPaymentForEditRefund</Name>
						<Source><![CDATA[
        /// <summary>
        /// When refunds are edited with newly created cards by authorized users,
        /// unlink MCRCustPaymTable from the original Sales Order payment.
        /// </summary>
        public void unlinkCCPaymentForEditRefund()
        {
            SalesLine salesLine;
            MCRCustPaymTable defaultCCRefund;
       
            select firstonly RecId from salesLine
            where salesLine.SalesId == mcrCustPaymTable.salesTable().SalesId &&
                    (salesLine.InventTransIdReturn || salesLine.SalesQty < 0);

            if (salesLine && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard && allowAlternateReturnPayments)
            {
                // If the PaymRecId has been edited for an existing RecId then unlink the refund.
                select firstonly RecId
                        from defaultCCRefund
                        where   defaultCCRefund.RecId == mcrCustPaymTable.RecId &&
                                defaultCCRefund.RefTableId == mcrCustPaymTable.RefTableId &&
                                defaultCCRefund.RefRecId == mcrCustPaymTable.RefRecId &&
                                defaultCCRefund.PaymInfoTableId == mcrCustPaymTable.PaymInfoTableId &&
                                defaultCCRefund.PaymInfoRecId != mcrCustPaymTable.PaymInfoRecId;
                if (defaultCCRefund)
                {
                    mcrCustPaymTable.OrigRefundRecID = 0;
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>getAmountCoveredByLoyaltyCardId</Name>
						<Source><![CDATA[
        /// <summary>
        /// This method returns the amount covered by loyalty points for a given payment amount.
        /// </summary>
        /// <param name = "_mcrtCustPaymTable"></param>
        /// Customer payment record.
        /// <returns></returns>
        public display AmountCur getAmountCoveredByLoyaltyCardId(MCRCustPaymTable _mcrtCustPaymTable)
        {
            RetailLoyaltyCardId loyaltyCardNumber = _mcrtCustPaymTable.getLoyaltyCardNumber();
            MCRCustPaymTotals mcrCustPaymTotals;
            if (loyaltyCardNumber == '')
            {
                return 0;
            }

            SalesTable salesTable = _mcrtCustPaymTable.salesTable();
            mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);

            return RetailLoyaltyManager::AmountCoveredByLoyaltyPoints(salesTable, loyaltyCardNumber, mcrCustPaymTotals.getTotalSalesAmount() -  mcrCustPaymTotals.getTotalPaymAmount());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>Amount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Set the percent to 0 when amount is updated to not 0.
            /// </summary>
            public void modified()
            {
                if (mcrCustPaymTable.Amount>0)
                {
                    mcrCustPaymTable.PercentAmount = 0;
                }

                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>CardTypeId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                if (mcrCustPaymTable.PaymInfoTableId == tableNum(RetailExternalGiftCardTable))
                {
                    ttsbegin;

                    // Delete unused RetailExternalGiftCardTable row
                    RetailExternalGiftCardTable::deleteById(mcrCustPaymTable.PaymInfoRecId);

                    ttscommit;

                    mcrCustPaymTable.PaymInfoTableId = 0;
                    mcrCustPaymTable.PaymInfoRecId = 0;
                }

                // Set default values executed, need to refresh
                mcrCustPaymTable_ds.refresh();

                // update properties of controls based upon the payment type
                element.updatePaymTypeControls();

                if (mcrCustPaymTable.RefTableId == tableNum(SalesTable))
                {
                    element.getTenderDiscountAmount();
                }
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                MCRCustPaymTable::lookupCardType(_formControl,
                                                mcrCustPaymTable.TenderTypeId,
                                                mcrCustPaymTable.Channel);
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>PercentAmount</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            /// Set the amount to 0 when percent is updated to not 0.
            /// </summary>
            public void modified()
            {
                if (mcrCustPaymTable.PercentAmount>0)
                {
                    mcrCustPaymTable.Amount = 0;
                }

                super();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>TenderTypeId</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();

                // Set default values executed, need to refresh
                mcrCustPaymTable_ds.refresh();

                // update properties of controls based upon the payment type
                element.updatePaymTypeControls();
                if (mcrCustPaymTable.RefTableId == tableNum(SalesTable))
                {
                    element.getTenderDiscountAmount();
                }

                mcrCustPaymTable_ds.cacheCalculateMethod(tableMethodStr(MCRCustPaymTable, displayName));
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Identification_TenderTypeId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            originalTenderTypeId = mcrCustPaymTable.TenderTypeId;

            using (RetailCommercePaymentsFeatureContext context = RetailCommercePaymentsFeatureContext::construct())
            {
                context.parmCommercePaymentsEnabledForOrder(RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(mcrCustPaymTable.salesTable(), funcName()));

                // refresh DATASOURCE before the lookup call
                mcrCustPaymTable_ds.refresh();
                super();
                // refresh DATASOURCE after the lookup call
                mcrCustPaymTable_ds.refresh();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret;

            // When returning from Lookup WITHOUT changing field value, the field is emptied.
            // In this situation, we reload the original value for TenderType and update control and data source
            if (mcrCustPaymTable.TenderTypeId == originalTenderTypeId)
            {
                Identification_TenderTypeId.text(originalTenderTypeId);
                mcrCustPaymTable.PaymInfoTableId = 0;
                mcrCustPaymTable.PaymInfoRecId = 0;

                mcrCustPaymTable_ds.reread();
                mcrCustPaymTable_ds.refresh();
            }

            if (mcrCustPaymTable.PaymInfoTableId == tableNum(RetailExternalGiftCardTable))
            {
                ttsbegin;

                // Delete unused RetailExternalGiftCardTable row
                RetailExternalGiftCardTable::deleteById(mcrCustPaymTable.PaymInfoRecId);

                ttscommit;

                mcrCustPaymTable.PaymInfoTableId = 0;
                mcrCustPaymTable.PaymInfoRecId = 0;

                GiftCard_M_editGiftCard.text('');
                GiftCard_M_Pin.text('');
                GiftCard_M_ExpirationDate.text('');
            }

            using (RetailCommercePaymentsFeatureContext context = RetailCommercePaymentsFeatureContext::construct())
            {
                context.parmCommercePaymentsEnabledForOrder(RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(mcrCustPaymTable.salesTable(), funcName()));

                ret = super();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MCRCustPaymTable_CardTypeId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret;

            if (mcrCustPaymTable.PaymInfoTableId == tableNum(RetailExternalGiftCardTable))
            {
                ttsbegin;

                // Delete unused RetailExternalGiftCardTable row
                RetailExternalGiftCardTable::deleteById(mcrCustPaymTable.PaymInfoRecId);

                ttscommit;

                mcrCustPaymTable.PaymInfoTableId = 0;
                mcrCustPaymTable.PaymInfoRecId = 0;
            }
    
            ret = super();
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreditCard_M_editCreditCard</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            RefRecId salesTableRecId = mcrCustPaymTable.RefTableId == tableNum(SalesTable) ? mcrCustPaymTable.RefRecId : 0;
            CreditCardCust::lookupCreditCardWithSalesTable(this, mcrCustPaymTable.CustAccount, mcrCustPaymTable.PaymInfoRecId, salesTableRecId);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreateCCBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.addNewCardHolder();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LoyaltyCard_M_editLoyaltyCard</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>leave</Name>
						<Source><![CDATA[
        /// <summary>
        /// Called after loyalty card number has been entered and focus goes out of the textbox.
        /// </summary>
        /// <returns></returns>
        public boolean leave()
        {
            boolean ret;
            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RetailViewProgramDetailbtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// To call the reward point dialog.
        /// </summary>
        public void clicked()
        {
            args paymentArgs;
            FormRun paymentFormRun;

            paymentArgs = new Args();
            // Pass calling record to the Reward point diplay form.
            paymentArgs.record(element.args().record());
            paymentArgs.parm(LoyaltyCard_M_CoveredAmount.valueStr());
            paymentArgs.record(MCRCustPaymTable);
            paymentFormRun = new MenuFunction(menuItemDisplayStr(RetailViewProgramDetails), MenuItemType::Display).create(paymentArgs);

            paymentFormRun.run();
            paymentFormRun.wait();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GiftCard_M_editGiftCard</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// After gift card number modified/entered, lookup to see external gift card and get settings or save internal gift card number.
        /// </summary>
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (mcrCustPaymTable.PaymInfoTableId != tableNum(RetailExternalGiftCardTable))
            {
                mcrCustPaymTable.editRetailGiftCardId(true, GiftCard_M_editGiftCard.text());
            }
            else
            {
                // Okay everything has been entered
                RetailExternalGiftCardTable retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId, true);

                if (GiftCard_M_editGiftCard.text() != '')
                {
                    retailExternalGiftCardTable.MaskedCardNumber = MCRGiftCard::maskCardNum(GiftCard_M_editGiftCard.text());
                }
                else
                {
                    retailExternalGiftCardTable.MaskedCardNumber = '';
                }
                
                ttsbegin;
                retailExternalGiftCardTable.HistoricBalance = 0.0;
                retailExternalGiftCardTable.update();
                ttscommit;

                element.callExternalGiftCardBalanceWhenReady();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GiftCard_M_Pin</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (mcrCustPaymTable.PaymInfoTableId == tableNum(RetailExternalGiftCardTable))
            {
                element.callExternalGiftCardBalanceWhenReady();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GiftCard_M_ExpirationDate</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public boolean modified()
        {
            boolean ret;

            ret = super();

            ret = MCRGiftCard::validateExternalGiftCardExpiration(GiftCard_M_ExpirationDate.text());

            if (ret && mcrCustPaymTable.PaymInfoTableId == tableNum(RetailExternalGiftCardTable))
            {
                element.callExternalGiftCardBalanceWhenReady();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GiftCardBalanceRefresh</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        [Hookable(false)]
        public void clicked()
        {
            super();

            if (mcrCustPaymTable.isExternalGiftCardPayment())
            {
                RetailExternalGiftCardTable retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId, true);

                ttsbegin;
                retailExternalGiftCardTable.HistoricBalance = 0.0;
                retailExternalGiftCardTable.update();
                ttscommit;

                element.callExternalGiftCardBalanceWhenReady();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Generate refund and regenerate redeem point lines of loyalty payment for transaction, if loyalty payment is updated.
        /// </summary>
        public void clicked()
        {
            if (mcrCustPaymTable.IsNonRecurring == NoYes::Yes && !CreditCardCust::checkExist(mcrCustPaymTable.PaymInfoRecId))
            {
                CreditCardProcessors activeCreditCardProcessors = CreditCardProcessors::findActiveProcessor();
                RetailPaymentAccessTokenContext::instance().saveAccessCodeForPaymentLine(mcrCustPaymTable.RecId, accessCode, nonRecurringPropertiesXmlString, activeCreditCardProcessors.RecId, MCRCustPaymTable_CardTypeId.text());
                eventSource.EventWriteRetailNonRecurringTokenMCRCustPaymTableCreated(mcrCustPaymTable.RecId);
                warning("@Retail:RetailNonRecurringTokenNotAuthorizedWarning");
            }

            MCRCustPaymTable mcrCustPaymTableAux = MCRCustPaymTable::findByRecID(MCRCustPaymTable_ds.cursor().RecId, true);
            if (mcrCustPaymTableAux)
            {
                if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::LoyaltyCard && 
                   (mcrCustPaymTableAux.PostedAmount != 0 && mcrCustPaymTableAux.Amount > mcrCustPaymTableAux.PostedAmount))
                {
                    // Set the parmMCRPaymRecId in RetailLoyaltyManager_Extended parameters so it can be used to query the associated redeem payment.
                    // record in RetailLoyaltyRewardPointTrans.
                    RetailLoyaltyManager_ExtendedParameters retailLoyaltyManager_ExtendedParameters = RetailLoyaltyManager::extendedParameters;
                    retailLoyaltyManager_ExtendedParameters.parmMCRPaymRecId(mcrCustPaymTableAux.RecId);

                    ttsbegin;

                        // Create Refund line and refund points.
                        RetailLoyaltyManager::GenerateAndPostRewardPointsForRemovedPayment(mcrCustPaymTableAux.salesTable(), mcrCustPaymTableAux.getLoyaltyCardNumber());

                        // Set PostedAmount as 0, after generate refund redeem point lines of loyalty payment for transaction.

                        mcrCustPaymTableAux.PostedAmount = 0;
                        mcrCustPaymTableAux.update();

                    ttscommit;
                }
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CancelButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove a payment, if it is possible to do so.
        /// </summary>
        public void clicked()
        {
            MCRCustPaymTable mcrCustPaymTableAux = MCRCustPaymTable::findByRecID(MCRCustPaymTable_ds.cursor().RecId, true);
            if (mcrCustPaymTableAux)
            {
                if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::LoyaltyCard)
                {
                    // Set the parmMCRPaymRecId in RetailLoyaltyManager_Extended parameters so it can be used to query the associated redeem payment
                    // record in RetailLoyaltyRewardPointTrans.
                    RetailLoyaltyManager_ExtendedParameters retailLoyaltyManager_ExtendedParameters = RetailLoyaltyManager::extendedParameters;
                    retailLoyaltyManager_ExtendedParameters.parmMCRPaymRecId(mcrCustPaymTableAux.RecId);

                    // Create Refund line and refund points
                    RetailLoyaltyManager::GenerateAndPostRewardPointsForRemovedPayment(mcrCustPaymTableAux.salesTable(), mcrCustPaymTableAux.getLoyaltyCardNumber());

                    mcrCustPaymTableAux.delete();
                    MCRCustPaymTable_ds.reread();
                    element.doRefresh();
                }
            }
            else
            {
                if (mcrCustPaymTable.isExternalGiftCardPayment())
                {
                    // Assume new record so remove external gift card table record
                    ttsbegin;

                    // Delete unused RetailExternalGiftCardTable row
                    RetailExternalGiftCardTable::deleteById(mcrCustPaymTable.PaymInfoRecId);

                    ttscommit;

                    mcrCustPaymTable.PaymInfoTableId = 0;
                    mcrCustPaymTable.PaymInfoRecId = 0;

                }
            }

            super();

            // Make sure all CreditCardAuthTrans point to this MCRCustPaym
            ListIterator myIterator = new ListIterator(listCreditCardAuthTrans);
            while (myIterator.more())
            {
                int64 recId = myIterator.value();
                CreditCardAuthTrans creditCardAuthTrans = CreditCardAuthTrans::find(recId, true);

                if (creditCardAuthTrans)
                {
                    ttsbegin;
                    creditCardAuthTrans.delete();
                    ttscommit;
                }

                myIterator.next();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>MCRCustPaymTable</Name>
			<Table>MCRCustPaymTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Channel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isPlanRefund</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrepay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumAuthRetry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnAccountAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigRefundRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInfoRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInfoTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSchedID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TenderTypeId</DataField>
					<Mandatory>Yes</Mandatory>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowDelete>No</AllowDelete>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS114328</Caption>
		<DataSource xmlns="">MCRCustPaymTable</DataSource>
		<Frame xmlns="">Dialog</Frame>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ActionPaneButtons</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
					</AxFormControl>
				</Controls>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TenderCardGrp</Name>
						<ElementPosition>613566756</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>Identification_TenderTypeId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>TenderTypeId</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MCRCustPaymTable_CardTypeId</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CardTypeId</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Identification_M_displayName</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>869219571</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>displayName</DataMethod>
						<DataSource>MCRCustPaymTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CreditCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CreditCard_M_editCreditCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editCreditCard</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<Label>@SYS13864</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateCCBtn</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1550960411</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>ImageOnly</ButtonDisplay>
								<NormalImage>New</NormalImage>
								<SaveRecord>No</SaveRecord>
								<Text>@MCR40429</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>LoyaltyCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>LoyaltyCard_M_editLoyaltyCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<HelpText>@RET4542</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>editRetailLoyaltyCardId</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<Label>@RET4337</Label>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>RetailViewProgramDetailbtn</Name>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<ButtonDisplay>TextOnly</ButtonDisplay>
								<Style>Link</Style>
								<Text>@Retail:ViewProgramDetailsId</Text>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>LoyaltyCard_M_CoveredAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getAmountCoveredByLoyaltyCardId</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<Label>@Retail:AmountCoveredByLoyaltyPoints</Label>
							</AxFormControl>
						</Controls>
						<FrameType>None</FrameType>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GiftCardGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCard_M_editGiftCard</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS13864</Label>
								<LookupButton>Never</LookupButton>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCard_M_Pin</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RetailIsPinRequired</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCard_M_ExpirationDate</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Enabled>No</Enabled>
								<HelpText>@Retail:RetailExpirationFormatHelp</HelpText>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<ExtendedDataType>RetailIsExpirationDateRequired</ExtendedDataType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>BalanceGroup</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GiftCard_M_DisplayAvailableBalance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayGiftCardAvailableBalance</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
										<Label>@MCR11164</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GiftCardBalanceRefresh</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<HelpText>@Retail:RetailRefreshGiftCardBalance</HelpText>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<NormalImage>Refresh</NormalImage>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>GiftCardPolicy</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayGiftCardPolicyDescription</DataMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<MultiLine>Yes</MultiLine>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>CheckGroup</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CheckNumber</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<DataField>CheckNumber</DataField>
								<DataSource>MCRCustPaymTable</DataSource>
								<Label>@SYS13864</Label>
							</AxFormControl>
						</Controls>
						<Caption>@MCR12176</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Identification_PercentAmount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1721395621</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>PercentAmount</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>Identification_Amount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1891830831</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>Amount</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
						<NoOfDecimals>-1</NoOfDecimals>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>MCRCustPaymTable_IsPrepay</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2019657238</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataField>IsPrepay</DataField>
						<DataSource>MCRCustPaymTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TenderDiscount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>TenderDiscountAmount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:RetailTenderDiscountAmountLabel</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>NewBalanceWhenPaidWithTenderDiscount</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Real</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@Retail:NewBalanceWhenPaidWithTenderDiscountLabel</Label>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<ElementPosition>1610612734</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>