<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>PlInventPackageParm</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class PlInventPackageParm extends FormRun
{
}
]]></Source>
			</Method>
			<Method>
				<Name>allowCreate</Name>
				<Source><![CDATA[
    public boolean allowCreate()
    {
        SalesTable     salesTable;
        SalesParmTable salesParmTable;

        boolean    ret = false;

        switch (element.args().dataset())
        {
            case tablenum(SalesTable)       :
                salesTable = element.args().record() as SalesTable;
                ret = salesTable.ProjId ? false : true;
                break;

            case tablenum(SalesParmTable)   :
                salesParmTable = element.args().record() as SalesParmTable;
                ret = salesParmTable.ProjId ? false : true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        QueryBuildDataSource qbds;
        SalesId              salesId;
        SalesParmTable       salesParmTableLocal;

        super();

        inventPackageParm_ds.allowCreate(element.allowCreate());

        switch (this.args().dataset())
        {
            case tablenum(SalesTable):
            case tablenum(SalesParmTable):
                packingUnitFromSalesLine.visible(false);
                packingUnitFromSalesLineGrid.visible(false);

                qbds = inventPackageParm_ds.query().dataSourceTable(tablenum(PlInventPackageParm));
                qbds.clearRanges();
                qbds.clearDynalinks();

                if (this.args().dataset() == tablenum(SalesTable))
                {
                    salesId = this.args().record().(fieldnum(SalesTable, SalesId));
                    qbds.addSortField(fieldnum(PlInventPackageParm, RefTableId), SortOrder::Descending);
                    qbds.addSortField(fieldnum(PlInventPackageParm, PackageId), SortOrder::Ascending);
                    qbds.addRange(fieldnum(PlInventPackageParm, RefTableId)).
                        value(queryValue(this.args().dataset()));
                    qbds.addRange(fieldnum(PlInventPackageParm, RefTableId)).
                        value(queryValue(tablenum(SalesLine)));
                }
                else
                {
                    salesId = this.args().record().(fieldnum(SalesParmTable, SalesId));
                    qbds.addRange(fieldnum(PlInventPackageParm, RefTableId)).
                        value(queryValue(this.args().dataset()));
                    qbds.addRange(fieldnum(PlInventPackageParm, RefTableId)).
                        value(queryValue(tablenum(SalesParmLine)));

                    salesParmTableLocal = this.args().record();
                    qbds = this.addRangeSalesParmLine(qbds, salesParmTableLocal);
                    qbds.addRange(fieldnum(PlInventPackageParm, RefRecId)).value(int642str(salesParmTableLocal.RecId));
                }
                qbds.addRange(fieldnum(PlInventPackageParm, SalesId)).value(queryValue(salesId));
                break;

            case tablenum(SalesLine):
            case tablenum(SalesParmLine):
                itemIdGrid.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeSalesParmLine</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addRangeSalesParmLine(QueryBuildDataSource _queryBuildDataSource, SalesParmTable _salesParmTable)
    {
        SalesParmLine salesParmLineLocal;

        while select RecId from salesParmLineLocal
            where salesParmLineLocal.ParmId     == _salesParmTable.ParmId &&
                  salesParmLineLocal.TableRefId == _salesParmTable.TableRefId
        {
            _queryBuildDataSource.addRange(fieldnum(PlInventPackageParm, RefRecId)).value(int642str(salesParmLineLocal.RecId));
        }

        return _queryBuildDataSource;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>InventPackageParm</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int     ret = super();
            boolean lineRecordCalledFromHeader = (element.args().dataset() == tablenum(SalesTable)      ||
                                                  element.args().dataset() == tablenum(SalesParmTable)) &&
                                                  inventPackageParm.itemId();

            inventPackageParm_ds.allowCreate(element.allowCreate());
            inventPackageParm_ds.allowDelete(! lineRecordCalledFromHeader);
            inventPackageParm_ds.allowEdit  (! lineRecordCalledFromHeader);

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>deliveredInTotal</Name>
						<Source><![CDATA[
        display Qty deliveredInTotal(PlInventPackageParm _inventPackageParm)
        {
            Qty            qty;
            SalesTable     salesTable;
            SalesParmTable salesParmTable;
            SalesLine      salesLine;
            SalesParmLine  salesParmLine;
            ;

            switch (_inventPackageParm.RefTableId)
            {
                case tablenum(SalesLine):
                    salesLine = SalesLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::deliveredInTotal(salesLine.TableId,
                                                                 salesLine.RecId,
                                                                 _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmLine):
                    salesParmLine = SalesParmLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::deliveredInTotal(salesParmLine.salesLine().TableId,
                                                                 salesParmLine.salesLine().RecId,
                                                                 _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesTable):
                    salesTable = SalesTable::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::deliveredInTotal(salesTable.TableId,
                                                                 salesTable.RecId,
                                                                 _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmTable):
                    salesParmTable = SalesParmTable::findRecId_W(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::deliveredInTotal(salesParmTable.salesTable().TableId,
                                                                 salesParmTable.salesTable().RecId,
                                                                 _inventPackageParm.PackageId);
                    break;
            }

            return qty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            Common callerRecord = element.args().record();

            super();

            if (callerRecord)
            {
                inventPackageParm.RefTableId = callerRecord.TableId;
                inventPackageParm.RefRecId   = callerRecord.RecId;
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>invoicedInTotal</Name>
						<Source><![CDATA[
        display Qty invoicedInTotal(PlInventPackageParm _inventPackageParm)
        {
            Qty            qty;
            SalesLine      salesLine;
            SalesParmLine  salesParmLine;
            SalesTable     salesTable;
            SalesParmTable salesParmTable;
            ;

            switch (_inventPackageParm.RefTableId)
            {
                case tablenum(SalesLine):
                    salesLine = SalesLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::invoicedInTotal(salesLine.TableId,
                                                                salesLine.RecId,
                                                                _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmLine):
                    salesParmLine = SalesParmLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::invoicedInTotal(salesParmLine.salesLine().TableId,
                                                                salesParmLine.salesLine().RecId,
                                                                _inventPackageParm.PackageId);

                    break;

                case tablenum(SalesTable):
                    salesTable = SalesTable::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::invoicedInTotal(salesTable.TableId,
                                                                salesTable.RecId,
                                                                _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmTable):
                    salesParmTable = SalesParmTable::findRecId_W(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::invoicedInTotal(salesParmTable.salesTable().TableId,
                                                                salesParmTable.salesTable().RecId,
                                                                _inventPackageParm.PackageId);
                    break;
            }

            return qty;
        }

]]></Source>
					</Method>
					<Method>
						<Name>remainSalesFinancial</Name>
						<Source><![CDATA[
        display Qty remainSalesFinancial(PlInventPackageParm _inventPackageParm)
        {
            Qty            qty;
            SalesLine      salesLine;
            SalesParmLine  salesParmLine;
            SalesTable     salesTable;
            SalesParmTable salesParmTable;
            ;

            switch (_inventPackageParm.RefTableId)
            {
                case tablenum(SalesLine):
                    salesLine = SalesLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::remainSalesFinancial(salesLine.TableId,
                                                                     salesLine.RecId,
                                                                     _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmLine):
                    salesParmLine = SalesParmLine::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::remainSalesFinancial(salesParmLine.salesLine().TableId,
                                                                     salesParmLine.salesLine().RecId,
                                                                     _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesTable):
                    salesTable = SalesTable::findRecId(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::remainSalesFinancial(salesTable.TableId,
                                                                     salesTable.RecId,
                                                                     _inventPackageParm.PackageId);
                    break;

                case tablenum(SalesParmTable):
                    salesParmTable = SalesParmTable::findRecId_W(_inventPackageParm.RefRecId);
                    qty = PlInventPackageTrans::remainSalesFinancial(salesParmTable.salesTable().TableId,
                                                                     salesParmTable.salesTable().RecId,
                                                                     _inventPackageParm.PackageId);
                    break;
            }

            return qty;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PackageQty</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean         ret;
                SalesParmTable  salesParmTable;
                SalesLine       salesLine;
                SalesParmLine   salesParmLine;
                Qty             qty;

                ret = super();

                switch (element.args().dataset())
                {
                    case tablenum(SalesTable):
                        if (inventPackageParm.PackageQty < 0)
                        {
                            if (PlInventPackageTrans::invoicedInTotal(element.args().record().TableId,
                                                                      element.args().record().RecId,
                                                                      inventPackageParm.PackageId) < abs(inventPackageParm.PackageQty))
                            {
                                ret = checkFailed("@GLS111505");
                            }
                        }
                        break;

                    case tablenum(SalesParmTable):
                        salesParmTable = element.args().record();

                        if (salesParmTable.Ordering == DocumentStatus::PackingSlip)
                        {
                            if (inventPackageParm.PackageQty < 0 &&
                                PlInventPackageTrans::invoicedInTotal(salesParmTable.salesTable().TableId,
                                                                      salesParmTable.salesTable().RecId,
                                                                      inventPackageParm.PackageId) < abs(inventPackageParm.PackageQty))
                            {
                                ret = checkFailed("@GLS111505");
                            }
                        }
                        else
                        {
                            if (abs(PlInventPackageTrans::remainSalesFinancial(salesParmTable.salesTable().TableId,
                                                                               salesParmTable.salesTable().RecId,
                                                                               inventPackageParm.PackageId)) < abs(inventPackageParm.PackageQty))
                            {
                                ret = checkFailed("@GLS111502");
                            }
                        }
                        break;

                    case tablenum(SalesLine):
                        salesLine = element.args().record();
                        qty = salesLine.SalesDeliverNow ?
                              salesLine.SalesDeliverNow :
                              salesLine.RemainInventPhysical;

                        if (sign(qty) != sign(inventPackageParm.PackageQty))
                        {
                            ret = checkFailed("@GLS111528");
                        }
                        if (InventPackagingUnit::calcPackingUnitQty(salesLine.PackingUnit,
                                                                    abs(qty),
                                                                    salesLine.ItemId,
                                                                    salesLine.inventDim()) < abs(inventPackageParm.PackageQty))
                        {
                            ret = checkFailed("@GLS111520");
                        }
                        if (inventPackageParm.PackageQty < 0 &&
                            PlInventPackageTrans::invoicedForCreditNote(salesLine.InventTransIdReturn) < abs(inventPackageParm.PackageQty))
                        {
                            ret = checkFailed("@GLS111505");
                        }
                        break;

                    case tablenum(SalesParmLine):
                        salesParmLine = element.args().record();
                        if (sign(salesParmLine.InventNow) != sign(inventPackageParm.PackageQty))
                        {
                            ret = checkFailed("@GLS111528");
                        }
                        if (InventPackagingUnit::calcPackingUnitQty(salesParmLine.PackingUnit,
                                                                    abs(salesParmLine.InventNow),
                                                                    salesParmLine.ItemId,
                                                                    salesParmLine.inventDim()) < abs(inventPackageParm.PackageQty))
                        {
                            ret = checkFailed("@GLS111520");
                        }
                        if (salesParmLine.salesParmTable().Ordering == DocumentStatus::PackingSlip)
                        {
                            if (inventPackageParm.PackageQty < 0 &&
                                PlInventPackageTrans::invoicedForCreditNote(salesParmLine.salesLine().InventTransIdReturn) < abs(inventPackageParm.PackageQty))
                            {
                                ret = checkFailed("@GLS111505");
                            }
                        }
                        else
                        {
                            if (abs(PlInventPackageTrans::remainSalesFinancial(salesParmLine.salesLine().TableId,
                                                                               salesParmLine.salesLine().RecId,
                                                                               inventPackageParm.PackageId)) < abs(inventPackageParm.PackageQty))
                            {
                                ret = checkFailed("@GLS111502");
                            }
                        }
                        break;
                }

                return ret;
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>InventPackageParm</Name>
			<Table>PlInventPackageParm</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackageQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<Index>RefRecIdx</Index>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@GLS110318</Caption>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<TitleDataSource xmlns="">InventPackageParm</TitleDataSource>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ItemIdGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>itemId</DataMethod>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>packingUnitFromSalesLineGrid</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>packingUnitFromSalesLine</DataMethod>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InventPackageParm_PackageId</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackageId</DataField>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InventPackageParm_PackingUnitQty</Name>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackageQty</DataField>
										<DataSource>InventPackageParm</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InvoicedInTotal</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>InvoicedInTotal</DataMethod>
										<DataSource>InventPackageParm</DataSource>
										<Label>@SYS14205</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>RemainSalesFinancial</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>remainSalesFinancial</DataMethod>
										<DataSource>InventPackageParm</DataSource>
										<Label>@SYS22380</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>DeliveredInTotal</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1908874352</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>deliveredInTotal</DataMethod>
										<DataSource>InventPackageParm</DataSource>
										<Label>@SYS1316</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<DataSource>InventPackageParm</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage1</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Identification</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_SalesId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesId</DataField>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_M_itemId</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>itemId</DataMethod>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Identification</DataGroup>
								<DataSource>InventPackageParm</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Qty</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Qty_PackageId</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackageId</DataField>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Qty_PackageQty</Name>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PackageQty</DataField>
										<DataSource>InventPackageParm</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>packingUnitFromSalesLine</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>packingUnitFromSalesLine</DataMethod>
										<DataSource>InventPackageParm</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Qty</DataGroup>
								<DataSource>InventPackageParm</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>