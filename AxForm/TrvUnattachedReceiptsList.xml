<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TrvUnattachedReceiptsList</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class TrvUnattachedReceiptsList extends FormRun implements TrvIFormRefreshWorker, TrvIUpdateEnabled
{
    TrvUnreconciledExpenseTransaction   unreconciledReceiptContainer;
    TrvWorkerParameter                  trvWorkerParameter;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures the right worker context is set on the form and the right buttons are visible for the user on form load.
    /// </summary>
    public void init()
    {
        TrvHcmWorkerRecId currentWorkerRecId = HcmWorkerLookup::currentWorker();

        super();

        if (currentWorkerRecId == 0)
        {
            // The form must close because the user is not a worker.
            this.lifecycleHelper().cancelFormInitialization(Exception::Error, TrvListPageHelper::getCurrentUserNotWorkerErrorMessage(DocuValue_DS.table()));
        }
        else
        {
            // By default, set the worker context to the worker associated to the current user.
            this.parmTrvWorkerParameter(TrvWorkerParameter::newStandard(currentWorkerRecId, CompanyInfo::current()));

            // Ensure we get the receipts for the current worker.
            this.updateDataSetWithWorker();

            // Show the Expense reports for worker only if the current user is a delegate.
            ReceiptsFor.visible(TrvAppEmplSub::existForCurrentUser());

            this.refreshFormCaption();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseReportButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Make the expense report create button visible based on whether the current worker can create new records.
    /// </summary>
    private void setExpenseReportButtonVisibility()
    {
        boolean canCreate  = TrvAccessHelper::canCreateNewTransactions(this.parmTrvWorkerParameter().parmHcmWorkerRecId());

        CreateExpenseReport.visible(canCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataSetWithWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the query on the form so that we get the receipts for the correct worker based on delegates functionality.
    /// </summary>
    private void updateDataSetWithWorker()
    {
        QueryBuildRange refTableIdRange, refRecIdRange;

        // Unattached receipts are attached to a "dummy" unreconciled expense record. We get or create such record for the worker context.
        unreconciledReceiptContainer = TrvReceiptsHelper::getOrCreateUnreconciledReceiptContainer(this.parmTrvWorkerParameter().parmHcmWorkerRecId());

        // Add range to the query based on the current worker context.
        QueryBuildDataSource docuRefDs =  DocuRef_DS.query().dataSourceName(tableStr(DocuRef));

        refTableIdRange = SysQuery::findOrCreateRange(docuRefDs, fieldnum(DocuRef, RefTableId));
        refTableIdRange.value(queryValue(tablenum(TrvUnreconciledExpenseTransaction)));
        refTableIdRange.status(RangeStatus::Hidden);

        refRecIdRange = SysQuery::findOrCreateRange(docuRefDs, fieldnum(DocuRef, RefRecId));
        refRecIdRange.value(queryValue(unreconciledReceiptContainer.RecId));
        refRecIdRange.status(RangeStatus::Hidden);

        DocuRef_DS.executeQuery();

        this.setExpenseReportButtonVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvWorkerParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TrvWorkerParameter</c> parameter.
    /// </summary>
    /// <param name="_trvWorkerParameter">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>TrvWorkerParameter</c> parameter.
    /// </returns>
    public TrvWorkerParameter parmTrvWorkerParameter(TrvWorkerParameter _trvWorkerParameter = trvWorkerParameter)
    {
        trvWorkerParameter = _trvWorkerParameter;
        return trvWorkerParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Will set the correct caption based on whether the current worker context is a delegate or not.
    /// </summary>
    private void refreshFormCaption()
    {
        TrvFormHelper::refreshFormCaption(element, element.parmTrvWorkerParameter(), "@Expense:UnattachedReceipts", "@Expense:ReceiptsForWorker");
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseWorkerContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update the worker context, related filters and legal entity on expenses.
    /// </summary>
    /// <param name = "_workerParameter">
    ///     An instance of a <c>TrvWorkerParameter</c>
    /// </param>
    public void updateExpenseWorkerContext(TrvWorkerParameter _workerParameter)
    {
        if (_workerParameter != null)
        {
            // Update the current company if it has changed as per worker
            TrvFormHelper::setCompanyContext(CompanyInfo::findRecId(_workerParameter.parmLegalEntity()).DataArea);

            if ( _workerParameter.parmHcmWorkerRecId())
            {
                // Keep the worker parameter object upto date
                this.parmTrvWorkerParameter(_workerParameter);

                // Add ranges to the datasources for the worker
                this.updateDataSetWithWorker();
            }
        }

        this.refreshFormCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form and possibly bubble up the call.
    /// </summary>
    public void updateForm()
    {
        TrvIUpdateEnabled updateEnabledCaller;

        DocuRef_DS.research(true);

        if (element.args())
        {
            updateEnabledCaller = element.args().caller() as TrvIUpdateEnabled;
            if (updateEnabledCaller)
            {
                updateEnabledCaller.updateForm();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>DocuRef</Name>
				<Methods>
					<Method>
						<Name>getThumbnail</Name>
						<Source><![CDATA[
        /// <summary>
        /// Get the thumbnail container for the receipt image.
        /// </summary>
        public display container getThumbnail(DocuRef _docuRef)
        {
            return DocumentManagement::getThumbnailAsContainer(_docuRef);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CreateExpenseReport</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Makes the call to the create expense report form with the selected receipts to be attached.
        /// </summary>
        public void clicked()
        {
            Args                            args = new Args();
            List                            selectedUnreconciledReceipts;
            TrvNewExpenseReportParameter    newExpenseReportParameter = new TrvNewExpenseReportParameter();

            super();
            selectedUnreconciledReceipts = TrvExpenseReportsListFormHelper::getSelectedReceipts(DocuRef_DS);
            newExpenseReportParameter.parmUnreconciledReceipts(selectedUnreconciledReceipts);
            newExpenseReportParameter.parmTrvWorkerParameter(element.parmTrvWorkerParameter());

            args.caller(element);
            args.openMode(OpenMode::New);
            args.parmObject(newExpenseReportParameter);

            // Call the form to create a new expense report.
            new MenuFunction(MenuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocuRef</Name>
			<Table>DocuRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Author</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_AuthorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_BusRelAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEL_PartyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuTemplate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncyclopediaItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smm.smmEMailEntryID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smm.smmEMailStoreID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smm.smmTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DocuValue</Name>
			<Table>DocuValue</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>File</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCRDocuSubject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OriginalFileName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Path</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DocuRef</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@Expense:UnattachedReceipts</Caption>
		<DataSource xmlns="">DocuValue</DataSource>
		<Pattern xmlns="">ListPage</Pattern>
		<PatternVersion xmlns="">UX7 1.0</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">ListPage</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseReport</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>CreateExpenseReport</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>Button</Type>
								<FormControlExtension
									i:nil="true" />
								<MultiSelect>Yes</MultiSelect>
								<Text>@Expense:NewExpenseReport</Text>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ExpenseReportWorker</Name>
						<Type>ButtonGroup</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormMenuFunctionButtonControl">
								<Name>ReceiptsFor</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>MenuFunctionButton</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<MenuItemName>TrvWorkerPickerReceipts</MenuItemName>
								<MultiSelect>No</MultiSelect>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>QuickFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>UnattachedReceiptsList</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
									<Value>ReceiptFileName</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>UnattachedReceiptsList</Name>
				<AllowEdit>No</AllowEdit>
				<ExtendedStyle>cardList</ExtendedStyle>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>UnreconciledReceipt</Name>
						<ExtendedStyle>BusinessCard</ExtendedStyle>
						<Pattern>BusinessCardThreeFields</Pattern>
						<PatternVersion>1.0</PatternVersion>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>ReceiptThumbnail</Name>
								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
								<Type>Image</Type>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>getThumbnail</DataMethod>
								<DataSource>DocuRef</DataSource>
								<Label>@SYS101278</Label>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReceiptFileName</Name>
								<ExtendedStyle>Heading</ExtendedStyle>
								<PreviewPartRef>TrvReceiptPreview</PreviewPartRef>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<DataField>Name</DataField>
								<DataSource>DocuRef</DataSource>
								<ShowLabel>No</ShowLabel>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>None</ArrangeMethod>
						<DataSource>DocuValue</DataSource>
						<Style>Card</Style>
					</AxFormControl>
				</Controls>
				<DataSource>DocuValue</DataSource>
				<Style>List</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>