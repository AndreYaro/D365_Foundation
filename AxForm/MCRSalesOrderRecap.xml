<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>MCRSalesOrderRecap</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
/// <summary>
///     The <c>MCRSalesOrderRecap</c> form will show totals and other recap type data to the user.
/// </summary>
/// <remarks>
/// Once the user has seen this data they can choose to go back and modify
///     the order, or select okay which will complete the order.
/// </remarks>
public class MCRSalesOrderRecap extends FormRun
{
    SalesTable                      salesTableVar;

    MCRSalesOrderTotals             mcrSalesOrderTotals;
    MCRCustPaymTotals               mcrCustPaymTotals;
    MCRContinuityLineEval           mcrContinuityLineEval;
    boolean                         isReturn;

    boolean                         isInstallment;
    boolean                         isOrderCancellation;
    Map                             externalGiftCardMap = new Map(Types::Int64, Types::Class);
    private const str givexGiftCardProvider = 'givex';
    private const str adyenPaymentConnector = 'Dynamics 365 Payment Connector for Adyen';

}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        //The enum value in the form args is set to NoYes::Yes to indicate that
        //     the user selected the option to modify the sales order.
        //     Closing the sales order recap utilizing the 'x' or 'esc' should bring you back to the
        //     sales order without changing the status of the order.
        boolean ret;
        element.args().parmEnum(NoYes::Yes);
        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustPaymForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the customer payments form, to allow the user to view and
    ///     modify payments for the sales order.
    /// </summary>
    void displayCustPaymForm()
    {
        Args paymentArgs;

        FormRun paymentFormRun;

        paymentArgs = new Args();
        paymentArgs.record(salesTable);

        paymentFormRun = new MenuFunction(menuitemDisplayStr(MCRCustPaymTable), MenuItemType::Display).create(paymentArgs);

        paymentFormRun.run();
        paymentFormRun.wait();

        salesTable_ds.refresh();

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dspWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the total weight.
    /// </summary>
    /// <returns>
    /// The total weight.
    /// </returns>
    display Weight dspWeight()
    {
        InventTable     inventTable;
        SalesLine       salesLine;
        Weight          totalWeight;

        while select QtyOrdered from salesLine
            where salesLine.SalesId == salesTable.SalesId
            join NetWeight from inventTable
            where inventTable.ItemId == salesLine.ItemId
        {
            totalWeight += salesLine.QtyOrdered * inventTable.NetWeight;
        }
        return totalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        MCRSourceCodeSetup          sourceCodeSetup;
        str                         message;
        boolean                     showModifyOrderButton;
        boolean                     allowDelete;
        Catalog                     catalog;
        // To improve performance, moved call from adjustments
        //                      to here rather than execute query
        MCRSalesOrderRecapConfigure salesOrderRecapConfigure;
        boolean                     showTotalsOnly;
        #define.Default('Default')

        super();

        if (element.args().parmObject())
        {
            salesOrderRecapConfigure = element.args().parmObject();
            showModifyOrderButton = salesOrderRecapConfigure.parmShowModifyOrderButton();

            // This is currently only set by Forms\SalesTable.MCRComplete
            // and Forms\MCRHoldCodeTrans.displayOrderTotals
            showTotalsOnly = salesOrderRecapConfigure.parmShowTotalsOnly();

            // This is currently only set to true in form MCRSalesOrderCancellation.
            isOrderCancellation = salesOrderRecapConfigure.parmIsOrderCancellation();

            modifyOrderButton.visible(showModifyOrderButton);
            MCRCustPaymInstallment.enabled(isInstallment);
        }
        else
        {
            throw error("@SYS22539");
        }

        // Load the salesTable even if it is a mail batch id. Initially the code
        // was within the if statement below.
        salesTable_ds.executeQuery();

        ttsbegin;
        if (salesTable.SalesStatus == SalesStatus::Backorder)
        {
            salesTable.updateFinalDisc();
        }

        if (!salesTable.isCompletedCallCenterOrder())
        {
            salesTable.calculateTieredCharges();
        }

        salesTable.update();
        ttscommit;

        element.parmMCRSalesOrderTotals(new MCRSalesOrderTotals(salesTable));

        if (CustParameters::find().CreditMaxCheck == TypeOfCreditmaxCheck::BalanceAll)
        {
            salesTable.setEstimate(element.parmMCRSalesOrderTotals().getSalesTotals());
        }
        else
        {
            salesTable.setEstimate();
        }

        // This code inserts the appropraite messages into the window
        mcrSalesTable = salesTable.mcrSalesTable();
        sourceCodeSetup = MCRSourceCodeSetup::find(mcrSalesTable.SourceId);
        catalog = Catalog::find(sourceCodeSetup.Catalog);

        message = MCRMessageAssociation::getFullMessage(catalog.TableId,
                                                        catalog.RecId,
                                                        MCRMessageTiming::End,
                                                        #Default,
        strFmt("@SYS11258" + ': ' + mcrSalesTable.SourceId));

        if (!message)
        {
            message = MCRMessageAssociation::getFullMessage(salesTable.TableId,
                                                            0,
                                                            MCRMessageTiming::End);
        }

        messageWindow.text(message);

        // Make the Accept Decline button invisible
        acceptDeclineButton.visible(false);

        if (MCROrderParameters::find().mcrFraudCheck)
        {
            manualFraudHold.enabled(true);
        }
        else
        {
            manualFraudHold.enabled(false);
        }

        // Display the totals for continuity only if this order is a
        // continuity order or a continuity child
        if (!mcrSalesTable.ContinuityOrder && !mcrSalesTable.ContinuityChild)
        {
            continuityTotals.visible(false);
            continuityTotals.enabled(false);
        }
        else
        {
            continuityTotals.visible(true);
            continuityTotals.enabled(true);
        }

        if (showTotalsOnly)
        {
            element.mcrTotalsMode();
        }

        // Enable and disable the delete button based on the Allow SO Deletion class
        allowDelete = MCRAllowSODeletion::allowSalesOrderDeletion(salesTable);
        delete.enabled(allowDelete);
        salesTable_ds.allowDelete(allowDelete);

        // Only display out of balance if it is out of balance
        salesTable_MCRPaymOutOfBalance.visible(mcrSalesTable.PaymOutOfBalance != MCRPaymOutOfBalance::None);

        // Use the new query that uses either CustAccount or InvoiceAccount to retrieve the payments.
        if (salesTable.InvoiceAccount)
        {
            MCRCustPaymTable_DS.query(MCRCustPaymTable::getPaymentsQueryUsingCustAccountOnSalesOrder(salesTable));
        }

        if (checkExternalGiftCardProviderFlight::instance().isEnabled()
            && MCRSalesLine::containsVirtualExternalGiftCard(salesTable))
        {
            str provider = CreditCardProcessors::getGiftCardProviderByConnector(adyenPaymentConnector);

            // Givex issued virtual gift cards doesn't support payment made using Adyen payment connector.
            if (provider == givexGiftCardProvider)
            {
                error ("@Retail:VirtualGivexNotSupportedError");
            }
        }

        if (RetailMCRSalesOrderRecapDisableChargeButtonFlight::instance().isEnabled())
        {
            MiscCharges.enabled(salesTable.SalesStatus == SalesStatus::Backorder && salesTable.mcrOrderStopped);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrTotalsMode</Name>
				<Source><![CDATA[
    void mcrTotalsMode()
    {
        general.visible(false);
        salesTable_SalesId.visible(false);
        statusGroup.visible(false);
        messageWindow.visible(false);
        actionsButtonGroup.visible(false);

        // shorten title to make it fit
        element.design().caption("@SYS80378");
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInstallment</Name>
				<Source><![CDATA[
    boolean parmIsInstallment(boolean _isInstallment = isInstallment)
    {
        isInstallment = _isInstallment;
        return isInstallment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReturn</Name>
				<Source><![CDATA[
    boolean parmIsReturn(boolean _isReturn = isReturn)
    {
        isReturn = _isReturn;
        return isReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRContinuityLineEval</Name>
				<Source><![CDATA[
    MCRContinuityLineEval parmMCRContinuityLineEval(
        MCRContinuityLineEval _mcrContinuityLineEval = mcrContinuityLineEval)
    {
        mcrContinuityLineEval = _mcrContinuityLineEval;
        return mcrContinuityLineEval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRSalesOrderTotals</Name>
				<Source><![CDATA[
    MCRSalesOrderTotals parmMCRSalesOrderTotals(MCRSalesOrderTotals _mcrSalesOrderTotals = mcrSalesOrderTotals)
    {
        mcrSalesOrderTotals = _mcrSalesOrderTotals;
        return mcrSalesOrderTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContinuityImpactedControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all controls that are impacted by continuity.
    /// </summary>
    void setContinuityImpactedControls()
    {
        AmountCur continuityPayLater = 0;

        if (salesTable)
        {
            if (mcrSalesTable.ContinuityOrder)
            {
                switch (element.parmMCRContinuityLineEval())
                {
                    case MCRContinuityLineEval::Blank:
                    case MCRContinuityLineEval::Paid:
                    case MCRContinuityLineEval::PayAllLater:
                        break;
                    case MCRContinuityLineEval::PayPartNowPartSched:
                        // ContinuityPayLater only applies to mixed orders, so calculate here
                        // and skip the break
                        continuityPayLater = mcrSalesOrderTotals.getContinuityPayLater();
                    case MCRContinuityLineEval::PayAllNow:
                        // Set the continuity amount that has to be paid now
                        continuityDueNow.realValue(mcrSalesOrderTotals.getContinuityPayNow());
                        // Set the product total of the continuity lines
                        continuitySumLines.realValue(mcrSalesOrderTotals.getTotalContinuityProduct());
                        // Set the total discount
                        endDisc.realValue(mcrSalesOrderTotals.getTotalDisc());

                        if (salesTable.DocumentStatus == DocumentStatus::Invoice
                            && RetailDetailedOrderInfoHelper::getDetailedOrderStatus(salesTable) != MCRSalesOrderDetailStatus::PartiallyInvoiced)
                        {
                            sumMarkup.realValue(mcrSalesOrderTotals.getInvoicedMarkup()
                                                + mcrSalesOrderTotals.getInvoicedMarkupCoupon());
                        }
                        else
                        {
                            // Set the total markup
                            sumMarkup.realValue(mcrSalesOrderTotals.getTotalMarkup()
                                                + mcrSalesOrderTotals.getTotalMarkupCoupon());
                        }
                        // Set the total product amount, minus the part of the total that is to be paid later
                        sumLines.realValue(mcrSalesOrderTotals.getTotalProduct()
                                            - continuityPayLater);
                        // Set the total sales amount, minus the part of the total that is to be paid later, includes tax
                        salesTotal.realValue(mcrCustPaymTotals.getTotalSalesAmount());
                        sumTax.realValue(mcrSalesOrderTotals.getTotalTax()
                                         - mcrSalesOrderTotals.getContinuityPayLaterTax());
                        break;
                    default:
                }
            }
            // Set the controls without including continuity amounts
            else
            {
                endDisc.realValue(mcrSalesOrderTotals.getTotalDisc());
                if (salesTable.DocumentStatus == DocumentStatus::Invoice
                    && RetailDetailedOrderInfoHelper::getDetailedOrderStatus(salesTable) != MCRSalesOrderDetailStatus::PartiallyInvoiced)
                {
                    sumMarkup.realValue(mcrSalesOrderTotals.getInvoicedMarkup()
                                    + mcrSalesOrderTotals.getInvoicedMarkupCoupon());
                }
                else
                {
                    sumMarkup.realValue(mcrSalesOrderTotals.getTotalMarkup()
                                        + mcrSalesOrderTotals.getTotalMarkupCoupon());
                }
                sumLines.realValue(mcrSalesOrderTotals.getTotalProduct());
                salesTotal.realValue(mcrCustPaymTotals.getTotalSalesAmount());
                sumTax.realValue(mcrSalesOrderTotals.getTotalTax());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContinuityLineEval</Name>
				<Source><![CDATA[
    void setContinuityLineEval()
    {
        container       evalContinuityOrderLine;

        if (mcrSalesTable.ContinuityOrder)
        {
            evalContinuityOrderLine = SalesTable::mcrEvalContOrderLines(salesTable.SalesId);
            element.parmMCRContinuityLineEval(SalesTable::mcrContinuityLineEvalResult(evalContinuityOrderLine));

            // Need to update the sales order field MCRContinuityEval
            ttsbegin;
            mcrSalesTable.selectForUpdate(true);
            mcrSalesTable.ContinuityLineEval = element.parmMCRContinuityLineEval();
            mcrSalesTable.update();
            ttscommit;
        }
        else
        {
            element.parmMCRContinuityLineEval(MCRContinuityLineEval::Blank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstallmentAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the total to be paid on installment.
    /// </summary>
    /// <remarks>
    /// This amount is calculated
    ///     once the user chooses the amount to be paid on installment. It includes the
    ///     taxes, and misc charges.
    /// </remarks>
    void setInstallmentAmounts()
    {
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;
        AmountCur       installmentTotalAmt, ineligibleAmt, installmentPaymentAmt, paymTotalAmt;

        // If a sales table record exists
        if (salesTable && isInstallment)
        {
            mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
            installmentTotalAmt = mcrSalesOrderTotals.getInstallmentEligibleTotal();
            ineligibleAmt = salesTotal.realValue() - installmentTotalAmt;
            paymTotalAmt = mcrCustPaymTotals.getConvertedTotalPaymAmount(SalesTable.CurrencyCode) + mcrInstallmentPlanSalesTable.sumTotalAmount(salesTable);
        }
        else
        {
            paymTotalAmt = mcrCustPaymTotals.getConvertedTotalPaymAmount(SalesTable.CurrencyCode);
        }

        installmentTotal.realValue(installmentTotalAmt);
        InstallmentIneligible.realValue(ineligibleAmt);
        installmentPayment.realValue(installmentPaymentAmt);
        Payment.realValue(paymTotalAmt);
        Balance.realValue(salesTotal.realValue() - paymTotalAmt);
        CashPaym_Amount.realValue(paymTotalAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstallmentPayment</Name>
				<Source><![CDATA[
    void setInstallmentPayment()
    {
        AmountCur installmentPaymentAmt;
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;
        // If a sales table record exists
        if (salesTable)
        {
            mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
            // And display the amount paid on installment
            if (mcrInstallmentPlanSalesTable)
            {
                installmentPaymentAmt = mcrInstallmentPlanSalesTable.sumTotalAmount(salesTable);
            }
        }

        installmentPayment.realValue(installmentPaymentAmt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnsDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and sets the return discount.
    /// </summary>
    void setReturnsDiscount()
    {
        AmountCur returnDiscountAmount = 0;
        if (salesTable && element.parmIsReturn())
        {
            returnDiscountAmount = element.parmMCRSalesOrderTotals().getRemainingReturnDisc();
            returnDiscountAmount = abs(returnDiscountAmount);
        }

        returnsDiscount.realValue(returnDiscountAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnsMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and sets the return miscellaneous charges.
    /// </summary>
    void setReturnsMarkup()
    {
        AmountCur returnMarkup = 0;
        if (salesTable && element.parmIsReturn())
        {
            returnMarkup = element.parmMCRSalesOrderTotals().getRemainingReturnMarkup();
            returnMarkup = abs(returnMarkup);
        }
        returnsMiscCharge.realValue(returnMarkup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnsProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and sest the return product total.
    /// </summary>
    void setReturnsProduct()
    {
        AmountCur returnProductAmount = 0;
        if (salesTable && element.parmIsReturn())
        {
            returnProductAmount = element.parmMCRSalesOrderTotals().getRemainingReturnProduct();
            returnProductAmount = abs(returnProductAmount);
        }
        returnsProductTotal.realValue(returnProductAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnsTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and sets the return tax.
    /// </summary>
    void setReturnsTax()
    {
        AmountCur returnTaxAmount = 0;
        if (salesTable && element.parmIsReturn())
        {
            returnTaxAmount = element.parmMCRSalesOrderTotals().getRemainingReturnTax();
            returnTaxAmount = abs(returnTaxAmount);
        }
        returnsTax.realValue(returnTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnsTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and sets the return total.
    /// </summary>
    void setReturnsTotal()
    {
        AmountCur returnTotalAmount = 0;
        if (salesTable && element.parmIsReturn())
        {
            returnTotalAmount = element.parmMCRSalesOrderTotals().getRemainingReturnOrder();
            returnTotalAmount = abs(returnTotalAmount);
        }
        returnTotal.realValue(returnTotalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Store the external gift card in the memory map.
    /// </summary>
    /// <param name = "_externalGiftCard">The retail external gift card that is to be added to the memory map.</param>
    [Hookable(false)]
    public void setExternalGiftCard(RetailExternalGiftCard _externalGiftCard)
    {
        externalGiftCardMap.insert(_externalGiftCard.RetailExternalGiftCardRecId, _externalGiftCard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetAllExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get map of all external gift cards stored in memory.
    /// </summary>
    /// <returns>Map of external gift cards/</returns>
    [Hookable(false)]
    public Map mcrGetAllExternalGiftCard()
    {
        return externalGiftCardMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the external gift card from the memory map.
    /// </summary>
    /// <param name = "_recId">The Retail external gift card RecId.</param>
    /// <returns>The external gift card.</returns>
    [Hookable(false)]
    public RetailExternalGiftCard getExternalGiftCard(int64 _recId)
    {
        RetailExternalGiftCard retailExternalGiftCard = null;

        if (externalGiftCardMap.exists(_recId))
        {
            retailExternalGiftCard = externalGiftCardMap.lookup(_recId);
        }
        return retailExternalGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExternalGiftCard</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void removeExternalGiftCard(Int64 _recId)
    {
        if (externalGiftCardMap.exists(_recId))
        {
            externalGiftCardMap.remove(_recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingBalance</Name>
				<Source><![CDATA[
    private real getRemainingBalance()
    {
        return Balance.realValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitOrderAndRefreshDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the sales order for processing and refreshes the data source to display most recent information.
    /// </summary>
    [Wrappable(true)]
    protected final void submitOrderAndRefreshDataSource()
    {
        this.submitOrder();
        if (!this.closed())
        {
            mcrCustPaymTable_ds.executeQuery();
            salesTable_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Submits the sales order for processing, which includes submitting
    ///     payments for authorization.
    /// </summary>
    [Wrappable(true)]
    protected final void submitOrder()
    {
        MCRCustPaymTotals           custPaymTotals;
        MCROrderRecapStatus         recapStatus;
        boolean                     isOutOfBalance;
        
        // Perform the order recap submit process.
        recapStatus = MCREndOrder::orderRecapForExternalGiftCard(salesTable,
                                element.parmMCRSalesOrderTotals(),
                                isOrderCancellation,
                                element.externalGiftCardMap);

        // Check if sales order has a payment line with zero amount.
        // If payment line exists then block the form close.
        if (RetailPaymentsCheckForNullPaymentsOnOrderFlight::instance().isEnabled()
            && MCREndOrder::isSalesOrderContainsZeroAmountPayment(salesTable))
        {
            Error ("@Retail:InvalidPaymentAmountError");
            recapStatus = MCROrderRecapStatus::OpenError;
        }
        MCRCustPaymTable_DS.reread();

        // Format the customer payment totals object.  Used for messages.
        custPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId,
                                                    salesTable.RecId,
                                                    element.parmMCRSalesOrderTotals());

        // Based on the return status, close or leave the form open.
        switch (recapStatus)
        {
            // Close the form.
            case MCROrderRecapStatus::Close:
                element.close();
                return;

            // Error occurred - leave form open
            case MCROrderRecapStatus::OpenError:

                // Show acceptDecline button if the customer is over their credit
                //                  limit or the order is out of balance.
                isOutOfBalance = !custPaymTotals.validateTotalPaymAmount(false);
                if (isOutOfBalance
                    || custPaymTotals.getOverallPaymStatus() == MCRCustPaymStatus::Declined)
                {
                    // If payment status is 'Declined' make the accept decline button
                    // visible
                    acceptDeclineButton.visible(true);
                }

                if (isOutOfBalance)
                {
                    // If payment status is 'Declined' make the accept decline button visible
                    acceptDeclineButton.visible(true);
                }

                //  Only display out of balance if it is out of balance
                salesTable_MCRPaymOutOfBalance.visible(mcrSalesTable.PaymOutOfBalance != MCRPaymOutOfBalance::None);

                return;

            // Close the form, payments authorized.
            case MCROrderRecapStatus::CloseAuth:
                // If the resulting payment status is 'Authorized' or 'Pending Auth' --
                // display a message in the window and close the form
                messageWindow.text(strFmt("@MCR12207", custPaymTotals.getOverallPaymStatus()));
                messageWindow.update();
                if (RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
                {
                    salesTable_ds.lockPriceWhenCompleted();
                }
                // Close the form
                element.close();
                return;

            // Leave form open, payment authorization issue.
            case MCROrderRecapStatus::OpenNoAuth:
                // If the payment status is not "Authorized" assign appropriate
                // text in the message box with the payment status.
                messageWindow.text(strFmt("@MCR12193", custPaymTotals.getOverallPaymStatus()));
                messageWindow.update();

                isOutOfBalance = !custPaymTotals.validateTotalPaymAmount(false);
                // Show acceptDecline button if the customer is over their credit
                //                  limit or the order is out of balance.
                if (custPaymTotals.getOverallPaymStatus() == MCRCustPaymStatus::Declined
                    || isOutOfBalance)
                {
                    // If payment status is 'Declined' make the accept decline button
                    // visible
                    acceptDeclineButton.visible(true);
                }
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates properties of payment-related form controls.
    /// </summary>
    /// <remarks>
    ///     For performance only flip visibility if value is different.
    /// </remarks>
    void updatePaymControls()
    {
        AmountCur numPayments;
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        void visible(FormControl _formControl, boolean _visible)
        {
            if (_formControl.visible() != _visible)
            {
                _formControl.visible(_visible);
            }
        }
        // if multiple payments exist, show multiple-payment group
        if (salesTable)
        {
            numPayments = MCRCustPaymTable::countSalesPayments(salesTable.SalesId);

            // If the order has more than one payment (regardless of installment) tied to it display "Multiple"
            // If a single reg payment is made show it.
            // If order is paid (even partially) on installment display "Installment"
            if (numPayments > 1)
            {
                multiplePaymType.text("@SYS78137");
                visible(multiplePaymGroup, true);
                visible(singlePaymGroup, false);
            }
            else
            {
                mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
                if (mcrInstallmentPlanSalesTable)
                {
                    multiplePaymType.text("@MCR31245");
                    visible(multiplePaymGroup, true);
                    visible(singlePaymGroup, false);
                }
                if (numPayments == 1)
                {
                    visible(multiplePaymGroup, false);
                    // show single-payment group
                    visible(singlePaymGroup, true);
                    visible(cashPaym_Amount, mcrCustPaymTable.CustPaymType == MCRCustPaymType::Cash);
                    visible(checkPaymGroup, mcrCustPaymTable.CustPaymType == MCRCustPaymType::Check);
                    visible(creditCardPaymGroup, mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard);
                    visible(giftCertPaymGroup, mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>SalesTable</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            // on deletion of sales order, close recap.
            element.close();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Retrieves only the sales table record that was passed
        ///     in the form arguments.
        /// </summary>
        public void init()
        {
            QueryBuildDataSource queryBuildDataSource;
            QueryBuildRange range;

            SalesId salesId = "";
            boolean allowCancel = false;

            super();

            queryBuildDataSource = this.query().dataSourceTable(tableNum(SalesTable));

            if (element.args().record() && element.args().record().TableId == tableNum(SalesTable))
            {
                salesTableVar = element.args().record();
                salesId = salesTableVar.SalesId;
            }

            queryBuildDataSource.clearRange(fieldNum(SalesTable, SalesId));
            range = queryBuildDataSource.addRange(fieldNum(SalesTable, SalesId));

            if (salesId == "")
            {
                range.value("...");     // find no records
            }
            else
            {
                range.value(salesId);
            }

            this.cacheAddMethod(tableMethodStr(SalesTable, mcrGetTotalPaymAmount));
        }

]]></Source>
					</Method>
					<Method>
						<Name>lockPriceWhenCompleted</Name>
						<Source><![CDATA[
        /// <summary>
        /// When a call center is completed, lock the price for all lines.
        /// </summary>
        public void lockPriceWhenCompleted()
        {
            salesTable.lockPriceForRetailOrder();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>MCRCustPaymTable</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();

            mcrCustPaymTable_ds.cacheAddMethod(tableMethodStr(MCRCustPaymTable, displayCCNumMasked), false);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Updates form controls based upon the results of the
        ///     query.
        /// </summary>
        public void executeQuery()
        {
            super();

            // update properties of payment controls
            element.updatePaymControls();
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            
            ret = super();
            MCRCustPaymTable_ds.allowDelete(mcrCustPaymTable.PostedAmount ? false : true);

            RetailStoreTenderTypeTable retailStoreTenderTypeTable = RetailStoreTenderTypeTable::find(mcrCustPaymTable.Channel, mcrCustPaymTable.TenderTypeId);

            boolean isExternalGiftCard = retailStoreTenderTypeTable && retailStoreTenderTypeTable.ConnectorName != '';
            GiftCardBalanceRefresh.enabled(isExternalGiftCard);
            GiftCardBalanceRefresh.visible(isExternalGiftCard);
			            
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();

            if (MCRCustPaymTable)
            {
                MCRCustPaymTable.recalculateAmounts();
                MCRCustPaymTable_ds.research(true);
            }

            element.setInstallmentAmounts();
        }

]]></Source>
					</Method>
					<Method>
						<Name>recalculateTotals</Name>
						<Source><![CDATA[
        public void recalculateTotals(boolean _forceCalculate = false)
        {
            if (!RetailOrdersFeatureControl::isApplyRetailTenderDiscountToRetailOrdersFeatureEnabled())
            {
                return;
            }

            // check if at least one payment has tender discount configured
            boolean hasTenderDiscounts;
            MCRCustPaymTable custPaymTable;
            //for (custPaymTable = MCRCustPaymTable_ds.getFirst(true) ? MCRCustPaymTable_ds.getFirst(true) : MCRCustPaymTable_ds.cursor();
            //custPaymTable;
            //custPaymTable = MCRCustPaymTable_ds.getNext())
            while select custPaymTable
                where custPaymTable.RefRecId == element.args().record().RecId
                    && custPaymTable.RefTableId == element.args().record().TableId
            {
                if (RetailTenderDiscount::existsForTenderType(custPaymTable.TenderTypeId, custPaymTable.CardTypeId))
                {
                    hasTenderDiscounts = true;
                    break;
                }
            }

            if (hasTenderDiscounts || _forceCalculate)
            {
                element.parmMCRSalesOrderTotals(new MCRSalesOrderTotals(salesTable));

                mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId,
                                                                 salesTable.RecId,
                                                                 element.parmMCRSalesOrderTotals());

                mcrCustPaymTotals.recalculatePaymAmounts();

                element.setContinuityImpactedControls();

                element.redraw();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        /// <summary>
        /// Disable or enable the remove button based on the Prepay.
        /// </summary>
        public void selectionChanged()
        {
            super();

            MCRCustPaymTable mcrCustPaymTableAux = MCRCustPaymTable::findByRecID(MCRCustPaymTable_ds.cursor().RecId);

            RemovePaymBtn.enabled(RetailPaymentsSummaryPageHelper::isEnableRemoveButton(mcrCustPaymTableAux));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>MCRSalesTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Calculates and displays sales totals after executing the query,
        ///     and updates form controls based upon the active sales order.
        /// </summary>
        /// <remarks>
        ///     If this order is a continuity parent order, the lines need to be evaluated to see if the
        ///     lines are bill up front with payment schedule bill up front with no payment schedules, a
        ///     mixed bag, or non bill up fronts. Based on the results the implication to payments are huge.
        /// </remarks>
        public void executeQuery()
        {
            MCRCustPaymTotals     custPaymTotals;
            super();

            // Evaluate continuity and return data once and save.  These must come before
            // setting controls below.
            element.setContinuityLineEval();
            if (salesTable)
            {
                element.parmIsReturn(salesTable.mcrAnySalesLinesNegative());
                element.parmIsInstallment(salesTable.mcrIsOrderInstallment());
            }
            else
            {
                element.parmIsReturn(false);
                element.parmIsInstallment(false);
            }

            // If the totals are not set, recalculate them.
            if (salesTable && ! element.parmMCRSalesOrderTotals())
            {
                element.parmMCRSalesOrderTotals(new MCRSalesOrderTotals(salesTable));
            }

            // Hide the returns group if there are no returns on the order
            returnsTotals.visible(element.parmIsReturn());

            mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId,
                                                             salesTable.RecId,
                                                             element.parmMCRSalesOrderTotals());

            // Call methods for each value to be calculated and shown
            element.setContinuityImpactedControls();
            // Set installment amounts
            element.setInstallmentAmounts();
            element.setReturnsProduct();
            element.setReturnsDiscount();
            element.setReturnsMarkup();
            element.setReturnsTax();
            element.setReturnsTotal();
            ButtonGroup.enabled(mcrCustPaymTotals.allowEdit());
            EditBtn.enabled(mcrCustPaymTotals.allowEdit());
            DetailBtn.visible(!mcrCustPaymTotals.allowEdit());

            // Re-calculate amounts for payments that have been defined as percentages, // to ensure that the total payment amount is up-to-date
            if (salesTable)
            {
                custPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId,
                                                    salesTable.RecId, mcrSalesOrderTotals);
                custPaymTotals.recalculatePaymAmounts();
            }

            // Set submit and hold code buttons
            if (salesTable)
            {
                // Allow submission of sales order if status is "open order"
                submitButton.enabled(salesTable.SalesStatus == SalesStatus::Backorder || salesTable.SalesStatus == SalesStatus::Delivered);
                Holds.enabled(SalesTableForm::mcrEnableOrderHoldsButton(SalesTable));
            }
            else
            {
                submitButton.enabled(false);
                holdCodeButton.enabled(false);
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>ModifyOrderButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Closes the form.
        /// </summary>
        /// <remarks>
        /// The enum value in the form args is set to NoYes::Yes to indicate that
        ///     the user selected the option to modify the sales order.
        /// </remarks>
        void clicked()
        {
            element.args().parmEnum(NoYes::Yes);

            salesTable_ds.reread();
            salesTable_ds.refresh();

            // Open up the order.
            salesTable.mcrOpenSalesOrder();

            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MCRCancelOrder</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Prompts for a cancellation reason code and cancels the order.
        /// </summary>
        void clicked()
        {
            MCRSalesOrderCancellation::cancelOrder(salesTable);
            super();

            salesTable_ds.reread();
            if (salesTable.SalesStatus == SalesStatus::Canceled)
            {
                element.close();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Delete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            salesTable_ds.delete();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AcceptDeclineButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MiscCharges</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            formrun formRun;
            Args args;
            args = new Args();

            args.record(salesTable);
            args.parm('Recap');

        	MenuFunction mf = new MenuFunction(menuItemDisplayStr(MarkupTrans), MenuItemType::Display);
        	formRun = mf.create(args);

            formRun.run();
            formRun.wait();
            super();

            // Reset the totals, so it will be recalculated.
            element.parmMCRSalesOrderTotals(null);

            salesTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ManualFraudHold</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Puts a sales order on manual fraud hold.
        /// </summary>
        void clicked()
        {
            Args args;

            super();

            // Put the customer on hold for possible fraud.
            args = salesTable.mcrSalesManualFraudHold();
            if (args.parmEnum())
            {
                // Close the form
                element.close();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HoldCodeButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Opens the hold code transaction form to add or clear hold codes.
        /// </summary>
        void clicked()
        {
            Args args = new Args();
            MenuFunction   menuFunction;

            args.record(salesTable);
            args.caller(element);

            menuFunction = new MenuFunction(menuitemDisplayStr(MCRHoldCodeTransSOCreate), MenuItemType::Display);
            menuFunction.run(args);

            // refresh data
            salesTable_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>GiftCardBalanceRefresh</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Refresh the external gift card balance
        /// </summary>
        [Hookable(false)]
        public void clicked()
        {
            super();

            RetailExternalGiftCard retailExternalGiftCard = element.getExternalGiftCard(mcrCustPaymTable.PaymInfoRecId);

            if (retailExternalGiftCard)
            {
                MCRCustPaym mcrCustPaym = MCRCustPaym::construct(mcrCustPaymTable);
                mcrCustPaym.paramRetailExternalGiftCard(retailExternalGiftCard);
                real giftCardBalance = mcrCustPaym.processBalance();

                RetailExternalGiftCardTable retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(mcrCustPaymTable.PaymInfoRecId, true);

                if (retailExternalGiftCardTable)
                {
                    ttsbegin;
                    retailExternalGiftCardTable.HistoricBalance = giftCardBalance;
                    retailExternalGiftCardTable.update();
                    ttscommit;
                }

                GiftCard_M_DisplayAvailableBalance.update();
            }
            else
            {
                throw error('@Retail:InvalidGiftCardNumber');
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Displays the customer payments form, to allow the user to
        ///     add a payment for the calling record.
        /// </summary>
        void clicked()
        {
            args paymentArgs;

            FormRun paymentFormRun;

            paymentArgs = new Args();
            paymentArgs.caller(element);
            // Pass calling record to the payment creation form
            paymentArgs.record(element.args().record());
            paymentArgs.caller(element);

            paymentFormRun = new MenuFunction(menuItemDisplayStr(MCRCustPaym), MenuItemType::Display).create(paymentArgs);

            paymentFormRun.run();
            paymentFormRun.wait();

            MCRCustPaymTable_ds.research(true);
            MCRCustPaymTable_ds.recalculateTotals();
            element.setInstallmentAmounts();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RemovePaymBtn</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        /// Remove a payment, if it is possible to do so, and void authorization for Credit card
        /// authorized payment before deleting it
        /// </summary>
        public void clicked()
        {
            boolean isVoidSucceeded = true;
            boolean isRefundSucceeded = true;
            boolean wasExternalGiftCard = false;

            if (Box::yesNo(strFmt("@GLS93976", "@SYS334746"), DialogButton::No) == DialogButton::Yes)
            {
                MCRCustPaymTable mcrCustPaymTableAux = MCRCustPaymTable::findByRecID(MCRCustPaymTable_ds.cursor().RecId, true);
                mcrCustPaymTotals custPaymTotals = mcrCustPaymTotals::construct(mcrCustPaymTableAux.RefTableId, mcrCustPaymTableAux.RefRecId);

                if (mcrCustPaymTableAux)
                {
                    ttsbegin;

                    // For credit card payments in authorized state, void authorization
                    if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::CreditCard &&
                    mcrCustPaymTableAux.Status == MCRCustPaymStatus::Authorized)
                    {
                        isVoidSucceeded = CreditCardProcess::mcrDoVoidPreAuth(mcrCustPaymTableAux);
                    }

                    if (mcrCustPaymTableAux.Status == MCRCustPaymStatus::Paid ||
                        (
                         (mcrCustPaymTableAux.Status == MCRCustPaymStatus::Posted) &&
                         (MCRCustPaymTableAux.CustPaymType == MCRCustPaymType::CreditCard || mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::LoyaltyCard)
                        )
                       )
                    {
                        // For credit card payments in Paid status, refund credit card and create a refund Ledger Journal
                        if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::CreditCard)
                        {
                            boolean isRefundsOverMultipleCaptureEnabled = RetailTransactionPaymentsHelper::isRefundsOverMultipleCapturesEnabled();

                            if (isRefundsOverMultipleCaptureEnabled)
                            {
                                CreditCard_ExtendedParameters creditCard_ExtendedParameters = CreditCard::getDefaultExtendedParameters();

                                // Set max amount to refund
                                creditCard_ExtendedParameters.parmRecordRefund_RefundAmount(mcrCustPaymTableAux.PostedAmount);
                                creditCard_ExtendedParameters.parmRecordRefund_RefundedAmount(0.00);

                                // Refund credit card in the Payment Processor
                                isRefundSucceeded = CreditCardProcess::mcrDoRefund(mcrCustPaymTableAux);

                                // Update refund amount and reset refunded amount
                                creditCard_ExtendedParameters.parmRecordRefund_RefundedAmount(0.00);
                            }
                            else
                            {
                                // Refund credit card in the Payment Processor
                                isRefundSucceeded = CreditCardProcess::mcrDoRefund(mcrCustPaymTableAux);
                            }
                        }
                        else if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::GiftCard)
                        {
                            if (mcrCustPaymTable.isExternalGiftCardPayment())
                            {
                                // External gift card does not support refund offset with new gift card (system generated)
                                warning(strFmt('@Retail:RefundCannotBeAppliedExternalGiftCard', mcrCustPaymTableAux.CurrencyCode, mcrCustPaymTableAux.Amount));

                                // Validate if sales line already exits for refund amount of external gift card item.
                                // If sales line already exists then skip the process of creating same item.
                                if (!mcrCustPaymTableAux.SalesLine)
                                {
                                    MCRSalesLine::addExternalGiftCardItem(mcrCustPaymTableAux);
                                }
                                wasExternalGiftCard = true;
                            }
                            else
                            {
                                // Refund gift card.
                                RetailGiftCardTransactions::postFromPaymTable((-1) * mcrCustPaymTableAux.Amount, mcrCustPaymTableAux);
                            }
                        }
                        else if (mcrCustPaymTableAux.CustPaymType == MCRCustPaymType::LoyaltyCard)
                        {
                            // Set the parmMCRPaymRecId in RetailLoyaltyManager_Extended parameters so it can be used to query the associated redeem payment
                            // record in RetailLoyaltyRewardPointTrans.
                            RetailLoyaltyManager_ExtendedParameters retailLoyaltyManager_ExtendedParameters = RetailLoyaltyManager::extendedParameters;
                            retailLoyaltyManager_ExtendedParameters.parmMCRPaymRecId(mcrCustPaymTableAux.RecId);

                            // Create Refund line and refund points
                            RetailLoyaltyManager::GenerateAndPostRewardPointsForRemovedPayment(mcrCustPaymTableAux.salesTable(), mcrCustPaymTableAux.getLoyaltyCardNumber());
                        }
                        if (!wasExternalGiftCard && (mcrCustPaymTableAux.IsPrepay == NoYes::Yes || mcrCustPaymTableAux.PostedAmount != 0))
                        {
                            // Restore customer balance with a Ledger Payment Journal to offset original payment
                            MCRCustPaym mcrCustRefund = MCRCustPaym::construct(mcrCustPaymTableAux, false, CreditCardAuthTrans::mcrFindCharge(mcrCustPaymTableAux.RecId));
                            mcrCustRefund.parmDefaultDimension(SalesTable.DefaultDimension);
                            mcrCustRefund.postToLedgerJournal((-1) * mcrCustPaymTableAux.Amount, mcrCustPaymTableAux.IsPrepay);
                        }
                    }

                    mcrCustPaymTableAux.reread();

                    if (isVoidSucceeded && isRefundSucceeded && !wasExternalGiftCard)
                    {
                        mcrCustPaymTableAux.delete();
                    }
                    ttscommit;

                    MCRCustPaymTable_ds.recalculateTotals(true);
                    MCRCustPaymTable_ds.reread();
                    element.doRefresh();

                    if (wasExternalGiftCard)
                    {
                        FormRun callerForm = element.args().caller();

                        if (callerForm)
                        {
                            if (callerForm.name() == formStr(SalesTable))
                            {
                                callerForm.doRefresh();
                            }
                        }
                    }
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>EditBtn</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            args paymentArgs;

            FormRun paymentFormRun;

            paymentArgs = new Args();
            // Pass calling record to the payment creation form
            paymentArgs.record(MCRCustPaymTable);
            paymentArgs.caller(element);

            paymentFormRun = new MenuFunction(menuItemDisplayStr(MCRCustPaym), MenuItemType::Display).create(paymentArgs);

            paymentFormRun.run();
            paymentFormRun.wait();

            MCRCustPaymTable_ds.research(true);
            MCRCustPaymTable_ds.recalculateTotals();
            element.setInstallmentAmounts();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MCRCustPaymInstallment</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            args paymentArgs;

            FormRun paymentFormRun;

            paymentArgs = new Args();
            // Pass calling args to the installment form
            paymentArgs.record(element.args().record());
            paymentArgs.parm(element.args().parm());

            paymentFormRun = new MenuFunction(menuItemDisplayStr(MCRCustPaymInstallment), MenuItemType::Display).create(paymentArgs);
            paymentFormRun.run();
            paymentFormRun.wait();

            MCRCustPaymTable.recalculateAmounts();

            // calculate and update installment related fields
            element.setInstallmentAmounts();

            MCRCustPaymTable_ds.research(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SubmitButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.submitOrderAndRefreshDataSource();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>SalesTable</Name>
			<Table>SalesTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AddressRefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AddressRefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AutoSummaryModuleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccount_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankDocumentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CaseTagging</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscBaseDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashDiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommissionGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ConsTarget_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountyOrigDest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CovStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardApprovalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardAuthorization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardAuthorizationError</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardCustRefId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditNoteReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurBankAccount_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustBankAccount_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustInvoiceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomerRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsExportOrder_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustomsShippingBill_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DAXIntegrationID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryDateControlType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirectDebitMandate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DlvTerm</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Email</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EnterpriseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Estimate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExportReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalDocType_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedDueDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FixedExchRate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightSlipType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreightZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GiroType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclTax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyAllowIndirectCreation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyAllowIndirectCreationOrig</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyAutoCreateOrders</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyDirectDelivery</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyDirectDeliveryOrig</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOriginalCustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyOriginalSalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanyPurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InvoiceRegister_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemTagging</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Listcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ManualEntryChangepolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MarkupGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MatchingAgreement</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCROrderStopped</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MultiLineDisc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NatureOfAssessee_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumberSequenceGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OneTimeCustomer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedExtensions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackingSlipRegister_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PalletTagging</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Payment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymMode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSpec</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsBatchAttribAutoRes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsCustRebateGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PdsRebateProgramTMAGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Port</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostingProfile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceGroupId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProjId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchOrderFormNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QuotationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReleaseStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reservation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnDeadline</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnItemNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReplacementCreated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnReplacementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesOriginId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPoolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesUnitId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettleVoucher</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierAccountCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierBlindShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierDeliveryContact</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierDlvType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierExpeditedShipment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierFuelSurcharge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShipCarrierResidential</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateConfirmed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShippingDateRequested</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmCampaignId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmSalesAmountTotal</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDocumentHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StatProcId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemEntryChangePolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SystemEntrySource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TCSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TDSGroup_IN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Touched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Transport</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransportationDocument</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>URL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VATNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerSalesResponsible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerSalesTaker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackedPrioritizedIdList</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MCRCustPaymTable</Name>
			<Table>MCRCustPaymTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CardTypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Channel</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CheckNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrencyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustPaymType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isPlanRefund</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrepay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LineNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumAuthRetry</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OnAccountAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrigRefundRecID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInfoRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymInfoTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSchedID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PercentAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostedAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TenderTypeId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>SalesTable</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>MCRSalesTable</Name>
			<Table>MCRSalesTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CatalogUpSellShown</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContinuityChild</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContinuityLineEval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContinuityOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FTCExempt</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstallmentOrderSubmitted</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OutOfBalanceReleased</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymOutOfBalance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostageGroupID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriceOverride</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PromptedForInstBillingOption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReceiptDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmmTMCallListId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SOAllocPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DelayActive>No</DelayActive>
			<JoinSource>SalesTable</JoinSource>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MCR10904</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Height xmlns="">0</Height>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<Pattern xmlns="">DialogFastTabs</Pattern>
		<PatternVersion xmlns="">1.0</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Width xmlns="">0</Width>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>0</Width>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ActionsButtonGroup</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<LeftMode>AutoLeft</LeftMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>Order_MenuButton</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonSeparatorControl">
												<Name>Maintain</Name>
												<ElementPosition>390451572</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonSeparator</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@MCR36158</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ModifyOrderButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>585677358</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS71028</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MCRCancelOrder</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>780903144</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS12778</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Delete</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>976128930</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS21354</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>AcceptDeclineButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1171354716</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@MCR25343</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonSeparatorControl">
												<Name>View</Name>
												<ElementPosition>1366580502</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonSeparator</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS53654</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>OrderNotes</Name>
												<ElementPosition>1561806288</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<DataSource>SalesTable</DataSource>
												<MenuItemName>MCROrderNotes</MenuItemName>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonSeparatorControl">
												<Name>Charges</Name>
												<ElementPosition>1757032074</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonSeparator</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Text>@SYS114608</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MiscCharges</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1952257860</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@SYS117387</Text>
											</AxFormControl>
										</Controls>
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@SYS69861</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuButtonControl">
										<Name>Holds</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>ManualFraudHold</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@MCR22899</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>HoldCodeButton</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@MCR10491</Text>
											</AxFormControl>
										</Controls>
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Text>@MCR20463</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<LeftMargin>20</LeftMargin>
								<LeftMarginMode>Fixed</LeftMarginMode>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Strip</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>ContentTab</Name>
				<Type>Tab</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SalesOrderSummaryHeader</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>General</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>SalesTable_SalesId</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesId</DataField>
										<DataSource>SalesTable</DataSource>
									</AxFormControl>
								</Controls>
								<Caption>@SYS303759</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>StatusGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SalesStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SalesStatus</DataField>
										<DataSource>SalesTable</DataSource>
										<Label>@MCR10905</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PaymStatus</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>MCRGetPaymStatus</DataMethod>
										<DataSource>SalesTable</DataSource>
										<Label>@MCR10565</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SalesTable_MCRPaymOutOfBalance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PaymOutOfBalance</DataField>
										<DataSource>MCRSalesTable</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CurrencyCode</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>330382098</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>SalesTable</DataSource>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesTotals</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SalesTotal</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1651910490</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR10906</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Payment</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1817101539</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS24946</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Balance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS53076</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InstallmentPayment</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
										<ElementPosition>1982292588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<Label>@MCR30878</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@SYS8311</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ContinuityTotals</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ConfigurationKey>MCRContinuity</ConfigurationKey>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ContinuitySumLines</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR12759</Label>
										<NoOfDecimals>2</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ContinuityDueNow</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR12840</Label>
										<NoOfDecimals>2</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ReturnsTotals</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReturnsProductTotal</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR12123</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReturnsTax</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@SYS22916</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReturnsDiscount</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SalesEndDiscAmount</ExtendedDataType>
										<Label>@SYS11829</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReturnsMiscCharge</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR10531</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>ReturnTotal</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<Label>@MCR12937</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>MultiplePaymGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MultiplePaymType</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS28161</Label>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SinglePaymGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_TenderTypeId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TenderTypeId</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Identification_M_displayName</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayName</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CashPaym_Amount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS1943</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CheckPaymGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>CheckPaym_Amount</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CheckPaym_CheckNumber</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CheckNumber</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>MCRCustPaymTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>CreditCardPaymGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MCRCustPaymTable_CardTypeId</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CardTypeId</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CreditCard_M_displayCCNumMasked</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayCCNumMasked</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>MCRCustPaymTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GiftCertPaymGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2113929214</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>GiftCard_M_DisplayGiftCardNumMasked</Name>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getGiftCardNumberMasked</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>GiftCard_M_DisplayAvailableBalance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayGiftCardAvailableBalance</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
										<Label>@MCR11164</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>GiftCardBalanceRefresh</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<Enabled>No</Enabled>
										<HelpText>@Retail:RetailRefreshGiftCardBalance</HelpText>
										<Type>Button</Type>
										<Visible>No</Visible>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>Refresh</NormalImage>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>HorizontalLeft</ArrangeMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<FrameType>None</FrameType>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InstallmentBilling</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InstallmentTotal</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@MCR30877</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>InstallmentIneligible</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
										<Type>Real</Type>
										<FormControlExtension
											i:nil="true" />
										<Label>@MCR30876</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<Caption>@MCR30647</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>TotalsAndMessages</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>Weight</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>dspWeight</DataMethod>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MessageWindow</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@MCR40330</Label>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
								</Controls>
								<Caption>@SYS55057</Caption>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SalesOrderSummaryAmounts</Name>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>SalesAmounts</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SumLines</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>495573147</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>AmountCur</ExtendedDataType>
										<FastTabSummary>Yes</FastTabSummary>
										<Label>@MCR10523</Label>
										<NoOfDecimals>2</NoOfDecimals>
										<NoOfDecimalsMode>Fixed</NoOfDecimalsMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>EndDisc</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>660764196</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>SalesEndDiscAmount</ExtendedDataType>
										<Label>@MCR10540</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SumMarkup</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>MarkupSumSales</ExtendedDataType>
										<Label>@SYS117387</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>SumTax</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1486719441</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Skip>Yes</Skip>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TaxAmountCur</ExtendedDataType>
										<Label>@SYS5878</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS6928</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>SalesOrderSummaryPayments</Name>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneOrder</Name>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<NeededPermission>Read</NeededPermission>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>AddBtn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>477218588</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Create</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<NormalImage>New</NormalImage>
												<Text>@SYS2318</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>RemovePaymBtn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<NeededPermission>Delete</NeededPermission>
												<Type>Button</Type>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<NormalImage>Delete</NormalImage>
												<SaveRecord>No</SaveRecord>
												<Text>@SYS309739</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonGroupControl">
										<Name>ButtonGroupOrder</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Left>0</Left>
										<Type>ButtonGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>EditBtn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>715827882</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Update</NeededPermission>
												<Type>MenuFunctionButton</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<AutoRefreshData>Yes</AutoRefreshData>
												<DataSource>MCRCustPaymTable</DataSource>
												<MenuItemName>MCRCustPaym</MenuItemName>
												<MultiSelect>No</MultiSelect>
												<NeedsRecord>Yes</NeedsRecord>
												<NormalImage>Edit</NormalImage>
												<Text>@SYS2475</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormMenuFunctionButtonControl">
												<Name>DetailBtn</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<NeededPermission>Read</NeededPermission>
												<Type>MenuFunctionButton</Type>
												<FormControlExtension
													i:nil="true" />
												<DataSource>MCRCustPaymTable</DataSource>
												<MenuItemName>MCRCustPaym</MenuItemName>
												<NeedsRecord>Yes</NeedsRecord>
												<Text>@SYS116645</Text>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>MCRCustPaymInstallment</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ConfigurationKey>MCRInstallmentBilling</ConfigurationKey>
												<ElementPosition>1431655764</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<NeededPermission>Read</NeededPermission>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>TextOnly</ButtonDisplay>
												<Text>@MCR31245</Text>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<DataSource>MCRCustPaymTable</DataSource>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>PaymGrid</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Skip>Yes</Skip>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymGrid_TenderTypeId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TenderTypeId</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PaymGrid_M_displayName</Name>
										<AllowEdit>No</AllowEdit>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>displayName</DataMethod>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PaymGrid_PercentAmount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PercentAmount</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PaymGrid_Amount</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MCRCustPaymTable_CurrencyCode</Name>
										<Type>String</Type>
										<FormControlExtension
											i:nil="true" />
										<DataField>CurrencyCode</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PaymGrid_Status</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Status</DataField>
										<DataSource>MCRCustPaymTable</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<DataSource>MCRCustPaymTable</DataSource>
								<MultiSelect>No</MultiSelect>
								<Style>Tabular</Style>
								<VisibleRows>8</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@SYS243</Caption>
					</AxFormControl>
				</Controls>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>CommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>SubmitButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1789569705</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>@SYS72169</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>