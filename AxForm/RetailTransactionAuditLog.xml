<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailTransactionAuditLog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailTransactionAuditLog extends FormRun
{

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().record().RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        super();

        if(element.args().callerName() == formstr(RetailTransactionTable))
        {
            RetailTransactionAuditLogTable_RefTableName.visible(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>RetailTransactionAuditLogTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        /// <summary>
        /// Query to retrieve audit records across all the transaction tables for the selected transaction.
        /// </summary>
        public void executeQuery()
        {
            if(element.args().callerName() == formstr(RetailTransactionTable))
            {
                RetailTransactionSalesTrans retailTransactionSalesTrans;
                RetailTransactionPaymentTrans retailTransactionPaymentTrans;
                RetailTransactionDiscountTrans retailTransactionDiscountTrans;
                RetailTransactionInfocodeTrans retailTransactionInfoCodeTrans;
                RetailTransactionTaxTrans retailTransactionTaxTrans;
                RetailTransactionMarkupTrans retailTransactionMarkupTrans;

                Query query;
                QueryBuildDataSource qbdAuditLog;

                query = new Query();
                query.queryType(QueryType::Union);


                qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_Trans));
            
                //Transaction Table
                RetailTransactionTable retailTransactionTable = element.args().record();

                List salesTransRecId = new List(Types::String);
                List paymentTransaRecId = new List(Types::String);
                List discountTransRecId = new List(Types::String);
                List infoCodeTransRecId = new List(Types::String);
                List taxTransRecId = new List(Types::String);
                List markupRecId = new List(Types::String);

                RetailTransactionId transactionId = retailTransactionTable.transactionId;
                RetailStoreId storeId = retailTransactionTable.store;
                RetailTerminalId terminalId = retailTransactionTable.terminal;
                RetailChannelRecId channelId = retailTransactionTable.Channel;

                while select RecId from retailTransactionSalesTrans 
                    where retailTransactionSalesTrans.Channel == channelId
                    && retailTransactionSalesTrans.transactionId == transactionId
                    && retailTransactionSalesTrans.terminalId == terminalId
                    && retailTransactionSalesTrans.store == storeId
                {
                    salesTransRecId.addEnd(int642Str(retailTransactionSalesTrans.RecId));
                }

                while select RecId from retailTransactionPaymentTrans
                    where retailTransactionPaymentTrans.Channel == channelId
                    && retailTransactionPaymentTrans.transactionId == transactionId
                    && retailTransactionPaymentTrans.terminal == terminalId
                    && retailTransactionPaymentTrans.store == storeId
                {
                    paymentTransaRecId.addEnd(int642Str(retailTransactionPaymentTrans.RecId));
                }

                while select RecId from retailTransactionDiscountTrans
                    where retailTransactionDiscountTrans.Channel == channelId
                    && retailTransactionDiscountTrans.TransactionId == transactionId
                    && retailTransactionDiscountTrans.TerminalId == terminalId
                    && retailTransactionDiscountTrans.StoreId == storeId
                {
                    discountTransRecId.addEnd(int642Str(retailTransactionDiscountTrans.RecId));
                }

                while select RecId from retailTransactionInfoCodeTrans
                    where retailTransactionInfoCodeTrans.Channel == channelId
                    && retailTransactionInfoCodeTrans.transactionId == transactionId
                    && retailTransactionInfoCodeTrans.terminal == terminalId
                    && retailTransactionInfoCodeTrans.store == storeId
                {
                    infoCodeTransRecId.addEnd(int642Str(retailTransactionInfoCodeTrans.RecId));
                }

                while select RecId from retailTransactionTaxTrans
                    where retailTransactionTaxTrans.Channel == channelId
                    && retailTransactionTaxTrans.TransactionId == transactionId
                    && retailTransactionTaxTrans.TerminalId == terminalId
                    && retailTransactionTaxTrans.StoreId == storeId
                {
                    taxTransRecId.addEnd(int642Str(retailTransactionTaxTrans.RecId));
                }

                while select RecId from retailTransactionMarkupTrans
                    where retailTransactionMarkupTrans.Channel == channelId
                    && retailTransactionMarkupTrans.transactionId == transactionId
                    && retailTransactionMarkupTrans.terminalId == terminalId
                    && retailTransactionMarkupTrans.store == storeId
                {
                    markupRecId.addEnd(int642Str(retailTransactionMarkupTrans.RecId));
                }

                qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1",tableNum(RetailTransactionTable)));
                qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strFmt("%1", retailTransactionTable.RecId));
                qbdAuditLog.update(false);

                //SalesTrans
                if(!salesTransRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_SalesTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1",tableNum(RetailTransactionSalesTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(salesTransRecId));
                }

                //PaymentTran
                if(!paymentTransaRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_PayTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1",tableNum(RetailTransactionPaymentTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(paymentTransaRecId));
                }

                //DiscountTrans
                if(!discountTransRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_DistTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1",tableNum(RetailTransactionDiscountTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(discountTransRecId));
                }
                
                //InfoCodeTrans
                if(!infoCodeTransRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_InfoTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1", tableNum(RetailTransactionInfocodeTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(infoCodeTransRecId));
                }

                //TaxTrans
                if(!taxTransRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_TaxTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1", tableNum(RetailTransactionTaxTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(taxTransRecId));
                }

                //MarkupTrans
                if(!markupRecId.empty())
                {
                    qbdAuditLog = query.addDataSource(tableNum(RetailTransactionAuditLogTable), identifierStr(AuditLog_MarkupTrans), UnionType::Union);
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefTableId)).value(strFmt("%1", tableNum(RetailTransactionMarkupTrans)));
                    qbdAuditLog.addRange(fieldNum(RetailTransactionAuditLogTable, RefRecId)).value(strList2str(markupRecId));
                }

                retailTransactionAuditLogTable_ds.query(query);
            }

            super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>RetailTransactionAuditLogTable</Name>
			<Table>RetailTransactionAuditLogTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedTransactionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FieldName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NewValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OldValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>RecordAudit</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RetailAudit:RetailTransactionAuditLogFormCaption</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>QuickFilterGroup</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilter</Name>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>Grid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormDateTimeControl">
						<Name>RetailTransactionAuditLogTable_CreatedDateTime</Name>
						<HelpText>@RetailAudit:ModifiedDateTimeLabel</HelpText>
						<Type>DateTime</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreatedDateTime</DataField>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<Label>@RetailAudit:ModifiedDateTimeLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_FieldName</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>localizedFieldName</DataMethod>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_OldValue</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>localizedOldValue</DataMethod>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_NewValue</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>localizedNewValue</DataMethod>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<DisplayHeight>1</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_CreatedBy</Name>
						<HelpText>@RetailAudit:ModifiedByHelpText</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreatedBy</DataField>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<Label>@RetailAudit:ModifiedByLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_ModificationGroupId</Name>
						<HelpText>@RetailAudit:ModificationGroupIdHelpText</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>CreatedTransactionId</DataField>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<Label>@RetailAudit:ModificationGroupIdLabel</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailTransactionAuditLogTable_RefTableName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>getTableNameById</DataMethod>
						<DataSource>RetailTransactionAuditLogTable</DataSource>
						<Label>@RetailAudit:TableNameLabel</Label>
					</AxFormControl>
				</Controls>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>