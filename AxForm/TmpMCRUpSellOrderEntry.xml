<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>TmpMCRUpSellOrderEntry</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
/// <summary>
///     The <c>TmpMCRUpSellOrderEntry</c> form used to upsell items at sales order entry time.
/// </summary>
/// <remarks>
///     This form is called from SalesTable if an ItemId at the line level has entries
///     in the <c>MCRUpSellTable</c>, or if <c>OfferId</c> of the order has entries in
///     the <c>MCRUpSellTable</c>.
/// </remarks>
public class TmpMCRUpSellOrderEntry extends FormRun
{
    SalesLine           callerSalesLine;
    AxMCRSalesLine      axMCRSalesLine;

    InventDimCtrl_Frm   inventDimFormSetup;
    boolean             initComplete;

}
]]></Source>
			</Method>
			<Method>
				<Name>createAxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create an AxSalesLine object and return based on the passed <c>TmpMCRUpSellOrderEntry</c> buffer.
    /// </summary>
    /// <param name="_tmpMCRUpSellOrderEntry">
    ///     The <c>TmpMCRUpSellOrderEntry</c> record for which an <c>AxSalesLine</c> record gets created.
    /// </param>
    /// <returns>
    ///     The newly created <c>AxSalesLine</c>.
    /// </returns>
    AxSalesLine createAxSalesLine(TmpMCRUpSellOrderEntry _tmpMCRUpSellOrderEntry)
    {
        AxSalesLine             axSalesLine;
        SalesTable              salesTable;
        InventTableModule       inventTableModule_Active;
        InventTableModule       inventTableModule;

        salesTable                  = SalesTable::find(callerSalesLine.SalesId);
        inventTableModule_Active    = InventTableModule::find(_tmpMCRUpSellOrderEntry.ItemId, ModuleInventPurchSales::Sales);

        axSalesLine = this.initializeAxSalesLine(_tmpMCRUpSellOrderEntry);
        
        this.initializeAxMCRSalesLine(_tmpMCRUpSellOrderEntry);

        // Price by unit - default from InventTableModule but if no value, use sales unit.
        inventTableModule           = InventTableModule::find(axSalesLine.parmItemId(), ModuleInventPurchSales::Sales);

        return axSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs and initializes an <c>AxSalesLine</c> instance.
    /// </summary>
    /// <param name = "_tmpMCRUpSellOrderEntry">
    ///     The <c>TmpMCRUpSellOrderEntry</c> record for which an <c>AxSalesLine</c> record gets created.
    /// </param>
    /// <returns>
    ///     An <c>AxSalesLine</c> instance.
    /// </returns>
    protected AxSalesLine initializeAxSalesLine(TmpMCRUpSellOrderEntry _tmpMCRUpSellOrderEntry)
    {
        InventDim   inventDimLine   = this.findOrCreateInventDimLine(_tmpMCRUpSellOrderEntry);
        AxInventDim axInventDim     = AxInventDim::construct();

        axInventDim.inventDim(inventDimLine);

        AxSalesLine axSalesLine = AxSalesLine::construct();
        axSalesLine.validateInput(true);
        
        axSalesLine.parmSalesId(callerSalesLine.SalesId);
        axSalesLine.parmItemId(_tmpMCRUpSellOrderEntry.ItemId);
        axSalesLine.parmSalesQty(axSalesLine.parmQtyOrdered(_tmpMCRUpSellOrderEntry.SalesQty));

        axSalesLine.parmInventDimId(axInventDim.inventDim().InventDimId);
        axSalesLine.parmRetailVariantId(InventDimCombination::findByInventDim(axSalesLine.parmItemId(), inventDimLine).RetailVariantId);

        if (RetailCopyForeignTradeFieldsOnSalesOrderFromReleasedProductFlight::instance().isEnabled())
        {
            axSalesLine.initForeignTradeFromInventTable(_tmpMCRUpSellOrderEntry.ItemId);
        }

        return axSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateInventDimLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates an inventory dimension record.
    /// </summary>
    /// <param name = "_tmpMCRUpSellOrderEntry">
    ///     The <c>TmpMCRUpSellOrderEntry</c> record.
    /// </param>
    /// <returns>
    ///     An inventory dimension record.
    /// </returns>
    protected InventDim findOrCreateInventDimLine(TmpMCRUpSellOrderEntry _tmpMCRUpSellOrderEntry)
    {
        InventDim       inventDimLine   = _tmpMCRUpSellOrderEntry.joinChild();
        MCRInventTable  mcrInventTable  = MCRInventTable::findByItemId(_tmpMCRUpSellOrderEntry.ItemId);

        // Added warehouse location to inventDim
        if (mcrInventTable.DropShipment == NoYes::Yes
            && mcrInventTable.DefaultDropShipmentWarehouse)
        {
            inventDimLine.InventLocationId = mcrInventTable.DefaultDropShipmentWarehouse;
            inventDimLine.InventSiteId = InventLocation::find(mcrInventTable.DefaultDropShipmentWarehouse).InventSiteId;
        }

        // If neither is set, default them from the item setup
        if (!inventDimLine.InventSiteId && !inventDimLine.InventLocationId)
        {
            inventDimLine.InventLocationId = InventItemSalesSetup::findDefault(_tmpMCRUpSellOrderEntry.ItemId).inventLocationId();
            inventDimLine.InventSiteId = InventItemSalesSetup::findDefault(_tmpMCRUpSellOrderEntry.ItemId).inventSiteId();
        }

        if (inventDimLine.InventLocationId && !inventDimLine.InventSiteId)
        {
            inventDimLine.InventSiteId = InventLocation::find(inventDimLine.InventLocationId).InventSiteId;
        }

        // Make sure that any changes in initialization results in a new inventDimId being found
        inventDimLine = inventDim::findOrCreate(inventDimLine);

        return inventDimLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAxMCRSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs and initializes the <c>AxMCRSalesLine</c> instance.
    /// </summary>
    /// <param name = "_tmpMCRUpSellOrderEntry">
    ///     The <c>TmpMCRUpSellOrderEntry</c> record.
    /// </param>
    /// <returns>
    ///     An <c>AxMCRSalesLine</c> instance.
    /// </returns>
    protected void initializeAxMCRSalesLine(TmpMCRUpSellOrderEntry _tmpMCRUpSellOrderEntry)
    {
        axMCRSalesLine = AxMCRSalesLine::construct();

        // Assign the upsell origin (itemUpsell, itemCrosssell, catalog) and the upsell origin reference
        // (the originating catalog or item) to the salesline.
        // setting sourceID
        axMCRSalesLine.parmSourceId(callerSalesLine.mcrSalesLine().SourceId);
        axMCRSalesLine.parmUpSellOrigin(_tmpMCRUpSellOrderEntry.UpSellOrigin);

        if (_tmpMCRUpSellOrderEntry.UpSellOrigin == MCRUpSellOrigin::ItemCrossSell
            || _tmpMCRUpSellOrderEntry.UpSellOrigin == MCRUpSellOrigin::ItemUpSell)
        {
            axMCRSalesLine.parmUpSellOriginRef(callerSalesLine.ItemId);
        }
        else if (_tmpMCRUpSellOrderEntry.UpSellOrigin == MCRUpSellOrigin::Catalog)
        {
            axMCRSalesLine.parmUpSellOriginRef(int642str(MCRSourceCodeSetup::find(callerSalesLine.salesTable().mcrSalesTable().SourceId).Catalog));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApply</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds sales line(s) to the current order by using AxSalesLine class.
    /// </summary>
    /// <remarks>
    ///     Algorithm
    ///     1)  For every marked tmpMCRUpSellOrderEntry record
    ///     a) Validate that an AxSalesLine object can be made from record by calling
    ///     table method validForAxSalesLine
    ///     b) If it's valid
    ///     i)  create an AxSalesLine object but don't call save()
    ///     ii) add the object to a list
    ///     c) If it's not valid, remember that there was an error
    ///     2) If more than one upsell item is attempting to be added then ask user if they
    ///     want to continue.
    ///     3) If no errors then
    ///     a) For every AxSalesLine object inlist call save()
    ///     b) execute query on the salesline data source
    ///     c) close form
    ///     else throw an error
    /// </remarks>
    public void doApply()
    {
        Object                  salesLine_dataSource;
        AxSalesLine             axSalesLine = new AxSalesLine();
        SalesLine               salesLine;
        TmpMCRUpSellOrderEntry  tmpMCRUpSellOrderEntry_Local;
        List                    listAxSalesLine = new List(Types::Class);
        ListEnumerator          listEnumerator, mcrListEnumerator;
        boolean                 errorOccurred      = false;
        boolean                 parentItemReplaced = false;
        int                     numUpSells;
        List                    listMCRAxSalesLine = new List(Types::Class);
        MCRSalesLine            mcrSalesLine;
        MCRContinuityScheduleID mcrContinuityScheduleID;

        if (!tmpMCRUpSellOrderEntry_ds.anyMarked())
        {
            tmpMCRUpSellOrderEntry_ds.mark(1);
        }
        for (tmpMCRUpSellOrderEntry_Local = tmpMCRUpSellOrderEntry_ds.getFirst(1);
        tmpMCRUpSellOrderEntry_Local;
        tmpMCRUpSellOrderEntry_Local = tmpMCRUpSellOrderEntry_ds.getNext())
        {
            setPrefix(tmpMCRUpSellOrderEntry.ItemId);
            if (!tmpMCRUpSellOrderEntry_Local.validForAxSalesLine(true))
            {
                errorOccurred = true;
            }
            else
            {
                if (tmpMCRUpSellOrderEntry_Local.UpSellType == MCRUpSellType::UpSell)
                {
                    numUpSells++;
                }
                try
                {
                    axSalesLine = element.createAxSalesLine(tmpMCRUpSellOrderEntry_Local);

                    // Add AxSalesLine object to list
                    listAxSalesLine.addEnd(axSalesLine);
                    listMCRAxSalesLine.addEnd(axMCRSalesLine);
                }
                catch
                {
                    errorOccurred = true;
                }
            }
        }
        // end for all marked records

        if (errorOccurred)
        {
            throw error("@RET490477");
        }

        // If multiple up-sells then warn user.  If they click cancel then just return.
        if (1 < numUpSells
            && Box::okCancel("@MCR4410213", DialogButton::Ok, "@MCR4410214") == DialogButton::Cancel)
        {
            return;
        }

        // If any lines were added then execute query on originating data source
        if (!listAxSalesLine.empty())
        {
            listEnumerator = listAxSalesLine.getEnumerator();
            mcrListEnumerator = listMCRAxSalesLine.getEnumerator();
            while (listEnumerator.moveNext())
            {
                axSalesLine = listEnumerator.current();

                mcrListEnumerator.moveNext();
                if (mcrListEnumerator.current())
                {
                    axMCRSalesLine = mcrListEnumerator.current();
                }

                ttsbegin;

                // If the parent item hasn't been replaced yet and this sales line is
                // of type upsell, then copy line number of parent sales line and delete
                // parent sales line.
                if (!parentItemReplaced
                    && this.mustReplaceParent())
                {
                    axSalesLine.parmLineNum(callerSalesLine.LineNum);
                    callerSalesLine.delete();
                    parentItemReplaced = true;
                }

                // Create the sales line

                axSalesLine.save();

                salesLine = axSalesLine.salesLine();

                salesLine.salesPurchLineInterface().resetPriceAgreement();
                if (MCRUpSellInitDefaultDropShipmentFieldsFlight::instance().isEnabled())
                {
                    salesLine.initDefaultDropShipmentFields();
                }

                salesLine.setPriceDisc(salesLine.inventDim(), true);
                salesLine.update();

                mcrSalesLine = salesLine.mcrSalesLine();
                mcrContinuityScheduleID = MCRInventTable::findByItemId(salesLine.ItemId).ContinuityScheduleId;
                if (mcrContinuityScheduleID
                    || axMCRSalesLine.parmSourceId()
                    || axMCRSalesLine.parmUpSellOrigin()
                    || axMCRSalesLine.parmUpSellOriginRef())
                {
                    mcrSalesLine.SourceId = axMCRSalesLine.parmSourceId();
                    mcrSalesLine.UpSellOrigin = axMCRSalesLine.parmUpSellOrigin();
                    mcrSalesLine.UpSellOriginRef = axMCRSalesLine.parmUpSellOriginRef();
                    mcrSalesLine.SalesLine = salesLine.RecId;
                    mcrSalesLine.ContinuityScheduleId = mcrContinuityScheduleID;
                    mcrSalesLine.write();
                }

                ttscommit;

                // If this is a continuity item create the schedule and prompt the user
                if (mcrSalesLine.ContinuityScheduleId)
                {
                    salesLine.mcrCreateContinuityCust();
                }
            }
            salesLine_dataSource = FormDataUtil::getFormDataSource(callerSalesLine);

            // Don't attempt the executeQuery if salesLine_dataSource is NULL,
            // which is the in case when it's called from SaleQuickQuote.
            if (salesLine_dataSource && salesLine_dataSource is FormDataSource)
            {
                FormDataSource salesLineFDS = salesLine_dataSource as FormDataSource;
                salesLineFDS.executeQuery();
            }
        }

        // Close form
        element.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReplaceParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the parent sales line must be replaced.
    /// </summary>
    /// <returns>
    ///     true if the parent sales line must be replaced; otherwise, false.
    /// </returns>
    protected boolean mustReplaceParent()
    {
        return (axMCRSalesLine.parmUpSellOrigin() == MCRUpSellOrigin::ItemUpSell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (!element.args().dataset())
        {
            throw error(strFmt("@SYS22678", element.name()));
        }

        // Save arguments
        callerSalesLine = element.args().record();

        super();

        // Store in args whether any up-sell/cross-sell items were found
        element.args().parmEnumType(enumNum(NoYes));
        select firstonly tmpMCRUpSellOrderEntry;
        if (tmpMCRUpSellOrderEntry)
        {
            element.args().parmEnum(NoYes::Yes);
        }
        else
        {
            element.args().parmEnum(NoYes::No);
        }

        element.updateDesign(InventDimFormDesignUpdate::Init);

        initComplete = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retuns an object that indicates what item dimensions to display.
    /// </summary>
    /// <returns>
    ///     An <c>Object</c> indicating which item dimensions to display.
    /// </returns>
    public InventDimCtrl_Frm inventDimSetupObject()
    {
        InventDimParm dimParmLockedRightClick;

        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl::newFromFormValidDataSource(element, inventDim_ds.name()) as InventDimCtrl_Frm;
            dimParmLockedRightClick.setAllProductDimensions();
            dimParmLockedRightClick.InventSiteIdFlag = true;
            dimParmLockedRightClick.InventLocationIdFlag = true;
            dimParmLockedRightClick.toggleAllInventDim();
            inventDimFormSetup.parmDimParmLockedRightClick(dimParmLockedRightClick);

            if (RetailConfigurationParameters::getEnableSiteAndWarehouseWhileSettingDefaultAttributeValue())
            {
                inventDimFormSetup.parmDimParmVisibleGrid(InventDimParm::siteAndWarehouse());
            }
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCtrl_UpdatedControls</Name>
				<Source><![CDATA[
    public void inventDimCtrl_UpdatedControls()
    {
        if (initComplete)
        {
            // Need to rebuild the temp table when the dimension setup changes
            TmpMCRUpSellOrderEntry_ds.buildTempTable();
            TmpMCRUpSellOrderEntry_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign(InventDimFormDesignUpdate mode)
    {
        switch (mode)
        {
            case InventDimFormDesignUpdate::Init:
                element.inventDimSetupObject().formSetControls(true);
                break;

            case InventDimFormDesignUpdate::Active:
            case InventDimFormDesignUpdate::FieldChange:
                InventDimGroupSetup::newItemId(tmpMCRUpSellOrderEntry.ItemId).inventDimParmActive(element.inventDimSetupObject().parmDimParmEnabled());
                element.inventDimSetupObject().formSetControls(false);
                break;

            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>TmpMCRUpSellOrderEntry</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Builds the temp table and cachse the display methods.
        /// </summary>
        /// <remarks>
        ///  Make sure these come AFTER call to super().
        /// </remarks>
        public void init()
        {
            super();
            this.buildTempTable();
            this.cacheAddMethod(tableMethodStr(TmpMCRUpSellOrderEntry, itemName));
            this.cacheAddMethod(tableMethodStr(TmpMCRUpSellOrderEntry, displayPrice));
            this.cacheAddMethod(tableMethodStr(TmpMCRUpSellOrderEntry, displayAmount));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Determines the active field.
        /// </summary>
        /// <returns>
        ///     The identification of the active field.
        /// </returns>
        /// <remarks>
        ///     If more than one record is marked blank out image and script.
        ///     Otherwise load image and script.
        ///     Took this approach because if multiple records are selected it doesn't make sense
        ///     for script or image to be showing anything.
        ///     NOTE: This approach will not work for the following scenario.
        ///     1) Select item A.
        ///     2) Hit shift and select item B.  Now item A and item B are marked/selected so
        ///     script and image are blanked out.
        ///     3) Click on item B again.  Neither active() nor mark() will run for this event.
        ///     Therefore script and image will still be blanked out and not have the values
        ///     for item B.
        ///     Note that if you click on item A (or any other item) then this works fine.
        /// </remarks>
        public int active()
        {
            int                     ret;
            int                     numMarked = 0;
            TmpMCRUpSellOrderEntry     tmpMCRUpSellOrderEntry_Local;
            ret = super();

            if (!tmpMCRUpSellOrderEntry_ds.anyMarked())
            {
                tmpMCRUpSellOrderEntry_ds.mark(1);
            }
            for (tmpMCRUpSellOrderEntry_Local = tmpMCRUpSellOrderEntry_ds.getFirst(1);
            tmpMCRUpSellOrderEntry_Local;
            tmpMCRUpSellOrderEntry_Local = tmpMCRUpSellOrderEntry_ds.getNext())
            {
                numMarked++;
                if (2 <= numMarked)
                {
                    break;
                }
            }

            // Blank out image.  For multiple selection will stay blanked out, for single may
            // be loaded but if it's not will be blanked out.
            if (2 <= numMarked)
            {
                ScriptAndImage.visible(false);
            }
            else
            {
                tmpMCRUpSellOrderEntry_Script.text(tmpMCRUpSellOrderEntry.Script);
                // Load the images for this item
                ScriptAndImage.visible(true);
            }
            // Set the initial focus on the qty field
            tmpMCRUpSellOrderEntry_SalesQty.setFocus();
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>buildTempTable</Name>
						<Source><![CDATA[
        /// <summary>
        ///     Finds all up-sell (if applicable) or cross-sell (if applicable) items based on the item
        /// </summary>
        /// <remarks>
        ///     If opened based on an item,  then find all up-sell/cross-sell items based off the item.
        ///     If opened based on an offer, then find all cross-sell items based off the offer.
        ///     In both cases call the table method ruleFired which will determine if the rule associated
        ///     with the item was successful and therefore the item should be added to the temp table.
        /// </remarks>
        void buildTempTable()
        {
            // Clear the temp table
            delete_from tmpMCRUpSellOrderEntry;

            // Add records based on the sales line and the dimension setup
            tmpMCRUpSellOrderEntry.addRecordsForSalesLine(callerSalesLine, element.inventDimSetupObject().parmDimParmVisibleGrid());
        }

]]></Source>
					</Method>
					<Method>
						<Name>showItemImage</Name>
						<Source><![CDATA[
        /// <summary>
        /// display the item default image;
        /// </summary>
        public display container showItemImage()
        {
            return InventTable::find(tmpMCRUpSellOrderEntry.ItemId).productImage();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>SalesQty</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            /// <summary>
            ///     Performs a write (not a refresh) so price and line amount
            ///     will be redisplayed when sales quantity is modified.
            /// </summary>
            /// <remarks>
            ///     Note that you must do a write because the display methods
            ///     are cached.
            /// </remarks>
            public void modified()
            {
                super();
                tmpMCRUpSellOrderEntry_ds.write();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //Skip call to super, parent table will handle inventdim operations.
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>TmpMCRUpSellOrderEntry</Name>
			<Table>TmpMCRUpSellOrderEntry</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AvailCalc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AvailPhysical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Priority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesLineRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Script</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UpSellOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UpSellType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventVersionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1Hash</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>TmpMCRUpSellOrderEntry</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MCR10447</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<Left xmlns="">0</Left>
		<LeftMode xmlns="">Center</LeftMode>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Style xmlns="">Dialog</Style>
		<Top xmlns="">0</Top>
		<TopMode xmlns="">Center</TopMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Items</Name>
				<Pattern>Custom</Pattern>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneControl">
						<Name>ActionPane</Name>
						<ElementPosition>715827882</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ActionPane</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>InventOnHandItem</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>InventOnhandItem</MenuItemName>
										<Text>@SYS438</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>ButtonInventDimParmFixed</Name>
										<ElementPosition>1879048190</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>125</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<MenuItemName>InventDimParmFixed</MenuItemName>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>Strip</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>GridItems</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MCRUpSellTableOE_ItemId</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>286331152</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>ItemId</DataField>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ItemName</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>itemName</DataMethod>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ProductDimensions</Name>
								<ElementPosition>1700091219</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensions_configId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>configId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensions_InventSizeId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventSizeId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensions_InventColorId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventColorId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensions_InventStyleId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventStyleId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ProductDimensions_InventVersionId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventVersionId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
								</Controls>
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataGroup>ProductDimensions</DataGroup>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>StorageDimensions</Name>
								<ElementPosition>1789569704</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensions_InventSiteId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventSiteId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensions_InventLocationId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventLocationId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensions_wMSLocationId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>wMSLocationId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensions_InventStatusId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InventStatusId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>StorageDimensions_LicensePlateId</Name>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>LicensePlateId</DataField>
										<DataSource>InventDim</DataSource>
									</AxFormControl>
								</Controls>
								<BackgroundColor>WindowBackground</BackgroundColor>
								<DataGroup>StorageDimensions</DataGroup>
								<DataSource>InventDim</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>TmpMCRUpSellOrderEntry_UpSellType</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1879048190</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>UpSellType</DataField>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Price</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2013265918</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayPrice</DataMethod>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>TmpMCRUpSellOrderEntry_SalesQty</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2080374782</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>SalesQty</DataField>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>Amount</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>2146435070</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displayAmount</DataMethod>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<Label>@SYS6901</Label>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormRealControl">
								<Name>TmpMCRUpSellOrderEntry_AvailPhysical</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>2146959358</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Real</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>AvailPhysical</DataField>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<NoOfDecimals>-1</NoOfDecimals>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>displayItemSalesControl</Name>
								<ConfigurationKey>MCRCallCenter</ConfigurationKey>
								<ElementPosition>2147352574</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>0</Height>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Image</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>0</Width>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>displaySalesControl</DataMethod>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<Imagemode>Center</Imagemode>
							</AxFormControl>
						</Controls>
						<DataSource>TmpMCRUpSellOrderEntry</DataSource>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>ScriptAndImage</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Pattern>ImagePreview</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Image</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormImageControl">
								<Name>ItemImage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Height>150</Height>
								<HeightMode>Auto</HeightMode>
								<Left>0</Left>
								<LeftMode>RightEdge</LeftMode>
								<Type>Image</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Width>125</Width>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>showItemImage</DataMethod>
								<DataSource>TmpMCRUpSellOrderEntry</DataSource>
								<Imagemode>SizeToFit</Imagemode>
								<Label>@SYS58650</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>FieldsGroup</Name>
								<Pattern>FieldsFieldGroups</Pattern>
								<PatternVersion>1.1</PatternVersion>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>TmpMCRUpSellOrderEntry_Script</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS87599</Label>
										<MultiLine>Yes</MultiLine>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonCommitGroup</Name>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelButton</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>