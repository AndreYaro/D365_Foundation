<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RPayAverageBonusSum</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
    [Form]
    public class RPayAverageBonusSum extends FormRun
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        Common common = this.args().record();
        ;
        if (common.TableId == tableNum(RPayAverageEarnEmplPeriodTable))
        {
            rPayAverageEarnEmplPeriodTable = this.args().record();
        }
        else
        {
            throw error("@GLS106133");
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>PayTrans</Name>
				<Methods>
					<Method>
						<Name>includedBonusSum</Name>
						<Source><![CDATA[
        display RPayAmount includedBonusSum(RPayTrans _rPayTrans)
        {
            return _rPayTrans.QtyDay;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        #timeConstants
        void init()
        {
            ReportPeriod_RU startPeriod,
                            endPeriod;
            RPayFundMember  rPayFundMember;
            RPayTrans       rPayTrans;
            RPayTable       rPayTable;
            int             i,bonusNumber,tmpLag,monthForCalc;
            real            bonusPart;
            RPayRateCallContext callContext;

            void insertPayTrans()
            {
                if (payTrans.checkClosedModule())
                {
                    payTrans.doInsert();
                }
            }

            super();

            this.cacheAddMethod(tableMethodStr(RPayTrans, costTypeName));
            payTrans.setTmp();

            endPeriod    = endmth(prevMth(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod));
            callContext  = new RPayRateCallContext();
            callContext.parmRateDate(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);
            callContext.parmEmployeeId(rPayAverageEarnEmplPeriodTable.EmplId);
            monthForCalc = any2int(RPayRateTable::find(rPayAverageEarnEmplPeriodTable.MonthForCalc).getValue(callContext));
            startPeriod  = dateMthFwd(endPeriod,1 - monthForCalc);

            while select PayCtype, RpayPeriodFrequency from rPayTable
                  exists join rPayFundMember
                      where (rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Month   ||
                             rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Quarter ||
                             rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::HalfYear) &&
                             rPayTable.PayCtype            == rPayFundMember.PayCostType    &&
                             rPayFundMember.CounterUnit    == rPayAverageEarnEmplPeriodTable.BonusFund
            {
                switch (rPayTable.RpayPeriodFrequency)
                {
                    case RPayPeriodFrequency::Month    :
                        tmpLag = 1;
                        break;
                    case RPayPeriodFrequency::Quarter  :
                        tmpLag = #monthsPerQuarter;
                        break;
                    case RPayPeriodFrequency::HalfYear :
                        tmpLag = #monthsPerHalfYear;
                        break;
                }
                bonusNumber = monthForCalc div tmpLag;
                bonusPart   = 1;
                if (! bonusNumber)
                {
                    bonusNumber = 1;
                    bonusPart   = monthForCalc / tmpLag;
                }

                i = 0;
                switch (rPayAverageEarnEmplPeriodTable.rPayBonusAccountingCriterion)
                {
                    case RPayBonusAccountingCriterion::First:
                        while select rPayTrans order by TransDate
                            where rPayTrans.PayCtype  == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid    == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.PayPeriod >= startPeriod                           &&
                                  rPayTrans.PayPeriod <= endPeriod
                        {
                            i ++;
                            payTrans.data(rPayTrans);
                            if (i > bonusNumber)
                            {
                                payTrans.Correct = NoYes::No;
                                payTrans.QtyDay  = 0;
                            }
                            else
                            {
                                payTrans.Correct = NoYes::Yes;
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                            }
                            insertPayTrans();
                        }
                        break;
                    case RPayBonusAccountingCriterion::Last:
                        while select rPayTrans order by TransDate desc
                            where rPayTrans.PayCtype  == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid    == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.PayPeriod >= startPeriod                           &&
                                  rPayTrans.PayPeriod <= endPeriod
                        {
                            i ++;
                            payTrans.data(rPayTrans);
                            if (i > bonusNumber)
                            {
                                payTrans.Correct = NoYes::No;
                                payTrans.QtyDay  = 0;
                            }
                            else
                            {
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                                payTrans.Correct = NoYes::Yes;
                            }
                            insertPayTrans();
                        }
                        break;
                    case RPayBonusAccountingCriterion::Max:
                        while select rPayTrans order by Amount desc
                            where rPayTrans.PayCtype  == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid    == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.PayPeriod >= startPeriod                           &&
                                  rPayTrans.PayPeriod <= endPeriod
                        {
                            i ++;
                            payTrans.data(rPayTrans);
                            if (i > bonusNumber)
                            {
                                payTrans.QtyDay  = 0;
                                payTrans.Correct = NoYes::No;
                            }
                            else
                            {
                               payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                               payTrans.Correct = NoYes::Yes;
                            }
                            insertPayTrans();
                        }
                        break;
                    case RPayBonusAccountingCriterion::Min:
                        while select rPayTrans order by Amount
                            where rPayTrans.PayCtype  == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid    == rPayAverageEarnEmplPeriodTable.EmplId &&
                                   rPayTrans.PayPeriod >= startPeriod                           &&
                                  rPayTrans.PayPeriod <= endPeriod
                        {
                            i++;
                            payTrans.data(rPayTrans);
                            if (i > bonusNumber)
                            {
                                payTrans.Correct = NoYes::No;
                                payTrans.QtyDay  = 0;
                            }
                            else
                            {
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                                payTrans.Correct = NoYes::Yes;
                            }
                            insertPayTrans();
                        }
                        break;
                }
            }
            startPeriod = prevYr(rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);
            while select PayCtype from rPayTable
                  exists join rPayFundMember
                      where rPayTable.RpayPeriodFrequency == RPayPeriodFrequency::Year   &&
                            rPayTable.PayCtype            == rPayFundMember.PayCostType &&
                            rPayFundMember.CounterUnit    == rPayAverageEarnEmplPeriodTable.BonusFund
            {
                tmpLag = #monthsPerYear;
                bonusNumber = 1;
                bonusPart   = monthForCalc / tmplag;
                i = 0;
                switch (rPayAverageEarnEmplPeriodTable.rPayBonusAccountingCriterion)
                {
                    case RPayBonusAccountingCriterion::First:
                        while select rPayTrans order by TransDate
                            where rPayTrans.PayCtype   == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid     == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.SourceDate == dateEndYr(startPeriod)
                        {
                            payTrans.data(rPayTrans);
                            i ++;
                            if (i == 1)
                            {
                                payTrans.Correct = NoYes::Yes;
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                            }
                            else
                            {
                                payTrans.QtyDay  = 0;
                                payTrans.Correct = NoYes::No;
                            }
                            insertPayTrans();
                        }
                        break;

                    case RPayBonusAccountingCriterion::Last:
                        while select rPayTrans order by TransDate desc
                            where rPayTrans.PayCtype   == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid     == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.SourceDate == dateEndYr(startPeriod)
                        {
                            payTrans.data(rPayTrans);
                            i ++;
                            if (i == 1)
                            {
                                payTrans.Correct = NoYes::Yes;
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                            }
                            else
                            {
                                payTrans.QtyDay  = 0;
                                payTrans.Correct = NoYes::No;
                            }
                            insertPayTrans();
                        }
                        break;

                    case RPayBonusAccountingCriterion::Max:
                        while select rPayTrans order by Amount desc
                            where rPayTrans.PayCtype   == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid     == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.SourceDate == dateEndYr(startPeriod)
                        {
                            payTrans.data(rPayTrans);
                            i ++;
                            if (i == 1)
                            {
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                                payTrans.Correct = NoYes::Yes;
                            }
                            else
                            {
                                payTrans.QtyDay  = 0;
                                payTrans.Correct = NoYes::No;
                            }
                            insertPayTrans();
                        }
                        break;

                    case RPayBonusAccountingCriterion::Min:
                        while select rPayTrans order by Amount
                            where rPayTrans.PayCtype   == rPayTable.PayCtype                    &&
                                  rPayTrans.Emplid     == rPayAverageEarnEmplPeriodTable.EmplId &&
                                  rPayTrans.SourceDate == dateEndYr(startPeriod)
                        {
                            payTrans.data(rPayTrans);
                            i ++;
                            if (i == 1)
                            {
                                payTrans.Correct = NoYes::Yes;
                                payTrans.QtyDay  = CurrencyExchangeHelper::amount(rPayTrans.Amount * bonusPart);
                            }
                            else
                            {
                                payTrans.Correct = NoYes::No;
                                payTrans.QtyDay  = 0;
                            }
                            insertPayTrans();
                        }
                        break;
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>PayTrans</Name>
			<Table>RPayTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Amount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BranchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CalcTransDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Correct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CorrectedPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CounterUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Emplid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FamilyRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HrmOrganisationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetAccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayCtype</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayModuleCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PayPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>QtyHour</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefSheetTransRecid</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Scanning</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SourceTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxIncomeGroupCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxRedemption</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<Index>PeriodEmplIdx</Index>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@RUP1059</Caption>
		<Pattern xmlns="">Task</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ApplicationBar</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabOverview</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>ToolbarList</Pattern>
						<PatternVersion>1.2</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PayTrans_PayPeriod</Name>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PayPeriod</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PayTrans_PayCtype</Name>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>PayCtype</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CostTypeName</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>costtypename</DataMethod>
										<DataSource>PayTrans</DataSource>
										<DisplayLength>30</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>IncludedBonusSum</Name>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>includedBonusSum</DataMethod>
										<DataSource>PayTrans</DataSource>
										<Label>@RUP1117</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>PayTrans_Amount</Name>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Amount</DataField>
										<DataSource>PayTrans</DataSource>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PayTrans_Correct</Name>
										<ElementPosition>1879048185</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataField>Correct</DataField>
										<DataSource>PayTrans</DataSource>
										<Label>@RUP1118</Label>
									</AxFormControl>
								</Controls>
								<DataSource>PayTrans</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS9039</Caption>
						<DataSource>PayTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabGeneral</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Pattern>FieldsFieldGroups</Pattern>
						<PatternVersion>1.1</PatternVersion>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Department</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Department_HrmOrganisationId</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>HrmOrganisationId</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Department</DataGroup>
								<DataSource>PayTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Periods</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Periods_PayPeriod</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PayPeriod</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Periods_SourceDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>SourceDate</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Periods_TransDate</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>TransDate</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>Periods_CorrectedPeriod</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CorrectedPeriod</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Periods</DataGroup>
								<DataSource>PayTrans</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Calculation</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Calculation_PayModuleCode</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>PayModuleCode</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormIntegerControl">
										<Name>Calculation_Scanning</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>Integer</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>Scanning</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Calculation_CounterUnit</Name>
										<FilterExpression>%1</FilterExpression>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DataField>CounterUnit</DataField>
										<DataSource>PayTrans</DataSource>
									</AxFormControl>
								</Controls>
								<DataGroup>Calculation</DataGroup>
								<DataSource>PayTrans</DataSource>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@SYS2952</Caption>
						<DataSource>PayTrans</DataSource>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>
