<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankBridgingInquiryV2</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankBridgingInquiryV2 extends FormRun
{
    BankBridgingTransactionTmp bankBridgingTransactionTmpLocal;

}
]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #Task

        switch (_taskId)
        {
            case #taskRefresh:
                this.reloadData();
                break;

            default:
                break;
        }

        return super(_taskId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.loadData();

        if (this.args() && this.args().record().TableId == tableNum(BankAccountTable))
        {
            BankAccount.visible(NoYes::No);
            BankAccountTable bankAccountTable = this.args().record();
            BankBridgingTransactionTmp_ds.query()
                .dataSourceName(BankBridgingTransactionTmp_ds.name())
                .addRange(fieldNum(BankBridgingTransactionTmp, BankAccount))
                .value(SysQuery::value(bankAccountTable.AccountID));
        }

        boolean bankBridgingVendorTransactionDetailsFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance());
        VendAccountNum.visible(bankBridgingVendorTransactionDetailsFeatureEnabled);
        VendName.visible(bankBridgingVendorTransactionDetailsFeatureEnabled);
        VendRemittanceLocation.visible(bankBridgingVendorTransactionDetailsFeatureEnabled);
        VendRemittanceAddress.visible(bankBridgingVendorTransactionDetailsFeatureEnabled);

        if (isFlightEnabled(CustVendPDCManager::CalculateCanceledPDCPayments))
        {
            QueryBuildDataSource qbdsCustVendPDCRegister = BankBridgingTransactionTmp_ds.query().dataSourceTable(tableNum(BankBridgingTransactionTmp)).addDataSource(tableNum(CustVendPDCRegister));
            qbdsCustVendPDCRegister.joinMode(JoinMode::NoExistsJoin);
            qbdsCustVendPDCRegister.addLink(fieldNum(BankBridgingTransactionTmp, LedgerJournalTransRecId), fieldNum(CustVendPDCRegister, LedgerJournalTrans));
            qbdsCustVendPDCRegister.relations(true);
            QueryBuildRange qbrPDCStatus = qbdsCustVendPDCRegister.addRange(fieldNum(CustVendPDCRegister, PDCStatus));
            qbrPDCStatus.value(queryValue(PostDatedCheckStatus::Cancelled));
            qbrPDCStatus.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    private void loadData()
    {
        this.loadBridgingDataFromBankBridgingTrans();
        this.loadOriginBridgingData();
        BankBridgingTransactionTmp.linkPhysicalTableInstance(bankBridgingTransactionTmpLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadData</Name>
				<Source><![CDATA[
    private void reloadData()
    {
        ttsbegin;
        delete_from bankBridgingTransactionTmpLocal;
        this.loadData();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBridgingDataFromBankBridgingTrans</Name>
				<Source><![CDATA[
    private void loadBridgingDataFromBankBridgingTrans()
    {
        BankBridgingTrans bankBridgingTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerEntry ledgerEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        insert_recordset bankBridgingTransactionTmpLocal(
            BankAccount, Voucher, Currency, TransactionAmount, AccountingAmount, GeneralJournalAccountEntryRecId, AccountType,
            AccountingDate, JournalBatchNumber, PaymentMethod, PaymentReference, VendTransRecId, RemittanceAddress, RemittanceLocation, LedgerJournalTransRecId)
            select AccountId, BridgedVoucher from bankBridgingTrans
                where bankBridgingTrans.BridgingStatus == bankBridgingStatus::Bridged
                join ledgerEntry
                    where bankBridgingTrans.LedgerEntryRecId == ledgerEntry.RecId
                join TransactionCurrencyCode, TransactionCurrencyAmount, AccountingCurrencyAmount, RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                join AccountType, TransDate, JournalNum, PaymMode, PaymReference, VendTransId, RemittanceAddress, RemittanceLocation, RecId from ledgerJournalTrans
                    where bankBridgingTrans.AccountId == ledgerJournalTrans.BridgingBankAccount
                        && bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOriginBridgingData</Name>
				<Source><![CDATA[
    private void loadOriginBridgingData()
    {
        if (!this.checkOriginalDataExists())
        {
            return;
        }
        BankAccountTable bankAccountTable;
        DimensionAttributeValueCombination davc;
        BankBridgingInquiry bankBridgingInquiry;
        LedgerEntry ledgerEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntryJournal ledgerEntryJournal;
        LedgerJournalTrans ledgerJournalTrans;
        insert_recordset bankBridgingTransactionTmpLocal(
            PaymentMethod, AccountType, Currency, TransactionAmount, AccountingAmount, GeneralJournalAccountEntryRecId,
            PaymentReference, Voucher, AccountingDate, JournalBatchNumber, VendTransRecId,
            RemittanceAddress, RemittanceLocation, LedgerJournalTransRecId, BankAccount)
            select PaymMode, AccountType from ledgerTransFurtherPosting
                join ledgerEntry
                    where ledgerEntry.RecId == ledgerTransFurtherPosting.RefRecId
                        && ledgerEntry.IsBridgingPosting == NoYes::Yes
                join TransactionCurrencyCode, TransactionCurrencyAmount, AccountingCurrencyAmount, RecId, Text from generalJournalAccountEntry
                    where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
                join SubledgerVoucher, AccountingDate from generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                join ledgerEntryJournal
                    where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
                join JournalNum, VendTransId, RemittanceAddress, RemittanceLocation, RecId from ledgerJournalTrans
                    where ledgerJournalTrans.Voucher == generalJournalEntry.SubledgerVoucher
                        && ledgerJournalTrans.TransDate == generalJournalEntry.AccountingDate
                        && ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber
                        && ledgerJournalTrans.BridgingBankAccount == ''
                join bankBridgingInquiry
                    where bankBridgingInquiry.PaymMode == ledgerTransFurtherPosting.PaymMode
                        && bankBridgingInquiry.AccountType == ledgerTransFurtherPosting.AccountType
                join davc
                    where davc.RecId == bankBridgingInquiry.PaymentLedgerDimension
                join AccountID from bankAccountTable
                    where bankAccountTable.AccountID == davc.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOriginalDataExists</Name>
				<Source><![CDATA[
    private boolean checkOriginalDataExists()
    {
        LedgerTransFurtherPosting ledgerTransFurtherPosting;
        BankBridgingTrans bankBridgingTrans;

        select firstonly RecId from ledgerTransFurtherPosting
            notexists join bankBridgingTrans
                where ledgerTransFurtherPosting.RefRecId == bankBridgingTrans.LedgerEntryRecId;

        return ledgerTransFurtherPosting.RecId;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>BankBridgingTransactionTmp</Name>
				<Methods>
					<Method>
						<Name>displayRemittanceAddressDescription</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethod]
        internal display Description255 displayRemittanceAddressDescription(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
        {
            return BankBridgingVendorTransactionDetails::getRemittanceAddressDescription(_bankBridgingTransactionTmp.RemittanceAddress);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayRemittanceLocation</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethod]
        internal display Description displayRemittanceLocation(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
        {
            return BankBridgingVendorTransactionDetails::getRemittanceLocation(_bankBridgingTransactionTmp.RemittanceLocation);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendorName</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethod]
        internal display VendName displayVendorName(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
        {
            return BankBridgingVendorTransactionDetails::getVendorName(_bankBridgingTransactionTmp.VendTransRecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayVendorAccount</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethod]
        internal display VendAccount displayVendorAccount(BankBridgingTransactionTmp _bankBridgingTransactionTmp)
        {
            return BankBridgingVendorTransactionDetails::getVendorAccount(_bankBridgingTransactionTmp.VendTransRecId);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>JournalBatchNumber</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(bankBridgingTransactionTmp.JournalBatchNumber);

            Args jumpArgs = new Args(element);
            jumpArgs.record(ledgerJournalTable);

            str menuItemDisplayName = LedgerJournalStatic::menuItemNameForJournalType(ledgerJournalTable);
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayName, MenuItemType::Display);
            menuFunction.run(jumpArgs);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Voucher</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args jumpArgs = new Args(element);
            
            jumpArgs.record(GeneralJournalEntry::findByGeneralJournalAccountEntry(bankBridgingTransactionTmp.GeneralJournalAccountEntryRecId));

            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(LedgerTransVoucher), MenuItemType::Display);
            menuFunction.run(jumpArgs);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PaymentMethod</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            LedgerJournalType ledgerJournalType = LedgerJournalTable::find(bankBridgingTransactionTmp.JournalBatchNumber).JournalType;
            ModuleCustVend moduleCustVend = BankAccountBridgingPostingHelper::getModuleCustVendFromAccountType(bankBridgingTransactionTmp.AccountType, ledgerJournalType);
            str menuItemStr;
            switch (moduleCustVend)
            {
                case moduleCustVend::Cust:
                    menuItemStr = menuItemDisplayStr(CustPaymMode);
                    break;

                case moduleCustVend::Vend:
                    menuItemStr = menuItemDisplayStr(VendPaymMode);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            CustVendPaymModeTable paymModeTable = CustVendPaymModeTable::findModule(
                moduleCustVend,
                bankBridgingTransactionTmp.PaymentMethod);

            Args jumpArgs = new Args(element);
            jumpArgs.lookupRecord(paymModeTable);

            MenuFunction menuFunction = new MenuFunction(menuItemStr, MenuItemType::Display);
            menuFunction.run(jumpArgs);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BankBridgingTransactionTmp</Name>
			<Table>BankBridgingTransactionTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AccountingAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AccountType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BankAccount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GeneralJournalAccountEntryRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JournalBatchNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentMethod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymentReference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemittanceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransactionAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendTransRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Voucher</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@CashManagement:BankBridgingInquiryTitle</Caption>
		<Pattern xmlns="">SimpleList</Pattern>
		<PatternVersion xmlns="">1.1</PatternVersion>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">SimpleList</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>Action</Name>
				<Type>ActionPane</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Filter</Name>
				<Pattern>CustomAndQuickFilters</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl>
						<Name>QuickFilterControl</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FormControlExtension>
							<Name>QuickFilterControl</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>targetControlName</Name>
									<Type>String</Type>
									<Value>BridgingGrid</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>placeholderText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>defaultColumnName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<FrameType>None</FrameType>
				<Style>CustomFilter</Style>
				<ViewEditMode>Edit</ViewEditMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGridControl">
				<Name>BridgingGrid</Name>
				<Type>Grid</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>BankAccount</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>BankAccount</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormDateControl">
						<Name>AccountingDate</Name>
						<Type>Date</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingDate</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>JournalBatchNumber</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>JournalBatchNumber</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Voucher</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Voucher</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PaymentMethod</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PaymentMethod</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>PaymentReference</Name>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>PaymentReference</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Currency</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>Currency</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
						<LookupOnly>Yes</LookupOnly>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>TransactionAmount</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>TransactionAmount</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormRealControl">
						<Name>AccountingAmount</Name>
						<FilterExpression>%1</FilterExpression>
						<Type>Real</Type>
						<FormControlExtension
							i:nil="true" />
						<DataField>AccountingAmount</DataField>
						<DataSource>BankBridgingTransactionTmp</DataSource>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendAccountNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>No</CacheDataMethod>
						<DataMethod>displayVendorAccount</DataMethod>
						<DataSource>BankBridgingTransactionTmp</DataSource>
						<Label>@SYS14048</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>No</CacheDataMethod>
						<DataMethod>displayVendorName</DataMethod>
						<DataSource>BankBridgingTransactionTmp</DataSource>
						<Label>@CashManagement:VendName</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendRemittanceLocation</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>No</CacheDataMethod>
						<DataMethod>displayRemittanceLocation</DataMethod>
						<DataSource>BankBridgingTransactionTmp</DataSource>
						<Label>@CashManagement:RemittanceName</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>VendRemittanceAddress</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<CacheDataMethod>No</CacheDataMethod>
						<DataMethod>displayRemittanceAddressDescription</DataMethod>
						<DataSource>BankBridgingTransactionTmp</DataSource>
						<Label>@CashManagement:RemittanceAddress</Label>
					</AxFormControl>
				</Controls>
				<DataSource>BankBridgingTransactionTmp</DataSource>
				<Style>Tabular</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>