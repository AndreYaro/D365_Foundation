<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>RetailConnReadScheduleDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class RetailConnReadScheduleDropDialog extends FormRun
{
    RetailConnDatabaseProfile dataStore; // this is not been used any more
    container dataStores = conNull();
    RetailCDXDataGroup dataGroup;
    int64 dataGroupRecId;

}
]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        RetailCDXScheduleDataGroup scheduleDG;
        RetailConnSchedule schedule;
        Name scheduleName;
        

        scheduleName = retailConnSchedule_ScheduleRecID.text();

        select firstonly RecId from schedule where schedule.Name == scheduleName;

        if (!schedule)
        {
            // schedule does not exist
            throw Global::error(strFmt("@Retail:NoSchedule", scheduleName));
        }

        select firstonly RecId
            from scheduleDG
            where scheduleDG.Schedule == schedule.RecId
                && scheduleDG.DataGroup == dataGroupRecId;

        if (!scheduleDG)
        {
            throw Global::error(strFmt("@Retail:DataGroupNoScheduleErr", scheduleName, dataGroupRecId));
        }

        if (dataGroupRecId)
        {
            select firstonly RecId from dataGroup
                where dataGroup.RecId == dataGroupRecId;

            if (!dataGroup)
            {
                throw Global::error(strFmt("@REX4160599", dataGroupRecId));
            }
        }

        if (dataGroup && !conLen(dataStores))
        {
            RetailConnDatabaseProfile dataStoreInGroup;
            select firstonly RecId from dataStoreInGroup
                where dataStoreInGroup.DataGroup == dataGroup.RecId;

            if (!dataStoreInGroup)
            {
                // Data group %1 has no channel database assigned
                throw Global::error(strFmt("@REX4161226", dataGroup.Name));
            }
        }

        super();

        if (conLen(dataStores) || dataGroup)
        {
            RunBaseBatch scheduleRunner = this.initScheduleRunner(schedule, dataGroup, dataStores);

            if (scheduleRunner.prompt())
            {
                scheduleRunner.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initScheduleRunner</Name>
				<Source><![CDATA[
    protected RunBaseBatch initScheduleRunner(RetailConnSchedule _schedule, RetailCDXDataGroup _dataGroup, container _targetDataStore)
    {
        RetailCDXScheduleRunner scheduleRunner = new RetailCDXScheduleRunner();
        scheduleRunner.setFullSync(_schedule.RecId, _dataGroup.RecId, _targetDataStore);

        if (RetailCdxDisableRecurrenceForFullSyncBatchJobsFlight::instance().isEnabled())
        {
            scheduleRunner.paramIsOneTimeBatch(true);
        }

        return scheduleRunner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        RetailCDXDownloadSession downloadSession;
        BatchJob batchJob;

        select count(RecId) from downloadSession
            where downloadSession.IsScheduledFullPackage == NoYes::Yes &&
                downloadSession.Status == RetailCDXDownloadSessionStatus::Started &&
                downloadSession.CreatedDateTime > DateTimeUtil::newDateTime((DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - 2), 0)
         exists join batchJob
            where batchJob.RecId == downloadSession.BatchJobId &&
                (batchJob.Status == BatchStatus::Executing ||
                batchJob.Status == BatchStatus::Waiting);

        if (downloadSession.RecId > 0)
        {
            warning(strFmt("@Retail:RetailCDXManyPackagesGenerationsWarning", downloadSession.RecId));
        }

        const str RetailServiceAccount = 'RetailServiceAccount';
        str permissionWarning = RetailCDXDataSync::GetFullReadAccessPermissionError(curUserId());

        if (permissionWarning != '' &&
            RetailCDXDataSync::GetFullReadAccessPermissionError(RetailServiceAccount) != '')
        {
            // If both current user and RetailServiceAccount have permissions issues, show the current user warning as it's actionable.
            warning(permissionWarning);
        }

        if (element.args() && element.args().caller() && element.args().dataset())
        {
            switch (element.args().record().TableId)
            {
                case tableNum(RetailConnDatabaseProfile):
                    // Method getSelectedDataStores will populate dataGroupRecId
                    dataStores = this.getSelectedDataStores(element.args());
                    break;

                case tableNum(RetailCDXDataGroup):
                    dataGroup = element.args().record();
                    break;
            }
        }

        if (dataGroup)
        {
            dataGroupRecId = dataGroup.RecId;
        }
        else
        {
            if (conLen(dataStores))
            {
                RetailConnDatabaseProfile retailConnDatabaseProfile;
                select count(RecId) from retailConnDatabaseProfile where retailConnDatabaseProfile.DataGroup == dataGroupRecId;
                
                if (retailConnDatabaseProfile.RecId > conLen(dataStores))
                {
                    warning("@Retail:ChannelDatabaseFullSyncBaselineWarning");
                }
            }
            else
            {
                throw error(strFmt("@SYS22828", funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedDataStores</Name>
				<Source><![CDATA[
    private container getSelectedDataStores(Args _args)
    {
        RetailConnDatabaseProfile selectedDataStore;
        FormDataSource callingFormDataSource;
        container targetDataStore = conNull();
        FormRun caller;

        if (_args.record().TableId == tableNum(RetailConnDatabaseProfile))
        {
            caller = _args.caller();
            callingFormDataSource = FormDataUtil::getFormDataSource(_args.record());

            if (callingFormDataSource)
            {
                selectedDataStore = callingFormDataSource.getFirst(true) ? callingFormDataSource.getFirst(true) : callingFormDataSource.cursor();

                while (selectedDataStore)
                {
                    targetDataStore += selectedDataStore.RecId;

                    if (!dataGroupRecId)
                    {
                        dataGroupRecId = selectedDataStore.DataGroup;
                    }
                    else if (dataGroupRecId != selectedDataStore.DataGroup)
                    {
                        throw error("@Retail:AllDataStoresSameGroup");
                    }

                    selectedDataStore = callingFormDataSource.getNext();
                }
            }
        }

        return targetDataStore;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>RetailConnSchedule_ScheduleRecID</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>getFilteredScheduleQuery</Name>
						<Source><![CDATA[
        private Query getFilteredScheduleQuery()
        {
            Query q = null;

            QueryBuildDataSource scheduleDS;
            QueryBuildDataSource scheduleDataGroupDS;

            QueryBuildRange scheduleRange;
            QueryBuildRange scheduleDataGroupRange;

            q = new Query();

            scheduleDS = q.addDataSource(tableNum(RetailConnSchedule));
            scheduleDS.addSortField(fieldNum(RetailConnSchedule, Name));

            scheduleRange = scheduleDS.addRange(fieldNum(RetailConnSchedule, ScheduleType));
            scheduleRange.value(enum2str(RetailCDXDownloadUpload::Download));

            scheduleDataGroupDS = scheduleDS.addDataSource(tableNum(RetailCDXScheduleDataGroup));
            scheduleDataGroupDS.relations(false);
            scheduleDataGroupDS.addLink(fieldNum(RetailConnSchedule, RecId), fieldNum(RetailCDXScheduleDataGroup, Schedule));
            scheduleDataGroupDS.joinMode(JoinMode::InnerJoin);

            scheduleDataGroupRange = scheduleDataGroupDS.addRange(fieldNum(RetailCDXScheduleDataGroup, DataGroup));
            scheduleDataGroupRange.value(int642Str(dataGroupRecId));

            return q;
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Query q = this.getFilteredScheduleQuery();
            if (q)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailConnSchedule), this);
                sysTableLookup.addLookupfield(fieldNum(RetailConnSchedule, Name));
                sysTableLookup.addLookupfield(fieldNum(RetailConnSchedule, Description));
                sysTableLookup.parmQuery(q);
                sysTableLookup.performFormLookup();
            }
            else
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@REX4520147</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>MainInstruction</Name>
				<ElementPosition>1073741822</ElementPosition>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<FilterExpression>%1</FilterExpression>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@REX4520147</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>RetailConnSchedule_ScheduleRecID</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Left>0</Left>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>