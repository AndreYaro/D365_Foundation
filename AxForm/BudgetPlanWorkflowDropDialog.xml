<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BudgetPlanWorkflowDropDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BudgetPlanWorkflowDropDialog extends FormRun implements WorkflowIDropDialog
{
    private Common              record;
    private FormRun             caller;
    private WorkflowDropDialog  workflowDropDialog;
    private Common              workflowConfiguration;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        record = element.args().record();
        BudgetPlanHeader header = record as BudgetPlanHeader;

        if (header.IsHistorical)
        {
            throw warning("@Budget:BudgetPlanning_BudgetPlanWorkflow_NoViewHistoryPlan");
        }
        if (header.ParentBudgetPlanHeader
                && BudgetPlanHeader::find(header.ParentBudgetPlanHeader).WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted)
        {
            throw warning("@Budget:BudgetPlanParentNotSubmittedWorkflowWarning");
        }
        else
        {
            caller = element.args().caller();
            workflowConfiguration = BudgetPlanWorkflowHelper::getWorkflowVersionTable(record.RecId);

            if (!workflowConfiguration
                && header.WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted)
            {
                throw error("@Budget:NoWorkflowDefinedError");
            }

            super();

            workflowDropDialog = WorkflowDropDialog::construct(this);
            workflowDropDialog.updateControls();
            this.disableModifyingControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableModifyingControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables all workflow controls that can edit a document.
    /// </summary>
    public void disableModifyingControls()
    {
        if (BudgetPlan::isUserBlocked(record as BudgetPlanHeader))
        {
            int buttonsCount = ButtonGroup.controlCount();
            for (int i = 1; i <= buttonsCount; i++)
            {
                FormControl currentControl = ButtonGroup.controlNum(i);

                if (currentControl is FormFunctionButtonControl)
                {
                    this.disableControl(currentControl as FormFunctionButtonControl);
                }
                else if (currentControl is FormMenuButtonControl)
                {
                    FormMenuButtonControl menuButtonControl = currentControl as FormMenuButtonControl;
                    int menuButtonsCount = menuButtonControl.controlCount();

                    for (int j = 1; j <= menuButtonsCount; j++)
                    {
                        this.disableControl(menuButtonControl.controlNum(j) as FormFunctionButtonControl);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables a <c>FormFunctionButtonControl</c> object if it is not the View Workflow History action.
    /// </summary>
    /// <param name = "_buttonControl"> The <c>FormFunctionButtonControl</c> to disable. </param>
    private void disableControl(FormFunctionButtonControl _buttonControl)
    {
        if (_buttonControl.menuItemName() != menuitemActionStr(WorkflowViewHistory))
        {
            _buttonControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the workflow drop dialog classes to set the caption based on context of the workflow.
    /// </summary>
    /// <param name = "_caption"> The caption to set. </param>
    public void setCaption(str _caption)
    {
        this.design().caption(_caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first promoted action button that the workflow drop dialog classes will use to bind the "most used" action menu item (i.e. Approve).
    /// </summary>
    /// <returns> The <c>FormFunctionButtonControl</c> control. </returns>
    public FormFunctionButtonControl getPromotedActionButton1()
    {
        return PromotedAction1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPromotedActionButton2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the second promoted action button that the workflow drop dialog classes will use to bind the "second most used" action menu item (i.e. Reject).
    /// </summary>
    /// <returns> The <c>FormFunctionButtonControl</c> control. </returns>
    public FormFunctionButtonControl getPromotedActionButton2()
    {
        return PromotedAction2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverflowMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu button used for the overflow actions (i.e. Request Change, Delegate, View History).
    /// </summary>
    /// <returns> The <c>FormMenuButtonControl</c> control. </returns>
    public FormMenuButtonControl getOverflowMenuButton()
    {
        return OverflowActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstructionTextControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns static text control where the workflow message context will be added by the workflow drop dialog classes.
    /// </summary>
    /// <returns> The <c>FormStaticTextControl</c> control. </returns>
    public FormStaticTextControl getInstructionTextControl()
    {
        return InstructionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record for which the workflow drop dialog classes will load workflow information.
    /// </summary>
    /// <returns> The <c>Common</c> record buffer. </returns>
    public Common getRecord()
    {
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record is ready to be submitted to workflow.
    /// </summary>
    /// <returns> true, if the record can be submitted to workflow; otherwise, false. </returns>
    public boolean canSubmitToWorkflow()
    {
        return caller.canSubmitToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the workflow version to enable the submission for the document.
    /// </summary>
    /// <returns> The <c>WorkflowVersionTable</c> record. </returns>
    public Common loadWorkflowConfiguration()
    {
        return workflowConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallingForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the calling form (i.e. the drop dialog form). Used in the <c>WorkflowDropDialog</c> class.
    /// </summary>
    /// <returns> The calling <c>BudgetPlanWorkflowDropDialog</c> form. </returns>
    public FormRun getCallingForm()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// The workflow action menu items (Approve, Reject, etc.) call this FormRun method to retrieve the active workflow work item that was loaded onto the form.
    /// </summary>
    /// <returns> The <c>WorkflowWorkItemTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct work item. </remarks>
    public Common getActiveWorkflowWorkItem()
    {
        return workflowDropDialog.getActiveWorkflowWorkItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowTrackingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Workflow history menu item calls this <c>FormRun</c> method to understand which workflow history record to load.
    /// </summary>
    /// <returns> The <c>WorkflowTrackingStatusTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct workflow history. </remarks>
    public Common getActiveWorkflowTrackingStatus()
    {
        return workflowDropDialog.getActiveWorkflowTrackingStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Submit workflow action menu item classes call this <c>FormRun</c> method to retrieve the workflow configuration to use when Sumbit is clicked.
    /// </summary>
    /// <returns> The <c>WorkflowVersionTable</c> record. </returns>
    /// <remarks> Since the calling form is now the drop dialog form (not the main form), this method is overridden to ensure we are passing the correct workflow configuration. </remarks>
    public Common getActiveWorkflowConfiguration()
    {
        return workflowDropDialog.getActiveWorkflowConfiguration();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>BudgetPlanHeader</Name>
			<Table>BudgetPlanHeader</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>BudgetingOrganization</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanningStage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BudgetPlanPriority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Currency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InUseBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHistorical</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Layout</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentBudgetPlanHeader</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlanningUserGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Rank</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkflowStatus</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">DropDialog</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>InstructionText</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ExtendedStyle>dialog_secondaryInstruction</ExtendedStyle>
				<Type>StaticText</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<Type>ButtonGroup</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction1</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<FormControlExtension
							i:nil="true" />
						<MenuItemName>WorkflowStatus</MenuItemName>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuFunctionButtonControl">
						<Name>PromotedAction2</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuFunctionButton</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<MenuItemName>WorkflowStatus</MenuItemName>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormMenuButtonControl">
						<Name>OverflowActions</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>MenuButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Text>@SYS21706</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>