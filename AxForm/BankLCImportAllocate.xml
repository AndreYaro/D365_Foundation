<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>BankLCImportAllocate</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class BankLCImportAllocate extends FormRun
{
    BankLCImportTrans                   transType;
    BankLCImport                        bankLCImport;
    BankLCImportMargin                  bankLCImportMargin;
    BankLCImportCharge_SA               bankLCImportCharge;
    BankLCImportTransAllocationType     allocationType;
    BankLCLineRefRecId                  bankLCImportLineRefRecId;
    BankLCImportLineNumController       bankLCImportLineNumController;

}
]]></Source>
			</Method>
			<Method>
				<Name>allocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocate the transactions according to the trans type.
    /// </summary>
    public void allocate()
    {
        BankLCImportMarginTransType     bankLCImportMarginTransType;
        BankLCImportChargeTransType_SA  bankLCImportChargeTransType;

        switch (transType)
        {
            case BankLCImportTrans::Margin:
                bankLCImportMarginTransType =  BankLCImportMarginTransType::constructFromBankLCImport(bankLCImport.RecId);
                bankLCImportMarginTransType.allocateTransaction(allocationType, bankLCImportLineRefRecId);
                break;

            case BankLCImportTrans::Charge_SA:
                bankLCImportChargeTransType =  BankLCImportChargeTransType_SA::constructFromBankLCImport(bankLCImport.RecId);
                bankLCImportChargeTransType.allocateTransaction(allocationType, bankLCImportLineRefRecId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the control, enable line num only if the allocation type is dedicated.
    /// </summary>
    public void configControls()
    {
        if (allocationType == BankLCImportTransAllocationType::Dedicated)
        {
            IntEdit_LineNum.allowEdit(true);
            IntEdit_LineNum.mandatory(true);
        }
        else
        {
            bankLCImportLineRefRecId = 0;
            IntEdit_LineNum.allowEdit(false);
            IntEdit_LineNum.mandatory(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAllocationType</Name>
				<Source><![CDATA[
    edit public BankLCImportTransAllocationType editAllocationType(boolean _set, BankLCImportTransAllocationType _value)
    {
        if (_set)
        {
            allocationType = _value;
        }

        return allocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCShipmentLineNum</Name>
				<Source><![CDATA[
    edit public BankLCShipmentLineNum editBankLCShipmentLineNum(
        boolean _set,
        BankLCShipmentLineNum _value)
    {
        BankLCImportLine bankLCImportLineLocal;
        if (_set)
        {
            bankLCImportLineLocal = BankLCImportLine::findByImportTableAndLineNum(bankLCImport.RecId, _value);
            if (bankLCImportLineLocal.RecId != 0
                && !bankLCImportLineLocal.isInvoiced())
            {
                bankLCImportLineRefRecId = bankLCImportLineLocal.RecId;
            }

            if (bankLCImportLineRefRecId)
            {
                return _value;
            }
        }
        return BankLCImportLine::find(bankLCImportLineRefRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        if (element.args().parmEnumType() != enumnum(BankLCImportTrans))
        {
            Box::stop(strfmt("@SYS19096", formStr(BankLCImportAllocate), tableStr(BankLCImport)));
            this.lifecyclehelper().cancelFormInitialization(
                Exception::Error, strfmt("@SYS19096", formStr(BankLCImportAllocate), tableStr(BankLCImport)));
            return;
        }

        transType = element.args().parmEnum();

        switch (transType)
        {
            case BankLCImportTrans::Margin:
                BankLCImportFeatureChecker bankLCImportFeatureChecker = BankLCImportFeatureChecker::construct();
                if (!bankLCImportFeatureChecker.checkFeatureEnabled(false))
                {
                    Box::stop(bankLCImportFeatureChecker.getCheckFailedMessage());
                    this.lifecyclehelper().cancelFormInitialization(Exception::Error, bankLCImportFeatureChecker.getCheckFailedMessage());
                }
                if (element.args().dataset() == tablenum(BankLCImportMargin))
                {
                    bankLCImportMargin = element.args().record();
                    bankLCImport = BankLCImport::find(bankLCImportMargin.BankLCImport);
                }
                break;

            case BankLCImportTrans::Charge_SA:
                BankLCImportChargeFeatureChecker_SA bankLCImportChargeFeatureChecker_SA = BankLCImportChargeFeatureChecker_SA::construct();
                if (!bankLCImportChargeFeatureChecker_SA.checkFeatureEnabled(false))
                {
                    Box::stop(bankLCImportChargeFeatureChecker_SA.getCheckFailedMessage());
                    this.lifecyclehelper().cancelFormInitialization(Exception::Error, bankLCImportChargeFeatureChecker_SA.getCheckFailedMessage());
                    return;
                }
                if (element.args().dataset() == tablenum(BankLCImportCharge_SA))
                {
                    bankLCImportCharge = element.args().record();
                    bankLCImport = BankLCImport::find(bankLCImportCharge.BankLCImport);
                }
                break;
        }

        if (!bankLCImport || bankLCImport.RecId == 0)
        {
            Box::stop(strfmt("@SYS19324",formStr(BankLCImportAllocate)));
            this.lifecyclehelper().cancelFormInitialization(Exception::Error, strfmt("@SYS19324",formStr(BankLCImportAllocate)));
            return;
        }

        super();

        bankLCImportLineNumController =  BankLCImportLineNumController::construct();
        bankLCImportLineNumController.parmBankLCRecId(bankLCImport.RecId);

        switch (transType)
        {
            case BankLCImportTrans::Margin:
                bankLCImportLineNumController.parmAllowOpened(true);
                bankLCImportLineNumController.parmAllowUpdatedPackingSlip(true);
                break;

            case BankLCImportTrans::Charge_SA:
                bankLCImportLineNumController.parmAllowOpened(true);
                break;
        }

        element.configControls();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>ComboBoxAllocationType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.configControls();
            }

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>IntEdit_LineNum</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            bankLCImportLineNumController.jumpRef();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            bankLCImportLineNumController.performLookup(this);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.allocate();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS332226</Caption>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Pattern xmlns="">DropDialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<SaveSize xmlns="">No</SaveSize>
		<Scrollbars xmlns="">No</Scrollbars>
		<Style xmlns="">DropDialog</Style>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Pattern>FieldsFieldGroups</Pattern>
				<PatternVersion>1.1</PatternVersion>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>ComboBoxAllocationType</Name>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editAllocationType</DataMethod>
						<Label>@SYS332273</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormIntegerControl">
						<Name>IntEdit_LineNum</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Integer</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<DataMethod>editBankLCShipmentLineNum</DataMethod>
						<Label>@SYS316154</Label>
					</AxFormControl>
				</Controls>
				<ColumnsMode>Fill</ColumnsMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<LeftMode>AutoRight</LeftMode>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OKButton</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>