<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(EcoResProductV2Entity, ProductType)],

            [fieldNum(EcoResProductV2Entity, ServiceType),
                fieldNum(EcoResProductV2Entity, ProductType)],

            [fieldNum(EcoResProductV2Entity, ProductSubType)],

            [fieldNum(EcoResProductV2Entity, ProductSearchName),
                [fieldNum(EcoResProductV2Entity, ProductName)]],

            [fieldNum(EcoResProductV2Entity, VariantConfigurationTechnology),
                [fieldNum(EcoResProductV2Entity, ProductSubType)]],

            [fieldNum(EcoResProductV2Entity, IsCatchWeightProduct),
                [fieldNum(EcoResProductV2Entity, ProductType), fieldNum(EcoResProductV2Entity, IsProductKit)]],

            [fieldNum(EcoResProductV2Entity, ProductDimensionGroupName),
                [fieldNum(EcoResProductV2Entity, IsProductKit), fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]],

            [fieldNum(EcoResProductV2Entity, StorageDimensionGroupName),
                [fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]],

            [fieldNum(EcoResProductV2Entity, TrackingDimensionGroupName),
                [fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]],

            [fieldNum(EcoResProductV2Entity, ProductSizeGroupId),
                [fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]],

            [fieldNum(EcoResProductV2Entity, ProductStyleGroupId),
                [fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]],

            [fieldNum(EcoResProductV2Entity, ProductColorGroupId),
                [fieldNum(EcoResProductV2Entity, RetailProductCategoryname)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResProductV2Entity, ProductType):
                if (!this.ProductType)
                {
                    EcoResProductCrossTableManager::defaultProductType(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ServiceType):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductType)))
                {
                    EcoResProductCrossTableManager::defaultProductServiceType(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductSubType):
                if (!this.ProductSubType)
                {
                    EcoResProductCrossTableManager::defaultProductSubType(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductSearchName):
                if (!this.ProductSearchName)
                {
                    //Search name is only defaulted when it is empty.
                    EcoResProductCrossTableManager::defaultProductSearchName(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, VariantConfigurationTechnology):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductSubType))
                    && !this.VariantConfigurationTechnology)
                {
                    EcoResProductCrossTableManager::defaultVariantConfigurationTechnology(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, IsCatchWeightProduct):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductType)) || this.isFieldSet(fieldNum(EcoResProductV2Entity, IsProductKit)))
                {
                    EcoResProductCrossTableManager::defaultIsCatchWeightProduct(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductDimensionGroupName):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, IsProductKit)) || this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultProductDimensionGroupName(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, StorageDimensionGroupName):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultGlobalStorageDimensionGroupName(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, TrackingDimensionGroupName):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultGlobalTrackingDimensionGroupName(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductSizeGroupId):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultSizeGroupId(this.creationDataAdaptor());
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductStyleGroupId):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultStyleGroupId(this.creationDataAdaptor());
                }
                break;

        	case fieldNum(EcoResProductV2Entity, ProductColorGroupId):
                if (this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCrossTableManager::defaultColorGroupId(this.creationDataAdaptor());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResProductV2Entity, RetailProductCategoryname):
                if (this.RetailProductCategoryname && !this.retailCategoryExists(this.RetailProductCategoryname))
                {
                    ret = ret & checkFailed(strFmt("@SYS78966", fieldPname(EcoResProductV2Entity, RetailProductCategoryname)));
                }
                break;

            case fieldNum(EcoResProductV2Entity, ProductSubType):
                if (this.ProductSubType != EcoResProductSubtype::Product
                    && this.ProductSubType != EcoResProductSubtype::ProductMaster)
                {
                    ret = ret & checkFailed(strFmt("@SYS78966", fieldPname(EcoResProductV2Entity, ProductSubType)));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret & EcoResProductCrossTableManager::validateWrite(this.creationDataAdaptor());

        if (this.ProductSubType == EcoResProductSubtype::ProductMaster && !this.ProductDimensionGroupName)
        {
            ret = checkFailed("@SYS133914");
        }
        if (this.ProductSubType != EcoResProductSubtype::ProductMaster 
            && (this.ProductVariantNumberNomenclatureName || this.ProductVariantNameNomenclatureName))
        {
            ret = checkFailed("@scm:EcoResProductEntityAddNomenclature");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProduct)
         && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            //Initialize the buffer based on the correct derived type.
            _dataSourceCtx.setBuffer(EcoResProductCrossTableManager::makeProductRecord(this.creationDataAdaptor()));
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSourceOnInsert</Name>
				<Source><![CDATA[
    private void mapEntityToDataSourceOnInsert(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProduct):
                EcoResProduct product = EcoResProduct::findByDisplayProductNumber(this.ProductNumber, true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                _dataSourceCtx.setBuffer(product);
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductDimensionGroupProduct):
                if (this.ProductDimensionGroupName)
                {
                    var productDimGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(this.getProductRecId(_entityCtx));
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    _dataSourceCtx.setBuffer(productDimGroupProduct);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResStorageDimensionGroupProduct):
                if (this.StorageDimensionGroupName)
                {
                    var storageDimGroupProduct = EcoResStorageDimensionGroupProduct::findByProduct(this.getProductRecId(_entityCtx));
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    _dataSourceCtx.setBuffer(storageDimGroupProduct);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResTrackingDimensionGroupProduct):
                if (this.TrackingDimensionGroupName)
                {
                    var trackingDimGroupProduct = EcoResTrackingDimensionGroupProduct::findByProduct(this.getProductRecId(_entityCtx));
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    _dataSourceCtx.setBuffer(trackingDimGroupProduct);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, RetailKit):
                if (this.IsProductKit)
                {
                    var retailKit = RetailKit::findByProductmaster(this.getProductRecId(_entityCtx));
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    _dataSourceCtx.setBuffer(retailKit);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterModelingPolicy):
                if (this.ProductSubType == EcoResProductSubtype::ProductMaster)
                {
                    var productMasterModelingPolicy = EcoResProductMasterModelingPolicy::findByProductMaster(this.getProductRecId(_entityCtx), true);
                    if (productMasterModelingPolicy)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                        _dataSourceCtx.setBuffer(productMasterModelingPolicy);
                    }
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductCategoryRetail):
                if (this.RetailProductCategoryname)
                {
                    EcoResCategory category = EcoResProductCrossTableManager::findRetailCategoryByName(this.RetailProductCategoryname);
                    EcoResProductCategory productCategory = EcoResProductCategory::findByProductIdAndCategoryId(this.getProductRecId(_entityCtx), category.RecId);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    _dataSourceCtx.setBuffer(productCategory);
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNumberNomenclature):
                if (!this.ProductVariantNumberNomenclatureName)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNameNomenclature):
                if (!this.ProductVariantNameNomenclatureName)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSourceOnUpdate</Name>
				<Source><![CDATA[
    private void mapEntityToDataSourceOnUpdate(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResStorageDimensionGroupProduct):
                if (!this.StorageDimensionGroupName && this.isFieldSet(fieldNum(EcoResProductV2Entity, StorageDimensionGroupName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResTrackingDimensionGroupProduct):
                if (!this.TrackingDimensionGroupName && this.isFieldSet(fieldNum(EcoResProductV2Entity, TrackingDimensionGroupName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductCategoryRetail):
                if (!this.RetailProductCategoryname && this.isFieldSet(fieldNum(EcoResProductV2Entity, RetailProductCategoryname)))
                {
                    EcoResProductCategory productCategory = _dataSourceCtx.getBuffer();
                    if (productCategory.RecId)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                    }
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNumberNomenclature):
                if (!this.ProductVariantNumberNomenclatureName && this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductVariantNumberNomenclatureName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                }
                else if (!this.ProductVariantNumberNomenclatureName && !this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductVariantNumberNomenclatureName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNameNomenclature):
                if (!this.ProductVariantNameNomenclatureName && this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductVariantNameNomenclatureName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                }
                else if (!this.ProductVariantNameNomenclatureName && !this.isFieldSet(fieldNum(EcoResProductV2Entity, ProductVariantNameNomenclatureName)))
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            this.mapEntityToDataSourceOnInsert(_entityCtx, _dataSourceCtx);
        }
        else if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            this.mapEntityToDataSourceOnUpdate(_entityCtx, _dataSourceCtx);
        }

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResCategoryRetail):
                if (this.RetailProductCategoryname)
                {
                    EcoResCategory ecoResCategoryRetail = _dataSourceCtx.getBuffer();
                    var retailHierarchyRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);
                    if (retailHierarchyRole)
                    {
                        ecoResCategoryRetail.CategoryHierarchy = retailHierarchyRole.CategoryHierarchy;
                    }
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNameNomenclature):
                if (this.ProductVariantNameNomenclatureName)
                {
                    EcoResProductMasterProductVariantNomenclature nomenclature = _dataSourceCtx.getBuffer();
                    nomenclature.NomenclatureRole = EcoResNomenclatureRole::Name;
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterProductVariantNumberNomenclature):
                if (this.ProductVariantNumberNomenclatureName)
                {
                    EcoResProductMasterProductVariantNomenclature nomenclature = _dataSourceCtx.getBuffer();
                    nomenclature.NomenclatureRole = EcoResNomenclatureRole::Id;
                }
                break;
            // The following statements are necessary because there is a join bug with the data sources
            // forcing to use outer join, and requiring to dismiss all the empty lookups in EcoResProductVariantNomenclature
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductVariantNameNomenclature):
                if (!this.ProductVariantNameNomenclatureName)
                {
                    return;
                }
                break;
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductVariantNumberNomenclature):
                if (!this.ProductVariantNumberNomenclatureName)
                {
                    return;
                }
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductTranslationToSystemLanguage):
                if (this.ProductName || this.ProductDescription)
                {
                    var systemLanguageId = SystemParameters::systemLanguageId();
                    var translationToSystemLanguage = EcoResProductTranslation::findByProductLanguage(this.getProductRecId(_entityCtx), systemLanguageId, true);
                    if (translationToSystemLanguage)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                        _dataSourceCtx.setBuffer(translationToSystemLanguage);
                        this.mapEntityToDataSource(_entityCtx, _dataSourceCtx);
                    }
                }
                else
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
        }

        this.skipDatabaseOperation(_dataSourceCtx);
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.skipDatabaseOperation(_dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProduct)
            && this.ProductSubType == EcoResProductSubtype::ProductMaster)
        {
            // Ensures the buffer is cast to the right derived type
            EcoResProductMaster productMasterRecord = _dataSourceCtx.getBuffer();
            _dataSourceCtx.setBuffer(productMasterRecord);
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseOperation</Name>
				<Source><![CDATA[
    private void skipDatabaseOperation(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductMasterModelingPolicy):
                if (this.ProductSubType != EcoResProductSubtype::ProductMaster)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, RetailKit):
                if (!this.IsProductKit)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductServiceWarranty):
                if (this.ServiceType != EcoResProductServiceType::Warranty || this.ProductType != EcoResProductType::Service || this.ProductSubType != EcoResProductSubtype::Product)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductRecord</Name>
				<Source><![CDATA[
    private EcoResProduct getProductRecord(DataEntityRuntimeContext _entityCtx)
    {
        str productDataSourceStr = dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProduct);
        return _entityCtx.getRuntimeContextByName(productDataSourceStr).getBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductRecId</Name>
				<Source><![CDATA[
    private RecId getProductRecId(DataEntityRuntimeContext _entityCtx)
    {
        return this.getProductRecord(_entityCtx).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (!ret.RecId)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductSystemLanguage):

                    EcoResProductSystemLanguage productSystemLanguage;

                    select productSystemLanguage
                        where productSystemLanguage.Product == this.getProductRecord(_entityCtx).RecId;

                    ret = productSystemLanguage;

                    break;

                case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductRetailCategoryHierarchy):

                    EcoResProductRetailCategoryHierarchy productRetailCategory;

                    select productRetailCategory
                        where productRetailCategory.Product == this.getProductRecord(_entityCtx).RecId;

                    ret = productRetailCategory;

                    break;
            }
        }
        
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductVariantNumberNomenclature):
        
                    ret = EcoResProductVariantNomenclature::findByName(this.ProductVariantNumberNomenclatureName);

                    break;
                    
            case dataEntityDataSourceStr(EcoResProductV2Entity, EcoResProductVariantNameNomenclature):
                    
                    ret = EcoResProductVariantNomenclature::findByName(this.ProductVariantNameNomenclatureName);

                    break;  
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(EcoResProductV2Entity, ProductNumber), EcoResProductParameters::numRefProductNumber());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        switch (_entityCtx.getDatabaseOperation())
        {
            case DataEntityDatabaseOperation::Insert:
            {
                var creationAdaptor = this.creationDataAdaptor();
                EcoResProduct product = EcoResProductCrossTableManager::makeProductRecord(creationAdaptor);
                EcoResProductCrossTableManager::insert(creationAdaptor, product);
                super(_entityCtx);
                break;
            }
            case DataEntityDatabaseOperation::Delete:
            {
                EcoResProduct product = EcoResProduct::findByDisplayProductNumber(this.ProductNumber, true);
                if (product.validateDelete())
                {
                    product.delete();
                }
                else
                {
                    throw Exception::ViewDataSourceValidation;
                }
                break;
            }
            default:
            {
                super(_entityCtx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productSubTypeSqlExpression</Name>
				<Source><![CDATA[
    private static str productSubTypeSqlExpression()
    {
        str ecoResProductInstanceRelationType = SysComputedColumn::returnField(tablestr(EcoResProductV2Entity),
                                                                               tablestr(EcoResProduct),
                                                                               fieldstr(EcoResProduct, InstanceRelationtype));

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(ecoResProductInstanceRelationType, SysComputedColumn::returnLiteral(tablenum(EcoResDistinctProduct))),
            SysComputedColumn::returnLiteral(EcoResProductSubtype::Product),
            SysComputedColumn::returnLiteral(EcoResProductSubtype::ProductMaster));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailKitSqlExpression</Name>
				<Source><![CDATA[
    private static str isRetailKitSqlExpression()
    {
        str retailKitRecIdExpression = SysComputedColumn::returnField(tablestr(EcoResProductV2Entity),
                                                                        tablestr(RetailKit),
                                                                        fieldstr(RetailKit, RecId));

        return SysComputedColumn::if(
                SysComputedColumn::isNullExpression(retailKitRecIdExpression),
                SysComputedColumn::returnLiteral(NoYes::No),
                SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>creationDataAdaptor</Name>
				<Source><![CDATA[
    // ================= Region (helper methods) ============

    private EcoResProductV2EntityToCrossTableDataAdaptor creationDataAdaptor()
    {
        return EcoResProductV2EntityToCrossTableDataAdaptor::newFromEntity(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailCategoryExists</Name>
				<Source><![CDATA[
    private boolean retailCategoryExists(EcoResCategoryName _categoryName)
    {
        EcoResCategory category;
        EcoResCategoryHierarchyRole hierarchyRole;

        select firstonly RecId from category
            where category.Name == _categoryName
            exists join hierarchyRole
                where hierarchyRole.CategoryHierarchy == category.CategoryHierarchy
                    && hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail;

        return category.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query changeTrackingQuery = new Query();

        var ecoResProductDS = changeTrackingQuery.addDataSource(tableNum(EcoResProduct));
        var ecoResProductDSRange = ecoResProductDS.addRange(fieldNum(EcoResProduct, InstanceRelationType));
        ecoResProductDSRange.value(EcoResProductEntityHelper::queryRangeExpressionNotVariant());
        ecoResProductDSRange.status(RangeStatus::Locked);

        var ecoResProductDimensionGroupProductDS = ecoResProductDS.addDataSource(tableNum(EcoResProductDimensionGroupProduct));
        ecoResProductDimensionGroupProductDS.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductDimensionGroupProduct, Product), ecoResProductDS.name());
        ecoResProductDimensionGroupProductDS.fetchMode(QueryFetchMode::One2One);

        var ecoResStorageDimensionGroupProductDS = ecoResProductDS.addDataSource(tableNum(EcoResStorageDimensionGroupProduct));
        ecoResStorageDimensionGroupProductDS.joinMode(JoinMode::OuterJoin);
        ecoResStorageDimensionGroupProductDS.fetchMode(QueryFetchMode::One2One);
        ecoResStorageDimensionGroupProductDS.relations(true);

        var ecoResTrackingDimensionGroupProductDS = ecoResProductDS.addDataSource(tableNum(EcoResTrackingDimensionGroupProduct));
        ecoResTrackingDimensionGroupProductDS.joinMode(JoinMode::OuterJoin);
        ecoResTrackingDimensionGroupProductDS.fetchMode(QueryFetchMode::One2One);
        ecoResTrackingDimensionGroupProductDS.relations(true);

        var whsEcoResProductTransportationCodesDS = ecoResProductDS.addDataSource(tableNum(WHSEcoResProductTransportationCodes));
        whsEcoResProductTransportationCodesDS.joinMode(JoinMode::OuterJoin);
        whsEcoResProductTransportationCodesDS.fetchMode(QueryFetchMode::One2One);
        whsEcoResProductTransportationCodesDS.relations(true);

        EcoResProductEntityChangeTrackingHelper::addProductTranslationBasedOnProductRecIdAndPartitionLink(
            ecoResProductDS,
            fieldNum(EcoResProduct, RecId),
            fieldNum(EcoResProduct, Partition));

        // Expand the view EcoResProductRetailCategoryHierarchy.
        var ecoResProductCategoryRetailDS = ecoResProductDS.addDataSource(tableNum(EcoResProductCategory));
        ecoResProductCategoryRetailDS.joinMode(JoinMode::OuterJoin);
        ecoResProductCategoryRetailDS.fetchMode(QueryFetchMode::One2One);
        ecoResProductCategoryRetailDS.relations(false);
        ecoResProductCategoryRetailDS.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductCategory, Product), ecoResProductDS.name());
        ecoResProductCategoryRetailDS.addLink(fieldNum(EcoResProduct, Partition), fieldNum(EcoResProductCategory, Partition), ecoResProductDS.name());

        var ecoResCategoryRetailDS = ecoResProductCategoryRetailDS.addDataSource(tableNum(EcoResCategory));
        ecoResCategoryRetailDS.joinMode(JoinMode::OuterJoin);
        ecoResCategoryRetailDS.fetchMode(QueryFetchMode::One2One);
        ecoResCategoryRetailDS.relations(true);

        var retailKitDS = ecoResProductDS.addDataSource(tableNum(RetailKit));
        retailKitDS.addLink(fieldNum(EcoResProduct, RecId), fieldNum(RetailKit, ProductMaster), ecoResProductDS.name());
        retailKitDS.joinMode(JoinMode::OuterJoin);
        retailKitDS.fetchMode(QueryFetchMode::One2One);

        var ecoResProductMasterModelingPolicyDS = ecoResProductDS.addDataSource(tableNum(EcoResProductMasterModelingPolicy));
        ecoResProductMasterModelingPolicyDS.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductMasterModelingPolicy, ProductMaster), ecoResProductDS.name());
        ecoResProductMasterModelingPolicyDS.joinMode(JoinMode::OuterJoin);
        ecoResProductMasterModelingPolicyDS.fetchMode(QueryFetchMode::One2One);

        var ecoResProductServiceWarrantyDS = ecoResProductDS.addDataSource(tableNum(EcoResProductServiceWarranty));
        ecoResProductServiceWarrantyDS.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductServiceWarranty, DistinctProduct), ecoResProductDS.name());
        ecoResProductServiceWarrantyDS.joinMode(JoinMode::OuterJoin);
        ecoResProductServiceWarrantyDS.fetchMode(QueryFetchMode::One2One);

        return changeTrackingQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<FormRef>EcoResProductDetails</FormRef>
	<Label>@SCM:EcoResProductV2Entity</Label>
	<Tags>Products</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductV2Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductsV2</PublicCollectionName>
	<PublicEntityName>ProductV2</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductDimensionGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCatchWeightProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSearchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSubType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrackingDimensionGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductColorGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSizeGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductStyleGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NMFCCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HarmonizedSystemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>STCCCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductKit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailProductCategoryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ProductType</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>ProductSubType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>productSubTypeSqlExpression</ComputedFieldMethod>
			<EnumType>EcoResProductSubType</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ServiceType</Name>
			<DataField>ServiceType</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResProductTranslationToSystemLanguage</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSearchName</Name>
			<Mandatory>No</Mandatory>
			<DataField>SearchName</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductDescription</Name>
			<DataField>Description</DataField>
			<DataSource>EcoResProductTranslationToSystemLanguage</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCatchWeightProduct</Name>
			<Label>@SCM:IsCatchWeightProduct</Label>
			<Mandatory>No</Mandatory>
			<DataField>PdsCWProduct</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductDimensionGroupName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS133217</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResProductDimensionGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductDimensionGroupRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ProductDimensionGroup</DataField>
			<DataSource>EcoResProductDimensionGroupProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StorageDimensionGroupName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS312237</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResStorageDimensionGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StorageDimensionGroupRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>StorageDimensionGroup</DataField>
			<DataSource>EcoResStorageDimensionGroupProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TrackingDimensionGroupName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS312248</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResTrackingDimensionGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TrackingDimensionGroupRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TrackingDimensionGroup</DataField>
			<DataSource>EcoResTrackingDimensionGroupProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VariantConfigurationTechnology</Name>
			<Mandatory>No</Mandatory>
			<DataField>VariantConfigurationTechnology</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AreIdenticalConfigurationsAllowed</Name>
			<DataField>IsReuseConfigurationEnabled</DataField>
			<DataSource>EcoResProductMasterModelingPolicy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsAutomaticVariantGenerationEnabled</Name>
			<DataField>IsVariantGenerationEnabled</DataField>
			<DataSource>EcoResProductMasterModelingPolicy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProductVariantUnitConversionEnabled</Name>
			<Label>@WAX:EnableProductVariantUnitConversions</Label>
			<DataField>IsProductVariantUnitConversionEnabled</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetailProductCategoryName</Name>
			<Label>@RET5714</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategoryRetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetailCategoryRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Category</DataField>
			<DataSource>EcoResProductCategoryRetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorGroupId</Name>
			<DataField>RetailColorGroupId</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeGroupId</Name>
			<DataField>RetailSizeGroupId</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleGroupId</Name>
			<DataField>RetailStyleGroupId</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsProductKit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@REX1066</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isRetailKitSqlExpression</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>STCCCode</Name>
			<DataField>STCCCode</DataField>
			<DataSource>WHSEcoResProductTransportationCodes</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HarmonizedSystemCode</Name>
			<DataField>HarmonizedCode</DataField>
			<DataSource>WHSEcoResProductTransportationCodes</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NMFCCode</Name>
			<DataField>NMFCCode</DataField>
			<DataSource>WHSEcoResProductTransportationCodes</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVariantNameNomenclatureName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@scm:EcoResProductVariantNameNomenclature</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResProductVariantNameNomenclature</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVariantNumberNomenclatureName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@scm:EcoResProductVariantNumberNomenclature</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResProductVariantNumberNomenclature</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantyDurationTime</Name>
			<DataField>DurationTime</DataField>
			<DataSource>EcoResProductServiceWarranty</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantyDurationTimeUnit</Name>
			<DataField>DurationTimeUnit</DataField>
			<DataSource>EcoResProductServiceWarranty</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductColorGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductColorGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductColorGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductColorGroupEntity_GroupId</Name>
					<Field>ProductColorGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductDimensionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductDimensionGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductDimensionGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductDimensionGroupEntity_GroupName</Name>
					<Field>ProductDimensionGroupName</Field>
					<RelatedField>GroupName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>StorageDimensionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResStorageDimensionGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>StorageDimensionGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResStorageDimensionGroupEntity_GroupName</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>TrackingDimensionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResTrackingDimensionGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>TrackingDimensionGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResTrackingDimensionGroupEntity_GroupName</Name>
					<Field>TrackingDimensionGroupName</Field>
					<RelatedField>GroupName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductSizeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductSizeGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductSizeGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductSizeGroupEntity_GroupId</Name>
					<Field>ProductSizeGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductStyleGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductStyleGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductStyleGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductStyleGroupEntity_GroupId</Name>
					<Field>ProductStyleGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>StandardTransportationCommodityCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>TMSStandardTransportationCommodityCodeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>StandardTransportationCommodityCode</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>TMSStandardTransportationCommodityCodeEntity_StandardTransportationCommodityCode</Name>
					<Field>STCCCode</Field>
					<RelatedField>StandardTransportationCommodityCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductHarmonizedTariffCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSProductHarmonizedTariffCodeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductHarmonizedTariffCode</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>WHSProductHarmonizedTariffCodeEntity_TariffCode</Name>
					<Field>HarmonizedSystemCode</Field>
					<RelatedField>TariffCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>USNationalMotorFreightClassificationCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSUSNationalMotorFreightClassificationCodeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>USNationalMotorFreightClassificationCode</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Products</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>WHSUSNationalMotorFreightClassificationCodeEntity_NMFCCode</Name>
					<Field>NMFCCode</Field>
					<RelatedField>NMFCCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResProduct</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResProduct</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductDimensionGroupProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductDimensionGroupProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductDimensionGroup</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductDimensionGroup</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>EcoResProductDimensionGroup</Name>
										<JoinRelationName>EcoResProductDimensionGroup</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResProductMaster</Name>
								<JoinRelationName>EcoResProductMaster</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResStorageDimensionGroupProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResStorageDimensionGroupProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResStorageDimensionGroup</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResStorageDimensionGroup</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>EcoResStorageDimensionGroup</Name>
										<JoinRelationName>EcoResStorageDimensionGroup</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResProduct</Name>
								<JoinRelationName>EcoResProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResTrackingDimensionGroupProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResTrackingDimensionGroupProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResTrackingDimensionGroup</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResTrackingDimensionGroup</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>EcoResTrackingDimensionGroup</Name>
										<JoinRelationName>EcoResTrackingDimensionGroup</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResProduct</Name>
								<JoinRelationName>EcoResProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WHSEcoResProductTransportationCodes</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>WHSEcoResProductTransportationCodes</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResProduct</Name>
								<JoinRelationName>EcoResProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductSystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductTranslationToSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
								<RelatedField>LanguageId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductRetailCategoryHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductRetailCategoryHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductCategoryRetail</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductCategory</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResCategoryRetail</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResCategory</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResCategory_PCClass</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>PCClass</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>EcoResCategory</Name>
										<JoinRelationName>EcoResCategory</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>EcoResProductRetailCategoryHierarchy</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RetailCategoryHierarchy</Field>
								<JoinDataSource>EcoResProductRetailCategoryHierarchy</JoinDataSource>
								<RelatedField>CategoryHierarchy</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailKit</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailKit</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResProductMaster</Name>
								<JoinRelationName>EcoResProductMaster</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductMasterModelingPolicy</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductMasterModelingPolicy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProductMaster</Name>
								<JoinRelationName>ProductMaster</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductMasterProductVariantNameNomenclature</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductMasterProductVariantNomenclature</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductVariantNameNomenclature</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductVariantNomenclature</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ProductVariantNomenclature</Field>
										<JoinDataSource>EcoResProductMasterProductVariantNameNomenclature</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>NomenclatureRoleName</Name>
								<Field>NomenclatureRole</Field>
								<Value>Name</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>ProductMaster</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductMasterProductVariantNumberNomenclature</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductMasterProductVariantNomenclature</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductVariantNumberNomenclature</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductVariantNomenclature</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ProductVariantNomenclature</Field>
										<JoinDataSource>EcoResProductMasterProductVariantNumberNomenclature</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>NomenclatureRoleId</Name>
								<Field>NomenclatureRole</Field>
								<Value>Id</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>ProductMaster</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductServiceWarranty</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductServiceWarranty</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResDistinctProduct</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResDistinctProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResDistinctProduct</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResDistinctProductVariant</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProductVariant</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResProductMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductMaster</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>NotProductVariant</Name>
						<Field>InstanceRelationType</Field>
						<Status>Locked</Status>
						<Value>(EcoResProductEntityHelper::queryRangeExpressionNotVariant())</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>