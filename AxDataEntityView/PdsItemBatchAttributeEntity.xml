<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsItemBatchAttributeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsItemBatchAttributeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(PdsItemBatchAttributeEnumerationValueEntity, PdsBatchAttrib)
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            PdsBatchAttrib batchAttrib = _dataSourceCtx.getBuffer();

            switch (this.AttributeType)
            {
                case PdsBatchAttribType::Integer:
                    batchAttrib.PdsBatchAttribMin       = this.MinimumIntegerTolerance;
                    batchAttrib.PdsBatchAttribMax       = this.MaximumIntegerTolerance;
                    batchAttrib.PdsBatchAttribMultiple  = this.IntegerToleranceIncrement;
                    batchAttrib.PdsBatchAttribTarget    = int2Str(this.OptimalInteger);
                    break;
                case PdsBatchAttribType::Realnumber:
                    batchAttrib.PdsBatchAttribMin       = this.MinimumDecimalTolerance;
                    batchAttrib.PdsBatchAttribMax       = this.MaximumDecimalTolerance;
                    batchAttrib.PdsBatchAttribMultiple  = this.DecimalToleranceIncrement;
                    batchAttrib.PdsBatchAttribTarget    = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Realnumber, this.OptimalDecimal);
                    break;
                case PdsBatchAttribType::String:
                    batchAttrib.PdsBatchAttribTarget    = this.OptimalText;
                    break;
                case PdsBatchAttribType::Date:
                    batchAttrib.PdsBatchAttribTarget    = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Date, this.OptimalDate);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            boolean isAnyIntegerFieldSet = this.OptimalInteger || this.IntegerToleranceIncrement || this.MinimumIntegerTolerance || this.MaximumIntegerTolerance;
            boolean isAnyDecimalFieldSet = this.OptimalDecimal || this.DecimalToleranceIncrement || this.MinimumDecimalTolerance || this.MaximumDecimalTolerance;

            switch (this.AttributeType)
            {
                case PdsBatchAttribType::Integer:
                    if (this.OptimalText || this.OptimalDate || isAnyDecimalFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Integer));
                    }
                    break;
                case PdsBatchAttribType::Realnumber:
                    if (this.OptimalText || this.OptimalDate|| isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Realnumber));
                    }
                    break;
                case PdsBatchAttribType::String:
                    if (this.OptimalDate || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::String));
                    }
                    break;
                case PdsBatchAttribType::Date:
                    if (this.OptimalText || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Date));
                    }
                    break;
                case PdsBatchAttribType::Enumerate:
                    if (this.OptimalDate || this.OptimalText || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Enumerate));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalTextDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalText computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalText field.
    /// </returns>
    public static str optimalTextDefinition()
    {
        return PdsItemBatchAttributeEntity::FieldDefinition(PdsBatchAttribType::String, fieldStr(PdsBatchAttrib, PdsBatchAttribTarget), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalDate computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalDate field.
    /// </returns>
    public static str optimalDateDefinition()
    {
        TableName   entityName      = tableStr(PdsItemBatchAttributeEntity);

        str calculatedDateString = SysComputedColumn::getDateAdd(
            SysComputedColumn::cast(
                SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribTarget)),
                'int'),
            SysComputedColumn::returnLiteral(Global::DateNull()),
            SysComputedColumnDatePart::Day);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(PdsBatchAttribType::Date))),
                        calculatedDateString,
                        SysComputedColumn::returnLiteral(Global::DateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MinimumIntegerTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MinimumIntegerTolerance field.
    /// </returns>
    public static str minimumIntegerToleranceDefinition()
    {
        return PdsItemBatchAttributeEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MaximumIntegerTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MaximumIntegerTolerance field.
    /// </returns>
    public static str maximumIntegerToleranceDefinition()
    {
        return PdsItemBatchAttributeEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IntegerToleranceIncrement computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IntegerToleranceIncrement field.
    /// </returns>
    public static str integerToleranceIncrementDefinition()
    {
        return PdsItemBatchAttributeEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalIntegerDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalInteger computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalInteger field.
    /// </returns>
    public static str optimalIntegerDefinition()
    {
        return PdsItemBatchAttributeEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribTarget));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MinimumDecimalTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MinimumDecimalTolerance field.
    /// </returns>
    public static str minimumDecimalToleranceDefinition()
    {
        return PdsItemBatchAttributeEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MaximumDecimalTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MaximumDecimalTolerance field.
    /// </returns>
    public static str maximumDecimalToleranceDefinition()
    {
        return PdsItemBatchAttributeEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the DecimalToleranceIncrement computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the DecimalToleranceIncrement field.
    /// </returns>
    public static str decimalToleranceIncrementDefinition()
    {
        return PdsItemBatchAttributeEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttrib, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDecimalDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalDecimal computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalDecimal field.
    /// </returns>
    public static str optimalDecimalDefinition()
    {
        TableName entityName = tableStr(PdsItemBatchAttributeEntity);

        // The decimal target definition has a differrent structure than then integer one,
        // because SQL was throwing an error for the empty value: Error converting data type nvarchar to numeric.
        return SysComputedColumn::if(
                    SysComputedColumn::and2(
                        SysComputedColumn::notEqualExpression(
                            SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribTarget)),
                            SysComputedColumn::returnLiteral('')),
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                                int2Str(enum2Int(PdsBatchAttribType::Realnumber)))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribTarget)),
                        SysComputedColumn::returnLiteral('0.0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerFieldDefinition</Name>
				<Source><![CDATA[
    private static str integerFieldDefinition(FieldName _fieldName)
    {
        return PdsItemBatchAttributeEntity::FieldDefinition(PdsBatchAttribType::Integer, _fieldName, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalFieldDefinition</Name>
				<Source><![CDATA[
    private static str decimalFieldDefinition(FieldName _fieldName)
    {
        return PdsItemBatchAttributeEntity::FieldDefinition(PdsBatchAttribType::Realnumber, _fieldName, '0.0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefinition</Name>
				<Source><![CDATA[
    private static str fieldDefinition(PdsBatchAttribType _batchAttributeType, FieldName _fieldName, str _nullLiteral)
    {
        TableName entityName = tableStr(PdsItemBatchAttributeEntity);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(_batchAttributeType))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeEntity, PdsBatchAttrib), _fieldName),
                        SysComputedColumn::returnLiteral(_nullLiteral));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PdsItemBatchAttributeEntityDevDoc</DeveloperDocumentation>
	<FormRef>PdsBatchAttrib</FormRef>
	<Label>@PRO1588</Label>
	<Tags>Batch attributes</Tags>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PdsItemBatchAttributeStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ItemBatchAttributes</PublicCollectionName>
	<PublicEntityName>ItemBatchAttribute</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptimalText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptimalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToleranceFailingAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumIntegerTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumIntegerTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntegerToleranceIncrement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptimalInteger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumDecimalTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumDecimalTolerance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DecimalToleranceIncrement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptimalDecimal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeId</Name>
			<DataField>PdsBatchAttribId</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeDescription</Name>
			<DataField>Description</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeType</Name>
			<DataField>PdsBatchAttribType</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OptimalText</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeStringTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalTextDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribTarget</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>OptimalDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDateTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDateDefinition</ComputedFieldMethod>
			<ExtendedDataType>BaseDate</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToleranceFailingAction</Name>
			<DataField>PdsBatchAttribToleranceAction</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MinimumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MaximumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>IntegerToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>integerToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>OptimalInteger</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalIntegerDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>DecimalToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDecimalToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>decimalToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMultiple</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OptimalDecimal</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDecimalDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsItemBatchAttributeDecimalTarget</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AttributeId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PdsBatchAttrib</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PdsBatchAttrib</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>