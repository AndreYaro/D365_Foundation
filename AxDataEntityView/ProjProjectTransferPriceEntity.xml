<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectTransferPriceEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectTransferPriceEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get entity data source buffer.
    /// </summary>
    /// <param name = "_entityCtx">The data entity's runtime context.</param>
    /// <param name = "_dataSourceCtx">The context of the current data source in the data entity.</param>
    /// <returns><c>ResourceWorkerView</c> buffer or default data source buffer.</returns>
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjProjectTransferPriceEntity, ResourceWorkerView))
        {
            ResourceWorkerView resource;

            select firstonly resource
                where resource.ResourceCompanyId == curext() &&
                   resource.PersonnelNumber == this.ResourcePersonnelNumber;

            ret = resource;
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update insertion logic for data source.
    /// </summary>
    /// <param name = "_entityCtx">The data entity's runtime context.</param>
    /// <param name = "_dataSourceCtx">The context of the current data source in the data entity.</param>
    /// <returns>trun if insertion succeed; otherwise false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTransferPriceEntity, ProjTransferPrice))
        {
            ProjTransferPrice projTransferPrice = _dataSourceCtx.getBuffer();

            if (this.TransactionType == ProjTransferPriceTransType::All)
            {
                projTransferPrice.ResourceCategory = 0;
            }
            else
            {
                ResourceCategoryView categoryView;

                select firstonly RecId from categoryView
                    where categoryView.CategoryId == this.ResourceCategoryId;

                projTransferPrice.ResourceCategory = categoryView.RecId;
            }
        }
    
        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map fields from the entity to individual data sources.
    /// </summary>
    /// <param name = "_entityCtx">The data entity's runtime context.</param>
    /// <param name = "_dataSourceCtx">The context of the current data source in the data entity.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjProjectTransferPriceEntity, ProjTransferPrice))
        {
            ProjTransferPrice transferPrice = _dataSourceCtx.getBuffer();

            if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                if (this.BorrowingLegalEntity && this.ProjectID)
                {
                    ProjTable projTable;
                    select firstonly crosscompany  RecId from projTable
                        where projTable.ProjId == this.ProjectID
                            && projTable.DataAreaId == this.BorrowingLegalEntity;

                    if (projTable.RecID)
                    {
                        transferPrice.ProjTable = projTable.RecID;
                    }
                }

                if (!this.ResourceCategory && this.BorrowingLegalEntity && this.CategoryId)
                {
                    ProjCategory projCategory;
                    select firstonly crosscompany RecId from projCategory
                        where projCategory.CategoryId == this.CategoryId
                            && projCategory.DataAreaId == this.BorrowingLegalEntity;

                    if (projCategory.RecID)
                    {
                        transferPrice.ProjCategory = projCategory.RecID;
                    }
                }

                _dataSourceCtx.setBuffer(transferPrice);
            }
        }
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove validation of project and category field since the values will reference to a different data area ID.
    /// </summary>
    /// <param name = "_entityCtx">The data entity's runtime context.</param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceEntity, Project), true);
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceEntity, Category), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project ID SQL query. 
    /// </summary>
    /// <returns>Project ID sql query.</returns>
    /// <remarks>This is used instead of table relation due to project ID is referenced by borrowing entity legal entity.</remarks>
    public static str getProjId()
    {
        str projIdQuery = strFmt('SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5',
                            fieldStr(ProjTable, ProjId),
                            tableStr(ProjTable),
                            fieldStr(ProjTable, RecId),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceEntity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceEntity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, ProjTable)),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceEntity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceEntity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, Partition))
                            );


        return projIdQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project category ID SQL query.
    /// </summary>
    /// <returns>Project category ID SQL query.</returns>
    /// <remarks>This is used instead of table relation due to category ID is referenced by borrowing entity legal entity.</remarks>
    public static str getCategoryId()
    {
        str categoryIdQuery = strFmt('SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5',
                            fieldStr(ProjCategory, CategoryId),
                            tableStr(ProjCategory),
                            fieldStr(ProjCategory, RecId),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceEntity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceEntity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, ProjCategory)),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceEntity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceEntity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, Partition))
                            );
        
        return categoryIdQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FormRef>ProjTransferPricingMenuItem</FormRef>
	<Label>@Proj:ProjectTransferPrice</Label>
	<Tags>Pricing setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjProjectTransferPriceStaging</DataManagementStagingTable>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourcePersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Pricing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesCurrency</Name>
			<DataField>Currency</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransferPriceModel</Name>
			<DataField>PriceModel</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Category</Name>
			<DataField>ProjCategory</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BorrowingLegalEntity</Name>
			<DataField>ProjectDataAreaId</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContract</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProjInvoiceTable</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Project</Name>
			<DataField>ProjTable</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Resource</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Resource</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCategory</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EffectiveDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Pricing</Name>
			<DataField>TransferPrice</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionType</Name>
			<DataField>TransType</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getCategoryId</ComputedFieldMethod>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProjectID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getProjId</ComputedFieldMethod>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourcePersonnelNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>ResourceWorkerView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCategoryId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>RoleId</DataField>
			<DataSource>PSASchedRole</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProjectID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProjectContractID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ResourceCategoryId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>EffectiveDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SalesCurrency</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransactionType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CategoryId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTransferPrice</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTransferPrice</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjInvoiceTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjInvoiceTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProjInvoiceTable</Name>
								<JoinRelationName>ProjInvoiceTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ResourceWorkerView</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ResourceWorkerView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Resource</Field>
								<JoinDataSource>ProjTransferPrice</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PSASchedRole</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PSASchedRole</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ResourceCategory</Field>
								<JoinDataSource>ProjTransferPrice</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>