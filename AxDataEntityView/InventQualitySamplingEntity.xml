<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualitySamplingEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQualitySamplingEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.FixedInventoryQuantity && this.QuantityPercentage)
        {
            ret = checkFailed("@SCM:InventQualitySamplingEntityBothFixedInventoryQuantityAndQuantityPercentageSpecifiedError");
        }
        else if (this.IsFullLPQuantitySpecification
            && InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight::instance().isEnabled())
        {
            if (this.FixedInventoryQuantity)
            {
                ret = checkFailed("@WAX:InventQualitySamplingEntityBothIsFullLPQuantitySpecificationAndFixedInventoryQuantitySpecifiedError");
            } 
            else if (this.QuantityPercentage)
            {
                ret = checkFailed("@WAX:InventQualitySamplingEntityBothIsFullLPQuantitySpecificationAndQuantityPercentageSpecifiedError");
            }
            else if (this.CreateQualityOrderPerNthLicensePlate < 1)
            {
                ret = checkFailed(strFmt("@WAX:QualityMgmtFieldSpecifiedCheck", fieldId2pname(tableNum(InventItemSampling), fieldNum(InventItemSampling, PerNthLicensePlate))));
            }
        }
        else if (!this.FixedInventoryQuantity && !this.QuantityPercentage
                && (!this.IsFullLPQuantitySpecification 
                    && InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight::instance().isEnabled()))
        {
            ret = checkFailed("@WAX:InventQualitySamplingEntityNeitherFixedInventoryQuantityNorQuantityPercentageNorIsFullLPQtySpecificationSpecifiedError");
        }
        else if (!this.FixedInventoryQuantity && !this.QuantityPercentage)
        {
            ret = checkFailed("@SCM:InventQualitySamplingEntityNeitherFixedInventoryQuantityNorQuantityPercentageSpecifiedError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            this.discriminatingInventoryDimensionsDefaultingDependencies(),
            [fieldNum(InventQualitySamplingEntity, TestQtySpecification),
                [fieldNum(InventQualitySamplingEntity, FixedInventoryQuantity), fieldNum(InventQualitySamplingEntity, QuantityPercentage)]],
            [fieldNum(InventQualitySamplingEntity, ItemSamplingValue),
                [fieldNum(InventQualitySamplingEntity, FixedInventoryQuantity), fieldNum(InventQualitySamplingEntity, QuantityPercentage)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>discriminatingInventoryDimensionsDefaultingDependencies</Name>
				<Source><![CDATA[
    private container discriminatingInventoryDimensionsDefaultingDependencies()
    {
        return this.InventDimFixedActiveDimensionEntityMapping::inventDimFixedDefaultingDependencies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventQualitySamplingEntity, TestQtySpecification):
                this.defaultTestQtySpecification();
                break;

            case fieldNum(InventQualitySamplingEntity, ItemSamplingValue):
                this.defaultItemSamplingValue();
                break;

            case fieldNum(InventQualitySamplingEntity, DiscriminatingInventoryDimensions):
                this.InventDimFixedActiveDimensionEntityMapping::defaultMappedField(_fieldId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTestQtySpecification</Name>
				<Source><![CDATA[
    private void defaultTestQtySpecification()
    {
        if (this.FixedInventoryQuantity)
        {
            this.TestQtySpecification = InventTestQtySpecification::FixedQty;
        }
        else if (this.IsFullLPQuantitySpecification
            && InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight::instance().isEnabled())
        {
            this.TestQtySpecification = InventTestQtySpecification::FullLicensePlate;
        }
        else
        {
            this.TestQtySpecification = InventTestQtySpecification::Percent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemSamplingValue</Name>
				<Source><![CDATA[
    private void defaultItemSamplingValue()
    {
        if (this.FixedInventoryQuantity)
        {
            this.ItemSamplingValue = this.FixedInventoryQuantity;
        }
        else if (this.IsFullLPQuantitySpecification
            && InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight::instance().isEnabled())
        {
            this.ItemSamplingValue = 1;
        }
        else
        {
            this.ItemSamplingValue = this.QuantityPercentage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedInventoryQuantityDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the FixedInventoryQuantity computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the FixedInventoryQuantity field.
    /// </returns>
    private static str fixedInventoryQuantityDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(InventQualitySamplingEntity),
            dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
            fieldStr(InventItemSampling, TestQtySpecification),
            InventTestQtySpecification::FixedQty,
            fieldStr(InventItemSampling, ItemSamplingValue),
            0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityPercentageDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the QuantityPercentage computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the QuantityPercentage field.
    /// </returns>
    private static str quantityPercentageDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(InventQualitySamplingEntity),
            dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
            fieldStr(InventItemSampling, TestQtySpecification),
            InventTestQtySpecification::Percent,
            fieldStr(InventItemSampling, ItemSamplingValue),
            0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderWarehouseSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderWarehouseSpecific computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderWarehouseSpecific field.
    /// </returns>
    private static str isQualityOrderWarehouseSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::IsWarehouseIdActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderInventoryStatusSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderInventoryStatusSpecific computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderInventoryStatusSpecific field.
    /// </returns>
    private static str isQualityOrderInventoryStatusSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::isInventoryStatusIdActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderWarehouseLocationSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderWarehouseLocationSpecific computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderWarehouseLocationSpecific field.
    /// </returns>
    private static str isQualityOrderWarehouseLocationSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::IsWarehouseLocationIdActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderBatchNumberSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderBatchNumberSpecific computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderBatchNumberSpecific field.
    /// </returns>
    private static str isQualityOrderBatchNumberSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::IsItemBatchNumberActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderSerialNumberSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderSerialNumberSpecific computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderSerialNumberSpecific field.
    /// </returns>
    private static str isQualityOrderSerialNumberSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::IsItemSerialNumberActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsQualityOrderLicensePlateSpecificDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsQualityOrderLicensePlateSpecificDefinition computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsQualityOrderLicensePlateSpecificDefinition field.
    /// </returns>
    private static str IsQualityOrderLicensePlateSpecificDefinition()
    {
        return InventDimFixedActiveDimensionEntityMapping::IsLicensePlateNumberActiveDefinition(
                        tableStr(InventQualitySamplingEntity),
                        dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                        fieldStr(InventItemSampling, DiscriminatingInventoryDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFullLPQuantitySpecificationDefinition</Name>
				<Source><![CDATA[
    private static str IsFullLPQuantitySpecificationDefinition()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonLiteral(InventTestQtySpecification::FullLicensePlate),
                SysComputedColumn::comparisonField(tableStr(InventQualitySamplingEntity),
                                                    dataEntityDataSourceStr(InventQualitySamplingEntity, InventItemSampling),
                                                    fieldStr(InventItemSampling, TestQtySpecification))),
                SysComputedColumn::returnLiteral(NoYes::Yes),
                SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventQualitySamplingEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>InventItemSampling</FormRef>
	<Label>@SYS113629</Label>
	<Tags>Quality</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>InventQualitySamplingStaging</DataManagementStagingTable>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SamplingId</Name>
			<DataField>InventItemSamplingId</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SamplingDescription</Name>
			<DataField>Description</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FixedInventoryQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fixedInventoryQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventQualitySamplingFixedInventoryQuantity</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>QuantityPercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>quantityPercentageDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventQualitySamplingQuantityPercentage</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillQualityOrderFullyBlockOrderLineQuantity</Name>
			<DataField>CompleteBlocking</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillEveryInventoryUpdateCreateQualityOrder</Name>
			<DataField>CreatePerUpdatedQuantity</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderWarehouseSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isQualityOrderWarehouseSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderInventoryStatusSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isQualityOrderInventoryStatusSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>WHSInventStatusFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderWarehouseLocationSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isQualityOrderWarehouseLocationSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>WMSLocationIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderBatchNumberSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isQualityOrderBatchNumberSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventBatchIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderSerialNumberSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isQualityOrderSerialNumberSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventSerialIdFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TestQtySpecification</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TestQtySpecification</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSamplingValue</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemSamplingValue</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscriminatingInventoryDimensions</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DiscriminatingInventoryDimensions</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsQualityOrderLicensePlateSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<FeatureClass>InventQualitySamplingEntityAddMissedLicensePlateFlagFlight</FeatureClass>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>IsQualityOrderLicensePlateSpecificDefinition</ComputedFieldMethod>
			<ExtendedDataType>WHSLicensePlateFlag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillBreakLicensePlateCountByItem</Name>
			<FeatureClass>InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight</FeatureClass>
			<DataField>CountByItem</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreateQualityOrderPerNthLicensePlate</Name>
			<FeatureClass>InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight</FeatureClass>
			<DataField>PerNthLicensePlate</DataField>
			<DataSource>InventItemSampling</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsFullLPQuantitySpecification</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<FeatureClass>InventQualitySamplingEntityAddMissedFullLPQuantitySpecificationOptionFlight</FeatureClass>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>IsFullLPQuantitySpecificationDefinition</ComputedFieldMethod>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>SamplingId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventDimFixedActiveDimensionEntityMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimFixed</MapField>
					<MapFieldTo>DiscriminatingInventoryDimensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsInventoryStatusIdActive</MapField>
					<MapFieldTo>IsQualityOrderInventoryStatusSpecific</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemBatchNumberActive</MapField>
					<MapFieldTo>IsQualityOrderBatchNumberSpecific</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemSerialNumberActive</MapField>
					<MapFieldTo>IsQualityOrderSerialNumberSpecific</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsLicensePlateNumberActive</MapField>
					<MapFieldTo>IsQualityOrderLicensePlateSpecific</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsOperationalSiteIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductColorIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductConfigurationIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductSizeIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductStyleIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductVersionIdActive</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsWarehouseIdActive</MapField>
					<MapFieldTo>IsQualityOrderWarehouseSpecific</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsWarehouseLocationIdActive</MapField>
					<MapFieldTo>IsQualityOrderWarehouseLocationSpecific</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventItemSampling</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventItemSampling</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>