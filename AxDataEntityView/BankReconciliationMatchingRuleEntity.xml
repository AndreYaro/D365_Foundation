<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchingRuleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatchingRuleEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the data entity context.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     The context of the entity.
    /// </param>
    protected void setDataEntityContext(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        BankReconciliationMatchRule matchRule;
        BankReconciliationMatchRuleLine matchRuleLine;

        matchRule = BankReconciliationMatchRule::findByRuleId(this.MatchingRule);

        switch (this.SystemGeneratedType)
        {
            case BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference:
            case BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference:
                                select firstOnly matchRuleLine
                                    where matchRuleLine.BankReconciliationMatchRule == matchRule.RecId
                                        && matchRuleLine.SystemGeneratedType == this.SystemGeneratedType
                                        && matchRuleLine.LineType == this.LineType
                                        && matchRuleLine.Operator == this.Operator;
                matchRuleLine.selectForUpdate(true);

                if (matchRuleLine.RecId)
                {
                    _dataSourceCtx.setBuffer(matchRuleLine);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }

                BankReconciliationMatchRuleLine buffer = _dataSourceCtx.getBuffer();
                buffer.CompareFieldExpression = this.CompareFieldExpression;
                break;

            case BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber:
            case BankReconMatchRuleLineSysGeneratedType::SameBankTransType:
            case BankReconMatchRuleLineSysGeneratedType::Reversal:
            case BankReconMatchRuleLineSysGeneratedType::SamePaymReference:
            case BankReconMatchRuleLineSysGeneratedType::OppositeAmount:
            case BankReconMatchRuleLineSysGeneratedType::NotReversal:
                matchRuleLine = BankReconciliationMatchRuleLine::findBySysGeneratedType(matchRule.RecId, this.SystemGeneratedType, this.LineType);
                if (matchRuleLine.RecId)
                {
                    _dataSourceCtx.setBuffer(matchRuleLine);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "entityCtx">The context of the entity.</param>
    /// <param name = "dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BankReconciliationMatchingRuleEntity, BankReconciliationMatchRuleLine):
                    if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                    {
                        this.setDataEntityContext(_dataSourceCtx);
                    }
            }
        }

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataentitydatasourcestr(BankReconciliationMatchingRuleEntity, BankReconciliationMatchRuleLine))
        {
            BankReconciliationMatchRuleLine bankReconciliationMatchRuleLine = _dataSourceCtx.getBuffer();

            if (this.LineType == BankReconciliationMatchRuleLineType::Document)
            {
                bankReconciliationMatchRuleLine.SourceTableId = tableNum(BankReconciliationDocumentOpenTmp);

                if (this.Field)
                {
                    bankReconciliationMatchRuleLine.FieldId =
                        this.getFieldIdFromFieldName(bankReconciliationMatchRuleLine.SourceTableId, this.Field);
                }

                if (this.CompareField)
                {
                    bankReconciliationMatchRuleLine.CompareFieldId =
                        this.getFieldIdFromFieldName(tableNum(BankReconciliationStatementOpenTmp), this.CompareField);
                }
            }
            else
            {
                bankReconciliationMatchRuleLine.SourceTableId = tableNum(BankReconciliationStatementOpenTmp);

                if (this.Field)
                {
                    bankReconciliationMatchRuleLine.FieldId =
                    this.getFieldIdFromFieldName(bankReconciliationMatchRuleLine.SourceTableId, this.Field);
                }

                if (this.CompareField)
                {
                    bankReconciliationMatchRuleLine.CompareFieldId =
                    this.getFieldIdFromFieldName(bankReconciliationMatchRuleLine.SourceTableId, this.CompareField);
                }
            }

            if (!this.LineId)
            {
                bankReconciliationMatchRuleLine.LineId = newGuid();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankReconciliationMatchingRuleEntity::validateValueForSingleRecord(_dmfDefinitionGroupExecution);
        BankReconciliationMatchingRuleEntity::validateAllowedDiffLineNum(_dmfDefinitionGroupExecution);
        BankReconciliationMatchingRuleEntity::validateAllowedDiffValue(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValueForSingleRecordValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the record, whether the value of the fields is match.
    /// </summary>
    /// <param name = "_matchingRuleStaging">
    ///     An instance of <c>BankReconciliationMatchingRuleStaging</c>.
    /// </param>
    /// <returns>
    ///     true if the fields is match; otherwise, false.
    /// </returns>
    protected static boolean isValueForSingleRecordValid(BankReconciliationMatchingRuleStaging _matchingRuleStaging)
    {
        boolean isValid = false;

        #BankReconciliationMatchRuleOperator

        switch (_matchingRuleStaging.SystemGeneratedType)
        {
            // Allowed penny difference
        case BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference:
            if ((_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Match
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && (_matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::GreaterThanOrEquals
                        || _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::LessThanOrEquals))
            {
                isValid = true;
            }
            break;

            // Same document number
        case BankReconMatchRuleLineSysGeneratedType::SameDocumentNumber:
            if ((_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Match
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, DocumentNum)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankDocumentNumber)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, BankDocumentNumber)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankDocumentNumber)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            break;

            // Check difference of days
        case BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference:
            if ((_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Match
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, TransactionDate)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BookingDate)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && (_matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::GreaterThanOrEquals
                        || _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::LessThanOrEquals))
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, BookingDate)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BookingDate)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && (_matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::GreaterThanOrEquals
                        || _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::LessThanOrEquals))
            {
                isValid = true;
            }
            break;

            // Map to the same transaction type
        case BankReconMatchRuleLineSysGeneratedType::SameBankTransType:
            if ((_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Match
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, BankTransType)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankTransType)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, ProprietaryBankTransactionCode)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, ProprietaryBankTransactionCode)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            break;

            // Reversal
        case BankReconMatchRuleLineSysGeneratedType::Reversal:
            if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, Reversal)
                        && _matchingRuleStaging.CompareField == ''
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Statement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, Cancelled)
                        && _matchingRuleStaging.CompareField == ''
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            break;

            // Same payment reference
        case BankReconMatchRuleLineSysGeneratedType::SamePaymReference:
            if ((_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Match
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        || _matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Adjustment)
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, Reference)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, ReferenceNumber)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, ReferenceNumber)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, ReferenceNumber)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            break;

            // Opposite amount
        case BankReconMatchRuleLineSysGeneratedType::OppositeAmount:
            if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals
                        && _matchingRuleStaging.CompareFieldExpression == #OppositeAmount)
            {
                isValid = true;
            }
            else if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationDocumentOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.CompareField == fieldStr(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::Document
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals
                        && _matchingRuleStaging.CompareFieldExpression == #OppositeAmount)
            {
                isValid = true;
            }
            break;

            // Not reversal
        case BankReconMatchRuleLineSysGeneratedType::NotReversal:
            if (_matchingRuleStaging.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && _matchingRuleStaging.Field == fieldStr(BankReconciliationStatementOpenTmp, Reversal)
                        && _matchingRuleStaging.CompareField == ''
                        && _matchingRuleStaging.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && _matchingRuleStaging.Operator == BankReconciliationMatchOperatorType::Equals)
            {
                isValid = true;
            }
            break;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateValueForSingleRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the single record, whether the value of the fields is match.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer</param>
    public static void validateValueForSingleRecord(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {

        BankReconciliationMatchingRuleStaging matchingRuleStaging;

        while select matchingRuleStaging
            where matchingRuleStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && matchingRuleStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && matchingRuleStaging.SystemGeneratedType != BankReconMatchRuleLineSysGeneratedType::None
        {
            boolean  isValid = BankReconciliationMatchingRuleEntity::isValueForSingleRecordValid(matchingRuleStaging);

            if (isValid == false)
            {
                // Match action type:%1, line type:%2, system generated type:%3. The record validation failed.
                throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityRecordValidation", matchingRuleStaging.MatchActionType, matchingRuleStaging.LineType, matchingRuleStaging.SystemGeneratedType));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedAmountDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the <c>BankReconMatchRuleLineSysGeneratedType</c> for allowed amount difference.
    /// </summary>
    /// <returns>
    ///     The <c>BankReconMatchRuleLineSysGeneratedType</c> for allowed amount difference.
    /// </returns>
    protected static BankReconMatchRuleLineSysGeneratedType getAllowedAmountDifference()
    {
        return BankReconMatchRuleLineSysGeneratedType::AllowedAmountDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedDateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the <c>BankReconMatchRuleLineSysGeneratedType</c> for allowed date difference.
    /// </summary>
    /// <returns>
    ///     The <c>BankReconMatchRuleLineSysGeneratedType</c> for allowed date difference.
    /// </returns>
    protected static BankReconMatchRuleLineSysGeneratedType getAllowedDateDifference()
    {
        return BankReconMatchRuleLineSysGeneratedType::AllowedDateDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllowedDiffValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the allowed difference value for date and amount.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer</param>
    public static void validateAllowedDiffValue(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        #BankReconciliationMatchRuleOperator

        boolean isValid;

        BankReconciliationMatchFieldValue allowedDiffGreater;
        BankReconciliationMatchFieldValue allowedDiffLess;

        BankReconciliationMatchingRuleStaging matchingRuleStaging1;
        BankReconciliationMatchingRuleStaging matchingRuleStaging2;

        // Set the allowed difference value
        void setAllowedDiffValue()
        {
            if (matchingRuleStaging2.Operator == BankReconciliationMatchOperatorType::GreaterThanOrEquals)
            {
                allowedDiffGreater = matchingRuleStaging2.CompareFieldExpression;
            }
            else if (matchingRuleStaging2.Operator == BankReconciliationMatchOperatorType::LessThanOrEquals)
            {
                allowedDiffLess = matchingRuleStaging2.CompareFieldExpression;
            }
        }

        boolean checkAllowedDiffValue()
        {
            if ((allowedDiffGreater != ''
                || allowedDiffLess != '')
                && (str2Num(subStr(allowedDiffGreater, 2, strLen(allowedDiffGreater))) != str2Num(subStr(allowedDiffLess, 2, strLen(allowedDiffLess)))
                || subStr(allowedDiffGreater, 1, 1) != #Minus
                || subStr(allowedDiffLess, 1, 1) != #Plus))
            {
                isValid = false;
            }
            else
            {
                isValid = true;
            }

            return isValid;
        }

        while select matchingRuleStaging1
            group by MatchingRule, MatchActionType
            where matchingRuleStaging1.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && matchingRuleStaging1.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            BankReconMatchRuleLineSysGeneratedType allowedAmountDifference;
            BankReconMatchRuleLineSysGeneratedType allowedDateDifference;

            if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Match)
            {
                allowedAmountDifference = BankReconciliationMatchingRuleEntity::getAllowedAmountDifference();
                // Validate the allowed amount difference for MatchActionType:Match
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Match
                        && matchingRuleStaging2.SystemGeneratedType == allowedAmountDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Match, BankReconciliationMatchRuleLineType::Document, allowedAmountDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate the allowed date difference for MatchActionType:Match
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Match
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Match, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }
            }
            else if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Adjustment)
            {
                allowedAmountDifference = BankReconciliationMatchingRuleEntity::getAllowedAmountDifference();
                // Validate the allowed amount difference for MatchActionType:Adjustment
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Adjustment
                        && matchingRuleStaging2.SystemGeneratedType == allowedAmountDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Adjustment, BankReconciliationMatchRuleLineType::Document, allowedAmountDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate the allowed date difference for MatchActionType:Adjustment
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Adjustment
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Adjustment, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }
            }
            else if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Reversal)
            {
                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate the allowed date difference for MatchActionType:Reversal, LineType:Document
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && matchingRuleStaging2.LineType == BankReconciliationMatchRuleLineType::Document
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Reversal, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate the allowed date difference for MatchActionType:Reversal, LineType:Origstatement
                while select matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && matchingRuleStaging2.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference
                {
                    setAllowedDiffValue();
                }
                if (!checkAllowedDiffValue())
                {
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDifferenceValidation", BankReconciliationMatchActionType::Reversal, BankReconciliationMatchRuleLineType::OrigStatement, allowedDateDifference));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllowedDiffLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the number of lines for an allowed difference matching rule. The number of lines must be 0 or 2.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer</param>
    public static void validateAllowedDiffLineNum(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankReconciliationMatchingRuleStaging matchingRuleStaging1;
        BankReconciliationMatchingRuleStaging matchingRuleStaging2;

        while select matchingRuleStaging1
            group by MatchingRule, MatchActionType
            where matchingRuleStaging1.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && matchingRuleStaging1.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            BankReconMatchRuleLineSysGeneratedType allowedAmountDifference;
            BankReconMatchRuleLineSysGeneratedType allowedDateDifference;

            if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Match)
            {
                allowedAmountDifference = BankReconciliationMatchingRuleEntity::getAllowedAmountDifference();
                // Validate for MatchActionType:Match, LineType:Document, SystemGeneratedType:AllowedAmountDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Match
                        && matchingRuleStaging2.SystemGeneratedType == allowedAmountDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Match, BankReconciliationMatchRuleLineType::Document, allowedAmountDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate for MatchActionType:Match, LineType:Document, SystemGeneratedType:AllowedDateDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Match
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Match, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }
            }
            else if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Adjustment)
            {
                allowedAmountDifference = BankReconciliationMatchingRuleEntity::getAllowedAmountDifference();
                // Validate for MatchActionType:Adjustment, LineType:Document, SystemGeneratedType:AllowedAmountDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Adjustment
                        && matchingRuleStaging2.SystemGeneratedType == allowedAmountDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Adjustment, BankReconciliationMatchRuleLineType::Document, allowedAmountDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate for MatchActionType:Adjustment, LineType:Document, SystemGeneratedType:AllowedDateDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Adjustment
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Adjustment, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }
            }
            else if (matchingRuleStaging1.MatchActionType == BankReconciliationMatchActionType::Reversal)
            {
                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate for MatchActionType:Reversal, LineType:Document, SystemGeneratedType:AllowedDateDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && matchingRuleStaging2.LineType == BankReconciliationMatchRuleLineType::Document
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Reversal, BankReconciliationMatchRuleLineType::Document, allowedDateDifference));
                }

                allowedDateDifference = BankReconciliationMatchingRuleEntity::getAllowedDateDifference();
                // Validate for MatchActionType:Reversal, LineType:OrigStatement, SystemGeneratedType:AllowedDateDifference
                select count(RecId) from matchingRuleStaging2
                    where matchingRuleStaging2.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && matchingRuleStaging2.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && matchingRuleStaging2.MatchingRule == matchingRuleStaging1.MatchingRule
                        && matchingRuleStaging2.MatchActionType == BankReconciliationMatchActionType::Reversal
                        && matchingRuleStaging2.LineType == BankReconciliationMatchRuleLineType::OrigStatement
                        && matchingRuleStaging2.SystemGeneratedType == allowedDateDifference;
                if (matchingRuleStaging2.RecId != 0 && matchingRuleStaging2.RecId != 2)
                {
                    // Match action type:%1, line type:%2, system generated type:%3. The number of rows doesn't match.
                    throw error(strFmt("@CashManagement:BankReconciliationMatchingRuleEntityAllowedDiffLineNumValidation", BankReconciliationMatchActionType::Reversal, BankReconciliationMatchRuleLineType::OrigStatement, allowedDateDifference));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a field ID that is based on a specified table and field name either by using a look up
    /// list or the manual input.
    /// </summary>
    /// <param name="_tableId">
    /// The specified table ID.
    /// </param>
    /// <param name="_fieldFieldName">
    /// The specified field Name.
    /// </param>
    /// <returns>
    /// The field ID.
    /// </returns>
    /// <remarks>
    /// The assumption is that the field label is unique; otherwise, returns the first matched field Id.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// There is no field that has the specified field name.
    /// </exception>
    private FieldId getFieldIdFromFieldName(
        TableId     _tableId,
        FieldName  _fieldFieldName)
    {
        DictTable   dictTable = new DictTable(_tableId);
        DictField   dictField;
        Counter     counter;
        FieldId     fieldId;

        if (_fieldFieldName)
        {
            for (counter = 1; counter <= dictTable.fieldCnt(); counter++)
            {
                dictField = new DictField(_tableId, dictTable.fieldCnt2Id(counter));
                //prerequisite is the field label is unique
                if (dictField.name() == _fieldFieldName)
                {
                    fieldId = dictTable.fieldCnt2Id(counter);
                    break;
                }
            }

            if (!fieldId)
            {
                throw error("@GLS222256");
            }
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        SysDictField dict;
        if (this.FieldId)
        {
            dict = new SysDictField(this.SourceTableId, this.FieldId);
            this.Field = dict.name();
        }

        if (this.CompareFieldId)
        {
            if (this.LineType == BankReconciliationMatchRuleLineType::Document)
            {
                dict = new SysDictField(tableNum(BankReconciliationStatementOpenTmp), this.CompareFieldId);
            }
            else
            {
                dict = new SysDictField(this.SourceTableId, this.CompareFieldId);
            }

            this.CompareField = dict.name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method ensures validateWrite() is called on Table
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Entity Datasource context</param>
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BankReconciliationMatchingRuleEntity, BankReconciliationMatchRule):
                _dataSourceCtx.skipDataMethods(true);
                break;
        }
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<FormRef>BankReconciliationMatchRule</FormRef>
	<Label>@GLS222238</Label>
	<Tags>Reconciliation</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankReconciliationMatchingRuleStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MatchActionType</Name>
			<DataField>MatchActionType</DataField>
			<DataSource>BankReconciliationMatchRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>BankReconciliationMatchRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MatchingRule</Name>
			<DataField>RuleId</DataField>
			<DataSource>BankReconciliationMatchRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SearchBankDocuments</Name>
			<DataField>SearchMatchingEntry</DataField>
			<DataSource>BankReconciliationMatchRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FieldId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FieldId</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Value</Name>
			<DataField>Value</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CompareFieldId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CompareFieldId</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineId</Name>
			<DataField>LineId</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Operator</Name>
			<DataField>Operator</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceTableId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SourceTableId</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Field</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CompareField</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CompareFieldExpression</Name>
			<Label>@SYS1997</Label>
			<DataField>CompareFieldExpression</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SystemGeneratedType</Name>
			<DataField>SystemGeneratedType</DataField>
			<DataSource>BankReconciliationMatchRuleLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>MatchingRule</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankReconciliationMatchRule</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankReconciliationMatchRule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankReconciliationMatchRuleLine</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankReconciliationMatchRuleLine</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BankReconciliationMatchRule</Name>
								<JoinRelationName>BankReconciliationMatchRule</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>