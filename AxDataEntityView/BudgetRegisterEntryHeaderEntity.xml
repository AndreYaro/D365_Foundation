<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetRegisterEntryHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetRegisterEntryHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExpenseBudgetTotalSql</Name>
				<Source><![CDATA[
    private static str getExpenseBudgetTotalSql()
    {
        return BudgetRegisterEntryHeaderEntity::getBudgetTotalSql(BudgetType::Expense);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevenueBudgetTotalSql</Name>
				<Source><![CDATA[
    private static str getRevenueBudgetTotalSql()
    {
        return BudgetRegisterEntryHeaderEntity::getBudgetTotalSql(BudgetType::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTotalSql</Name>
				<Source><![CDATA[
    private static str getBudgetTotalSql(BudgetType _budgetType)
    {
        int signMultiplier = 1;

        if (_budgetType == BudgetType::Revenue)
        {
            // The sign on the amount should match what the user entered.
            // Flip the sign of the amount for Revenue type.
            signMultiplier = -1;
        }

        str budgetTotalSql = strFmt(@"
            SELECT %3 * COALESCE(SUM(BTL.ACCOUNTINGCURRENCYAMOUNT), 0) FROM BUDGETTRANSACTIONHEADER BTH
                LEFT JOIN BUDGETTRANSACTIONLINE BTL ON BTL.PARTITION = BTH.PARTITION AND BTL.BUDGETTRANSACTIONHEADER = BTH.RECID
                WHERE BTH.RECID = %1 AND BTL.BUDGETTYPE = %2",
            SysComputedColumn::returnField(tablestr(BudgetRegisterEntryHeaderEntity), dataEntityDataSourceStr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader), fieldstr(BudgetRegisterEntryHeaderEntity, RecId)),
            enum2int(_budgetType),
            signMultiplier);

        return budgetTotalSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeSql</Name>
				<Source><![CDATA[
    private static str getReasonCodeSql()
    {
        str reasonCodeSql = strFmt('SELECT REASON FROM REASONTABLEREF WHERE RECID = %1',
            SysComputedColumn::returnField(
                tableStr(BudgetRegisterEntryHeaderEntity),
                dataEntityDataSourceStr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader),
                fieldStr(BudgetTransactionHeader, ReasonTableRef)));

        return reasonCodeSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCommentSql</Name>
				<Source><![CDATA[
    private static str getReasonCommentSql()
    {
        str reasonCommentSql = strFmt('SELECT REASONCOMMENT FROM REASONTABLEREF WHERE RECID = %1',
            SysComputedColumn::returnField(
                tableStr(BudgetRegisterEntryHeaderEntity),
                dataEntityDataSourceStr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader),
                fieldStr(BudgetTransactionHeader, ReasonTableRef)));

        return reasonCommentSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (!this.LegalEntityId)
        {
            this.LegalEntityId = curExt();
        }

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader):
                    BudgetTransactionHeader header = _dataSourceCtx.getBuffer();

                    this.setEntryNumber(header);

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapHeaderForUpsert</Name>
				<Source><![CDATA[
    private void mapHeaderForUpsert(BudgetTransactionHeader _header)
    {
        changecompany(this.LegalEntityId)
        {
            this.setBudgetModelFields(_header);

            if (this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, BudgetCode)) == FieldState::Set
                || this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, BudgetType)) == FieldState::Set)
            {
                BudgetTransHeaderType budgetTransHeaderType = _header.type();

                if (budgetTransHeaderType)
                {
                    // Default the BudgetTransactionCode and BudgetTransactionType fields based on what the entity has set.
                    budgetTransHeaderType.defaultField(fieldNum(BudgetTransactionHeader, BudgetTransactionCode));
                    budgetTransHeaderType.defaultField(fieldNum(BudgetTransactionHeader, BudgetTransactionType));

                    this.BudgetCode = BudgetTransactionCode::find(_header.BudgetTransactionCode).Name;
                }
            }

            // Direct updates to the BudgetTransactionType field are not allowed on the BudgetTransactionHeader table.
            // Resetting the state of this field and setting the state of the BudgetTransactionCode field ensures
            // the correct information is published via the entity.
            this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, BudgetType), FieldState::NotSet);

            _header.fieldState(fieldNum(BudgetTransactionHeader, BudgetTransactionType), FieldState::NotSet);
            _header.fieldState(fieldNum(BudgetTransactionHeader, BudgetTransactionCode), FieldState::Set);

            this.setReasonFields(_header);

            if (!this.DefaultDate)
            {
                _header.Date = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isValid = true;

        isValid = !BudgetTransactionManager::isUserBlocked(this.InUseBy, this.EntryNumber, true) && isValid;

        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader):
                isValid = BudgetTransactionManager::checkWorkflowStatusForUpdate(this.WorkflowStatus, this.EntryNumber) && isValid;

                // Perform the validation during update as the BudgetTransactionHeader buffer is not accessible from the entity validateWrite.
                BudgetTransactionHeader header = _dataSourceCtx.getBuffer();

                this.mapHeaderForUpsert(header);

                isValid = this.validateBudgetTransactionCode(header) && isValid;

                break;
        }

        if (!isValid)
        {
            // The validation will log errors, throw an exception to stop the update.
            throw Exception::Error;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader):
                BudgetTransactionHeader header = _dataSourceCtx.getBuffer();

                if (!this.validateBudgetTransactionCode(header))
                {
                    throw Exception::Error;
                }

                break;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader):
                BudgetTransactionHeader header = _dataSourceCtx.getBuffer();

                this.mapHeaderForUpsert(header);

                if (!this.validateBudgetTransactionCode(header))
                {
                    throw Exception::Error;
                }

                break;
        }

        boolean isInserted = super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BudgetRegisterEntryHeaderEntity, BudgetTransactionHeader):
                // Remove the one time event handler that was added for an insert header failure.
                appl.onTtsNotifyAbort -= eventhandler(this.onInsertTtsNotifyAbort);

                break;
        }

        return isInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetTransactionCode</Name>
				<Source><![CDATA[
    private boolean validateBudgetTransactionCode(BudgetTransactionHeader _header)
    {
        SelectableDataArea currentDataArea = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_header.PrimaryLedger));

        boolean isValid;

        changecompany(currentDataArea)
        {
            BudgetTransHeaderType budgetTransHeaderType = _header.type();

            // Validate the private key field directly after it has been mapped.
            isValid = budgetTransHeaderType.validateField(fieldNum(BudgetTransactionHeader, BudgetTransactionCode));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetModelFields</Name>
				<Source><![CDATA[
    private void setBudgetModelFields(BudgetTransactionHeader _header)
    {
        if (this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, BudgetModelId)) == FieldState::Set)
        {
            _header.BudgetSubModelId = this.BudgetModelId;
            _header.BudgetModelDataAreaId = this.LegalEntityId;
            _header.BudgetModelType = HeadingSub::Heading;

            _header.setIncludeInCashFlowForecast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReasonFields</Name>
				<Source><![CDATA[
    private void setReasonFields(BudgetTransactionHeader _header)
    {
        boolean isReasonCodeSet = this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, ReasonCode)) == FieldState::Set;

        ReasonCode reasonCode = _header.editReasonCode(isReasonCodeSet, this.ReasonCode);

        if (isReasonCodeSet && this.ReasonCode != reasonCode)
        {
            // The specified reason code was not set on the header.
            // The edit method will log errors, throw the exception to stop the update.
            throw Exception::Error;
        }

        _header.editReasonComment(this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, ReasonComment)) == FieldState::Set, this.ReasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = BudgetTransactionManager::validateInUseBy(this.InUseBy, this.EntryNumber);

        isValid = isValid && super();

        if (!isValid)
        {
            // The validation will log errors, throw an exception to stop the delete.
            throw Exception::Error;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntryNumberSql</Name>
				<Source><![CDATA[
    private static str getEntryNumberSql()
    {
        DictDataEntity BudgetRegisterEntryHeaderEntity = new DictDataEntity(tableNum(BudgetRegisterEntryHeaderEntity));

        // Get the data source name that contains the entry number details.
        str headerDataSourceName = BudgetRegisterEntryHeaderEntity.query().dataSourceTable(tablenum(BudgetTransactionHeader)).name();

        // Get the field name that contains the entry number.
        str transactionNumber = BudgetRegisterEntryHeaderEntity.computedColumnString(headerDataSourceName, fieldStr(BudgetTransactionHeader, TransactionNumber), FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(transactionNumber),
            SysComputedColumn::returnLiteral(''),
            transactionNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntryNumber</Name>
				<Source><![CDATA[
    private void setEntryNumber(BudgetTransactionHeader _header)
    {
        LedgerRecId primaryLedgerRecId = Ledger::primaryLedger(CompanyInfo::current(this.LegalEntityId));

        container cacheKey = [primaryLedgerRecId, this.EntryNumber, this.scopeIdentifier()];
        container cachedResult = BudgetCache::getValue(BudgetCacheScope::BudgetRegisterEntryEntityEntryNumber, cacheKey);

        if (cachedResult == conNull())
        {
            BudgetTransactionHeader existingHeader = BudgetTransactionHeader::findByTransactionNumber(this.EntryNumber, primaryLedgerRecId);

            if (!existingHeader && this.isContinuousNumberSequence())
            {
                changecompany(this.LegalEntityId)
                {
                    // Generate an entry number for the provided value when a continuous number sequence value does not exist.
                    BudgetRegisterEntryEntityNumSeqHandler::enableNumberSequenceControl
                        (this,
                        fieldNum(BudgetRegisterEntryHeaderEntity, EntryNumber),
                        BudgetParameters::numRefBudgetTransactionId(),
                        _header);

                    // Call initValue to generate the number sequence value.
                    this.initValue();
                }

                cachedResult = [this.EntryNumber];

                BudgetCache::insertValue(BudgetCacheScope::BudgetRegisterEntryEntityEntryNumber, cacheKey, cachedResult);

                // Register the notify abort event to release the generated number sequence value if the insert fails.
                appl.onTtsNotifyAbort += eventhandler(this.onInsertTtsNotifyAbort);
            }
        }
        else
        {
            this.EntryNumber = conpeek(cachedResult, 1);
        }

        if (_header.TransactionNumber != this.EntryNumber)
        {
            _header.TransactionNumber = this.EntryNumber;

            // Reset the read-only fields for the updated budget transaction header reference.
            BudgetTransactionHeader header = BudgetTransactionHeader::findByTransactionNumber(this.EntryNumber, primaryLedgerRecId);

            if (header)
            {
                this.BudgetType = header.BudgetTransactionType;
                this.fieldState(fieldNum(BudgetRegisterEntryHeaderEntity, BudgetType), FieldState::NotSet);

                _header.BudgetTransactionType = header.BudgetTransactionType;
                _header.fieldState(fieldNum(BudgetTransactionHeader, BudgetTransactionType), FieldState::NotSet);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsertTtsNotifyAbort</Name>
				<Source><![CDATA[
    private void onInsertTtsNotifyAbort()
    {
        if (this.EntryNumber)
        {
            LedgerRecId primaryLedgerRecId = Ledger::primaryLedger(CompanyInfo::current(this.LegalEntityId));

            BudgetTransactionHeader existingHeader = BudgetTransactionHeader::findByTransactionNumber(this.EntryNumber, primaryLedgerRecId);

            if (!existingHeader && this.isContinuousNumberSequence())
            {
                changecompany(this.LegalEntityId)
                {
                    // Release the entry number value when a continuous number sequence value
                    // was generated but the insert is aborted for the record and no other header reference exists.
                    NumberSeq::releaseNumber(
                        BudgetParameters::numRefBudgetTransactionId().NumberSequenceId,
                        this.EntryNumber);
                }
            }
        }

        // Remove the one time event handler that was added for the insert failure to ensure there is only one registered.
        appl.onTtsNotifyAbort -= eventhandler(this.onInsertTtsNotifyAbort);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContinuousNumberSequence</Name>
				<Source><![CDATA[
    private boolean isContinuousNumberSequence()
    {
        boolean isContinuousNumberSequence;

        changecompany(this.LegalEntityId)
        {
            NumberSequenceReference numberSequenceReference = BudgetParameters::numRefBudgetTransactionId();

            if (numberSequenceReference)
            {
                NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

                if (numberSequenceTable
                    && numberSequenceTable.Continuous
                    && !numberSequenceTable.Blocked)
                {
                    // The number sequence that is setup is continuous and not on hold.
                    isContinuousNumberSequence = true;
                }
            }
        }

        return isContinuousNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (!this.LegalEntityId)
        {
            this.LegalEntityId = curExt();
        }

        changecompany(this.LegalEntityId)
        {
            super(_entityCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget models.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget models.
    /// </returns>
    [SysODataActionAttribute("BudgetRegisterEntryHeaderEntityBudgetModelIdLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("BudgetModelId")]
    public static str lookupBudgetModelId(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetRegisterEntryHeaderEntity),
            fieldStr(BudgetRegisterEntryHeaderEntity, LegalEntityId),
            _fields);

        List lookupList = BudgetRegisterEntryEntityHelper::getBudgetModelIDs(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget codes.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget codes.
    /// </returns>
    [SysODataActionAttribute("BudgetRegisterEntryHeaderEntityBudgetCodeLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("BudgetCode")]
    public static str lookupBudgetCode(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetRegisterEntryHeaderEntity),
            fieldStr(BudgetRegisterEntryHeaderEntity, LegalEntityId),
            _fields);

        List lookupList = BudgetRegisterEntryEntityHelper::getBudgetCodes(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of reason codes.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of reason codes.
    /// </returns>
    [SysODataActionAttribute("BudgetRegisterEntryHeaderEntityReasonCodeLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("ReasonCode")]
    public static str lookupReasonCode(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetRegisterEntryHeaderEntity),
            fieldStr(BudgetRegisterEntryHeaderEntity, LegalEntityId),
            _fields);

        List lookupList = BudgetRegisterEntryEntityHelper::getReasonCodes(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetRegisterEntryHeaderEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetTransactions</FormRef>
	<Label>@Budget:BudgetRegisterEntryHeaderEntityLabel</Label>
	<Tags>Budget register</Tags>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetRegisterEntryHeaders</PublicCollectionName>
	<PublicEntityName>BudgetRegisterEntryHeader</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeRevision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetModelId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpenseBudgetTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevenueBudgetTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetTransactionCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetModelId</Name>
			<DataField>BudgetModelId</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>TransactionStatus</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetTransactionCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetTransactionCode</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>BudgetTransactionType</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>Date</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>EntryNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS339267</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getEntryNumberSql</ComputedFieldMethod>
			<ExtendedDataType>BudgetTransactionId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OneTimeRevision</Name>
			<DataField>IsOneTimeAmendment</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryLedgerId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PrimaryLedger</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ReasonCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:EntityField_ReasonCode</Label>
			<ComputedFieldMethod>getReasonCodeSql</ComputedFieldMethod>
			<ExtendedDataType>ReasonCode</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ReasonComment</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:EntityField_ReasonComment</Label>
			<ComputedFieldMethod>getReasonCommentSql</ComputedFieldMethod>
			<ExtendedDataType>ReasonComment</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReasonTableRef</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ReasonTableRef</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDocument</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>TransferSourceNumber</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkflowStatus</Name>
			<DataField>WorkflowStatus</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ExpenseBudgetTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS152264</Label>
			<ComputedFieldMethod>getExpenseBudgetTotalSql</ComputedFieldMethod>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>RevenueBudgetTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS152265</Label>
			<ComputedFieldMethod>getRevenueBudgetTotalSql</ComputedFieldMethod>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>EntryNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>LedgerEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>PrimaryLedger</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryHeaderPrimaryLedger</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetCodeEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>BudgetCodeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetCodes</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryHeaderBudgetCode</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetCodeEntity_BudgetCode</Name>
					<Field>BudgetCode</Field>
					<RelatedField>BudgetCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetModelEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>BudgetModelEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetModels</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryHeaderBudgetModel</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetModelEntity_BudgetModel</Name>
					<Field>BudgetModelId</Field>
					<RelatedField>BudgetModel</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetTransactionHeader</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetTransactionHeader</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetTransactionCode</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetTransactionCode</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetTransactionCode</Name>
								<JoinRelationName>BudgetTransactionCode</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryLedger</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Ledger</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PrimaryForLegalEntity</Field>
										<JoinDataSource>PrimaryLedger</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>PrimaryLedger</Name>
								<JoinRelationName>Ledger</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>