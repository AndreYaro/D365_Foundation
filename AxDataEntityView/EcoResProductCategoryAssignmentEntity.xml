<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductCategoryAssignmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductCategoryAssignmentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductCategoryAssignmentEntity, EcoResProductCategory):
                EcoResProductCategory newProductCategory = _dataSourceCtx.getBuffer();
                if (newProductCategory.Product && newProductCategory.Category && newProductCategory.CategoryHierarchy)
                {
                    boolean canInsert = newProductCategory.checkRoleSpecificRestrictions(false);
                    if (!canInsert)
                    {
                        // Change to update an existing record instead as multiple assignments of the same product to different categories
                        // within one category hierarchy or category hierarchy role is not allowed for certain hierarchy roles.
                        EcoResProductCategory existingProductCategory = EcoResProductCategory::findByProductAndCategoryHierarchy(newProductCategory.Product, newProductCategory.CategoryHierarchy);
                        if (existingProductCategory)
                        {
                            existingProductCategory.Category = newProductCategory.Category;
                            existingProductCategory.DisplayOrder = newProductCategory.DisplayOrder;

                            _dataSourceCtx.setBuffer(existingProductCategory);
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                        }
                    }
                    else if (!this.isEntityInDataManagementContext())
                    {
                        // If multiple instances of product can be inserted into different categories under this hierarchy, update display order values to keep consistent.
                        EcoResProductCategoryAssignmentEntity::checkAndUpdateRelatedDisplayOrder(newProductCategory.Product, newProductCategory.Category, newProductCategory.CategoryHierarchy, newProductCategory.DisplayOrder);
                    }
                }
                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret)
        {
            //Associate the product with a special category hierarchy if the category belongs to the supplemental category hierarchy.
            this.createSpecialCategoryMember(_dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (!ret.RecId && _dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductCategoryAssignmentEntity, EcoResCategory))
        {
            ret = EcoResCategory::findCategoryByNameAndHierarchy(this.ProductCategoryName, this.ProductCategoryHierarchyName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the records and update corresponding DisplayOrder of EcoResProductCaregory records with same <Product, Hierarchy>
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">>Entity import group to update.</param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFDefinitionGroupName definitionGroup =  _dmfDefinitionGroupExecution.DefinitionGroup;
        DMFExecutionId executionId = _dmfDefinitionGroupExecution.ExecutionId;
        DMFEntityName entityName = _dmfDefinitionGroupExecution.Entity;

        EcoResProductCategoryAssignmentStaging staging, stagingWithMaxRecId;
        EcoResProductCategory ecoResProductCategory;
        DMFDefinitionGroupExecution currentExecution;

        ttsbegin;

        // Add a lock here so the multiple threads will run in sequence:
        // The 1st thread will update all related records in underline table.
        // The rest threads will only check records in table but do not update any record as display orders are already updated by thread 1.
        select pessimisticlock currentExecution
        where currentExecution.DefinitionGroup == definitionGroup
            && currentExecution.ExecutionId == executionId
            && currentExecution.Entity == entityName;

        if (currentExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            // 1. find the record with max RedId for each <product, hierachy>.
            while select ProductNumber, ProductCategoryHierarchyName, maxOf(RecId)
            from stagingWithMaxRecId
            group by ProductNumber, ProductCategoryHierarchyName
            where stagingWithMaxRecId.DefinitionGroup == definitionGroup
                && stagingWithMaxRecId.ExecutionId == executionId
                && stagingWithMaxRecId.TransferStatus == DMFTransferStatus::Completed
            {
                // 2: find display order and category of the max(RecId) row.
                select firstonly ProductCategoryName, DisplayOrder
                from staging
                where staging.RecId == stagingWithMaxRecId.RecId;

                EcoResCategory currentCategory = EcoResCategory::findCategoryByNameAndHierarchy(staging.ProductCategoryName, stagingWithMaxRecId.ProductCategoryHierarchyName);
                EcoResCategoryId categoryId = currentCategory.RecId;
                EcoResCategoryHierarchyId hierarchyId = currentCategory.CategoryHierarchy;
                EcoResProductRecId productRecId = EcoResProduct::findByDisplayProductNumber(stagingWithMaxRecId.ProductNumber).RecId;

                // 3. Check if there is other instance of <product, hierachy> exist with different display order. And update if any.
                EcoResProductCategoryAssignmentEntity::checkAndUpdateRelatedDisplayOrder(productRecId, categoryId, hierarchyId, staging.DisplayOrder);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the update logic.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns></returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductCategoryAssignmentEntity, EcoResProductCategory):
                if (!this.isEntityInDataManagementContext())
                {
                    EcoResProductCategory updateProductCategory = _dataSourceCtx.getBuffer();

                    EcoResProductCategoryAssignmentEntity::checkAndUpdateRelatedDisplayOrder(updateProductCategory.Product, updateProductCategory.Category, updateProductCategory.CategoryHierarchy, updateProductCategory.DisplayOrder);
                }
                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret)
        {
            //Associate the product with a special category hierarchy if the category belongs to the supplemental category hierarchy.
            this.createSpecialCategoryMember(_dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndUpdateRelatedDisplayOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and update display order values of same product under different categories in the same hierarchy.
    /// </summary>
    /// <param name = "productRecId">product id to check.</param>
    /// <param name = "categoryId">category the product is currently assgined to in the hierarchy.</param>
    /// <param name = "hierarchyId">hierarchy to check whehter the current product is assgined to other categories.</param>
    /// <param name = "displayOrder">display order value of the product in currenty category.</param>
    private static void checkAndUpdateRelatedDisplayOrder(EcoResProductRecId productRecId, EcoResCategoryId categoryId, EcoResCategoryHierarchyId hierarchyId, EcoResProductCategoryDisplayOrder displayOrder)
    {
        #OCCRetryCount
        EcoResProductCategory productCategory;

        select firstonly RecId from productCategory
        where productCategory.CategoryHierarchy == hierarchyId
            && productCategory.Category != categoryId
            && productCategory.DisplayOrder != displayOrder
            && productCategory.Product == productRecId;

        if (productCategory.RecId > 0)
        {
            EcoResProductCategory existingProductCategory;

            try
            {
                ttsbegin;
                update_recordset existingProductCategory
                    setting DisplayOrder = displayOrder
                where existingProductCategory.CategoryHierarchy == hierarchyId
                    && existingProductCategory.Category != categoryId
                    && existingProductCategory.DisplayOrder != displayOrder
                    && existingProductCategory.Product == productRecId;
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecialCategoryMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create special category memeber line if the category hierarchy serves Supplemental role 
    /// </summary>
    private void createSpecialCategoryMember(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductCategoryAssignmentEntity, EcoResProductCategory)
            && RetailSupplementalHierarchiesImportFlight::instance().isEnabled()
            && isConfigurationkeyEnabled(configurationKeyNum(Retail))
            )
        {
            EcoResProductCategory newProductCategory = _dataSourceCtx.getBuffer();

            if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup,
                    newProductCategory.CategoryHierarchy))
            {
                //Get retail category of the product
                RefRecId memberLineCategory = EcoResProductCategory::findByProductIdCategoryHierarchyRole(newProductCategory.Product, EcoResCategoryNamedHierarchyRole::Retail).Category;

                if (!RetailSpecialCategoryMember::findByMemberLine(newProductCategory.Category, memberLineCategory, newProductCategory.Product))
                {
                    RetailSpecialCategoryMember::addProductLine(newProductCategory.Category, newProductCategory.Product);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DevDocProductCategoryAssignmentEntity</DeveloperDocumentation>
	<FormRef>EcoResProductCategory</FormRef>
	<Label>@SCM:ProductCategoryAssignments</Label>
	<Tags>Product category attributes</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductCategoryAssignmentStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductCategoryAssignments</PublicCollectionName>
	<PublicEntityName>ProductCategoryAssignment</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductCategoryHierarchyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductCategoryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductCategoryHierarchyName</Name>
			<Label>@SCM:ProductCategoryHierarchyName</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductCategoryName</Name>
			<Label>@SCM:ProductCategoryName</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductCategoryRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Category</DataField>
			<DataSource>EcoResProductCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductCategoryHierarchyRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CategoryHierarchy</DataField>
			<DataSource>EcoResProductCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Product</DataField>
			<DataSource>EcoResProductCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisplayOrder</Name>
			<DataField>DisplayOrder</DataField>
			<DataSource>EcoResProductCategory</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductCategoryName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductCategoryHierarchyName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductV2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductV2</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductCategoryAssignments</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductV2Entity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductCategoryEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductCategory</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductCategoryAssignments</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductCategoryEntity_ProductCategoryHierarchyName</Name>
					<Field>ProductCategoryHierarchyName</Field>
					<RelatedField>ProductCategoryHierarchyName</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductCategoryEntity_CategoryName</Name>
					<Field>ProductCategoryName</Field>
					<RelatedField>CategoryName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EveryProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResEveryProductEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>EveryProduct</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductCategoryAssignments</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResEveryProductEntity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResProductCategory</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResProductCategory</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResProductCategory</JoinDataSource>
								<JoinRelationName>EcoResCategory</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProduct</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResDistinctProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProduct</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResDistinctProductVariant</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProductVariant</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResProductMaster</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResProductMaster</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResProductCategory</JoinDataSource>
								<JoinRelationName>EcoResProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategoryHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategoryHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>HierarchyModifier</Name>
								<Field>HierarchyModifier</Field>
								<Status>Hidden</Status>
								<Value>Category</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResProductCategory</JoinDataSource>
								<JoinRelationName>EcoResCategoryHierarchy</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>