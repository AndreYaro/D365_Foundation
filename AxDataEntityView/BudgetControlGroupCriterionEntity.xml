<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGroupCriterionEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlGroupCriterionEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEnityOfficeMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Office menu options for the entity when the <c>setEntityOfficeMenuOptionDelegate</c> delegate in the <c>BudgetControlConfigurationEntityHelper</c> class is called.
    /// </summary>
    /// <param name="_entityOfficeMenuOption">
    /// The <c>BudgetControlConfigurationEntityOfficeMenuOption</c> instance for the entity.
    /// </param>
    [SubscribesTo(classstr(BudgetControlConfigurationEntityHelper), delegatestr(BudgetControlConfigurationEntityHelper, setEntityOfficeMenuOptionDelegate))]
    public static void setEnityOfficeMenuOption(BudgetControlConfigurationEntityOfficeMenuOption _entityOfficeMenuOption)
    {
        if (_entityOfficeMenuOption.parmEntityName() == tableStr(BudgetControlGroupCriterionEntity))
        {
            _entityOfficeMenuOption.parmLegalEntityIdFieldName(fieldStr(BudgetControlGroupCriterionEntity, LegalEntityId));
            _entityOfficeMenuOption.parmStatusFieldName(fieldStr(BudgetControlGroupCriterionEntity, Status));
            _entityOfficeMenuOption.parmDisplayFieldGroupName(tableFieldGroupStr(BudgetControlGroupCriterionEntity, AutoReport));
            _entityOfficeMenuOption.parmDisplayName("@Budget:ControlGroupCriterionEntityOfficeExportDisplayValue");
            _entityOfficeMenuOption.parmDataAreaIdFieldName(fieldStr(BudgetControlGroupCriterionEntity, DataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriterionSql</Name>
				<Source><![CDATA[
    private static str getCriterionSql()
    {
        str criterionSql = strFmt(@"
            STUFF(
                (SELECT ',' +
                    CASE WHEN CRIT.WILDCARDSTRING <> '' THEN
                        REPLACE(CRIT.WILDCARDSTRING, '%', '*')
                    WHEN CRIT.RANGETO = '' AND CRIT.ISFROMOPEN = 1 THEN
                        '>' + CRIT.RANGEFROM
                    WHEN CRIT.RANGETO = '' AND CRIT.ISFROMOPEN = 0 THEN
                        CRIT.RANGEFROM + '..*'
                    WHEN CRIT.RANGEFROM = '' AND CRIT.ISTOOPEN = 1 THEN
                        '<' + CRIT.RANGETO
                    WHEN CRIT.RANGEFROM = '' AND CRIT.ISTOOPEN = 0 THEN
                        '*..' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 1 AND CRIT.ISTOOPEN = 1 THEN
                        CRIT.RANGEFROM + '<..<' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 0 AND CRIT.ISTOOPEN = 1 THEN
                        CRIT.RANGEFROM + '..<' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 1 AND CRIT.ISTOOPEN = 0 THEN
                        CRIT.RANGEFROM + '<..' + CRIT.RANGETO
                    WHEN CRIT.RANGEFROM = CRIT.RANGETO THEN
                        CRIT.RANGEFROM
                    ELSE
                        CRIT.RANGEFROM + '..' + CRIT.RANGETO
                    END
                    FROM BUDGETGROUPMEMBERCRITERIA CRIT
                    WHERE CRIT.RECID = %1
                    FOR XML PATH(''), TYPE
                ).value('(./text())[1]', 'NVARCHAR(MAX)'),
                1, 1, '')",
            SysComputedColumn::returnField(tablestr(BudgetControlGroupCriterionEntity), dataEntityDataSourceStr(BudgetControlGroupCriterionEntity, BudgetGroupMemberCriteria), fieldstr(BudgetGroupMemberCriteria, RecId)));

        return criterionSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetControlGroupCriterionDimensionAttributeIdLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("DimensionAttributeId")]
    public static str lookupDimensionAttributeId(Array _fields)
    {
        List dimensionAttributeIds = new List(Types::String);

        BudgetControlConfiguration draftControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfigurationFromOfficeAppCustomLookupFields(
            tableStr(BudgetControlGroupCriterionEntity),
            fieldStr(BudgetControlGroupCriterionEntity, LegalEntityId),
            _fields);

        List dimensionAttributes = BudgetControlDimensionAttribute::getDimensionAttributes(draftControlConfiguration.RecId);
        ListEnumerator dimensionAttributeEnumerator = dimensionAttributes.getEnumerator();

        while (dimensionAttributeEnumerator.moveNext())
        {
            DimensionAttribute dimensionAttribute = dimensionAttributeEnumerator.current();
            dimensionAttributeIds.addEnd(dimensionAttribute.Name);
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(dimensionAttributeIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Remove the criteria from the draft budget group member.
        BudgetGroupMember draftGroupMember = this.getDraftBudgetGroupMember();
        BudgetControlGroupManager controlGroupManager = BudgetControlGroupManager::construct(draftGroupMember.RecId);

        DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(this.DimensionAttributeId);

        controlGroupManager.removeExpressionCriteria(dimensionAttribute.RecId);

        if (controlGroupManager.validate(false))
        {
            // The removal of the criteria will not validate for overlapping as the order of import and update may not be complete.
            // Activation of the budget control configuration will validate for overlapping criteria.
            controlGroupManager.save();

            this.reread();
        }
        else
        {
            // The validation will log errors, throw an exception to stop the delete.
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsertRecord</Name>
				<Source><![CDATA[
    private void upsertRecord()
    {
        ttsbegin;

        BudgetGroupMember draftGroupMember = this.getDraftBudgetGroupMember();

        if (!draftGroupMember)
        {
            throw error(strFmt("@SYS55265", this.MemberName, fieldId2PName(tableNum(BudgetControlGroupCriterionEntity), fieldNum(BudgetControlGroupCriterionEntity, MemberName)), tableStr(BudgetControlGroupEntity)));
        }

        DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(this.DimensionAttributeId);

        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        BudgetGroup budgetGroup;

        select firstonly RecId from controlDimensionAttribute
            exists join budgetGroup
                where budgetGroup.RecId == draftGroupMember.BudgetGroup
                    && budgetGroup.BudgetControlConfiguration == controlDimensionAttribute.BudgetControlConfiguration
            exists join budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
                    && budgetDimensionAttribute.DimensionAttribute == dimensionAttribute.RecId;

        if (!controlDimensionAttribute)
        {
            throw error(strFmt("@SYS55265", this.DimensionAttributeId, fieldId2PName(tableNum(BudgetControlGroupCriterionEntity), fieldNum(BudgetControlGroupCriterionEntity, DimensionAttributeId)), tableStr(BudgetControlDimensionAttribute)));
        }

        BudgetControlGroupManager controlGroupManager = BudgetControlGroupManager::construct(draftGroupMember.RecId);

        controlGroupManager.addExpressionCriteria(this.getExpressionCriteria(dimensionAttribute, this.Criterion));

        if (controlGroupManager.validate(false))
        {
            // The saving of the criteria will not validate for overlapping as the order of import and update may not be complete.
            // Activation of the budget control configuration will validate for overlapping criteria.
            controlGroupManager.save();

            // The entity keys and the company context field may not be correct for the changes or current context.
            // Set the entity instance to the saved data.
            BudgetControlGroupCriterionEntity entity;

            // Set the current company context to match the primary company context set on the entity.
            changecompany(this.LegalEntityId)
            {
                // Select the entity record based on the key.
                select * from entity
                    where entity.Status == BudgetControlConfigurationStatus::Draft
                        && entity.MemberName == this.MemberName
                        && entity.DimensionAttributeId == this.DimensionAttributeId;
            }

            this.data(entity);
        }
        else
        {
            // The validation will log errors, throw an exception to stop the update.
            throw Exception::Error;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftBudgetGroupMember</Name>
				<Source><![CDATA[
    private BudgetGroupMember getDraftBudgetGroupMember()
    {
        // Get the draft budget control configuration.
        BudgetControlConfiguration controlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

        // Select the group member for update.
        BudgetGroupMember draftGroupMember = BudgetGroupMember::findByBudgetControlConfigurationMemberName(controlConfiguration.RecId, this.MemberName, true);

        return draftGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCriteria</Name>
				<Source><![CDATA[
    private DimensionExpressionCriteria getExpressionCriteria(DimensionAttribute _dimensionAttribute, DimensionDisplayValue _criterionString)
    {
        DimensionExpressionCriteria expressionCriteria;

        DimensionExpressionCriteriaCollection criteriaCollection = DimensionExpressionCriteriaCollection::newForAttributeCriteriaText(
            _dimensionAttribute,
            _criterionString);

        if (criteriaCollection.elements() > 1)
        {
            throw error("@Budget:ControlGroupCriteriaDimensionCountError");
        }

        criteriaCollection.initializeEnumerator();

        if (criteriaCollection.moveNext())
        {
            expressionCriteria = criteriaCollection.current();
        }
        else
        {
            expressionCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                _dimensionAttribute.RecId,
                DimensionCriteriaOperators::WildcardSQL,
                '',
                '',
                false,
                false);
        }

        return expressionCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:ControlGroupCriterionEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@Budget:ControlGroupCriterionEntity</Label>
	<Tags>Budget control setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetControlGroupCriterionStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetControlGroupCriteria</PublicCollectionName>
	<PublicEntityName>BudgetControlGroupCriterion</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MemberName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Criterion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<DataField>LegalEntityId</DataField>
			<DataSource>BudgetControlGroupEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Status</DataField>
			<DataSource>BudgetControlGroupEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetControlGroupEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MemberName</Name>
			<DataField>MemberName</DataField>
			<DataSource>BudgetControlGroupEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlDimensionAttribute</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetControlDimensionAttribute</DataField>
			<DataSource>BudgetGroupMemberCriteria</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetGroupMember</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetGroupMember</DataField>
			<DataSource>BudgetGroupMemberCriteria</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAttributeId</Name>
			<DataField>Name</DataField>
			<DataSource>DimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Criterion</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:ControlGroupCriterion</Label>
			<ComputedFieldMethod>getCriterionSql</ComputedFieldMethod>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Status</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>MemberName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DimensionAttributeId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetControlGroupEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>BudgetControlGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetControlGroups</RelatedDataEntityRole>
			<Role>BudgetControlGroupCriterionGroup</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlGroupEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlGroupEntity_Status</Name>
					<Field>Status</Field>
					<RelatedField>Status</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlGroupEntity_MemberName</Name>
					<Field>MemberName</Field>
					<RelatedField>MemberName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetGroupMemberCriteria</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetGroupMemberCriteria</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetControlDimensionAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetControlDimensionAttribute</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetControlConfiguration</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetControlConfiguration</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>Ledger</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>Ledger</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<UseRelations>Yes</UseRelations>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>Ledger</Name>
												<JoinRelationName>Ledger</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetControlConfiguration</Name>
										<JoinRelationName>BudgetControlConfiguration</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPrimaryLedgerDimensionAttribute</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DimensionAttribute</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>DimensionAttribute</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>DimensionAttribute</Name>
												<JoinRelationName>DimensionAttribute</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>PrimaryLedger</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>Ledger</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>PrimaryLedger</Name>
												<JoinRelationName>Ledger</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
										<JoinRelationName>BudgetPrimaryLedgerDimensionAttribute</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetControlDimensionAttribute</Name>
								<JoinRelationName>BudgetControlDimensionAttribute</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetControlGroupEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetControlGroupEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetGroupMember</Field>
								<JoinDataSource>BudgetGroupMemberCriteria</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>