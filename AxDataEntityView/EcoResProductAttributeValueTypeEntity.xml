<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValueTypeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class EcoResProductAttributeValueTypeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(this.ValueType))
            {
                ret = checkFailed("@SCM:ReferenceTypeIsNotSupported");
            }

            ret = ret && this.validateBounds();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if ((_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResValueLower)
                || _dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResValueUpper))
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            this.initializeEcoResValue(_dataSourceCtx);
        }
        else
        {
            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (this.AttributeTypeBounded &&
                (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResValueLower)
                || _dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResValueUpper)))
        {
            this.mapEntityFieldsToEcoResValue(_dataSourceCtx);
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        this.skipDataSourceDbOperation(_entityCtx, _dataSourceCtx);

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        this.skipDataSourceDbOperation(_entityCtx, _dataSourceCtx);

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDataSourceDbOperation</Name>
				<Source><![CDATA[
    private void skipDataSourceDbOperation(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean skipDBOperation = false;

        if (_dataSourceCtx.name() != dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResAttributeType))
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueTypeEntity, EcoResAttributeTypeUnitOfMeasure))
            {
                if (AttributeDataTypeDiscriminator::checkAttributeDataTypeDecimal(this.ValueType) || AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(this.ValueType))
                {
                    if (!this.UnitSymbol)
                    {
                        skipDBOperation = true;
                    }
                }
                else
                {
                    skipDBOperation = true;
                }
            }
            else if (!this.AttributeTypeBounded)
            {
                //If IsBounded is No than we only need to create a record in EcoResAttributeType
                skipDBOperation = true;
            }

            if (skipDBOperation)
            {
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize attribute values table based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     Datasource context.
    /// </param>
    protected void initializeEcoResValue(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DictTable dictTable;
        switch (this.ValueType)
        {
            case AttributeDataType::Currency:
                dictTable = new DictTable(tableNum(EcoResCurrencyValue));
                break;

            case AttributeDataType::DateTime:
                dictTable = new DictTable(tableNum(EcoResDateTimeValue));
                break;

            case AttributeDataType::Decimal:
                dictTable = new DictTable(tableNum(EcoResFloatValue));
                break;

            case AttributeDataType::Integer:
                dictTable = new DictTable(tableNum(EcoResIntValue));
                break;

            case AttributeDataType::Text:
                dictTable = new DictTable(tableNum(EcoResTextValue));
                break;

            case AttributeDataType::TrueFalse:
                dictTable = new DictTable(tableNum(EcoResBooleanValue));
                break;
        }

        if (dictTable != null)
        {
            _dataSourceCtx.setBuffer(dictTable.makeRecord());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBounds</Name>
				<Source><![CDATA[
    protected boolean validateBounds()
    {
        boolean ret = true;
        this.populateFieldAttributeTypeBounded();

        if (this.AttributeTypeBounded)
        {
            switch (this.ValueType)
            {
                case AttributeDataType::Currency:
                if (this.LowerCurrencyValue > this.UpperCurrencyValue)
                    {
                        ret = false;
                    }
                    break;

                case AttributeDataType::DateTime:
                if (this.LowerDateTimeValue > this.UpperDateTimeValue)
                    {
                        ret = false;
                    }
                    break;

                case AttributeDataType::Decimal:
                if (this.LowerDecimalValue > this.UpperDecimalValue)
                    {
                        ret = false;
                    }
                    break;

                case AttributeDataType::Integer:
                if (this.LowerIntegerValue > this.UpperIntegerValue)
                    {
                        ret = false;
                    }
                    break;
            }
        }

        if (!ret)
        {
            ret = checkFailed("@SYS311293");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFieldAttributeTypeBounded</Name>
				<Source><![CDATA[
    protected void populateFieldAttributeTypeBounded()
    {
        switch (this.ValueType)
        {
            case AttributeDataType::Currency:
                if (this.LowerCurrencyValue || this.UpperCurrencyValue)
                {
                    this.AttributeTypeBounded = true;
                }
                break;

            case AttributeDataType::DateTime:
                if (this.LowerDateTimeValue || this.UpperDateTimeValue)
                {
                    this.AttributeTypeBounded  = true;
                }
                break;

            case AttributeDataType::Decimal:
                 if (this.LowerDecimalValue || this.UpperDecimalValue)
                {
                    this.AttributeTypeBounded  = true;
                }
                break;

            case AttributeDataType::Integer:
                if (this.LowerIntegerValue || this.UpperIntegerValue)
                {
                    this.AttributeTypeBounded  = true;
                }
                break;

            case AttributeDataType::Text:
            case AttributeDataType::TrueFalse:
                this.AttributeTypeBounded  = false;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityFieldsToEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Maps the entitiy fields based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     Data entity context.
    /// </param>
    protected void mapEntityFieldsToEcoResValue(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (this.ValueType)
        {
            case AttributeDataType::Currency:
                this.mapEntityFieldsToCurrencyValue(_dataSourceCtx);
                break;

            case AttributeDataType::Decimal:
                this.mapEntityFieldsToDecimalValue(_dataSourceCtx);
                break;

            case AttributeDataType::Integer:
                this.mapEntityFieldsToIntegerValue(_dataSourceCtx);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityFieldsToCurrencyValue</Name>
				<Source><![CDATA[
    private void mapEntityFieldsToCurrencyValue(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        EcoResCurrencyValue ecoResCurrencyValue = _dataSourceCtx.getBuffer();
        ecoResCurrencyValue.CurrencyCode = this.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityFieldsToDecimalValue</Name>
				<Source><![CDATA[
    private void mapEntityFieldsToDecimalValue(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        EcoResFloatValue ecoResFloatValue = _dataSourceCtx.getBuffer();
        ecoResFloatValue.FloatUnitOfMeasure = UnitOfMeasure::findBySymbol(this.UnitSymbol).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityFieldsToIntegerValue</Name>
				<Source><![CDATA[
    private void mapEntityFieldsToIntegerValue(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        EcoResIntValue ecoResIntValue = _dataSourceCtx.getBuffer();
        ecoResIntValue.IntUnitOfMeasure = UnitOfMeasure::findBySymbol(this.UnitSymbol).RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DevDocAttributeTypeValueEntity</DeveloperDocumentation>
	<FormRef>EcoResAttributeType</FormRef>
	<Label>@SCM:ValueBasedAttributeType</Label>
	<Tags>Attribute types</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductAttributeValueTypeStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductAttributeValueTypes</PublicCollectionName>
	<PublicEntityName>ProductAttributeValueType</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeTypeName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValueType</Name>
			<DataField>DataType</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitSymbol</Name>
			<Mandatory>No</Mandatory>
			<DataField>Symbol</DataField>
			<DataSource>UnitofMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResValueLower_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LowerCurrencyValue</Name>
			<Label>@SCM:CurrencyLowerValue</Label>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResValueLower_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UpperCurrencyValue</Name>
			<Label>@SCM:CurrencyUpperValue</Label>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResValueUpper_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LowerDateTimeValue</Name>
			<Label>@SCM:DateTimeLowerValue</Label>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResValueLower_EcoResDateTimeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UpperDateTimeValue</Name>
			<Label>@SCM:DateTimeUpperValue</Label>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResValueUpper_EcoResDateTimeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LowerDecimalValue</Name>
			<Label>@SCM:DecimalLowerValue</Label>
			<DataField>FloatValue</DataField>
			<DataSource>EcoResValueLower_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UpperDecimalValue</Name>
			<Label>@SCM:DecimalUpperValue</Label>
			<DataField>FloatValue</DataField>
			<DataSource>EcoResValueUpper_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LowerIntegerValue</Name>
			<Label>@SCM:IntegerLowerValue</Label>
			<DataField>IntValue</DataField>
			<DataSource>EcoResValueLower_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UpperIntegerValue</Name>
			<Label>@SCM:IntegerUpperValue</Label>
			<DataField>IntValue</DataField>
			<DataSource>EcoResValueUpper_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>AttributeTypeBounded</Name>
			<AccessModifier>Private</AccessModifier>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductAttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResAttributeType</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResAttributeType</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResBoundedAttributeTypeValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResBoundedAttributeTypeValue</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResValueLower</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResValue</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResCurrencyValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResCurrencyValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResDateTimeValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDateTimeValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResFloatValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResFloatValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResIntValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResIntValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResTextValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResTextValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueLower_EcoResBooleanValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResBooleanValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>LowerBoundValue</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResValueUpper</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResValue</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResBooleanValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResBooleanValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResCurrencyValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResCurrencyValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResDateTimeValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDateTimeValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResFloatValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResFloatValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResIntValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResIntValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResValueUpper_EcoResTextValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResTextValue</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>UpperBoundValue</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>AttributeType</Name>
								<JoinRelationName>AttributeType</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeTypeUnitOfMeasure</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResAttributeTypeUnitOfMeasure</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitofMeasure</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitofMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>UnitOfMeasure</Name>
										<JoinRelationName>UnitOfMeasure</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResAttributeType</Name>
								<JoinRelationName>EcoResAttributeType</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>IsEnumeration</Name>
						<Field>IsEnumeration</Field>
						<Status>Hidden</Status>
						<Value>No</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>DataType</Name>
						<Field>DataType</Field>
						<Status>Hidden</Status>
						<Value>!= Reference</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>IsHidden</Name>
						<Field>IsHidden</Field>
						<Status>Hidden</Status>
						<Value>No</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>