<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchPurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // The method super should not be called here, because method saveDataSources from the persister class will throw an exception when trying to resolve datasource.
        // super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEntityDataSource</Name>
				<Source><![CDATA[
    public boolean processEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(PurchPurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationEntity, PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView))
        { 
            WorkflowParticipantExpenToken       workflowParticipantExpenToken;
            WorkflowParticipantExpenTokenLine   workflowParticipantExpenTokenLine;
            CompanyInfo                         companyInfo;

            select firstonly forupdate workflowParticipantExpenTokenLine
                join workflowParticipantExpenToken
                    where workflowParticipantExpenTokenLine.Token               == workflowParticipantExpenToken.RecId
                       && workflowParticipantExpenToken.Name                    == this.PurchaseRequisitionExpenditureReviewerConfigurationName
                       && workflowParticipantExpenToken.ExpenditureDocumentType == WorkflowParticipantExpenDocumentType::PurchReq
                join companyInfo
                    where workflowParticipantExpenTokenLine.LegalEntity == companyInfo.RecId
                       && companyInfo.DataArea                          == this.LegalEntityId;
                           
            if (workflowParticipantExpenTokenLine.RecId)
            {
                DimensionAttributeSetStorage dimAttrSetStorage = this.loadAttributeSet(this.AccountingDistributionType == PurchaseRequisitionExpenditureReviewerProjectFinancialDimensionConfigurationView::distributionType() ? workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet : workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet);
                DimensionAttribute           dimensionAttribute = DimensionAttribute::findByName(this.FinancialDimensionName, true);

                if (dimensionAttribute)
                {
                    if (this.IsFinancialDimensionActive)
                    {
                        dimAttrSetStorage.addItem(dimensionAttribute.Recid, dimensionAttribute.HashKey, this.IsFinancialDimensionActive);
                    }
                    else
                    {
                        dimAttrSetStorage.removeDimensionAttribute(dimensionAttribute.Recid);
                    }
                }
                else
                {
                    throw error(strFmt("@SCM:TheFinancialDimensionAttributeDoesntExistsForTheLegalEntityWithDistributionType", this.FinancialDimensionName, this.LegalEntityId, this.AccountingDistributionType));
                }

                RecId dimAttrSetStorageRecId = dimAttrSetStorage.save();

                if (this.AccountingDistributionType == PurchaseRequisitionExpenditureReviewerProjectFinancialDimensionConfigurationView::distributionType())
                {
                    workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet = dimAttrSetStorageRecId;
                }
                else if (this.AccountingDistributionType == PurchaseRequisitionExpenditureReviewerOrgFinancialDimensionConfigurationView::distributionType())
                {
                    workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet = dimAttrSetStorageRecId;
                }
                else
                {
                    throw error(strFmt("@SCM:TheDistributionTypeIsIncorrectOrNotSupported", this.AccountingDistributionType));
                }

                workflowParticipantExpenTokenLine.update();

                this.RecId = workflowParticipantExpenTokenLine.RecId;
            }
            else
            {
                throw error("@SCM:InsertOperationsAreNotSupportedForTheEntity");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {         
        return this.processEntityDataSource(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {     
        return this.processEntityDataSource(_entityCtx, _dataSourceCtx); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAttributeSet</Name>
				<Source><![CDATA[
    private DimensionAttributeSetStorage loadAttributeSet(DimensionEnumeration _dimAttributeSetId)
    {
        DimensionAttributeSetStorage    dimAttrSetStorage = DimensionAttributeSetStorage::newForEnumName(enumstr(NoYes));

        if (_dimAttributeSetId)
        {                      
            DimensionAttributeSetItem dimAttrSetItem;

            // Populate a map with the persisted DimensionAttributeSetItem values.
            while select DimensionAttribute, EnumerationValue from dimAttrSetItem
                where dimAttrSetItem.DimensionAttributeSet == _dimAttributeSetId
            {
                DimensionAttribute dimAttr = DimensionAttribute::find(dimAttrSetItem.DimensionAttribute);

                dimAttrSetStorage.addItem(dimAttr.RecId, dimAttr.HashKey, dimAttrSetItem.EnumerationValue);
            }
        }

        return dimAttrSetStorage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SCM:PurchReqExpenditureReviewerFinancialDimensionConfigDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>PurchReqWorkflowParticipantExpenToken</FormRef>
	<Label>@SCM:PurchReqExpenditureReviewerFinancialDimensionConfigurationLabel</Label>
	<Tags>Purchase requisition</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PurchPurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationStaging</DataManagementStagingTable>
	<EntityCategory>Parameters</EntityCategory>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseRequisitionExpenditureReviewerConfigurationName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>Reviewer</DataField>
			<DataSource>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>LegalEntityId</DataField>
			<DataSource>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FinancialDimensionName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>FinancialDimensionName</DataField>
			<DataSource>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingDistributionType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>AccountingDistributionType</DataField>
			<DataSource>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsFinancialDimensionActive</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>FinancialDimensionActive</DataField>
			<DataSource>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PurchaseRequisitionExpenditureReviewerConfigurationName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FinancialDimensionName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountingDistributionType</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PurchaseRequisitionExpenditureReviewerFinancialDimensionConfigurationView</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>