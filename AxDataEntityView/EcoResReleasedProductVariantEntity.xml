<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>EcoResReleasedProductVariantEntity</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class EcoResReleasedProductVariantEntity extends common
{

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>productDimensionFieldId</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a product dimension.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>EcoResReleasedProductVariantEntity</c> table.</returns>
    private static FieldId productDimensionFieldId(InventProductDimension _inventProductDimension)
    {
        if (_inventProductDimension)
        {
            return _inventProductDimension.fieldIdInTable(tableStr(EcoResReleasedProductVariantEntity));
        }

        return 0;
    }

]]></Source>
      </Method>
      <Method>
        <Name>insertEntityDataSource</Name>
        <Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResReleasedProductVariantEntity, InventDimCombination):
                EcoResProductVariantEntity productVariantEntity = _entityCtx.getRuntimeContextByName(
                    dataEntityDataSourceStr(EcoResReleasedProductVariantEntity, EcoResProductVariantEntity)).getBuffer();

                this.releaseProductVariant(productVariantEntity);

                // re-initialize inventDimCombination buffer and mark it as saved.
                InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(productVariantEntity.RecId, true);
                if (this.isFieldSet(fieldNum(EcoResReleasedProductVariantEntity, ProductLifecycleStateId)))
                {
                    inventDimCombination.ProductLifecycleStateId = this.ProductLifecycleStateId;
                }
                inventDimCombination.update();
                _dataSourceCtx.setBuffer(inventDimCombination);
                _dataSourceCtx.setDataSaved(true);
                break;

            case dataEntityDataSourceStr(EcoResReleasedProductVariantEntity, EcoResProductVariantEntity):
                this.detectConflictForProductVariantEntityDatasource(_entityCtx, _dataSourceCtx);
                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>releaseProductVariant</Name>
        <Source><![CDATA[
    [Hookable, Wrappable]
    private void releaseProductVariant(EcoResProductVariantEntity _productVariantEntity)
    {
        EcoResDistinctProductVariant productVariant = EcoResDistinctProductVariant::find(_productVariantEntity.RecId);
        EcoResProductVariantReleaseManager releaseManager = EcoResProductReleaseManagerBase::newFromProduct(productVariant);
        releaseManager.parmSkipDistinctProductVariantValidation(true);
        releaseManager.release();
    }

]]></Source>
      </Method>
      <Method>
        <Name>mustUpdateSharedVariant</Name>
        <Source><![CDATA[
    private boolean mustUpdateSharedVariant(EcoResProductVariantEntity _variantEntity)
    {
        return (this.ProductName != _variantEntity.ProductName && this.isFieldSet(fieldNum(EcoResReleasedProductVariantEntity, ProductName)))
            || (this.ProductSearchName != _variantEntity.ProductSearchName && this.isFieldSet(fieldNum(EcoResReleasedProductVariantEntity, ProductSearchName)))
            || (this.ProductDescription != _variantEntity.ProductDescription && this.isFieldSet(fieldNum(EcoResReleasedProductVariantEntity, ProductDescription)));
    }

]]></Source>
      </Method>
      <Method>
        <Name>productDimensions</Name>
        <Source><![CDATA[
    private InventDim productDimensions()
    {
        InventDim inventDim;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId entityFieldId = EcoResReleasedProductVariantEntity::productDimensionFieldId(productDimension);

            if (entityFieldId)
            {
                FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
                inventDim.(inventDimFieldId) = this.(entityFieldId);
            }
        }
        return inventDim;
    }

]]></Source>
      </Method>
      <Method>
        <Name>findVariantEntityByProductDimensions</Name>
        <Source><![CDATA[
    private EcoResProductVariantEntity findVariantEntityByProductDimensions()
    {
        container productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(this.productDimensions());
            
        EcoResProductVariantEntity variantEntity;
        EcoResProductMaster productMaster = EcoResProduct::findByProductNumber(this.ProductMasterNumber);

        if (productMaster)
        {
            EcoResDistinctProductVariant variant = EcoResProductVariantManager::findDistinctProductVariant(productMaster.RecId, productDimensions);

            select firstonly variantEntity
                where variantEntity.RecId == variant.RecId;
        }

        return variantEntity;
    }

]]></Source>
      </Method>
      <Method>
        <Name>detectConflictForProductVariantEntityDatasource</Name>
        <Source><![CDATA[
    private void detectConflictForProductVariantEntityDatasource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        var variantEntity = this.findVariantEntityByProductDimensions();
        boolean mustUpdateSharedVariant = this.mustUpdateSharedVariant(variantEntity);
        _entityCtx.detectConflictForDatasource(_dataSourceCtx, variantEntity);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update && !mustUpdateSharedVariant)
        {
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            _dataSourceCtx.setDataSaved(true);
            this.mapDataSourceToEntity(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>mapDataSourceToEntity</Name>
        <Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResReleasedProductVariantEntity, EcoResProductVariantEntity))
        {
            EcoResProductVariantEntity productVariantEntity = _dataSourceCtx.getBuffer();
            this.ProductVariantNumber = productVariantEntity.ProductVariantNumber;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>jumpRefMethod</Name>
        <Source><![CDATA[
    /// <summary>
    /// Opens the Released product variant form based on the selected record in the staging table.
    /// </summary>
    /// <param name="_menuItemName">
    /// This name of the menu item to open.
    /// </param>
    /// <param name="_buffer">
    /// The staging record selected.
    /// </param>
    /// <param name="_caller">
    /// This caller.
    /// </param>
    /// <param name="_dataArea">
    /// The legal entity Id of the caller context.
    /// </param>
    public static void jumpRefMethod(MenuItemName _menuItemName, EcoResReleasedProductVariantStaging _buffer, object _caller, DataAreaId _dataArea)
    {
        changeCompany(_dataArea)
        {
            EcoResDistinctProductVariant distinctProductVariant = EcoResDistinctProductVariant::find(EcoResProduct::findByDisplayProductNumber(_buffer.ProductVariantNumber).RecId);

            Args args = new Args();
            args.record(distinctProductVariant);
            args.caller(_caller);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
            }
    }

]]></Source>
      </Method>
      <Method>
        <Name>defaultCTQuery</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query changeTrackingQuery = new Query();

        var inventDimCombinationDS = changeTrackingQuery.addDataSource(tableNum(InventDimCombination));

        var distinctProductVariantDS = inventDimCombinationDS.addDataSource(tableNum(EcoResDistinctProductVariant));
        distinctProductVariantDS.joinMode(JoinMode::InnerJoin);
        distinctProductVariantDS.fetchMode(QueryFetchMode::One2One);
        distinctProductVariantDS.relations(true);
        
        EcoResProductVariantEntity::addDataSourcesToCTQuery(distinctProductVariantDS);

        return changeTrackingQuery;
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
  <ConfigurationKey>LogisticsBasic</ConfigurationKey>
  <DeveloperDocumentation>@SCM:ReleasedProductVariantEntityDevDoc</DeveloperDocumentation>
  <IsObsolete>Yes</IsObsolete>
  <FormRef>EcoResProductVariantsPerCompany</FormRef>
  <Label>@SYS320706</Label>
  <Tags>Released Products</Tags>
  <DataManagementEnabled>Yes</DataManagementEnabled>
  <DataManagementStagingTable>EcoResReleasedProductVariantStaging</DataManagementStagingTable>
  <IsPublic>Yes</IsPublic>
  <Modules>ProductInformationManagement</Modules>
  <PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
  <PrimaryKey>DimensionBasedKey</PrimaryKey>
  <PublicCollectionName>ReleasedProductVariants</PublicCollectionName>
  <PublicEntityName>ReleasedProductVariant</PublicEntityName>
  <DeleteActions />
  <FieldGroups>
    <AxTableFieldGroup>
      <Name>AutoReport</Name>
      <Fields />
    </AxTableFieldGroup>
    <AxTableFieldGroup>
      <Name>AutoLookup</Name>
      <Fields />
    </AxTableFieldGroup>
    <AxTableFieldGroup>
      <Name>AutoIdentification</Name>
      <AutoPopulate>Yes</AutoPopulate>
      <Fields />
    </AxTableFieldGroup>
    <AxTableFieldGroup>
      <Name>AutoSummary</Name>
      <Fields />
    </AxTableFieldGroup>
    <AxTableFieldGroup>
      <Name>AutoBrowse</Name>
      <Fields />
    </AxTableFieldGroup>
  </FieldGroups>
  <Fields>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ItemNumber</Name>
      <DataField>ItemId</DataField>
      <DataSource>InventDimCombination</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductMasterNumber</Name>
      <DataField>ProductMasterNumber</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductVariantNumber</Name>
      <AllowEdit>No</AllowEdit>
      <AllowEditOnCreate>No</AllowEditOnCreate>
      <DataField>ProductVariantNumber</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductName</Name>
      <DataField>ProductName</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductSearchName</Name>
      <DataField>ProductSearchName</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductDescription</Name>
      <DataField>ProductDescription</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductConfigurationId</Name>
      <AllowEdit>No</AllowEdit>
      <Mandatory>No</Mandatory>
      <DataField>ProductConfigurationId</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductSizeId</Name>
      <AllowEdit>No</AllowEdit>
      <Mandatory>No</Mandatory>
      <DataField>ProductSizeId</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductColorId</Name>
      <AllowEdit>No</AllowEdit>
      <Mandatory>No</Mandatory>
      <DataField>ProductColorId</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductStyleId</Name>
      <AllowEdit>No</AllowEdit>
      <Mandatory>No</Mandatory>
      <DataField>ProductStyleId</DataField>
      <DataSource>EcoResProductVariantEntity</DataSource>
    </AxDataEntityViewField>
    <AxDataEntityViewField xmlns="" i:type="AxDataEntityViewMappedField">
      <Name>ProductLifecycleStateId</Name>
      <AllowEdit>Yes</AllowEdit>
      <AllowEditOnCreate>Yes</AllowEditOnCreate>
      <Mandatory>No</Mandatory>
      <DataField>ProductLifecycleStateId</DataField>
      <DataSource>InventDimCombination</DataSource>
    </AxDataEntityViewField>
  </Fields>
  <Keys>
    <AxDataEntityViewKey>
      <Name>DimensionBasedKey</Name>
      <Fields>
        <AxDataEntityViewKeyField>
          <DataField>ProductMasterNumber</DataField>
        </AxDataEntityViewKeyField>
        <AxDataEntityViewKeyField>
          <DataField>ProductConfigurationId</DataField>
        </AxDataEntityViewKeyField>
        <AxDataEntityViewKeyField>
          <DataField>ProductSizeId</DataField>
        </AxDataEntityViewKeyField>
        <AxDataEntityViewKeyField>
          <DataField>ProductColorId</DataField>
        </AxDataEntityViewKeyField>
        <AxDataEntityViewKeyField>
          <DataField>ProductStyleId</DataField>
        </AxDataEntityViewKeyField>
      </Fields>
    </AxDataEntityViewKey>
    <AxDataEntityViewKey>
      <Name>DistinctProductVariantKey</Name>
      <Fields>
        <AxDataEntityViewKeyField>
          <DataField>ProductVariantNumber</DataField>
        </AxDataEntityViewKeyField>
      </Fields>
    </AxDataEntityViewKey>
  </Keys>
  <Mappings />
  <Ranges />
  <Relations>
    <AxDataEntityViewRelation xmlns="" i:type="AxDataEntityViewRelationForeignKey">
      <Name>ProductVariant</Name>
      <Cardinality>ZeroMore</Cardinality>
      <RelatedDataEntity>EcoResProductVariantEntity</RelatedDataEntity>
      <RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
      <RelationshipType>Association</RelationshipType>
      <Validate>No</Validate>
      <Constraints>
        <AxDataEntityViewRelationConstraint xmlns="" i:type="AxDataEntityViewRelationConstraintField">
          <Name>RelationConstraintField1</Name>
          <Field>ProductVariantNumber</Field>
          <RelatedField>ProductVariantNumber</RelatedField>
        </AxDataEntityViewRelationConstraint>
      </Constraints>
    </AxDataEntityViewRelation>
    <AxDataEntityViewRelation xmlns="" i:type="AxDataEntityViewRelationForeignKey">
      <Name>ProductMaster</Name>
      <Cardinality>ZeroMore</Cardinality>
      <RelatedDataEntity>EcoResProductMasterEntity</RelatedDataEntity>
      <RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
      <RelationshipType>Association</RelationshipType>
      <Validate>No</Validate>
      <Constraints>
        <AxDataEntityViewRelationConstraint xmlns="" i:type="AxDataEntityViewRelationConstraintField">
          <Name>RelationConstraintField1</Name>
          <Field>ProductMasterNumber</Field>
          <RelatedField>ProductNumber</RelatedField>
        </AxDataEntityViewRelationConstraint>
      </Constraints>
    </AxDataEntityViewRelation>
    <AxDataEntityViewRelation xmlns="" i:type="AxDataEntityViewRelationForeignKey">
      <Name>ReleasedProductMaster</Name>
      <Cardinality>ZeroMore</Cardinality>
      <RelatedDataEntity>EcoResReleasedProductMasterEntity</RelatedDataEntity>
      <RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
      <RelationshipType>Composition</RelationshipType>
      <Validate>No</Validate>
      <Constraints>
        <AxDataEntityViewRelationConstraint xmlns="" i:type="AxDataEntityViewRelationConstraintField">
          <Name>RelationConstraintField1</Name>
          <Field>ItemNumber</Field>
          <RelatedField>ItemNumber</RelatedField>
        </AxDataEntityViewRelationConstraint>
      </Constraints>
    </AxDataEntityViewRelation>
    <AxDataEntityViewRelation xmlns="" i:type="AxDataEntityViewRelationForeignKey">
      <Name>ReleasedProductMasterV2</Name>
      <Cardinality>ZeroMore</Cardinality>
      <RelatedDataEntity>EcoResReleasedProductMasterV2Entity</RelatedDataEntity>
      <RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
      <RelationshipType>Composition</RelationshipType>
      <Validate>No</Validate>
      <Constraints>
        <AxDataEntityViewRelationConstraint xmlns="" i:type="AxDataEntityViewRelationConstraintField">
          <Name>RelationConstraintField1</Name>
          <Field>ItemNumber</Field>
          <RelatedField>ItemNumber</RelatedField>
        </AxDataEntityViewRelationConstraint>
      </Constraints>
    </AxDataEntityViewRelation>
    <AxDataEntityViewRelation xmlns="" i:type="AxDataEntityViewRelationForeignKey">
      <Name>ProductLifecycleState</Name>
      <Cardinality>ZeroMore</Cardinality>
      <RelatedDataEntity>EcoResProductLifecycleStateEntity</RelatedDataEntity>
      <RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
      <RelatedDataEntityRole>ProductLifecycleState</RelatedDataEntityRole>
      <RelationshipType>Association</RelationshipType>
      <Role>ReleasedProductVariants</Role>
      <UseDefaultRoleNames>No</UseDefaultRoleNames>
      <Validate>No</Validate>
      <Constraints>
        <AxDataEntityViewRelationConstraint xmlns="" i:type="AxDataEntityViewRelationConstraintField">
          <Name>RelationConstraintField1</Name>
          <Field>ProductLifecycleStateId</Field>
          <RelatedField>LifecycleStateId</RelatedField>
        </AxDataEntityViewRelationConstraint>
      </Constraints>
    </AxDataEntityViewRelation>
  </Relations>
  <StateMachines />
  <ViewMetadata>
    <Name>Metadata</Name>
    <SourceCode>
      <Methods>
        <Method>
          <Name>classDeclaration</Name>
          <Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
        </Method>
      </Methods>
    </SourceCode>
    <DataSources>
      <AxQuerySimpleRootDataSource>
        <Name>InventDimCombination</Name>
        <DynamicFields>Yes</DynamicFields>
        <Table>InventDimCombination</Table>
        <DataSources>
          <AxQuerySimpleEmbeddedDataSource>
            <Name>EcoResProductVariantEntity</Name>
            <DynamicFields>Yes</DynamicFields>
            <Table>EcoResProductVariantEntity</Table>
            <DataSources />
            <DerivedDataSources />
            <Fields />
            <Ranges />
            <Relations>
              <AxQuerySimpleDataSourceRelation>
                <Name>QueryDataSourceRelation1</Name>
                <Field>DistinctProductVariant</Field>
                <JoinDataSource>InventDimCombination</JoinDataSource>
                <RelatedField>RecId</RelatedField>
              </AxQuerySimpleDataSourceRelation>
            </Relations>
          </AxQuerySimpleEmbeddedDataSource>
        </DataSources>
        <DerivedDataSources />
        <Fields />
        <Ranges />
        <GroupBy />
        <Having />
        <OrderBy />
      </AxQuerySimpleRootDataSource>
    </DataSources>
  </ViewMetadata>
</AxDataEntityView>