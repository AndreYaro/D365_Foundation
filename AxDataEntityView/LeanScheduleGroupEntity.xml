<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanScheduleGroupEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanScheduleGroupEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jump ref method for target record
    /// </summary>
    public static void jumpRefMethod(str _menuItemName, LeanScheduleGroupStaging _stagingBuffer, Object _callerObj, DataAreaId _dataAreaId)
    {
        changeCompany(_dataAreaId)
        {
            WrkCtrResourceGroup workCellRecord = WrkCtrResourceGroup::findWrkCtrId(_stagingBuffer.WorkCellOperationsResourceGroupId);
            var record = LeanScheduleGroup::findByNameAndWorkCell(_stagingBuffer.GroupId, workCellRecord.RecId);

            Args args = new Args();
            args.record(record);
            args.lookupRecord(record);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleColorConvertHexToInteger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data entity view method for computed column exposing the schedule Color
    /// </summary>
    private static str scheduleColorConvertHexToInteger()
    {
        EntityName entityName = tablestr(LeanScheduleGroupEntity);
        str datasourceName = dataEntityDataSourceStr(LeanScheduleGroupEntity, LeanScheduleGroup);
        FieldName fieldName = fieldStr(LeanScheduleGroup, Color);

        str fieldExpression = SysComputedColumn::returnField(entityName, datasourceName, fieldName);

        // Convert for varbinary requires the expression to be an even number of digits.
        // REPLICATE adds leading zeros to expression to ensure the hex expression has 6 digits
        return strFmt('CONVERT(INT, CONVERT(VARBINARY, REPLICATE(\'0\',6-LEN(%1)) + %1, 2))', fieldExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workCellOperationsResourceGroupIdConvertNullValueToEmptyString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Data entity view method for computed column exposing the Work cell field value
    /// </summary>
    /// <remarks>
    /// Work cell is part of the entity key. Field is implemented as computed column because import will otherwise fail
    /// to find an existing record using a null value
    /// </remarks>
    private static str workCellOperationsResourceGroupIdConvertNullValueToEmptyString()
    {
        EntityName entityName = tablestr(LeanScheduleGroupEntity);
        str datasourceName = dataEntityDataSourceStr(LeanScheduleGroupEntity, WrkCtrResourceGroup);
        FieldName fieldName = fieldStr(WrkCtrResourceGroup, WrkCtrId);

        str fieldExpression = SysComputedColumn::returnField(entityName, datasourceName, fieldName);

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(fieldExpression),
            SysComputedColumn::returnLiteral(''),
            fieldExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //  [fields that the default values depends on]]

            [fieldNum(LeanScheduleGroupEntity, NullableWorkCellOperationsResourceGroupId),
                [fieldNum(LeanScheduleGroupEntity, WorkCellOperationsResourceGroupId)]],

            [fieldNum(LeanScheduleGroupEntity, ScheduleColor),
                [fieldNum(LeanScheduleGroupEntity, ScheduleIntegerRGBColor)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LeanScheduleGroupEntity, NullableWorkCellOperationsResourceGroupId):
                if (this.isFieldSet(fieldNum(LeanScheduleGroupEntity, WorkCellOperationsResourceGroupId)))
                {
                    this.NullableWorkCellOperationsResourceGroupId = this.WorkCellOperationsResourceGroupId;
                }
            break;

            case fieldNum(LeanScheduleGroupEntity, ScheduleColor):
                if (this.isFieldSet(fieldNum(LeanScheduleGroupEntity, ScheduleIntegerRGBColor)))
                {
                    if (this.ScheduleIntegerRGBColor)
                    {
                        this.ScheduleColor = int2Hex(this.ScheduleIntegerRGBColor);
                    }
                    else
                    {
                        this.ScheduleColor = LeanScheduleGroup::defaultColor();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SCM:LeanScheduleGroupEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>LeanScheduleGroup</FormRef>
	<Label>@SYS132034</Label>
	<Tags>Lean</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LeanScheduleGroupStaging</DataManagementStagingTable>
	<Modules>MasterPlanning</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ScheduleColor</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Color</DataField>
			<DataSource>LeanScheduleGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ScheduleIntegerRGBColor</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>scheduleColorConvertHexToInteger</ComputedFieldMethod>
			<ExtendedDataType>OLE_Color</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GroupId</Name>
			<DataField>Name</DataField>
			<DataSource>LeanScheduleGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkCellOperationsResourceGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkCell</DataField>
			<DataSource>LeanScheduleGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NullableWorkCellOperationsResourceGroupId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WrkCtrId</DataField>
			<DataSource>WrkCtrResourceGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>WorkCellOperationsResourceGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>workCellOperationsResourceGroupIdConvertNullValueToEmptyString</ComputedFieldMethod>
			<ExtendedDataType>WrkCtrGroupId</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>GroupId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>WorkCellOperationsResourceGroupId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LeanScheduleGroup</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LeanScheduleGroup</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WrkCtrResourceGroup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>WrkCtrResourceGroup</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>WrkCtrResourceGroup</Name>
								<JoinRelationName>WorkCell</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>