<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductVariantEntity extends common
{
    #InventDimDevelop

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productDimensionDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of a product dimension datasource.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>The name of the product dimension's datasource.</returns>
    [Hookable, Wrappable]
    private static str productDimensionDataSourceName(InventProductDimension _inventProductDimension)
    {
        switch (true)
        {
            case _inventProductDimension is InventProductDimensionConfig:
                return dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantConfiguration);
            case _inventProductDimension is InventProductDimensionColor:
                return dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantColor);
            case _inventProductDimension is InventProductDimensionStyle:
                return dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantStyle);            
            case _inventProductDimension is InventProductDimensionSize:
                return dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantSize);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a product dimension.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>EcoResProductVariantEntity</c> table.</returns>
    [Hookable, Wrappable]
    private static FieldId productDimensionFieldId(InventProductDimension _inventProductDimension)
    {
        switch (true)
        {
            case _inventProductDimension is InventProductDimensionConfig:
                return fieldNum(EcoResProductVariantEntity, ProductConfigurationId);
            case _inventProductDimension is InventProductDimensionColor:
                return fieldNum(EcoResProductVariantEntity, ProductColorId);
            case _inventProductDimension is InventProductDimensionStyle:
                return fieldNum(EcoResProductVariantEntity, ProductStyleId);            
            case _inventProductDimension is InventProductDimensionSize:
                return fieldNum(EcoResProductVariantEntity, ProductSizeId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>internalDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for an internal product dimension.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>EcoResProductVariantEntity</c> table.</returns>
    [Hookable, Wrappable]
    private static FieldId internalDimensionFieldId(InventProductDimension _inventProductDimension)
    {
        switch (true)
        {
            case _inventProductDimension is InventProductDimensionConfig:
                return fieldNum(EcoResProductVariantEntity, InternalConfigurationId);
            case _inventProductDimension is InventProductDimensionColor:
                return fieldNum(EcoResProductVariantEntity, InternalColorId);
            case _inventProductDimension is InventProductDimensionStyle:
                return fieldNum(EcoResProductVariantEntity, InternalStyleId);            
            case _inventProductDimension is InventProductDimensionSize:
                return fieldNum(EcoResProductVariantEntity, InternalSizeId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionAttributeFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a product dimension attribute.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>EcoResProductVariantEntity</c> table.</returns>
    [Hookable, Wrappable]
    private static FieldId productDimensionAttributeFieldId(InventProductDimension _inventProductDimension)
    {
        switch (true)
        {
            case _inventProductDimension is InventProductDimensionConfig:
                return fieldNum(EcoResProductVariantEntity, ConfigurationProductDimensionAttributeRecId);
            case _inventProductDimension is InventProductDimensionColor:
                return fieldNum(EcoResProductVariantEntity, ColorProductDimensionAttributeRecId);
            case _inventProductDimension is InventProductDimensionStyle:
                return fieldNum(EcoResProductVariantEntity, StyleProductDimensionAttributeRecId);            
            case _inventProductDimension is InventProductDimensionSize:
                return fieldNum(EcoResProductVariantEntity, SizeProductDimensionAttributeRecId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId productDimAttrFieldId = EcoResProductVariantEntity::productDimensionAttributeFieldId(productDimension);

            if (productDimAttrFieldId)
            {
                this.(productDimAttrFieldId) = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(productDimension.parmInventDimFieldId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        return ret && this.validateProductDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret = super(_entityCtx, _dataSourceCtx);

        if (ret.RecId == 0 
            && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update
            && _dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResDistinctProductVariant))
        {
            return this.findVariantByProductDimensions();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);


        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductTranslation):
                EcoResProductTranslation ecoResProductTranslation = _dataSourceCtx.getBuffer();
                ecoResProductTranslation.setDefaultLanguage();
                break;

            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductMaster):
                this.validateUniqueProductVariant(_entityCtx);
                EcoResProductMaster ecoResProductMaster = EcoResProduct::findByProductNumber(this.ProductMasterNumber) as EcoResProductMaster;

                EcoResProductVariantsFormHelper variantHelper = EcoResProductVariantsSystemHelper::construct();
                variantHelper.parmEcoResProductMaster(ecoResProductMaster);

                this.mapFieldsForProductVariant(_entityCtx, variantHelper);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.skipDataSourceDbOperation(_entityCtx, _dataSourceCtx);

        if (this.RecId)
        {
            Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                InventProductDimension productDimension = enum.current() as InventProductDimension;
                if (_dataSourceCtx.name() == EcoResProductVariantEntity::productDimensionDataSourceName(productDimension) &&
                    _dataSourceCtx.getDatabaseOperation() != DataEntityDatabaseOperation::None)
                {
                    this.detectConflictForDataSource(_entityCtx, _dataSourceCtx);
                }
                break;
            }
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.skipDataSourceDbOperation(_entityCtx, _dataSourceCtx);
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        //The values are copied from the unmapped field to mapped field

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId productDimFieldId = EcoResProductVariantEntity::productDimensionFieldId(productDimension);
            FieldId internalDimFieldId = EcoResProductVariantEntity::internalDimensionFieldId(productDimension);

            if (productDimFieldId && internalDimFieldId)
            {
                this.(internalDimFieldId) = this.(productDimFieldId);
            }
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the Product variant form based on the selected record in the staging table.
    /// </summary>
    /// <param name="_menuItemName">
    /// This name of the menu item to open.
    /// </param>
    /// <param name="_buffer">
    /// The staging record selected.
    /// </param>
    /// <param name="_caller">
    /// This caller.
    /// </param>
    /// <param name="_dataArea">
    /// The legal entity Id of the caller context.
    /// </param>
    public static void jumpRefMethod(MenuItemName _menuItemName, EcoResProductVariantStaging _buffer, object _caller, DataAreaId _dataArea)
    {
        changeCompany(_dataArea)
        {
            EcoResProductMaster productMaster = EcoResProductMaster::find(EcoResProduct::findByDisplayProductNumber(_buffer.ProductMasterNumber).RecId);

            Args args = new Args();
            args.record(productMaster);
            args.caller(_caller);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapFieldsForProductVariant</Name>
				<Source><![CDATA[
    private void mapFieldsForProductVariant(DataEntityRuntimeContext _entityCtx, EcoResProductVariantsFormHelper _ecoResProductVariantsFormHelper)
    {
        DataEntityDataSourceRuntimeContext dataSourceCtx = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResDistinctProductVariant));

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation ::Insert)
        {
            EcoResDistinctProductVariant ecoResDistintProductVariant = dataSourceCtx.getBuffer();

            _ecoResProductVariantsFormHelper.initFromProductMaster(ecoResDistintProductVariant);
            
            if (!this.ProductVariantNumber)
            {
                this.ProductVariantNumber = this.getVariantProductNumber();
            }
            ecoResDistintProductVariant.DisplayProductNumber = this.ProductVariantNumber;

            if (!ecoResDistintProductVariant.SearchName)
            {
                ecoResDistintProductVariant.setSearchName(this.ProductName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensions</Name>
				<Source><![CDATA[
    private InventDim productDimensions()
    {
        InventDim inventDim;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId entityFieldId = EcoResProductVariantEntity::productDimensionFieldId(productDimension);

            if (entityFieldId)
            {
                FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
                inventDim.(inventDimFieldId) = this.(entityFieldId);
            }
        }
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariantProductNumber</Name>
				<Source><![CDATA[
    private EcoResProductDisplayProductNumber getVariantProductNumber()
    {
        container productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(this.productDimensions());

        EcoResProductMaster productMaster = EcoResProduct::findByProductNumber(this.ProductMasterNumber);

        return EcoResProductNumberBuilderVariant::buildFromProductMasterAndDimensions(productMaster, productDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimensions</Name>
				<Source><![CDATA[
    private boolean validateProductDimensions()
    {
        EcoResProductMaster ecoResProductMaster = EcoResProduct::findByProductNumber(this.ProductMasterNumber) as EcoResProductMaster;

        EcoResProductVariantsFormHelper variantHelper = EcoResProductVariantsSystemHelper::construct();
        variantHelper.parmEcoResProductMaster(ecoResProductMaster);

        boolean ret = true;
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId entityDimFieldId = EcoResProductVariantEntity::productDimensionFieldId(productDimension);
            if (entityDimFieldId)
            {
                boolean dimIsNeeded = variantHelper.productDimensionActive(productDimension.parmInventDimFieldId());
                ret = ret && this.validateDimension(this.(entityDimFieldId), dimIsNeeded, productDimension.label());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimension</Name>
				<Source><![CDATA[
    private boolean validateDimension(anytype _dimensionValue, boolean _dimensionNeeded, str _dimensionLabel)
    {
        boolean ret = true;
        if (_dimensionValue && !_dimensionNeeded)
        {
            ret = checkFailed(strFmt("@SCM:ErrorProductDimensionNotActive", _dimensionLabel));
        }
        else if (!_dimensionValue && _dimensionNeeded)
        {
            ret = checkFailed(strFmt("@SCM:ErrorProductDimensionNotFilled", _dimensionLabel));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDataSourceDbOperation</Name>
				<Source><![CDATA[
    private void skipDataSourceDbOperation(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean skipDatabaseOperation = false;

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;

            if (_dataSourceCtx.name() == EcoResProductVariantEntity::productDimensionDataSourceName(productDimension))
            {
                FieldId productDimFieldId = EcoResProductVariantEntity::productDimensionFieldId(productDimension);
                if (productDimFieldId &&
                    !this.(productDimFieldId))
                {
                    skipDatabaseOperation = true;
                }
                break;
            }
        }
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductTranslation):
                if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                    && !this.ProductName && !this.ProductDescription)
                {
                    skipDatabaseOperation = true;
                }
                break;
        }

        if (skipDatabaseOperation)
        {
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVariantByProductDimensions</Name>
				<Source><![CDATA[
    private EcoResDistinctProductVariant findVariantByProductDimensions()
    {
        container productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(this.productDimensions());

        EcoResProductMaster productMaster = EcoResProduct::findByProductNumber(this.ProductMasterNumber);
        return EcoResProductVariantManager::findDistinctProductVariant(productMaster.RecId, productDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUniqueProductVariant</Name>
				<Source><![CDATA[
    private void validateUniqueProductVariant(DataEntityRuntimeContext _entityCtx)
    {         
        if (!this.skipDataSourceValidateWrite() 
            && !this.isEntityInDataManagementContext() // If the entity is being imported using data management and variant with the specified dimensions already exists then the database operation will be update
            && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert 
            && !this.skipDataSourceValidateWrite())
        {
            boolean mustValidateDimFields = false;
            Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
            while (enum.moveNext())
            {
                InventProductDimension productDimension = enum.current() as InventProductDimension;
                FieldId productDimFieldId = EcoResProductVariantEntity::productDimensionFieldId(productDimension);
                if (productDimFieldId &&
                    !this.skipDataSourceValidateField(productDimFieldId))
                {
                    mustValidateDimFields = true;
                }
            }

            if (mustValidateDimFields &&
                this.findVariantByProductDimensions().RecId)
            {
                throw error("@SYS133839");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectConflictForDataSource</Name>
				<Source><![CDATA[
    private Common detectConflictForDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        _dataSourceCtx.conflictDetectionInvoked(true);

        Common matchingRecord = this.findDataSource(_entityCtx, _dataSourceCtx);

        if (matchingRecord)
        {
            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                // change the operation to Update to avoid duplicated key exception
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
            }
            _dataSourceCtx.setBuffer(matchingRecord);
            this.mapDataSourceToEntity(_entityCtx, _dataSourceCtx);
        }
        return matchingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the data source.
    /// </summary>
    /// <param name = "_entityCtx">The runtime context.</param>
    /// <param name = "_dataSourceCtx">The datasource context.</param>
    /// <returns>The data source's record.</returns>
    protected Common findDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common returnRecord;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantConfiguration):
                EcoResProductVariantConfiguration productVariantConfiguration = EcoResProductVariantConfiguration::find(this.RecId, this.ConfigurationProductDimensionAttributeRecId);
                productVariantConfiguration.Configuration = EcoResConfiguration::findByName(this.ProductConfigurationId).RecId;
                return productVariantConfiguration;

            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantSize):
                EcoResProductVariantSize productVariantSize = EcoResProductVariantSize::find(this.RecId, this.SizeProductDimensionAttributeRecId);
                productVariantSize.Size = EcoResSize::findByName(this.ProductSizeId).RecId;
                return productVariantSize;

            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantColor):
                EcoResProductVariantColor productVariantColor = EcoResProductVariantColor::find(this.RecId, this.ColorProductDimensionAttributeRecId);
                productVariantColor.Color = EcoResColor::findByName(this.ProductColorId).RecId;
                return productVariantColor;

            case dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantStyle):
                EcoResProductVariantStyle productVariantStyle = EcoResProductVariantStyle::find(this.RecId, this.StyleProductDimensionAttributeRecId);
                productVariantStyle.Style = EcoResStyle::findByName(this.ProductStyleId).RecId;
                return productVariantStyle;
        }

        return returnRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationIdDefinition</Name>
				<Source><![CDATA[
    private static str configurationIdDefinition()
    {
        return EcoResProductVariantEntity::computedColumnDefinationConvertNullValueToEmptyString(
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantConfiguration),
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResConfiguration),
            fieldStr(EcoResConfiguration, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sizeIdDefinition</Name>
				<Source><![CDATA[
    private static str sizeIdDefinition()
    {
        return EcoResProductVariantEntity::computedColumnDefinationConvertNullValueToEmptyString(
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantSize),
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResSize),
            fieldStr(EcoResSize, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>colorIdDefinition</Name>
				<Source><![CDATA[
    private static str colorIdDefinition()
    {
        return EcoResProductVariantEntity::computedColumnDefinationConvertNullValueToEmptyString(
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantColor),
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResColor),
            fieldStr(EcoResColor, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>styleIdDefinition</Name>
				<Source><![CDATA[
    private static str styleIdDefinition()
    {
        return EcoResProductVariantEntity::computedColumnDefinationConvertNullValueToEmptyString(
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResProductVariantStyle),
            dataEntityDataSourceStr(EcoResProductVariantEntity, EcoResStyle),
            fieldStr(EcoResStyle, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedColumnDefinationConvertNullValueToEmptyString</Name>
				<Source><![CDATA[
    private static str computedColumnDefinationConvertNullValueToEmptyString(DataSourceName _checkDataSourceName, DataSourceName _displayDataSource,  FieldName _displayFieldName)
    {
        const EntityName entityName = tablestr(EcoResProductVariantEntity);
        const FieldName recIdFieldName = fieldStr(Common, RecId);

        SysDictField sysDictRecIdField = new SysDictField(
            tableName2id(_checkDataSourceName),
            fieldName2id(tableName2id(_checkDataSourceName), recIdFieldName));

        str recIdFieldExpression = SysComputedColumn::returnField(
            entityName,
            _checkDataSourceName,
            sysDictRecIdField.name());

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(recIdFieldExpression),
            SysComputedColumn::returnLiteral(''),
            SysComputedColumn::returnField(entityName, _displayDataSource, _displayFieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static EcoResProductVariantEntity find(
        EcoResProductDisplayProductNumber _productProductMasterNumber,
        EcoResConfigurationName _config,
        EcoResSizeName _size,
        EcoResColorName _color,
        EcoResStyleName _style,
        boolean _forUpdate = false)
    {
        EcoResProductVariantEntity ecoResProductVariantEntity;

        if (_productProductMasterNumber)
        {
            ecoResProductVariantEntity.selectForUpdate(_forUpdate);

            select firstonly ecoResProductVariantEntity
                where ecoResProductVariantEntity.ProductMasterNumber == _productProductMasterNumber
                    && ecoResProductVariantEntity.ProductConfigurationId == _config
                    && ecoResProductVariantEntity.ProductSizeId == _size
                    && ecoResProductVariantEntity.ProductStyleId == _style
                    && ecoResProductVariantEntity.ProductColorId == _color;
        }
        return ecoResProductVariantEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query changeTrackingQuery = new Query();

        // Only the EcoResDistinctProductVariant and EcoResProductTranslation/SystemParameters tables need to be tracked for changes
        // The other datasources cannot change for product variants
        var distinctProductVariantDS = changeTrackingQuery.addDataSource(tableNum(EcoResDistinctProductVariant));
        EcoResProductEntityChangeTrackingHelper::addProductTranslationBasedOnProductRecIdAndPartitionLink(distinctProductVariantDS, fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResDistinctProductVariant, Partition));

        return changeTrackingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourcesToCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds change tracking for related data sources.
    /// </summary>
    /// <param name = "_distinctProductVariantDS">The <c>EcoResDistinctProductVariant</c> data source instance.</param>
    public static void addDataSourcesToCTQuery(QueryBuildDataSource _distinctProductVariantDS)
    {
        if (_distinctProductVariantDS)
        {
            var distinctProductDS = EcoResProductEntityChangeTrackingHelper::addLinkEcoResDistinctProductLinkBasedOnProductRecId(_distinctProductVariantDS, fieldNum(EcoResDistinctProductVariant, RecId));
            var productDS = EcoResProductEntityChangeTrackingHelper::addLinkEcoResProductLinkBasedOnProductRecId(distinctProductDS, fieldNum(EcoResDistinctProduct, RecId));

            // Skip EcoResProductMaster - read-only and only use DisplayProductNumber which cannot change
        
            var productVariantDimensionValueDS = EcoResProductEntityChangeTrackingHelper::addLinkEcoResProductVariantDimensionValueLinkBasedOnVariantProductRecId(_distinctProductVariantDS, fieldNum(EcoResDistinctProductVariant, RecId));

            EcoResProductEntityChangeTrackingHelper::addEcoResProductVariantConfigurationAndConfiguration(productVariantDimensionValueDS);
            EcoResProductEntityChangeTrackingHelper::addEcoResProductVariantSizeAndSize(productVariantDimensionValueDS);
            EcoResProductEntityChangeTrackingHelper::addEcoResProductVariantColorAndColor(productVariantDimensionValueDS);
            EcoResProductEntityChangeTrackingHelper::addEcoResProductVariantStyleAndStyle(productVariantDimensionValueDS);

            EcoResProductEntityChangeTrackingHelper::addProductTranslationBasedOnProductRecIdAndPartitionLink(productDS, fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(EcoResDistinctProductVariant, Partition));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ProductVariantEntityDevDoc</DeveloperDocumentation>
	<FormRef>EcoResProductVariantsAction</FormRef>
	<IsObsolete>Yes</IsObsolete>
	<Label>@SYS133901</Label>
	<Tags>Product variants</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductVariantStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>DimensionBasedKey</PrimaryKey>
	<PublicCollectionName>ProductVariants</PublicCollectionName>
	<PublicEntityName>ProductVariant</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductMasterNumber</Name>
			<Label>@SCM:ProductMasterNumber</Label>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProductMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVariantNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:ProductVariantNumber</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProductVariant</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResProductTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSearchName</Name>
			<DataField>SearchName</DataField>
			<DataSource>EcoResDistinctProductVariant</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductDescription</Name>
			<DataField>Description</DataField>
			<DataSource>EcoResProductTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductConfigurationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>configurationIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductSizeId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>sizeIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResSizeName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductColorId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>colorIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResColorName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductStyleId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>styleIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResStyleName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalConfigurationId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>EcoResConfiguration</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalSizeId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>EcoResSize</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalColorId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>EcoResColor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalStyleId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>EcoResStyle</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConfigurationProductDimensionAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProductDimensionAttribute</DataField>
			<DataSource>EcoResProductVariantConfiguration</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SizeProductDimensionAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProductDimensionAttribute</DataField>
			<DataSource>EcoResProductVariantSize</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ColorProductDimensionAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProductDimensionAttribute</DataField>
			<DataSource>EcoResProductVariantColor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StyleProductDimensionAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProductDimensionAttribute</DataField>
			<DataSource>EcoResProductVariantStyle</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>DimensionBasedKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductMasterNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductConfigurationId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductSizeId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductColorId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductStyleId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
		<AxDataEntityViewKey>
			<Name>DistinctProductVariantKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductVariantNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductMasterEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProductMasterNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResDistinctProductVariant</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResDistinctProductVariant</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductMaster</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResDistinctProductVariant</JoinDataSource>
								<JoinRelationName>EcoResProductMaster</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductVariantConfiguration</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductVariantConfiguration</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResConfiguration</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResConfiguration</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>SourceConfiguration</Name>
										<JoinRelationName>SourceConfiguration</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>ProductVariant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductVariantSize</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductVariantSize</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResSize</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResSize</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>SourceSize</Name>
										<JoinRelationName>SourceSize</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProductVariant</Name>
								<JoinRelationName>ProductVariant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductVariantColor</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductVariantColor</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResColor</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResColor</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>SourceColor</Name>
										<JoinRelationName>SourceColor</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProductVariant</Name>
								<JoinRelationName>ProductVariant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductVariantStyle</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductVariantStyle</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResStyle</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResStyle</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>SourceStyle</Name>
										<JoinRelationName>SourceStyle</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProductVariant</Name>
								<JoinRelationName>ProductVariant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductSystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResDistinctProductVariant</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductTranslation</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResDistinctProductVariant</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
								<RelatedField>LanguageId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>