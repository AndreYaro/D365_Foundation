<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsProductSpecificItemBatchAttributeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsProductSpecificItemBatchAttributeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemBatchAttributeIdDefinition</Name>
				<Source><![CDATA[
    private static str itemBatchAttributeIdDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(PdsProductSpecificItemBatchAttributeEntity),
            dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem),
            fieldStr(PdsBatchAttribByItem, PdsBatchAttribCode),
            TableGroupAll::Table,
            fieldStr(PdsBatchAttribByItem, PdsBatchAttribRelation),
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBatchAttributeGroupIdDefinition</Name>
				<Source><![CDATA[
    private static str itemBatchAttributeGroupIdDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(PdsProductSpecificItemBatchAttributeEntity),
            dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem),
            fieldStr(PdsBatchAttribByItem, PdsBatchAttribCode),
            TableGroupAll::GroupId,
            fieldStr(PdsBatchAttribByItem, PdsBatchAttribRelation),
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, BatchAttributeCode),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeId), 
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeGroupId)]],
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, BatchAttributeRelation),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeId), 
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeGroupId)]],
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalValue),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalInteger),
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalDecimal),
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalText),
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalDate),
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalEnumerate)]],
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumTolerance),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumIntegerTolerance), 
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumDecimalTolerance)]],
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumTolerance),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumIntegerTolerance), 
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumDecimalTolerance)]],
            [fieldNum(PdsProductSpecificItemBatchAttributeEntity, ToleranceIncrement),
                [fieldNum(PdsProductSpecificItemBatchAttributeEntity, IntegerToleranceIncrement), 
                fieldNum(PdsProductSpecificItemBatchAttributeEntity, DecimalToleranceIncrement)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchAttributeCode</Name>
				<Source><![CDATA[
    private void defaultBatchAttributeCode()
    {
        if (this.ItemBatchAttributeId)
        {
            if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeId)))
            {
                this.BatchAttributeCode = TableGroupAll::Table;
            }
        }
        else if (this.ItemBatchAttributeGroupId)
        {
            if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeGroupId)))
            {
                this.BatchAttributeCode = TableGroupAll::GroupId;
            }
        }
        else
        {
            this.BatchAttributeCode = TableGroupAll::All;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchAttributeRelation</Name>
				<Source><![CDATA[
    private void defaultBatchAttributeRelation()
    {
        if (this.ItemBatchAttributeId)
        {
            if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeId)))
            {
                this.BatchAttributeRelation = this.ItemBatchAttributeId;
            }
        }
        else if (this.ItemBatchAttributeGroupId)
        {
            if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeGroupId)))
            {
                this.BatchAttributeRelation = this.ItemBatchAttributeGroupId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMinimumTolerance</Name>
				<Source><![CDATA[
    private void defaultMinimumTolerance()
    {
        PdsBatchAttribType attributeType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

        if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumIntegerTolerance))
                    && attributeType == PdsBatchAttribType::Integer)
        {
            this.MinimumTolerance = this.MinimumIntegerTolerance;
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumDecimalTolerance))
                    && attributeType == PdsBatchAttribType::Realnumber)
        {
            this.MinimumTolerance = this.MinimumDecimalTolerance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMaximumTolerance</Name>
				<Source><![CDATA[
    private void defaultMaximumTolerance()
    {
        PdsBatchAttribType attributeType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

        if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumIntegerTolerance))
                    && attributeType == PdsBatchAttribType::Integer)
        {
            this.MaximumTolerance = this.MaximumIntegerTolerance;
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumDecimalTolerance))
                    && attributeType == PdsBatchAttribType::Realnumber)
        {
            this.MaximumTolerance = this.MaximumDecimalTolerance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOptimalValue</Name>
				<Source><![CDATA[
    private void defaultOptimalValue()
    {
        PdsBatchAttribType attributeType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

        if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalInteger))
                    && attributeType == PdsBatchAttribType::Integer)
        {
            this.OptimalValue = int2Str(this.OptimalInteger);
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalDecimal))
                    && attributeType == PdsBatchAttribType::Realnumber)
        {
            this.OptimalValue = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Realnumber, this.OptimalDecimal);
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalText))
                    && attributeType == PdsBatchAttribType::String)
        {
            this.OptimalValue = this.OptimalText;
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalDate))
                    && attributeType == PdsBatchAttribType::Date)
        {
            this.OptimalValue = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Date, this.OptimalDate);
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalEnumerate))
                    && attributeType == PdsBatchAttribType::Enumerate)
        {
            this.OptimalValue = this.OptimalEnumerate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToleranceIncrement</Name>
				<Source><![CDATA[
    private void defaultToleranceIncrement()
    {
        PdsBatchAttribType attributeType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

        if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, IntegerToleranceIncrement))
                    && attributeType == PdsBatchAttribType::Integer)
        {
            this.ToleranceIncrement = this.IntegerToleranceIncrement;
        }
        else if (this.isFieldSet(fieldNum(PdsProductSpecificItemBatchAttributeEntity, DecimalToleranceIncrement))
                    && attributeType == PdsBatchAttribType::Realnumber)
        {
            this.ToleranceIncrement = this.DecimalToleranceIncrement;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, BatchAttributeCode): 
                this.defaultBatchAttributeCode(); 
                break;

            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, BatchAttributeRelation): 
                this.defaultBatchAttributeRelation(); 
                break;

            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, MinimumTolerance): 
                this.defaultMinimumTolerance(); 
                break;

            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, MaximumTolerance): 
                this.defaultMaximumTolerance(); 
                break;

            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, OptimalValue): 
                this.defaultOptimalValue(); 
                break;

            case fieldNum(PdsProductSpecificItemBatchAttributeEntity, ToleranceIncrement): 
                this.defaultToleranceIncrement(); 
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ItemBatchAttributeId && this.ItemBatchAttributeGroupId)
        {
            ret = checkFailed("@PDS:MessageError_BatchAttributeAndBatchAttributeGroupSpecified");
        }

        if (ret)
        {
            boolean isAnyIntegerFieldSet = this.OptimalInteger || this.IntegerToleranceIncrement || this.MinimumIntegerTolerance || this.MaximumIntegerTolerance;
            boolean isAnyDecimalFieldSet = this.OptimalDecimal || this.DecimalToleranceIncrement || this.MinimumDecimalTolerance || this.MaximumDecimalTolerance;

            PdsBatchAttribType batchAttribType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

            switch (batchAttribType)
            {
                case PdsBatchAttribType::Integer:
                    if (this.OptimalText || this.OptimalDate || this.OptimalEnumerate || isAnyDecimalFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Integer));
                    }
                    break;
                case PdsBatchAttribType::Realnumber:
                    if (this.OptimalText || this.OptimalDate || this.OptimalEnumerate || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Realnumber));
                    }
                    break;
                case PdsBatchAttribType::String:
                    if (this.OptimalDate || this.OptimalEnumerate || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::String));
                    }
                    break;
                case PdsBatchAttribType::Date:
                    if (this.OptimalText || this.OptimalEnumerate || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Date));
                    }
                    break;
                case PdsBatchAttribType::Enumerate:
                    if (this.OptimalDate || this.OptimalText || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Enumerate));
                    }
                    break;
            }
        }

        if (ret)
        {
            if (this.IsPotencyAttribute == NoYes::Yes)
            {
                if (!this.ItemBatchAttributeId)
                {
                    ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldDepencyError", enum2Str(NoYes::Yes), fieldStr(PdsProductSpecificItemBatchAttributeEntity, IsPotencyAttribute), fieldStr(PdsProductSpecificItemBatchAttributeEntity, ItemBatchAttributeId)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalTextDefinition</Name>
				<Source><![CDATA[
    private static str optimalTextDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::fieldDefinition(PdsBatchAttribType::String, fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalEnumerateDefinition</Name>
				<Source><![CDATA[
    private static str optimalEnumerateDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::fieldDefinition(PdsBatchAttribType::Enumerate, fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDateDefinition</Name>
				<Source><![CDATA[
    private static str optimalDateDefinition()
    {
        TableName entityName = tableStr(PdsProductSpecificItemBatchAttributeEntity);
    
        str calculatedDateString = SysComputedColumn::getDateAdd(
            SysComputedColumn::cast(
                SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget)),
                'int'),
            SysComputedColumn::returnLiteral(Global::DateNull()),
            SysComputedColumnDatePart::Day);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(PdsBatchAttribType::Date))),
                        calculatedDateString,
                        SysComputedColumn::returnLiteral(Global::DateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    private static str minimumIntegerToleranceDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::integerFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    private static str maximumIntegerToleranceDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::integerFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    private static str integerToleranceIncrementDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::integerFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalIntegerDefinition</Name>
				<Source><![CDATA[
    private static str optimalIntegerDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::integerFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    private static str minimumDecimalToleranceDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::decimalFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    private static str maximumDecimalToleranceDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::decimalFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    private static str decimalToleranceIncrementDefinition()
    {
        return PdsProductSpecificItemBatchAttributeEntity::decimalFieldDefinition(fieldStr(PdsBatchAttribByItem, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDecimalDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalDecimal computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalDecimal field.
    /// </returns>
    /// <remarks>
    /// The decimal target definition has a different structure than then integer one,
    /// because SQL is throwing an error for the empty value: Error converting data type nvarchar to numeric.
    /// </remarks>
    private static str optimalDecimalDefinition()
    {
        TableName entityName = tableStr(PdsProductSpecificItemBatchAttributeEntity);
    
        return SysComputedColumn::if(
                    SysComputedColumn::and2(
                        SysComputedColumn::notEqualExpression(
                            SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget)),
                            SysComputedColumn::returnLiteral('')),
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                                int2Str(enum2Int(PdsBatchAttribType::Realnumber)))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), fieldStr(PdsBatchAttribByItem, PdsBatchAttribTarget)),
                        SysComputedColumn::returnLiteral('0.0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerFieldDefinition</Name>
				<Source><![CDATA[
    private static str integerFieldDefinition(FieldName _fieldName)
    {
        return PdsProductSpecificItemBatchAttributeEntity::fieldDefinition(PdsBatchAttribType::Integer, _fieldName, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalFieldDefinition</Name>
				<Source><![CDATA[
    private static str decimalFieldDefinition(FieldName _fieldName)
    {
        return PdsProductSpecificItemBatchAttributeEntity::fieldDefinition(PdsBatchAttribType::Realnumber, _fieldName, '0.0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefinition</Name>
				<Source><![CDATA[
    private static str fieldDefinition(PdsBatchAttribType _batchAttributeType, FieldName _fieldName, str _nullLiteral)
    {
        TableName entityName = tableStr(PdsProductSpecificItemBatchAttributeEntity);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(_batchAttributeType))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), _fieldName),
                        SysComputedColumn::returnLiteral(_nullLiteral));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPotencyAttributeFieldDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the ItemBatchAttributeIdIsPotencyAttribute computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the ItemBatchAttributeIdIsPotencyAttribute field.
    /// </returns>
    private static str isPotencyAttributeFieldDefinition()
    {
        TableName entityName = tableStr(PdsProductSpecificItemBatchAttributeEntity);

        str sameBatchAttributeIdExpression = SysComputedColumn::equalExpression(
            SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), fieldStr(PdsBatchAttribByItem, PdsBatchAttribRelation)),
            SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, InventTable), fieldStr(InventTable, PDSBaseAttributeId))
        );
        str batchAttributeIsTypeTableExpression = SysComputedColumn::equalExpression(
            SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, PdsBatchAttribByItem), fieldStr(PdsBatchAttribByItem, PdsBatchAttribCode)),
            SysComputedColumn::returnLiteral(TableGroupAll::Table)
        );

        List expressionList = new List(types::String);
        expressionList.addEnd(sameBatchAttributeIdExpression);
        expressionList.addEnd(batchAttributeIsTypeTableExpression);

        str andExpression = SysComputedColumn::and(expressionList);
        return SysComputedColumn::if(andExpression, SysComputedColumn::returnLiteral(NoYes::Yes), SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, InventTable):
                InventTable inventTable = _dataSourceCtx.getBuffer();
                if (this.IsPotencyAttribute == NoYes::Yes)
                {
                    inventTable.PDSBaseAttributeId = this.ItemBatchAttributeId;
                }
        }

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PdsProductSpecificItemBatchAttributeEntity, InventTable):
                InventTable inventTable = _dataSourceCtx.getBuffer();
                if (this.IsPotencyAttribute == NoYes::Yes)
                {
                    inventTable.PDSBaseAttributeId = this.ItemBatchAttributeId;
                }
                else
                {
                    // There has been a switch from "Yes" to "No" for a released product so
                    // we need to update the record on the inventTable buffer.
                    if (this.ItemBatchAttributeId)
                    {
                        PDSBaseAttributeId oldPotencyAttribute = inventTable.PDSBaseAttributeId;
                        PdsBatchAttribId newPotencyAttribute = this.ItemBatchAttributeId;

                        if (oldPotencyAttribute == newPotencyAttribute)
                        {
                            inventTable.PDSBaseAttributeId = '';
                        }
                    }
                }
                break;
        }

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS:Developer_PdsProductSpecificItemBatchAttributeEntity</DeveloperDocumentation>
	<FormRef>PdsBatchAttribByItem</FormRef>
	<Label>@PDS:DataEntity_PdsProductSpecificItemBatchAttributeEntity</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PdsProductSpecificItemBatchAttributeStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>ItemId</DataField>
			<DataSource>InventTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BatchAttributeCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribCode</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BatchAttributeRelation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribRelation</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemBatchAttributeId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemBatchAttributeIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemBatchAttributeGroupId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemBatchAttributeGroupIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribGroupId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumTolerance</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribMin</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MaximumTolerance</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribMax</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToleranceIncrement</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribMultiple</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OptimalValue</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsBatchAttribTarget</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OptimalText</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeStringTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalTextDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribTarget</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>OptimalDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDateTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDateDefinition</ComputedFieldMethod>
			<ExtendedDataType>BaseDate</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OptimalEnumerate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeEnumTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalEnumerateDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribEnumValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MinimumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MaximumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>IntegerToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>integerToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>OptimalInteger</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalIntegerDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>DecimalToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDecimalToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>decimalToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMultiple</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OptimalDecimal</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDecimalTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDecimalDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsItemBatchAttributeDecimalTarget</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToleranceFailingAction</Name>
			<DataField>PdsBatchAttribToleranceAction</DataField>
			<DataSource>PdsBatchAttribByItem</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsPotencyAttribute</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>PDSPotency</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isPotencyAttributeFieldDefinition</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ItemNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemBatchAttributeId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemBatchAttributeGroupId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PdsBatchAttribByItem</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PdsBatchAttribByItem</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PdsBatchAttrib</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PdsBatchAttrib</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>PdsBatchAttrib</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>InventTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>