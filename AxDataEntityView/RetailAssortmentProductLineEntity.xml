<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentProductLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailAssortmentProductLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        this.validateAndFill(entityCtx,dataSourceCtx);

        ret = super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndFill</Name>
				<Source><![CDATA[
    private void validateAndFill(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        RetailGroupMemberLine groupMemberLine;
        RetailAssortmentTable retailAssortmentTable;

        // Find RetailAssortmentTable
        retailAssortmentTable = RetailAssortmentTable::find(this.AssortmentID);

        if (entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            RetailAssortmentProductLine existingAssortmentProductLine;

            // Find RetailGroupMemberLine
            select forupdate groupMemberLine
                join RecId from existingAssortmentProductLine
                    where 
                        existingAssortmentProductLine.AssortmentRecId == retailAssortmentTable.RecId // Key: AssortmentId
                        && existingAssortmentProductLine.LineNum == this.LineNumber // Key: LineNumber
                        // Key: Status - see code comment below
                        && existingAssortmentProductLine.RetailGroupMemberLineId == groupMemberLine.RecId
            ;
        }

        this.createOrUpdateRetailGroupMemberLine(groupMemberLine);

        // Check data entity datasource RetailAssortmentProductLine
        if (dataSourceCtx.name() == dataEntityDataSourceStr(RetailAssortmentProductLineEntity, RetailAssortmentProductLine) &&
            entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            RetailAssortmentProductLine assortmentProductLine = dataSourceCtx.getBuffer();

            // Set the assortment
            assortmentProductLine.AssortmentRecId = retailAssortmentTable.RecId;

            if (!assortmentProductLine.AssortmentRecId)
            {
                throw error(strFmt("@Retail:RetailAssortmentIdError", this.AssortmentID));
            }
            else if (assortmentProductLine.Status != retailAssortmentTable.Status)
            {   // Ensure that the new line being inserted has the same status as the assortment.
                // Normal workflow, would be to only insert lines for "Draft" but per PM we will allow this from DE directly (even when not in draft)
                // Ideally one would update the Assortment to be in "Draft" then import "Draft" then "Publish" the assortment.
                throw error(strFmt("@Retail:RetailAssortmentProductLineStatusError", assortmentProductLine.Status, retailAssortmentTable.Status, retailAssortmentTable.AssortmentID));
            }

            if (!RetailMerchandisingKillSwitch::disableRestrictDuplicateProductLinesInAssortments() && assortmentProductLine.Status == RetailAssortmentStatusType::Draft)
            {
                RetailGroupMemberLine retailGroupMemberLineBuffer =
                    RetailGroupMemberLine::getAssortmentLineGroupMemberLine(retailAssortmentTable.RecId, groupMemberLine.CategoryHierarchy,
                        groupMemberLine.Category, groupMemberLine.Product, groupMemberLine.Variant, assortmentProductLine.LineType);
            
                if (retailGroupMemberLineBuffer)
                {
                    throw error ('@Retail:RetailAssortmentLineAlreadyExists');
                }
            }

            assortmentProductLine.RetailGroupMemberLineId = groupMemberLine.RecId;

            dataSourceCtx.setBuffer(assortmentProductLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRetailGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update Retail group member line.
    /// </summary>
    /// <param name = "_groupMemberLine">Record for table RetailGroupMemberLine</param>
    private void createOrUpdateRetailGroupMemberLine(RetailGroupMemberLine _groupMemberLine)
    {
        DataAreaId workingCompany;

        // Do the opreation in the user specified LE or use the current company if not specified
        workingCompany = this.SourceDataAreaId;
        if (workingCompany == '')
        {
            workingCompany = curExt();
        }

        changecompany(workingCompany)
        {
            RetailGroupMemberLineHelper::createOrUpdateRetailGroupMemberLine(
                _groupMemberLine,
                this.ItemId,
                this.Color,
                this.Size,
                this.Style,
                this.ConfigurationId,
                this.CategoryName,
                this.CategoryHierarchyName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts entity data source.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity datasource runtime context.</param>
    /// <returns></returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        this.validateAndFill(_entityCtx, _dataSourceCtx);

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed when a record is read. Populates unmapped fields on the entity.
    /// </summary>
    public void postLoad()
    {
        RetailAssortmentProductLine assortmentProductLine;
        RetailGroupMemberLine groupMemberLine;

        // Find Delivery mode product line.
        select firstonly RetailGroupMemberLineId from assortmentProductLine
            where assortmentProductLine.RecId == this.RecId
        join Product, Variant, Category from groupMemberLine
            where groupMemberLine.RecId == assortmentProductLine.RetailGroupMemberLineId;

        // Find EcoResCategory
        EcoResCategory category = EcoResCategory::find(groupMemberLine.Category);

        // Find EcoResCategoryHierarhcy.
        EcoResCategoryHierarchy categoryHierarchy = EcoResCategoryHierarchy::find(category.CategoryHierarchy);

        this.CategoryName = category.Name;
        this.CategoryHierarchyName = categoryHierarchy.Name;

        if (groupMemberLine.Variant)
        {
            InventDimCombination inventDimCombination;
            InventDim inventDim;

            // Find InventDimCombination through DistinctProductVariant.
            select firstonly ItemId, InventDimId from inventDimCombination
                where inventDimCombination.DistinctProductVariant == groupMemberLine.Variant
            join InventColorId, InventSizeId, InventStyleId, configId from inventDim
                where inventDim.inventDimId == inventDimCombination.InventDimId;

            this.ItemId = inventDimCombination.ItemId;
            this.Color = inventDim.InventColorId;
            this.Size = inventDim.InventSizeId;
            this.Style = inventDim.InventStyleId;
            this.ConfigurationId = inventDim.configId;
        }
        else if (groupMemberLine.Product)
        {
            InventTable inventTable = InventTable::findByProduct(groupMemberLine.Product);

            this.ItemId = inventTable.ItemId;
        }

         super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<FormRef>RetailAssortmentDetails</FormRef>
	<Label>@Retail:AssortmentProductLineEntity</Label>
	<Tags>Channel profile</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailAssortmentProductLineStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailAssortmentProductLines</PublicCollectionName>
	<PublicEntityName>RetailAssortmentProductLine</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>RetailAssortmentProductLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetailGroupMemberLineId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RetailGroupMemberLineId</DataField>
			<DataSource>RetailAssortmentProductLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>RetailAssortmentProductLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssortmentId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>AssortmentID</DataField>
			<DataSource>RetailAssortmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Color</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResColorName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Size</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResSizeName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Style</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResStyleName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ConfigurationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryHierarchyName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResCategoryHierarchyName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResCategoryName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>RetailAssortmentProductLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SourceDataAreaId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AssortmentId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Status</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>RetailAssortmentEntity</Name>
			<RelatedDataEntity>RetailAssortmentEntity</RelatedDataEntity>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>AssortmentId</Field>
					<RelatedField>AssortmentID</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>EcoResSize</Name>
			<RelatedDataEntity>EcoResSize</RelatedDataEntity>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Size</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>EcoResColor</Name>
			<RelatedDataEntity>EcoResColor</RelatedDataEntity>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Color</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>EcoResStyle</Name>
			<RelatedDataEntity>EcoResStyle</RelatedDataEntity>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Style</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailAssortmentProductLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailAssortmentProductLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailAssortmentTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailAssortmentTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>RetailAssortmentTable</Name>
								<JoinRelationName>RetailAssortmentTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>