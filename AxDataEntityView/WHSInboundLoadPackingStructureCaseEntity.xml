<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundLoadPackingStructureCaseEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInboundLoadPackingStructureCaseEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets some fields, not exposed via entity itself, but having default values on the entity's data source.
    /// </summary>
    /// <param name = "_entityCtx">The context of the entity.</param>
    /// <param name = "_dataSourceCtx">The context of the entity data source.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSInboundLoadPackingStructureCaseEntity, WHSUOMStructure)
            && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            // Set the LoadId on the record, as it is necessary, but we don't want to expose it on the entity.
            WHSUOMStructure packingStructure = _dataSourceCtx.getBuffer();
            if (!this.isFieldSet(fieldNum(WHSInboundLoadPackingStructureCaseEntity, Module)))
            {
                packingStructure.Module = WHSModule::Purch;
            }
            packingStructure.LoadId = WHSShipmentTable::find(this.InboundShipmentId).LoadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the specified entity to the database.
    /// </summary>
    /// <param name = "_entityCtx">Date entity runtime context.</param>
    /// <remarks>
    /// By-passes the field validation for the Entities ParenLicensePlateId field in order to allow entity with this field set to be persisted.
    /// </remarks>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(WHSInboundLoadPackingStructureCaseEntity, ParentPackingStructureLicensePlateNumber), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record for the specified entity data source.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns>Result of the operation.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSInboundLoadPackingStructureCaseEntity, WHSUOMStructure))
        {
            // Ensure the license plate with the specified number is created.
            WHSLicensePlate::createLicensePlate(this.LicensePlateNumber);
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSInboundLoadPackingStructureCaseEntity, WHSUOMStructure))
        {
            WHSUOMStructure parentUOMStructure;
            
            parentUOMStructure.skipDataMethods(true);
            if (WHSInboundLoadPackingStructureCaseEntityUseThisModuleFlight::instance().isEnabled())
            {
                update_recordset parentUOMStructure
                    setting HasPacks = NoYes::Yes
                    where parentUOMStructure.LicensePlateId == this.ParentPackingStructureLicensePlateNumber
                        && parentUOMStructure.ShipmentId == this.InboundShipmentId
                        && parentUOMStructure.Module == this.Module
                        && parentUOMStructure.HasPacks == NoYes::No;
            }
            else
            {
                update_recordset parentUOMStructure
                    setting HasPacks = NoYes::Yes
                    where parentUOMStructure.LicensePlateId == this.ParentPackingStructureLicensePlateNumber
                        && parentUOMStructure.ShipmentId == this.InboundShipmentId
                        && parentUOMStructure.Module == WHSModule::Purch
                        && parentUOMStructure.HasPacks == NoYes::No;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Entity_Developer_InboundLoadPackingStructureCases</DeveloperDocumentation>
	<FormRef>WHSPackingStructure</FormRef>
	<Label>@WAX:Entity_Title_InboundLoadPackingStructureCases</Label>
	<Tags>Inbound</Tags>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSInboundLoadPackingStructureCaseStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>WMS</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>InboundLoadPackingStructureCases</PublicCollectionName>
	<PublicEntityName>InboundLoadPackingStructureCase</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InboundShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentPackingStructureLicensePlateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainedItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackedTotalQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContainedItemNumber</Name>
			<DataField>ItemId</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LicensePlateNumber</Name>
			<DataField>LicensePlateId</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentPackingStructureLicensePlateNumber</Name>
			<DataField>LicensePlateParent</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PackedTotalQuantity</Name>
			<DataField>Qty</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitSymbol</Name>
			<DataField>UOMItem</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReceivingUnitSymbol</Name>
			<DataField>UOMPack</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InboundShipmentId</Name>
			<DataField>ShipmentId</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Module</Name>
			<Mandatory>No</Mandatory>
			<DataField>Module</DataField>
			<DataSource>WHSUOMStructure</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LicensePlateNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InboundShipmentId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>ParentLoadPackingStructure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSInboundLoadPackingStructureEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ParentLoadPackingStructure</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>InnerLoadPackingStructures</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ParentPackingStructureLicensePlateNumber</Field>
					<RelatedField>LicensePlateNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>InboundShipmentId</Field>
					<RelatedField>InboundShipmentId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSUOMStructure</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSUOMStructure</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>ModuleInboundOnly</Name>
						<Field>Module</Field>
						<Status>Hidden</Status>
						<Value>(WHSInboundLoadPackingEntityRangeDefinitions::queryRangeInboundModules())</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>HasPacks</Name>
						<Field>HasPacks</Field>
						<Status>Hidden</Status>
						<Value>1</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>