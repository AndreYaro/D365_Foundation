<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults fields on the <c>BudgetPlanEntity</c> record.
    /// </summary>
    public void defaultRow()
    {
        super();

        BudgetPlanHeader localBudgetPlanHeader;
        container cachedHeader = BudgetPlanCache::getValue(BudgetPlanCacheScope::BudgetPlanHeader, [this.DocumentNumber, this.scopeIdentifier()]);

        if (cachedHeader == conNull())
        {
            BudgetPlanEntity::setLocalBudgetPlanHeaderValues(
                localBudgetPlanHeader,
                this.IsHistorical,
                this.Process,
                this.ResponsibilityCenterPartyNumber,
                this.Layout,
                this.Stage,
                this.PreparerPersonnelNumber,
                this.DocumentStatus,
                this.WorkflowStatus);

            // In order to resolve a document number, a process must be assigned to the entity instance.
            this.BudgetPlanningProcess              = localBudgetPlanHeader.BudgetPlanningProcess;
            localBudgetPlanHeader.DocumentNumber    = this.resolveDocumentNumber();

            if (this.IsHistorical)
            {
                this.Stage = BudgetPlanningStage::find(localBudgetPlanHeader.BudgetPlanningStage).Name;
            }

            BudgetPlanCache::insertValue(BudgetPlanCacheScope::BudgetPlanHeader, [this.DocumentNumber, this.scopeIdentifier()], [localBudgetPlanHeader]);
        }
        else
        {
            localBudgetPlanHeader = conPeek(cachedHeader, 1);
        }

        this.BudgetingOrganization  = localBudgetPlanHeader.BudgetingOrganization;
        this.BudgetPlanningProcess  = localBudgetPlanHeader.BudgetPlanningProcess;
        this.BudgetPlanLayout       = localBudgetPlanHeader.Layout;
        this.BudgetPlanPreparer     = localBudgetPlanHeader.BudgetPlanPreparer;
        this.BudgetPlanningStage    = localBudgetPlanHeader.BudgetPlanningStage;
        this.DocumentStatus         = localBudgetPlanHeader.DocumentStatus;
        this.WorkflowStatus         = localBudgetPlanHeader.WorkflowStatus;
        this.DocumentNumber         = localBudgetPlanHeader.DocumentNumber;
        this.LineReferenceId        = this.getNextLineNum();
        this.setAccountingAndReportingAmounts();

        // Set dimension legal entity context field
        this.SourceDataAreaId       = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(BudgetPlanningProcess::find(localBudgetPlanHeader.BudgetPlanningProcess).Ledger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns certain values early.
    /// </summary>
    /// <param name = "_entityCtx">The context for the data entity.</param>
    /// <param name = "_dataSourceCtx">The context for the data source.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Clear dimension legal entity context field, as it is a read only field
        this.SourceDataAreaId = BudgetPlanningConstants::emptyString;

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available line number for the <c>BudgetPlanEntity</c> table records.
    /// </summary>
    /// <returns> The next line number to be used. </returns>
    public guid getNextLineNum()
    {
        guid lineNumber;

        if (this.LineReferenceId == emptyGuid())
        {
            lineNumber = newGuid();
        }
        else
        {
            lineNumber = this.LineReferenceId;
        }

        return lineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingAndReportingAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>AccountingCurrencyAmount</c> and <c>ReportingCurrencyAmount</c> fields of the entity.
    /// </summary>
    public void setAccountingAndReportingAmounts()
    {
        BudgetPlanCurrencyExchangeHelper budgetPlanCurrencyExchangeHelper = BudgetPlanCurrencyExchangeHelper::construct();
        budgetPlanCurrencyExchangeHelper.initializeCurrencyExchangeHelper(BudgetPlanningProcess::find(this.BudgetPlanningProcess).Ledger);

        this.AccountingCurrencyAmount = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                            this.TransactionCurrencyAmount,
                                            this.TransactionCurrencyCode,
                                            this.EffectiveDate);

        this.ReportingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                            this.TransactionCurrencyAmount,
                                            this.TransactionCurrencyCode,
                                            this.EffectiveDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves an existing <c>BudgetPlanDocumentNumber</c> value if one exists or generates a new one.
    /// </summary>
    /// <returns>The <c>BudgetPlanDocumentNumber</c> value.</returns>
    public BudgetPlanDocumentNumber resolveDocumentNumber()
    {
        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);

        if (!budgetPlanHeader)
        {
            // When number sequencing is set to manual or blocked, the user supplied document number is used
            if (!BudgetPlan::checkNumberSequencesSetForDocumentNumber())
            {
                budgetPlanHeader.DocumentNumber = this.DocumentNumber;
            }
            else
            {
                container key = [this.DocumentNumber, this.scopeIdentifier()];
                container value = BudgetPlanCache::getValue(BudgetPlanCacheScope::DocumentNumber, key);

                if (conLen(value) > 0)
                {
                    budgetPlanHeader.DocumentNumber = conPeek(value, 1);
                }
                else
                {
                    // Generate a temporary budget plan header so the next generated DocumentNumber can be retrieved
                    // Set the process so that the sequence is generated within the context of the processes ledger
                    budgetPlanHeader.BudgetPlanningProcess = this.BudgetPlanningProcess;
                    budgetPlanHeader.setDocumentNumberSequence();
                    BudgetPlanCache::insertValue(BudgetPlanCacheScope::DocumentNumber, key, [budgetPlanHeader.DocumentNumber]);
                    appl.onTtsNotifyAbort += eventhandler(this.onInsertTtsNotifyAbort);
                }
            }
        }

        return budgetPlanHeader.DocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    /// <remarks>
    /// When doing set-based inserts, the full defaulting logic from BudgetPlanHeader or BudgetPlanLine is not
    /// run. In order to get full defaulting, row-by-row processing must be performed. Since
    /// this method is called specifically from the DIXF framework, the entity in
    /// DIXF can be marked as AllowSetBased=False in order to force row-by-row defaulting
    /// and validation. The trade off is a significant degradation in copy performance.
    /// </remarks>
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BudgetPlanStaging               staging;
        DimensionDataEntitySFKCacheTmp  dimCacheTmp = BudgetPlanLedgerDimensionAccountSetBasedResolver::resolve(_dmfDefinitionGroupExecution, staging, true);
        ExtendedDataTypeName            dataType = identifierstr(LedgerDimensionBudgetPlanning);
        Set                             insertedBudgetPlanHeaders;
        int64                           insertedRecordsCount;

        try
        {
            ttsbegin;

            // Put any rows that have unresolved accounts in an error state first.
            update_recordset staging
                setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted
                exists join dimCacheTmp
                    where dimCacheTmp.IntegrationString  == staging.LedgerAccountDisplayValue
                        && dimCacheTmp.HierarchyType     == DimensionHierarchyType::DataEntityBudgetPlanningDimensionFormat
                        && dimCacheTmp.ExtendedDataType  == dataType
                        && dimCacheTmp.Found             == NoYes::No;

            insertedBudgetPlanHeaders = BudgetPlanEntity::createBudgetPlanHeader(_dmfDefinitionGroupExecution);

            insertedRecordscount = BudgetPlanEntity::createBudgetPlanLine(_dmfDefinitionGroupExecution, dimCacheTmp);

            // Update transferred records to success status.
            update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted;

            ttscommit;
        }
        catch (Exception::Error)
        {
            BudgetPlanEntity::releaseDocumentNumbers(insertedBudgetPlanHeaders);

            // Rethrow exception so framework can display relevant info to user.
            throw Exception::Error;
        }

        return [insertedRecordsCount, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseDocumentNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the <c>DocumentNumber</c>s of a given <c>Set</c> of <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name = "_insertedBudgetPlanHeaders"> The <c>Set</c> of <c>BudgetPlanHeader</c> records. </param>
    private static void releaseDocumentNumbers(Set _insertedBudgetPlanHeaders)
    {
        if (_insertedBudgetPlanHeaders)
        {
            SetEnumerator       setEnumerator = _insertedBudgetPlanHeaders.getEnumerator();
            BudgetPlanHeader    currentHeader;

            while (setEnumerator.moveNext())
            {
                currentHeader = setEnumerator.current();
                currentHeader.releaseDocumentNumberSequence();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsertTtsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the <c>DocumentNumber</c> currently assigned to the <c>BudgetPlanEntity</c> instance.
    /// </summary>
    private void onInsertTtsNotifyAbort()
    {
        if (this.DocumentNumber)
        {
            BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);
            if (budgetPlanHeader)
            {
                budgetPlanHeader.releaseDocumentNumberSequence();
            }
            else
            {
                budgetPlanHeader.DocumentNumber = this.DocumentNumber;
                budgetPlanHeader.BudgetPlanningProcess = this.BudgetPlanningProcess;
                budgetPlanHeader.releaseDocumentNumberSequence();
            }
        }

        appl.onTtsNotifyAbort -= eventhandler(this.onInsertTtsNotifyAbort);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocalBudgetPlanHeaderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and sets typical and historical values to a budget plan header.
    /// </summary>
    /// <param name = "_localBudgetPlanHeader"> The <c>BudgetPlanHeader</c> table buffer to assign values to. </param>
    /// <param name = "_isHistorical"> The <c>NoYes</c> enum determining if the plan is historical. </param>
    /// <param name = "_processName"> The <c>BudgetPlanningProcessName</c> value. </param>
    /// <param name = "_organizationNumber"> The <c>DirPartyNumber</c> value of the budgeting organization. </param>
    /// <param name = "_layoutName"> The <c>BudgetPlanLayoutName</c> value. </param>
    /// <param name = "_stageName"> The <c>BudgetPlanningStageName</c> value. </param>
    /// <param name = "_preparerPersonnelNumber"> The <c>HcmPersonnelNumberId</c> of the person preparing the document. </param>
    /// <param name = "_documentStatus"> The <c>BudgetPlanStatus</c> of the document. </param>
    /// <param name = "_workflowStatus"> The <c>BudgetPlanWorkflowStatus</c> of the document. </param>
    public static void setLocalBudgetPlanHeaderValues(
        BudgetPlanHeader 			_localBudgetPlanHeader,
        NoYes                       _isHistorical,
        BudgetPlanningProcessName 	_processName,
        DirPartyNumber				_organizationNumber,
        BudgetPlanLayoutName		_layoutName,
        BudgetPlanningStageName		_stageName,
        HcmPersonnelNumberId		_preparerPersonnelNumber,
        BudgetPlanStatus			_documentStatus,
        BudgetPlanWorkflowStatus	_workflowStatus)
    {
        _localBudgetPlanHeader.BudgetPlanningProcess     = BudgetPlanningProcess::findByLocalizedName(_processName).RecId;
        _localBudgetPlanHeader.BudgetingOrganization     = DirPartyTable::findByNum(_organizationNumber).RecId;
        _localBudgetPlanHeader.Layout                    = BudgetPlanLayout::findByName(_layoutName).RecId;
        _localBudgetPlanHeader.BudgetPlanPreparer        = HcmWorker::findByPersonnelNumber(_preparerPersonnelNumber).RecId;

        if (_isHistorical == NoYes::Yes)
        {
            _localBudgetPlanHeader.BudgetPlanningStage   = BudgetPlanningWorkflowSetup::getLastPlanningStage(_localBudgetPlanHeader.BudgetPlanningProcess, _localBudgetPlanHeader.BudgetingOrganization).RecId;
            _localBudgetPlanHeader.DocumentStatus        = BudgetPlanStatus::Finalized;
            _localBudgetPlanHeader.WorkflowStatus        = BudgetPlanWorkflowStatus::Approved;
        }
        else
        {
            _localBudgetPlanHeader.BudgetPlanningStage 	 = BudgetPlanningStage::findByName(_stageName).RecId;
            _localBudgetPlanHeader.DocumentStatus        = _documentStatus;
            _localBudgetPlanHeader.WorkflowStatus        = _workflowStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    public static Set createBudgetPlanHeader(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BudgetPlanStaging           staging;
        BudgetPlanHeader            budgetPlanHeader;
        Map                         stageDocumentNumberMapping = new Map(Types::String, Types::String);
        Set                         insertedHeaders = new Set(Types::Record);

        while select Process, ResponsibilityCenterPartyNumber, Stage, PreparerPersonnelNumber, DocumentNumber,
                Name, DocumentStatus, WorkflowStatus, UserGroup, Currency, ParentBudgetPlan, Rank, Layout, IsHistorical, Priority
            from staging
            group by Process, ResponsibilityCenterPartyNumber, Stage, PreparerPersonnelNumber, DocumentNumber,
                Name, DocumentStatus, WorkflowStatus, UserGroup, Currency, ParentBudgetPlan, Rank, Layout, IsHistorical, Priority
            where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus   == DMFTransferStatus::NotStarted
        {
            BudgetPlanHeader localBudgetPlanHeader;
            BudgetPlanEntity::setLocalBudgetPlanHeaderValues(
                localBudgetPlanHeader,
                staging.IsHistorical,
                staging.Process,
                staging.ResponsibilityCenterPartyNumber,
                staging.Layout,
                staging.Stage,
                staging.PreparerPersonnelNumber,
                staging.DocumentStatus,
                staging.WorkflowStatus);

            budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(staging.DocumentNumber, true);
            budgetPlanHeader.BudgetPlanningProcess  = localBudgetPlanHeader.BudgetPlanningProcess;
            budgetPlanHeader.setDocumentNumberSequence();
            budgetPlanHeader.BudgetPlanningStage    = localBudgetPlanHeader.BudgetPlanningStage;
            budgetPlanHeader.BudgetingOrganization  = localBudgetPlanHeader.BudgetingOrganization;
            budgetPlanHeader.BudgetPlanPreparer     = localBudgetPlanHeader.BudgetPlanPreparer;
            budgetPlanHeader.Layout                 = localBudgetPlanHeader.Layout;
            budgetPlanHeader.DocumentStatus         = localBudgetPlanHeader.DocumentStatus;
            budgetPlanHeader.WorkflowStatus         = localBudgetPlanHeader.WorkflowStatus;
            budgetPlanHeader.BudgetPlanPriority     = BudgetPlanPriority::findByLocalizedName(staging.Priority).RecId;
            budgetPlanHeader.ParentBudgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(staging.ParentBudgetPlan).RecId;
            budgetPlanHeader.Name                   = staging.Name;
            budgetPlanHeader.PlanningUserGroup      = staging.UserGroup;
            budgetPlanHeader.Currency               = staging.Currency;
            budgetPlanHeader.Rank                   = staging.Rank;

            try
            {
                budgetPlanHeader.insert();
                insertedHeaders.add(budgetPlanHeader);
            }
            catch (Exception::Error)
            {
                // Explicitly release the current header as it has not been added to the <c>Set</c> if the error was thrown.
                budgetPlanHeader.releaseDocumentNumberSequence();
                BudgetPlanEntity::releaseDocumentNumbers(insertedHeaders);

                // Rethrow exception so framework can display relevant info to user.
                throw Exception::Error;
            }

            stageDocumentNumberMapping.insert(staging.DocumentNumber, budgetPlanHeader.DocumentNumber);
        }

        BudgetPlanEntity::updateStagingDataForAllDocuments(stageDocumentNumberMapping);

        return insertedHeaders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingDataForAllDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanStaging</c> table data for imports.
    /// </summary>
    /// <param name = "_stageDocumentNumberMapping"> A <c>Map</c> containing all document numbers that need to be updated. </param>
    public static void updateStagingDataForAllDocuments(Map _stageDocumentNumberMapping)
    {
        MapEnumerator documentNumberIterator = _stageDocumentNumberMapping.getEnumerator();
        while (documentNumberIterator.moveNext())
        {
            BudgetPlanDocumentNumber resolvedDocumentNumber = documentNumberIterator.currentValue();
            BudgetPlanDocumentNumber originalDocumentNumber = documentNumberIterator.currentKey();

            BudgetPlanStaging staging;
            update_recordset staging
                setting DocumentNumber = resolvedDocumentNumber
                where staging.DocumentNumber == originalDocumentNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanLine</c> records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <param name = "_dimCacheTmp">The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.</param>
    /// <returns>The count of <c>BudgetPlanLine</c> inserted.</returns>
    /// <remarks>
    /// Since an insert_recordset call to the BudgetPlanEntity will automatically degrade
    /// to row-by-row operations, the insert to the header and line tables must be done
    /// individually with data methods skipped.
    /// </remarks>
    public static int64 createBudgetPlanLine(
        DMFDefinitionGroupExecution     _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp  _dimCacheTmp)
    {
        ExtendedDataTypeName    dataType = identifierstr(LedgerDimensionBudgetPlanning);
        BudgetPlanStaging       staging;
        BudgetPlanScenario      budgetPlanScenario;
        BudgetPlanHeader        budgetPlanHeader;
        BudgetPlanLine          budgetPlanLine;

        budgetPlanLine.skipDataMethods(true);
        insert_recordset budgetPlanLine (
                LineReferenceId, TransactionCurrencyCode, TransactionCurrencyAmount, TransactionUnitPrice, AssetId, ProjectId, SourceDataAreaId,
                BudgetClass, Comment, EffectiveDate, EstimateType, IsNewRequest, IsRecurring, Quantity,
                LedgerDimension, BudgetPlanHeader, BudgetPlanScenario)
            select LineReferenceId, TransactionCurrencyCode, TransactionCurrencyAmount, TransactionUnitPrice, AssetId, ProjectId, SourceDataAreaId,
                BudgetClass, Comment, EffectiveDate, EstimateType, IsNewRequest, IsRecurring, Quantity
                from staging
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted
                join ResolvedReference from _dimCacheTmp
                    where _dimCacheTmp.IntegrationString == staging.LedgerAccountDisplayValue
                        && _dimCacheTmp.HierarchyType    == DimensionHierarchyType::DataEntityBudgetPlanningDimensionFormat
                        && _dimCacheTmp.ExtendedDataType == dataType
                join RecId from budgetPlanHeader
                    where budgetPlanHeader.DocumentNumber == staging.DocumentNumber
                join RecId from budgetPlanScenario
                    where budgetPlanScenario.Name == staging.Scenario;

        int64 insertedRecordsCount = budgetPlanLine.RowCount();

        BudgetPlanProposedAsset budgetPlanProposedAsset;
        update_recordset budgetPlanLine
            setting ProposedAsset = budgetPlanProposedAsset.RecId
            join RecId from budgetPlanProposedAsset
            exists join staging
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted
                    && staging.ProposedAsset    == budgetPlanProposedAsset.Name
                exists join budgetPlanHeader
                    where budgetPlanHeader.DocumentNumber == staging.DocumentNumber
                        && budgetPlanHeader.RecId         == budgetPlanLine.BudgetPlanHeader;

        BudgetPlanProposedProject budgetPlanProposedProject;
        update_recordset budgetPlanLine
            setting ProposedProject = budgetPlanProposedProject.RecId
            join RecId from budgetPlanProposedProject
                exists join staging
                    where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus   == DMFTransferStatus::NotStarted
                        && staging.ProposedAsset    == budgetPlanProposedProject.Name
                    exists join budgetPlanHeader
                        where budgetPlanHeader.DocumentNumber == staging.DocumentNumber
                            && budgetPlanHeader.RecId         == budgetPlanLine.BudgetPlanHeader;

        HcmPosition position;
        update_recordset budgetPlanLine
            setting Position = position.RecId
            join RecId from position
                exists join staging
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted
                    && staging.PositionId       == position.PositionId
                exists join budgetPlanHeader
                    where budgetPlanHeader.DocumentNumber == staging.DocumentNumber
                        && budgetPlanHeader.RecId         == budgetPlanLine.BudgetPlanHeader;

        BudgetPlan budgetPlan = budgetPlan::construct();
        while select DocumentNumber from staging
            group by DocumentNumber
            where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus   == DMFTransferStatus::NotStarted
        {
            budgetPlan.parmBudgetPlanHeader(BudgetPlanHeader::findByDocumentNumber(staging.DocumentNumber));
            budgetPlan.updatePlanLineCurrencyAmounts(false);
        }

        return insertedRecordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the entities associated data sources.
    /// </summary>
    /// <param name = "_entityCtx"> The context for the data entity. </param>
    /// <param name = "_dataSourceCtx"> The context for the data source. </param>
    /// <returns> true, if the entities data sources had records inserted. </returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanEntity, BudgetPlanLine)
            || _dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanEntity, BudgetPlanHeader))
        {
            _dataSourceCtx.skipValidateWrite(this.IsHistorical == NoYes::Yes);
        }

        boolean isEntityInserted = super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(BudgetPlanEntity, BudgetPlanLine):
                appl.onTtsNotifyAbort -= eventhandler(this.onInsertTtsNotifyAbort);
                break;
        }

        return isEntityInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates records for the entities associated data sources.
    /// </summary>
    /// <param name = "_entityCtx"> The context for the data entity. </param>
    /// <param name = "_dataSourceCtx"> The context for the data source. </param>
    /// <returns> true, if the entities data sources had records updated. </returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanEntity, BudgetPlanLine)
            || _dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanEntity, BudgetPlanHeader))
        {
            _dataSourceCtx.skipValidateWrite(this.IsHistorical == NoYes::Yes);
        }

        boolean isEntityUpdated = super(_entityCtx, _dataSourceCtx);

        return isEntityUpdated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<Label>@Budget:BudgetPlans</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetPlanStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetPlans</PublicCollectionName>
	<PublicEntityName>BudgetPlan</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetClass</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>BudgetClass</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanHeader</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanHeader</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanScenario</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanScenario</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Comment</Name>
			<Mandatory>No</Mandatory>
			<DataField>Comment</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EffectiveDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>EffectiveDate</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EstimateType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>EstimateType</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsNewRequest</Name>
			<Mandatory>No</Mandatory>
			<DataField>IsNewRequest</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsRecurring</Name>
			<Mandatory>No</Mandatory>
			<DataField>IsRecurring</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>BudgetPlanLine</DataSource>
			<DimensionLegalEntityContextField>SourceDataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity</Name>
			<Mandatory>No</Mandatory>
			<DataField>Quantity</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineReferenceId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>LineReferenceId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitPrice</Name>
			<Mandatory>No</Mandatory>
			<DataField>UnitPrice</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrencyAmount</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>AccountingCurrencyAmount</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyAmount</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReportingCurrencyAmount</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>TransactionCurrencyAmount</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyCode</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>TransactionCurrencyCode</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionUnitPrice</Name>
			<Mandatory>No</Mandatory>
			<DataField>TransactionUnitPrice</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssetId</Name>
			<Mandatory>No</Mandatory>
			<DataField>AssetId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedAssetId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProposedAsset</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedProjectId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProposedProject</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjectId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDataAreaId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>SourceDataAreaId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ForecastPosition</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Position</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetingOrganization</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetingOrganization</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanningProcess</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanningProcess</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanningStage</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanningStage</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanPreparer</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanPreparer</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanPriority</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanPriority</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DocumentNumber</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentStatus</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DocumentStatus</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsHistorical</Name>
			<Mandatory>No</Mandatory>
			<DataField>IsHistorical</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentBudgetPlanHeader</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ParentBudgetPlanHeader</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UserGroup</Name>
			<Mandatory>No</Mandatory>
			<DataField>PlanningUserGroup</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Rank</Name>
			<Mandatory>No</Mandatory>
			<DataField>Rank</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkflowStatus</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>WorkflowStatus</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Currency</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Currency</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanLayout</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Layout</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResponsibilityCenterPartyNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>BudgetingOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Process</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanningProcess</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Stage</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanningStage</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreparerPersonnelNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>BudgetPlanPreparer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Priority</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanPriority</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentBudgetPlan</Name>
			<Mandatory>No</Mandatory>
			<DataField>DocumentNumber</DataField>
			<DataSource>ParentBudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Layout</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>Layout</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Scenario</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanScenario</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedAsset</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ProposedAsset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedProject</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ProposedProject</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Position</DataField>
			<DataSource>PositionForecast</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PositionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>PositionId</DataField>
			<DataSource>Position</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>LedgerDimensionDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetingOrganizationName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetingOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonnelName</Name>
			<DataField>Name</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerAccountAccountStructure</Name>
			<Mandatory>No</Mandatory>
			<DataField>AccountStructure</DataField>
			<DataSource>LedgerDimensionDAVC</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DocumentNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Scenario</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineReferenceId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerDimensionCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>LedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetPlanLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetPlanLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanHeader</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BudgetPlanHeader</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetingOrganization</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>OMInternalOrganization</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>CompanyInfo</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CompanyInfo</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMOperatingUnit</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMOperatingUnit</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMTeam</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMTeam</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetingOrganization</Name>
										<JoinRelationName>OrganizationTheBudgetPlanBelongsTo</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPlanningProcess</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPlanningProcess</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetPlanningProcess1</Name>
										<JoinRelationName>BudgetPlanningProcess</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPlanningStage</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPlanningStage</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetPlanningStage</Name>
										<JoinRelationName>CurrentStageInTheBudgetPlan</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPlanPreparer</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>HcmWorker</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DirPartyTable</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirPartyTable</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>DirPartyTable_DirOrganizationBase</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DirOrganizationBase</Table>
												<DataSources />
												<DerivedDataSources>
													<AxQuerySimpleDerivedDataSource>
														<Name>DirPartyTable_DirOrganization</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>DirOrganization</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
													<AxQuerySimpleDerivedDataSource>
														<Name>DirPartyTable_OMInternalOrganization</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>OMInternalOrganization</Table>
														<DataSources />
														<DerivedDataSources>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_OMOperatingUnit</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>OMOperatingUnit</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_OMTeam</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>OMTeam</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_CompanyInfo</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>CompanyInfo</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
														</DerivedDataSources>
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
												</DerivedDataSources>
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
											<AxQuerySimpleDerivedDataSource>
												<Name>DirPartyTable_DirPerson</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DirPerson</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<DerivedTable>DirPerson</DerivedTable>
												<Field>Person</Field>
												<JoinDataSource>BudgetPlanPreparer</JoinDataSource>
												<JoinRelationName>DirPerson</JoinRelationName>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetPlanPreparer</Name>
										<JoinRelationName>BudgetPlanCreatingWorker</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPlanPriority</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPlanPriority</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>BudgetPlanPriority</Name>
										<JoinRelationName>BudgetPlanningPriority</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ParentBudgetPlanHeader</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPlanHeader</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>ParentBudgetPlanHeader</Name>
										<JoinRelationName>IsParentOf</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Layout</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetPlanLayout</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>Layout</Name>
										<JoinRelationName>BudgetPlanLayout</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanHeader</Name>
								<JoinRelationName>BudgetPlanHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanScenario</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanScenario</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanScenario</Name>
								<JoinRelationName>BudgetPlanScenario</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>UnitOfMeasure</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>UnitOfMeasure</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>UnitOfMeasure</Name>
								<JoinRelationName>UnitOfMeasure</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProposedAsset</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanProposedAsset</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProposedAsset</Name>
								<JoinRelationName>BudgetPlanProposedAsset</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProposedProject</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanProposedProject</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProposedProject</Name>
								<JoinRelationName>BudgetPlanProposedProject</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PositionForecast</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmPositionForecast</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Position</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>HcmPosition</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>Position2</Name>
										<JoinRelationName>HcmPosition</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Position1</Name>
								<JoinRelationName>HcmPositionForecast</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerDimensionDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LedgerDimensionDAVC</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>BudgetPlanLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>