<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationSettingLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailEventNotificationSettingLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map entity to data source.
    /// </summary>
    /// <param name = "_entityCtx">Entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data source runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == tablestr(RetailEventNotificationSetting))
        {
            // OData doesn't support enum as part of key, so we have to convert enum value to symbol, and back forth.
            RetailEventNotificationSetting notificationSetting = _dataSourceCtx.getBuffer();
            notificationSetting.EventNotificationType = symbol2Enum(enumNum(RetailEventNotificationType), this.NotificationType);
            _dataSourceCtx.setBuffer(notificationSetting);
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotificationType</Name>
				<Source><![CDATA[
    // OData framework doesn't support enum as part of a key, so we have to marshall enum to string, and back forth.
    private static server str getNotificationType()
    {
        // dynamically construct sql case-when statement that converts enum value in int to enum symbol.
        DataEntityName dataEntityName = tableStr(RetailEventNotificationSettingLineEntity);
        str dateSourceName = tableStr(RetailEventNotificationSetting);
        str fieldName = fieldStr(RetailEventNotificationSetting, EventNotificationType);
        str comparisonField = SysComputedColumn::comparisonField(dataEntityName, dateSourceName, fieldName);
        Map valueMap = new Map(Types::String, Types::String);
        EnumId enumId = enumNum(RetailEventNotificationType);
        DictEnum dictEnum = new DictEnum(enumId);
        int enumCount = dictEnum.values();
        int i;

        for (i = 0; i < enumCount; i++)
        {
            valueMap.insert(int2Str(dictEnum.index2Value(i)), SysComputedColumn::returnLiteral(dictEnum.index2Symbol(i)));
        }

        // default is empty string.
        return SysComputedColumn::switch(comparisonField, valueMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Retail:RetailEventNotificationSettingLine</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailEventNotificationSettingLineStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Retail</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>EventNotificationSettingLines</PublicCollectionName>
	<PublicEntityName>EventNotificationSettingLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProfileId</Name>
			<DataField>ProfileId</DataField>
			<DataSource>RetailEventNotificationProfile</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EventNotificationType</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>EventNotificationType</DataField>
			<DataSource>RetailEventNotificationSetting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNum</Name>
			<DataField>LineNum</DataField>
			<DataSource>RetailEventNotificationSettingLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryModeCode</Name>
			<DataField>DeliveryModeCode</DataField>
			<DataSource>RetailEventNotificationSettingLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmailId</Name>
			<DataField>EmailId</DataField>
			<DataSource>RetailEventNotificationSettingLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Active</Name>
			<DataField>Active</DataField>
			<DataSource>RetailEventNotificationSettingLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>NotificationType</Name>
			<Label>@RET4160030</Label>
			<ComputedFieldMethod>getNotificationType</ComputedFieldMethod>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProfileId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>NotificationType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNum</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailEventNotificationSettingLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailEventNotificationSettingLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailEventNotificationSetting</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailEventNotificationSetting</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>RetailEventNotificationProfile</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailEventNotificationProfile</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>EventNotificationProfile</Field>
										<JoinDataSource>RetailEventNotificationSetting</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>EventNotificationSetting</Field>
								<JoinDataSource>RetailEventNotificationSettingLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>