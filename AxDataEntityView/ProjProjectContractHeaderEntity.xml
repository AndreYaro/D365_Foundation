<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectContractHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectContractHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(ProjProjectContractHeaderEntity, ProjectContractId), NumberSeqReference::findReference(extendedTypeNum(ProjInvoiceProjId)));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert ||
                    _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;

                    if (this.isFieldSet(fieldNum(ProjProjectContractHeaderEntity, CustomerAccountNumber)) &&
                        !_dataSourceCtx.getBuffer().RecId)
                    {
                        CustTable custTable = CustTable::find(this.CustomerAccountNumber);
                        fundingSource.ContractId = this.ProjectContractID;
                        fundingSource.CustAccount = this.CustomerAccountNumber;
                        fundingSource.initFromCustAccount();
                    }
                }
                break;

            case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjInvoiceTable):
                if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    CustTable custTable;

                    ProjInvoiceTable projInvoiceTable = _dataSourceCtx.getBuffer() as ProjInvoiceTable;

                    if (this.CustomerAccountNumber)
                    {
                        custTable = CustTable::find(this.CustomerAccountNumber);
                    }

                    if (custTable)
                    {
                        projInvoiceTable.TaxGroupId     = custTable.TaxGroup;
                        projInvoiceTable.ProjPriceGroup = custTable.PriceGroup;
                        projInvoiceTable.GiroType       = custTable.GiroTypeProjInvoice;
                        projInvoiceTable.ListCodeId     = EUSalesList::resolveListCodeByCountryState(custTable.postalAddress(), projInvoiceTable.payer().postalAddress());
                    }
                }
                break;

            case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjDataSource):
                if (!this.IntegrationSourceDataId)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    ProjDataSource::findOrCreateProjDataSource(this.IntegrationSourceDataId);
                }
                
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectContractHeaderEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        this.checkProjOpsFeatureStatus();

        boolean ret;
        using (var activityContext = entityActivities.insertEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                    ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;
                    if (fundingSource.RecId)
                    {
                        if (ProjFundingRule::numberOfRulesForContract(fundingSource.ContractId) == 0)
                        {
                            ProjFundingRule::createDefaultFundingRule(fundingSource.ContractId, fundingSource.RecId);
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectContractHeaderEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        this.checkProjOpsFeatureStatus();

        boolean ret;
        using (var activityContext = entityActivities.updateEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        }
		return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
		ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectContractHeaderEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        this.checkProjOpsFeatureStatus();
        boolean ret;
        using (var activityContext = entityActivities.deleteEntityContext())
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjInvoiceTable):
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                    _dataSourceCtx.setDataSaved(false);
                    break;

                case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                    ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;
                    if (fundingSource.RecId)
                    {
                        if (ProjFundingRule::numberOfRulesForContract(fundingSource.ContractId) > 0)
                        {
                            ProjFundingRule projFundingRule;
                            delete_from projFundingRule
                                where projFundingRule.ContractId == fundingSource.ContractId;
                        }
                    }
                    break;
            }
            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        }
		return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjOpsFeatureStatus</Name>
				<Source><![CDATA[
    private void checkProjOpsFeatureStatus()
    {
        DataAreaId dataAreaId = this.DataAreaId ? this.DataAreaId : curExt();
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId))
        {
            throw error(strFmt("@ProjectOperations:ProjProjectOperationsIntegrationFeatureEntityValidation", dataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetry</Name>
				<Source><![CDATA[
    private void logTelemetry(DataEntityDataSourceRuntimeContext _dataSourceCtx, SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(ProjOpsIntegrationInstrumentationActivites::DataSource, any2Str(_dataSourceCtx.name()));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ContractIdProperty, any2Str(this.ProjectContractId));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::Company, any2Str(this.DataAreaId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (this.orig().CustomerAccountNumber &&
            this.isFieldSet(fieldNum(ProjProjectContractHeaderEntity, CustomerAccountNumber)) &&
            this.orig().CustomerAccountNumber != this.CustomerAccountNumber)
        {
            ret = checkFailed("@Proj:ProjCDSProjectContractEntityErrorUpdatingCustomer");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(ProjProjectContractHeaderEntity, SalesCurrencyCode),
                [fieldNum(ProjProjectContractHeaderEntity, CustomerAccountNumber),
                fieldNum(ProjProjectContractHeaderEntity, ProjectContractId)]],
            [fieldNum(ProjProjectContractHeaderEntity, CentralBankPurposeText),
                [fieldNum(ProjProjectContractHeaderEntity, CentralBankPurposeCode)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjProjectContractHeaderEntity, SalesCurrencyCode):
                this.defaulSalesCurrencyCode();
                break;

            case fieldNum(ProjProjectContractHeaderEntity, CentralBankPurposeText):
                this.defaulCentralBankPurposeText();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaulSalesCurrencyCode</Name>
				<Source><![CDATA[
    private void defaulSalesCurrencyCode()
    {
        boolean skipCustomerCurrencyDefaulting = this.SalesCurrencyCode &&
            ProjContractDefaultCurrencyFlight::instance().IsEnabled();
        
        if (!skipCustomerCurrencyDefaulting)
        {
            if (this.CustomerAccountNumber)
            {
                this.SalesCurrencyCode = CustTable::find(this.CustomerAccountNumber).Currency;
            }
            else
            {
                this.SalesCurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaulCentralBankPurposeText</Name>
				<Source><![CDATA[
    private void defaulCentralBankPurposeText()
    {
        this.CentralBankPurposeText = BankCentralBankPurpose::find(this.CentralBankPurposeCode).Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjProjectContractHeaderEntityDevDoc</DeveloperDocumentation>
	<FormRef>ProjInvoiceTable</FormRef>
	<Label>@Proj:ProjProjectContractHeaderEntityLabel</Label>
	<Tags>Project contracts</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjProjectContractHeaderStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectContractHeaders</PublicCollectionName>
	<PublicEntityName>ProjectContractHeader</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomersOrderReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceDimensionAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEInvoiceDimensionAccountCodeSpecifiedPerLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiroTypeProjInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndividualBufferDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAdditionalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TermsOfPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentScheduleName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerPostingProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NetPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsContractSalesCurrencyCodeLocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceCustomerGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsServiceDeliveryAddressBased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatTransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesResponsiblePersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntegrationSourceDataId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultLedgerDimensionDisplayValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerAccountNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountId</Name>
			<DataField>BankAccount</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CentralBankPurposeCode</Name>
			<DataField>BankCentralBankPurposeCode</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CentralBankPurposeText</Name>
			<DataField>bankcentralBankPurposeText</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountCode</Name>
			<DataField>CashDisc</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesCurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerRequisitionNumber</Name>
			<DataField>CustPurchaseOrder</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomersOrderReference</Name>
			<DataField>CustRef</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultLedgerDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Description</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EInvoiceDimensionAccountCode</Name>
			<DataField>EInvoiceAccountCode</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsEInvoiceDimensionAccountCodeSpecifiedPerLine</Name>
			<DataField>EInvoiceLineSpec</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceFrequency</Name>
			<DataField>ForecastInvoiceFrequency</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GiroTypeProjInvoice</Name>
			<DataField>GiroType</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IndividualBufferDays</Name>
			<DataField>IndividualBuffer</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntrastatAdditionalValue</Name>
			<DataField>IntrastatAddValue_LV</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ListCode</Name>
			<DataField>ListCodeId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TermsOfPayment</Name>
			<DataField>Payment</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentScheduleName</Name>
			<DataField>Paymentsched</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerPostingProfileId</Name>
			<DataField>PostingProfile</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NetPrice</Name>
			<DataField>ProjInvoiceNetPrice_BR</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsContractSalesCurrencyCodeLocked</Name>
			<DataField>ProjLockSalesCurrency</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PriceCustomerGroupCode</Name>
			<DataField>ProjPriceGroup</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesResponsibleRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SalesResponsible</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroupCode</Name>
			<DataField>TaxGroupId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsServiceDeliveryAddressBased</Name>
			<DataField>TaxServiceCodeOnDlvAddress_BR</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntrastatTransactionCode</Name>
			<DataField>TransactionCodeId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesResponsiblePersonnelNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>SalesResponsible</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegrationSourceDataId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>SourceId</DataField>
			<DataSource>ProjDataSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultLedgerDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccountNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CustAccount</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectContractId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjInvoiceTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjInvoiceTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesResponsible</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>SalesResponsible</Name>
								<JoinRelationName>HcmWorker</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjDataSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjDataSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjDataSource</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjFundingSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjFundingSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjInvoiceProjId</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>ContractId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DefaultDimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>