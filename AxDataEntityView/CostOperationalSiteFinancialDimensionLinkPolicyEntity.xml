<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostOperationalSiteFinancialDimensionLinkPolicyEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostOperationalSiteFinancialDimensionLinkPolicyEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        InventMultiSiteDimensionLink    requestedLinkState = this.LinkState;

        super();

        this.updateDimensionLinkState(requestedLinkState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventMultiSiteDimensionLink    requestedLinkState = this.LinkState;

        super();

        this.updateDimensionLinkState(requestedLinkState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionLinkState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the site dimension link state to the requested state.
    /// </summary>
    /// <param name = "_requestedLinkState">
    /// The requested state.
    /// </param>
    private void updateDimensionLinkState(InventMultiSiteDimensionLink _requestedLinkState)
    {
        InventParameters                inventParameters;
        InventMultiSiteDimensionLink    expectedNewState;

        ttsbegin;

        inventParameters = InventParameters::find(true);

        while (inventParameters.MultiSiteDimensionLink != _requestedLinkState)
        {
            switch (inventParameters.MultiSiteDimensionLink)
            {
                case InventMultiSiteDimensionLink::Inactive:
                    this.increaseLinkStateToActive();
                    expectedNewState = InventMultiSiteDimensionLink::Active;
                    break;

                case InventMultiSiteDimensionLink::Active:
                    if (_requestedLinkState == InventMultiSiteDimensionLink::Inactive)
                    {
                        this.decreaseLinkStateToInactive();
                        expectedNewState = InventMultiSiteDimensionLink::Inactive;
                    }
                    else
                    {
                        this.increaseLinkStateToLocked();
                        expectedNewState = InventMultiSiteDimensionLink::Locked;
                    }
                    break;

                case InventMultiSiteDimensionLink::Locked:
                    this.decreaseLinkStateToActive();
                    expectedNewState = InventMultiSiteDimensionLink::Active;
                    break;
            }

            inventParameters = InventParameters::find(true);

            if (inventParameters.MultiSiteDimensionLink != expectedNewState)
            {
                throw error("@SYS18447");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseLinkStateToActive</Name>
				<Source><![CDATA[
    private void increaseLinkStateToActive()
    {
        InventSiteDimension_ActivateLink activateLink = InventSiteDimension_ActivateLink::construct();

        if (!activateLink.validate())
        {
            throw error("@SYS18447");
        }

        activateLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseLinkStateToInactive</Name>
				<Source><![CDATA[
    private void decreaseLinkStateToInactive()
    {
        InventSiteDimension_DeactivateLink deactivateLink = InventSiteDimension_DeactivateLink::construct();

        if (!deactivateLink.validate())
        {
            throw error("@SYS18447");
        }

        deactivateLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseLinkStateToLocked</Name>
				<Source><![CDATA[
    private void increaseLinkStateToLocked()
    {
        InventSiteDimension_LockLink lockLink = InventSiteDimension_LockLink::construct();

        if (!lockLink.validate())
        {
            throw error("@SYS18447");
        }

        lockLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseLinkStateToActive</Name>
				<Source><![CDATA[
    private void decreaseLinkStateToActive()
    {
        InventSiteDimension_UnlockLink unlockLink = InventSiteDimension_UnlockLink::construct();

        if (!unlockLink.validate())
        {
            throw error("@SYS18447");
        }

        unlockLink.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkStateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>LinkState</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>LinkState</c> field.
    /// </returns>
    private static str linkStateDefinition()
    {
        return SysComputedColumn::returnField(tableStr(CostOperationalSiteFinancialDimensionLinkPolicyEntity),
                                              dataEntityDataSourceStr(CostOperationalSiteFinancialDimensionLinkPolicyEntity, InventParameters),
                                              fieldStr(InventParameters, MultiSiteDimensionLink));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@CostManagement:Developer_OperationalSiteFinancialDimensionLinkPolicyEntity</DeveloperDocumentation>
	<FormRef>InventSiteDimensionLink</FormRef>
	<Label>@CostManagement:Table_OperationalSiteFinancialDimensionLinkPolicy</Label>
	<Tags>Dimensions</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CostOperationalSiteFinancialDimensionLinkPolicyStaging</DataManagementStagingTable>
	<EntityCategory>Parameters</EntityCategory>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>OperationalSiteFinancialDimensionLinkPolicyKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LinkedFinancialDimensionRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SiteDimensionAttribute</DataField>
			<DataSource>InventParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LinkedFinancialDimensionName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>SiteDimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>LinkState</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>linkStateDefinition</ComputedFieldMethod>
			<EnumType>InventMultiSiteDimensionLink</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>OperationalSiteFinancialDimensionLinkPolicyKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DataAreaId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventParameters</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventParameters</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SiteDimensionAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionAttribute</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventParameters</JoinDataSource>
								<JoinRelationName>SiteDimensionAttributeId</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>Key</Name>
						<Field>Key</Field>
						<Status>Hidden</Status>
						<Value>0</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>