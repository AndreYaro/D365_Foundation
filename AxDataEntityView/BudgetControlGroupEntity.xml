<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGroupEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlGroupEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEnityOfficeMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Office menu options for the entity when the <c>setEntityOfficeMenuOptionDelegate</c> delegate in the <c>BudgetControlConfigurationEntityHelper</c> class is called.
    /// </summary>
    /// <param name="_entityOfficeMenuOption">
    /// The <c>BudgetControlConfigurationEntityOfficeMenuOption</c> instance for the entity.
    /// </param>
    [SubscribesTo(classstr(BudgetControlConfigurationEntityHelper), delegatestr(BudgetControlConfigurationEntityHelper, setEntityOfficeMenuOptionDelegate))]
    public static void setEnityOfficeMenuOption(BudgetControlConfigurationEntityOfficeMenuOption _entityOfficeMenuOption)
    {
        if (_entityOfficeMenuOption.parmEntityName() == tableStr(BudgetControlGroupEntity))
        {
            _entityOfficeMenuOption.parmLegalEntityIdFieldName(fieldStr(BudgetControlGroupEntity, LegalEntityId));
            _entityOfficeMenuOption.parmStatusFieldName(fieldStr(BudgetControlGroupEntity, Status));
            _entityOfficeMenuOption.parmDisplayFieldGroupName(tableFieldGroupStr(BudgetControlGroupEntity, AutoReport));
            _entityOfficeMenuOption.parmDisplayName("@Budget:ControlGroupEntityOfficeExportDisplayValue");
            _entityOfficeMenuOption.parmDataAreaIdFieldName(fieldStr(BudgetControlGroupEntity, DataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentMemberNameSql</Name>
				<Source><![CDATA[
    private static str getParentMemberNameSql()
    {
        str parentMemberNameSql = strFmt(@"
            SELECT TOP 1 NAME FROM BUDGETGROUPMEMBER PBGM
                WHERE PBGM.RECID = %1",
            SysComputedColumn::returnField(tablestr(BudgetControlGroupEntity), dataEntityDataSourceStr(BudgetControlGroupEntity, BudgetGroupMember), fieldstr(BudgetControlGroupEntity, ParentBudgetGroupMember)));

        return parentMemberNameSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetGroupMember draftGroupMember = this.getDraftBudgetGroupMember();
        BudgetControlGroupManager::deleteBudgetGroupMember(draftGroupMember.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsertRecord</Name>
				<Source><![CDATA[
    private void upsertRecord()
    {
        ttsbegin;

        BudgetGroupMember draftGroupMember = this.getDraftBudgetGroupMember();

        if (draftGroupMember)
        {
            // Set the values that were specified by the entity.
            draftGroupMember.Name = this.MemberName;
            draftGroupMember.Description = this.MemberDescription;
        }
        else
        {
            // Create a new group member with the default values.
            BudgetControlConfiguration draftControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

            recId groupRecId;
            recId parentGroupMemberRecId;

            if (this.ParentMemberName)
            {
                // The group member is being added as a child to the selected group member.
                BudgetGroupMember draftParentGroupMember = BudgetGroupMember::findByBudgetControlConfigurationMemberName(draftControlConfiguration.RecId, this.ParentMemberName);

                if (!draftParentGroupMember)
                {
                    throw error(strFmt("@Budget:ControlGroupEntityParentGroupDoesNotExistError", this.ParentMemberName));
                }

                groupRecId = draftParentGroupMember.BudgetGroup;
                parentGroupMemberRecId = draftParentGroupMember.RecId;
            }
            else
            {
                // The selected item is the root item which is not a committed group member.
                // Set the group and parent group member to 0 to create a new group and group member with no parent.
                groupRecId = 0;
                parentGroupMemberRecId = 0;
            }

            BudgetControlGroupManager::createBudgetGroupMember(
                draftControlConfiguration.RecId,
                groupRecId,
                parentGroupMemberRecId,
                this.MemberName,
                this.MemberDescription);

            // Select the new group member for update.
            draftGroupMember = this.getDraftBudgetGroupMember();
        }

        boolean isControlPropertyChangeAllowed = true;

        // Set the budget group properties when it is the top most budget group member.
        BudgetGroup draftBudgetGroup = BudgetGroup::find(draftGroupMember.BudgetGroup, true);

        if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetCycleTimeSpanName)) == FieldState::Set
            || this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetCycleTimeSpanFiscalCalendarId)) == FieldState::Set)
        {
            RecId selectedBudgetCycleTimeSpan = BudgetControlConfigurationEntityHelper::getBudgetCycleTimeSpan(this.BudgetCycleTimeSpanName, this.BudgetCycleTimeSpanFiscalCalendarId).RecId;

            if (this.ParentMemberName && draftBudgetGroup.BudgetCycleTimeSpan != selectedBudgetCycleTimeSpan)
            {
                isControlPropertyChangeAllowed = false;
            }
            else
            {
                // Map the BudgetCycleTimeSpan value as the mapEntityToDataSource method is not executed.
                this.BudgetCycleTimeSpan = selectedBudgetCycleTimeSpan;
                draftBudgetGroup.BudgetCycleTimeSpan = this.BudgetCycleTimeSpan;
            }
        }

        if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetControlInterval)) == FieldState::Set)
        {
            if (this.ParentMemberName && draftBudgetGroup.Interval != this.BudgetControlInterval)
            {
                isControlPropertyChangeAllowed = false;
            }
            else
            {
                draftBudgetGroup.Interval = this.BudgetControlInterval;
            }
        }

        if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetManager)) == FieldState::Set)
        {
            if (this.ParentMemberName && draftBudgetGroup.OverrideResponsibleUser != this.BudgetManager)
            {
                isControlPropertyChangeAllowed = false;
            }
            else
            {
                draftBudgetGroup.OverrideResponsibleUser = this.BudgetManager;
            }
        }

        if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetThresholdPercent)) == FieldState::Set)
        {
            if (this.ParentMemberName && draftBudgetGroup.ThresholdPercent != this.BudgetThresholdPercent)
            {
                isControlPropertyChangeAllowed = false;
            }
            else
            {
                draftBudgetGroup.ThresholdPercent = this.BudgetThresholdPercent;
            }
        }

        if (!isControlPropertyChangeAllowed)
        {
            // The budget control properties can only be set at the top most budget group member.
            throw error(strFmt("@Budget:ControlGroupEntityChildPropertyError", this.MemberName, this.ParentMemberName));
        }

        if (this.validateBudgetGroupMember(draftGroupMember.RecId))
        {
            // Update the group member records without using the BudgetControlGroupManager to avoid resetting any existing criteria.
            draftBudgetGroup.update();
            draftGroupMember.update();

            // The entity keys and the company context field may not be correct for the changes or current context.
            // Set the entity instance to the saved data.
            BudgetControlGroupEntity entity;

            // Set the current company context to match the primary company context set on the entity.
            changecompany(this.LegalEntityId)
            {
                // Select the entity record based on the key.
                select * from entity
                    where entity.Status == BudgetControlConfigurationStatus::Draft
                        && entity.MemberName == this.MemberName;
            }

            this.data(entity);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftBudgetGroupMember</Name>
				<Source><![CDATA[
    private BudgetGroupMember getDraftBudgetGroupMember()
    {
        // Get the draft budget control configuration.
        BudgetControlConfiguration controlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

        // Select the group member for update.
        BudgetGroupMember draftGroupMember = BudgetGroupMember::findByBudgetControlConfigurationMemberName(controlConfiguration.RecId, this.MemberName, true);

        return draftGroupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetGroupMember</Name>
				<Source><![CDATA[
    private boolean validateBudgetGroupMember(RecId _budgetGroupMemberRecId)
    {
        boolean isValid = true;

        BudgetControlGroupManager controlGroupManager = BudgetControlGroupManager::construct(_budgetGroupMemberRecId);

        if (controlGroupManager)
        {
            controlGroupManager.parmName(this.MemberName);
            controlGroupManager.parmDescription(this.MemberDescription);

            if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetCycleTimeSpanName)) == FieldState::Set
                || this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetCycleTimeSpanFiscalCalendarId)) == FieldState::Set)
            {
                controlGroupManager.parmBudgetCycleTimeSpan(this.BudgetCycleTimeSpan);
            }

            if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetControlInterval)) == FieldState::Set)
            {
                controlGroupManager.parmBudgetInterval(this.BudgetControlInterval);
            }

            if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetManager)) == FieldState::Set)
            {
                controlGroupManager.parmBudgetResponsibleUser(this.BudgetManager);
            }

            if (this.fieldState(fieldNum(BudgetControlGroupEntity, BudgetThresholdPercent)) == FieldState::Set)
            {
                controlGroupManager.parmBudgetThresholdPercent(this.BudgetThresholdPercent);
            }

            // Validate the group member but do not validate the criteria as the criteria may not yet be added.
            // Activation of the budget control configuration will validate for overlapping criteria.
            isValid = controlGroupManager.validate(false);

            if (isValid)
            {
                // Validate whether the time span is still valid since it is possible that the time span might have
                // been deleted or the time span may not have any budget cycles before persisting the group member.
                isValid = BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(controlGroupManager.parmBudgetCycleTimeSpan());
            }
            else
            {
                // The validation will log errors, throw an exception to stop the update.
                throw Exception::Error;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupParentMemberName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of parent budget group members.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of parent budget group members.
    /// </returns>
    [SysODataActionAttribute("BudgetControlGroupEntityParentMemberNameLookup", false),
    SysODataCollectionAttribute("_fields", Types::String),
    SysODataFieldLookupAttribute("ParentMemberName")]
    public static str lookupParentMemberName(Array _fields)
    {
        List parentGroupMemberList = new List(Types::String);

        BudgetControlConfiguration draftControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfigurationFromOfficeAppCustomLookupFields(
            tableStr(BudgetControlGroupEntity),
            fieldStr(BudgetControlGroupEntity, LegalEntityId),
            _fields);

        if (draftControlConfiguration)
        {
            Name groupMemberName;

            Map fieldMap = BudgetEntityHelper::getOfficeAppCustomLookupFieldMap(tableStr(BudgetControlGroupEntity), _fields);

            if (fieldMap.exists(fieldStr(BudgetControlGroupEntity, MemberName)))
            {
                groupMemberName = fieldMap.lookup(fieldStr(BudgetControlGroupEntity, MemberName));
            }

            if (!BudgetGroupMember::findByBudgetControlConfigurationMemberName(draftControlConfiguration.RecId, groupMemberName))
            {
                // New group members are allowed to edit and set the parent group member.
                BudgetGroup budgetGroup;
                BudgetGroupMember groupMember;

                while select Name from groupMember
                    order by Name
                    exists join budgetGroup
                        where budgetGroup.RecId == groupMember.BudgetGroup
                            && budgetGroup.BudgetControlConfiguration == draftControlConfiguration.RecId
                {
                    parentGroupMemberList.addEnd(groupMember.Name);
                }
            }
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(parentGroupMemberList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve conflicts in the ordering of data import such that dependent records insert after parent records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The execution context for import.</param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BudgetControlGroupStaging::resolveImportSequence(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:ControlGroupEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@Budget:ControlGroupEntity</Label>
	<Tags>Budget control setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetControlGroupStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetControlGroups</PublicCollectionName>
	<PublicEntityName>BudgetControlGroup</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentMemberName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MemberName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MemberDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpanFiscalCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetManager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetThresholdPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<DataField>LegalEntityId</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Status</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetGroup</DataField>
			<DataSource>BudgetGroupMember</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentBudgetGroupMember</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ParentBudgetGroupMember</DataField>
			<DataSource>BudgetGroupMember</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ParentMemberName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:ControlGroupEntityParentGroup</Label>
			<ComputedFieldMethod>getParentMemberNameSql</ComputedFieldMethod>
			<ExtendedDataType>BudgetGroupMemberName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MemberName</Name>
			<DataField>Name</DataField>
			<DataSource>BudgetGroupMember</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MemberDescription</Name>
			<Label>@Budget:ControlGroupEntityDescription</Label>
			<DataField>Description</DataField>
			<DataSource>BudgetGroupMember</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpan</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>BudgetCycleTimeSpan</DataField>
			<DataSource>BudgetGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpanName</Name>
			<Label>@Budget:BudgetCycleTimeSpan</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetCycleTimeSpanEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpanFiscalCalendarId</Name>
			<Label>@Budget:BudgetCycleTimeSpanFiscalCalendar</Label>
			<Mandatory>No</Mandatory>
			<DataField>FiscalCalendarId</DataField>
			<DataSource>BudgetCycleTimeSpanEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlInterval</Name>
			<Mandatory>No</Mandatory>
			<DataField>Interval</DataField>
			<DataSource>BudgetGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetManager</Name>
			<Mandatory>No</Mandatory>
			<DataField>OverrideResponsibleUser</DataField>
			<DataSource>BudgetGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetThresholdPercent</Name>
			<Mandatory>No</Mandatory>
			<DataField>ThresholdPercent</DataField>
			<DataSource>BudgetGroup</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Status</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>MemberName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedDataEntity>BudgetControlConfigurationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetControlConfigurations</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlGroupConfiguration</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_Status</Name>
					<Field>Status</Field>
					<RelatedField>Status</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetManager</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>SystemUserEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetManagers</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlGroupBudgetManager</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>SystemUserEntity_UserID</Name>
					<Field>BudgetManager</Field>
					<RelatedField>UserID</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetCycleTimeSpan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>BudgetCycleTimeSpanEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetCycleTimeSpans</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlGroupBudgetCycleTimeSpan</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetCycleTimeSpanEntity_Name</Name>
					<Field>BudgetCycleTimeSpanName</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetCycleTimeSpanEntity_FiscalCalendarId</Name>
					<Field>BudgetCycleTimeSpanFiscalCalendarId</Field>
					<RelatedField>FiscalCalendarId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetGroupMember</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetGroupMember</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetGroup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetGroup</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetControlConfigurationEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetControlConfigurationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>BudgetControlConfiguration</Field>
										<JoinDataSource>BudgetGroup</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetCycleTimeSpanEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetCycleTimeSpanEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>BudgetCycleTimeSpan</Field>
										<JoinDataSource>BudgetGroup</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetGroup</Name>
								<JoinRelationName>BudgetGroup</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>