<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceDataEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource entity
/// </summary>
public class ResResourceDataEntity extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update record to <c>ResResourceDataEntity</c> data entity and update reosurce related entity per parameters.
    /// </summary>
    /// <param name = "_updateCalendar">
    /// Specify if resource calendar will be updated.
    /// </param>
    /// <param name = "_updatePeriodCode">
    /// Specify if resource period code will be updated.
    /// </param>
    /// <param name = "_updateCategory">
    /// Specify if resource category will be updated.
    /// </param>
    /// <param name = "_updateCostPrice">
    /// Specify if resource cost price will be updated.
    /// </param>
    /// <param name = "_updateSalesPrice">
    /// Specify if resource sales price will be updated.
    /// </param>
    /// <param name = "_calendar">
    /// Calendar RecId value from <C>WorkCalendarTable</C> table to associate with the resource.
    /// </param>
    /// <param name = "_periodCodeRecId">
    /// Period code RecId value from <C>ProjPeriodTable</C> table to assoicate with the resource on <c>ResoruceSetup</c> table.
    /// </param>
    /// <param name = "_resourceCategory">
    /// Resource role RecId value from <C>PSASchedRole</C> table to assoicate with the resource.
    /// </param>
    /// <param name = "_costPrice">
    /// Cost price of the resoruce.  This is needed for adding a new <c>ProjHourCostPrice</c> record and associate this price to the resource.
    /// </param>
    /// <param name = "_salesPrice">
    /// Sales price of the resoruce.  This is needed for adding a new <c>ProjHourSalesPrice</c> record and associate this price to the resource.
    /// </param>
    /// <param name = "_validFrom">
    /// The effective valid from date for setting up resource category <c>ResourceResourceCategorySetup</c> table and <c>HcmEmployment</c> table records.
    /// </param>
    /// <param name = "_validTo">
    /// The effective valid to date for setting up resource category <c>ResourceResourceCategorySetup</c> table and <c>HcmEmployment</c> table records.
    /// </param>
    public void update( boolean                 _updateCalendar = false,
                        boolean                 _updatePeriodCode = false,
                        boolean                 _updateCategory = false,
                        boolean                 _updateCostPrice = false,
                        boolean                 _updateSalesPrice = false,
                        CalendarRecId           _calendar = 0,
                        ProjPeriodTableRecId    _periodCodeRecId = 0,
                        ResourceCategoryRecId   _resourceCategory = 0,
                        ProjCostPriceCost       _costPrice = 0,
                        ProjSalesPricing        _salesPrice = 0,
                        ValidFromDateTime       _validFrom = HcmDateTimeUtil::startOfCurrentDay(),
                        ValidToDateTime         _validTo = DateTimeUtil::maxValue())
    {
        CalendarId      calendarId;
        CompanyInfo     companyInfo;
        Timezone        timezone = DateTimeUtil::getUserPreferredTimeZone();
        ValidFromDate   validFromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_validFrom, timezone));
        ValidToDate     validToDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_validTo, timezone));

        try
        {
            if (this.ResourceCompanyId)
            {
                companyInfo = CompanyInfo::findDataArea(this.ResourceCompanyId);
            }
            else
            {
                companyInfo = CompanyInfo::findDataArea(curExt());
            }

            boolean updateName;
            boolean enablePerfFeature = ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled());

            ttsbegin;

            changecompany (companyInfo.DataArea)
            {
                ValidFromDate   validFromCalendarDate = DateTimeUtil::date(_validFrom);
                ValidToDate     validToCalendarDate = DateTimeUtil::date(_validTo);
                CalendarRecId   originalCalendar = ResourceFacade::getCalendar(this.RecId, validFromCalendarDate, validFromCalendarDate);

                if (enablePerfFeature)
                {
                    updateName = this.Name == ResourceFacade::getName(this.RecId) ? false : true;
                }

                super();

                if (enablePerfFeature && updateName)
                {
                    ResProjectResource projectResource;
                    update_recordset projectResource
                        setting Name = this.Name
                        where projectResource.Resource == this.RecId;
                }

                if (_updateCalendar)
                {
                    if (_calendar != originalCalendar)
                    {
                        calendarId = ResourceCalendarFacade::getCalendarId(_calendar);

                        if (this.Worker)
                        {
                            ValidFromDateTime validFromDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(_validFrom), #LastSecondOfTheDay);

                            // Update worker calendar
                            this.insertOrUpdateWorkerCalendar(this.Worker, companyInfo, validFromDateTime, validFromDateTime, calendarId);
                        }
                        else
                        {
                            // Add resource calendar record
                            this.updateResourceCalendar(this.ResourceId, calendarId, validFromCalendarDate, validToCalendarDate);
                        }
                        
                        if (!enablePerfFeature)
                        {
                            if (_calendar)
                            {
                                // Update the resource ResRollup table records for the next six months starting from the first day of this month.
                                date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                                utcdatetime start = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(today, 0),
                                    AVTimeframeType::Month).start();
                                utcdatetime end = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(
                                    (today + (#monthsPerHalfYear * #daysPerMonth)), #LastSecondOfTheDay)
                                    , AVTimeframeType::Month).end();

                                container arguments = [strFmt(ResUtil::activityResourceIdStrFormat, 0, this.RecId, 0), start, end];
                                Global::runAsync(classNum(ResRollUpWriter),
                                    staticMethodStr(ResRollUpWriter, removeAndUpdateRollUpForSpecificActivityResourceIdAsync), arguments);
                            }
                            else
                            {
                                // Remove roll up records.
                                container arguments = [strFmt(ResUtil::activityResourceIdStrFormat, 0, this.RecId, 0)];
                                Global::runAsync(classNum(ResRollUpWriter),
                                    staticMethodStr(ResRollUpWriter, removeRollUpForSpecificActivityResourceIdAsync), arguments);
                            }
                        }
                    }
                }

                if (_updateCategory)
                {
                    // Add resoruce category record
                    this.updateResourceCategory(this.RecId, _resourceCategory, validFromDate, validToDate);
                }

                if (_updatePeriodCode)
                {
                    // Update resoruce period code Id
                    this.updateResourcePeriodCode(this.RecId, companyInfo, _periodCodeRecId);
                }

                if (_updateCostPrice)
                {
                    // Setup resoruce cost price
                    this.upateCostPrice(this.RecId, _costPrice, validFromDate);
                }

                if (_updateSalesPrice)
                {
                    // Setup resource sales price
                    this.updateSalesPrice(this.RecId, _salesPrice, validFromDate);
                }
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            info("@Res:ResourceCannotBeUpdated");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record to <c>ResResourceDataEntity</c> data entity and setup reosurce related entity per parameters.
    /// </summary>
    /// <param name = "_calendar">
    /// Calendar RecId value from <C>WorkCalendarTable</C> table to associate with the resource.
    /// </param>
    /// <param name = "_periodCodeRecId">
    /// Period code RecId value from <C>ProjPeriodTable</C> table to assoicate with the resource on <c>ResoruceSetup</c> table.
    /// </param>
    /// <param name = "_resourceCategory">
    /// Resource role RecId value from <C>PSASchedRole</C> table to assoicate with the resource.
    /// </param>
    /// <param name = "_hasBackingEntity">
    /// Specify if the resource should specify backened entity like worker RecId or vendor Id.
    /// </param>
    /// <param name = "_firstName">
    /// First name of the resource. This is needed for adding a new <C>DirPartyTable</C> record and associate this worker to the resource.
    /// </param>
    /// <param name = "_middleName">
    /// Middle name of the resource. This is needed for adding a new <C>DirPartyTable</C> record and associate this worker to the resource.
    /// </param>
    /// <param name = "_lastName">
    /// Last name of the resource. This is needed for adding a new <c>DirPartyTable</c> record and associate this worker to the resource.
    /// </param>
    /// <param name = "_costPrice">
    /// Cost price of the resoruce.  This is needed for adding a new <c>ProjHourCostPrice</c> record and associate this price to the resource.
    /// </param>
    /// <param name = "_salesPrice">
    /// Sales price of the resoruce.  This is needed for adding a new <c>ProjHourSalesPrice</c> record and associate this price to the resource.
    /// </param>
    /// <param name = "_employmentType">
    /// Employment type of the worker like employee or contractor
    /// </param>
    /// <param name = "_validFrom">
    /// The effective valid from date for setting up resource category <c>ResourceResourceCategorySetup</c> table and <c>HcmEmployment</c> table records.
    /// </param>
    /// <param name = "_validTo">
    /// The effective valid to date for setting up resource category <c>ResourceResourceCategorySetup</c> table and <c>HcmEmployment</c> table records.
    /// </param>
    /// <param name = "_updateRollUp">
    /// Whether to update the resource roll-up cache table so that resource with availability view control will perform much faster.
    /// </param>
    public void insert( CalendarRecId           _calendar = 0,
                        ProjPeriodTableRecId    _periodCodeRecId = 0,
                        ResourceCategoryRecId   _resourceCategory = 0,
                        boolean                 _hasBackingEntity = true,
                        FirstName               _firstName = null,
                        MiddleName              _middleName = null,
                        LastName                _lastName = null,
                        ProjCostPriceCost       _costPrice = 0,
                        ProjSalesPricing        _salesPrice = 0,
                        HcmEmploymentType       _employmentType = HcmEmploymentType::Employee,
                        ValidFromDateTime       _validFrom = HcmDateTimeUtil::startOfCurrentDay(),
                        ValidToDateTime         _validTo = DateTimeUtil::maxValue(),
                        boolean                 _updateRollUp = true)
    {
        CalendarId      calendarId;
        CompanyInfo     companyInfo;
        Timezone        timezone = DateTimeUtil::getUserPreferredTimeZone();
        ValidFromDate   validFromDate = DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(_validFrom, timezone));
        ValidToDate     validToDate = DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(_validTo, timezone));

        try
        {
            if (this.ResourceCompanyId)
            {
                companyInfo = CompanyInfo::findDataArea(this.ResourceCompanyId);
            }
            else
            {
                companyInfo = CompanyInfo::findDataArea(curExt());
            }

            ttsbegin;

            changecompany(companyInfo.DataArea)
            {
                if (_calendar)
                {
                    calendarId = ResourceCalendarFacade::getCalendarId(_calendar);
                    if (calendarId == "")
                    {
                        throw Global::error ("@Res:CalendarDoesNotExist");
                    }
                }

                if (_resourceCategory)
                {
                    if (!PSASchedRole::find(_resourceCategory))
                    {
                        throw Global::error ("@Res:ResourceCategoryNotFound");
                    }
                }

                // Resource Id is mandatory
                if (!this.ResourceId)
                {
                    throw Global::error("@Res:ResourceIdMissing");
                }

                if (!_hasBackingEntity && (this.worker || this.VendId))
                {
                    throw Global::error ("@Res:BackingEntityIsDefined");
                }

                if (ResourceFacade::findByWorker(this.worker))
                {
                    throw Global::error ("@Res:WorkerCannotBeUsedAsResource");
                }

                if ((this.Type == WrkCtrType::Personnel) && (_hasBackingEntity))
                {
                    this.worker = HcmWorker::findByPersonnelNumber(this.PersonnelNumber).RecId;

                    if (!this.worker)
                    {
                        if (_firstName == "" && _middleName == "" && _lastName == "")
                        {
                            throw Global::error("@Res:ResourceNameMissing");
                        }
                        // Add worker and assign worker RecId to the resource worker field
                        this.worker = this.addWorker(_firstName, _middleName, _lastName, _validFrom, _validTo, _employmentType, companyInfo.RecId);
                    }

                    if (calendarId)
                    {
                        // Insert or update worker resource calendar on WorkCalendarEmployment
                        this.insertOrUpdateWorkerCalendar(this.Worker, companyInfo, _validFrom, _validTo, calendarId);
                    }

                    // If user has not explicitly defined a name for the resource
                    // then build name from worker full name.
                    if (!this.Name)
                    {
                        this.Name = this.buildResourceName(this.worker, this.ResourceId);
                    }
                }

                super();

                if (_resourceCategory)
                {
                    // Setup resoruce category
                    this.updateResourceCategory (this.RecId, _resourceCategory, validFromDate , validToDate);
                }

                if (_periodCodeRecId)
                {
                    // Setup resource period code
                    this.updateResourcePeriodCode(this.RecId, companyInfo, _periodCodeRecId);
                }

                if ((this.Type != WrkCtrType::Personnel) && (calendarId))
                {
                    // Setup calendar on WrkCtrResourceCalendar table
                    this.updateResourceCalendar (this.ResourceId, calendarId, validFromDate, validToDate);
                }

                if (_costPrice)
                {
                    // Setup resoruce cost price
                    this.upateCostPrice(this.RecId, _costPrice, validFromDate);
                }

                if (_salesPrice)
                {
                    // Setup resource sales price
                    this.updateSalesPrice(this.RecId, _salesPrice, validFromDate);
                }

                if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()) && _updateRollUp && _calendar)
                {
                    // add the resource to rollup cache table for the next six months starting from the first day of this month
                    date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                    utcdatetime start = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(today, 0),
                        AVTimeframeType::Month).start();
                    utcdatetime end = AVTimeframe::getTimeframe(DateTimeUtil::newDateTime(
                        (today + (#monthsPerHalfYear * #daysPerMonth)), #LastSecondOfTheDay)
                        , AVTimeframeType::Month).end();
                    ResUtil::updateRollUpByResource(this.RecId, start, end);
                }
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            info("@Res:ResourceCannotBeCreated");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourcePeriodCode</Name>
				<Source><![CDATA[
    private boolean updateResourcePeriodCode(   ResourceRecId           _resource,
                                                CompanyInfo             _companyInfo,
                                                ProjPeriodTableRecId    _PeriodCodeRecId)
    {
        ResourceSetup   resourceSetup;

        try
        {
            resourceSetup = ResourceSetup::find(_resource, true);

            ttsbegin;
            if (resourceSetup)
            {
                if (resourceSetup.Period != _PeriodCodeRecId)
                {
                    resourceSetup.Period = _PeriodCodeRecId;
                    resourceSetup.update();
                }
            }
            else
            {
                resourceSetup.clear();
                resourceSetup.Resource  = _resource;
                resourceSetup.Period    = _PeriodCodeRecId;
                resourceSetup.insert();
            }
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            info ("@Res:ResourcePeriodCannotBeSet");
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceCategory</Name>
				<Source><![CDATA[
    private boolean updateResourceCategory( ResourceRecId           _resource,
                                            ResourceCategoryRecId   _resourceCategory,
                                            ValidFromDate           _validFrom,
                                            ValidToDate             _validTo)
    {
        ResourceResourceCategorySetup   resourceRoleSetup;
        ValidToDate                     tempValidToDate;

        try
        {
            // Look up if the target resoruce category valid from date overlap the date range of the existing resoruce category record.
            resourceRoleSetup = ResourceResourceCategorySetup::findByResource(_resource, _validFrom);

            ttsbegin;
            if (resourceRoleSetup)
            {
                resourceRoleSetup.selectForUpdate(true);
                resourceRoleSetup.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                if (resourceRoleSetup.ValidFrom < _validFrom)
                {
                    // Update the existing record valid to date to become 1 day less then the validFrom date
                    tempValidToDate = resourceRoleSetup.ValidTo;
                    resourceRoleSetup.ValidTo           = _validFrom - 1;
                    resourceRoleSetup.update();

                    // Add a new record for the new resource category association
                    resourceRoleSetup.clear();
                    resourceRoleSetup.Resource          = _resource;
                    resourceRoleSetup.ResourceCategory  = _resourceCategory;
                    resourceRoleSetup.ValidFrom         = _validFrom;
                    resourceRoleSetup.ValidTo           = tempValidToDate;
                    resourceRoleSetup.insert();
                }
                else if (resourceRoleSetup.ValidFrom == _validFrom)
                {
                    resourceRoleSetup.ResourceCategory  = _resourceCategory;
                    resourceRoleSetup.update();
                }
            }
            else
            {
                resourceRoleSetup.clear();
                resourceRoleSetup.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
                resourceRoleSetup.Resource          = _resource;
                resourceRoleSetup.ResourceCategory  = _resourceCategory;
                resourceRoleSetup.ValidFrom         = _validFrom;
                resourceRoleSetup.ValidTo           = _validTo;
                resourceRoleSetup.insert();
            }
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            info ("@Res:ResourceCategoryCannotBeSet");
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upateCostPrice</Name>
				<Source><![CDATA[
    private boolean upateCostPrice( ResourceRecId           _resource,
                                    ProjCostPriceCost       _costPrice,
                                    TransDate               _validDate)
    {
        ProjHourCostPrice   costPriceTable;
        try
        {
            ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFind('', _resource, '', _validDate, '', '','', 0);
            costPriceTable = ProjHourCostPrice::findByPriceParameters(priceParams, true);

            ttsbegin;
            if (!costPriceTable)
            {
                costPriceTable.CostPrice        = _costPrice;
                costPriceTable.Resource         = _resource;
                costPriceTable.TransDate        = _validDate;
                costPriceTable.insert();
            }
            else if (costPriceTable.CostPrice   != _costPrice)
            {
                costPriceTable.CostPrice        = _costPrice;
                costPriceTable.update();
            }
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    private boolean updateSalesPrice(   ResourceRecId           _resource,
                                        ProjSalesPricing        _salesPrice,
                                        TransDate               _validDate)
    {
        ProjHourSalesPrice  salesPriceTable;
        CurrencyCode        currency;
        try
        {
            currency = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
				'', 
				_resource, 
				'', 
				currency,
                _validDate, 
				TableGroupAll::All, 
				'', 
				'', 
				'', 
				0);
            salesPriceTable = ProjHourSalesPrice::findByPriceParameters(priceParams, true);

            ttsbegin;
            if (!salesPriceTable)
            {
                salesPriceTable.CurrencyId          = currency;
                salesPriceTable.ProjSalesPriceModel = ProjSalesPriceModel::Qty;
                salesPriceTable.ProjSalesPricing    = _salesPrice;
                salesPriceTable.Resource            = _resource;
                salesPriceTable.TransDate           = _validDate;
                salesPriceTable.ProjValidFor        = TableGroupAll::All;
                salesPriceTable.insert();
            }
            else if (salesPriceTable.ProjSalesPricing != _salesPrice)
            {
                salesPriceTable.ProjSalesPricing    = _salesPrice;
                salesPriceTable.update();
            }
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceCalendar</Name>
				<Source><![CDATA[
    private boolean updateResourceCalendar( WrkCtrId        _resourceId,
                                            CalendarId      _calendarId,
                                            ValidFromDate   _validFrom,
                                            ValidToDate     _validTo)
    {
        WrkCtrResourceCalendar  resourceCalendar;
        ValidToDate             tempValidToDate;

        try
        {
            // Look up if the target resoruce calendar valid from date overlap the date range of the existing resoruce calendar record.
            resourceCalendar = WrkCtrResourceCalendar::findActiveForResource(_resourceId, _validFrom, true);

            ttsbegin;
            if (resourceCalendar)
            {
                resourceCalendar.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                if (resourceCalendar.ValidFrom < _validFrom)
                {
                    // Update the existing record valid to date to become 1 day less then the validFrom date
                    tempValidToDate = resourceCalendar.ValidTo;
                    resourceCalendar.ValidTo    = _validFrom - 1;
                    resourceCalendar.update();

                    // Add a new record for the new calendar association
                    resourceCalendar.clear();
                    resourceCalendar.WrkCtrId   = _resourceId;
                    resourceCalendar.CalendarId = _calendarId;
                    resourceCalendar.ValidFrom  = _validFrom;
                    resourceCalendar.ValidTo    = tempValidToDate;
                    resourceCalendar.insert();
                }
                else if (resourceCalendar.ValidFrom == _validFrom)
                {
                    resourceCalendar.CalendarId = _calendarId;
                    resourceCalendar.update();
                }
            }
            else
            {
                resourceCalendar.clear();
                resourceCalendar.WrkCtrId   = _resourceId;
                resourceCalendar.CalendarId = _calendarId;
                resourceCalendar.ValidFrom  = _validFrom;
                resourceCalendar.ValidTo    = _validTo;
                resourceCalendar.insert();
            }
            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorker</Name>
				<Source><![CDATA[
    private HcmWorkerRecId addWorker(   FirstName           _firstName,
                                        MiddleName          _middleName,
                                        LastName            _lastName,
                                        ValidFromDateTime   _validFrom,
                                        ValidToDateTime     _validTo,
                                        HcmEmploymentType   _employmentType,
                                        LegalEntity         _legalEntity)
    {
        DirPersonName               dirPersonName;
        NumberSequenceReference     numberSeqReferencePersonnelNum;
        NumberSequenceTable         numberSeqTablePersonnelNum;
        NumberSeq                   numberSeqPersonnelNum;
        SysLastValue                nextNumSeq;
        Num                         personnelNumber;
        HcmWorker                   hcmWorker;

        try
        {
            dirPersonName.FirstName  = _firstName;
            dirPersonName.MiddleName = _middleName;
            dirPersonName.LastName   = _lastName;

            // Number Sequence
            numberSeqReferencePersonnelNum  = NumberSeqReference::findReference(extendedTypeNum(HcmPersonnelNumberId));
            numberSeqTablePersonnelNum      = NumberSequenceTable::find(numberSeqReferencePersonnelNum.NumberSequenceId);

            if (numberSeqTablePersonnelNum)
            {
                // generate worker personnel number if number sequence code is created.
                numberSeqPersonnelNum = NumberSeq::newGetNumFromId(numberSeqTablePersonnelNum.RecId,
                                                               true,
                                                               true,
                                                               nextNumSeq,
                                                               true);

                if (numberSeqPersonnelNum)
                {
                    [personnelNumber] = nextNumSeq.Value;
                }
            }

            // Add worker record
            HcmCreateWorkerContract hcmCreateWorkerContact = HcmCreateWorkerContract::construct();
            hcmCreateWorkerContact.parmDirPersonName(dirPersonName);
            hcmCreateWorkerContact.parmLegalEntityRecId(_legalEntity);
            hcmCreateWorkerContact.parmEmploymentType(_employmentType);
            hcmCreateWorkerContact.parmEmploymentValidFrom(_validFrom);
            hcmCreateWorkerContact.parmEmploymentValidTo(_validTo);

            hcmWorker = HcmWorker::find(HcmWorkerTransition::newCreateHcmWorkerV2(hcmCreateWorkerContact));

            return hcmWorker.RecId;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            info("@Res:ResourceWorkerCannotBeAdded");
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildResourceName</Name>
				<Source><![CDATA[
    private WrkCtrName buildResourceName(HcmWorkerRecId _worker, ResResourceID _resourceId)
    {
        WrkCtrName resName;

        HcmWorker hcmWorker = HcmWorker::find(_worker);
        if (hcmWorker)
        {
            resName = hcmWorker.name();
        }

        if (!resName)
        {
            resName = _resourceId;
        }

        return resName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateWorkerCalendar</Name>
				<Source><![CDATA[
    private boolean insertOrUpdateWorkerCalendar(   HcmWorkerRecId      _worker,
                                                    CompanyInfo         _companyInfo,
                                                    ValidFromDateTime   _validFrom,
                                                    ValidToDateTime     _validTo,
                                                    CalendarId          _calendarId)
    {
        HcmEmployment           hcmEmployment;
        WorkCalendarEmployment  WorkCalendarEmployment;
        boolean                 findEmployment = false;

        try
        {
            while select ValidTimeState(_validFrom, _validTo) RecId from hcmEmployment
                where hcmEmployment.Worker == _worker
                    && hcmEmployment.LegalEntity == _companyInfo.RecId
            {
                findEmployment = true;
                workCalendarEmployment = WorkCalendarEmployment::findByEmploymentRecId(hcmEmployment.RecId, true);
                if (workCalendarEmployment)
                {
                    if (workCalendarEmployment.CalendarId != _calendarId)
                    {
                        ttsbegin;
                        workCalendarEmployment.CalendarId = _calendarId;
                        workCalendarEmployment.update();
                        ttscommit;
                    }
                }
                else
                {
                    ttsbegin;
                    workCalendarEmployment.CalendarDataAreaId = _companyInfo.DataArea;
                    workCalendarEmployment.CalendarId = _calendarId;
                    workCalendarEmployment.Employment = hcmEmployment.RecId;
                    workCalendarEmployment.insert();
                    ttscommit;
                }
            }
            if (!findEmployment)
            {
                // Employment not found
                throw Global::error (strFmt("@Res:EmploymentIsMissing", HcmWorker::find(_worker).name()));
            }

            return findEmployment;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            info ("@Res:ResourceCalendarCannotBeSet");
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the specified record in the <c>ResResourceDataEntity</c> data entity based on a supplied data entity RecId field value.
    /// </summary>
    /// <param name = "_resource">
    /// The <c>Resource</c> RecId field value.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>ResResourceDataEntity</c> data entity; otherwise an empty record.
    /// </returns>
    public static ResResourceDataEntity find(   ResourceRecId       _resource,
                                                boolean             _forUpdate        = false,
                                                ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ResResourceDataEntity resourceDataEntity;
        if (_forUpdate)
        {
            resourceDataEntity.selectForUpdate(_forUpdate);
            if (_concurrencyModel != ConcurrencyModel::Auto)
            {
                resourceDataEntity.concurrencyModel(_concurrencyModel);
            }
        }

        select firstonly resourceDataEntity
            where resourceDataEntity.RecId == _resource;

        return resourceDataEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// When the resoruce is deleted, remove the reousrce by resource facade delete resource method.
    /// </summary>
    public void delete()
    {
        ResourceFacade::deleteResource(this.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<Label>@Res:SchedulingResource</Label>
	<Tags>Project resourcing</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ResResourceDataStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectResources</PublicCollectionName>
	<PublicEntityName>ProjectResource</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceId</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<DataField>WrkCtrId</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Type</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>WrkCtrType</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Worker</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Worker</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonnelNumber</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendId</Name>
			<DataField>VendId</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RecordId</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>No</AllowEdit>
			<DataField>RecId</DataField>
			<DataSource>ResResourceIdentifier</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>DataAreaId</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ResourceId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ResourceCompanyId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ResResourceIdentifier</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ResResourceIdentifier</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WrkCtrTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>WrkCtrTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>HcmWorker</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>HcmWorker</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Worker</Field>
										<JoinDataSource>WrkCtrTable</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RefRecId</Field>
								<JoinDataSource>ResResourceIdentifier</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RefTableId</Field>
								<JoinDataSource>ResResourceIdentifier</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>