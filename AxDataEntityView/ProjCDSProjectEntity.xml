<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSProjectEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSProjectEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post changes to entity.
    /// </summary>
    /// <param name = "_entityCtx">
    /// The data entity's runtime context
    /// </param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (this.SourceDataID == '')
        {
            this.fieldState(fieldNum(ProjCDSProjectEntity, SourceDataId), FieldState::NotSet);
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up fileds for the project Entity
    /// </summary>
    /// <param name = "_entityCtx">The entity</param>
    /// <param name = "_dataSourceCtx">The data source</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert && _dataSourceCtx.name() == dataEntityDataSourceStr(ProjCDSProjectEntity, ProjTable))
        {           
            boolean isProjectTypeSet = this.isFieldSet(fieldNum(ProjCDSProjectEntity, ProjectType));

            if (!isProjectTypeSet)
            {
                // Default project type if not provided
                ProjCDSParameters parameters = ProjCDSParameters::find();                
                this.ProjectType = parameters.DefaultProjectType;
                this.fieldState(fieldNum(ProjCDSProjectEntity, ProjectType), FieldState::Set);
           }

            // Set status to the first value allowed
            this.ProjectStatus = ProjStatusTypeRule::firstStage(this.ProjectType);

            if (!this.isFieldSet(fieldNum(ProjCDSProjectEntity, ProjectGroup)) || this.ProjectGroup == '')
            {
                this.ProjectGroup = Project::getDefaultGroupId(this.ProjectType);
                this.fieldState(fieldNum(ProjCDSProjectEntity, ProjectGroup), FieldState::Set);
            }

            if (this.ProjectContractID)
            {
                ProjTable projTable = _dataSourceCtx.getBuffer();
                ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ProjectContractID);
                projTable.initFromInvoice(projInvoiceTable);
            }
        }        

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update && _dataSourceCtx.name() == dataEntityDataSourceStr(ProjCDSProjectEntity, ProjDataSource))
        {
            ProjDataSource::findOrCreateProjDataSource(this.SourceDataID);
        }

        //calling super will then map the field value set on the data entity to the underlying data source.
        //in thise case, since we're modifying the entity field, we need to call super so that it can be propagated to the data source buffer.
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data from the entity to the data source.
    /// </summary>
    /// <param name = "_entityCtx">The entity.</param>
    /// <param name = "_dataSourceCtx">The data source.</param>
    /// <returns>true on success; false otherwise.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjCDSProjectEntity, ProjTable))
        {
            ProjTable projTable = _dataSourceCtx.getBuffer() as ProjTable;
            projTable.validateProjId(projTable.ProjId);

            // Insert WIP project prior to the ProjTable datasource
            // or foreign key validation will fail when EstimateProjectId is set.
            ProjWIPTable projWIPTableLocal = this.findOrCreateEstimateProject();
            if (projWIPTableLocal)
            {
                projTable.WIPProject = projTable.ProjId;
            }
        }

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateEstimateProject</Name>
				<Source><![CDATA[
    private ProjWIPTable findOrCreateEstimateProject()
    {
        ProjWIPTable projWIPTableLocal;
        select projWIPTableLocal where projWIPTableLocal.ProjId == this.ProjectID;
        if (!projWIPTableLocal)
        {
            if (this.ProjectType == ProjType::Investment || this.ProjectType == ProjType::FixedPrice)
            {
                ProjGroup projGroup = ProjGroup::find(this.ProjectGroup);
                if (projGroup.CompletePrincip != ProjCompletePrincip::NoWIP)
                {
                    ttsbegin;

                    projWIPTableLocal.ProjId = this.ProjectID;
                    projWIPTableLocal.Description = this.ProjectName;
                    projWIPTableLocal.ControlId = projGroup.ControlId;
                    projWIPTableLocal.PeriodId = projGroup.PeriodId;
                    projWIPTableLocal.insert();

                    ttscommit;
                }
            }
        }

        return projWIPTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
    
        if (this.orig().CustomerAccount &&
            this.isFieldSet(fieldNum(ProjCDSProjectEntity, CustomerAccount)) &&
            this.orig().CustomerAccount != this.CustomerAccount)
        {
            ret = ret && checkFailed(strFmt("@Proj:CDSProjectsFieldUpdateNotSupported", fieldStr(ProjCDSProjectEntity, CustomerAccount)));
        }

        if (this.orig().ProjectContractId &&
            this.isFieldSet(fieldNum(ProjCDSProjectEntity, ProjectContractId)) &&
            this.orig().ProjectContractId != this.ProjectContractId)
        {
            ret = ret && checkFailed(strFmt("@Proj:CDSProjectsFieldUpdateNotSupported", fieldStr(ProjCDSProjectEntity, ProjectContractId)));
        }

        if (this.orig().ProjectType &&
            this.isFieldSet(fieldNum(ProjCDSProjectEntity, ProjectType)) &&
            this.orig().ProjectType != this.ProjectType)
        {
            ret = ret && checkFailed(strFmt("@Proj:CDSProjectsFieldUpdateNotSupported", fieldStr(ProjCDSProjectEntity, ProjectType)));
        }        

        if (this.orig().ProjectGroup &&
            this.isFieldSet(fieldNum(ProjCDSProjectEntity, ProjectGroup)) &&
            this.orig().ProjectGroup != this.ProjectGroup)
        {
            ret = ret && checkFailed(strFmt("@Proj:CDSProjectsFieldUpdateNotSupported", fieldStr(ProjCDSProjectEntity, ProjectGroup)));
        }

        ret = ret && super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles inserting of the records.
    /// </summary>
    public void insert()
    {
        boolean hasDimension;
        str dimensionDisplayValue;

        if (this.DefaultDimensionDisplayValue)
        {
            //
            // Can't set dimension data immediately (assuming it has a segment of Project)
            // since the project doesn't exist yet.  Do this as a secondary step.
            //

            hasDimension = true;
            dimensionDisplayValue = this.DefaultDimensionDisplayValue;
            this.DefaultDimensionDisplayValue = '';
        }

        ttsbegin;

        super();

        if (hasDimension)
        {
            this.DefaultDimensionDisplayValue = ProjCDSProjectEntity::escapeProjIdInAccountNumber(dimensionDisplayValue, this.ProjectID);
            this.update();
        }

        // Because this is an insert operation, the only plan version will be the one created during ProjTable.insert, so we
        // can find it by projId.
        real versionId = ProjPlanVersionDetail::findLatestByProjId(this.ProjectID, false, false).VersionId;

        // Set the hierarchy to published, so that tasks are ready to be imported
        ProjPlanVersionsManager::publishVersion(this.ProjectID, versionId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.DefaultDimensionDisplayValue)
        {
            this.DefaultDimensionDisplayValue = ProjCDSProjectEntity::escapeProjIdInAccountNumber(this.DefaultDimensionDisplayValue, this.ProjectID);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>escapeProjIdInAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the project ID parameter contains the dimension account delimiter,
    /// the delimiter within it will be escaped in order to import it properly.
    /// </summary>
    /// <param name = "_accountNumber">The account number to be imported.</param>
    /// <param name = "_projId">The project ID to be imported.</param>
    /// <returns>The specified account number with escaped account delimiter within the Proj ID.</returns>
    private static str escapeProjIdInAccountNumber(str _accountNumber, str _projId)
    {
        str delimited;
        str updatedAccountNumber;
        
        int accountNumberLength = strLen(_accountNumber);
        int projPosition = strScan(_accountNumber, _projId, 1, accountNumberLength);

        if (projPosition > 0)
        {
            DimensionParameters dimParm = DimensionParameters::find();
            str dimensionDelimiter = enum2Str(dimParm.DimensionSegmentDelimiter);
            if (strLen(dimensionDelimiter) == 1)
            {
                delimited = ProjCDSProjectEntity::escapeSubstring(_projId, dimensionDelimiter);
            }

            updatedAccountNumber = subStr(_accountNumber, 1, projPosition - 1);
            updatedAccountNumber = updatedAccountNumber + delimited;
            updatedAccountNumber = updatedAccountNumber + subStr(_accountNumber, projPosition + strLen(_projId), accountNumberLength);
        }
        else
        {
            updatedAccountNumber = _accountNumber;
        }

        return updatedAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>escapeSubstring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Places a '\' in front of every occurance of the specified substring to escape within the specified original string.
    /// </summary>
    /// <param name = "_origString">The string which needs strings within it escaped.</param>
    /// <param name = "_substringToEscape">The substring within the specified original string that needs escaping.</param>
    /// <returns>The original string which has been escaped.</returns>
    private static str escapeSubstring(str _origString, str _substringToEscape)
    {
        str delimitedString;
        int origStringLength = strLen(_origString);
        int searchStart = 1;
        int pos;
        int delimiterLength = strLen(_substringToEscape);

        pos = strScan(_origString, _substringToEscape, searchStart, origStringLength);
        while (pos > 0)
        {
            delimitedString = delimitedString + subStr(_origString, searchStart, pos - searchStart) + '\\' + _substringToEscape;
            searchStart = pos + delimiterLength;
            pos = strScan(_origString, _substringToEscape, searchStart, origStringLength);
        }

        delimitedString = delimitedString + subStr(_origString, searchStart, origStringLength);
        return delimitedString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:CDSProjectsDevDoc</DeveloperDocumentation>
	<FormRef>ProjTable</FormRef>
	<Label>@Proj:CDSProjects</Label>
	<Tags>CDS projects</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjCDSProjectStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CDSProjects</PublicCollectionName>
	<PublicEntityName>CDSProject</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectID</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccount</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectName</Name>
			<DataField>Name</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectGroup</Name>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractID</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectType</Name>
			<DataField>Type</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectStatus</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Status</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedStartDate</Name>
			<DataField>ProjectedStartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedEndDate</Name>
			<DataField>ProjectedEndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartDate</Name>
			<DataField>StartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndDate</Name>
			<DataField>EndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ParentId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectManagerPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDataID</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>SourceId</DataField>
			<DataSource>ProjDataSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsible</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjDataSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjDataSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjDataSource</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DefaultDimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>