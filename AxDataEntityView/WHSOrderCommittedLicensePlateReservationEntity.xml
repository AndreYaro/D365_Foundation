<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOrderCommittedLicensePlateReservationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOrderCommittedLicensePlateReservationEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update entity data source
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    /// <returns>true if record is updated; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSOrderCommittedLicensePlateReservationEntity, WHSInventTransOrderCommittedReservationView))
        {
            this.updateOrderCommittedReservation(this.ReservedInventoryQuantity - this.orig().ReservedInventoryQuantity);
        }

        //Do not update data source since business logic is used instead
        _dataSourceCtx.setDataSaved(true);
        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert entity data source
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    /// <returns>true if record is inserted; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSOrderCommittedLicensePlateReservationEntity, WHSInventTransOrderCommittedReservationView))
        {
            this.updateOrderCommittedReservation(this.ReservedInventoryQuantity);

			//Find and match the WHSInventTransOrderCommittedReservationView record. As result the entity record will be updated (and will be threated as inserted)
			WHSInventTransOrderCommittedReservationView inventTransOrderCommittedReservationView;
                
			select firstonly inventTransOrderCommittedReservationView
				where  inventTransOrderCommittedReservationView.CommittingOriginInventTransId == this.InventoryLotId
					&& inventTransOrderCommittedReservationView.LicensePlateId				  == this.LicensePlateNumber;

            //Read-only fields should be set explicitly
			WHSOrderCommittedLicensePlateReservationEntity entityRecord = _entityCtx.getEntityRecord();

            entityRecord.ReferenceCategory = inventTransOrderCommittedReservationView.ReferenceCategory;
            entityRecord.OrderNumber = inventTransOrderCommittedReservationView.OrderNumber;
            entityRecord.ItemNumber = inventTransOrderCommittedReservationView.ItemId;
            entityRecord.ProductColorId = inventTransOrderCommittedReservationView.InventColorId;
            entityRecord.ProductConfigurationId = inventTransOrderCommittedReservationView.ConfigId;
            entityRecord.ProductSizeId = inventTransOrderCommittedReservationView.InventSizeId;
            entityRecord.ProductStyleId = inventTransOrderCommittedReservationView.InventStyleId;

			_entityCtx.detectConflictForDatasource(_dataSourceCtx, inventTransOrderCommittedReservationView);
        }
        
        //Do not update data source since business logic is used instead
        _dataSourceCtx.setDataSaved(true);
        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);

        boolean ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete entity data source
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    /// <returns>true if record is deleted; otherwise, false.</returns>
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSOrderCommittedLicensePlateReservationEntity, WHSInventTransOrderCommittedReservationView))
        {
            this.updateOrderCommittedReservation(-this.ReservedInventoryQuantity);
        }
    
        //Do not update data source since business logic is used instead
        _dataSourceCtx.setDataSaved(true);
        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map entity record to data source record
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

		//Since view is used as root data source it can't be updated.
		_dataSourceCtx.setAllFieldStatesToNotSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderCommittedReservation</Name>
				<Source><![CDATA[
    private void updateOrderCommittedReservation(InventQty _qty)
    {
        InventMovement  inventMovement = this.inventoryMovement();

        if (inventMovement)
        {
            InventDim		inventDimReservation = InventDim::find(inventMovement.inventDimId());
            InventDimParm	inventDimParm;
  
            if (_qty > 0)
            {
                inventDimParm.initFromInventDim(inventDimReservation);
            }

            inventDimReservation.LicensePlateId = this.LicensePlateNumber;

            if (_qty < 0)
            {
                inventDimParm.initFromInventDim(inventDimReservation);
            }

            InventMov_WHSOrderCommittedReservation inventMovementOrderCommitted = inventMovement.whsOrderCommittedReservationMovement(true);

            if (!inventMovementOrderCommitted)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            InventUpd_Reservation reservation = InventUpd_Reservation::newParameters(inventMovementOrderCommitted,
																					inventDimReservation,
																					inventDimParm,
																					InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm),
																					-_qty,
																					false);

            reservation.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryMovement</Name>
				<Source><![CDATA[
    private InventMovement inventoryMovement()
    {
        InventMovement	inventMovement;

		switch (this.ReferenceCategory)
        {
            case InventTransType::Sales	:
                SalesLine salesLine = SalesLine::findInventTransId(this.InventoryLotId);
                inventMovement = InventMov_Sales::newFromSalesLine(salesLine);
                break;

            default:
                throw error(strFmt("@WAX:FlexibleLicensePlateReservationNotSupportReferenceCategory", enum2Symbol(enumNum(InventTransType), this.ReferenceCategory)));
        }

        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize entity data source
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate field
    /// </summary>
    /// <param name = "_fieldName">Field name</param>
    /// <param name = "_arrayIndex">Array index</param>
    /// <returns>true if field is valid; otherwise, false.</returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

		switch (_fieldName)
        {
            case fieldStr(WHSOrderCommittedLicensePlateReservationEntity, ReservedInventoryQuantity):
				if (this.ReservedInventoryQuantity <= 0)
                {
                    ret = checkFailed("@WAX:ReservedQuantityPositive");
                }
            break;

            case fieldStr(WHSOrderCommittedLicensePlateReservationEntity, InventoryLotId):
                InventTransOrigin	inventTransOrigin = InventTransOrigin::findByInventTransId(this.InventoryLotId);

                if (inventTransOrigin.ReferenceCategory != InventTransType::Sales)
                {
                    throw error(strFmt("@WAX:FlexibleLicensePlateReservationNotSupportReferenceCategory", enum2Symbol(enumNum(InventTransType), this.ReferenceCategory)));
                }

            break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderNumberCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a order number lookup serialized string for the OrderNumber field.
    /// </summary>
    /// <returns>A serialized string with a list of order numbers.</returns>
    [
        SysODataActionAttribute("WHSOrderCommittedLicensePlateReservationEntityOrderNumberFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("OrderNumber")
    ]
    public static str orderNumberCustomLookup(Array _fields)
    {
        str resultStr;
		Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(WHSOrderCommittedLicensePlateReservationEntity), _fields);
		OfficeAppCustomLookupRelationResult relationResult = new OfficeAppCustomLookupRelationResult();

        str determinationField  = fieldStr(WHSOrderCommittedLicensePlateReservationEntity, ReferenceCategory);
        str dataAreaIdField     = fieldStr(WHSOrderCommittedLicensePlateReservationEntity, DataAreaId);

        relationResult.addDeterminationField(determinationField);

        if (OfficeAppCustomLookupHelper::fieldsBound(relationResult.determinationFields(), fieldMap))
        {
            switch (fieldMap.lookup(determinationField))
            {
                case InventTransType::Sales			:
                    relationResult.entityName(ExportToExcelMetadataCache::getEntity(dataentityviewstr(SalesOrderHeaderV2Entity)).PublicEntityName);

                    ExportToExcelFilterTreeBuilder builder = new ExportToExcelFilterTreeBuilder(tableStr(SalesOrderLineV2Entity));
                    var filterCompanyId = builder.areEqual(fieldStr(SalesOrderLineV2Entity, DataAreaId), fieldMap.lookup(dataAreaIdField));

                    relationResult.filter(filterCompanyId.ToString());

                    relationResult.fieldName(fieldStr(SalesOrderHeaderV2Entity, SalesOrderNumber));
                    break;

                default:
                    throw error(strFmt("@WAX:FlexibleLicensePlateReservationNotSupportReferenceCategory", enum2Symbol(enumNum(InventTransType), fieldMap.lookup(determinationField))));
            }

            resultStr = relationResult.serialize();
        }

        return resultStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryLotIdCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a order number lookup serialized string for the LineNumber field.
    /// </summary>
    /// <returns>A serialized string with a list of order numbers.</returns>
    [
        SysODataActionAttribute("WHSOrderCommittedLicensePlateReservationEntityInventoryLotIdFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("InventoryLotId")
    ]
    public static str inventoryLotIdCustomLookup(Array _fields)
    {
        str resultStr;
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(WHSOrderCommittedLicensePlateReservationEntity), _fields);

        OfficeAppCustomLookupRelationResult relationResult = new OfficeAppCustomLookupRelationResult();

        str referenceCategoryField = fieldStr(WHSOrderCommittedLicensePlateReservationEntity, ReferenceCategory);
        str orderNumberField = fieldStr(WHSOrderCommittedLicensePlateReservationEntity, OrderNumber);
        str dataAreaIdField = fieldStr(WHSOrderCommittedLicensePlateReservationEntity, DataAreaId);
		
		relationResult.addDeterminationField(referenceCategoryField);
        relationResult.addDeterminationField(orderNumberField);

        if (OfficeAppCustomLookupHelper::fieldsBound(relationResult.determinationFields(), fieldMap))
        {
            switch (fieldMap.lookup(referenceCategoryField))
            {
                case InventTransType::Sales			:
                    relationResult.entityName(ExportToExcelMetadataCache::getEntity(dataentityviewstr(SalesOrderLineV2Entity)).PublicEntityName);

                    ExportToExcelFilterTreeBuilder builder = new ExportToExcelFilterTreeBuilder(tableStr(SalesOrderLineV2Entity));
                    var filterSalesOrderNumber = builder.areEqual(fieldStr(SalesOrderLineV2Entity, SalesOrderNumber), fieldMap.lookup(orderNumberField));
                    var filterCompanyId = builder.areEqual(fieldStr(SalesOrderLineV2Entity, DataAreaId), fieldMap.lookup(dataAreaIdField));

                    var filterCollectionNode = builder.and(filterSalesOrderNumber, filterCompanyId);

                    relationResult.filter(filterCollectionNode.ToString());

					relationResult.fieldName(fieldStr(SalesOrderLineV2Entity, InventoryLotId));

                    break;

                default:
                    throw error(strFmt("@WAX:FlexibleLicensePlateReservationNotSupportReferenceCategory", enum2Symbol(enumNum(InventTransType), fieldMap.lookup(referenceCategoryField))));
            }

            resultStr = relationResult.serialize();
        }

        return resultStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<Label>@WAX:OrderCommittedReservationLicensePlate</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSOrderCommittedLicensePlateReservationStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>OrderCommittedLicensePlateReservations</PublicCollectionName>
	<PublicEntityName>OrderCommittedLicensePlateReservation</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryLotId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservedInventoryQuantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ReferenceCategory</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@WAX60</Label>
			<Mandatory>No</Mandatory>
			<DataField>OrderNumber</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryLotId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>CommittingOriginInventTransId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LicensePlateNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>LicensePlateId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReservedInventoryQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>ReservedInventoryQuantity</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ItemId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ConfigId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>InventColorId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>InventSizeId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>InventStyleId</DataField>
			<DataSource>WHSInventTransOrderCommittedReservationView</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>InventoryLotId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LicensePlateNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>WHSLicensePlateEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSLicensePlateEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>LicensePlate</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>LicensePlateNumber</Field>
					<RelatedField>LicensePlateNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResReleasedProductV2Entity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResReleasedProductV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ReleasedProductV2</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ItemNumber</Field>
					<RelatedField>ItemNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductConfigurationEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductConfigurationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductConfiguration</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProductConfigurationId</Field>
					<RelatedField>ConfigurationId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductColorEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductColorEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductColor</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProductColorId</Field>
					<RelatedField>ColorId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductSizeEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductSizeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductSize</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProductSizeId</Field>
					<RelatedField>SizeId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductStyleEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductStyleEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductStyle</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OrderCommittedLicensePlateReservations</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProductStyleId</Field>
					<RelatedField>StyleId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSInventTransOrderCommittedReservationView</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSInventTransOrderCommittedReservationView</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>