<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccrualSchemesEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerAccrualSchemesEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of <c>LedgerAllocateKey</c> records.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of <c>LedgerAllocateKey</c> records.
    /// </returns>
    [SysODataActionAttribute("LedgerAccrualSchemesEntityPeriodKeyLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("PeriodKey")]
    public static str lookupPeriodKey(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(LedgerAccrualSchemesEntity, DataAreaId));

        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(LedgerAccrualSchemesEntity), _fields);

        str resultString;

        if (OfficeAppCustomLookupHelper::fieldsBound(result.determinationFields(), fieldMap))
        {
            DataAreaId lookupDataArea = fieldMap.lookup(fieldStr(LedgerAccrualSchemesEntity, DataAreaId));

            changecompany(lookupDataArea)
            {
                LedgerAllocateKey periodKeys;
                int counter = 1;

                while select Key from periodKeys
                    order by periodKeys.Key
                {
                    result.items().value(counter, periodKeys.Key);
                    counter++;
                }
            }

            resultString = result.serialize();
        }

        return resultString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        // We display different choices for the PeriodType field depending on whether an Accrual basis of Calendar or Fiscal are choisen
        // Since we can't dynamically change those lookups through the entity they need to be represented by two separate columns,
        // which is how the form represents it as well. This logic will populate those two columns appropriately.
        if (this.AccrualBasis == LedgerAccrualPeriod::Calendar)
        {
            switch (this.PeriodType)
            {
                case AssetAccrual::HalfYearly:
                    this.CalendarPeriodFrequency = AssetAccrualCalendar::HalfYearly;
                    break;

                case AssetAccrual::Monthly:
                    this.CalendarPeriodFrequency = AssetAccrualCalendar::Monthly;
                    break;

                case AssetAccrual::Quarterly:
                    this.CalendarPeriodFrequency = AssetAccrualCalendar::Quarterly;
                    break;

                case AssetAccrual::Yearly:
                    this.CalendarPeriodFrequency = AssetAccrualCalendar::Yearly;
                    break;
            }
        }
        else if (this.AccrualBasis == LedgerAccrualPeriod::Fiscal)
        {
            switch (this.PeriodType)
            {
                case AssetAccrual::FiscalPeriod:
                    this.FiscalPeriodFrequency = AssetAccrualFiscal::FiscalPeriod;
                    break;

                case AssetAccrual::Yearly:
                    this.FiscalPeriodFrequency = AssetAccrualFiscal::Yearly;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodTypeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the period type value of <c>LedgerAccrualSchemesEntity</c>.
    /// </summary>
    [Wrappable(true)]
    protected final void setPeriodTypeValue()
    {
        // We display different choices for the PeriodType field depending on whether an Accrual basis of Calendar or Fiscal are choisen
        // Since we can't dynamically change those lookups through the entity they need to be represented by two separate columns,
        // which is how the form represents it as well. This logic will parse the selected accrual basis type along with the
        // appropriate Period frequency column and popululate the PeriodType column.
        if (this.AccrualBasis == LedgerAccrualPeriod::Calendar)
        {
            switch (this.CalendarPeriodFrequency)
            {
                case AssetAccrualCalendar::HalfYearly:
                    this.PeriodType = AssetAccrual::HalfYearly;
                    break;

                case AssetAccrualCalendar::Monthly:
                    this.PeriodType = AssetAccrual::Monthly;
                    break;

                case AssetAccrualCalendar::Quarterly:
                    this.PeriodType = AssetAccrual::Quarterly;
                    break;

                case AssetAccrualCalendar::Yearly:
                    this.PeriodType = AssetAccrual::Yearly;
                    break;
            }
        }
        else if (this.AccrualBasis == LedgerAccrualPeriod::Fiscal)
        {
            switch (this.FiscalPeriodFrequency)
            {
                case AssetAccrualFiscal::FiscalPeriod:
                    this.PeriodType = AssetAccrual::FiscalPeriod;
                    break;

                case AssetAccrualFiscal::Yearly:
                    this.PeriodType = AssetAccrual::Yearly;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.setPeriodTypeValue();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.setPeriodTypeValue();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIgnoreBlankFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the fields related to number sequence resolution as Blank OK, since the number sequence code is not required on the accrual scheme.
    /// </summary>
    /// <param name = "_stagingTableName">The name of the staging table being evaluated.</param>
    /// <param name = "_stagingFieldName">The name of the entity field being evaluated.</param>
    /// <param name = "_operationType">The database operation.</param>
    /// <param name = "_eventResult">The event handler result.</param>
    [SubscribesTo(classstr(DMFDelegates), staticdelegatestr(DMFDelegates, isIgnoreBlankValuesSourceMappingsDelegate))]
    public static void setIgnoreBlankFields(TableName _stagingTableName, FieldName _stagingFieldName, DMFOperationType _operationType, EventHandlerResult _eventResult)
    {
        if (_stagingTableName == tableStr(LedgerAccrualSchemesStaging))
        {
            DictDataEntityField entityField = new DictDataEntityField(
                tableNum(LedgerAccrualSchemesEntity),
                fieldName2Id(tableNum(LedgerAccrualSchemesEntity), _stagingFieldName));

            if (entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, NumberSequenceTable)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, NumberSequenceScope)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, FiscalCalendarPeriod)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, FiscalCalendarYear)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, FiscalCalendar)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, LegalEntity)
                || entityField.dataSource() == dataEntityDataSourceStr(LedgerAccrualSchemesEntity, OperatingUnit))
            {
                _eventResult.result(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        if (this.isFieldSet(fieldNum(LedgerAccrualSchemesEntity, NumberSequenceScope_DataArea)))
        {
            // If the accrual scheme was exported from one company to be imported to another, the number sequence
            // dataarea scope will have the incorrect/invalid value when attempting to import into another company.  
            // Since this entity is striped by dataareaid, the number sequence scope should never be any other value 
            // than the current company if the number sequence is scoped by dataarea.
            if (this.NumberSequenceScope_DataArea && this.NumberSequenceScope_DataArea != this.DataAreaId)
            {
                this.NumberSequenceScope_DataArea = this.DataAreaId;
                this.fieldState(fieldNum(LedgerAccrualSchemesEntity, NumberSequenceScope_DataArea), FieldState::Defaulted);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accrual scheme staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerAccrualSchemesStaging staging;

        update_recordset staging
            setting NumberSequenceScope_DataArea = curExt()
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && (staging.NumberSequenceScope_DataArea && staging.NumberSequenceScope_DataArea != curExt());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdvanced</ConfigurationKey>
	<FormRef>LedgerAccrualTable</FormRef>
	<Label>@SYS78058</Label>
	<Tags>Ledger setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LedgerAccrualSchemesStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>AccrualSchemes</PublicCollectionName>
	<PublicEntityName>AccrualScheme</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualIdentification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualSchemeDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DebitLedgerDimensionDisplayValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditLedgerDimensionDisplayValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable_NumberSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DebitLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrualBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfOccurrencesPerPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostTransactions</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostInWeekMonthOrQuarter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpreadMonthAndQuarterValues</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarPeriodFrequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalPeriodFrequency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccrualIdentification</Name>
			<DataField>Id</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccrualSchemeDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitLedgerDimensionDisplayValue</Name>
			<Label>@SYS9512</Label>
			<DataField>DisplayValue</DataField>
			<DataSource>DebitLedgerDimensionDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditLedgerDimensionDisplayValue</Name>
			<Label>@SYS7084</Label>
			<DataField>DisplayValue</DataField>
			<DataSource>CreditLedgerDimensionDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditLedgerDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CreditLedgerDimension</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitLedgerDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DebitLedgerDimension</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionDescription</Name>
			<DataField>TransTxt</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccrualBasis</Name>
			<DataField>Period</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfOccurrencesPerPeriod</Name>
			<DataField>PeriodLength</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PeriodType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PeriodType</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PeriodKey</Name>
			<DataField>AllocateKeyId</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostTransactions</Name>
			<DataField>PostingFreq</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostInWeekMonthOrQuarter</Name>
			<DataField>PostingDate</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpreadMonthAndQuarterValues</Name>
			<DataField>ValuePosted</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceTable_NumberSequence</Name>
			<Mandatory>No</Mandatory>
			<DataField>NumberSequence</DataField>
			<DataSource>NumberSequenceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceTable_NumberSequenceScope</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>NumberSequenceScope</DataField>
			<DataSource>NumberSequenceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceScope_DataArea</Name>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>NumberSequenceScope</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceScope_FiscalCalendarPeriod</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>FiscalCalendarPeriod</DataField>
			<DataSource>NumberSequenceScope</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceScope_LegalEntity</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>LegalEntity</DataField>
			<DataSource>NumberSequenceScope</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceScope_OperatingUnit</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>OperatingUnit</DataField>
			<DataSource>NumberSequenceScope</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceScope_OperatingUnitType</Name>
			<Mandatory>No</Mandatory>
			<DataField>OperatingUnitType</DataField>
			<DataSource>NumberSequenceScope</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendarPeriod_FiscalCalendarYear</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>FiscalCalendarYear</DataField>
			<DataSource>FiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendarPeriod_Name</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>FiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendarYear_FiscalCalendar</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>FiscalCalendar</DataField>
			<DataSource>FiscalCalendarYear</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendarYear_Name</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>FiscalCalendarYear</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendar_CalendarId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CalendarId</DataField>
			<DataSource>FiscalCalendar</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntity_PartyNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>LegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntity_DataArea</Name>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>LegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OperatingUnit_PartyNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>OperatingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceTable</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>NumberSequenceTable</DataField>
			<DataSource>LedgerAccrualTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>CalendarPeriodFrequency</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Ledger:CalendarPeriodFrequency</Label>
			<ExtendedDataType>LedgerAccrualCalendar</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>AssetAccrualCalendar</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>FiscalPeriodFrequency</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Ledger:FiscalPeriodFrequency</Label>
			<ExtendedDataType>LedgerAccrualFiscal</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>AssetAccrualFiscal</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AccrualIdentification</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>CreditLedgerDimensionCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CreditLedgerDimension</Name>
					<Field>CreditLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DebitLedgerDimensionCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>DebitLedgerDimension</Name>
					<Field>DebitLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerAccrualTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerAccrualTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>NumberSequenceTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>NumberSequenceTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>NumberSequenceScope</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>NumberSequenceScope</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>FiscalCalendarPeriod</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>FiscalCalendarPeriod</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>FiscalCalendarYear</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>FiscalCalendarYear</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>FiscalCalendar</Name>
														<DynamicFields>Yes</DynamicFields>
														<IsReadOnly>Yes</IsReadOnly>
														<Table>FiscalCalendar</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<JoinMode>OuterJoin</JoinMode>
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>FiscalCalendar</Name>
																<JoinRelationName>FiscalCalendar</JoinRelationName>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>FiscalCalendarYear</Name>
														<JoinRelationName>FiscalCalendarYear</JoinRelationName>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>FiscalCalendarPeriod</Name>
												<JoinRelationName>FiscalCalendarPeriod</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>LegalEntity</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>CompanyInfo</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>LegalEntity</Name>
												<JoinRelationName>CompanyInfo</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>OperatingUnit</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>OMOperatingUnit</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>OperatingUnit</Name>
												<JoinRelationName>OMOperatingUnit</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>NumberSequenceScope</Name>
										<JoinRelationName>NumberSequenceScope</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>NumberSequenceTable</Name>
								<JoinRelationName>NumberSequenceTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CreditLedgerDimensionDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CreditLedgerDimensionDAVC</Name>
								<Field>CreditLedgerDimension</Field>
								<JoinDataSource>LedgerAccrualTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DebitLedgerDimensionDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DebitLedgerDimensionDAVC</Name>
								<Field>DebitLedgerDimension</Field>
								<JoinDataSource>LedgerAccrualTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>