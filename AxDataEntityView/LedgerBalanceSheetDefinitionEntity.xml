<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceSheetDefinitionEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerBalanceSheetDefinitionEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(LedgerBalanceSheetDefinitionEntity, MainAccountForGross):
                ret = MainAccount::findByMainAccountId(this.GrossMainAccount, false, LedgerChartOfAccounts::current());
                break;

            case dataEntityDataSourceStr(LedgerBalanceSheetDefinitionEntity, MainAccountForCorrection):
                ret = MainAccount::findByMainAccountId(this.AdjustmentMainAccount, false, LedgerChartOfAccounts::current());
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LedgerBalanceSheetGross ledgerBalanceSheetGross;
        LedgerBalanceSheetCorrection ledgerBalanceSheetCorrection;
        LedgerBalanceSheetHeader header;

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(LedgerBalanceSheetDefinitionEntity, LedgerBalanceSheetGross))
        {
            if (!this.GrossLineId)
            {
                select firstonly Line from header where header.Line == this.Line;
                if (!header.Line)
                {
                    ledgerBalanceSheetGross = _dataSourceCtx.getBuffer();
                    ledgerBalanceSheetGross.LineId = newGuid();
                }
                _dataSourceCtx.setBuffer(ledgerBalanceSheetGross);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
            }
            else
            {
                ledgerBalanceSheetGross = LedgerBalanceSheetGross::findByLineId(this.GrossLineId);
                if (ledgerBalanceSheetGross)
                {
                    ledgerBalanceSheetGross.ReverseSign = this.GrossInvertSign;
                    ledgerBalanceSheetGross.LineReference = this.GrossTotal;
                    ledgerBalanceSheetGross.AccountsGroup = this.GrossGroupOfAccounts;
                    ledgerBalanceSheetGross.MainAccount =
                        this.GrossMainAccount? MainAccount::findByMainAccountId(this.GrossMainAccount, false, LedgerChartOfAccounts::current()).RecId : 0;

                    _dataSourceCtx.setBuffer(ledgerBalanceSheetGross);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }
            }
        }

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(LedgerBalanceSheetDefinitionEntity, LedgerBalanceSheetCorrection))
        {
            if (!this.AdjustmentLineId)
            {
                select firstonly Line from header where header.Line == this.Line;
                if (!header.Line)
                {
                    ledgerBalanceSheetCorrection = _dataSourceCtx.getBuffer();
                    ledgerBalanceSheetCorrection.LineId = newGuid();
                }
                _dataSourceCtx.setBuffer(ledgerBalanceSheetCorrection);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
            }
            else
            {
                ledgerBalanceSheetCorrection = LedgerBalanceSheetCorrection::findByLineId(this.AdjustmentLineId);
                if (ledgerBalanceSheetCorrection)
                {
                    ledgerBalanceSheetCorrection.ReverseSign = this.AdjustmentInvertSign;
                    ledgerBalanceSheetCorrection.LineReference = this.AdjustmentTotal;
                    ledgerBalanceSheetCorrection.AccountsGroup = this.AdjustmentGroupOfAccounts;
                    ledgerBalanceSheetCorrection.MainAccount =
                        this.AdjustmentMainAccount? MainAccount::findByMainAccountId(this.AdjustmentMainAccount, false, LedgerChartOfAccounts::current()).RecId : 0;

                    _dataSourceCtx.setBuffer(ledgerBalanceSheetCorrection);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>CZ</CountryRegionCodes>
	<FormRef>LedgerBalanceSheetDefinition</FormRef>
	<Label>@GLS108144</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LedgerBalanceSheetDefinitionStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>LedgerBalanceSheetDefinition</PublicCollectionName>
	<PublicEntityName>LedgerBalanceSheetDefinition</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Line</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mark</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundingForm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossInvertSign</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossGroupOfAccounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossMainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossLineId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentInvertSign</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentGroupOfAccounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentMainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentLineId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>LedgerBalanceSheetHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Line</Name>
			<DataField>Line</DataField>
			<DataSource>LedgerBalanceSheetHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Mark</Name>
			<DataField>Mark</DataField>
			<DataSource>LedgerBalanceSheetHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RoundingForm</Name>
			<DataField>RoundType</DataField>
			<DataSource>LedgerBalanceSheetHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerBalanceSheetHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrossInvertSign</Name>
			<Label>@GeneralLedger:GrossInvertSign</Label>
			<DataField>ReverseSign</DataField>
			<DataSource>LedgerBalanceSheetGross</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrossTotal</Name>
			<Label>@GeneralLedger:GrossTotal</Label>
			<DataField>LineReference</DataField>
			<DataSource>LedgerBalanceSheetGross</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrossGroupOfAccounts</Name>
			<Label>@GeneralLedger:GrossGroupOfAccounts</Label>
			<DataField>AccountsGroup</DataField>
			<DataSource>LedgerBalanceSheetGross</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrossMainAccount</Name>
			<Label>@GeneralLedger:GrossMainAccount</Label>
			<Mandatory>No</Mandatory>
			<DataField>MainAccountId</DataField>
			<DataSource>MainAccountForGross</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrossLineId</Name>
			<Label>@GeneralLedger:GrossLineId</Label>
			<DataField>LineId</DataField>
			<DataSource>LedgerBalanceSheetGross</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustmentInvertSign</Name>
			<Label>@GeneralLedger:AdjustmentGrossInvertSign</Label>
			<DataField>ReverseSign</DataField>
			<DataSource>LedgerBalanceSheetCorrection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustmentTotal</Name>
			<Label>@GeneralLedger:AdjustmentGrossTotal</Label>
			<DataField>LineReference</DataField>
			<DataSource>LedgerBalanceSheetCorrection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustmentGroupOfAccounts</Name>
			<Label>@GeneralLedger:AdjustmentGrossGroupOfAccounts</Label>
			<DataField>AccountsGroup</DataField>
			<DataSource>LedgerBalanceSheetCorrection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustmentMainAccount</Name>
			<Label>@GeneralLedger:AdjustmentGrossMainAccount</Label>
			<Mandatory>No</Mandatory>
			<DataField>MainAccountId</DataField>
			<DataSource>MainAccountForCorrection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustmentLineId</Name>
			<Label>@GeneralLedger:AdjustmentLineId</Label>
			<DataField>LineId</DataField>
			<DataSource>LedgerBalanceSheetCorrection</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>Line</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>GrossLineId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AdjustmentLineId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerBalanceSheetHeader</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerBalanceSheetHeader</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerBalanceSheetGross</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerBalanceSheetGross</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>MainAccountForGross</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>MainAccount</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>MainAccount</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>LedgerBalanceSheetHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerBalanceSheetCorrection</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerBalanceSheetCorrection</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>MainAccountForCorrection</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>MainAccount</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>MainAccount</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>LedgerBalanceSheetHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>