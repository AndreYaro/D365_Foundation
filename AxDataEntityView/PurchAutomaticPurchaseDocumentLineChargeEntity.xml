<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutomaticPurchaseDocumentLineChargeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAutomaticPurchaseDocumentLineChargeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, FixedChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Fixed);
                break;
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ProportionalChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Proportional);
                break;
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargePercentage):
                this.defaultChargeCategoryValue(MarkupCategory::Percent);
                break;
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, UnitChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Pcs);
                break;
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, IntercompanyChargePercentage):
                this.defaultChargeCategoryValue(MarkupCategory::InterCompanyPercent);
                break;
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, Value):
                this.defaultValue();
                break;
        }

        this.VendTableGroupAllVendorRelationExpansionMapping::defaultMappedField(_fieldId);
        this.EcoResTableGroupAllProductRelationExpansionMapping::defaultMappedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultChargeCategoryValue</Name>
				<Source><![CDATA[
    private void defaultChargeCategoryValue(MarkupCategory _chargeCategory)
    {
        if (this.isFieldSet(fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)))
        {
            if (this.ChargeCategory != _chargeCategory)
            {
                this.(this.getChargeCategoryValueFieldId(_chargeCategory)) = 0.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValue</Name>
				<Source><![CDATA[
    private void defaultValue()
    {
        FieldId chargeCategoryValueFieldId = this.getChargeCategoryValueFieldId(this.ChargeCategory);

        if (this.isFieldSet(fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory))  ||
            this.isFieldSet(chargeCategoryValueFieldId))
        {
            this.Value = this.(chargeCategoryValueFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                this.VendTableGroupAllVendorRelationExpansionMapping::relationControllingCodeDefaultingDependencies(),
                this.VendTableGroupAllVendorRelationExpansionMapping::codeControlledRelationDefaultingDependencies(),
                this.EcoResTableGroupAllProductRelationExpansionMapping::relationControllingCodeDefaultingDependencies(),
                this.EcoResTableGroupAllProductRelationExpansionMapping::codeControlledRelationDefaultingDependencies(),
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, FixedChargeAmount), this.fixedChargeAmountDefaultingDependencies()],
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ProportionalChargeAmount), this.proportionalChargeAmountDefaultingDependencies()],
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargePercentage), this.chargePercentageDefaultingDependencies()],
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, UnitChargeAmount), this.unitChargeAmountDefaultingDependencies()],
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, IntercompanyChargePercentage), this.intercompanyChargePercentageDefaultingDependencies()],
                [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, Value), this.valueDefaultingDependencies()]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container fixedChargeAmountDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>proportionalChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container proportionalChargeAmountDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargePercentageDefaultingDependencies</Name>
				<Source><![CDATA[
    private container chargePercentageDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container unitChargeAmountDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyChargePercentageDefaultingDependencies</Name>
				<Source><![CDATA[
    private container intercompanyChargePercentageDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueDefaultingDependencies</Name>
				<Source><![CDATA[
    private container valueDefaultingDependencies()
    {
        return [fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory),
                fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, FixedChargeAmount),
                fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ProportionalChargeAmount),
                fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargePercentage),
                fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, UnitChargeAmount),
                fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, IntercompanyChargePercentage)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, FixedChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Fixed) && ret;
                break;

            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ProportionalChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Proportional) && ret;
                break;

            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargePercentage):
                ret = this.checkChargeCategoryValue(MarkupCategory::Percent) && ret;
                break;

            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, UnitChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Pcs) && ret;
                break;

            case fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, IntercompanyChargePercentage):
                ret = this.checkChargeCategoryValue(MarkupCategory::InterCompanyPercent) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChargeCategoryValue</Name>
				<Source><![CDATA[
    private boolean checkChargeCategoryValue(MarkupCategory _chargeCategory)
    {
        boolean ok = true;

        if (this.chargeCategory != _chargeCategory)
        {
            if (this.(this.getChargeCategoryValueFieldId(_chargeCategory)) != 0.0)
            {
                ok = this.chargeCategoryValueCheckFailed(_chargeCategory);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargeCategoryValueCheckFailed</Name>
				<Source><![CDATA[
    private boolean chargeCategoryValueCheckFailed(MarkupCategory _correctChargeCategory)
    {
        FieldId correctChargeCategoryValueFieldId   = this.getChargeCategoryValueFieldId(_correctChargeCategory);
        FieldId incorrectChargeCategoryValueFieldId = this.getChargeCategoryValueFieldId(this.chargeCategory);

        return checkFailed(strFmt("@SCM:ChargeCategoryAndChargeValueMismatchErrorMessage",
                                   fieldId2pname(tablenum(PurchAutomaticPurchaseDocumentLineChargeEntity), correctChargeCategoryValueFieldId),
                                   fieldPName(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory),
                                   _correctChargeCategory,
                                   fieldId2pname(tablenum(PurchAutomaticPurchaseDocumentLineChargeEntity), incorrectChargeCategoryValueFieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargeCategoryValueFieldId</Name>
				<Source><![CDATA[
    private FieldId getChargeCategoryValueFieldId(MarkupCategory _chargeCategory)
    {
        FieldId chargeCategoryValueFieldId;

        switch (_chargeCategory)
        {
            case MarkupCategory::Fixed:
                chargeCategoryValueFieldId = fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, FixedChargeAmount);
                break;

            case MarkupCategory::Proportional:
                chargeCategoryValueFieldId = fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ProportionalChargeAmount);
                break;

            case MarkupCategory::Percent:
                chargeCategoryValueFieldId = fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargePercentage);
                break;

            case MarkupCategory::Pcs:
                chargeCategoryValueFieldId = fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, UnitChargeAmount);
                break;

            case MarkupCategory::InterCompanyPercent:
                chargeCategoryValueFieldId = fieldNum(PurchAutomaticPurchaseDocumentLineChargeEntity, IntercompanyChargePercentage);
                break;

            default:
                throw error(strFmt("@SCM:ChargeCategoryValueCannotBeSpecified", _chargeCategory, fieldPName(PurchAutomaticPurchaseDocumentLineChargeEntity, ChargeCategory)));
        }

        return chargeCategoryValueFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.VendTableGroupAllVendorRelationExpansionMapping::mappedValidateWrite() && ret;
        ret = this.EcoResTableGroupAllProductRelationExpansionMapping::mappedValidateWrite() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoLine))
        {
            MarkupAutoLine markupAutoLine = _dataSourceCtx.getBuffer() as MarkupAutoLine;
            MarkupAutoTable markupAutoTable = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoTable)).getBuffer() as MarkupAutoTable;

            markupAutoLine.initFromAutoTable(markupAutoTable);
        }

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>FixedChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>FixedChargeAmount</c> field.
    /// </returns>
    private static str fixedChargeAmountDefinition()
    {
        return PurchAutomaticPurchaseDocumentLineChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Fixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proportionalChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ProportionalChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ProportionalChargeAmount</c> field.
    /// </returns>
    private static str proportionalChargeAmountDefinition()
    {
        return PurchAutomaticPurchaseDocumentLineChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Proportional);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargePercentageDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargePercentage</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargePercentage</c> field.
    /// </returns>
    private static str chargePercentageDefinition()
    {
        return PurchAutomaticPurchaseDocumentLineChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Percent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>UnitChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>UnitChargeAmount</c> field.
    /// </returns>
    private static str unitChargeAmountDefinition()
    {
        return PurchAutomaticPurchaseDocumentLineChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Pcs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyChargePercentageDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>IntercompanyChargePercentage</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>IntercompanyChargePercentage</c> field.
    /// </returns>
    private static str intercompanyChargePercentageDefinition()
    {
        return PurchAutomaticPurchaseDocumentLineChargeEntity::chargeCategoryValueDefinition(MarkupCategory::InterCompanyPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargeCategoryValueDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining a computed field for the specified category.
    /// </summary>
    /// <param name = "_chargeCategory">
    /// Category to define a computed field for.
    /// </param>
    /// <returns>
    /// A string to compute a category value field.
    /// </returns>
    private static str chargeCategoryValueDefinition(MarkupCategory _chargeCategory)
    {
        return SysComputedColumn::codeDependentRelation(tableStr(PurchAutomaticPurchaseDocumentLineChargeEntity),
                                                        dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoLine),
                                                        fieldStr(MarkupAutoLine, MarkupCategory),
                                                        _chargeCategory,
                                                        fieldStr(MarkupAutoLine, Value),
                                                        0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargingVendorAccountNumberDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargingVendorAccountNumber</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargingVendorAccountNumber</c> field.
    /// </returns>
    private static str chargingVendorAccountNumberDefinition()
    {
        return VendTableGroupAllVendorRelationExpansionMapping::tableCategoryIdDefinition(tableStr(PurchAutomaticPurchaseDocumentLineChargeEntity),
                                                                                          dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargingChargeVendorGroupIdDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargingChargeVendorGroupId</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargingChargeVendorGroupId</c> field.
    /// </returns>
    private static str chargingChargeVendorGroupIdDefinition()
    {
        return VendTableGroupAllVendorRelationExpansionMapping::groupCategoryIdDefinition(tableStr(PurchAutomaticPurchaseDocumentLineChargeEntity),
                                                                                          dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargingItemNumberDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargingItemNumber</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargingItemNumber</c> field.
    /// </returns>
    private static str chargingItemNumberDefinition()
    {
        return EcoResTableGroupAllProductRelationExpansionMapping::tableCategoryIdDefinition(tableStr(PurchAutomaticPurchaseDocumentLineChargeEntity),
                                                                                             dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargingChargeProductGroupIdDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargingChargeProductGroupId</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargingChargeProductGroupId</c> field.
    /// </returns>
    private static str chargingChargeProductGroupIdDefinition()
    {
        return EcoResTableGroupAllProductRelationExpansionMapping::groupCategoryIdDefinition(tableStr(PurchAutomaticPurchaseDocumentLineChargeEntity),
                                                                                             dataEntityDataSourceStr(PurchAutomaticPurchaseDocumentLineChargeEntity, MarkupAutoTable));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<DeveloperDocumentation>@SCM:AutomaticPurchaseDocumentLineChargeEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>MarkupAutoSetup_Vend</FormRef>
	<Label>@SCM:AutomaticPurchaseDocumentLineCharges</Label>
	<Tags>Charges</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PurchAutomaticPurchaseDocumentLineChargeStaging</DataManagementStagingTable>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>AutomaticPurchaseDocumentLineChargeKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ChargingVendorAccountNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargingVendorAccountNumberDefinition</ComputedFieldMethod>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ChargingChargeVendorGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargingChargeVendorGroupIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>VendMarkupGroupId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ChargingItemNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargingItemNumberDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ChargingChargeProductGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargingChargeProductGroupIdDefinition</ComputedFieldMethod>
			<ExtendedDataType>InventMarkupGroupId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseDocumentCurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseChargeCode</Name>
			<DataField>MarkupCode</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeCategory</Name>
			<DataField>MarkupCategory</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ChargePercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargePercentageDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupPercent</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FixedChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fixedChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupFixedAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ProportionalChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>proportionalChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupProportionalAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>UnitChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>unitChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupUnitAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>IntercompanyChargePercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>intercompanyChargePercentageDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupIntercompanyPercent</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Value</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Value</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeAccountingCurrencyCode</Name>
			<DataField>MarkupCurrencyCode</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroupCode</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>MarkupAutoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AccountCode</DataField>
			<DataSource>MarkupAutoTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountRelation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AccountRelation</DataField>
			<DataSource>MarkupAutoTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemCode</DataField>
			<DataSource>MarkupAutoTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemRelation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemRelation</DataField>
			<DataSource>MarkupAutoTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>AutomaticPurchaseDocumentLineChargeKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ChargingVendorAccountNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChargingChargeVendorGroupId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChargingItemNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChargingChargeProductGroupId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>VendTableGroupAllVendorRelationExpansionMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>RelationControllingVendorCode</MapField>
					<MapFieldTo>AccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorCodeControlledRelation</MapField>
					<MapFieldTo>AccountRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorGroupId</MapField>
					<MapFieldTo>ChargingChargeVendorGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorId</MapField>
					<MapFieldTo>ChargingVendorAccountNumber</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>EcoResTableGroupAllProductRelationExpansionMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProductCodeControlledRelation</MapField>
					<MapFieldTo>ItemRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductGroupId</MapField>
					<MapFieldTo>ChargingChargeProductGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductId</MapField>
					<MapFieldTo>ChargingItemNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RelationControllingProductCode</MapField>
					<MapFieldTo>ItemCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>MarkupAutoLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>MarkupAutoLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>MarkupAutoTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>MarkupAutoTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>NoneMarkupReturn</Name>
								<Field>MarkupReturn</Field>
								<Status>Hidden</Status>
								<Value>None</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>VendorModuleType</Name>
								<Field>ModuleType</Field>
								<Status>Hidden</Status>
								<Value>Vend</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>LineModuleCategory</Name>
								<Field>ModuleCategory</Field>
								<Status>Hidden</Status>
								<Value>Line</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TableRecId</Field>
								<JoinDataSource>MarkupAutoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>