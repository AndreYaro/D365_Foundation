<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementTransactionTypeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStatementTransactionTypeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BankStatementTransactionTypeEntity, BankStatementTransactionTypeHeader):

                    BankAccountTable bankAccountTable = BankAccountTable::find(this.BankAccountID);

                    if (!bankAccountTable.RecId)
                    {
                        checkFailed(strFmt("@SYS27061", this.BankAccountID));
                        throw Exception::ViewDataSourceValidation;
                    }
                    else
                    {
                        if (!bankAccountTable.BankReconciliationEnabled)
                        {
                            checkFailed(strFmt("@GLS221348", this.BankAccountID, "@GLS221350"));
                            throw Exception::ViewDataSourceValidation;
                        }
                    }
                    break;

                case dataentitydatasourcestr(BankStatementTransactionTypeEntity, BankStatementTransactionTypeMapping):

                    BankTransType bankTransType = BankTransType::find(this.BankTransType);

                    if (this.StatementTransactionCode != '' && !bankTransType.RecId)
                    {
                        checkFailed(strFmt("@SYP4986038", fieldStr(BankTransType, BankTransType), this.BankTransType, tableStr(BankTransType)));
                        throw Exception::ViewDataSourceValidation;
                    }
                    break;
            }
        }
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<FormRef>BankStatementTransactionTypeMapping</FormRef>
	<Label>@GLS221264</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankStatementTransactionTypeStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountID</Name>
			<DataField>BankAccountTable</DataField>
			<DataSource>BankStatementTransactionTypeHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankTransType</Name>
			<DataField>BankTransType</DataField>
			<DataSource>BankStatementTransactionTypeMapping</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StatementTransactionCode</Name>
			<DataField>StatementTransactionCode</DataField>
			<DataSource>BankStatementTransactionTypeMapping</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>BankAccountID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>StatementTransactionCode</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankStatementTransactionTypeHeader</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankStatementTransactionTypeHeader</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankStatementTransactionTypeMapping</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStatementTransactionTypeMapping</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BankStatementTransactionTypeHeader</Name>
								<JoinRelationName>BankStatementTransactionTypeHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>