<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceCategoryDataEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ResResourceCategoryDataEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for default category before inserting a record.
    /// </summary>
    public void insert()
    {
        try
        {
            // Check for default role, if not found set the current role as default role.
            if (!PSASchedRole::existsDefaultRole())
            {
                this.DefaultResourceCategory = true;
            }
            else
            {
                this.DefaultResourceCategory = false;
            }
            super();
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            info ("@Res:ResourceCategoryCannotBeAdded" + " " + "@Res:ExceptionEncounter");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for default category before inserting a record.
    /// </summary>
    public void update()
    {
        try
        {
            // Unmarking if you already have a default role.
            if (this.DefaultResourceCategory && PSASchedRole::existsDefaultRole())
            {
                this.DefaultResourceCategory = false;
            }
            super();
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            info ("@Res:ResourceCategoryCannotBeUpdated" + " " + "@Res:ExceptionEncounter");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the specified record in the <c>ResResourceCategoryDataEntity</c> data entity based on a supplied data entity RecId field value.
    /// </summary>
    /// <param name = "_resourceCategory">
    /// The <c>ResResourceCategoryDataEntity</c> RecId field value.
    /// </param>
    /// <param name = "_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>ResResourceCategoryDataEntity</c> data entity; otherwise an empty record.
    /// </returns>
    public static ResResourceCategoryDataEntity find(   ResourceCategoryRecId   _resourceCategory,
                                                        boolean                 _forUpdate        = false,
                                                        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ResResourceCategoryDataEntity categoryDataEntity;
        if (_forUpdate)
        {
            categoryDataEntity.selectForUpdate(_forUpdate);
            if (_concurrencyModel != ConcurrencyModel::Auto)
            {
                categoryDataEntity.concurrencyModel(_concurrencyModel);
            }
        }

        select firstonly categoryDataEntity
            where categoryDataEntity.RecId == _resourceCategory;

        return categoryDataEntity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<Label>@Res:ProjectResourceRole</Label>
	<Tags>Project resourcing</Tags>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ResResourceCategoryDataStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ResourceCategories</PublicCollectionName>
	<PublicEntityName>ResourceCategory</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RoleId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>RoleId</DataField>
			<DataSource>PSASchedRole</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>PSASchedRole</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultResourceCategory</Name>
			<DataField>DefaultResourceCategory</DataField>
			<DataSource>PSASchedRole</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCategoryDisabled</Name>
			<DataField>Disable</DataField>
			<DataSource>PSASchedRole</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RoleId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PSASchedRole</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PSASchedRole</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>