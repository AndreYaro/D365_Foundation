<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountLegalEntityOverrideEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MainAccountLegalEntityOverrideEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerMainAccountEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the office integration delegate on the main account form.
    /// </summary>
    /// <param name = "_entityList">The list of entities to show in the office integration list.</param>
    [SubscribesTo(formStr(MainAccount), delegateStr(MainAccount, registerMainAccountEntities))]
    public static void registerMainAccountEntities(List _entityList)
    {
        _entityList.addEnd(tableStr(MainAccountLegalEntityOverrideEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, MainAccount):
                    this.ChartOfAccountsRecId = LedgerChartOfAccounts::resolveNaturalKey(this.ChartOfAccounts);
                    this.MainAccountRecId = MainAccount::resolveNaturalKey(this.MainAccountId, this.ChartOfAccountsRecId);
                    break;
                case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, MainAccountLegalEntity):
                    EnumName enumName = enumStr(DimensionFixed);
                    DimensionEnumerationResolver dimensionEnumerationResolver = DimensionEnumerationResolver::newResolver(this.FixedDimensionsDisplayValue, enumName);
                    this.FixedDimensions = dimensionEnumerationResolver.resolve();
                    break;
                case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, Ledger):
                    // The LegalEntityRecId field name is misleading, as the datasource is, and is expected to be, Ledger
                    this.LegalEntityRecId = Ledger::primaryLedger(CompanyInfo::findDataArea(this.LegalEntityId).RecId);

                    if (this.LegalEntityRecId == 0 && MainAccountLegalEntityValidateLedgerExistsFlight::instance().isEnabled())
                    {
                        throw error(strFmt("@GeneralLedger:LedgerDoesNotExist", this.LegalEntityId));
                    }

                    break;
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityContext, DataEntityDataSourceRuntimeContext _datasourceContext)
    {
        boolean isValid = super(_entityContext, _datasourceContext);

        switch (_datasourceContext.name())
        {
            case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, MainAccount):
                DimensionAttrValueLedgerOverride dimensionAttrValueLedgerOverride = this.createMainAccountDimAttrValueLedgerOverride(_datasourceContext);

                if (isValid)
                {
                    isValid = this.saveActiveFromAndActiveTo(dimensionAttrValueLedgerOverride);
                }

                if (isValid)
                {
                    isValid = this.saveIsSuspended(dimensionAttrValueLedgerOverride);
                }

                if (isValid)
                {
                    dimensionAttrValueLedgerOverride.update();
                }
                break;
            
            case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, Ledger):
                // Ledger is a read-only data source, and should never be saved/updated.  The framework checks for any field
                // being "set" during the insert operation, then falls into a path where if there is no database operation for the
                // data source, it flags the data source as not being saved, and the insert fails.
                isValid = true;
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(MainAccountLegalEntityOverrideEntity, DimensionAttrValueLedgerOverride):
                return DimensionAttrValueLedgerOverride::findByDimensionAttrValueLedgerOverride(
                    this.getMainAccountDimensionAttrValue(this.MainAccountRecId).RecId,
                    this.LegalEntityRecId,
                    false);
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveActiveFromAndActiveTo</Name>
				<Source><![CDATA[
    private boolean saveActiveFromAndActiveTo(DimensionAttrValueLedgerOverride _dimensionAttrValueLedgerOverride)
    {
        boolean isValid = true;

        if (this.isFieldSet(fieldnum(MainAccountLegalEntityOverrideEntity, ActiveFrom)) || this.isFieldSet(fieldnum(MainAccountLegalEntityOverrideEntity, ActiveTo)))
        {
            if (this.ActiveFrom < this.ActiveTo || this.ActiveTo == dateNull())
            {
                _dimensionAttrValueLedgerOverride.ActiveFrom = this.ActiveFrom;
                _dimensionAttrValueLedgerOverride.ActiveTo = this.ActiveTo;
            }
            else
            {
                isValid = checkFailed("@SYS317906");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveIsSuspended</Name>
				<Source><![CDATA[
    private boolean saveIsSuspended(DimensionAttrValueLedgerOverride _dimensionAttrValueLedgerOverride)
    {
        boolean isValid = true;

        if (this.isFieldSet(fieldnum(MainAccountLegalEntityOverrideEntity, IsSuspended)))
        {
            MainAccount mainAccount = MainAccount::find(this.MainAccountRecId, false);

            if (mainAccount.Type == DimensionLedgerAccountType::Total)
            {
                isValid = checkFailed("@GeneralLedger:InvalidMainAccountIsSuspended");
            }
            else
            {
                _dimensionAttrValueLedgerOverride.IsSuspended = this.IsSuspended;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMainAccountDimAttrValueLedgerOverride</Name>
				<Source><![CDATA[
    private DimensionAttrValueLedgerOverride createMainAccountDimAttrValueLedgerOverride(DataEntityDataSourceRuntimeContext _datasourceContext)
    {
        MainAccount mainAccount = _datasourceContext.getBuffer();

        DimensionAttributeValue dimensionAttributeValue = this.getMainAccountDimensionAttrValue(mainAccount.RecId);
        DimensionAttrValueLedgerOverride dimAttrValueLedgerOverride =
            DimensionAttrValueLedgerOverride::findByDimensionAttrValueLedgerOverride(dimensionAttributeValue.RecId, this.LegalEntityRecId, true, ConcurrencyModel::Auto, true);

        return dimAttrValueLedgerOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountDimensionAttrValue</Name>
				<Source><![CDATA[
    private DimensionAttributeValue getMainAccountDimensionAttrValue(MainAccountRecId _mainAccountRecID)
    {
        return DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
            DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount), _mainAccountRecID, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        DimensionEnumerationEntity dimensionEnumerationEntity;
        select dimensionEnumerationEntity
            where dimensionEnumerationEntity.RecordId == this.FixedDimensions;

        this.FixedDimensionsDisplayValue = dimensionEnumerationEntity.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        // clear out any validation errors from previous runs.
        DMFStagingValidationLog log;
        log.skipDataMethods(true);

        delete_from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        MainAccountLegalEntityOverrideStaging staging;

        // Set all Validated records back to NotStarted so they will be attempted again.
        update_recordset staging setting TransferStatus = DMFTransferStatus::NotStarted
            where staging.TransferStatus == DMFTransferStatus::Validated
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        DimensionDataEntitySFKCacheTmp defaultDimCacheTmp = DimensionDefaultSetBasedResolver::Resolve(
            _dmfDefinitionGroupExecution,
            staging,
            false);

        try
        {
            DimensionCache::setWithholdCacheClearAllScopes(true);

            ttsbegin;

            ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);

            update_recordset staging
                setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && staging.TransferStatus == DMFTransferStatus::NotStarted
                   && staging.DefaultDimensionDisplayValue != ''
                exists join defaultDimCacheTmp
                    where defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                       && defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                       && defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
                       && defaultDimCacheTmp.Found == NoYes::No;

            if (MainAccountLegalEntityValidateLedgerExistsFlight::instance().isEnabled())
            {
                MainAccountLegalEntityOverrideEntity::logMissingLedgers(_dmfDefinitionGroupExecution, staging, log);
            }

            // Now that all invalid rows are in an error state, any remaining NotStarted
            // rows should successfully transfer to the target tables.
            MainAccountLegalEntityOverrideEntity::createMissingDimensionAttributeValueReferences(_dmfDefinitionGroupExecution);

            container recordCounts = MainAccountLegalEntityOverrideEntity::createUpdateMainAccountLegalEntity(_dmfDefinitionGroupExecution, defaultDimCacheTmp, log);

            // Update transferred records to success status.
            update_recordset staging
                setting TransferStatus = DMFTransferStatus::Completed
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && staging.TransferStatus == DMFTransferStatus::NotStarted;

            ttscommit;

            return recordCounts;
        }
        finally
        {
            DimensionCache::setWithholdCacheClearAllScopes(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMissingLedgers</Name>
				<Source><![CDATA[
    private static void logMissingLedgers(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        MainAccountLegalEntityOverrideStaging _staging,
        DMFStagingValidationLog _log)
    {
        CompanyInfo companyInfo;
        Ledger ledger;

        update_recordset _staging
                setting TransferStatus = DMFTransferStatus::Error
            where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && _staging.TransferStatus == DMFTransferStatus::NotStarted
            join companyInfo
                where companyInfo.DataArea == _staging.LegalEntityId
            notexists join ledger
                where ledger.PrimaryForLegalEntity == companyInfo.RecId;
            
        TableName tableName = tableStr(MainAccountLegalEntityOverrideStaging);
        FieldName fieldName = fieldStr(MainAccountLegalEntityOverrideStaging, LegalEntityId);
        TableName entityName = "@Ledger:MainAccountLegalEntityOverrides";
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        DMFDefinitionGroupName defGroup = _dmfDefinitionGroupExecution.DefinitionGroup;
        DMFExecutionId executionId = _dmfDefinitionGroupExecution.ExecutionId;
        RefRecId stagingRecId = _staging.RecId;
        ErrorMessage errorMsg = "@GeneralLedger:LedgerMissing";

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
                select defGroup,
                    executionId,
                    stagingRecId,
                    tableName,
                    fieldName,
                    sourceTarget,
                    entityName,
                    errorMsg
                from _staging
                    where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && _staging.TransferStatus == DMFTransferStatus::Error
                join companyInfo
                    where companyInfo.DataArea == _staging.LegalEntityId
                notexists join ledger
                    where ledger.PrimaryForLegalEntity == companyInfo.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMissingDimensionAttributeValueReferences</Name>
				<Source><![CDATA[
    private static void createMissingDimensionAttributeValueReferences(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        MainAccountLegalEntityOverrideStaging staging;
        DimensionAttributeValue dav;
        MainAccount mainAccount;
        LedgerChartOfAccounts ledgerCOA;

        while select staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            join RecId from mainAccount
                where staging.MainAccountId == mainAccount.MainAccountId
            join ledgerCOA
                where staging.ChartOfAccounts == ledgerCOA.Name &&
                    ledgerCOA.RecId == mainAccount.LedgerChartOfAccounts
            notexists join dav
                where dav.EntityInstance == mainAccount.RecId &&
                    dav.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
        {
            DimensionAttributeValue::findByDimensionAttributeAndEntityInst(
                DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount), mainAccount.RecId, false, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateMainAccountLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates <c>MainAccountLegalEntity</c> table records, and the related <c>DimensionAttrValueLedgerOverride</c>
    /// table records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <param name = "_defaultDimCacheTmp">The default dimension resolver temporary table.</param>
    /// <param name = "_log">The DMF staging error log table.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static container createUpdateMainAccountLegalEntity(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DMFStagingValidationLog _log)
    {
        MainAccountLegalEntityOverrideStaging staging;
        DimensionAttributeValue dav;
        MainAccount mainAccount;
        LedgerChartOfAccounts ledgerCOA;
        Ledger ledger;
        CompanyInfo companyInfo;
        DimensionAttrValueLedgerOverride davLedgerOverride;
        MainAccountLegalEntity mainAccountLegalEntity;
        ExchangeRateType exchangeRateType;
        ExtendedDataTypeName defaultDimensionDataType = identifierstr(DimensionDefault);
        int updatedOverrideRecords;

        int64 updatedRecords;
        int64 newRecords;

        // A while loop is for opted here as this table won't see transaction type volume data (thousands, not millions)
        // This allows for better row by row validation, and works around the missing support of a set based resolver for 
        // fixed dimensions enumeration
        while select staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        join RecId from mainAccount
            where staging.MainAccountId == mainAccount.MainAccountId
        join ledgerCOA
            where staging.ChartOfAccounts == ledgerCOA.Name &&
                ledgerCOA.RecId == mainAccount.LedgerChartOfAccounts
        join RecId from companyInfo
            where companyInfo.DataArea == staging.LegalEntityId
        join RecId from ledger
            where ledger.PrimaryForLegalEntity == companyInfo.RecId
        join RecId from dav
            where dav.EntityInstance == mainAccount.RecId &&
                dav.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
        outer join forupdate mainAccountLegalEntity
            where mainAccountLegalEntity.MainAccount == mainAccount.RecId &&
                mainAccountLegalEntity.LegalEntity == companyInfo.RecId
        outer join forupdate davLedgerOverride
            where davLedgerOverride.DimensionAttributeValue == dav.RecId &&
                davLedgerOverride.Ledger == ledger.RecId
        outer join ResolvedReference from _defaultDimCacheTmp
            where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
        outer join RecId from exchangeRateType
            where exchangeRateType.Name == staging.ExchangeAdjustmentRateType
        {
            MainAccountLegalEntityOverrideEntityInitializeParameters entityInitializeParameters =
                MainAccountLegalEntityOverrideEntity::createEntityInitializationParameters(staging, _defaultDimCacheTmp, exchangeRateType, companyInfo, mainAccount);

            MainAccountLegalEntityOverrideEntity::initializeMainAccountLegalEntity(entityInitializeParameters, mainAccountLegalEntity);

            if (mainAccountLegalEntity)
            {
                updatedRecords++;
                mainAccountLegalEntity.update();
            }
            else
            {
                newRecords++;
                mainAccountLegalEntity.insert();
            }

            davLedgerOverride.DimensionAttributeValue = dav.RecId;
            davLedgerOverride.Ledger = ledger.RecId;
            davLedgerOverride.ActiveFrom = staging.ActiveFrom;
            davLedgerOverride.ActiveTo = staging.ActiveTo;
            davLedgerOverride.IsSuspended = staging.IsSuspended;

            if (davLedgerOverride.validateWrite())
            {
                davLedgerOverride.write();
            }
            else
            {
                ErrorMsg error = infolog.text(infologLine());
                MainAccountLegalEntityOverrideEntity::insertLogInvalidActiveDates(_dmfDefinitionGroupExecution, staging, _log, error);
            }
        }

        return [newRecords, updatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLogInvalidActiveDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a validation error message for a staging table records with invalid Active from/to dates.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <param name = "_staging">The staging record to flag the error for.</param>
    /// <param name = "_log">The DMF staging error log table.</param>
    /// <param name = "_error">The error message.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void insertLogInvalidActiveDates(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        MainAccountLegalEntityOverrideStaging _staging,
        DMFStagingValidationLog _log,
        ErrorMessage _error)
    {
        MainAccountLegalEntityOverrideStaging staging;

        TableName tableName = tableStr(MainAccountLegalEntityOverrideStaging);
        FieldName fieldName = fieldStr(MainAccountLegalEntityOverrideStaging, ActiveFrom);
        TableName entityName = "@Ledger:MainAccountLegalEntityOverrides";
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, _error from staging
                where staging.RecId == _staging.RecId;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _log
                where _log.StagingRecId == staging.RecId
                    && _log.StagingTableName == tableName
                    && _log.ErrorMessage == _error;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntityInitializationParameters</Name>
				<Source><![CDATA[
    private static MainAccountLegalEntityOverrideEntityInitializeParameters createEntityInitializationParameters(
        MainAccountLegalEntityOverrideStaging _staging,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        ExchangeRateType _exchangeRateType,
        CompanyInfo _companyInfo,
        MainAccount _mainAccount)
    {
        MainAccountLegalEntityOverrideEntityInitializeParameters entityInitializeParameters = MainAccountLegalEntityOverrideEntityInitializeParameters::construct();

        EnumName enumName = enumStr(DimensionFixed);
        DimensionEnumerationResolver dimensionEnumerationResolver = DimensionEnumerationResolver::newResolver(_staging.FixedDimensionsDisplayValue, enumName);

        entityInitializeParameters.staging = _staging;
        entityInitializeParameters.defaultDimCacheTmp = _defaultDimCacheTmp;
        entityInitializeParameters.exchangeRateType = _exchangeRateType;
        entityInitializeParameters.companyInfo = _companyInfo;
        entityInitializeParameters.mainAccount = _mainAccount;
        entityInitializeParameters.dimensionEnumerationResolver = dimensionEnumerationResolver;

        return entityInitializeParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMainAccountLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>MainAccountLegalEntity</c> object.
    /// </summary>
    /// <param name = "_entityInitializeParameters">
    /// An instance of <c>MainAccountLegalEntityOverrideEntityInitializeParameters</c> object that holds the information for initialization.
    /// </param>
    /// <param name = "_mainAccountLegalEntity">The <c>MainAccountLegalEntity</c> table record.</param>
    protected static void initializeMainAccountLegalEntity(
        MainAccountLegalEntityOverrideEntityInitializeParameters _entityInitializeParameters,
        MainAccountLegalEntity _mainAccountLegalEntity)
    {
        _mainAccountLegalEntity.AutoAllocate = _entityInitializeParameters.staging.AutoAllocate;
        _mainAccountLegalEntity.DefaultDimension = _entityInitializeParameters.defaultDimCacheTmp.ResolvedReference;
        _mainAccountLegalEntity.ExchangeAdjustmentRateType = _entityInitializeParameters.exchangeRateType.RecId;
        _mainAccountLegalEntity.FixedDimensions = _entityInitializeParameters.dimensionEnumerationResolver.resolve();
        _mainAccountLegalEntity.LegalEntity = _entityInitializeParameters.companyInfo.RecId;
        _mainAccountLegalEntity.MainAccount = _entityInitializeParameters.mainAccount.RecId;
        _mainAccountLegalEntity.TaxCode = _entityInitializeParameters.staging.SalesTaxCode;
        _mainAccountLegalEntity.TaxDirection = _entityInitializeParameters.staging.SalesTaxDirection;
        _mainAccountLegalEntity.TaxGroup = _entityInitializeParameters.staging.SalesTaxGroup;
        _mainAccountLegalEntity.TaxItemGroup = _entityInitializeParameters.staging.ItemSalesTaxGroup;
        _mainAccountLegalEntity.TaxItemGroupHeadingDataAreaId = _entityInitializeParameters.staging.ItemSalesTaxGroupHeadingLegalEntity;
        _mainAccountLegalEntity.TaxTableDataAreaId = _entityInitializeParameters.staging.TaxTableLegalEntity;
        _mainAccountLegalEntity.ValidateTaxCode = _entityInitializeParameters.staging.ValidateSalesTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@GeneralLedger:MainAccountLegalEntityOverrideEntityDevDoc</DeveloperDocumentation>
	<FormRef>MainAccountLegalEntity</FormRef>
	<Label>@Ledger:MainAccountLegalEntityOverrides</Label>
	<Tags>Chart of accounts shared</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>MainAccountLegalEntityOverrideStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>MainAccountLegalEntities</PublicCollectionName>
	<PublicEntityName>MainAccountLegalEntity</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChartOfAccounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSuspended</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoAllocate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemSalesTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExempt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidateSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchangeAdjustmentRateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingExchangeAdjustmentRateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccountId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>MainAccountId</DataField>
			<DataSource>MainAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChartOfAccounts</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>LedgerChartOfAccounts</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccountRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>MainAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChartOfAccountsRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerChartOfAccounts</DataField>
			<DataSource>MainAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>Ledger</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AutoAllocate</Name>
			<DataField>AutoAllocate</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
			<DimensionLegalEntityContextField>LegalEntityId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FixedDimensions</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FixedDimensions</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
			<DimensionLegalEntityContextField>LegalEntityId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>FixedDimensionsDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxDirection</Name>
			<DataField>TaxDirection</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExempt</Name>
			<DataField>TaxFree</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroup</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroupHeadingLegalEntity</Name>
			<DataField>TaxItemGroupHeadingDataAreaId</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxTableLegalEntity</Name>
			<DataField>TaxTableDataAreaId</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidateSalesTax</Name>
			<DataField>ValidateTaxCode</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActiveFrom</Name>
			<DataField>ActiveFrom</DataField>
			<DataSource>DimensionAttrValueLedgerOverride</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActiveTo</Name>
			<DataField>ActiveTo</DataField>
			<DataSource>DimensionAttrValueLedgerOverride</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsSuspended</Name>
			<DataField>IsSuspended</DataField>
			<DataSource>DimensionAttrValueLedgerOverride</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeAdjustmentRateType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ExchangeRateType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingExchangeAdjustmentRateType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Label>@Ledger:ReportingExchAdjRateType</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ReportingExchangeRateType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoNotAllowManualEntry</Name>
			<DataField>DoNotAllowManualEntry</DataField>
			<DataSource>MainAccountLegalEntity</DataSource>
			<DimensionLegalEntityContextField>LegalEntityId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>MainAccountId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChartOfAccounts</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DefaultDimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>ExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ExchangeRateTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ExchangeAdjustmentRateType</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>ReportingExchangeRateType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ExchangeRateTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ReportingExchangeAdjustmentRateType</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>MainAccountLegalEntity</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>MainAccountLegalEntity</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CompanyInfo</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CompanyInfo</Name>
								<JoinRelationName>CompanyInfo</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Ledger</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Ledger</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>CompanyInfo</JoinDataSource>
								<RelatedField>PrimaryForLegalEntity</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>MainAccount</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>MainAccount</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerChartOfAccounts</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>LedgerChartOfAccounts</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>LedgerChartOfAccounts</Name>
										<JoinRelationName>LedgerChartOfAccounts</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>MainAccount</Name>
								<JoinRelationName>MainAccount</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionAttributeValueWithTypeView</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionAttributeValueWithTypeView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>Type</Name>
								<Field>Type</Field>
								<Value>MainAccount</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>MainAccount</JoinDataSource>
								<RelatedField>EntityInstance</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DefaultDimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>MainAccountLegalEntity</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionAttrValueLedgerOverride</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DimensionAttrValueLedgerOverride</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>DimensionAttributeValueWithTypeView</JoinDataSource>
								<RelatedField>DimensionAttributeValue</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RecId</Field>
								<JoinDataSource>Ledger</JoinDataSource>
								<RelatedField>Ledger</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ExchangeRateType</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ExchangeRateType</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ExchangeAdjustmentRateType</Field>
								<JoinDataSource>MainAccountLegalEntity</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ReportingExchangeRateType</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ExchangeRateType</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ReportingExchangeAdjustmentRateType</Field>
								<JoinDataSource>MainAccountLegalEntity</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>