<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowApprovalCategoryEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkflowApprovalCategoryEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadApprovalCategories</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("loadApprovalCategories", false)]
    public static str loadApprovalCategories()
    {
        str result;

        using (var activityContext = WorkflowApprovalHelper::getLoggerActivities(tableStr(WorkflowApprovalCategoryEntity)).CategoryEntity_loadApprovalCategories())
        {
            List categoryList = new List(Types::Class);
            WorkflowApprovalCategoryTable categoryTable;

            while select RefTableId from categoryTable
            {
                categoryList.addEnd(WorkflowApprovalCategoryEntity::getCategoryMap(categoryTable.RefTableId));
            }

            result = JSONSerializerExtension::serializeClass(categoryList);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategoryMap</Name>
				<Source><![CDATA[
    private static Map getCategoryMap(RefRecId _refTableId)
    {
        Map result = new Map(Types::String, Types::String);

        WorkflowApprovalCategoryInitializer initializer = WorkflowApprovalCategoryInitializer::getInitializerInstances().lookup(_refTableId);

        result.add('PendingApprovalItemCount', any2Str(initializer.calculatePendingApprovalItemCount()));
        result.add('ReferenceTableName', initializer.approvalCategoryTableName());

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityDetails</Name>
				<Source><![CDATA[
    [SysObsolete("Use loadApprovalCategories() instead.", false, 30\04\2024)]
    public str getEntityDetails()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>performWorkflowAction</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("performWorkflowAction", false)]
    public static void performWorkflowAction(
        str _workflowRecId,
        str _actionMenuItemName,
        str _comment,
        str _delegateUser)
    {
        using (var activityContext = WorkflowApprovalHelper::getLoggerActivities(tableStr(WorkflowApprovalCategoryEntity)).CategoryEntity_performWorkflowAction())
        {
            WorkflowApprovalCategoryEntity::getActionManager(_actionMenuItemName)
                .processApprovalAction(_actionMenuItemName, _comment, _delegateUser, str2Int64(_workflowRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionManager</Name>
				<Source><![CDATA[
    private static WorkflowApprovalWorkItemActionManager getActionManager(str _actionMenuItemName)
    {
        WorkflowApprovalWorkItemActionManager actionManager;

        switch (_actionMenuItemName)
        {
            default:
                actionManager = new WorkflowApprovalWorkItemActionManager();
        }

        return actionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurUserApprovalActions</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("loadCurUserApprovalActions", false)]
    public static str loadCurUserApprovalActions()
    {
        str result = '{}';

        using (var activityContext = WorkflowApprovalHelper::getLoggerActivities(tableStr(WorkflowApprovalCategoryEntity)).CategoryEntity_loadCurUserApprovalActions())
        {
            List elementIdList = new List(Types::String);
            WorkflowWorkItemTable workItemTable;

            SysDaQueryObject query = WorkflowApprovalHelper::buildQueryGetApprovalElementId(workItemTable);
            SysDaSearchObject searchObject = new SysDaSearchObject(query);
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();

            while(searchStatement.findNext(searchObject))
            {
                elementIdList.addEnd(guid2Str(workItemTable.ElementId));
            }

            if (elementIdList.elements() > 0)
            {
                List actionsObject = WorkflowApprovalHelper::getElementActions(elementIdList);

                result = JSONSerializerExtension::serializeClass(actionsObject);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadElementApprovalActions</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("loadElementApprovalActions", false)]
    public static str loadElementApprovalActions(str _elementIds)
    {
        str result = '{}';

        using (var activityContext = WorkflowApprovalHelper::getLoggerActivities(tableStr(WorkflowApprovalCategoryEntity)).CategoryEntity_loadElementApprovalActions())
        {
            if (_elementIds != '')
            {
                List elementIdList = strSplit(_elementIds, ',');
                List actionsObject = WorkflowApprovalHelper::getElementActions(elementIdList);

                result = JSONSerializerExtension::serializeClass(actionsObject);
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SCM:ApprovalCategoryEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AutoCreateDataverse>Yes</AutoCreateDataverse>
	<IsPublic>Yes</IsPublic>
	<IsReadOnly>Yes</IsReadOnly>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ApprovalCategories</PublicCollectionName>
	<PublicEntityName>ApprovalCategory</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceTableId</Name>
			<DataField>RefTableId</DataField>
			<DataSource>WorkflowApprovalCategoryTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ReferenceTableId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WorkflowApprovalCategoryTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>WorkflowApprovalCategoryTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>