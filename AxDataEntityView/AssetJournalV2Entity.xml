<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetJournalV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetJournalV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "_entityCtx">The context of the entity.</param>
    /// <param name = "_dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(AssetJournalV2Entity, LedgerJournalTable):
                    LedgerJournalEntityBase::findOrCreateLedgerJournalHeader(this);

                    break;
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    /// <remarks>
    /// When doing set-based inserts, the full defaulting logic from LedgerJournalTrans is not
    /// run. In order to get full defaulting, row-by-row processing must be performed. Since
    /// this method is called specifically from the DIXF framework, the entity in
    /// DIXF can be marked as AllowSetBased=False in order to force row-by-row defaulting
    /// and validation. The trade off is a significant degradation in copy performance.
    /// </remarks>
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFStagingValidationLog log;

        AssetJournalV2Entity::clearDMFValidationLog(_dmfDefinitionGroupExecution, log);

        str tableName = tableStr(AssetJournalV2EntityStaging);
        str fieldName = fieldStr(AssetJournalV2EntityStaging, AccountDisplayValue);
        str offsetFieldName = fieldStr(AssetJournalV2EntityStaging, OffsetAccountDisplayValue);
        str entityName = "@FixedAssets:FA_EntityTitle_FixedAssetJournalV2";

        AssetJournalV2EntityStaging staging;
        DimensionDataEntitySFKErrorTmp errorTmp;

        // Set all selected error records back to NotStarted so they will be attempted again.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::NotStarted
            where staging.TransferStatus == DMFTransferStatus::Error
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        DimensionDataEntitySFKCacheTmp dimCacheTmp = LedgerDimensionDynamicAccountSetBasedResolver::Resolve(
            _dmfDefinitionGroupExecution,
            staging,
            fieldName,
            offsetFieldName,
            tableName,
            entityName);

        AssetJournalV2Entity entity;
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
        dimCacheTmpRef.linkPhysicalTableInstance(dimCacheTmp);

        ttsbegin;

        // Put any rows that have unresolved accounts in an error state first.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join dimCacheTmp
                where dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                   && dimCacheTmp.EnumValue == staging.AccountType
                   && dimCacheTmp.HierarchyType == hierarchyType
                   && dimCacheTmp.ExtendedDataType == dataType
                   && dimCacheTmp.Found == NoYes::No;

        // Offset accounts.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join dimCacheTmp
                where dimCacheTmp.IntegrationString == staging.OffsetAccountDisplayValue
                   && dimCacheTmp.EnumValue == staging.OffsetAccountType
                   && dimCacheTmp.HierarchyType == hierarchyType
                   && dimCacheTmp.ExtendedDataType == dataType
                   && dimCacheTmp.Found == NoYes::No;

        DimensionDataEntitySFKCacheTmp dimCacheTmpDefaultDimension = DimensionDefaultSetBasedResolver::Resolve(_dmfDefinitionGroupExecution, staging);
        const DimensionHierarchyType hierarchyTypeDimensionDefault = DimensionHierarchyType::DataEntityDefaultDimensionFormat;
        ExtendedDataTypeName dataTypeDimensionDefault = extendedTypeStr(DimensionDefault);

        // default dimensions
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            exists join dimCacheTmpDefaultDimension
                where dimCacheTmpDefaultDimension.IntegrationString == staging.DefaultDimensionDisplayValue
                   && dimCacheTmpDefaultDimension.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCacheTmpDefaultDimension.HierarchyType == hierarchyTypeDimensionDefault
                   && dimCacheTmpDefaultDimension.ExtendedDataType == dataTypeDimensionDefault
                   && dimCacheTmpDefaultDimension.Found == NoYes::No;

        AssetJournalV2Entity::validateJournalNameAndType(_dmfDefinitionGroupExecution, log);
        AssetJournalV2Entity::validateAndUpdateExchangeRates(_dmfDefinitionGroupExecution, log);

        if (!FeatureStateProvider::isFeatureEnabled(LedgerJournalSystemBlockedFeatureReverseFlight::instance()))
        {
            AssetJournalV2Entity::validateJournalUnposted(_dmfDefinitionGroupExecution, log);
            AssetJournalV2Entity::validateJournalNotSystemBlocked(_dmfDefinitionGroupExecution, log);
        }
        
        select firstonly RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::Error;

        if (staging.Recid)
        {
            info("@FixedAssets:FA_ErrorMessage_FixedAssetJournalEntityValidation");
        }

        // Now that all invalid rows are in an error state, any remaining NotStarted
        // rows should successfully transfer to the target tables.
        // Since an insert_recordset call to the LedgerJournalEntity will automatically degrade
        // to row-by-row operations, the insert to the header and line tables must be done
        // individually with data methods skipped.

        LedgerJournalTable ledgerJournalTable;
        LedgerJournalName ledgerJournalName;
        ledgerJournalTable ledgerJournalTableExists;
        ledgerJournalTable.skipDataMethods(true);

        #isoCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            insert_recordset ledgerJournalTable (JournalName, JournalNum, CurrentOperationsTax, Name, ExchrateSecondary,
                JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummaryPosting, NumberSequenceTable)
            select JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary from staging
                group by JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted
                join JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary, NumberSequenceTable from ledgerJournalName
                    group by JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary, NumberSequenceTable
                        where ledgerJournalName.JournalName == staging.JournalNameId
                notexists join ledgerJournalTableExists
                    where ledgerJournalTableExists.JournalNum == staging.JournalBatchNumber;
        }
        else
        {
            LedgerJournalWFApprovalStatus defaultWFStatusApproval = LedgerJournalWFApprovalStatus::NotSubmitted;
            LedgerJournalWFApprovalStatus defaultWFStatusNoApproval = LedgerJournalWFApprovalStatus::None;

            insert_recordset ledgerJournalTable (JournalName, JournalNum, CurrentOperationsTax, Name, ExchrateSecondary,
                    JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummaryPosting, WorkflowApprovalStatus)
                select JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary from staging
                    group by JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary
                        where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::NotStarted
                    join JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary, defaultWFStatusApproval from ledgerJournalName
                       group by JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary
                            where ledgerJournalName.JournalName == staging.JournalNameId
                                && ledgerJournalName.WorkflowApproval == NoYes::Yes
                    notexists join ledgerJournalTableExists
                        where ledgerJournalTableExists.JournalNum == staging.JournalBatchNumber;

            insert_recordset ledgerJournalTable (JournalName, JournalNum, CurrentOperationsTax, Name, ExchrateSecondary,
                    JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummaryPosting, WorkflowApprovalStatus)
                select JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary from staging
                    group by JournalNameId, JournalBatchNumber, PostingLayer, Description, ExchangeRateSecondary
                        where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::NotStarted
                    join JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary, defaultWFStatusNoApproval from ledgerJournalName
                        group by JournalType, VoucherAllocatedAtPosting, LedgerJournalInclTax, LinesLimitBeforeDistribution, DetailSummary
                            where ledgerJournalName.JournalName == staging.JournalNameId
                                && ledgerJournalName.WorkflowApproval == NoYes::No
                    notexists join ledgerJournalTableExists
                        where ledgerJournalTableExists.JournalNum == staging.JournalBatchNumber;
        }

        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans ledgerJournalTransExists;
        // <GCN>
        LedgerVoucherType_CN voucherType_CN;
        // </GCN>
        ledgerJournalTrans.skipDataMethods(true);
        SelectableDataArea currentCompany = curExt();

        update_recordset ledgerJournalTrans setting
                Txt = staging.Text,
                Voucher = staging.Voucher,
                // <GCN>
                Voucher_CN = staging.ChineseVoucher,
                LedgerVoucherType_CN = voucherType_CN.RecId,
                // </GCN>
                TransDate = staging.TransDate,
                AmountCurCredit = staging.CreditAmount,
                AmountCurDebit = staging.DebitAmount,
                CurrencyCode = staging.CurrencyCode,
                LedgerDimension = dimCacheTmp.ResolvedReference,
                OffsetLedgerDimension = dimCacheTmpRef.ResolvedReference,
                DefaultDimension = dimCacheTmpDefaultDimension.ResolvedReference,
                ExchRate = staging.ExchangeRate,
                ExchrateSecond = staging.ExchangeRateSecondary,
                ReportingCurrencyExchRate = staging.ReportingCurrencyExchRate,
                ReportingCurrencyExchRateSecondary = staging.ReportingCurrencyExchRateSecondary
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            join ResolvedReference from dimCacheTmp
                where dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                    && dimCacheTmp.EnumValue == staging.AccountType
                    && dimCacheTmp.HierarchyType == hierarchyType
                    && dimCacheTmp.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpRef
                where dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                    && dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                    && dimCacheTmpRef.HierarchyType == hierarchyType
                    && dimCacheTmpRef.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpDefaultDimension
                where dimCacheTmpDefaultDimension.IntegrationString == staging.DefaultDimensionDisplayValue
                   && dimCacheTmpDefaultDimension.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCacheTmpDefaultDimension.HierarchyType == hierarchyTypeDimensionDefault
                   && dimCacheTmpDefaultDimension.ExtendedDataType == dataTypeDimensionDefault
            // <GCN>
            outer join RecId from voucherType_CN
                where voucherType_CN.Id == staging.ChineseVoucherType
            // </GCN>
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTableExists.Posted == NoYes::Yes;

        // Get the number of records updated.
        int64 updatedRecords = ledgerJournalTrans.RowCount();

        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        LedgerJournalTrans_Asset ledgerJournalTransAssetExists;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        ledgerJournalTransAsset.skipDataMethods(true);

        update_recordset ledgerJournalTransAsset setting
                BookId = staging.BookId,
                TransType = staging.TransactionType,
                AssetId = dimensionAttributeValueCombination.DisplayValue,
                ConsumptionQuantity = staging.ConsumptionUnits,
                AssetGroup_IN = staging.IndianAssetGroup
           join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.TransactionType != AssetTransTypeJournal::Depreciation
                    && staging.TransactionType != AssetTransTypeJournal::DepreciationAdj
                    && staging.TransactionType != AssetTransTypeJournal::ExtraordinaryDepreciation
                    && staging.TransactionType != AssetTransTypeJournal::BonusDepreciation
            join ledgerjournaltrans
                where ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                    && ledgerjournaltrans.LineNum == staging.LineNumber
                    && ledgerjournaltrans.RecId == ledgerJournalTransAsset.RefRecId
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTableExists.Posted == NoYes::Yes;

        update_recordset ledgerJournalTransAsset setting
                BookId = staging.BookId,
                TransType = staging.TransactionType,
                AssetId = dimensionAttributeValueCombination.DisplayValue,
                ConsumptionQuantity = staging.ConsumptionUnits,
                AmountCreditReportingCurrency = staging.CreditAmountReportingCurrency,
                AmountDebitReportingCurrency = staging.DebitAmountReportingCurrency,
                AssetGroup_IN = staging.IndianAssetGroup
           join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && (staging.TransactionType == AssetTransTypeJournal::Depreciation
                        ||  staging.TransactionType == AssetTransTypeJournal::DepreciationAdj
                        ||  staging.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation
                        ||  staging.TransactionType == AssetTransTypeJournal::BonusDepreciation)
            join ledgerjournaltrans
                where ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                    && ledgerjournaltrans.LineNum == staging.LineNumber
                    && ledgerjournaltrans.RecId == ledgerJournalTransAsset.RefRecId
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTableExists.Posted == NoYes::Yes;


        AssetBookTableDerived assetBookTableDerived;
        AssetBookTableDerivedJournal assetBookTableDerivedJournal;
        AssetBook assetBook;
        assetBookTableDerivedJournal.skipDataMethods(true);

        delete_from assetBookTableDerivedJournal
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == assetBookTableDerivedJournal.RefRecId
            exists join staging
                where staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTableExists.Posted == NoYes::Yes;

        // <GCN>
        if (LedgerParameters::isChineseVoucher_CN())
        {
            insert_recordset ledgerJournalTrans (
                JournalNum, Txt, Voucher, TransDate, LineNum,
                Company, OffsetCompany, AccountType, OffsetAccountType,
                AmountCurCredit, AmountCurDebit, CurrencyCode, 
                ExchRate, ExchRateSecond,
                ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary,
                Voucher_CN,
                LedgerDimension, OffsetLedgerDimension, DefaultDimension,
                LedgerVoucherType_CN
                )
                select
                    JournalBatchNumber, Text, Voucher, TransDate, LineNumber,
                    currentCompany, currentCompany, AccountType, OffsetAccountType,
                    CreditAmount, DebitAmount, CurrencyCode, 
                    ExchangeRate, ExchangeRateSecondary,
                    ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary,
                    ChineseVoucher
                    from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            join ResolvedReference from dimCacheTmp
                where dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                   && dimCacheTmp.EnumValue == staging.AccountType
                   && dimCacheTmp.HierarchyType == hierarchyType
                   && dimCacheTmp.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpRef
                where dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                   && dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                   && dimCacheTmpRef.HierarchyType == hierarchyType
                   && dimCacheTmpRef.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpDefaultDimension
                where dimCacheTmpDefaultDimension.IntegrationString == staging.DefaultDimensionDisplayValue
                   && dimCacheTmpDefaultDimension.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCacheTmpDefaultDimension.HierarchyType == hierarchyTypeDimensionDefault
                   && dimCacheTmpDefaultDimension.ExtendedDataType == dataTypeDimensionDefault
            outer join RecId from voucherType_CN
                where voucherType_CN.Id == staging.ChineseVoucherType
            notexists join ledgerJournalTransExists
                    where ledgerJournalTransExists.JournalNum == staging.JournalBatchNumber
                        && ledgerJournalTransExists.LineNum == staging.LineNumber
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTableExists.Posted == NoYes::Yes;
        }
        else
        {
        // </GCN>
            insert_recordset ledgerJournalTrans (
                JournalNum, Txt, Voucher, TransDate, LineNum,
                Company, OffsetCompany, AccountType, OffsetAccountType,
                AmountCurCredit, AmountCurDebit, CurrencyCode, 
                ExchRate, ExchRateSecond,
                ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary,
                LedgerDimension, OffsetLedgerDimension, DefaultDimension
                )
                select
                    JournalBatchNumber, Text, Voucher, TransDate, LineNumber,
                    currentCompany, currentCompany, AccountType, OffsetAccountType,
                    CreditAmount, DebitAmount, CurrencyCode, 
                    ExchangeRate, ExchangeRateSecondary,
                    ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary
                    from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && staging.TransferStatus == DMFTransferStatus::NotStarted
            join ResolvedReference from dimCacheTmp
                where dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                   && dimCacheTmp.EnumValue == staging.AccountType
                   && dimCacheTmp.HierarchyType == hierarchyType
                   && dimCacheTmp.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpRef
                where dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                   && dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                   && dimCacheTmpRef.HierarchyType == hierarchyType
                   && dimCacheTmpRef.ExtendedDataType == dataType
            join ResolvedReference from dimCacheTmpDefaultDimension
                where dimCacheTmpDefaultDimension.IntegrationString == staging.DefaultDimensionDisplayValue
                   && dimCacheTmpDefaultDimension.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCacheTmpDefaultDimension.HierarchyType == hierarchyTypeDimensionDefault
                   && dimCacheTmpDefaultDimension.ExtendedDataType == dataTypeDimensionDefault
            notexists join ledgerJournalTransExists
                where ledgerJournalTransExists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTransExists.LineNum == staging.LineNumber
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTableExists.Posted == NoYes::Yes;
        // <GCN>
        }
        // </GCN>

        // Get the number of records inserted.
        int64 newRecords = ledgerJournalTrans.RowCount();

        insert_recordset ledgerJournalTransAsset(
                BookId, TransType,
                Company, ConsumptionQuantity,
                AssetGroup_IN,
                RefRecId, AssetId)
            select
                BookId, TransactionType,
                currentCompany, ConsumptionUnits,
                IndianAssetGroup
            from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.TransactionType != AssetTransTypeJournal::Depreciation
                    && staging.TransactionType != AssetTransTypeJournal::DepreciationAdj
                    && staging.TransactionType != AssetTransTypeJournal::ExtraordinaryDepreciation
                    && staging.TransactionType != AssetTransTypeJournal::BonusDepreciation
        join RecId from ledgerjournaltrans
            where ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                && ledgerjournaltrans.LineNum == staging.LineNumber
        join DisplayValue from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
        notexists join ledgerJournalTransAssetExists
                where ledgerJournalTransAssetExists.RefRecId == ledgerJournalTrans.RecId;

        insert_recordset ledgerJournalTransAsset(
                BookId, TransType,
                Company, ConsumptionQuantity,
                AmountCreditReportingCurrency,
                AmountDebitReportingCurrency,
                AssetGroup_IN,
                RefRecId, AssetId)
            select
                BookId, TransactionType,
                currentCompany, ConsumptionUnits,
                CreditAmountReportingCurrency,
                DebitAmountReportingCurrency,
                IndianAssetGroup
            from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && (staging.TransactionType == AssetTransTypeJournal::Depreciation
                    || staging.TransactionType == AssetTransTypeJournal::DepreciationAdj
                    || staging.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation
                    || staging.TransactionType == AssetTransTypeJournal::BonusDepreciation)
        join RecId from ledgerjournaltrans
            where ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                && ledgerjournaltrans.LineNum == staging.LineNumber
        join DisplayValue from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
        notexists join ledgerJournalTransAssetExists
                where ledgerJournalTransAssetExists.RefRecId == ledgerJournalTrans.RecId;

        // insert derived book records for value models
        // inserts all debit amounts for derived value models
        insert_recordset assetBookTableDerivedJournal (AssetBookId, AmountCur, RefRecId, ReportingCurrencyAmount)
            select BookIdDerived from assetBookTableDerived
        join AmountCurDebit, RecId from ledgerJournalTrans
            where ledgerJournalTrans.AmountCurCredit == 0
        join AmountDebitReportingCurrency from ledgerJournalTransAsset
            where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
        join staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                && ledgerjournaltrans.LineNum == staging.LineNumber
                && assetBookTableDerived.BookId == staging.BookId
                && ((assetBookTableDerived.AssetTransType == AssetTransType::Acquisition
                        && staging.TransactionType == AssetTransTypeJournal::Acquisition)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::AcquisitionAdj
                        && staging.TransactionType == AssetTransTypeJournal::AcquisitionAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::Depreciation
                        && staging.TransactionType == AssetTransTypeJournal::Depreciation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DepreciationAdj
                        && staging.TransactionType == AssetTransTypeJournal::DepreciationAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::Revaluation
                        && staging.TransactionType == AssetTransTypeJournal::Revaluation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteUpAdj
                        && staging.TransactionType == AssetTransTypeJournal::WriteUpAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteDownAdj
                        && staging.TransactionType == AssetTransTypeJournal::WriteDownAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalSale
                        && staging.TransactionType == AssetTransTypeJournal::DisposalSale)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalScrap
                        && staging.TransactionType == AssetTransTypeJournal::DisposalScrap)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserve
                        && staging.TransactionType == AssetTransTypeJournal::CapitalReserve)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserveTransfer
                        && staging.TransactionType == AssetTransTypeJournal::CapitalReserveTransfer)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::ExtraordinaryDepreciation
                        && staging.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryDecrease
                        && staging.TransactionType == AssetTransTypeJournal::DerogatoryDecrease)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryIncrease
                        && staging.TransactionType == AssetTransTypeJournal::DerogatoryIncrease))
        exists join assetbook
            where assetBook.BookId == assetBookTableDerived.BookIdDerived
                    && assetBook.AssetId == dimensionAttributeValueCombination.DisplayValue
        notexists join ledgerJournalTableExists
            where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                && ledgerJournalTableExists.Posted == NoYes::Yes;

        // insert all credit amounts for derived value models
        AssetBookTableDerivedJournal assetBookTableDerivedJournalExists;

        insert_recordset assetBookTableDerivedJournal (AssetBookId, AmountCur, RefRecId, ReportingCurrencyAmount)
            select BookIdDerived from assetBookTableDerived
        join AmountCurCredit, RecId from ledgerJournalTrans
            where ledgerJournalTrans.AmountCurDebit == 0
        join AmountCreditReportingCurrency from ledgerJournalTransAsset
            where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == ledgerJournalTrans.LedgerDimension
        join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                && ledgerjournaltrans.LineNum == staging.LineNumber
                && assetBookTableDerived.BookId == staging.BookId
                && ((assetBookTableDerived.AssetTransType == AssetTransType::Acquisition
                        && staging.TransactionType == AssetTransTypeJournal::Acquisition)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::AcquisitionAdj
                        && staging.TransactionType == AssetTransTypeJournal::AcquisitionAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::Depreciation
                        && staging.TransactionType == AssetTransTypeJournal::Depreciation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DepreciationAdj
                        && staging.TransactionType == AssetTransTypeJournal::DepreciationAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::Revaluation
                        && staging.TransactionType == AssetTransTypeJournal::Revaluation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteUpAdj
                        && staging.TransactionType == AssetTransTypeJournal::WriteUpAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteDownAdj
                        && staging.TransactionType == AssetTransTypeJournal::WriteDownAdj)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalSale
                        && staging.TransactionType == AssetTransTypeJournal::DisposalSale)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalScrap
                        && staging.TransactionType == AssetTransTypeJournal::DisposalScrap)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserve
                        && staging.TransactionType == AssetTransTypeJournal::CapitalReserve)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserveTransfer
                        && staging.TransactionType == AssetTransTypeJournal::CapitalReserveTransfer)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::ExtraordinaryDepreciation
                        && staging.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryDecrease
                        && staging.TransactionType == AssetTransTypeJournal::DerogatoryDecrease)
                    ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryIncrease
                        && staging.TransactionType == AssetTransTypeJournal::DerogatoryIncrease))
        exists join assetbook
            where assetBook.BookId == assetBookTableDerived.BookIdDerived
                    && assetBook.AssetId == dimensionAttributeValueCombination.DisplayValue
        notexists join assetBookTableDerivedJournalExists
            where assetBookTableDerivedJournalExists.AssetBookId == assetBookTableDerived.BookIdDerived
                && assetBookTableDerivedJournalExists.RefRecId == ledgerJournalTrans.RecId
        notexists join ledgerJournalTableExists
            where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                && ledgerJournalTableExists.Posted == NoYes::Yes;

        update_recordset assetBookTableDerivedJournal
            setting AmountCur = -1 * assetBookTableDerivedJournal.AmountCur,
                ReportingCurrencyAmount = -1 * assetBookTableDerivedJournal.ReportingCurrencyAmount
            join assetBookTableDerived
                where assetBookTableDerived.BookIdDerived == assetBookTableDerivedJournal.AssetBookId
            join ledgerJournalTrans
                where ledgerJournalTrans.AmountCurDebit == 0
                    && assetBookTableDerivedJournal.RefRecId == ledgerJournalTrans.RecId
            join staging
                  where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && ledgerjournaltrans.JournalNum == staging.JournalBatchNumber
                    && ledgerjournaltrans.LineNum == staging.LineNumber
                    && assetBookTableDerived.BookId == staging.BookId
                    && ((assetBookTableDerived.AssetTransType == AssetTransType::Acquisition
                            && staging.TransactionType == AssetTransTypeJournal::Acquisition)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::AcquisitionAdj
                            && staging.TransactionType == AssetTransTypeJournal::AcquisitionAdj)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::Depreciation
                            && staging.TransactionType == AssetTransTypeJournal::Depreciation)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::DepreciationAdj
                            && staging.TransactionType == AssetTransTypeJournal::DepreciationAdj)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::Revaluation
                            && staging.TransactionType == AssetTransTypeJournal::Revaluation)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteUpAdj
                            && staging.TransactionType == AssetTransTypeJournal::WriteUpAdj)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::WriteDownAdj
                            && staging.TransactionType == AssetTransTypeJournal::WriteDownAdj)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalSale
                            && staging.TransactionType == AssetTransTypeJournal::DisposalSale)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::DisposalScrap
                            && staging.TransactionType == AssetTransTypeJournal::DisposalScrap)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserve
                            && staging.TransactionType == AssetTransTypeJournal::CapitalReserve)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::CapitalReserveTransfer
                            && staging.TransactionType == AssetTransTypeJournal::CapitalReserveTransfer)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::ExtraordinaryDepreciation
                            && staging.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryDecrease
                            && staging.TransactionType == AssetTransTypeJournal::DerogatoryDecrease)
                        ||(assetBookTableDerived.AssetTransType == AssetTransType::DerogatoryIncrease
                            && staging.TransactionType == AssetTransTypeJournal::DerogatoryIncrease))
            notexists join ledgerJournalTableExists
                where ledgerJournalTableExists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTableExists.Posted == NoYes::Yes;

        // Update transferred records to success status.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted;

        ttscommit;

        return [newRecords, updatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = AssetJournalV2Entity::validateFixedAssetJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = AssetJournalV2Entity::validateFixedAssetJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will add the derived books to the fixed asset journal.
    /// </summary>
    public void insert()
    {
        this.AccountType = LedgerJournalACType::FixedAssets;
        AssetJournalEntityMap::updateReportingCurrencyAmounts(this);

        super();

        LedgerJournalTrans ledgerJournalTrans;

        select RecId from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == this.JournalBatchNumber
                && ledgerJournalTrans.LineNum == this.LineNumber;

        AssetJournalEntityMap::populateAssetBookTableDerivedJournal(this, ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will delete the derived books from the fixed asset journal.
    /// </summary>
    public void delete()
    {
        AssetBookTableDerivedJournal    assetBookTableDerivedJournal;
        LedgerJournalTrans              ledgerJournalTrans;

        select RecId from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == this.JournalBatchNumber
                && ledgerJournalTrans.LineNum == this.LineNumber;

        delete_from assetBookTableDerivedJournal
            where assetBookTableDerivedJournal.RefRecId == ledgerJournalTrans.RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will update the derived books in the fixed asset journal.
    /// </summary>
    public void update()
    {
        AssetJournalEntityMap::updateReportingCurrencyAmounts(this);

        LedgerJournalTrans prevLedgerJournalTrans;
        LedgerJournalTrans_Asset prevLedgerJournalTransAsset;

        select firstonly prevLedgerJournalTrans
            where prevLedgerJournalTrans.JournalNum == this.JournalBatchNumber
                && prevLedgerJournalTrans.LineNum == this.LineNumber
            join prevLedgerJournalTransAsset
                where prevLedgerJournalTransAsset.RefRecId == prevLedgerJournalTrans.RecId;

        super();

        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;

        select firstonly RecId, AmountCurCredit, AmountCurDebit, LedgerDimension from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == this.JournalBatchNumber
                && ledgerJournalTrans.LineNum == this.LineNumber
            join AmountCreditReportingCurrency, AmountDebitReportingCurrency, BookId, TransType
                from ledgerJournalTransAsset
                where ledgerJournalTransAsset.RefRecId == prevLedgerJournalTrans.RecId;

        AssetJournalEntityMap::updateAssetBookTableDerivedJournal(
            this,
            prevLedgerJournalTrans,
            ledgerJournalTrans,
            prevLedgerJournalTransAsset,
            ledgerJournalTransAsset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fixed assets journal staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AssetJournalV2EntityStaging staging;

        if (!LedgerJournalEntityBase::isJournalBatchNumberSequenceManual())
        {
            LedgerJournalEntityBaseTmp journalBatchNumberMap = LedgerJournalEntityBase::generateJournalNumbers(_dmfDefinitionGroupExecution, staging);

            update_recordset staging
                setting JournalBatchNumber = journalBatchNumberMap.NewJournalBatchNumber
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            join NewJournalBatchNumber from journalBatchNumberMap
                where staging.JournalBatchNumber == journalBatchNumberMap.OldJournalBatchNumber;
        }

        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        update_recordset staging
            setting CurrencyCode = accountingCurrency
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && staging.CurrencyCode == '';

        update_recordset staging
            setting AccountType = LedgerJournalACType::FixedAssets
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && staging.AccountType != LedgerJournalACType::FixedAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFixedAssetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a journal is able to be modified through entity interfaces.
    /// </summary>
    /// <param name = "_journalEntity">The asset journal entity.</param>
    /// <remarks>A null <c>LedgerJournalTable</c> is valid because the entity framework handles that case.</remarks>
    public static boolean validateFixedAssetJournal(AssetJournalV2Entity _journalEntity)
    {
        boolean isValid = true;

        LedgerJournalName ledgerJournalName = ledgerJournalName::find(_journalEntity.JournalNameId);

        if (!ledgerJournalName || ledgerJournalName.JournalType != LedgerJournalType::Assets)
        {
            isValid = checkFailed("@FixedAssets:FA_ErrorMessage_FixedAssetJournalEntityJournalNameValidation");
        }

        isValid = isValid && LedgerJournalEntityBase::isWorkflowDocumentEditable(_journalEntity.JournalBatchNumber);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateExchangeRates</Name>
				<Source><![CDATA[
    private static void validateAndUpdateExchangeRates(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {       
        AssetJournalV2Entity::validateExchangeRates(_dmfDefinitionGroupExecution, _log);
        AssetJournalV2Entity::updateExchangeRates(_dmfDefinitionGroupExecution);
        AssetJournalV2Entity::updateReportingExchRateAndAmountsForSameLedgerCurrencies(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchRateAndAmountsForSameLedgerCurrencies</Name>
				<Source><![CDATA[
    private static void updateReportingExchRateAndAmountsForSameLedgerCurrencies(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        AssetJournalV2EntityStaging staging;

        if (Ledger::isReportingCurrencySameAsAccountingCurrency())
        {
            update_recordset staging setting
                ReportingCurrencyExchRate = staging.ExchangeRate,
                ReportingCurrencyExchRateSecondary = staging.ExchangeRateSecondary,
                DebitAmountReportingCurrency = staging.DebitAmount,
                CreditAmountReportingCurrency = staging.CreditAmount
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted;

            if (staging.RowCount() > 0)
            {
                warning(strFmt("@GeneralLedger:ReportingExchangeRateAdjusted"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDMFValidationLog</Name>
				<Source><![CDATA[
    private static void clearDMFValidationLog(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        _log.skipDataMethods(true);

        delete_from _log
            where _log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && _log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExchangeRates</Name>
				<Source><![CDATA[
    private static void validateExchangeRates(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // Entity lines that require an exchange rate to be looked up but one doesn't exist will be set to Error
        CurrencyCode ledgerCurrency = Ledger::accountingCurrency();
        ExchangeRateTypeRecId exchangeRateType = Ledger::defaultExchangeRateType();
        ExchangeRateEffectiveView exchangeRateView;
        AssetJournalV2EntityStaging staging;

        ErrorMsg error = "@GeneralLedger:EntityMessage_LedgerJournalEntityExchangeRateNotFound";

        AssetJournalV2EntityLog entityLog;

        insert_recordset entityLog (AssetJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
               && staging.ExchangeRate == 0
            notexists join exchangeRateView
                where exchangeRateView.ExchangeRateType == exchangeRateType
                    && exchangeRateView.FromCurrencyCode == staging.CurrencyCode
                    && exchangeRateView.ToCurrencyCode == ledgerCurrency
                    && exchangeRateView.ValidFrom <= staging.TransDate
                    && exchangeRateView.ValidTo >= staging.TransDate;

        FieldName fieldName = fieldStr(AssetJournalV2EntityStaging, CurrencyCode);
        AssetJournalV2Entity::writeErrorsToDMFLog(_log, fieldName, entityLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalNameAndType</Name>
				<Source><![CDATA[
    private static void validateJournalNameAndType(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        AssetJournalV2EntityStaging staging;
        AssetJournalV2EntityLog entityLog;
        LedgerJournalName ledgerJournalName;
        str error = "@FixedAssets:FA_ErrorMessage_FixedAssetJournalEntityJournalNameValidation";

        insert_recordset entityLog (AssetJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            notexists join ledgerJournalName
                where ledgerJournalName.JournalName == staging.JournalNameId
                    && ledgerJournalName.JournalType == LedgerJournalType::Assets;

        FieldName fieldName = fieldStr(AssetJournalV2EntityStaging, JournalNameId);
        AssetJournalV2Entity::writeErrorsToDMFLog(_log, fieldName, entityLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeErrorsToDMFLog</Name>
				<Source><![CDATA[
    private static void writeErrorsToDMFLog(DMFStagingValidationLog _log, FieldName _fieldName, AssetJournalV2EntityLog _entityLog)
    {
        AssetJournalV2EntityStaging staging;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            exists join _entityLog
                where staging.RecId == _entityLog.AssetJournalEntityRecId;

        TableName tableName = tableStr(AssetJournalV2EntityStaging);
        TableName entityName = "@FixedAssets:FA_EntityTitle_FixedAssetJournalV2";
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, _fieldName, sourceTarget, entityName from staging
            join ErrorMessage from _entityLog
                where staging.RecId == _entityLog.AssetJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRates</Name>
				<Source><![CDATA[
    private static void updateExchangeRates(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CurrencyCode ledgerCurrency = Ledger::accountingCurrency();
        ExchangeRateTypeRecId exchangeRateType = Ledger::defaultExchangeRateType();
        ExchangeRateEffectiveView exchangeRateView;
        AssetJournalV2EntityStaging staging;

        update_recordset staging
            setting ExchangeRate = exchangeRateView.ExchangeRate1,
                ExchangeRateSecondary = exchangeRateView.ExchangeRate2
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
               && staging.ExchangeRate == 0 // Don't update the exchange rate if one is provided
            join exchangeRateView
                where exchangeRateView.ExchangeRateType == exchangeRateType
                    && exchangeRateView.FromCurrencyCode == staging.CurrencyCode
                    && exchangeRateView.ToCurrencyCode == ledgerCurrency
                    && exchangeRateView.ValidFrom <= staging.TransDate
                    && exchangeRateView.ValidTo >= staging.TransDate;

        CurrencyCode reportingCurrency = Ledger::reportingCurrency();

        if (reportingCurrency && reportingCurrency != ledgerCurrency)
        {
            ExchangeRateTypeRecId reportingExchangeRateType = Ledger::reportingCurrencyExchangeRateType();

            if (!reportingExchangeRateType)
            {
                reportingExchangeRateType = exchangeRateType;
            }

            ExchangeRateEffectiveView reportingExchangeRateView;

            // Update the reporting exchange rates where a rate exists.
            update_recordset staging
                setting ReportingCurrencyExchRate = reportingExchangeRateView.ExchangeRate1,
                    ReportingCurrencyExchRateSecondary = reportingExchangeRateView.ExchangeRate2
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.ReportingCurrencyExchRate == 0 // Don't update the exchange rate if one is provided
                join reportingExchangeRateView
                    where reportingExchangeRateView.ExchangeRateType == reportingExchangeRateType
                        && reportingExchangeRateView.FromCurrencyCode == staging.CurrencyCode
                        && reportingExchangeRateView.ToCurrencyCode == reportingCurrency
                        && reportingExchangeRateView.ValidFrom <= staging.TransDate
                        && reportingExchangeRateView.ValidTo >= staging.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalUnposted</Name>
				<Source><![CDATA[
    private static void validateJournalUnposted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        AssetJournalV2EntityStaging staging;
        AssetJournalV2EntityLog entityLog;
        LedgerJournalTable ledgerJournalTable_Exists;

        ErrorMsg error = strFmt("@FixedAssets:FA_ErrorMessage_JournalPosted");
        
        insert_recordset entityLog (AssetJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;

        // write errors to DMF validation log
        FieldName fieldName = fieldStr(AssetJournalV2EntityStaging, JournalBatchNumber);
        AssetJournalV2Entity::writeErrorsToDMFLog(_log, fieldName, entityLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalNotSystemBlocked</Name>
				<Source><![CDATA[
    private static void validateJournalNotSystemBlocked(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        AssetJournalV2EntityStaging staging;
        AssetJournalV2EntityLog entityLog;
        LedgerJournalTable ledgerJournalTable_Exists;

        ErrorMsg error = strFmt("@FixedAssets:FA_ErrorMessage_JournalSystemLocked");
        
        insert_recordset entityLog (AssetJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTable_Exists.SystemBlocked == NoYes::Yes;

        // write errors to DMF validation log
        FieldName fieldName = fieldStr(AssetJournalV2EntityStaging, JournalBatchNumber);
        AssetJournalV2Entity::writeErrorsToDMFLog(_log, fieldName, entityLog);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_EntityDeveloper_AssetJournalEntity</DeveloperDocumentation>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@FixedAssets:FA_EntityTitle_FixedAssetJournalV2</Label>
	<Tags>Journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>AssetJournalV2EntityStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>FixedAssets</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>AssetJournalV2</PublicCollectionName>
	<PublicEntityName>AssetJournalV2Entity</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucherType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndianAssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAmount</Name>
			<DataField>AmountCurCredit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAmount</Name>
			<DataField>AmountCurDebit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Account</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>AccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS24500</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionCombinationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>OffsetAccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetLedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>OffsetAccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS11162</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetDimensionCombinationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Text</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingLayer</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>CurrentOperationsTax</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalNameId</Name>
			<DataField>JournalName</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>Posted</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Name</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BookId</Name>
			<Label>@FixedAssets:FA_EntityField_Book</Label>
			<DataField>BookId</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionType</Name>
			<Label>@SYS21201</Label>
			<DataField>TransType</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FixedAssetNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AssetId</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConsumptionUnits</Name>
			<DataField>ConsumptionQuantity</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRateSecondary</Name>
			<DataField>ExchrateSecond</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherTypeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>LedgerVoucherType_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>Id</DataField>
			<DataSource>LedgerVoucherType_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucher</Name>
			<DataField>Voucher_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@FixedAssets:FA_EntityField_AccountFinancialDimension</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionSetEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAmountReportingCurrency</Name>
			<DataField>AmountCreditReportingCurrency</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAmountReportingCurrency</Name>
			<DataField>AmountDebitReportingCurrency</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchRate</Name>
			<DataField>ReportingCurrencyExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchRateSecondary</Name>
			<DataField>ReportingCurrencyExchRateSecondary</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IndianAssetGroup</Name>
			<DataField>AssetGroup_IN</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerJournalEntityBase</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalBatchNumber</MapField>
					<MapFieldTo>JournalBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalName</MapField>
					<MapFieldTo>JournalNameId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>AssetJournalEntityMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditAmount</MapField>
					<MapFieldTo>CreditAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditAmountReportingCurrency</MapField>
					<MapFieldTo>CreditAmountReportingCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DebitAmount</MapField>
					<MapFieldTo>DebitAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DebitAmountReportingCurrency</MapField>
					<MapFieldTo>DebitAmountReportingCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedAssetNumber</MapField>
					<MapFieldTo>FixedAssetNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalBatchNumber</MapField>
					<MapFieldTo>JournalBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionType</MapField>
					<MapFieldTo>TransactionType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>LegalEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>OMLegalEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>dataAreaId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>AssetJournalV2LedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetJournalV2LedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Account</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>AssetJournalV2OffsetLedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetJournalV2OffsetLedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>AssetValueModelSetupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>AssetBooks</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetJournalBook</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>BookId</Field>
					<RelatedField>ValueModelId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerVoucherTypeEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerVoucherTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ChineseVoucherType</Field>
					<RelatedField>VoucherType</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>AssetJournalV2DefaultDimensionEntity</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetJournalV2EntityDefaultDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DimensionCombinationEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OffsetDimensionCombinationEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>OffsetLedgerDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerJournalTrans_Asset</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>LedgerJournalTrans_Asset</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RefRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerVoucherType_CN</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>LedgerVoucherType_CN</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerVoucherType_CN</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<JoinRelationName>LedgerVoucherType_CN</JoinRelationName>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DefaultDimensionSetEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionSetEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DefaultDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>JournalNum</Field>
								<JoinDataSource>LedgerJournalTable</JoinDataSource>
								<RelatedField>JournalNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>JournalType</Name>
						<Field>JournalType</Field>
						<Value>Assets</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>