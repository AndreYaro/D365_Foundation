<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find retail discount entity by offer id.
    /// </summary>
    public static RetailDiscountEntity find(RetailDiscountOfferId _offerId)
    {
        RetailDiscountEntity entity;

        select firstonly entity where entity.OfferId == _offerId;

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes entity data source for sub types.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    public void initializeEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        RetailPeriodicDiscount discount;
        RetailDiscountOffer offer;
        RetailDiscountMixAndMatch mixAndMatch;
        RetailDiscountMultibuy multibuy;
        RetailDiscountThreshold threshold;

        if (dataSourceCtx.name() == tablestr(RetailPeriodicDiscount))
        {
            if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                if (RetailPricingDiscountEntityResetProcessingStatusForImportFlight::instance().isEnabled())
                {
                    this.ProcessingStatus = RetailPricingDiscountProcessingStatus::Draft; // Restores the status for publishing job to pick up later.
                }

                discount = dataSourceCtx.getBuffer();
                switch (this.PeriodicDiscountType)
                {
                    case RetailDiscountOfferTypeBase::DiscountOffer:
                    case RetailDiscountOfferTypeBase::Promotion:
                    case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                        offer = discount as RetailDiscountOffer;
                        dataSourceCtx.setBuffer(offer);
                        break;
                    case RetailDiscountOfferTypeBase::Multibuy:
                        multibuy = discount as RetailDiscountMultibuy;
                        dataSourceCtx.setBuffer(multibuy);
                        break;
                    case RetailDiscountOfferTypeBase::MixAndMatch:
                    case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                        mixAndMatch = discount as RetailDiscountMixAndMatch;
                        dataSourceCtx.setBuffer(mixAndMatch);
                        break;
                    case RetailDiscountOfferTypeBase::Threshold:
                        threshold = discount as RetailDiscountThreshold;
                        dataSourceCtx.setBuffer(threshold);
                        break;
                }
            }
            else if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                if (RetailPricingDiscountEntityResetProcessingStatusForImportFlight::instance().isEnabled())
                {
                    this.ProcessingStatus = RetailPricingDiscountProcessingStatus::Draft; // Restores the status for publishing job to pick up later.
                }

                switch (this.PeriodicDiscountType)
                {
                    case RetailDiscountOfferTypeBase::DiscountOffer:
                    case RetailDiscountOfferTypeBase::Promotion:
                    case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                        dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountOffer)).makeRecord());
                        break;
                    case RetailDiscountOfferTypeBase::Multibuy:
                        dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountMultibuy)).makeRecord());
                        break;
                    case RetailDiscountOfferTypeBase::MixAndMatch:
                    case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                        dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountMixAndMatch)).makeRecord());
                        break;
                    case RetailDiscountOfferTypeBase::Threshold:
                        dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountThreshold)).makeRecord());
                        break;
                }
            }
        }

        super(entityCtx, dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (RetailDiscountEntityAutoGenerateOfferIdFlight::instance().isEnabled() && !this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
            this, fieldNum(RetailDiscountEntity, OfferId), RetailParameters::numRefOfferId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        this.validateDiscount(entityCtx, dataSourceCtx);

        ret = super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        this.validateDiscount(entityCtx, dataSourceCtx);

        ret = super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed when a record is read. Populates unmapped fields on the entity.
    /// </summary>
    public void postLoad()
    {
        RetailDiscountCode retailDiscountCode;

        select firstonly DiscountCode, Barcode
            from retailDiscountCode
            where retailDiscountCode.RecId == this.DiscountCodeId;

        this.DiscountCode = retailDiscountCode.DiscountCode;
        this.BarCode = retailDiscountCode.BarCode;
        
        if (!RetailPricingDiscountEntityResetProcessingStatusForImportFlight::instance().isEnabled())
        {
            // Restores the status to draft once it's updated
            this.ProcessingStatus = RetailPricingDiscountProcessingStatus::Draft;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.toggleLeastExpensiveFavorRetailer();
        this.toggleQuantityLimit();

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(RetailDiscountEntity, PeriodicDiscountType) && this.RecId != 0 && this.PeriodicDiscountType != this.orig().PeriodicDiscountType)
        {
            if (!((this.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOffer && this.orig().PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit)
               || (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit && this.orig().PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOffer)
               || (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch && this.orig().PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer)
               || (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer && this.orig().PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch)))
            {
                ret = checkFailed(strFmt("@Retail:CannotUpdateDiscountType", this.orig().PeriodicDiscountType, this.PeriodicDiscountType));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscount</Name>
				<Source><![CDATA[
    private void validateDiscount(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        this.validateDiscountCode();
        this.validateDateValidation();
        this.validateDiscountType();

        if (dataSourceCtx.name() == tablestr(RetailPeriodicDiscount))
        {
            // Fix up RetailDiscountCode
            RetailDiscountCode retailDiscountCode;
            RetailPeriodicDiscount existingDiscount;
            boolean refreshBuffer = false;
            RefRecId newDiscountCodeId;
            if (entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                existingDiscount = RetailPeriodicDiscount::findByOfferId(this.OfferId);

                if (existingDiscount.DiscountCode)
                {
                    retailDiscountCode = RetailDiscountCode::find(existingDiscount.DiscountCode, true);
                }
            }

            if (this.DiscountCode != retailDiscountCode.DiscountCode)
            {
                refreshBuffer = true;
            }

            if (this.DiscountCode)
            {
                retailDiscountCode.DiscountCode = this.DiscountCode;
                retailDiscountCode.DiscountOfferId = this.OfferId;
                retailDiscountCode.BarCode = this.BarCode;

                retailDiscountCode.write();
                newDiscountCodeId = retailDiscountCode.RecId;
            }
            else
            {
                if (retailDiscountCode)
                {
                    retailDiscountCode.delete();
                }

                newDiscountCodeId = 0;
            }

            if (refreshBuffer)
            {
                RetailPeriodicDiscount periodicDiscount = dataSourceCtx.getBuffer();
                periodicDiscount.DiscountCode = newDiscountCodeId;
                dataSourceCtx.setBuffer(periodicDiscount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleQuantityLimit</Name>
				<Source><![CDATA[
    private void toggleQuantityLimit()
    {
        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit || this.PeriodicDiscountType == RetailDiscountOfferTypeBase::DiscountOffer)
        {
            if (this.OfferQuantityLimit > 0)
            {
                this.PeriodicDiscountType = RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit;
            }
            else
            {
                this.PeriodicDiscountType = RetailDiscountOfferTypeBase::DiscountOffer;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleLeastExpensiveFavorRetailer</Name>
				<Source><![CDATA[
    private void toggleLeastExpensiveFavorRetailer()
    {
        if (this.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch || this.PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer)
        {
            if (this.MixAndMatchLeastExpensiveMode == RetailLeastExpensiveMode::FavorRetailer)
            {
                this.PeriodicDiscountType = RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer;
            }
            else
            {
                this.PeriodicDiscountType = RetailDiscountOfferTypeBase::MixAndMatch;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountCode</Name>
				<Source><![CDATA[
    private void validateDiscountCode()
    {
        if (this.IsDiscountCodeRequired)
        {
            if (!this.DiscountCode)
            {
                throw error("@Retail:DiscountCodeMissing");
            }
        }

        if (!this.IsDiscountCodeRequired && this.DiscountCode)
        {
            throw error("@Retail:DiscountCodeNotNeeded");
        }

        if (!this.DiscountCode && this.BarCode)
        {
            throw error("@Retail:BarcodeNeedsDiscountCode");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateValidation</Name>
				<Source><![CDATA[
    private void validateDateValidation()
    {
        switch (this.DateValidationType)
        {
            case RetailDateValidationTypeBase::Advanced:
                if (!this.ValidationPeriodId)
                {
                    throw error("@Retail:ValidationPeriodIdMissing");
                }
                break;
            case RetailDateValidationTypeBase::Standard:
                break;
            default:
                throw error(strFmt("@Retail:IncorrectDateValidationType", this.DateValidationType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountType</Name>
				<Source><![CDATA[
    private void validateDiscountType()
    {
        switch (this.PeriodicDiscountType)
        {
            case RetailDiscountOfferTypeBase::DiscountOffer:
            case RetailDiscountOfferTypeBase::Promotion:
            case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                break;
            case RetailDiscountOfferTypeBase::Multibuy:
                this.validateMultibuy();
                break;
            case RetailDiscountOfferTypeBase::MixAndMatch:
            case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                this.validateMixAndMatch();
                break;
            case RetailDiscountOfferTypeBase::Threshold:
                break;
            default:
                throw error(strFmt("@Retail:IncorrectDiscountType", this.PeriodicDiscountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMultibuy</Name>
				<Source><![CDATA[
    private void validateMultibuy()
    {
        if (!this.isValidMultibuy())
        {
            throw error(strFmt("@Retail:IncorrectQuantityDiscountMethod", this.MultibuyDiscountType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidMultibuy</Name>
				<Source><![CDATA[
    protected boolean isValidMultibuy()
    {
        return (this.MultibuyDiscountType == RetailDiscountTypeEnum::DiscPct || this.MultibuyDiscountType == RetailDiscountTypeEnum::UnitPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMixAndMatch</Name>
				<Source><![CDATA[
    private void validateMixAndMatch()
    {
        switch (this.MixAndMatchDiscountType)
        {
            case RetailMixAndMatchDiscountType::LeastExpensive:
                if (this.MixAndMatchNoOfLeastExpensiveLines < 1)
                {
                    throw error(strFmt("@Retail:IncorrectNumberOfLeastExpensives", this.MixAndMatchNoOfLeastExpensiveLines));
                }

                if (this.MixAndMatchNoOfLeastExpensiveLines > 1)
                {
                    if (!RetailPricingConfigurationValidator::isValidDiscountPercentageAllowZero(this.DiscountPercentValue))
                    {
                        throw error(strFmt("@Retail:IncorrectPercentForNumberOfLeastExpensives", this.DiscountPercentValue));
                    }

                    if (this.MixAndMatchDiscountAmount != 0)
                    {
                        throw error(strFmt("@Retail:IncorrectAmountOffForNumberOfLeastExpensives", this.MixAndMatchDiscountAmount));
                    }

                    if (this.MixAndMatchDealPrice != 0)
                    {
                        throw error(strFmt("@Retail:IncorrectDealPriceForNumberOfLeastExpensives", this.MixAndMatchDealPrice));
                    }
                }
                break;

            case RetailMixAndMatchDiscountType::DealPrice:
                if (!RetailPricingConfigurationValidator::isValidDiscountDealPrice(this.MixAndMatchDealPrice))
                {
                    throw error(strFmt("@Retail:IncorrectDealPrice", this.MixAndMatchDealPrice));
                }
                break;

            case RetailMixAndMatchDiscountType::DiscountAmount:
                if (!RetailPricingConfigurationValidator::isValidDiscountAmount(this.MixAndMatchDiscountAmount))
                {
                    throw error(strFmt("@Retail:IncorrectDiscountAmount", this.MixAndMatchDiscountAmount));
                }
                break;

            case RetailMixAndMatchDiscountType::DiscountPct:
                if (!RetailPricingConfigurationValidator::isValidDiscountPercentage(this.DiscountPercentValue))
                {
                    throw error(strFmt("@Retail:IncorrectPercentOff", this.DiscountPercentValue));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (this.orig().Status == RetailDisabledEnabled::Enabled && this.Status == RetailDisabledEnabled::Enabled)
        {
            ret = checkFailed("@RetailDiscount:NotAllowEditEnabledDiscount");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (!RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled())
        {
            return;
        }

        // Check if import job is finished.
        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            container offerIds;

            RetailDiscountStaging retailDiscountStaging;
            while select OfferId from retailDiscountStaging
                        group by OfferId
                        where retailDiscountStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && retailDiscountStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            {
                offerIds += retailDiscountStaging.OfferId;
            }

            RetailPeriodicDiscountPublisher::publishDiscountsChanges(offerIds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>RetailDiscountOffer</FormRef>
	<Label>@RET2911</Label>
	<Tags>Merchandising - Assortment</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailDiscountStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailDiscounts</PublicCollectionName>
	<PublicEntityName>RetailDiscount</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodicDiscountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConcurrencyMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateValidationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDescriptionOnFiscalReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PricingPriorityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConcurrencyMode</Name>
			<DataField>ConcurrencyMode</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateValidationType</Name>
			<DataField>DateValidationType</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Disclaimer</Name>
			<Label>@RET260644</Label>
			<DataField>Disclaimer</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountPercentValue</Name>
			<DataField>DiscountPercentValue</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDiscountCodeRequired</Name>
			<DataField>IsDiscountCodeRequired</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferId</Name>
			<Mandatory>No</Mandatory>
			<DataField>OfferId</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PeriodicDiscountType</Name>
			<DataField>PeriodicDiscountType</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidationPeriodId</Name>
			<DataField>ValidationPeriodId</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultibuyDiscountType</Name>
			<DataField>MultibuyDiscountType</DataField>
			<DataSource>RetailDiscountMultibuy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdCountNonDiscountItems</Name>
			<DataField>CountNonDiscountItems</DataField>
			<DataSource>RetailDiscountThreshold</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchDealPrice</Name>
			<DataField>DealPriceValue</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchDiscountAmount</Name>
			<DataField>DiscountAmountValue</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchDiscountType</Name>
			<DataField>MixAndMatchDiscountType</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchNoOfLeastExpensiveLines</Name>
			<DataField>NoOfLeastExpensiveLines</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchNumberOfTimesApplicable</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>numberOfTimesApplicable</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchLeastExpensiveMode</Name>
			<DataField>LeastExpensiveMode</DataField>
			<DataSource>RetailDiscountMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DiscountCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>RetailDiscountCodeId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BarCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>ItemBarCode</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountCodeId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DiscountCode</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountLedgerDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DiscountLedgerDimensionDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountLedgerDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DiscountLedgerDimension</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountRecordId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>RecId</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferQuantityLimit</Name>
			<DataField>QuantityLimit</DataField>
			<DataSource>RetailDiscountOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrintDescriptionOnFiscalReceipt</Name>
			<DataField>PrintDescriptionOnFiscalReceipt</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PricingPriorityNumber</Name>
			<DataField>PricingPriorityNumber</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MatchAllAssociatedPriceGroups</Name>
			<DataField>MatchAllAssociatedPriceGroups</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcessingStatus</Name>
			<DataField>ProcessingStatus</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisabledSince</Name>
			<DataField>DisabledSince</DataField>
			<DataSource>RetailPeriodicDiscount</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>OfferId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailPeriodicDiscount</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailPeriodicDiscount</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DiscountLedgerDimensionDAVC</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DiscountLedgerDimension</Field>
								<JoinDataSource>RetailPeriodicDiscount</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountMixAndMatch</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountMixAndMatch</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountMultibuy</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountMultibuy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountOffer</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountOffer</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountThreshold</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountThreshold</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>PeriodicDiscountType</Name>
						<Field>PeriodicDiscountType</Field>
						<Value>!= Shipping</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>