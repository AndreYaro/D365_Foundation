<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorBankAccountEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class VendVendorBankAccountEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>explicitSaveLogisticsPostalAddress</Name>
				<Source><![CDATA[
    private void explicitSaveLogisticsPostalAddress(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Save the address with the option to resolve duplicate address as correction on update.
        LogisticsLocationRecId locationRecId = LogisticsPostalAddressBaseEntity::saveAddress(
            _entityCtx, 
            dataEntityDataSourceStr(VendVendorBankAccountEntity, LogisticsPostalAddressBaseEntity),
            NoYes::Yes);

        if (locationRecId)
        {
            VendBankAccount vendBankAccount = _dataSourceCtx.getBuffer();
            vendBankAccount.Location = locationRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAccountNumberFI</Name>
				<Source><![CDATA[
    private void convertAccountNumberFI(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        #ISOCountryRegionCodes
        VendBankAccount vendBankAccount = _dataSourceCtx.getBuffer();
        if (SysCountryRegionCode::isLocationInCountryRegion(vendBankAccount.Location, [#isoFI]))
        {
            vendBankAccount.AccountNum = Bank_FI::convertBankAccountNum(this.BankAccountNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirDunsNumber</Name>
				<Source><![CDATA[
    private void setDirDunsNumber(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        VendBankAccount vendBankAccount = _dataSourceCtx.getBuffer();

        if (this.DUNSNumber == '')
        {
            vendBankAccount.DirDunsNumber = 0;
        }
        else
        {
            vendBankAccount.DirDunsNumber = DirDunsNumber::findByDunsNumber(this.DUNSNumber).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount) == _dataSourceCtx.name())
        {
            this.explicitSaveLogisticsPostalAddress(_entityCtx, _dataSourceCtx);
            this.convertAccountNumberFI(_dataSourceCtx);
            this.setDirDunsNumber(_dataSourceCtx);
        }

        ret = super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount))
        {
            this.saveDefaultBankAccountForVendor();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount) == _dataSourceCtx.name())
        {
            this.explicitSaveLogisticsPostalAddress(_entityCtx, _dataSourceCtx);
            this.convertAccountNumberFI(_dataSourceCtx);
            this.setDirDunsNumber(_dataSourceCtx);
        }

        ret = super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount))
        {
            this.saveDefaultBankAccountForVendor();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isControlledFieldUpdated</Name>
				<Source><![CDATA[
    protected boolean isControlledFieldUpdated(FieldId _vendBankAccountEntityField, VendBankAccountChangeProposalFields changeProposalField)
    {
        return (this.isFieldSet(_vendBankAccountEntityField) 
            && VendBankAccountChangeProposalFieldEnablement::isEnabledFor(changeProposalField)
            && this.(_vendBankAccountEntityField) != this.orig().(_vendBankAccountEntityField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeControlledField</Name>
				<Source><![CDATA[
    protected void updateChangeControlledField(FieldId _vendBankAccountEntityField, 
        FieldId _proposalField, 
        VendBankAccountChangeProposalFields _controlledField, 
        VendBankAccountChangeProposal _proposal)
    {
        if(this.isControlledFieldUpdated(_vendBankAccountEntityField, _controlledField))
        {
            _proposal.(_proposalField) = this.(_vendBankAccountEntityField);
            _proposal.setFlagForChangedField(_controlledField);
            this.(_vendBankAccountEntityField) = this.orig().(_vendBankAccountEntityField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangesForApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the contents prior to writing it.
    /// </summary>
    /// <param name = "_entityCtx">The entity context, containing a database operation type.</param>
    private void processChangesForApproval(DataEntityRuntimeContext _entityCtx)
    {
        VendBankAccountChangeProposalDataEntityBehavior selectedBehavior = VendParameters::find().VendBankAccountWorkflowDataEntityBehavior;
        if (selectedBehavior == VendBankAccountChangeProposalDataEntityBehavior::AllowWithoutApproval)
        {
            return;
        }
   
        boolean controlledChangesMade = this.checkControlledChanges();
        if(!controlledChangesMade)
        {
            return;
        }

        VendBankAccount bankAccount = VendBankAccount::find(this.VendorAccountNumber, this.VendorBankAccountId);
        this.checkThrowError(bankAccount, selectedBehavior);

        VendBankAccountChangeProposal proposal = VendBankAccountChangeProposal::findOrCreateAutoGenerated(bankAccount.RecId, true);
        this.initializeVendBankAccountChangeProposal(proposal);

        ttsbegin;
        proposal.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkThrowError</Name>
				<Source><![CDATA[
    private void checkThrowError(VendBankAccount _bankAccount,VendBankAccountChangeProposalDataEntityBehavior _selectedBehavior)
    {
        if(_selectedBehavior == VendBankAccountChangeProposalDataEntityBehavior::RejectChanges)
        {
            throw error("@AccountsPayable:VendChangeProposal_CannotBeChangedFromDE");
        }

        if (!_bankAccount.RecId)
        {
            throw error(strFmt("@AccountsPayable:VendBankAccountRecordDoesNotExist", this.VendorBankAccountId));
        }

        if (!_bankAccount.canModifyChangeProposal())
        {
            throw error("@AccountsPayable:VendTableChangeProposal_ChangesNotAllowed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendBankAccountChangeProposal</Name>
				<Source><![CDATA[
    protected void initializeVendBankAccountChangeProposal(VendBankAccountChangeProposal _proposal)
    {
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, BankName), 
            fieldNum(VendBankAccountChangeProposal, Name),
            VendBankAccountChangeProposalFields::Name,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, BankAccountNumber),
            fieldNum(VendBankAccountChangeProposal, AccountNum),
            VendBankAccountChangeProposalFields::AccountNum,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, ActiveDate),
            fieldNum(VendBankAccountChangeProposal, ActiveDate),
            VendBankAccountChangeProposalFields::ActiveDate,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, BankGroupID),
            fieldNum(VendBankAccountChangeProposal, BankGroupID),
            VendBankAccountChangeProposalFields::BankGroupID,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, IBAN),
            fieldNum(VendBankAccountChangeProposal, BankIBAN),
            VendBankAccountChangeProposalFields::BankIBAN,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, CurrentCurrencyCode),
            fieldNum(VendBankAccountChangeProposal, CurrencyCode),
            VendBankAccountChangeProposalFields::CurrencyCode,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, ExpirationDate),
            fieldNum(VendBankAccountChangeProposal, ExpiryDate),
            VendBankAccountChangeProposalFields::ExpiryDate,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, RoutingNumber),
            fieldNum(VendBankAccountChangeProposal, RegistrationNum),
            VendBankAccountChangeProposalFields::Name,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, VendorBankAccountid),
            fieldNum(VendBankAccountChangeProposal, AccountID),
            VendBankAccountChangeProposalFields::AccountID,
            _proposal);
        this.updateChangeControlledField(
            fieldNum(VendVendorBankAccountEntity, SWIFTCode),
            fieldNum(VendBankAccountChangeProposal, SWIFTNo),
            VendBankAccountChangeProposalFields::SWIFTNo,
            _proposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkControlledChanges</Name>
				<Source><![CDATA[
    protected boolean checkControlledChanges()
    {
        return (this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, BankName), VendBankAccountChangeProposalFields::Name)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, BankAccountNumber), VendBankAccountChangeProposalFields::AccountNum)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, ActiveDate), VendBankAccountChangeProposalFields::ActiveDate)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, BankGroupID), VendBankAccountChangeProposalFields::BankGroupID)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, IBAN), VendBankAccountChangeProposalFields::BankIBAN)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, CurrentCurrencyCode), VendBankAccountChangeProposalFields::CurrencyCode)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, ExpirationDate), VendBankAccountChangeProposalFields::ExpiryDate)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, RoutingNumber), VendBankAccountChangeProposalFields::RegistrationNum)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, VendorBankAccountid), VendBankAccountChangeProposalFields::AccountID)
            || this.isControlledFieldUpdated(fieldNum(VendVendorBankAccountEntity, SWIFTCode), VendBankAccountChangeProposalFields::SWIFTNo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount) == _dataSourceCtx.name())
        {
            if(VendBankAccountChangeProposalFeature::instance().isEnabled()
                && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                this.processChangesForApproval(_entityCtx);
            }
        }

        super(_entityCtx, _dataSourceCtx);

        if (dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount) == _dataSourceCtx.name())
        {
            VendBankAccount vendBankAccount = _dataSourceCtx.getBuffer();
            vendBankAccount.editExchRate(true, this.CrossRate); 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        VendBankAccount vendBankAccount = VendBankAccount::find(this.VendorAccountNumber, this.VendorBankAccountId);
        this.CrossRate = vendBankAccount.editExchRate(false, this.CrossExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.VendorBankAccountId == this.InterimVendorBankAccountNumber)
            {
                ret = checkFailed("@SCM:DifferentVendorBankAccounts");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsDefaultBankAccountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IsDefaultBankAccount computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IsDefaultBankAccount field.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str IsDefaultBankAccountDefinition()
    {
        TableName entityName = tableStr(VendVendorBankAccountEntity);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(VendVendorBankAccountEntity, VendBankAccount), fieldStr(VendBankAccount, AccountID)),
                        SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(VendVendorBankAccountEntity, VendTable), fieldStr(VendTable, BankAccount))
                                                        ),
                    SysComputedColumn::returnLiteral(NoYes::Yes),
                    SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDefaultBankAccountForVendor</Name>
				<Source><![CDATA[
    private void saveDefaultBankAccountForVendor()
    {
        if (this.IsDefaultBankAccount != this.orig().IsDefaultBankAccount)    // Flag is changed (or set to Yes on import)
        {
            VendTable vendTable = VendTable::find(this.VendorAccountNumber, true);

            VendBankAccountId currentDefaultBankAccountId   = this.IsDefaultBankAccount ? vendTable.BankAccount : this.VendorBankAccountId;
            VendBankAccountId newDefaultBankAccountId       = this.IsDefaultBankAccount ? this.VendorBankAccountId : '';
            
            if (vendTable.BankAccount == currentDefaultBankAccountId)
            {
                vendTable.BankAccount = newDefaultBankAccountId;
                
                if (!this.skipDataSourceDefaultRow())
                {
                    vendTable.defaultRow(); // In case updating BankAccount affects other fields
                }

                if (  (this.skipDataSourceValidateField(this.IsDefaultBankAccount) || vendTable.validateField(fieldNum(VendTable, BankAccount))) 
                   && (this.skipDataSourceValidateWrite() || vendTable.validateWrite())
                    )
                {
                    vendTable.update();
                }
                else
                {
                    checkFailed(strFmt("@SCM:BankAccountCannotBeUpdatedOnVendor", newDefaultBankAccountId, this.VendorAccountNumber));
                    throw Exception::Error;
                }

            }
            else
            {
                checkFailed(strFmt("@SCM:BankAccountCannotBeUpdatedOnVendor", this.VendorBankAccountId, this.VendorAccountNumber));
                throw Exception::Error;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:VendVendorBankAccountEntityDevDoc</DeveloperDocumentation>
	<FormRef>VendBankAccounts</FormRef>
	<Label>@SYS24216</Label>
	<Tags>Vendor payment setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>VendVendorBankAccountStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsPayable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>VendorBankAccounts</PublicCollectionName>
	<PublicEntityName>VendorBankAccount</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankNameInKana</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorBankAccountId</Name>
			<DataField>AccountID</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountNumber</Name>
			<DataField>AccountNum</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankName</Name>
			<DataField>Name</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankNameInKana</Name>
			<DataField>BankAccountNameKana_JP</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankGroupId</Name>
			<DataField>BankGroupID</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAccountNumber</Name>
			<DataField>VendAccount</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RoutingNumberType</Name>
			<DataField>BankCodeType</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RoutingNumber</Name>
			<DataField>RegistrationNum</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DUNSNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>DunsNumber</DataField>
			<DataSource>DirDunsNumber</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DUNS4NumberSuffix</Name>
			<DataField>VendDuns4Number</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ControlInternalNumber</Name>
			<DataField>BankCIN</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SWIFTCode</Name>
			<DataField>SWIFTNo</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IBAN</Name>
			<DataField>BankIBAN</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountType</Name>
			<DataField>BankAccountType</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CorrespondenceBankAccountNumber</Name>
			<DataField>CorrAccount_W</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankConstantSymbol</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>ConstantSymbol</DataField>
			<DataSource>BankConstantSymbol</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankSpecificSymbol</Name>
			<DataField>SpecificSymbol</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActiveDate</Name>
			<DataField>ActiveDate</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExpirationDate</Name>
			<DataField>ExpiryDate</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankTransactionType</Name>
			<DataField>TransType_JP</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ForeignBankGroupId</Name>
			<DataField>ForeignBank_RU</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ForeignBankAccountNumber</Name>
			<DataField>ForeignAccount_RU</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ForeignBankSWIFTCode</Name>
			<DataField>ForeignSWIFT_RU</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RecipientTextCode</Name>
			<DataField>VendPaymentTextCode</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankMessage</Name>
			<DataField>MsgToBank</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RateOfExchangeReference</Name>
			<DataField>ExchRateRef</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>CrossRate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>CrossExchRate</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrentCurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDefaultBankAccountForCurrentCurrency</Name>
			<DataField>LvDefaultBank</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsDefaultBankAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>IsDefaultBankAccountDefinition</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankCorrespondenceBankGroupId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CorrespBank_EE</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankCorrespondenceAccountBankGroupId</Name>
			<DataField>IntermBank_EE</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InterimBankCorrespondenceBankAccountNumber</Name>
			<DataField>IntermAccount_EE</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InterimVendorBankAccountNumber</Name>
			<DataField>IntermBankAccountId</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactPhoneNumber</Name>
			<DataField>Phone</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactPhoneNumberExtension</Name>
			<DataField>PhoneLocal</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactMobilePhoneNumber</Name>
			<DataField>CellularPhone</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactPager</Name>
			<DataField>Pager</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactFaxNumber</Name>
			<DataField>TeleFax</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactEmailAddress</Name>
			<DataField>Email</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactEmailAddressForSendingSMS</Name>
			<DataField>SMS</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactInternetAddress</Name>
			<DataField>URL</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactTelexNumber</Name>
			<DataField>Telex</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactName</Name>
			<DataField>ContactPerson</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormattedAddress</Name>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLocation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Location</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountry</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountryISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressState</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCounty</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreetNumber</Name>
			<DataField>StreetNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCityInKana</Name>
			<DataField>CityInKana</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreetInKana</Name>
			<DataField>StreetInKana</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressPostBox</Name>
			<DataField>PostBox</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressBuildingCompliment</Name>
			<DataField>BuildingCompliment</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CrossExchRate</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ExchRate</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reviewed</Name>
			<DataField>Reviewed</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankInformationOrigin</Name>
			<DataField>BankInformationOrigin</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Comments</Name>
			<DataField>Comments</DataField>
			<DataSource>VendBankAccount</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>VendorAccountNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>VendorBankAccountId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>Vendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>VendVendorV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendorV2</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendorBankAccounts</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>VendorAccountNumber</Field>
					<RelatedField>VendorAccountNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>BankGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>BankGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BankGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorBankAccounts</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>BankGroupId</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Currency</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendorBankAccounts</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CurrentCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>VendBankAccount</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>VendBankAccount</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankConstantSymbol</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BankConstantSymbol</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BankConstantSymbol</Field>
								<JoinDataSource>VendBankAccount</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DirDunsNumber</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DirDunsNumber</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DirDunsNumber</Name>
								<JoinRelationName>DirDunsNumber</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<ApplyDateFilter>Yes</ApplyDateFilter>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Location</Field>
								<JoinDataSource>VendBankAccount</JoinDataSource>
								<RelatedField>LocationRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>VendTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>VendAccount</Field>
								<JoinDataSource>VendBankAccount</JoinDataSource>
								<RelatedField>AccountNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>