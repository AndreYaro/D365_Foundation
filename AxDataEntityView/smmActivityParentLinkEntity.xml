<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmActivityParentLinkEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmActivityParentLinkEntity extends common
{  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParentTypes</Name>
				<Source><![CDATA[
    protected static Map getParentTypes(str _partitionIdField, str _dataAreaIdField, str _refRecIdField)
    {
        Map map = new Map(Types::String, Types::String);

        map.insert(int2Str(any2Int(smmActivityParentType::SalesTable)),		   strFmt('(SELECT SALESID FROM SALESTABLE WHERE RECID = %3 AND SALESTABLE.DATAAREAID = %2 AND SALESTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::BusRel)),            strFmt('(SELECT BUSRELACCOUNT FROM SMMBUSRELTABLE WHERE RECID = %3 AND SMMBUSRELTABLE.DATAAREAID = %2 AND SMMBUSRELTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::PurchTable)),        strFmt('(SELECT PURCHID FROM PURCHTABLE WHERE RECID = %3 AND PURCHTABLE.DATAAREAID = %2 AND PURCHTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::ContactPerson)),     strFmt('(SELECT CONTACTPERSONID FROM CONTACTPERSON WHERE RECID = %3 AND CONTACTPERSON.DATAAREAID = %2 AND CONTACTPERSON.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Quotation)),         strFmt('(SELECT QUOTATIONID FROM SALESQUOTATIONTABLE WHERE RECID = %3 AND SALESQUOTATIONTABLE.DATAAREAID = %2 AND SALESQUOTATIONTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::ServiceOrder)),      strFmt('(SELECT SERVICEORDERID FROM SMASERVICEORDERTABLE WHERE RECID = %3 AND SMASERVICEORDERTABLE.DATAAREAID = %2 AND SMASERVICEORDERTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Project)),           strFmt('(SELECT PROJID FROM PROJTABLE WHERE RECID = %3 AND PROJTABLE.DATAAREAID = %2 AND PROJTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Campaign)),          strFmt('(SELECT CAMPAIGNID FROM SMMCAMPAIGNTABLE WHERE RECID = %3 AND SMMCAMPAIGNTABLE.DATAAREAID = %2 AND SMMCAMPAIGNTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::CallList)),          strFmt('(SELECT CALLLISTID FROM SMMTMCALLLISTGROUP WHERE RECID = %3 AND SMMTMCALLLISTGROUP.DATAAREAID = %2 AND SMMTMCALLLISTGROUP.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Lead)),              strFmt('(SELECT LEADID FROM SMMLEADTABLE WHERE RECID = %3 AND SMMLEADTABLE.DATAAREAID = %2 AND SMMLEADTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Opportunity)),       strFmt('(SELECT OPPORTUNITYID FROM SMMOPPORTUNITYTABLE WHERE RECID = %3 AND SMMOPPORTUNITYTABLE.DATAAREAID = %2 AND SMMOPPORTUNITYTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Person)),            strFmt('(SELECT PARTYNUMBER FROM DIRPARTYTABLE WHERE RECID = %2 AND DIRPARTYTABLE.PARTITION = %1)',_partitionIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Customer)),          strFmt('(SELECT ACCOUNTNUM FROM CUSTTABLE WHERE RECID = %3 AND CUSTTABLE.DATAAREAID = %2 AND CUSTTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Vendor)),            strFmt('(SELECT ACCOUNTNUM FROM VENDTABLE WHERE RECID = %3 AND VENDTABLE.DATAAREAID = %2 AND VENDTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::ServiceOrderLine)),  strFmt('(SELECT SERVICEORDERID FROM SMASERVICEORDERLINE WHERE RECID = %3 AND SMASERVICEORDERLINE.DATAAREAID = %2 AND SMASERVICEORDERLINE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Organization)),      strFmt('(SELECT PARTYNUMBER FROM DIRPARTYTABLE WHERE RECID = %2 AND DIRPARTYTABLE.PARTITION = %1)',_partitionIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Case)),              strFmt('(SELECT CASEID FROM CASEDETAILBASE WHERE RECID = %3 AND CASEDETAILBASE.DATAAREAID = %2 AND CASEDETAILBASE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(smmActivityParentType::Collections)),       strFmt('(SELECT ACCOUNTNUM FROM CUSTTABLE WHERE RECID = %3 AND CUSTTABLE.DATAAREAID = %2 AND CUSTTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLParentId</Name>
				<Source><![CDATA[
    private static str getSQLParentId()
    {
        Map parentTypesMap = smmActivityParentLinkEntity::getParentTypes(
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, Partition)),
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, DataAreaId)),
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, RefRecId)));

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, ParentType)),
            parentTypesMap,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondParentTypes</Name>
				<Source><![CDATA[
    protected static Map getSecondParentTypes(str _partitionIdField, str _dataAreaIdField, str _refRecIdField)
    {
        Map map = new Map(Types::String, Types::String);

        map.insert(int2Str(any2Int(smmActivityParentType::ServiceOrderLine)), strFmt('CAST ((SELECT SERVICEORDERLINENUM FROM SMASERVICEORDERLINE WHERE RECID = %3 AND SMASERVICEORDERLINE.DATAAREAID = %2 AND SMASERVICEORDERLINE.PARTITION = %1) AS NVARCHAR)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLSecondParentId</Name>
				<Source><![CDATA[
    private static str getSQLSecondParentId()
    {
        Map parentTypesMap = smmActivityParentLinkEntity::getSecondParentTypes(
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, Partition)),
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, DataAreaId)),
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, RefRecId)));


        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(smmActivityParentLinkEntity), tableStr(smmActivityParentLinkTable), fieldStr(smmActivityParentLinkTable, ParentType)),
            parentTypesMap,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLink</Name>
				<Source><![CDATA[
    // To insert a parent link record for a activity
    private smmActivityParentLinkTable insertLink(smmActivityParentRefRecId _refRecId)
    {
        smmActivityParentLinkTable  activityParentLinkTable;

        if (this.ParentType != smmActivityParentType::None && _refRecId)
        {
            activityParentLinkTable.ActivityNumber = this.ActivityNumber;
            activityParentLinkTable.ParentType = this.ParentType;
            activityParentLinkTable.RefTableId = smmActivityParentLink::parentType2RefTableId(this.ParentType);
            activityParentLinkTable.RefRecId = _refRecId;
            activityParentLinkTable.PrimaryLink = this.IsPrimaryLink;

            // We skip the insert() because it will attempt to insert "related" links.
            // Since we are importing data it is assumed that these related links
            // already exist in the imported data.
            activityParentLinkTable.doInsert();
        }

        return activityParentLinkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        smmActivityParentLinkTable linkTable = _dataSourceCtx.getBuffer();

        if (_dataSourceCtx.name() == dataentitydatasourcestr(smmActivityParentLinkEntity, smmActivityParentLinkTable))
        {
            if (this.ParentType == smmActivityParentType::ServiceOrderLine)
            {
                // Set the reference directly as linkedId() will not expect InventTransId in this scenario
                SMAServiceOrderLine line = SMAServiceOrderLine::find(this.ParentId, str2Num(this.ParentSecondaryId));
                
                linkTable = this.insertLink(line.RecId);
            }
            else
            {
                FieldId refFieldId = linkTable.type2FieldId();
                Common parent;

                DictTable dictTable = new DictTable(smmActivityParentLink::parentType2RefTableId(this.ParentType));
                if (dictTable)
                {
                    parent = dictTable.makeRecord();
                }

                if (refFieldId && dictTable)
                {
                    select firstonly parent where parent.(refFieldId) == this.ParentId;
                }

                if (!parent)
                {
                    throw error(strFmt("@CaseManagement:Case_EntityError_InvalidParentIdForType", this.ParentId, this.ParentType));
                }

                linkTable = this.insertLink(parent.RecId);
            }
        }

        this.ReferenceTableID = linkTable.RefTableId;
        this.Reference = linkTable.RefRecId;
        this.RecId = linkTable.RecId;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CaseManagement:Case_EntityTitle_smmActivityParentLinkEntityTitle</Label>
	<Tags>Activities</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>smmActivityParentLinkStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>smmActivityParentLinkTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentType</Name>
			<DataField>ParentType</DataField>
			<DataSource>smmActivityParentLinkTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPrimaryLink</Name>
			<DataField>PrimaryLink</DataField>
			<DataSource>smmActivityParentLinkTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reference</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RefRecId</DataField>
			<DataSource>smmActivityParentLinkTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceTableID</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RefTableId</DataField>
			<DataSource>smmActivityParentLinkTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ParentId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>getSQLParentId</ComputedFieldMethod>
			<ExtendedDataType>smmActivityParentName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ParentSecondaryId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>getSQLSecondParentId</ComputedFieldMethod>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ActivityNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ParentType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ParentId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ParentSecondaryId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>smmActivityParentLinkTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>smmActivityParentLinkTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>