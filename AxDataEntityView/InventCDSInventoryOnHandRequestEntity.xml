<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCDSInventoryOnHandRequestEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class InventCDSInventoryOnHandRequestEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>queryOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query the On-hand information for the distinct product stored in On-hand Request entity.
    /// </summary>
    /// <param name = "_inventCDSInventoryOnHandRequestRecord">The CDS Inventory On-hand Request entity record.</param>
    /// <returns>The list of related entities that need to be resynced.</returns>
    /// <remarks>
    /// This method is aimed to be used by Dual Write to trigger price and discount calculation updates.
    /// See <c>RunDocumentAction</c> OData action on the <c>DualWriteProjectConfigurationEntity</c> entity.
    /// </remarks>
    public static List queryOnHand(Common _inventCDSInventoryOnHandRequestRecord)
    {
        InventCDSInventoryOnHandRequestEntity inventCDSInventoryOnHandRequestRecord = _inventCDSInventoryOnHandRequestRecord;
        List onHandRecords = new List(Types::Container);

        if (inventCDSInventoryOnHandRequestRecord != null)
        {
            if (inventCDSInventoryOnHandRequestRecord.IsATPCalculation)
            {
                onHandRecords = inventCDSInventoryOnHandRequestRecord.calculateATP();
            }
            else
            {
                onHandRecords = inventCDSInventoryOnHandRequestRecord.generateOnHandEntries();
            }
        }
        
        return onHandRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateATP</Name>
				<Source><![CDATA[
    private List calculateATP()
    {
        InventDim inventDim;
        InventDistinctProduct inventDistinctProduct;
        EcoResDistinctProduct ecoResDistinctProduct;

        select firstonly1 * from inventDim
            join ItemId from inventDistinctProduct
                where inventDistinctProduct.InventDimId == inventDim.inventDimId
            exists join EcoResDistinctProduct
                where EcoResDistinctProduct.RecId == inventDistinctProduct.Product
                   && EcoResDistinctProduct.DisplayProductNumber == this.ProductNumber;

        inventDim.InventSiteId = this.InventorySiteId;
        inventDim.InventLocationId = this.InventoryWarehouseId;
        inventDim = InventDim::findOrCreate(inventDim);

        SalesTmpATP salesTmpATP;
        SalesLine salesLine = SalesLine::findLineCreationSequence(this.ReferenceNumber, this.LineCreationSequenceNumber);
        SalesATPCalculation salesATPCalculation = SalesATPCalculation::newSalesCalculation(inventDistinctProduct.ItemId, inventDim.InventDimId, salesLine ? salesLine.CustAccount : '');
        salesTmpATP.setTmpData(salesATPCalculation.calcSalesTmpATP(salesLine ? salesLine.InventTransId : '', this.OrderQuantity));

        InventCDSInventoryOnHandEntry onHandEntry;
        InventCDSInventoryOnHandRequest onHandRequest;

        insert_recordset onHandEntry
            (ATPDate, ATPQty, Issues, ProjectedOnhand, Receipts, OrderQty, UnavailableOnHand, RequestId, InventSiteId, InventLocationId)
        select ATPDate, ATPQty, Issues, ProjectedOnhand, Receipts, OrderQty, UnavailableOnHand
            from salesTmpATP order by ATPDate
        join RequestId, InventSiteId, InventLocationId from onHandRequest
            where onHandRequest.RequestId == this.RequestId;

        List onHandRecords = new List(Types::Container);
        InventCDSInventoryOnHandEntryEntity onHandEntryEntity;

        while select RecId from onHandEntryEntity 
            where onHandEntryEntity.RequestId == this.RequestId
        {
            onHandRecords.addEnd([onHandEntryEntity.TableId, onHandEntryEntity.RecId]);
        }

        return onHandRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOnHandEntries</Name>
				<Source><![CDATA[
    private List generateOnHandEntries()
    {    
        List onHandRecords = new List(Types::Container);

        this.insertOnHandEntries();

        InventCDSInventoryOnHandEntryEntity onHandEntryEntity;

        while select RecId from onHandEntryEntity
            where onHandEntryEntity.RequestId == this.RequestId
        {
            onHandRecords.addEnd([onHandEntryEntity.TableId, onHandEntryEntity.RecId]);
        }

        return onHandRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOnHandEntries</Name>
				<Source><![CDATA[
    private void insertOnHandEntries()
    {
        InventCDSInventoryOnHandEntry onHandEntry;
        InventCDSInventoryOnHandRequest onHandRequest;
        InventOnHandByWarehouse inventOnHandByWarehouse;
        InventDistinctProduct inventDistinctProduct;
        EcoResDistinctProduct ecoResDistinctProduct;
        InventTable inventTable;

        select firstonly inventTable
            exists join inventDistinctProduct
                where inventDistinctProduct.ItemId == inventTable.ItemId
                exists join ecoResDistinctProduct
                    where ecoResDistinctProduct.RecId == inventDistinctProduct.Product
                       && ecoResDistinctProduct.DisplayProductNumber == this.ProductNumber;

        if (InventCalcWHSQtyForCDSInventOnHandRequestFlight::instance().isEnabled()
            && WHSInventEnabled::exist(inventTable.ItemId))
        {
            while select InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, PhysicalInvent, OnOrder, OrderedSum, AvailPhysical, AvailOrdered, TotalAvailable, ReservPhysical, ReservOrdered
            from inventOnHandByWarehouse
                join RequestId from onHandRequest
                    where onHandRequest.RequestId == this.RequestId
                 exists join inventDistinctProduct
                    where inventDistinctProduct.ItemId == inventOnHandByWarehouse.ItemId
                       && inventDistinctProduct.InventColorId == inventOnHandByWarehouse.InventColorId
                       && inventDistinctProduct.InventSizeId == inventOnHandByWarehouse.InventSizeId
                       && inventDistinctProduct.InventStyleId == inventOnHandByWarehouse.InventStyleId
                       && inventDistinctProduct.configId == inventOnHandByWarehouse.configId
                       && inventDistinctProduct.InventVersionId == inventOnHandByWarehouse.InventVersionId
                exists join EcoResDistinctProduct
                    where EcoResDistinctProduct.RecId == inventDistinctProduct.Product
                       && EcoResDistinctProduct.DisplayProductNumber == this.ProductNumber
            {
                InventDim   inventDim;

                inventDim.InventColorId     = inventOnHandByWarehouse.InventColorId;
                inventDim.InventSizeId      = inventOnHandByWarehouse.InventSizeId;
                inventDim.InventStyleId     = inventOnHandByWarehouse.InventStyleId;
                inventDim.configId          = inventOnHandByWarehouse.configId;
                inventDim.InventVersionId   = inventOnHandByWarehouse.InventVersionId;
                inventDim.InventSiteId      = inventOnHandByWarehouse.InventSiteId;
                inventDim.InventLocationId  = inventOnHandByWarehouse.InventLocationId;

                inventDim = InventDim::findOrCreate(inventDim);
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventDim);

                WHSInventReserveQty wHSInventReserveQty = WHSInventReserveQty::newFromParms(
                    inventTable,
                    inventDim,
                    inventDimParm);

                onHandEntry.InventSiteId                = inventOnHandByWarehouse.InventSiteId;
                onHandEntry.InventLocationId            = inventOnHandByWarehouse.InventLocationId;
                onHandEntry.OnHandQuantity              = inventOnHandByWarehouse.physicalInvent;
                onHandEntry.OnOrderQuantity             = inventOnHandByWarehouse.OnOrder;
                onHandEntry.OrderedQuantity             = whsInventReserveQty.orderedSum();
                onHandEntry.AvailableOnHandQuantity     = whsInventReserveQty.availPhysical();
                onHandEntry.AvailableOrderedQuantity    = whsInventReserveQty.availOrdered();
                onHandEntry.TotalAvailableQuantity      = wHSInventReserveQty.availTotal();
                onHandEntry.ReservedOrderedQuantity     = wHSInventReserveQty.reservOrdered();
                onHandEntry.ReservedOnHandQuantity      = wHSInventReserveQty.reservPhysical();
                onHandEntry.RequestId                   = onHandRequest.RequestId;
                onHandEntry.insert();
            }
        }
        else
        {
            insert_recordset onHandEntry
            (InventSiteId, InventLocationId, OnHandQuantity, OnOrderQuantity, OrderedQuantity, AvailableOnHandQuantity,
            AvailableOrderedQuantity, TotalAvailableQuantity, ReservedOnHandQuantity, ReservedOrderedQuantity, RequestId)
            select InventSiteId, InventLocationId, PhysicalInvent, OnOrder, OrderedSum, AvailPhysical, AvailOrdered, TotalAvailable, ReservPhysical, ReservOrdered
                from inventOnHandByWarehouse
                join RequestId from onHandRequest
                    where onHandRequest.RequestId == this.RequestId
                exists join inventDistinctProduct
                    where inventDistinctProduct.ItemId == inventOnHandByWarehouse.ItemId
                       && inventDistinctProduct.InventColorId == inventOnHandByWarehouse.InventColorId
                       && inventDistinctProduct.InventSizeId == inventOnHandByWarehouse.InventSizeId
                       && inventDistinctProduct.InventStyleId == inventOnHandByWarehouse.InventStyleId
                       && inventDistinctProduct.configId == inventOnHandByWarehouse.configId
                       && inventDistinctProduct.InventVersionId == inventOnHandByWarehouse.InventVersionId
                exists join EcoResDistinctProduct
                    where EcoResDistinctProduct.RecId == inventDistinctProduct.Product
                       && EcoResDistinctProduct.DisplayProductNumber == this.ProductNumber;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CDSIntegration</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventCDSInventoryOnHandRequestEntityDevDoc</DeveloperDocumentation>
	<Label>@SCM:InventCDSInventoryOnHandRequestEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>InventCDSInventoryOnHandRequestStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CDSInventoryOnHandRequests</PublicCollectionName>
	<PublicEntityName>CDSInventoryOnHandRequest</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestId</Name>
			<DataField>RequestId</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<DataField>ProductNumber</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsATPCalculation</Name>
			<DataField>IsATPCalculation</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderQuantity</Name>
			<DataField>OrderQuantity</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventorySiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceNumber</Name>
			<DataField>ReferenceNumber</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineCreationSequenceNumber</Name>
			<DataField>LineCreationSequenceNumber</DataField>
			<DataSource>InventCDSInventoryOnHandRequest</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RequestId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResReleasedDistinctProductCDSEntity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>EcoResReleasedDistinctProductCDSEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CDSReleasedDistinctProducts</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSInventoryOnHandRequests</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResReleasedDistinctProductCDSEntity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DVReleasedDistinctProducts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResReleasedDistinctProductDVEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>DVReleasedDistinctProducts</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSInventoryOnHandRequests</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResReleasedDistinctProductDVEntity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventCDSInventoryOnHandRequest</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventCDSInventoryOnHandRequest</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>