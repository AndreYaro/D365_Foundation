<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerPaymentFormatEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomerPaymentFormatEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }

        if (_dataSourceCtx.name() == dataentitydatasourcestr(CustomerPaymentFormatEntity, CustPaymFormat)
            && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            this.resolveClassIdAndFormatName(_dataSourceCtx.getBuffer());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFormatNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the format name.
    /// </summary>
    /// <param name = "_format">The customer payment format.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> where the format name can be returned.</param>
    /// <remarks>
    ///  Resolves the format field on the CustPaymFormat table.
    /// </remarks>
    delegate void resolveFormatNameDelegate(CustPaymFormat _format, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveClassIdAndFormatName</Name>
				<Source><![CDATA[
    private void resolveClassIdAndFormatName(CustPaymFormat _format)
    {
        _format.classId = className2Id(this.className);

        if (_format.classId)
        {
            if ((_format.bankFormat == BankFormat::Export && SysDictClass::isSuperclass(_format.classId, classnum(CustOutPaym)))
                || (_format.bankFormat == BankFormat::Import && SysDictClass::isSuperclass(_format.classId, classnum(CustInPaym)))
                || (_format.bankFormat == BankFormat::ReturnFormat && SysDictClass::isSuperclass(_format.classId, classnum(CustPaymReconciliationImport)))
                || (_format.bankFormat == BankFormat::Remittance && SysDictClass::isSuperclass(_format.classId, classnum(CustOutPaymRemittance))))
            {
                DictClass dictClass = new DictClass(_format.classId);
                _format.format = dictClass.makeObject().interfaceName();
            }
            else
            {
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.resolveFormatNameDelegate(_format, result);
                if (result.hasResult())
                {
                    _format.format = result.result();
                }
                else
                {
                    throw error("@CashManagement:InvalidPaymentFormatClass");
                }
            }
        }
        else
        {
            throw error("@CashManagement:InvalidPaymentFormatClass");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            isValid = CustVendPaymFormatTable::validateConfigurationKeyEnabled(this.ClassName);
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@CashManagement:CustPaymFormatEntity</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CustomerPaymentFormatStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>AccountsReceivable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Type</Name>
			<DataField>bankFormat</DataField>
			<DataSource>CustPaymFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClassId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>classId</DataField>
			<DataSource>CustPaymFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClassName</Name>
			<DataField>className</DataField>
			<DataSource>CustPaymFormat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>format</DataField>
			<DataSource>CustPaymFormat</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>Type</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ClassName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustPaymFormat</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustPaymFormat</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>