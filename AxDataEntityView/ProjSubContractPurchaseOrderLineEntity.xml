<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSubContractPurchaseOrderLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjSubContractPurchaseOrderLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert entity operation.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns>true if succeed; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjSubContractPurchaseOrderLineEntity, PurchLine):
                PurchLine purchLine = _dataSourceCtx.getBuffer();
                this.initializePurchLine(purchLine, this.SubcontractNumber, this.ProjId, this.PurchPrice, this.PurchQty, this.SubConTransClass);
                ret = super(_entityCtx, _dataSourceCtx);
                this.writeToPurchLineForeignTradeCategoryHelper(purchLine, this.SubConTransClass);
                break;

            case dataEntityDataSourceStr(ProjSubContractPurchaseOrderLineEntity, ProjSubConLine):
                ProjSubConLine projSubConLine = _dataSourceCtx.getBuffer();
                projSubConLine.PurchLine = purchLine::findBySubConLineNumber(projSubConLine.SubConLineNumber).RecId;
                projSubConLine.ProjSubConTable = ProjSubConTable::findBySubConNumber(projSubConLine.SubConNumber).RecId;
                projSubConLine.SubConLineType = this.SubConLineType;
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }
 
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update entity operation.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns>true if succeed; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjSubContractPurchaseOrderLineEntity, PurchLine))
        {
            PurchLine purchLine = _dataSourceCtx.getBuffer();
            this.initializeFieldsOnUpdate(purchLine);
            this.updatePurchLinePriceAndAmount(purchLine, this.PurchPrice, this.PurchQty);

            _dataSourceCtx.skipDefaultRow(true);
        }
        
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLinePriceAndAmount</Name>
				<Source><![CDATA[
    private void updatePurchLinePriceAndAmount(PurchLine _purchLine, Amount _price, Qty _qty)
    {
        _purchLine.PurchPrice = _price;
        _purchLine.LineAmount = _purchLine.calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchLine</Name>
				<Source><![CDATA[
    private void initializePurchLine(PurchLine _purchLine, ProjSubConIdBase _subConNumber, ProjId _projId, Amount _price, Qty _qty, ProjSubConTransClass _subConTransClass)
    {
        PurchTable purchTable = PurchTable::findBySubConNumber(_subConNumber);
        _purchLine.PurchId = purchTable.PurchId;
        _purchLine.initFromPurchTable(purchTable);

        _purchLine.ProjId = _projId;
        _purchLine.modifiedField(fieldNum(PurchLine, ProjId));

        switch (_subConTransClass)
        {
            case ProjSubConTransClass::Material:
                _purchLine.initFromInventTable(InventTable::find(_purchLine.ItemId));
                this.updatePurchLinePriceAndAmount(_purchLine, _price, _qty);
                break;

            default :
                 // Nothing need to be done for Time and Expense type. So default case will execute for these two.
                 break;                 
        }

        _purchline.initFromProjTable(ProjTable::find(_purchLine.ProjId));

        ProjLineProperty projLineProperty;
        select firstonly LinePropertyId from projLineProperty
            where projLineProperty.ToBeInvoiced == NoYes::Yes;

        _purchLine.ProjLinePropertyId = projLineProperty.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToPurchLineForeignTradeCategoryHelper</Name>
				<Source><![CDATA[
    private void writeToPurchLineForeignTradeCategoryHelper(PurchLine _purchLine, ProjSubConTransClass _subConTransClass)
    {
        switch (_subConTransClass)
        {
            case ProjSubConTransClass::Time:
                this.writeToPurchLineForeignTradeCategory(_purchLine);
                break;

            case ProjSubConTransClass::Expense:
                this.writeToPurchLineForeignTradeCategory(_purchLine);
                break;

            default :
                // Nothing need to be done for Material type. So default case will execute for the Material type.
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFieldsOnUpdate</Name>
				<Source><![CDATA[
    private void initializeFieldsOnUpdate(PurchLine _incomingPurchLine)
    {
        PurchLine orig = _incomingPurchLine.extensionOrig();
        ListIterator updateIterator = new ListIterator(this.fieldsRequiringReinitialization());

        while (updateIterator.more())
        {
            fieldId updateField = updateIterator.value();

            if (_incomingPurchLine.(updateField) != orig.(updateField))
            {
                _incomingPurchLine.modifiedField(updateField);
                if (updateField == fieldNum(PurchLine, PurchQty))
                {
                    _incomingPurchLine.purchQtyModifiedInteraction();
                }
            }

            updateIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsRequiringReinitialization</Name>
				<Source><![CDATA[
    private List fieldsRequiringReinitialization()
    {
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(PurchLine, PriceUnit));
        result.addEnd(fieldNum(PurchLine, PurchPrice));
        result.addEnd(fieldNum(PurchLine, PurchUnit));
        result.addEnd(fieldNum(PurchLine, ItemId));
        result.addEnd(fieldNum(PurchLine, PurchQty));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToPurchLineForeignTradeCategory</Name>
				<Source><![CDATA[
    private void writeToPurchLineForeignTradeCategory(PurchLine _purchLine)
    {
        PurchLineForeignTradeCategory purchLineForeignTradeCategory;
        purchLineForeignTradeCategory.initFromPurchLine(_purchLine);
        purchLineForeignTradeCategory.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjSubContractPurchaseOrderLineEntityDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjSubContractPurchaseOrderLineEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjSubContractPurchaseOrderLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjSubContractPurchaseOrderLines</PublicCollectionName>
	<PublicEntityName>ProjSubContractPurchaseOrderLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCategory</Name>
			<DataField>ProcurementCategory</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchId</Name>
			<Mandatory>No</Mandatory>
			<DataField>PurchId</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchPrice</Name>
			<DataField>PurchPrice</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchStatus</Name>
			<DataField>PurchStatus</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchUnit</Name>
			<DataField>PurchUnit</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjSubContractLineNumber</Name>
			<DataField>ProjSubContractLineNumber</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConLineStatus</Name>
			<DataField>SubConLineStatus</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConLineType</Name>
			<DataField>SubConLineType</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConRoleID</Name>
			<DataField>SubConRoleID</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConWriteInName</Name>
			<DataField>SubConWriteInName</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryDate</Name>
			<DataField>DeliveryDate</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchQty</Name>
			<DataField>PurchQty</DataField>
			<DataSource>PurchLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubcontractNumber</Name>
			<DataField>SubConNumber</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConTransCategory</Name>
			<DataField>SubConTransCategory</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConTransClass</Name>
			<DataField>SubConTransClass</DataField>
			<DataSource>ProjSubConLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjSubContractLineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PurchLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PurchLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjSubConLine</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjSubConLine</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjSubContractLineNumber</Field>
								<JoinDataSource>PurchLine</JoinDataSource>
								<RelatedField>SubConLineNumber</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>