<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesRebateAgreementLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesRebateAgreementLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.skipDataSourceValidateField(fieldNum(SalesRebateAgreementLineEntity, RebateAgreementRefRecId), true);
        this.skipDataSourceValidateField(fieldNum(SalesRebateAgreementLineEntity, LineNumber), true);

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueType</Name>
				<Source><![CDATA[
    private void defaultValueType()
    {
        if (this.RebateAmountPerProductUnitSold)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, RebateAmountPerProductUnitSold)))
            {
                this.ValueType = PdsRebateAmtType::AmountPerUnit;
            }
        }
        else if (this.FixedRebateAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, FixedRebateAmount)))
            {
                this.ValueType = PdsRebateAmtType::FixedAmount;
            }
        }
        else if (this.RebatePercentage)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, RebatePercentage)))
            {
                this.ValueType = PdsRebateAmtType::Percentage;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValue</Name>
				<Source><![CDATA[
    private void defaultValue()
    {
        if (this.RebateAmountPerProductUnitSold)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, RebateAmountPerProductUnitSold)))
            {
                this.Value = this.RebateAmountPerProductUnitSold;
            }
        }
        else if (this.FixedRebateAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, FixedRebateAmount)))
            {
                this.Value = this.FixedRebateAmount;
            }
        }
        else if (this.RebatePercentage)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, RebatePercentage)))
            {
                this.Value = this.RebatePercentage;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromAmount</Name>
				<Source><![CDATA[
    private void defaultFromAmount()
    {
        if (this.FromNetSalesAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount)))
            {
                this.FromAmount = this.FromNetSalesAmount;
            }
        }
        else if (this.FromGrossSalesAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount)))
            {
                this.FromAmount = this.FromGrossSalesAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToAmount</Name>
				<Source><![CDATA[
    private void defaultToAmount()
    {
        if (this.ToNetSalesAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount)))
            {
                this.ToAmount = this.ToNetSalesAmount;
            }
        }
        else if (this.ToGrossSalesAmount)
        {
            if (this.isFieldSet(fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount)))
            {
                this.ToAmount = this.ToGrossSalesAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesRebateAgreementLineEntity, Value):
                this.defaultValue();
                break;

            case fieldNum(SalesRebateAgreementLineEntity, ValueType):
                this.defaultValueType();
                break;

            case fieldNum(SalesRebateAgreementLineEntity, FromAmount):
                this.defaultFromAmount();
                break;

            case fieldNum(SalesRebateAgreementLineEntity, ToAmount):
                this.defaultToAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountField</Name>
				<Source><![CDATA[
    private boolean validateAmountField(
        FieldId             _fieldNameValueEntered,
        FieldId             _fieldNameValueToUse,
        PdsRebateTakenFrom  _takenFrom
        )
    {
        PdsRebateAgreement agreement = PdsRebateAgreement::findRebateAgreementId(this.RebateAgreementId);

        if (this.(_fieldNameValueEntered)
            && agreement.PdsRebateTakenFrom != _takenFrom)
        {
            return checkFailed(strFmt("@MCR:CustomerRebateAgreementLineNetAndGrossAmountMismatchWithHeader",
                                                    fieldId2PName(tableNum(SalesRebateAgreementLineEntity), _fieldNameValueEntered),
                                                    fieldId2PName(tableNum(SalesRebateAgreementLineEntity), _fieldNameValueToUse),
                                                    agreement.PdsRebateTakenFrom));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine)
                && this.IsValidated
                && this.ValidatingWorkerPersonnelNumber)
        {
            PdsRebateAgreementLine agreementLine = _dataSourceCtx.getBuffer();
            agreementLine.pdsRebateAgreement().validateAgreement(this.ValidatingWorkerPersonnelNumber);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine)
                && this.IsValidated
                && this.ValidatingWorkerPersonnelNumber)
        {
            PdsRebateAgreementLine agreementLine = _dataSourceCtx.getBuffer();
            agreementLine.pdsRebateAgreement().validateAgreement(this.ValidatingWorkerPersonnelNumber);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount) :
                ret = ret && this.validateAmountField(  fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount),
                                                        fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount),
                                                        PdsRebateTakenFrom::Net);
                break;

            case fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount) :
                ret = ret && this.validateAmountField(  fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount),
                                                        fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount),
                                                        PdsRebateTakenFrom::Net);
                break;

            case fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount) :
                ret = ret && this.validateAmountField(  fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount),
                                                        fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount),
                                                        PdsRebateTakenFrom::Gross);
                break;

            case fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount) :
                ret = ret && this.validateAmountField(  fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount),
                                                        fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount),
                                                        PdsRebateTakenFrom::Gross);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.FromNetSalesAmount && this.FromGrossSalesAmount)
        {
            ret = checkFailed(strFmt("@MCR:CustomerRebateAgreementLineNetAndGrossAmountSpecified",
                                fieldId2PName(tableNum(SalesRebateAgreementLineEntity), fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount)),
                                fieldId2PName(tableNum(SalesRebateAgreementLineEntity), fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount))));
        }

        if (this.ToNetSalesAmount && this.ToGrossSalesAmount)
        {
            ret = checkFailed(strFmt("@MCR:CustomerRebateAgreementLineNetAndGrossAmountSpecified",
                                fieldId2PName(tableNum(SalesRebateAgreementLineEntity), fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount)),
                                fieldId2PName(tableNum(SalesRebateAgreementLineEntity), fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(SalesRebateAgreementLineEntity, Value),
                [fieldNum(SalesRebateAgreementLineEntity, RebateAmountPerProductUnitSold), fieldNum(SalesRebateAgreementLineEntity, FixedRebateAmount), fieldNum(SalesRebateAgreementLineEntity, RebatePercentage)]],
            [fieldNum(SalesRebateAgreementLineEntity, ValueType),
                [fieldNum(SalesRebateAgreementLineEntity, RebateAmountPerProductUnitSold), fieldNum(SalesRebateAgreementLineEntity, FixedRebateAmount), fieldNum(SalesRebateAgreementLineEntity, RebatePercentage)]],
            [fieldNum(SalesRebateAgreementLineEntity, FromAmount),
                    [fieldNum(SalesRebateAgreementLineEntity, FromNetSalesAmount), fieldNum(SalesRebateAgreementLineEntity, FromGrossSalesAmount)]],
            [fieldNum(SalesRebateAgreementLineEntity, ToAmount),
                    [fieldNum(SalesRebateAgreementLineEntity, ToNetSalesAmount), fieldNum(SalesRebateAgreementLineEntity, ToGrossSalesAmount)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmountPerProductUnitSoldComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>RebateAmountPerProductUnitSold</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>RebateAmountPerProductUnitSold</c> column in the entity.
    /// </returns>
    private static str rebateAmountPerProductUnitSoldComputedColumnDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(SalesRebateAgreementLineEntity),
            dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine),
            fieldStr(PdsRebateAgreementLine, RebateAmtType),
            PdsRebateAmtType::AmountPerUnit,
            fieldStr(PdsRebateAgreementLine, RebateValue),
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedRebateAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>FixedRebateAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>FixedRebateAmount</c> column in the entity.
    /// </returns>
    private static str fixedRebateAmountComputedColumnDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(SalesRebateAgreementLineEntity),
            dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine),
            fieldStr(PdsRebateAgreementLine, RebateAmtType),
            PdsRebateAmtType::FixedAmount,
            fieldStr(PdsRebateAgreementLine, RebateValue),
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebatePercentageComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>RebatePercentage</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>RebatePercentage</c> column in the entity.
    /// </returns>
    private static str rebatePercentageComputedColumnDefinition()
    {
        return SysComputedColumn::codeDependentRelation(
            tableStr(SalesRebateAgreementLineEntity),
            dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine),
            fieldStr(PdsRebateAgreementLine, RebateAmtType),
            PdsRebateAmtType::Percentage,
            fieldStr(PdsRebateAgreementLine, RebateValue),
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeDependentRelation</Name>
				<Source><![CDATA[
    private static str codeDependentRelation(PdsRebateTakenFrom _takenFrom, FieldName _relationField)
    {
        TableName entityName = tableStr(SalesRebateAgreementLineEntity);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonLiteral(_takenFrom),
                        SysComputedColumn::comparisonField(entityName, dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreement), fieldStr(PdsRebateAgreement, PdsRebateTakenFrom))),
                    SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(SalesRebateAgreementLineEntity, PdsRebateAgreementLine), _relationField),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromNetSalesAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>FromNetSalesAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>FromNetSalesAmount</c> column in the entity.
    /// </returns>
    private static str fromNetSalesAmountComputedColumnDefinition()
    {
        return SalesRebateAgreementLineEntity::codeDependentRelation(PdsRebateTakenFrom::Net, fieldStr(PdsRebateAgreementLine, RebateFromAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromGrossSalesAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>FromGrossSalesAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>FromGrossSalesAmount</c> column in the entity.
    /// </returns>
    private static str fromGrossSalesAmountComputedColumnDefinition()
    {
        return SalesRebateAgreementLineEntity::codeDependentRelation(PdsRebateTakenFrom::Gross, fieldStr(PdsRebateAgreementLine, RebateFromAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toNetSalesAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>ToNetSalesAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ToNetSalesAmount</c> column in the entity.
    /// </returns>
    private static str toNetSalesAmountComputedColumnDefinition()
    {
        return SalesRebateAgreementLineEntity::codeDependentRelation(PdsRebateTakenFrom::Net, fieldStr(PdsRebateAgreementLine, RebateToAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toGrossSalesAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>ToGrossSalesAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ToGrossSalesAmount</c> column in the entity.
    /// </returns>
    private static str toGrossSalesAmountComputedColumnDefinition()
    {
        return SalesRebateAgreementLineEntity::codeDependentRelation(PdsRebateTakenFrom::Gross, fieldStr(PdsRebateAgreementLine, RebateToAmount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsRebate</ConfigurationKey>
	<DeveloperDocumentation>@MCR:CustomerRebateAgreementLineDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>PdsRebateAgreements</FormRef>
	<Label>@MCR:CustomerRebateAgreementLine</Label>
	<Tags>Rebates</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SalesRebateAgreementLineStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>SalesRebateAgreementLines</PublicCollectionName>
	<PublicEntityName>SalesRebateAgreementLine</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedRebateAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromGrossSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromNetSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromSalesQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsValidated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmountPerProductUnitSold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebatePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToGrossSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToNetSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToSalesQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidatingWorkerPersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAgreementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>Currency</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>LineNum</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RebateAgreementRefRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RebateAgreementRefRecId</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValueType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RebateAmtType</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromAmount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RebateFromAmount</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromSalesQuantity</Name>
			<DataField>RebateFromQty</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToAmount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RebateToAmount</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToSalesQuantity</Name>
			<DataField>RebateToQty</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductUnitSymbol</Name>
			<Mandatory>No</Mandatory>
			<DataField>RebateUnit</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Value</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RebateValue</DataField>
			<DataSource>PdsRebateAgreementLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>RebateAmountPerProductUnitSold</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineRebateAmountPerUnit</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>rebateAmountPerProductUnitSoldComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FixedRebateAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineRebateFixedAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fixedRebateAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>RebatePercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineRebatePercentage</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>rebatePercentageComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RebateAgreementId</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>RebateAgreementId</DataField>
			<DataSource>PdsRebateAgreement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountTakenFrom</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PdsRebateTakenFrom</DataField>
			<DataSource>PdsRebateAgreement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FromNetSalesAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineFromNetAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fromNetSalesAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PDSRebateFromAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FromGrossSalesAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineFromGrossAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fromGrossSalesAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PDSRebateFromAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ToNetSalesAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineToNetAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>toNetSalesAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PDSRebateToAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ToGrossSalesAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@MCR:CustomerRebateAgreementLineToGrossAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>toGrossSalesAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>PDSRebateToAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsValidated</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Validated</DataField>
			<DataSource>PdsRebateAgreement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidatingWorkerPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>Verifier</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RebateAgreementId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PdsRebateAgreementLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PdsRebateAgreementLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PdsRebateAgreement</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PdsRebateAgreement</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Verifier</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>HcmWorker</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>Verifier</Name>
										<JoinRelationName>HcmWorker</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>PdsRebateProgramType</Name>
								<Field>PdsRebateProgramType</Field>
								<Status>Hidden</Status>
								<Value>Rebate</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>PdsRebateAgreement</Name>
								<JoinRelationName>PdsRebateAgreement</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>