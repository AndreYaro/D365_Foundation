<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSProjectContractEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSProjectContractEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert ||
            _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjCDSProjectContractEntity, ProjFundingSource))
            {
                ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;

                if (this.isFieldSet(fieldNum(ProjCDSProjectContractEntity, CustomerAccount)) &&
                    !_dataSourceCtx.getBuffer().RecId)
                {
                    CustTable custTable = CustTable::find(this.CustomerAccount);
                    fundingSource.ContractId = this.ProjectContractID;
                    fundingSource.CustAccount = this.CustomerAccount;
                    fundingSource.initFromCustAccount();
                }

                if (this.isFieldSet(fieldNum(ProjCDSProjectContractEntity, PaymentTerms)) &&
                    this.PaymentTerms)
                {
                    PaymTerm paymTerm = PaymTerm::find(this.PaymentTerms);
                    if (paymTerm.PaymSched)
                    {
                        fundingSource.PaymentscheduleId = paymTerm.PaymSched;
                    }
                }
            }
            else if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjCDSProjectContractEntity, DirPartyLocationPostalAddressV2Entity))
            {
                // Combine Line1 and Line2 to the format AX needs
                this.combineAddressLineFields();

                if (this.isAnyAddressFieldSet())
                {
                    // Prepare for address to be inserted/updated
                    DirPartyLocationPostalAddressV2Entity postalAddressEntity = _dataSourceCtx.getBuffer() as DirPartyLocationPostalAddressV2Entity;

                    postalAddressEntity.clear();

                    // Set resolve duplicate address field to No, this will create a new address for update.
                    postalAddressEntity.ResolveDuplicateAddress = NoYes::No;

                    postalAddressEntity.IsLocationOwner = NoYes::Yes;
                    postalAddressEntity.IsRoleInvoice = NoYes::Yes;
                    postalAddressEntity.Roles = 'Invoice';
                    postalAddressEntity.PartyNumber = DirPartyTable::findRec(CustTable::find(this.CustomerAccount).Party).PartyNumber;
                }
                else
                {
                    // Don't try to create an address since no data was provided, default/existing address will be used instead
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
            }
        }

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update && _dataSourceCtx.name() == dataEntityDataSourceStr(ProjCDSProjectContractEntity, ProjDataSource))
        {
            ProjDataSource::findOrCreateProjDataSource(this.SourceDataID);
        }

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert && _dataSourceCtx.name() == dataEntityDataSourceStr(ProjCDSProjectContractEntity, ProjInvoiceTable))
        {
            CustTable custTable;

            ProjInvoiceTable projInvoiceTable = _dataSourceCtx.getBuffer() as ProjInvoiceTable;

            if (this.CustomerAccount)
            {
                custTable = CustTable::find(this.CustomerAccount);
            }

            if (custTable)
            {
                projInvoiceTable.TaxGroupId     = custTable.TaxGroup;
                projInvoiceTable.ProjPriceGroup = custTable.PriceGroup;
                projInvoiceTable.GiroType       = custTable.GiroTypeProjInvoice;
                projInvoiceTable.ListCodeId     = EUSalesList::resolveListCodeByCountryState(custTable.postalAddress(), projInvoiceTable.payer().postalAddress());
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post changes to entity.
    /// </summary>
    /// <param name = "_entityCtx">The data entity's runtime context</param>
   public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (this.SourceDataID == '')
        {
            this.fieldState(fieldNum(ProjCDSProjectContractEntity, SourceDataId), FieldState::NotSet);
        }

        if (this.ExchangeRate == 0.00 || this.CurrencyCode == Ledger::accountingCurrency())
        {
            this.fieldState(fieldNum(ProjCDSProjectContractEntity, ExchangeRate), FieldState::NotSet);
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;
    
        if (this.orig().CustomerAccount && 
            this.isFieldSet(fieldNum(ProjCDSProjectContractEntity, CustomerAccount)) &&
            this.orig().CustomerAccount != this.CustomerAccount)
        {
            ret = ret && checkFailed("@Proj:ProjCDSProjectContractEntityErrorUpdatingCustomer");
        }

        ret = ret && super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjCDSProjectContractEntity, ProjFundingSource))
        {
            if (this.isAnyAddressFieldSet())
            {
                ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;

                // Need to get the location recid of the address that was just created
                fundingSource.InvoiceLocation = this.findExistingAddress();
            }
        }

        ret = super(_entityCtx, _dataSourceCtx);
    
        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjCDSProjectContractEntity, ProjFundingSource))
        {
            ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;
            if (fundingSource.RecId)
            {
                if (ProjFundingRule::numberOfRulesForContract(fundingSource.ContractId) == 0)
                {
                    ProjFundingRule::createDefaultFundingRule(fundingSource.ContractId, fundingSource.RecId);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
    
        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjCDSProjectContractEntity, ProjFundingSource))
        {
            if (this.isAnyAddressFieldSet())
            {
                ProjFundingSource fundingSource = _dataSourceCtx.getBuffer() as ProjFundingSource;

                // Need to get the location recid of the address that was possibly updated
                fundingSource.InvoiceLocation = this.findExistingAddress();
            }
        }

        ret = super(_entityCtx, _dataSourceCtx);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyAddressFieldSet</Name>
				<Source><![CDATA[
    private boolean isAnyAddressFieldSet()
    {
        boolean ret = false;

        container addressFields = [
            fieldnum(ProjCDSProjectContractEntity, AddressCity),
            fieldnum(ProjCDSProjectContractEntity, AddressCountryRegionId),
            fieldnum(ProjCDSProjectContractEntity, AddressState),
            fieldnum(ProjCDSProjectContractEntity, AddressStreet),
            fieldnum(ProjCDSProjectContractEntity, AddressZipCode)
        ];

        for (int i = 1; i <= conLen(addressFields) && !ret; i++)
        {
            int columnNum = conPeek(addressFields, i);

            if (this.isFieldSet(columnNum))
            {
                ret = (this.(columnNum)) ? true : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the remittance address logistics location rec id.
    /// </summary>
    /// <returns>An instance of the logistics location rec id.</returns>
    private RecId findExistingAddress()
    {
        if (this.AddressStreet == '' && (this.AddressLine1 != '' || this.AddressLine2 != ''))
        {
            this.combineAddressLineFields();
        }

        DirPartyTable dirPartyTable;
        DirPartyLocation dirLocation;
        LogisticsLocation logisticLocation;
        LogisticsPostalAddress postalAddress;
        CustTable custTable;

        select firstonly RecId from logisticLocation
            exists join dirLocation
                where dirLocation.Location == logisticLocation.RecId
                && dirLocation.IsRoleInvoice == NoYes::Yes
            exists join custTable
                where custTable.AccountNum == this.CustomerAccount
            exists join dirPartyTable
                where dirPartyTable.RecId == custTable.Party
                && dirPartyTable.RecId == dirLocation.Party
            exists join postalAddress
                where postalAddress.Location == dirLocation.Location
                    && postalAddress.CountryRegionId == this.AddressCountryRegionId
                    && postalAddress.State == this.AddressState
                    && postalAddress.City == this.AddressCity
                    && postalAddress.Street == this.AddressStreet
                    && postalAddress.ZipCode == this.AddressZipCode;

        return logisticLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSQLForLine1</Name>
				<Source><![CDATA[
    private static str generateSQLForLine1()
    {
        // Generates the following sql statement:
        // select substring(street, 0, IIF(CHARINDEX(char(10), street, 0) > 0, CHARINDEX(char(10), street, 0), LEN(street)+1))
        // from LogisticsLocation a
        // left join LogisticsPostalAddress b on b.location = a.recid
        // where a.RECID = <value of InvoiceLocation field>
        // AND b.VALIDFROM <= SYSUTCDATETIME() AND SYSUTCDATETIME() <= b.VALIDTO

        const str selectStatementBase = 'SELECT SUBSTRING(%1,0,IIF(CHARINDEX(CHAR(10),%1,0)>0,CHARINDEX(CHAR(10),%1,0),LEN(%1)+1))'
                                         + ' FROM %2 a LEFT JOIN %3 b ON b.%4=a.RECID WHERE a.RECID=%5'
                                         + ' AND b.%6<=SYSUTCDATETIME() AND SYSUTCDATETIME()<=b.%7';

        return ProjCDSProjectContractEntity::generateSQLStatement(selectStatementBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSQLForLine2</Name>
				<Source><![CDATA[
    private static str generateSQLForLine2()
    {
        // Generates the following sql statement:
        // select IIF(CHARINDEX(char(10), street, 0) > 0, substring(street, CHARINDEX(char(10), street, 0)+1, LEN(street)),'')
        // from LogisticsLocation a
        // left join LogisticsPostalAddress b on b.location = a.recid
        // where a.RECID = <value of InvoiceLocation field>
        // AND b.VALIDFROM <= SYSUTCDATETIME() AND SYSUTCDATETIME() <= b.VALIDTO

        const str selectStatementBase = "SELECT IIF(CHARINDEX(CHAR(10),%1,0)>0,SUBSTRING(%1,CHARINDEX(CHAR(10),%1,0)+1,LEN(%1)),'')"
                                         + ' FROM %2 a LEFT JOIN %3 b ON b.%4=a.RECID WHERE a.RECID=%5'
                                         + ' AND b.%6<=SYSUTCDATETIME() AND SYSUTCDATETIME()<=b.%7';

        return ProjCDSProjectContractEntity::generateSQLStatement(selectStatementBase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSQLStatement</Name>
				<Source><![CDATA[
    private static str generateSQLStatement(str _selectStatementBase)
    {
        DictTable dictTableLogLoc = new DictTable(tableNum(LogisticsLocation));
        DictTable dictTableLogPostAddr = new DictTable(tableNum(LogisticsPostalAddress));

        str tableLogisticsLocation = dictTableLogLoc.name(DbBackend::Sql);
        str tableLogisticsPostalAddress = dictTableLogPostAddr.name(DbBackend::Sql);;
        str fieldStreetName = dictTableLogPostAddr.fieldName(fieldNum(LogisticsPostalAddress, Street), DbBackend::Sql);
        str fieldLocationName = dictTableLogPostAddr.fieldName(fieldNum(LogisticsPostalAddress, Location), DbBackend::Sql);;
        str fieldValidFromName = dictTableLogPostAddr.fieldName(fieldNum(LogisticsPostalAddress, ValidFrom), DbBackend::Sql);;
        str fieldValidToName = dictTableLogPostAddr.fieldName(fieldNum(LogisticsPostalAddress, ValidTo), DbBackend::Sql);;
        str fieldInvoiceLocationValue = SysComputedColumn::returnField(tablestr(ProjCDSProjectContractEntity),
                                            dataEntityDataSourceStr(ProjCDSProjectContractEntity, DirPartyLocationPostalAddressV2Entity),
                                            fieldStr(DirPartyLocationPostalAddressV2Entity, Location));

        str sql = strfmt(_selectStatementBase,
                            fieldStreetName,
                            tableLogisticsLocation,
                            tableLogisticsPostalAddress,
                            fieldLocationName,
                            fieldInvoiceLocationValue,
                            fieldValidFromName,
                            fieldValidToName);
        return sql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineAddressLineFields</Name>
				<Source><![CDATA[
    private void combineAddressLineFields()
    {
        const int maxAxaptaStreetLength = 250;
        int line2Length = strlen(this.AddressLine2);
        str addressResult;

        if (this.isFieldSet(fieldnum(ProjCDSProjectContractEntity, AddressLine1)) || 
            this.isFieldSet(fieldnum(ProjCDSProjectContractEntity, AddressLine2)))
        {
            if (line2Length > 0 
                && (strlen(this.AddressLine1) + strlen(this.AddressLine2)) < (maxAxaptaStreetLength - 1))
            {
                addressResult = this.AddressLine1 + '\n' + this.AddressLine2;
            }
            else
            {
                addressResult = this.AddressLine1;
            }

            if (this.AddressStreet != addressResult)
            {
                // don't update value unless its necessary as it triggers the field change state.
                this.AddressStreet = addressResult;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSProjectContractEntityDevDoc</DeveloperDocumentation>
	<FormRef>ProjInvoiceTable</FormRef>
	<Label>@Proj:ProjCDSProjectContractEntityTitle</Label>
	<Tags>CDS projects</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjCDSProjectContractStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CDSProjectContracts</PublicCollectionName>
	<PublicEntityName>CDSProjectContract</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CustAccount</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<Mandatory>No</Mandatory>
			<DataField>Description</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CurrencyId</DataField>
			<DataSource>ProjInvoiceTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ExchRate</DataField>
			<DataSource>ProjInvoiceCurrency</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentTerms</Name>
			<Mandatory>No</Mandatory>
			<DataField>PaymentTermsId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerReference</Name>
			<Mandatory>No</Mandatory>
			<DataField>CustRef</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDataID</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>SourceId</DataField>
			<DataSource>ProjDataSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidFrom</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidFrom</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidTo</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidTo</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCity</Name>
			<DataField>City</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreet</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Street</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AddressLine1</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:AddressLine1</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>generateSQLForLine1</ComputedFieldMethod>
			<StringSize>250</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AddressLine2</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:AddressLine2</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>generateSQLForLine2</ComputedFieldMethod>
			<StringSize>250</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressState</Name>
			<DataField>State</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountryRegionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>DirPartyLocationPostalAddressV2Entity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceLocation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InvoiceLocation</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>PartyTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectContractID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjInvoiceTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjInvoiceTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjFundingSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjFundingSource</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>PartyTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DirPartyTable</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>DirOrganizationBase</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirOrganizationBase</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>DirOrganization</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DirOrganization</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
											<AxQuerySimpleDerivedDataSource>
												<Name>OMInternalOrganization</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>OMInternalOrganization</Table>
												<DataSources />
												<DerivedDataSources>
													<AxQuerySimpleDerivedDataSource>
														<Name>CompanyInfo</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>CompanyInfo</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
													<AxQuerySimpleDerivedDataSource>
														<Name>OMOperatingUnit</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>OMOperatingUnit</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
													<AxQuerySimpleDerivedDataSource>
														<Name>OMTeam</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>OMTeam</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
												</DerivedDataSources>
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>DirPerson</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirPerson</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Party</Field>
										<JoinDataSource>ProjFundingSource</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirPartyLocationPostalAddressV2Entity</Name>
								<ApplyDateFilter>Yes</ApplyDateFilter>
								<DynamicFields>Yes</DynamicFields>
								<Table>DirPartyLocationPostalAddressV2Entity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>PartyNumber</Field>
										<JoinDataSource>PartyTable</JoinDataSource>
										<RelatedField>PartyNumber</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>InvoiceLocation</Field>
										<JoinDataSource>ProjFundingSource</JoinDataSource>
										<RelatedField>Location</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjInvoiceProjId</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>ContractId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjInvoiceCurrency</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjInvoiceCurrency</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjInvoiceProjId</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>ProjInvoiceProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>CurrencyId</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>CurrencyId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjDataSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjDataSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjDataSource</Field>
								<JoinDataSource>ProjInvoiceTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>