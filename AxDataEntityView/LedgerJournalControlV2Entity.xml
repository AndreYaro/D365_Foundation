<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalControlV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalControlV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Entity::clearPreviousRunErrors(_dmfDefinitionGroupExecution);

        LedgerJournalControlV2Entity::entityPreValidation(_dmfDefinitionGroupExecution);

        ttsbegin;

        int updatedRecords = LedgerJournalControlV2Entity::updateNodeCriteriaRange(_dmfDefinitionGroupExecution);

        LedgerJournalControlV2Entity::insertLedgerJournalControl(_dmfDefinitionGroupExecution);

        LedgerJournalControlV2Entity::updateStagingTransferStatusToCompleted(_dmfDefinitionGroupExecution);

        ttscommit;

        int completedRecords = LedgerJournalControlV2Entity::getCompletedRecordsFromStaging(_dmfDefinitionGroupExecution);

        return [completedRecords - updatedRecords, updatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNodeCriteriaRange</Name>
				<Source><![CDATA[
    private static int updateNodeCriteriaRange(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DimensionConstraintNodeCriteria criteria;
        DimensionConstraintNode node;
        DimensionConstraintTree tree;
        DimensionHierarchyLevel level;
        DimensionAttribute attribute;
        LedgerJournalControlDetail detail;
        DimensionHierarchy hierarchy;
        LedgerJournalControlHeader header;
        LedgerJournalControlV2Staging staging;

        update_recordset criteria
            setting RangeFrom = staging.FromValue,
                RangeTo = staging.ToValue
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                    && staging.FromValue <= criteria.RangeFrom
                    && staging.ToValue >= criteria.RangeTo
            join node
                where node.RecId == criteria.DimensionConstraintNode
            join level
                where level.RecId == node.DimensionHierarchyLevel
            join attribute
                where attribute.RecId == level.DimensionAttribute
                    && attribute.Name == staging.Segment
            join tree
                where tree.RecId == node.DimensionConstraintTree
            join detail
                where detail.DimensionConstraintTree == tree.RecId
            join hierarchy
                where hierarchy.RecId == detail.DimensionHierarchy
                    && hierarchy.Name == staging.AccountStructure
            join header
                where header.RecId == detail.LedgerJournalControl
                    && header.JournalName == staging.JournalName
                    && header.AccountType == staging.AccountType;

        return LedgerJournalControlV2Entity::setTransferStatusForUpdatedRecords(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferStatusForUpdatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transfer status for updated records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The <c>DMFDefinitionGroupExecution</c> record.</param>
    protected static int setTransferStatusForUpdatedRecords(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        return LedgerJournalControlV2Entity::setUpdateStatusForNodeCriteriaRange(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateStatusForNodeCriteriaRange</Name>
				<Source><![CDATA[
    private static int setUpdateStatusForNodeCriteriaRange(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DimensionConstraintNodeCriteria criteria;
        DimensionConstraintNode node;
        DimensionConstraintTree tree;
        DimensionHierarchyLevel level;
        DimensionAttribute attribute;
        LedgerJournalControlDetail detail;
        DimensionHierarchy hierarchy;
        LedgerJournalControlHeader header;
        LedgerJournalControlV2Staging staging;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            join criteria
                where criteria.RangeFrom == staging.FromValue
                    && criteria.RangeTo == staging.ToValue
            join node
                where node.RecId == criteria.DimensionConstraintNode
            join level
                where level.RecId == node.DimensionHierarchyLevel
            join attribute
                where attribute.RecId == level.DimensionAttribute
                    && attribute.Name == staging.Segment
            join tree
                where tree.RecId == node.DimensionConstraintTree
            join detail
                where detail.DimensionConstraintTree == tree.RecId
            join hierarchy
                where hierarchy.RecId == detail.DimensionHierarchy
                    && hierarchy.Name == staging.AccountStructure
            join header
                where header.RecId == detail.LedgerJournalControl
                    && header.JournalName == staging.JournalName
                    && header.AccountType == staging.AccountType;

        select count(RecId) from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::Completed;

        return staging.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalControl</Name>
				<Source><![CDATA[
    private static void insertLedgerJournalControl(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        System.Exception exception;

        while select * from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
        {
            try
            {
                LedgerJournalControlHeader controlHeader = LedgerJournalControlV2Entity::findOrCreateLedgerJournalControlHeader(staging);
                LedgerJournalControlV2Entity::insertLedgerJournalControlDetails(staging, controlHeader.RecId, _dmfDefinitionGroupExecution);
            }
            catch (exception)
            {
                LedgerJournalControlV2Entity::logErrorMessage(staging, _dmfDefinitionGroupExecution, exception.Message);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logErrorMessage</Name>
				<Source><![CDATA[
    private static void logErrorMessage(LedgerJournalControlV2Staging _staging, DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, str _errorMsg)
    {
        LedgerJournalControlV2Entity::updateStagingToError(_staging);

        DMFStagingValidationLog::insertLogs(
            _staging.DefinitionGroup,
            _staging.ExecutionId,
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            _staging.RecId,
            '',
            _errorMsg,
            DMFSourceTarget::Target);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerJournalControlHeader</Name>
				<Source><![CDATA[
    private static LedgerJournalControlHeader findOrCreateLedgerJournalControlHeader(LedgerJournalControlV2Staging _staging)
    {
        CompanyInfo journalCompanyInfo = CompanyInfo::findDataArea(_staging.JournalLegalEntity);
        LedgerJournalControlHeader controlHeader = LedgerJournalControlHeader::findByJournalNameCompanyAccountType(_staging.JournalName, journalCompanyInfo.RecId, _staging.AccountType);
            
        if (!controlHeader)
        {
            controlHeader = LedgerJournalControlV2Entity::populateControlHeader(_staging, journalCompanyInfo);
            controlHeader.insert();
        }

        return controlHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControlHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate ledger journal control header.
    /// </summary>
    /// <param name = "_staging">The <c>LedgerJournalControlV2Staging</c> record.</param>
    /// <param name = "_companyInfo">The <c>CompanyInfo</c> record referencing the journal legal entity.</param>
    /// <returns>Populated buffer for <c>LedgerJournalControlHeader</c>.</returns>
    protected static LedgerJournalControlHeader populateControlHeader(LedgerJournalControlV2Staging _staging, CompanyInfo _companyInfo)
    {
        LedgerJournalControlHeader controlHeader;

        controlHeader.AccountType = _staging.AccountType;
        controlHeader.JournalLegalEntity = _companyInfo.RecId;
        controlHeader.JournalName = _staging.JournalName;

        return controlHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalControlDetails</Name>
				<Source><![CDATA[
    private static void insertLedgerJournalControlDetails(LedgerJournalControlV2Staging _staging, RefRecId _controlHeaderRecId, DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TmpLedgerJournalControlDetail tmpLedgerJournalControlDetail = LedgerJournalControlV2Entity::populateControlDetails(_staging);
        tmpLedgerJournalControlDetail.insert();

        LedgerJournalControlForm formhelper = LedgerJournalControlForm::construct(_controlHeaderRecId, tmpLedgerJournalControlDetail);
        NoYes isValid = formhelper.processTempDetail(tmpLedgerJournalControlDetail);

        if (!isValid)
        {
            LedgerJournalControlV2Entity::logErrorMessage(_staging, _dmfDefinitionGroupExecution, "@SYS310074");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControlDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate journal control details.
    /// </summary>
    /// <param name = "_staging">The <c>LedgerJournalControlV2Staging</c> record.</param>
    /// <returns>Populated buffer for <c>TmpLedgerJournalControlDetail</c></returns>
    protected static TmpLedgerJournalControlDetail populateControlDetails(LedgerJournalControlV2Staging _staging)
    {
        CompanyInfo ledgerCompanyInfo = CompanyInfo::findDataArea(_staging.LedgerLegalEntity);
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, _staging.AccountStructure);

        TmpLedgerJournalControlDetail tmpLedgerJournalControlDetail;
        tmpLedgerJournalControlDetail.RangeFrom = _staging.FromValue;
        tmpLedgerJournalControlDetail.RangeTo = _staging.ToValue;
        tmpLedgerJournalControlDetail.DimensionAttribute = DimensionAttribute::findByName(_staging.Segment).RecId;
        tmpLedgerJournalControlDetail.DimensionHierarchy = dimensionHierarchy.RecId;
        tmpLedgerJournalControlDetail.LedgerLegalEntity = ledgerCompanyInfo.RecId;

        return tmpLedgerJournalControlDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingToError</Name>
				<Source><![CDATA[
    private static void updateStagingToError(LedgerJournalControlV2Staging _staging)
    {
        ttsbegin;
        _staging.selectForUpdate(NoYes::Yes);
        _staging.TransferStatus = DMFTransferStatus::Error;
        _staging.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityPreValidation</Name>
				<Source><![CDATA[
    private static void entityPreValidation(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Entity::validateJournalLegalEntity(_dmfDefinitionGroupExecution);
        LedgerJournalControlV2Entity::validateJournalName(_dmfDefinitionGroupExecution);
        LedgerJournalControlV2Entity::validateLedgerJournalAccountType(_dmfDefinitionGroupExecution);
        LedgerJournalControlV2Entity::validateLedgerLegalEntity(_dmfDefinitionGroupExecution);
        LedgerJournalControlV2Entity::validateAccountStructure(_dmfDefinitionGroupExecution);
        LedgerJournalControlV2Entity::validateDimensionAttribute(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountStructure</Name>
				<Source><![CDATA[
    private static void validateAccountStructure(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;
        DimensionHierarchy hierarchy;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join hierarchy
                where hierarchy.StructureType == DimensionHierarchyType::AccountStructure
                    && hierarchy.Name == staging.AccountStructure
                    && hierarchy.IsSystemGenerated == NoYes::No
                    && hierarchy.IsDraft == NoYes::No
                    && hierarchy.DeletedVersion == 0;

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@GeneralLedger:LedgerJournalControlV2AccountStructureError",
            fieldStr(LedgerJournalControlV2Staging, AccountStructure),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, AccountStructure));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionAttribute</Name>
				<Source><![CDATA[
    private static void validateDimensionAttribute(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;
        DimensionAttribute attribute;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join attribute
                where attribute.Name == staging.Segment;

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@GeneralLedger:LedgerJournalControlV2SegmentError",
            fieldStr(LedgerJournalControlV2Staging, Segment),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, Segment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalLegalEntity</Name>
				<Source><![CDATA[
    private static void validateJournalLegalEntity(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;
        CompanyInfo companyInfo;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join companyInfo
                where (companyInfo.DataArea == staging.JournalLegalEntity
                    || staging.JournalLegalEntity == '');

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@SYS319835",
            fieldStr(LedgerJournalControlV2Staging, JournalLegalEntity),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, JournalLegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerLegalEntity</Name>
				<Source><![CDATA[
    private static void validateLedgerLegalEntity(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;
        CompanyInfo companyInfo;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join companyInfo
                where companyInfo.DataArea == staging.LedgerLegalEntity;

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@SYS319835",
            fieldStr(LedgerJournalControlV2Staging, LedgerLegalEntity),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, LedgerLegalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerJournalAccountType</Name>
				<Source><![CDATA[
    private static void validateLedgerJournalAccountType(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                && (staging.AccountType != LedgerJournalACTypeAll::All && staging.AccountType != LedgerJournalACTypeAll::Ledger);

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@GeneralLedger:LedgerJournalControlV2AccountTypeInvalid",
            fieldStr(LedgerJournalControlV2Staging, AccountType),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, AccountType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalName</Name>
				<Source><![CDATA[
    private static void validateJournalName(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;
        LedgerJournalControlV2StagingTmp stagingTmp;
        LedgerJournalName ledgerJournalName;

        insert_recordset stagingTmp (LedgerJournalControlEntityRecId)
            select RecId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            notexists join ledgerJournalName
                where staging.JournalName == ledgerJournalName.JournalName;

        LedgerJournalControlV2Entity::logValidationErrors(
            stagingTmp,
            "@SYS21496",
            fieldStr(LedgerJournalControlV2Staging, JournalName),
            DMFEntity::find(_dmfDefinitionGroupExecution.Entity),
            fieldNum(LedgerJournalControlV2Staging, JournalName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logValidationErrors</Name>
				<Source><![CDATA[
    private static void logValidationErrors(
        LedgerJournalControlV2StagingTmp _stagingTmp,
        ErrorMsg _errorMsg,
        FieldName _fieldStr,
        DMFEntity _dmfEntity,
        int _fieldNum = -1)
    {
        LedgerJournalControlV2Staging staging;

        update_recordset staging
            setting
                TransferStatus = DMFTransferStatus::Error
            exists join _stagingTmp
                where _stagingTmp.LedgerJournalControlEntityRecId == staging.RecId;

        while select LedgerJournalControlEntityRecId
            from _stagingTmp
            join staging
                where staging.RecId == _stagingTmp.LedgerJournalControlEntityRecId
        {
            _errorMsg = _fieldNum != -1 ? strFmt(_errorMsg, staging.(_fieldNum)) : _errorMsg;

            DMFStagingValidationLog::insertLogs(
                staging.DefinitionGroup,
                staging.ExecutionId,
                _dmfEntity,
                staging.RecId,
                _fieldStr,
                _errorMsg,
                DMFSourceTarget::Target);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPreviousRunErrors</Name>
				<Source><![CDATA[
    private static void clearPreviousRunErrors(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFStagingValidationLog log;
        log.skipDataMethods(true);

        delete_from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        LedgerJournalControlV2Staging staging;

        update_recordset staging setting TransferStatus = DMFTransferStatus::NotStarted
            where staging.TransferStatus == DMFTransferStatus::Validated
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingTransferStatusToCompleted</Name>
				<Source><![CDATA[
    private static void updateStagingTransferStatusToCompleted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompletedRecordsFromStaging</Name>
				<Source><![CDATA[
    private static int getCompletedRecordsFromStaging(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalControlV2Staging staging;

        select count(RecId) from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::Completed;

        return staging.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<Label>@GeneralLedger:LedgerJournalControlV2Entity</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LedgerJournalControlV2Staging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalControlHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalLegalEntity</Name>
			<DataField>DataArea</DataField>
			<DataSource>JournalCompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalName</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>JournalName</DataField>
			<DataSource>LedgerJournalControlHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionConstraintTree</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DimensionConstraintTree</DataField>
			<DataSource>LedgerJournalControlDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountStructure</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>DimensionHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerJournalControl</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerJournalControl</DataField>
			<DataSource>LedgerJournalControlDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerLegalEntity</Name>
			<DataField>DataArea</DataField>
			<DataSource>LedgerCompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromValue</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>RangeFrom</DataField>
			<DataSource>DimensionConstraintNodeCriteria</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToValue</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>RangeTo</DataField>
			<DataSource>DimensionConstraintNodeCriteria</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Segment</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>DimensionAttribute</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>JournalLegalEntity</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LedgerLegalEntity</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountStructure</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FromValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ToValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Segment</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalControlHeader</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalControlHeader</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalControlDetail</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalControlDetail</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerCompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerLegalEntity</Field>
										<JoinDataSource>LedgerJournalControlDetail</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DimensionConstraintTree</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionConstraintTree</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DimensionConstraintNode</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DimensionConstraintNode</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>DimensionConstraintNodeCriteria</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DimensionConstraintNodeCriteria</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>RecId</Field>
														<JoinDataSource>DimensionConstraintNode</JoinDataSource>
														<RelatedField>DimensionConstraintNode</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>DimensionHierarchyLevel</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>DimensionHierarchyLevel</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>DimensionAttribute</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>DimensionAttribute</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<Field>DimensionAttribute</Field>
																<JoinDataSource>DimensionHierarchyLevel</JoinDataSource>
																<RelatedField>RecId</RelatedField>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation2</Name>
														<Field>DimensionHierarchyLevel</Field>
														<JoinDataSource>DimensionConstraintNode</JoinDataSource>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges>
											<AxQuerySimpleDataSourceRange>
												<Name>IsOptional</Name>
												<Field>IsOptional</Field>
												<Value>0</Value>
											</AxQuerySimpleDataSourceRange>
										</Ranges>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>DimensionConstraintTree</JoinDataSource>
												<RelatedField>DimensionConstraintTree</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DimensionConstraintTree</Field>
										<JoinDataSource>LedgerJournalControlDetail</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DimensionHierarchy</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>DimensionHierarchy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DimensionHierarchy</Field>
										<JoinDataSource>LedgerJournalControlDetail</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>LedgerJournalControlHeader</JoinDataSource>
								<RelatedField>LedgerJournalControl</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>JournalCompanyInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CompanyInfo</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>JournalLegalEntity</Field>
								<JoinDataSource>LedgerJournalControlHeader</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>