<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport347Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReport347Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxReport347Staging staging;

        ttsbegin;

        // Put any rows that the mandatory filds are empty in an error state first.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
				&& staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
				&& staging.TransferStatus == DMFTransferStatus::NotStarted
				&& (!staging.FiscalYear		
					|| !staging.DocumentNumOfTheDeclaration					
                    || !staging.TaxExemptNumberDeclaration
                    || (staging.ReferenceOfEstate
						&& (!staging.NameTenants
      						|| !staging.AmountTenants
      						|| !staging.CountryRegionTenants
      						|| !staging.City
      						|| !staging.Street)));

        TaxReport347Table taxReport347TableExists;
        TaxReport347Trans taxReport347TransExists;
        TaxReport347Tenants taxReport347TenantsExists;

        // When TaxReport347Trans is related to Taxreport347Tenants, other TaxReport347Trans with Tenancy is unchecked can't be checked with Tenancy.
		update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where  staging.Tenancy
				&& staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && staging.TaskCode == TaxRep347OperationKey::Sales
            exists join taxReport347TransExists
                where !taxReport347TransExists.Rent
                    && taxReport347TransExists.OperationKey == TaxRep347OperationKey::Sales
					&& taxReport347TransExists.VATNum == staging.TaxExemptNumberTrans
                    && taxReport347TransExists.CountryRegionId == staging.CountryRegionTrans
                    && taxReport347TransExists.CashInvoiceYear == staging.InvoiceYearForCash
            exists join taxReport347TenantsExists
                where taxReport347TenantsExists.VATNum == taxReport347TransExists.VATNum
                    && taxReport347TenantsExists.PropertyReference
                    && taxReport347TenantsExists.TaxReport347Table == taxReport347TransExists.taxReport347Table
			exists join taxReport347TableExists
                where taxReport347TableExists.Year == staging.FiscalYear
                    && taxReport347TableExists.RecId == taxReport347TransExists.TaxReport347Table
					&& taxReport347TableExists.RecId == taxReport347TenantsExists.TaxReport347Table;

		// When change the value of the 'Tenancy' of transactions from Yes to No,
		// the related TaxReport347Tenants should be deleted.
		delete_from taxReport347TenantsExists
            where taxReport347TenantsExists.PropertyReference
            exists join staging
                where !staging.Tenancy
					&& staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.TaskCode == TaxRep347OperationKey::Sales
            exists join taxReport347TransExists
                where taxReport347TransExists.Rent
                    && taxReport347TransExists.VATNum == taxReport347TenantsExists.VATNum
                    && staging.TaxExemptNumberTrans == taxReport347TransExists.VATNum
                    && staging.TaskCode == taxReport347TransExists.OperationKey
                    && staging.CountryRegionTrans == taxReport347TransExists.CountryRegionId
                    && staging.InvoiceYearForCash == taxReport347TransExists.CashInvoiceYear
                    && taxReport347TransExists.OperationKey == TaxRep347OperationKey::Sales
            exists join taxReport347TableExists
				where staging.FiscalYear == taxReport347TableExists.Year
					&& taxReport347TableExists.RecId == taxReport347TransExists.taxReport347Table
                    && taxReport347TableExists.RecId == taxReport347TenantsExists.taxReport347Table;

        // Update the staging table which Tenancy is No.
		update_recordset staging
			setting ReferenceOfEstate = ''
			where staging.ReferenceOfEstate
                && !staging.Tenancy
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted;

        TaxReport347Staging stagingTmp;

        update_recordset staging
            setting ReferenceOfEstate = ''
                where staging.Tenancy
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && staging.TaskCode == TaxRep347OperationKey::Sales
            join stagingTmp
                where stagingTmp.TaxExemptNumberTrans == staging.TaxExemptNumberTrans
                && stagingTmp.FiscalYear == staging.FiscalYear
                && !stagingTmp.Tenancy
                && stagingTmp.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && stagingTmp.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && stagingTmp.TransferStatus == DMFTransferStatus::NotStarted
                && stagingTmp.TaskCode == TaxRep347OperationKey::Sales
            join taxReport347TransExists
                where taxReport347TransExists.Rent
                    && stagingTmp.TaxExemptNumberTrans == taxReport347TransExists.VATNum
                    && stagingTmp.TaskCode == taxReport347TransExists.OperationKey
                    && stagingTmp.CountryRegionTrans == taxReport347TransExists.CountryRegionId
                    && stagingTmp.InvoiceYearForCash == taxReport347TransExists.CashInvoiceYear
                    && taxReport347TransExists.OperationKey == TaxRep347OperationKey::Sales
            join taxReport347TableExists
                where taxReport347TransExists.taxReport347Table == taxReport347TableExists.RecId
                    && taxReport347TableExists.Year == stagingTmp.FiscalYear;

        // Get the number of records updated.
        select count(RecId) from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
				&& staging.TransferStatus == DMFTransferStatus::NotStarted
            join taxReport347TableExists
                where staging.FiscalYear == taxReport347TableExists.Year
            outer join taxReport347TransExists
                where staging.TaxExemptNumberTrans == taxReport347TransExists.VATNum
                    && staging.TaskCode == taxReport347TransExists.OperationKey
                    && staging.CountryRegionTrans == taxReport347TransExists.CountryRegionId
                    && staging.InvoiceYearForCash == taxReport347TransExists.CashInvoiceYear
                    && taxReport347TransExists.TaxReport347Table == taxReport347TableExists.RecId
            outer join taxReport347TenantsExists
                where staging.ReferenceOfEstate == taxReport347TenantsExists.PropertyReference
                    && taxReport347TenantsExists.TaxReport347Table == taxReport347TransExists.taxReport347Table
                    && taxReport347TenantsExists.TaxReport347Table == taxReport347TableExists.RecId;

        int64 updatedRecords = staging.RecId;

        // Tranfer the records to the target tables.
        TaxReport347Entity::insertTaxReport347Table(_dmfDefinitionGroupExecution);
        TaxReport347Entity::insertTaxReport347Trans(_dmfDefinitionGroupExecution);
        TaxReport347Entity::insertTaxReport347Tenants(_dmfDefinitionGroupExecution);

        // Update transferred records to success status.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            && staging.TransferStatus == DMFTransferStatus::NotStarted;

        ttscommit;

        // Get the number of transferred records.
        select count(RecId) from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::Completed;

        return [staging.RecId - updatedRecords, updatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReport347Table</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and updates Declaration 347 (TaxReport347Table) with necessary information.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    private static void insertTaxReport347Table(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxReport347Staging staging;
        TaxReport347Table taxReport347TableExists;

        TaxReport347Table taxReport347Table;
        taxReport347Table.skipDataMethods(true);
        taxReport347Table.skipDatabaseLog(true);

        // Insert the rows does not contain in the table.
        insert_recordset taxReport347Table(Year)
            select FiscalYear
            from staging
                group by FiscalYear
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            && staging.TransferStatus == DMFTransferStatus::NotStarted
            notexists join taxReport347TableExists
                where taxReport347TableExists.Year == staging.FiscalYear;

        // Update all the rows.
        update_recordset taxReport347Table
            setting
            ContactPersonName = staging.Contact,
            DocumentNum = staging.DocumentNumOfTheDeclaration,
            MinimumAmount = staging.MinimumAmount,
            MinimumAmountInCash = staging.MinimumAmountOfPaymentsInCash,
            Name = staging.TableName,
            OrigDocumentNum = staging.PreviousDeclarationNumber,
            Phone = staging.Phone,
            Presentation = staging.PresentationType,
            Replacement = staging.Replacement,
            Reported = staging.Reported,
            ReportedBy = staging.ReportedBy,
            ReportedDate = staging.PresentaitionDate,
            VATNum = staging.TaxExemptNumberDeclaration
            join staging
                where taxReport347Table.Year == staging.FiscalYear
                    && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReport347Trans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and updatesTransactions (TaxReport347Trans) with necessary information.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    private static void insertTaxReport347Trans(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxReport347Staging staging;
        TaxReport347Trans taxReport347TransExists;

        TaxReport347Trans taxReport347Trans;
        taxReport347Trans.skipDatabaseLog(true);
        taxReport347Trans.skipDataMethods(true);

        TaxReport347Table taxReport347Table;
        taxReport347Table.skipDatabaseLog(true);
        taxReport347Table.skipDataMethods(true);

        // Insert the rows does not contain in the table.
        insert_recordset taxReport347Trans(VATNum, OperationKey, CashInvoiceYear, CountryRegionId, TaxReport347Table)
            select TaxExemptNumberTrans, TaskCode, InvoiceYearForCash, CountryRegionTrans
            from staging
            group by TaxExemptNumberTrans, TaskCode, FiscalYear, CountryRegionTrans, InvoiceYearForCash
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            join RecId from taxReport347Table
                group by RecId
                    where staging.FiscalYear == taxReport347Table.Year
            notexists join taxReport347TransExists
                where staging.TaxExemptNumberTrans == taxReport347TransExists.VATNum
                    && staging.TaskCode == taxReport347TransExists.OperationKey
                    && staging.CountryRegionTrans == taxReport347TransExists.CountryRegionId
                    && staging.InvoiceYearForCash == taxReport347TransExists.CashInvoiceYear
                    && taxReport347TransExists.TaxReport347Table == taxReport347Table.RecId;

        // Update all the rows.
        update_recordset taxReport347Trans
            setting
            AmountInCash = staging.AmountInCash,
            AmountQuarter1 = staging.AmountQuarter1,
            AmountQuarter2 = staging.AmountQuarter2,
            AmountQuarter3 = staging.AmountQuarter3,
            AmountQuarter4 = staging.AmountQuarter4,
            Amount = staging.AmountQuarter1 + staging.AmountQuarter2 + staging.AmountQuarter3 + staging.AmountQuarter4,
            CountyId = staging.CountyTrans,
            Name = staging.TransName,
            Rent = staging.Tenancy,
			CashAccountingAmount = staging.AmountSettled,
			CashAccountingRegime = staging.SpecialRegimeForCashAccountingMethod,
			GoodsInDeposit = staging.Deposit,
			ReverseCharge = staging.ReverseCharge
            join staging
                where taxReport347Trans.VATNum == staging.TaxExemptNumberTrans
                    && taxReport347Trans.OperationKey == staging.TaskCode
                    && taxReport347Trans.CashInvoiceYear == staging.InvoiceYearForCash
                    && taxReport347Trans.CountryRegionId == staging.CountryRegionTrans
                    && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            join taxReport347Table
                where staging.FiscalYear == taxReport347Table.Year
                    && taxReport347Table.RecId == taxReport347Trans.taxReport347Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReport347Tenants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and updates Declaration 347 tenants (TaxReport347Tenants) with necessary information.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    private static void insertTaxReport347Tenants(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxReport347Staging staging;
        TaxReport347Tenants taxReport347TenantsExists;

        TaxReport347Trans taxReport347Trans;
        taxReport347Trans.skipDatabaseLog(true);
        taxReport347Trans.skipDataMethods(true);

        TaxReport347Table taxReport347Table;
        taxReport347Table.skipDatabaseLog(true);
        taxReport347Table.skipDataMethods(true);

        TaxReport347Tenants taxReport347Tenants;
        taxReport347Tenants.skipDatabaseLog(true);
        taxReport347Tenants.skipDataMethods(true);

        // Insert the rows that are not included in the table.
        insert_recordset taxReport347Tenants(PropertyReference, TaxReport347Table)
            select ReferenceOfEstate
                from staging
                    group by ReferenceOfEstate
                        where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::NotStarted
                            && staging.TaskCode == TaxRep347OperationKey::Sales
                            && staging.ReferenceOfEstate
            join RecId from taxReport347Table
                group by RecId
                    where staging.FiscalYear == taxReport347Table.Year
            notexists join taxReport347TenantsExists
                where staging.ReferenceOfEstate == taxReport347TenantsExists.PropertyReference
                    && taxReport347TenantsExists.TaxReport347Table == taxReport347Table.RecId;

        // Update all the rows.
        update_recordset taxReport347Tenants
            setting
                Amount = staging.AmountTenants,
                City = staging.City,
                CountryRegionId = staging.CountryRegionTenants,
                CountyId = staging.CountyTenants,
                Door = staging.Door,
                Entrance = staging.Entrance,
                Floor = staging.Floor,
                Name = staging.NameTenants,
                StreetName = staging.Street,
                StreetNum = staging.StreetNo,
                TaxRep347AddressAbbrev = staging.AddressAbbreviation,
                ZipCode = staging.ZipPostalCode,
                SituationCode = staging.LocationCodeForTheBuildingProperty,
				VATNum = staging.TaxExemptNumberTrans
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.ReferenceOfEstate == taxReport347Tenants.PropertyReference
            join taxReport347Table
                where taxReport347Table.RecId == taxReport347Tenants.TaxReport347Table
                    && taxReport347Table.Year == staging.FiscalYear;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>ES</CountryRegionCodes>
	<Label>@SYS54366</Label>
	<Tags>Reporting</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxReport347Staging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>Report347</PublicCollectionName>
	<PublicEntityName>Report347</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Contact</Name>
			<DataField>ContactPersonName</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumOfTheDeclaration</Name>
			<DataField>DocumentNum</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumAmount</Name>
			<DataField>MinimumAmount</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumAmountOfPaymentsInCash</Name>
			<DataField>MinimumAmountInCash</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TableName</Name>
			<DataField>Name</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreviousDeclarationNumber</Name>
			<DataField>OrigDocumentNum</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Phone</Name>
			<DataField>Phone</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PresentationType</Name>
			<DataField>Presentation</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Replacement</Name>
			<DataField>Replacement</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reported</Name>
			<DataField>Reported</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportedBy</Name>
			<DataField>ReportedBy</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PresentaitionDate</Name>
			<DataField>ReportedDate</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxExemptNumberDeclaration</Name>
			<DataField>VATNum</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalYear</Name>
			<DataField>Year</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>NumberOfPurchase</Name>
			<Label>@SYS54451</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>NumberOfSales</Name>
			<Label>@SYS54451</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>NumberOfPayment</Name>
			<Label>@SYS54451</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>NumberOfPurchaseFromPublicEntity</Name>
			<Label>@SYS54451</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>NumberOfSubventions</Name>
			<Label>@SYS54451</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AmountOfPurchase</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AmountOfSales</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AmountOfPayment</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AmountOfPurchaseFromPublicEntity</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AmountOfSubventions</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreatedDateAndTime</Name>
			<DataField>CreatedDateTime</DataField>
			<DataSource>TaxReport347Table</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountTenants</Name>
			<Mandatory>No</Mandatory>
			<DataField>Amount</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>City</Name>
			<Mandatory>No</Mandatory>
			<DataField>City</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountryRegionTenants</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountyTenants</Name>
			<DataField>CountyId</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Door</Name>
			<DataField>Door</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Entrance</Name>
			<DataField>Entrance</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Floor</Name>
			<DataField>Floor</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NameTenants</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Street</Name>
			<Mandatory>No</Mandatory>
			<DataField>StreetName</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StreetNo</Name>
			<DataField>StreetNum</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressAbbreviation</Name>
			<DataField>TaxRep347AddressAbbrev</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZipPostalCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceOfEstate</Name>
			<Mandatory>No</Mandatory>
			<DataField>PropertyReference</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LocationCodeForTheBuildingProperty</Name>
			<DataField>SituationCode</DataField>
			<DataSource>TaxReport347Tenants</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxExemptNumberTrans</Name>
			<DataField>VATNum</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<DataField>Amount</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountInCash</Name>
			<DataField>AmountInCash</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountQuarter1</Name>
			<DataField>AmountQuarter1</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountQuarter2</Name>
			<DataField>AmountQuarter2</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountQuarter3</Name>
			<DataField>AmountQuarter3</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountQuarter4</Name>
			<DataField>AmountQuarter4</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountSettled</Name>
			<DataField>CashAccountingAmount</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecialRegimeForCashAccountingMethod</Name>
			<DataField>CashAccountingRegime</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceYearForCash</Name>
			<DataField>CashInvoiceYear</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountryRegionTrans</Name>
			<DataField>CountryRegionId</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountyTrans</Name>
			<DataField>CountyId</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Deposit</Name>
			<DataField>GoodsInDeposit</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InsuranceProcess</Name>
			<DataField>InsuranceOperation</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransName</Name>
			<DataField>Name</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskCode</Name>
			<DataField>OperationKey</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tenancy</Name>
			<DataField>Rent</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Representative</Name>
			<DataField>Representative</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReverseCharge</Name>
			<DataField>ReverseCharge</DataField>
			<DataSource>TaxReport347Trans</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>FiscalYear</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ReferenceOfEstate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InvoiceYearForCash</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TaxExemptNumberTrans</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TaskCode</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CountryRegionTrans</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxReport347Table</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxReport347Table</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxReport347Trans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxReport347Trans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>TaxReport347Tenants</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>TaxReport347Tenants</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<FetchMode>OneToN</FetchMode>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>TaxReport347Table</JoinDataSource>
										<RelatedField>TaxReport347Table</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>TaxReport347Table</Field>
										<JoinDataSource>TaxReport347Trans</JoinDataSource>
										<RelatedField>TaxReport347Table</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation3</Name>
										<Field>VATNum</Field>
										<JoinDataSource>TaxReport347Trans</JoinDataSource>
										<RelatedField>VATNum</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>TaxReport347Table</JoinDataSource>
								<RelatedField>Taxreport347Table</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>