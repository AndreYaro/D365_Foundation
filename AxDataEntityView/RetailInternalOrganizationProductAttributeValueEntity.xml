<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrganizationProductAttributeValueEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInternalOrganizationProductAttributeValueEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        RetailChannelTable  retailChannelTable;
        EcoResTextValue ecoResTextValue;
        EcoResAttributeValue   ecoResAttributeValue;
        EcoResValue ecoResValue = this.findEcoResValue();
        AttributeDataType actualDataType = this.GetActualDataType();

        if (!ecoResValue.RecId)
        {
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
            RecId ecoResValueRecId = this.insertEcoResValue(actualDataType);
            ecoResValue = EcoResValue::find(ecoResValueRecId);

            // Find RetailChannelInstanceValue
            RetailInternalOrgProductInstanceValue  internalOrgProductInstanceValue = this.findInternalOrgProductInstanceValue();

            // Insert RetailChannelInstanceValue for current channel.
            if (!internalOrgProductInstanceValue.RecId)
            {
                internalOrgProductInstanceValue.InternalOrgProduct = this.InternalOrgProduct;
                internalOrgProductInstanceValue.insert();
            }

            // Insert EcoResAttributeValue.
            ecoResAttributeValue.Value = ecoResValue.RecId;
            ecoResAttributeValue.InstanceValue = internalOrgProductInstanceValue.RecId;
            ecoResAttributeValue.Attribute = this.findEcoResAttribute().RecId;
            ecoResAttributeValue.insert();
        }
        else
        {
            // Updates EcoResValue for specified attribute data type.
            ttsbegin;
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
            this.updateEcoResValue(ecoResValue, actualDataType);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEcoResAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds the specified record in the <c>EcoResAttribute</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>EcoResAttribute</c> table; otherwise, an empty record.</returns>
    private EcoResAttribute findEcoResAttribute()
    {
        return EcoResAttribute::findByName(this.AttributeName, EcoResAttributeType::findByName(this.AttributeTypeName).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResValue</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>EcoResValue</c> table; otherwise, an empty record.</returns>
    private EcoResValue findEcoResValue()
    {
        EcoResValue ecoResValue;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResAttributeGroup ecoResAttributeGroup;
        RecId ecoResAttributeRecId = this.findEcoResAttribute().RecId;

        select firstOnly ecoResAttributeGroupAttribute
            where ecoResAttributeGroupAttribute.Attribute == ecoResAttributeRecId
                && ecoResAttributeGroupAttribute.AttributeGroup == EcoResAttributeGroup::findByName(this.AttributeGroupName).RecId;

        EcoResAttributeValue ecoResAttributeValue = EcoResAttributeValue::findOrCreateDefault(this.findInternalOrgProductInstanceValue().RecId, ecoResAttributeRecId, ecoResAttributeGroupAttribute);

        return EcoResValue::find(ecoResAttributeValue.Value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts EcoResValue for specified attribute data type.
    /// </summary>
    /// <param name = "_dataType">Attribute data type.</param>
    protected RecId insertEcoResValue(AttributeDataType _dataType)
    {
        EcoResTextValue ecoResTextValue;
        EcoResCurrencyValue  ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;
        EcoResBooleanValue ecoResBooleanValue;
        RecId ecoResValueRecId;

        switch (_dataType)
        {
            case AttributeDataType::Currency:
                ecoResCurrencyValue.CurrencyValue = this.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = this.CurrencyCode;
                ecoResCurrencyValue.insert();
                ecoResValueRecId = ecoResCurrencyValue.RecId;
                break;

            case AttributeDataType::DateTime:
                ecoResDateTimeValue.DateTimeValue = this.DateTimeValue;
                ecoResDateTimeValue.insert();
                ecoResValueRecId = ecoResDateTimeValue.RecId;
                break;

            case AttributeDataType::Decimal:
                ecoResFloatValue.FloatValue = this.DecimalValue;
                ecoResFloatValue.insert();
                ecoResValueRecId = ecoResFloatValue.RecId;
                break;

            case AttributeDataType::Integer:
                ecoResIntValue.IntValue = this.IntegerValue;
                ecoResIntValue.insert();
                ecoResValueRecId = ecoResIntValue.RecId;
                break;

            case AttributeDataType::Text:
                ecoResTextValue.TextValue = this.TextValue;
                ecoResTextValue.insert();
                ecoResValueRecId = ecoResTextValue.RecId;
                break;

            case AttributeDataType::TrueFalse:
                ecoResBooleanValue.BooleanValue = this.BooleanValue;
                ecoResBooleanValue.insert();
                ecoResValueRecId = ecoResBooleanValue.RecId;
                break;
        }

        return ecoResValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates EcoResValue for specified attribute data type.
    /// </summary>
    /// <param name = "ecoResValue">The record in the <c>EcoResValue</c> table.</param>
    /// <param name = "_dataType">Attribute data type.</param>
    protected void updateEcoResValue(EcoResValue ecoResValue, AttributeDataType _dataType)
    {
        EcoResTextValue ecoResTextValue;
        EcoResCurrencyValue  ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;
        EcoResBooleanValue ecoResBooleanValue;

        switch (_dataType)
        {
            case AttributeDataType::Currency:
                ecoResCurrencyValue = EcoResCurrencyValue::find(ecoResValue.RecId, true);
                ecoResCurrencyValue.CurrencyValue = this.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = this.CurrencyCode;
                ecoResCurrencyValue.update();
                break;

            case AttributeDataType::DateTime:
                ecoResDateTimeValue = EcoResDateTimeValue::find(ecoResValue.RecId, true);
                ecoResDateTimeValue.DateTimeValue = this.DateTimeValue;
                ecoResDateTimeValue.update();
                break;

            case AttributeDataType::Decimal:
                ecoResFloatValue = EcoResFloatValue::find(ecoResValue.RecId, true);
                ecoResFloatValue.FloatValue = this.DecimalValue;
                ecoResFloatValue.update();
                break;

            case AttributeDataType::Integer:
                ecoResIntValue = EcoResIntValue::find(ecoResValue.RecId, true);
                ecoResIntValue.IntValue = this.IntegerValue;
                ecoResIntValue.update();
                break;

            case AttributeDataType::Text:
                ecoResTextValue = EcoResTextValue::find(ecoResValue.RecId, true);
                ecoResTextValue.TextValue = this.TextValue;
                ecoResTextValue.update();
                break;

            case AttributeDataType::TrueFalse:
                ecoResBooleanValue = EcoResBooleanValue::find(ecoResValue.RecId, true);
                ecoResBooleanValue.BooleanValue = this.BooleanValue;
                ecoResBooleanValue.update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternalOrgProductInstanceValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailInternalOrgProductInstanceValue</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>RetailInternalOrgProductInstanceValue</c> table; otherwise, an empty record.</returns>
    private RetailInternalOrgProductInstanceValue findInternalOrgProductInstanceValue()
    {
        // Find RetailInternalOrgProductInstanceValue.
        RetailInternalOrgProduct internalOrgProduct = RetailInternalOrgProduct::find(this.InternalOrgProduct);
        RetailInternalOrgProductInstanceValue internalOrgProductInstanceValue = RetailInternalOrgProductInstanceValue::findOrCreateByInternalOrgProduct(internalOrgProduct.RecId);

        return internalOrgProductInstanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        EcoResValue  ecoResValue = this.findEcoResValue();
        AttributeDataType actualDataType = this.GetActualDataType();

        // Find the Attribute value for specified attribute type.
        if (actualDataType == AttributeDataType::Text)
        {
            this.TextValue = EcoResTextValue::find(ecoResValue.RecId).TextValue;
        }
        else if (actualDataType == AttributeDataType::Currency)
        {
            this.CurrencyValue = EcoResCurrencyValue::find(ecoResValue.RecId).CurrencyValue;
        }
        else if (actualDataType == AttributeDataType::Integer)
        {
            this.IntegerValue = EcoResIntValue::find(ecoResValue.RecId).IntValue;
        }
        else if (actualDataType == AttributeDataType::Decimal)
        {
            this.DecimalValue = EcoResFloatValue::find(ecoResValue.RecId).FloatValue;
        }
        else if (actualDataType == AttributeDataType::DateTime)
        {
            this.DateTimeValue = EcoResDateTimeValue::find(ecoResValue.RecId).DateTimeValue;
        }
        else if (actualDataType == AttributeDataType::TrueFalse)
        {
            this.BooleanValue = EcoResBooleanValue::find(ecoResValue.RecId).BooleanValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        throw error ("@RETAIL:DataEntityForInsertOnly");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateAttributeType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates attribute type.
    /// </summary>
    /// <returns>true if attribute type is not reference; otherwise, false.</returns>
    protected boolean validateAttributeType()
    {
        boolean ret = true;
        AttributeDataType actualDataType = this.GetActualDataType();
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(actualDataType))
        {
            ret = checkfailed("@SCM:ReferenceTypeIsNotSupported");
        }

        // Validates currency code.
        if (ret && AttributeDataTypeDiscriminator::checkAttributeDataTypeCurrency(actualDataType))
        {
            if (!Currency::find(this.CurrencyCode))
            {
                ret = checkFailed("@SYS1458", this.CurrencyCode);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetActualDataType</Name>
				<Source><![CDATA[
    private AttributeDataType GetActualDataType()
    {
        EcoResAttribute attribute = EcoResAttribute::find(this.EcoResAttributeRecId);
        return attribute.getActualDataType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RETAIL:InternalOrgProductAttributeValue</Label>
	<Tags>Internal org</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailInternalOrganizationProductAttributeValueStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ChannelManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailInternalOrganizationProductAttributeValues</PublicCollectionName>
	<PublicEntityName>RetailInternalOrganizationProductAttributeValue</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyNumber</Name>
			<DataField>PartyNumber</DataField>
			<DataSource>OMInternalOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisplayProductNumber</Name>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeGroupName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TextValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Value</Label>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>CurrencyValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldUtcDateTime">
			<Name>DateTimeValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueDateTime</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>DecimalValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueFloat</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>IntegerValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>BooleanValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueBoolean</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalOrganization</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InternalOrganization</DataField>
			<DataSource>RetailInternalOrgProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalOrgProduct</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>RetailInternalOrgProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DataType</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PartyNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DisplayProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeGroupName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>EcoResAttributeGroupEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResAttributeGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>AttributeGroupName</Field>
					<RelatedField>GroupName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>RetailInternalOrganizationEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>RetailInternalOrganizationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>PartyNumber</Field>
					<RelatedField>PartyNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailInternalOrgProduct</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>RetailInternalOrgProduct</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailInternalOrganization</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailInternalOrganization</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OMInternalOrganization</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>OMInternalOrganization</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMInternalOrganization_OMOperatingUnit</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMOperatingUnit</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMInternalOrganization_OMTeam</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMTeam</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMInternalOrganization_CompanyInfo</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CompanyInfo</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>InternalOrganization</Field>
										<JoinDataSource>RetailInternalOrganization</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>RetailInternalOrgAttributeGroupCollapsed</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>RetailInternalOrgAttributeGroupCollapsed</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResAttributeGroupAttribute</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResAttributeGroupAttribute</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResAttribute</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>EcoResAttribute</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>EcoResAttributeType</Name>
														<DynamicFields>Yes</DynamicFields>
														<IsReadOnly>Yes</IsReadOnly>
														<Table>EcoResAttributeType</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<Field>AttributeType</Field>
																<JoinDataSource>EcoResAttribute</JoinDataSource>
																<RelatedField>RecId</RelatedField>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges>
													<AxQuerySimpleDataSourceRange>
														<Name>AttributeModifier</Name>
														<Field>AttributeModifier</Field>
														<Status>Hidden</Status>
														<Value>Catalog</Value>
													</AxQuerySimpleDataSourceRange>
												</Ranges>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>Attribute</Field>
														<JoinDataSource>EcoResAttributeGroupAttribute</JoinDataSource>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>AttributeGroup</Field>
												<JoinDataSource>RetailInternalOrgAttributeGroupCollapsed</JoinDataSource>
												<RelatedField>AttributeGroup</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResAttributeGroup</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResAttributeGroup</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>AttributeGroup</Field>
												<JoinDataSource>RetailInternalOrgAttributeGroupCollapsed</JoinDataSource>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>Modifier</Name>
										<Field>Modifier</Field>
										<Value>Product</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>RetailinternalOrganization</JoinDataSource>
										<RelatedField>AncestorInternalOrg</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InternalOrganization</Field>
								<JoinDataSource>RetailInternalOrgProduct</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProduct</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResProduct_EcoResDistinctProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProduct</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProductVariant</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResProduct_EcoResProductMaster</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResProductMaster</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>RetailInternalOrgProduct</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>