<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeCalculationFactorEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostSheetNodeCalculationFactorEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetNodeTable):
                ret = CostSheetNodeTable::findNodeByCode(CostSheetTable::newSheetId(), this.CostSheetNodeName);
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostingVersionStatus</Name>
				<Source><![CDATA[
    private void defaultCostingVersionStatus()
    {
        this.CostingVersionStatus = CostingVersionStatus::Pending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceSiteId</Name>
				<Source><![CDATA[
    private void defaultPriceSiteId()
    {
        this.PriceSiteId = CostingVersion::find(this.CostingVersionId).InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromDate</Name>
				<Source><![CDATA[
    private void defaultFromDate()
    {
        this.FromDate = CostingVersion::find(this.CostingVersionId).DefaultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAmount</Name>
				<Source><![CDATA[
    private void defaultAmount()
    {
        this.Amount = this.AccountingCurrencyRateAmount ? this.AccountingCurrencyRateAmount : this.AccountingCurrencyUnitBasedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CostSheetNodeCalculationFactorEntity, PriceSiteId):
                this.defaultPriceSiteId();
                break;

            case fieldNum(CostSheetNodeCalculationFactorEntity, FromDate):
                this.defaultFromDate();
                break;

            case fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionStatus):
                this.defaultCostingVersionStatus();
                break;

            case fieldNum(CostSheetNodeCalculationFactorEntity, Amount):
                this.defaultAmount();
                break;
        }

        this.EcoResTableGroupAllProductRelationExpansionMapping::defaultMappedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(CostSheetNodeCalculationFactorEntity, PriceSiteId), [fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionId)]],
            [fieldNum(CostSheetNodeCalculationFactorEntity, FromDate), [fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionId)]],
            [fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionStatus), [fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionId)]],
            [fieldNum(CostSheetNodeCalculationFactorEntity, Amount), [fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyRateAmount), fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyUnitBasedAmount)]],
            this.EcoResTableGroupAllProductRelationExpansionMapping::relationControllingCodeDefaultingDependencies(),
            this.EcoResTableGroupAllProductRelationExpansionMapping::codeControlledRelationDefaultingDependencies()
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        CostSheetNodeTable node = CostSheetNodeTable::findNodeByCode(CostSheetTable::newSheetId(), this.CostSheetNodeName);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyRateAmount) :
                if (this.AccountingCurrencyRateAmount
                    && node.Type != CostSheetNodeType::CalculationRate)
                {
                    ret = checkFailed(strFmt("@CostManagement:MessageValidation_CostSheetNodeCalculationFactorAmountCannotBeSpecified",
                                                fieldId2PName(tableNum(CostSheetNodeCalculationFactorEntity), fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyRateAmount)),
                                                node.Type));
                }
                break;

            case fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyUnitBasedAmount) :
                if (this.AccountingCurrencyUnitBasedAmount
                    && node.Type != CostSheetNodeType::CalculationInUnitBased
                    && node.Type != CostSheetNodeType::CalculationOutUnitBased
                    && node.Type != CostSheetNodeType::CalculationPurchUnitBased)
                {
                    ret = checkFailed(strFmt("@CostManagement:MessageValidation_CostSheetNodeCalculationFactorAmountCannotBeSpecified",
                                                fieldId2PName(tableNum(CostSheetNodeCalculationFactorEntity), fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyUnitBasedAmount)),
                                                node.Type));
                }
                break;

            case fieldNum(CostSheetNodeCalculationFactorEntity, CostingVersionStatus) :
                if (this.CostingVersionStatus != CostingVersionStatus::Pending)
                {
                    ret = checkFailed("@CostManagement:MessageValidation_CostSheetNodeCalculationFactorOfTypePendingCanBeImported");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.EcoResTableGroupAllProductRelationExpansionMapping::mappedValidateWrite() && ret;

        if ((this.AccountingCurrencyRateAmount && this.AccountingCurrencyUnitBasedAmount)
            || (this.AccountingCurrencyRateAmount && this.SurchargePercentage)
            || (this.AccountingCurrencyUnitBasedAmount && this.SurchargePercentage))
        {
            ret = checkFailed(strFmt("@CostManagement:MessageValidation_CostSheetNodeCalculationFactorAmountAndPercentageNotAllowed",
                                fieldId2PName(tableNum(CostSheetNodeCalculationFactorEntity), fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyRateAmount)),
                                fieldId2PName(tableNum(CostSheetNodeCalculationFactorEntity), fieldNum(CostSheetNodeCalculationFactorEntity, AccountingCurrencyUnitBasedAmount)),
                                fieldId2PName(tableNum(CostSheetNodeCalculationFactorEntity), fieldNum(CostSheetNodeCalculationFactorEntity, SurchargePercentage))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNumberComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>ItemNumber</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ItemNumber</c> column in the entity.
    /// </returns>
    private static str itemNumberComputedColumnDefinition()
    {
        return EcoResTableGroupAllProductRelationExpansionMapping::tableCategoryIdDefinition(tableStr(CostSheetNodeCalculationFactorEntity),
                                                                                            dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetCalculationFactor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>ItemGroupId</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ItemGroupId</c> column in the entity.
    /// </returns>
    private static str itemGroupComputedColumnDefinition()
    {
        return EcoResTableGroupAllProductRelationExpansionMapping::groupCategoryIdDefinition(tableStr(CostSheetNodeCalculationFactorEntity),
                                                                                            dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetCalculationFactor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>RateAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>RateAmount</c> column in the entity.
    /// </returns>
    private static str rateAmountComputedColumnDefinition()
    {
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::returnLiteral(CostSheetNodeType::CalculationRate),
                        SysComputedColumn::comparisonField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetNodeTable), fieldStr(CostSheetNodeTable, Type))),
                    SysComputedColumn::returnField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetCalculationFactor), fieldStr(CostSheetCalculationFactor, Amount)),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitBasedAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string to compute the <c>UnitBasedAmount</c> column in the entity.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>UnitBasedAmount</c> column in the entity.
    /// </returns>
    private static str unitBasedAmountComputedColumnDefinition()
    {
        List costSheetNodeTypeList = new List(Types::String);

        costSheetNodeTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::returnLiteral(CostSheetNodeType::CalculationPurchUnitBased),
                SysComputedColumn::comparisonField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetNodeTable), fieldStr(CostSheetNodeTable, Type))));

        costSheetNodeTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::returnLiteral(CostSheetNodeType::CalculationInUnitBased),
                SysComputedColumn::comparisonField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetNodeTable), fieldStr(CostSheetNodeTable, Type))));

        costSheetNodeTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::returnLiteral(CostSheetNodeType::CalculationOutUnitBased),
                SysComputedColumn::comparisonField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetNodeTable), fieldStr(CostSheetNodeTable, Type))));

        return SysComputedColumn::if(
                    SysComputedColumn::or(costSheetNodeTypeList),
                        SysComputedColumn::returnField(tableStr(CostSheetNodeCalculationFactorEntity), dataEntityDataSourceStr(CostSheetNodeCalculationFactorEntity, CostSheetCalculationFactor), fieldStr(CostSheetCalculationFactor, Amount)),
                        SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@CostManagement:Developer_CostSheetNodeCalculationFactorEntity</DeveloperDocumentation>
	<FormRef>CostSheetCalculationFactorVersion</FormRef>
	<IsObsolete>Yes</IsObsolete>
	<Label>@CostManagement:Table_CostSheetNodeCalculationFactorEntity</Label>
	<Tags>Costing setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CostSheetNodeCalculationFactorStaging</DataManagementStagingTable>
	<Modules>CostAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>FromDate</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PriceSiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SurchargePercentage</Name>
			<DataField>Percentage</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CostingVersionId</Name>
			<DataField>VersionId</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CostSheetNodeName</Name>
			<DataField>Code</DataField>
			<DataSource>CostSheetNodeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemNumberComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductGroupId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemGroupComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemCode</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemRelation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemRelation</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyRateAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CostManagement:Field_CostSheetNodeCalculationFactorEntity_RateAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>rateAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>CostSheetAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyUnitBasedAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CostManagement:Field_CostSheetNodeCalculationFactorEntity_UnitBasedAmount</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>unitBasedAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>CostSheetAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CostSheetNodeType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Type</DataField>
			<DataSource>CostSheetNodeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CostingVersionStatus</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>CostingVersionStatus</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Amount</DataField>
			<DataSource>CostSheetCalculationFactor</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CostSheetNodeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PriceSiteId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FromDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CostingVersionId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductGroupId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>EcoResTableGroupAllProductRelationExpansionMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ProductCodeControlledRelation</MapField>
					<MapFieldTo>ItemRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductGroupId</MapField>
					<MapFieldTo>ProductGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductId</MapField>
					<MapFieldTo>ItemNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RelationControllingProductCode</MapField>
					<MapFieldTo>ItemCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CostSheetCalculationFactor</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CostSheetCalculationFactor</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CostSheetNodeTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CostSheetNodeTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>Type</Name>
								<Field>Type</Field>
								<Status>Hidden</Status>
								<Value>5..9</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SheetId</Field>
								<JoinDataSource>CostSheetCalculationFactor</JoinDataSource>
								<RelatedField>SheetId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>NodeId</Field>
								<JoinDataSource>CostSheetCalculationFactor</JoinDataSource>
								<RelatedField>NodeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>