<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsAddressZipcodeJapanV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsAddressZipcodeJapanV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(LogisticsAddressZipcodeJapanV2Entity, LogisticsAddressZipCode):
                _dataSourceCtx.skipDataMethods(false);
                if (this.isFieldSet(fieldnum(LogisticsAddressZipcodeJapanV2Entity, State)))
                {
                    LogisticsAddressZipcodeEntityHelper_JP::findOrCreateLogisticsAddressState(this.State, this.Country);
                }
                if (this.isFieldSet(fieldnum(LogisticsAddressZipcodeJapanV2Entity, City)))
                {
                    this.CityId = LogisticsAddressZipcodeEntityHelper_JP::findOrCreateLogisticsAddressCity(this.City, this.State, this.Country, this.KanaCity);
                }
                break;
            default:
                break;
        }
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (this.validateUpdateFlag())
        {
            this.skipDataSourceInitValue(true);
            this.skipDataSourceValidateWrite(true);
            this.skipDataSourceDefaultRow(true);
            this.skipDataMethods(true);

            this.Country = LogisticsAddressZipcodeEntityHelper_JP::findJapanLogisticsAddressCountryRegionId();

            super(_entityCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the UpdateFlag
    /// </summary>
    private boolean validateUpdateFlag()
    {
        boolean ret = true;

        // define Flag for updates
        const int flagNoChanges = 0;
        const int flagChanged = 1;
        const int flagDisused = 2;

        // if UpdateFlag = 2, then do not import
        if (this.UpdateFlag == flagDisused)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format value of LogisticsAddressZipCodeId
    /// </summary>
    /// <param name="_addessZipCode">
    /// The value of LogisticsAddressZipCodeId
    /// </param>
    public LogisticsAddressZipCodeId formatPostalCode(LogisticsAddressZipCodeId _addessZipCode)
    {
        const int delimiterPos = 4;
        return strins(_addessZipCode, '-', delimiterPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        const str digit = '0123456789-';
        const int zipCodeLength = 8;

        boolean ret = super();
        ret = ret && strlen(this.ZipCode) == zipCodeLength;
        ret = ret && strlen(strkeep(this.ZipCode, digit)) == zipCodeLength;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats and updates zip code after getting staging data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LogisticsAddressZipcodeJapanV2Staging logisticsAddressZipcodeJapanStaging;
        const int delimiterPos = 4;

        ttsbegin;
        while select forupdate logisticsAddressZipcodeJapanStaging
            where logisticsAddressZipcodeJapanStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && logisticsAddressZipcodeJapanStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
        {
            logisticsAddressZipcodeJapanStaging.ZipCode = strins(logisticsAddressZipcodeJapanStaging.ZipCode, '-', delimiterPos);
            logisticsAddressZipcodeJapanStaging.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<FormRef>LogisticsAddressZipCodes</FormRef>
	<Label>@ApplicationSuite_Localization:ZIPPostalCodeJapanV2</Label>
	<Tags>GAB</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LogisticsAddressZipCodeJapanV2Staging</DataManagementStagingTable>
	<Modules>GAB</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StreetName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanaStreetName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanaCity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CityId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CityRecId</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StreetName</Name>
			<DataField>StreetName</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>City</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>City</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>State</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>State</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Country</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>UpdateFlag</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>KanaStreetName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AssetStreetKana_JP</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>250</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>KanaCity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AssetCityKana_JP</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ZipCode</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>State</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>StreetName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>City</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>UpdateFlag</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>KanaStreetName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>KanaCity</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LogisticsAddressZipCode</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LogisticsAddressZipCode</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>