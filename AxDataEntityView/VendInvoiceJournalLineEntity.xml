<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceJournalLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceJournalLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(this.JournalBatchNumber);

        if (ledgerJournalTable == null || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
        {
            // call super because the LedgerJournalTrans strategy handles the case where the LedgerJournalTable is not found
            super();

            this.updateDefaultDimensionForFixedAsset();

            this.updateWithVendorDefaultValues();
        }
        else
        {
            throw error(strFmt("@SYS22977", LedgerJournalType::VendInvoiceRegister));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionForFixedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the default dimension value for Fixed asset.
    /// </summary>
    private void updateDefaultDimensionForFixedAsset()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == this.JournalBatchNumber
                && ledgerJournalTrans.LineNum == this.LineNumber;

        if (!ledgerJournalTrans.DefaultDimension && ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets)
        {
            LedgerJournalTrans_Asset ledgerJournalTransAsset = LedgerJournalTrans_Asset::find(ledgerJournalTrans.RecId);

            DimensionDefault assetBookDefaultDimension = LedgerJournalEngine::getAccountDefaultDimension(
                    ledgerJournalTrans.parmAccount(),
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.AccountType,
                    ledgerJournalTransAsset.BookId);

            ttsbegin;
            ledgerJournalTrans.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(ledgerJournalTrans.DefaultDimension, assetBookDefaultDimension);
            ledgerJournalTrans.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithVendorDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Automatically fill out default values for Line based on the vendor's default values.
    /// </summary>
    private void updateWithVendorDefaultValues()
    {
        if (this.AccountType == LedgerJournalACType::Vend)
        {
            LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RecId, true);

            VendAccount account = this.AccountDisplayValue;
            VendTable lineVendor = VendTable::find(account);

            if (lineVendor.RecId != 0)
            {
                this.updateWithVendorDefaultValuesFor1099(lineVendor, ledgerJournalTrans, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithVendorDefaultValuesFor1099</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill out 1099 values that should be defaulted to the vendor's 1099 values when a line is created.
    /// </summary>
    /// <param name = "_vendor">The vendor whose default values are used.</param>
    /// <param name = "_ledgerJournalTrans">The line where the default values will be added.</param>
    /// <param name = "_shouldCreateTax1099BoxDetail">Variable that defines whether a Tax 1099 Detail Box should be created.</param>
    private void updateWithVendorDefaultValuesFor1099(VendTable _vendor, LedgerJournalTrans _ledgerJournalTrans, boolean _shouldCreateTax1099BoxDetail)
    {
        ttsbegin;

        if (_shouldCreateTax1099BoxDetail)
        {
            Tax1099BoxDetail detail;
            select firstonly detail
                where detail.RecId == _ledgerJournalTrans.Tax1099RecId;

            if (detail.RecId == 0)
            {
                detail.initValue();
                detail.insert();
                _ledgerJournalTrans.Tax1099RecId = detail.RecId;

                // In case any Tax 1099 Box Detail values need to be filled out by default,
                // they can be filled out here.
            }
        }

        _ledgerJournalTrans.Tax1099Fields = _vendor.Tax1099Fields;
        _ledgerJournalTrans.doUpdate();
        ttscommit;

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(VendInvoiceJournalLineEntity, LedgerJournalTrans):

                    LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
                    
                    // When editing through the entity, always delay tax calculation to avoid
                    // a O(n^2) tax calculation while importing multiple lines. The journal will
                    // automatically calculate taxes later at posting time or when necessary.
                    ledgerJournalTrans.DelayTaxCalculation = NoYes::Yes;

                    this.setDefaultFixedAssetValues(_dataSourceCtx);

                    break;

                case dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans_Asset):
                    if (!(this.AccountType == LedgerJournalACType::FixedAssets || this.OffsetAccountType == LedgerJournalACType::FixedAssets))
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                    break;

                case dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTransTaxExtension):
                    if (!Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Journal))
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAccountDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the <c>AccountDisplayValue</c> field by removing escape characters.
    /// </summary>
    /// <remarks>
    /// Vendor accounts may have an escape character inserted by the dimension framework to distinguish them from ledger dimension values.
    /// This will occur when the vendor account number contains the Chart of Account delimiter character.
    /// </remarks>
    private void resolveAccountDisplayValue()
    {
        List accountValueList = DimensionResolver::splitByDimensionIntegrationDelimiter(this.AccountDisplayValue);
        ListEnumerator accountValueListEnumerator = accountValueList.getEnumerator();
        if (accountValueListEnumerator.moveNext())
        {
            this.AccountDisplayValue = accountValueListEnumerator.current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPartyRecId</Name>
				<Source><![CDATA[
    private RecId findPartyRecId()
    {
        RecId partyRecId;

        if (this.AccountType == LedgerJournalACType::Vend)
        {
            this.resolveAccountDisplayValue();
            partyRecId = VendTable::find(this.AccountDisplayValue).Party;
        }

        return partyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        // These values are not editable by the user, but need to be set so that the dimensions can
        // be resolved based on the correct account types. initValue() is not used because it is called
        // after dimension resolution
        this.Approved = NoYes::Yes;
        this.ApprovedBy = HcmWorker::userId2Worker(curuserid());

        this.TransactionType = LedgerTransType::Vend;

        // Skip validation of Voucher field, it's value is not defaulted before the validation occurs.
        this.skipDataSourceValidateField(fieldNum(VendInvoiceJournalLineEntity, Voucher), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        #ISOCountryRegionCodes

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans))
        {
            this.updateLedgerJournalTransAddress(_entityCtx, _dataSourceCtx);

            if (this.AccountType == LedgerJournalACType::Vend && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
            {
                LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
            
                ledgerJournalTrans.OperationType_MX =  VendTable::find(ledgerJournalTrans.accountDisplay()).OperationType_MX;
            }

            this.resolveFintagsWithContext(_entityCtx, _dataSourceCtx);
        }

        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = TaxJournalLineEntityHelper::setLedgerJournalTransTaxExtension(_dataSourceCtx);

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans))
        {
            this.setDefaultFixedAssetValues(_dataSourceCtx);

            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

            LedgerJournalEngine::determineCashDiscountForEntities(ledgerJournalTrans);
        }

        // When <c>LedgerJournalTransTaxExtension</c> is not inserted successfully and it links well with <c>LedgerJournalTrans</c>,
        // it should try to insert/update the table <c>LedgerJournalTransTaxExtension</c> with set value.
        if (!ret && ledgerJournalTransTaxExtension.LedgerJournalTrans)
        {
            ttsbegin;
            LedgerJournalTrans ledgerJournalTrans = ledgerJournalTransTaxExtension.getLedgerJournalTrans();
            ledgerJournalTransTaxExtension.save(ledgerJournalTrans, true);
            ttscommit;

            ret = true;
        }

        VendInvoiceJournalLineEntity::saveDataSource(_dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LedgerJournalTrans ledgerJournalTransOrig;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans))
        {
            this.updateLedgerJournalTransAddress(_entityCtx, _dataSourceCtx);
            ledgerJournalTransOrig = _dataSourceCtx.getBuffer().orig();

            this.resolveFintagsWithContext(_entityCtx, _dataSourceCtx);
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans))
        {
            this.setDefaultFixedAssetValues(_dataSourceCtx);

            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

            LedgerJournalEngine::determineCashDiscountForEntities(ledgerJournalTrans, ledgerJournalTransOrig);
        }

        VendInvoiceJournalLineEntity::saveDataSource(_dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDataSource</Name>
				<Source><![CDATA[
    internal static void saveDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        VendInvoiceJournalLineEntity lineEntity;
        if (_dataSourceCtx.name() == tableStr(LedgerJournalTrans) && lineEntity.checkShouldUpdateJournalHeaderBalance())
        {
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer() as LedgerJournalTrans;

            // update the journal balances
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

            ledgerJournalTable.updateBalances();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShouldUpdateJournalHeaderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal header balance should be updated during a journal line write event.
    /// </summary>
    /// <returns>true if the journal header balance should be updated, otherwise, false.</returns>
    /// <remarks>
    /// Provides a hook to override/opt out of the default behavior of updating the journal header balance with each line
    /// write.  Once a platform deliverable is available allowing a hook for a post publish event to update the balance only
    /// once, this will be a no-op.
    ///
    /// If the customer opts out of the header balance updated - the journal balance will not be updated on the excel template,
    /// but this does not impact the journal balance displayed on the form.
    /// </remarks>
    private boolean checkShouldUpdateJournalHeaderBalance()
    {
        boolean shouldUpdateBalance = true;

        EventHandlerResult result = new EventHandlerResult();

        this.shouldUpdateJournalHeaderBalance(result);

        if (result.hasResult())
        {
            shouldUpdateBalance = result.result();
        }

        return shouldUpdateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateJournalHeaderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raises an event providing a subsciber the option to opt out of the journal header balance
    /// update with each journal line write.
    /// </summary>
    /// <param name = "_result">The <c>EventHandlerResult</c> instance.</param>
    delegate void shouldUpdateJournalHeaderBalance(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendInvoiceJournalLineEntity, AccountType):
                    if (this.AccountType != LedgerJournalACType::Vend && this.AccountType != LedgerJournalACType::Ledger && this.AccountType != LedgerJournalACType::FixedAssets &&
                        this.AccountType != LedgerJournalACType::Project)
                    {
                        isValid = checkFailed(strFmt("@AccountsPayable:InvoiceJournalLineEntityAccountTypeError", "@SYS9455", "@SYS13356", "@SYS19633", "@SYS4534"));
                    }
                    break;

                case fieldNum(VendInvoiceJournalLineEntity, AssetTransType):
                    if ((this.AccountType == LedgerJournalACType::FixedAssets || this.OffsetAccountType == LedgerJournalACType::FixedAssets) &&
                        !(this.AssetTransType == AssetTransTypeJournal::Acquisition || this.AssetTransType == AssetTransTypeJournal::AcquisitionAdj))
                    {
                        isValid = checkFailed(strFmt("@​AccountsPayable.en-US:InvoiceJournalLineEntityAssetTransTypeError", "@SYS67402", "@SYS67431"));
                    }
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = true;

        isValid = LedgerJournalEntityBase::isWorkflowDocumentEditable(this.JournalBatchNumber);

        if (isValid && this.AccountType == LedgerJournalACType::Ledger && this.OffsetAccountDisplayValue != '')
        {
            isValid = checkFailed(strFmt("@AccountsPayable:InvoiceJournalLineEntityOffsetAccountError", "@SYS11162", "@SYS27730", "@SYS13356"));
        }

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveRemittanceAddressLocationId</Name>
				<Source><![CDATA[
    private LogisticsLocationId resolveRemittanceAddressLocationId(LogisticsPostalAddressBaseEntity _postalAddressEntity)
    {
        LogisticsLocationId locationId;

        if (this.AccountType == LedgerJournalACType::Vend)
        {
            DirPartyLocation dirLocation;
            LogisticsLocation logisticLocation;
            LogisticsPostalAddress postalAddress;

            DirPartyRecId vendParty = VendTable::find(this.AccountDisplayValue).Party;

            select firstonly LocationId from logisticLocation
                exists join dirLocation
                    where dirLocation.Location == logisticLocation.RecId
                        && dirLocation.Party == vendParty
                exists join postalAddress
                    where postalAddress.Location == dirLocation.Location
                        && postalAddress.TimeZone == _postalAddressEntity.TimeZone
                        && postalAddress.CountryRegionId == _postalAddressEntity.CountryRegionId
                        && postalAddress.State == _postalAddressEntity.State
                        && postalAddress.County == _postalAddressEntity.County
                        && postalAddress.City == _postalAddressEntity.City
                        && postalAddress.Street == _postalAddressEntity.Street
                        && postalAddress.ZipCode == _postalAddressEntity.ZipCode
                        && postalAddress.DistrictName == _postalAddressEntity.DistrictName
                        && postalAddress.Latitude == _postalAddressEntity.Latitude
                        && postalAddress.Longitude == _postalAddressEntity.Longitude;

            locationId = logisticLocation.LocationId;
        }

        return locationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFixedAssetValues</Name>
				<Source><![CDATA[
    private void setDefaultFixedAssetValues(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
            if (this.AccountType == LedgerJournalACType::FixedAssets || this.OffsetAccountType == LedgerJournalACType::FixedAssets)
            {
                if (!this.AssetId)
                {
                    this.AssetId = ledgerJournalTrans.getAssetId();
                }

                if (!this.BookId)
                {
                    if (!this.Company)
                    {
                        this.Company = curExt();
                    }

                    this.BookId = AssetBook::getTopDefaultBookIdForAssetId(this.AssetId, this.Company, CurrentOperationsTax::Current);
                }

                if (!this.AssetTransType)
                {
                    this.AssetTransType = AssetTransTypeJournal::Acquisition;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransAddress</Name>
				<Source><![CDATA[
    private void updateLedgerJournalTransAddress(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DataEntityDataSourceRuntimeContext addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(VendInvoiceJournalLineEntity, LogisticsPostalAddressBaseEntity));

        if (this.AccountType == LedgerJournalACType::Vend
            && this.isRequiredAddressFieldSet())
        {
            LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
            DirPartyRecId partyRecId = this.findPartyRecId();

            if (this.RemittanceAddressLocationId == '')
            {
                this.RemittanceAddressLocationId = this.resolveRemittanceAddressLocationId(postalAddressEntity);
            }

            if (this.RemittanceAddressLocationId != '')
            {
                // Use existing address
                LogisticsPostalAddressBaseEntity postalAddressEntityLookup;
                DirPartyLocation dirPartyLocation;

                select firstonly postalAddressEntityLookup
                    where postalAddressEntityLookup.LocationId == this.RemittanceAddressLocationId
                    exists join dirPartyLocation
                        where dirPartyLocation.Location == postalAddressEntityLookup.LocationRecId
                            && dirPartyLocation.Party == partyRecId;

                if (!postalAddressEntityLookup)
                {
                    throw error(strFmt("@CashManagement:RemittanceAddressNotFound", this.RemittanceAddressLocationId, this.AccountDisplayValue));
                }

                addressDataSourceContext.setBuffer(postalAddressEntityLookup);
            }
            else
            {
                // Create new address
                postalAddressEntity.RecId = 0;
                postalAddressEntity.write();
                DirPartyLocation partyLocation = DirPartyLocation::create(partyRecId, postalAddressEntity.LocationRecId);
                if (partyLocation.RecId != 0)
                {
                    container roles = [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::RemitTo).RecId];
                    DirPartyLocationRole::createPartyLocationRoles(partyLocation.RecId, roles, false);
                }
            }

            // Update journal line
            LedgerJournalTrans ledgerJournalTrans =  _dataSourceCtx.getBuffer();
            postalAddressEntity = addressDataSourceContext.getBuffer();

            ledgerJournalTrans.RemittanceLocation = postalAddressEntity.LocationRecId;
            ledgerJournalTrans.RemittanceAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(postalAddressEntity.LocationRecId);
        }

        // Set the datasource as saved.
        addressDataSourceContext.setDataSaved(true);
        addressDataSourceContext.setDatabaseOperation(DataEntityDatabaseOperation::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        VendInvoiceJournalHeaderStaging headerStaging;
        VendInvoiceJournalLineStaging lineStaging;

        update_recordset lineStaging
            setting JournalBatchNumber = headerStaging.JournalBatchNumber
        join JournalBatchNumber from headerStaging
            where lineStaging.JournalBatchNumber == headerStaging.JournalBatchNumberOld
                  && lineStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                  && lineStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                  && headerStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                  && headerStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                  && lineStaging.TransferStatus == DMFTransferStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRequiredAddressFieldSet</Name>
				<Source><![CDATA[
    private boolean isRequiredAddressFieldSet()
    {
        // When imported fields are present, but blank, the values are defaulted and isFieldSet returns true.
        // Verify that if the field is set, it is not empty.
        return (this.isFieldSet(fieldNum(VendInvoiceJournalLineEntity, RemittanceAddressLocationId)) && this.RemittanceAddressLocationId != '')
            || (this.isFieldSet(fieldNum(VendInvoiceJournalLineEntity, RemittanceAddressDescription)) && this.RemittanceAddressDescription != '')
            || (this.isFieldSet(fieldNum(VendInvoiceJournalLineEntity, RemittanceAddressCountry)) && this.RemittanceAddressCountry != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom account type lookup serialized string for the Account type field.
    /// </summary>
    /// <returns>A serialized string with a list of account types.</returns>
    [
        SysODataActionAttribute("VendInvoiceJournalLineEntityAccountTypeFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("AccountType")
    ]
    public static str accountTypeCustomLookup(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(VendInvoiceJournalLineEntity, AccountType));

        int current = 1;

        Set supportedTypes = new VendInvoiceJournalExcelTemplate().supportedAccountTypes();
        SetEnumerator supportedTypesEnumerator = supportedTypes.getEnumerator();

        while (supportedTypesEnumerator.moveNext())
        {
            LedgerJournalACType currentACType = supportedTypesEnumerator.current();
            result.items().value(current, enum2Str(currentACType));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountTypeCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom offset account type lookup serialized string for the Offset account type field.
    /// </summary>
    /// <returns>A serialized string with a list of offset account types.</returns>
    [
        SysODataActionAttribute("VendInvoiceJournalLineEntityOffsetAccountTypeFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("OffsetAccountType")
    ]
    public static str offsetAccountTypeCustomLookup(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(VendInvoiceJournalLineEntity, OffsetAccountType));

        int current = 1;

        Set supportedTypes = new VendInvoiceJournalExcelTemplate().supportedOffsetAccountTypes();
        SetEnumerator supportedTypesEnumerator = supportedTypes.getEnumerator();

        while (supportedTypesEnumerator.moveNext())
        {
            LedgerJournalACType currentACType = supportedTypesEnumerator.current();
            result.items().value(current, enum2Str(currentACType));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransTypeCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an asset transaction type lookup serialized string for the AssetTransType field.
    /// </summary>
    /// <returns>A serialized string with a list of transaction types for an asset.</returns>
    [
        SysODataActionAttribute("VendInvoiceJournalLineEntityAssetTransTypeFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("AssetTransType")
    ]
    public static str assetTransTypeCustomLookup(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();
        result.determinationFields().value(1, fieldStr(VendInvoiceJournalLineEntity, AssetTransType));
    
        int current = 1;

        Set supportedTypes = new VendInvoiceJournalExcelTemplate().supportedAssetTransTypes();
        SetEnumerator supportedTypesEnumerator = supportedTypes.getEnumerator();

        while (supportedTypesEnumerator.moveNext())
        {
            AssetTransTypePurch currentAssetTransType = supportedTypesEnumerator.current();
            result.items().value(current, enum2Str(currentAssetTransType));
            current++;
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query invoiceJournalLineQuery = new Query();

        QueryBuildDataSource ledgerJournalTransQBDS = invoiceJournalLineQuery.addDataSource(tableNum(LedgerJournalTrans));

        var defaultDimensionDSE = ledgerJournalTransQBDS.addDataSource(tableNum(DimensionAttributeValueSet));
        defaultDimensionDSE.addLink(fieldNum(LedgerJournalTrans, DefaultDimension), fieldNum(DimensionAttributeValueSet, RecId));
        defaultDimensionDSE.joinMode(JoinMode::OuterJoin);
        defaultDimensionDSE.fetchMode(QueryFetchMode::One2One);

        LogisticsPostalAddressBaseEntity::addChangeTrackingDataSourcesForAddressBase(ledgerJournalTransQBDS, fieldNum(LedgerJournalTrans, RemittanceLocation), false);
        
        return invoiceJournalLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFinTags</Name>
				<Source><![CDATA[
    private void resolveFinTags(VendInvoiceJournalLineEntity _entity, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (LedgerJournalBasedEntityFinTagResolverHelperFlight::instance().isEnabled())
        {
            LedgerJournalBasedEntityFinTagResolverHelper::resolveFinTagsForLedgerJournalTrans(_entity.FinTagDisplayValue, _entity.OffsetFinTagDisplayValue, _ledgerJournalTrans);
        }
        else
        {
            _ledgerJournalTrans.FinTag = FinTagResolver::resolve(_entity.FinTagDisplayValue, _ledgerJournalTrans.Company);
            _ledgerJournalTrans.OffsetFinTag = FinTagResolver::resolve(_entity.OffsetFinTagDisplayValue, _ledgerJournalTrans.OffsetCompany);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFintagsWithContext</Name>
				<Source><![CDATA[
    private void resolveFintagsWithContext(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        VendInvoiceJournalLineEntity entity = _entityCtx.getEntityRecord();
        LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

        this.resolveFinTags(entity, ledgerJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<Label>@AccountsPayable:VendInvoiceJournalLineEntity</Label>
	<Tags>Journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>VendInvoiceJournalLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsPayable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>VendInvoiceJournalLines</PublicCollectionName>
	<PublicEntityName>VendInvoiceJournalLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemWithholdingTaxGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucherType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UUID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Company</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Company</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Credit</Name>
			<DataField>AmountCurCredit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Debit</Name>
			<DataField>AmountCurDebit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Approved</Name>
			<DataField>Approved</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ApprovedBy</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Approver</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountAmount</Name>
			<DataField>CashDiscAmount</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscount</Name>
			<DataField>CashDiscCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Currency</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountDate</Name>
			<DataField>DateCashDisc</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceDate</Name>
			<DataField>DocumentDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Document</Name>
			<DataField>DocumentNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DueDate</Name>
			<DataField>Due</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GSTHSTTaxType</Name>
			<DataField>GSTHSTTaxType_CA</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Invoice</Name>
			<DataField>Invoice</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Account</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>Company</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>AccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryDate</Name>
			<DataField>LedgerJournalDlvDate_ES</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Listcode</Name>
			<DataField>Listcode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>OffsetAccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetCompany</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>OffsetCompany</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetLedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>OffsetCompany</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>OffsetAccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetTransactionText</Name>
			<DataField>OffsetTxt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TypeOfOperation</Name>
			<DataField>OperationType_MX</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TermsOfPayment</Name>
			<DataField>Payment</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MethodOfPayment</Name>
			<DataField>PaymMode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentSpecification</Name>
			<DataField>PaymSpec</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingProfile</Name>
			<DataField>PostingProfile</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReasonCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ReasonRefRecID</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroup</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionType</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>TransactionType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Date</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxExemptNumber</Name>
			<DataField>VATNumJournal</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceDeclaration</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>VendInvoiceDeclaration_IS</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<Mandatory>No</Mandatory>
			<DataField>Voucher</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UUID</Name>
			<DataField>CFDIUUID_MX</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ApproverNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>Approver_FK</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceDeclarationId</Name>
			<Mandatory>No</Mandatory>
			<DataField>InvoiceDeclarationId</DataField>
			<DataSource>InvoiceDeclarationId_FK</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS24500</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>AccountDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS11162</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetAccountDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressCountry</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressCountryISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressState</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressCounty</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FullPrimaryRemittanceAddress</Name>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemittanceAddressLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemWithholdingTaxGroupCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdItemGroup</DataField>
			<DataSource>TaxWithholdItemGroupHeading_TH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherTypeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerVoucherType_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>Id</DataField>
			<DataSource>LedgerVoucherType_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucher</Name>
			<DataField>Voucher_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsWithholdingTaxCalculate</Name>
			<DataField>TaxWithholdCalculate_TH</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS110288</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDSE</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountId</Name>
			<DataField>BankAccountId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustVendBankAccountId</Name>
			<DataField>CustVendBankAccountId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099Fields</Name>
			<DataField>Tax1099Fields</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymId</Name>
			<DataField>PaymId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BookId</Name>
			<Mandatory>No</Mandatory>
			<DataField>BookId</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssetId</Name>
			<Mandatory>No</Mandatory>
			<DataField>AssetId</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssetTransType</Name>
			<Mandatory>No</Mandatory>
			<DataField>TransType</DataField>
			<DataSource>LedgerJournalTrans_Asset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchRate</Name>
			<DataField>ExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchRateSecond</Name>
			<DataField>ExchRateSecond</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchRate</Name>
			<DataField>ReportingCurrencyExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OverrideSalesTax</Name>
			<DataField>OverrideSalesTax</DataField>
			<DataSource>LedgerJournalTransTaxExtension</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:OffsetFinancialDimensions</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetDimensionSetEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetDefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FinTagDisplayValue</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>FinTag</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetFinTagDisplayValue</Name>
			<Label>@FinTag:FinTag_OffsetDisplayValue</Label>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetFinTag</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>VendInvoiceJournalHeaderEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>VendInvoiceJournalHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>JournalBatchNumber</Field>
					<RelatedField>JournalBatchNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>AccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityAccountDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineEntityAccountDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Account</Name>
					<Field>Account</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>OffsetAccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityOffsetAccountDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineEntityOffsetAccountDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>OffsetAccount</Name>
					<Field>OffsetAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerVoucherTypeEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerVoucherTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ChineseVoucherType</Field>
					<RelatedField>VoucherType</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityCurrency</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineCurrency</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>Company</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>OfficeAddinLegalEntityEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityCompany</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineCompany</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Company</Field>
					<RelatedField>CompanyId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>OfficeAddinLegalEntityEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityOffsetCompany</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineOffsetCompany</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetCompany</Field>
					<RelatedField>CompanyId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJourLineEntityDefaultDim</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJourLineDefaultDim</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>AssetBookV2Entity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>AssetBookV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>ItemSalesTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>TaxItemGroupHeadingEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntityItemSalesTaxGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineItemSalesTaxGroup</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ItemSalesTaxGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>SalesTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>TaxGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJournalLineEntitySalesTaxGroup</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJournalLineSalesTaxGroup</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>SalesTaxGroup</Field>
					<RelatedField>TaxGroupCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>VendInvoiceJourLineEntityOffsetDefaultDimension</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceJourLineOffsetDefaultDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Approver_FK</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Approver_FK</Name>
								<JoinRelationName>HcmWorker</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InvoiceDeclarationId_FK</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>VendInvoiceDeclaration_IS</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>InvoiceDeclarationId_FK</Name>
								<JoinRelationName>DeclarationUsedForInvoicing</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>AccountDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>AccountDAVC</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OffsetAccountDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>OffsetAccountDAVC</Name>
								<Field>OffsetLedgerDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LedgerJournalTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>JournalType</Name>
								<Field>JournalType</Field>
								<Value>VendInvoiceRegister</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<JoinRelationName>LedgerJournalTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<ApplyDateFilter>Yes</ApplyDateFilter>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RemittanceLocation</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>LocationRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxWithholdItemGroupHeading_TH</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TaxWithholdItemGroupHeading_TH</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TaxWithholdItemGroupHeading_TH</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerVoucherType_CN</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LedgerVoucherType_CN</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>LedgerVoucherType_CN</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<JoinRelationName>LedgerVoucherType_CN</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDSE</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans_Asset</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTrans_Asset</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RefRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTransTaxExtension</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTransTaxExtension</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>LedgerJournalTrans</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OffsetDimensionSetEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>OffsetDefaultDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>FinTag</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>FinTag</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>FinTag</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OffsetFinTag</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>FinTag</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>OffsetFinTag</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>