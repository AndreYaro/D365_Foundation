<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorInvoiceLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendorInvoiceLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(VendorInvoiceLineEntity, InventDim):
                VendInvoiceInfoLine vendInvoiceInfoLine = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine)).getBuffer();
                ret = vendInvoiceInfoLine.inventDim();
                break;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, EcoResCategory):
                EcoResCategoryHierarchyRole hierarchyRole;

                select firstonly CategoryHierarchy from hierarchyRole
                    where hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement;

                if (hierarchyRole.CategoryHierarchy)
                {
                    ret = EcoResCategory::findByName(this.ProcurementCategoryName, hierarchyRole.CategoryHierarchy);
                }

                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if there is an existing <c>VendInvoiceInfoSubTable</c> record, if not we create one
    /// and initialize the invoice line fields.
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(VendorInvoiceLineEntity, VendInvoiceInfoSubTable):
                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

                    select firstonly vendInvoiceInfoSubTable
                        where vendInvoiceInfoSubTable.TableRefId == this.HeaderReference
                            && vendInvoiceInfoSubTable.OrigPurchId == this.PurchaseOrder;

                    if (vendInvoiceInfoSubTable.RecId)
                    {
                        _dataSourceCtx.setBuffer(vendInvoiceInfoSubTable);
                        _dataSourceCtx.setDataSaved(true);
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                    else
                    {
                        VendInvoiceInfoTable vendInvoiceInfoTable;
                        vendInvoiceInfoSubTable = _dataSourceCtx.getBuffer();
                        vendInvoiceInfoSubTable.OrigPurchId = this.PurchaseOrder;
                        vendInvoiceInfoSubTable.TableRefid = this.HeaderReference;

                        select firstonly PurchName, ParmId from vendInvoiceInfoTable
                            where vendInvoiceInfoTable.TableRefId == this.HeaderReference;

                        vendInvoiceInfoSubTable.PurchName = vendInvoiceInfoTable.PurchName;
                        vendInvoiceInfoSubTable.ParmId = vendInvoiceInfoTable.ParmId;
                        vendInvoiceInfoSubTable.SourceAccountingEvent = AccountingEvent::getLastEvent(PurchTable::find(this.PurchaseOrder).SourceDocumentHeader).RecId;
                    }
                }
                break;

            case dataentitydatasourcestr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = _dataSourceCtx.getBuffer();

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    VendInvoiceInfoTable vendInvoiceInfoTable;

                    select firstonly vendInvoiceInfoTable
                        where vendInvoiceInfoTable.TableRefId == this.HeaderReference;

                    if (this.InvoiceLineNumber == 0)
                    {
                        this.InvoiceLineNumber = VendInvoiceInfoLine::getNextInvoiceLineNumber(this.HeaderReference);
                    }

                    vendInvoiceInfoLine.ParmId = vendInvoiceInfoTable.ParmId;

                    if (this.VendorInvoiceLineReviewStatus != VendInvoiceRequestStatus::Draft)
                    {
                        this.VendorInvoiceLineReviewStatus = VendInvoiceRequestStatus::Draft;
                    }
                }

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                    || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if (this.ProcurementCategoryName)
                    {
                        EcoResCategoryHierarchyRole hierarchyRole;
                        EcoResCategory ecoResCategory;

                        select firstonly CategoryHierarchy from hierarchyRole
                            where hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement;

                        if (hierarchyRole.CategoryHierarchy)
                        {
                            ecoResCategory = EcoResCategory::findByName(this.ProcurementCategoryName, hierarchyRole.CategoryHierarchy);

                            if (ecoResCategory)
                            {
                                vendInvoiceInfoLine.ProcurementCategory = ecoResCategory.RecId;
                            }
                        }
                    }
                    if (PublicSectorUtils::isBudgetReservationEnabled() && !this.hasBudgetReservationReferenceFromOtherDocument())
                    {
                        // Allow budget reservation reference change.
						vendInvoiceInfoLine.BudgetReservationLine_PSN = this.findGeneralBudgetReservationLine().RecId;
					}
                }

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    // When updating a line that the user previously changed to have UnitPrice zero and NetAmount zero, set the NetAmount
                    // to zero to force both prices to remain zero
                    if (this.isFieldSet(fieldNum(VendorInvoiceLineEntity, ReceiveNow)) && this.UnitPrice == 0 && this.NetAmount == 0)
                    {
                        // Set NetAmount to 0 to mark the field as set for the physical strategy defaults
                        this.NetAmount = 0;
                    }
                }

                vendInvoiceInfoLine.DocumentOrigin = DocumentOrigin::Service;
                vendInvoiceInfoLine.Ordering = DocumentStatus::Invoice;

                if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
                    || BrazilParameters::isEnabled())
                {
                    TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading_TH;
                    select firstonly RecId from taxWithholdItemGroupHeading_TH
                        where taxWithholdItemGroupHeading_TH.TaxWithholdItemGroup == this.WithholdingTaxItemGroup;
                    vendInvoiceInfoLine.TaxWithholdItemGroupHeadingId = taxWithholdItemGroupHeading_TH.RecId;
                }

                break;

            case dataentitydatasourcestr(VendorInvoiceLineEntity, VendInvoiceInfoTable):
                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                    || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    VendInvoiceInfoTable vendInvoiceInfoTable;

                    select firstonly vendInvoiceInfoTable
                        where vendInvoiceInfoTable.TableRefId == this.HeaderReference;

                    _dataSourceCtx.setBuffer(vendInvoiceInfoTable);
                    _dataSourceCtx.setDataSaved(true);
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, Tax1099BoxDetail):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    VendorInvoiceLineEntityValidator_PSN::setTax1099GAndSFieldBasedOnTax1099BoxId(this);
                }
                break;
        }

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = _dataSourceCtx.getBuffer();
                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                    || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
					this.defaultVendorInvoicePurchLine(vendInvoiceInfoLine);
                    if (VendorInvoiceQuantityAutoRoundingFeatureV3::instance().isEnabled() && vendInvoiceInfoLine.PurchUnit)
                    {
                        vendInvoiceInfoLine.ReceiveNow  = VendInvoiceUnitOfMeasureRounding::roundedQuantityBasedOnUnitOfMeasure(this.ReceiveNow, vendInvoiceInfoLine.PurchUnit);
                        if (vendInvoiceInfoLine.ReceiveNow != this.ReceiveNow)
                        {
                            warning("@AccountsPayable:VendInvoiceQuantityAutoRoundedWarningMessage");
                        }
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = _dataSourceCtx.getBuffer();
                this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(vendInvoiceInfoLine.inventDim());
                this.mapBudgetReservationDocumentNumberFromPurchReqLineToEntity(_entityCtx, vendInvoiceInfoLine);
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetReservationReferenceFromOtherDocument</Name>
				<Source><![CDATA[
    private boolean hasBudgetReservationReferenceFromOtherDocument()
    {
        boolean hasReferenceFromOtherDocument;

        if (this.PurchaseOrder != '' && this.BudgetReservationLineRecId != 0)
        {
            hasReferenceFromOtherDocument = true;
        }

        return hasReferenceFromOtherDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapBudgetReservationDocumentNumberFromPurchReqLineToEntity</Name>
				<Source><![CDATA[
    private void mapBudgetReservationDocumentNumberFromPurchReqLineToEntity(DataEntityRuntimeContext _entityCtx, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
			DataEntityDataSourceRuntimeContext budgetReservationContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(VendorInvoiceLineEntity, BudgetReservationLine_PSN));
			BudgetReservationLine_PSN budgetReservationLine = budgetReservationContext.getBuffer();

			if (budgetReservationLine.RecId != _vendInvoiceInfoLine.BudgetReservationLine_PSN)
			{
				this.BudgetReservationLineRecId = _vendInvoiceInfoLine.BudgetReservationLine_PSN;
				this.BudgetReservationDocumentNumber = BudgetReservationHeader_PSN::find(budgetReservationLine.BudgetReservationHeader_PSN).DocumentNumber;
				this.BudgetReservationLineNumber = budgetReservationLine.LineNumber;
			}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        // grab the item variant name or default item name using the item number
        changecompany(this.DataAreaId)
        {
            this.ItemName = InventTable::find(this.ItemNumber).itemName(InventDim::find(this.DimensionNumber));

            if (this.InvoiceLineNumber == 0)
            {
                VendInvoiceInfoLine::setInvoiceLineNumbers(this.HeaderReference);

                this.InvoiceLineNumber = VendInvoiceInfoLine::findRecId(this.RecId).InvoiceLineNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item number for the vendor invoice line.
    /// </summary>
    /// <returns>
    /// True if the item number is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method assumes that the entity to record mapping is not complete at the time of call. Instead, it manually creates
    /// a partially hydrated <c>VendInvoiceInfoLine</c> buffer for item number validation. This method was created so that
    /// item number validation errors could be surfaced early during DMF validateWrite() sequence rather than during
    /// normal entity insert on the <c>VendInvoiceInfoLine</c> buffer.
    /// When validateWrite() fails, the entity framework will not attempt the entity operation.
    /// </remarks>
    private boolean validateItemNumber()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        vendInvoiceInfoLine.TableRefId = this.HeaderReference;
        vendInvoiceInfoLine.Ordering = this.Ordering;
        vendInvoiceInfoLine.ItemId = this.ItemNumber;
        vendInvoiceInfoLine.LineType = this.LineType;

        this.defaultVendorInvoicePurchLine(vendInvoiceInfoLine);

        return vendInvoiceInfoLine.validateFieldValue(fieldStr(VendInvoiceInfoLine, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = this.validatePurchaseOrderPurchLineNumberCombination() && this.validateItemNumber();

        ret = this.validateItemNumber() && ret;

        ret = ret && super();

        ret = ret && this.validateProcurementCategoryIsConsistentWithItemNumber();

        ret = ret && this.validateGeneralBudgetReservationLine();

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            ret = VendorInvoiceLineEntityValidator_PSN::validateTax1099BoxDetailForGAndSType(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneralBudgetReservationLine</Name>
				<Source><![CDATA[
    private boolean validateGeneralBudgetReservationLine()
    {
        boolean isValid = true;

        if (PublicSectorUtils::isBudgetReservationEnabled() && !this.hasBudgetReservationReferenceFromOtherDocument())
        {
            if (this.BudgetReservationDocumentNumber != '' || this.BudgetReservationLineNumber != 0)
            {
                isValid = (this.findGeneralBudgetReservationLine().RecId != 0);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGeneralBudgetReservationLine</Name>
				<Source><![CDATA[
    private BudgetReservationLine_PSN findGeneralBudgetReservationLine()
    {
        BudgetReservationLine_PSN budgetReservationLine;

        if (this.BudgetReservationDocumentNumber != '' || this.BudgetReservationLineNumber != 0)
        {
            BudgetReservationRelievingDocument_PSN relievingType;
            TransDate accountingDate;

            relievingType = BudgetReservationRelievingDocument_PSN::VendorInvoice;

            if (this.InvoiceTransactionDate)
            {
                accountingDate = this.InvoiceTransactionDate;
            }
            else
            {                          
                accountingDate = VendInvoiceInfoTable::findTableRefId(this.HeaderReference).updateDate();
            }

            budgetReservationLine = BudgetReservationLine_PSN::getValidatedBudgetReservationLineByTypeDateDocumentAndLineNumber(relievingType,
            this.BudgetReservationDocumentNumber,
            this.BudgetReservationLineNumber,
            accountingDate);

            this.BudgetReservationLineRecId = budgetReservationLine.RecId;
        }

        return budgetReservationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcurementCategoryIsConsistentWithItemNumber</Name>
				<Source><![CDATA[
    private boolean validateProcurementCategoryIsConsistentWithItemNumber()
    {
        if ((this.isFieldSet(fieldNum(VendorInvoiceLineEntity, ItemNumber))
                || this.isFieldSet(fieldNum(VendorInvoiceLineEntity, ProcurementCategoryName)))
            && this.ItemNumber
            && this.ProcurementCategoryName
            && this.findProcurementCategoryForItem(this.ItemNumber).Name != this.ProcurementCategoryName)
        {
            return checkFailed("@SCM:PurchPurchaseOrderLineEntityInconsistentProcurementCategory");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseOrderPurchLineNumberCombination</Name>
				<Source><![CDATA[
    private boolean validatePurchaseOrderPurchLineNumberCombination()
    {
        boolean isPurchaseOrderSet = this.isFieldSet(fieldNum(VendorInvoiceLineEntity, PurchaseOrder)) && this.PurchaseOrder != '';
        boolean isPurchLineNumberSet = this.isFieldSet(fieldNum(VendorInvoiceLineEntity, PurchLineNumber)) && this.PurchLineNumber != 0;

        if ((isPurchaseOrderSet || isPurchLineNumberSet) && !(isPurchaseOrderSet && isPurchLineNumberSet))
        {
            return checkFailed(strFmt("@AccountsPayable:PurchOrderPurchLineNumberCombination", 
				fieldId2Name(tableNum(VendorInvoiceLineEntity), fieldNum(VendorInvoiceLineEntity, PurchaseOrder)),
                fieldId2Name(tableNum(VendorInvoiceLineEntity), fieldNum(VendorInvoiceLineEntity, PurchLineNumber))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProcurementCategoryForItem</Name>
				<Source><![CDATA[
    private EcoResCategory findProcurementCategoryForItem(ItemId _itemId)
    {
        EcoResProductCategory productCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(_itemId, EcoResCategoryNamedHierarchyRole::Procurement);
        return EcoResCategory::find(productCategory.Category);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        #ISOCountryRegionCodes

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(VendorInvoiceLineEntity, InventDim):
                return true;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLineTaxExtension_IN):
                if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    return true;
                }

                if (VendInvoiceImportWithholdingTax_INFlight::instance().isEnabled())
                {
                    VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxExtension = _dataSourceCtx.getBuffer() as VendInvoiceInfoLineTaxExtension_IN;
                    VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(vendInvoiceInfoLineTaxExtension.VendInvoiceInfoLine);
                    PurchLine purchLine = vendInvoiceInfoLine.purchLine();
                    if (purchLine)
                    {
                        vendInvoiceInfoLineTaxExtension.initFromPurchLine(purchLine);
                    }
                    else
                    {
                        vendInvoiceInfoLineTaxExtension.initForNonPO(vendInvoiceInfoLine);
                    }
                }  
                break;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, BudgetReservationHeader_PSN),
                dataEntityDataSourceStr(VendorInvoiceLineEntity, BudgetReservationLine_PSN):
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                this.resolveFinTags(_entityCtx, _dataSourceCtx);
                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                    VendInvoiceInfoLine vendInvoiceInfoLineLocal = _dataSourceCtx.getBuffer() as VendInvoiceInfoLine;
                
                    if (vendInvoiceInfoLineLocal.RecId && vendInvoiceInfoLineLocal.PurchLineRecId &&
                        (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || DataEntityDatabaseOperation::Update))
                    {
                        PurchFormletterParmDataInvoice::createVendInvoiceMatchingLineForServices(
                            vendInvoiceInfoLineLocal,
                            vendInvoiceInfoLineLocal.purchLine(),
                            vendInvoiceInfoLineLocal.vendInvoiceInfoTable().VarianceApproved,
                            true);
                        VendInvoiceInfoLine_Project::createFromVendInvoiceInfoLineFromEntity(vendInvoiceInfoLineLocal, this.PurchaseOrder, this.ProcurementCategory);
                        VendorInvoiceLineEntity::processPrepaymentApplication(VendInvoiceInfoTable::findTableRefId(vendInvoiceInfoLineLocal.TableRefId), vendInvoiceInfoLineLocal);
                    }
                    break;

                case dataEntityDataSourceStr(VendorInvoiceLineEntity, Tax1099BoxDetail):
                    if (!VendorInvoiceLineEntityValidator_PSN::isTax1099BoxSetToGOrSType(this.Tax1099Box))
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(VendorInvoiceLineEntity, InventDim):
                return true;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, BudgetReservationHeader_PSN),
                dataEntityDataSourceStr(VendorInvoiceLineEntity, BudgetReservationLine_PSN):
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;

            case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                this.resolveFinTags(_entityCtx, _dataSourceCtx);
                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(VendorInvoiceLineEntity, VendInvoiceInfoLine):
                    VendInvoiceInfoLine vendInvoiceInfoLineLocal = _dataSourceCtx.getBuffer() as VendInvoiceInfoLine;
                    VendInvoiceInfoLine_Project::createFromVendInvoiceInfoLineFromEntity(vendInvoiceInfoLineLocal, this.PurchaseOrder, this.ProcurementCategory);
                    if (vendInvoiceInfoLineLocal.RecId && vendInvoiceInfoLineLocal.PurchLineRecId)
                    {
                        VendorInvoiceLineEntity::processPrepaymentApplication(VendInvoiceInfoTable::findTableRefId(vendInvoiceInfoLineLocal.TableRefId), vendInvoiceInfoLineLocal);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultVendorInvoicePurchLine</Name>
				<Source><![CDATA[
    private void defaultVendorInvoicePurchLine(VendInvoiceInfoLine _invoiceLine)
    {
        if (this.PurchaseOrder != '' && this.PurchLineNumber != 0)
        {
            PurchLine purchLine = purchLine::find(this.PurchaseOrder, this.PurchLineNumber);
            _invoiceLine.PurchLineRecId = purchLine.RecId;
            _invoiceLine.InventTransId = purchLine.InventTransId;
            _invoiceLine.InventDimId = purchLine.InventDimId;
            _invoiceLine.PurchUnit = purchLine.PurchUnit;
        }
        else
        {
            // Resolve InventDim values to InventDimID if any values are set
            if (this.InventInventoryDimensionEntityFieldsMapping::isAnyInventDimFieldSet())
            {
                _invoiceLine.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendorInvoiceLineStaging</c> table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        VendorInvoiceHeaderStaging headerStaging;
        VendorInvoiceLineStaging lineStaging;

        update_recordset lineStaging
            setting HeaderReference = headerStaging.HeaderReference
            join HeaderReference from headerStaging
                where lineStaging.HeaderReference == headerStaging.HeaderReferenceOld
                    && lineStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && lineStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && headerStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && headerStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && lineStaging.TransferStatus == DMFTransferStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {       
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepaymentApplication</Name>
				<Source><![CDATA[
    private static void processPrepaymentApplication(VendInvoiceInfoTable _vendInvoiceInfoTable, vendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        #OCCRetryCount
        VendAdvanceInvoiceApplication vendAdvanceInvoiceApplication;
        boolean isPrePaymentApplied;

        if (VendAutomateVendorInvoicesFeature::isEnabled()
            && VendParameters::find().AutomationPrepaymentApplication == NoYes::Yes)
        {
            try
            {
                vendAdvanceInvoiceApplication = VendAdvanceInvoiceApplication::construct(_vendInvoiceInfoTable);

                if (vendAdvanceInvoiceApplication.hasPrepaymentApplicationPending(true))
                {
                    ttsbegin;

                    if (!_vendInvoiceInfoTable.isNonPO() && VendAdvanceBlockApplyWithPaymentScheduleFlight::instance().isEnabled() && _vendInvoiceInfoTable.purchTable().PaymentSched != "")
                    {
                        isPrePaymentApplied = false;
                    }
                    else
                    {
                        isPrePaymentApplied = vendAdvanceInvoiceApplication.createVendInvoiceAutomationPrepaymentApplicationLines();
                    }
                    
                    if (isPrePaymentApplied)
                    {
                        VendorInvoiceLineEntity::logDocumentHistory(_vendInvoiceInfoLine, VendInvoiceAutomationPrepaymentApplicationEvent::Succeeded);
                    }
                    else
                    {
                        VendorInvoiceLineEntity::logDocumentHistory(_vendInvoiceInfoLine, VendInvoiceAutomationPrepaymentApplicationEvent::Failed);
                        if (VendParameters::find().BlockAutomationWhenPrepaymentApplicationFailed == NoYes::Yes)
                        {
                            VendInvoiceAutomationStateManagement::pauseInvoiceAutomation(_vendInvoiceInfoTable.RecId);
                        }
                    }

                    ttscommit;
                }
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentHistory</Name>
				<Source><![CDATA[
    private static void logDocumentHistory(vendInvoiceInfoLine _vendInvoiceInfoLine, VendInvoiceAutomationPrepaymentApplicationEvent _prepaymentEventValue)
    {
        DocumentEventRequestDocumentsTmp documentEventRequestTmp;
        VendInvoiceInfoTable existingVendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        insert_recordset documentEventRequestTmp (SourceRecId)
            select RecId from existingVendInvoiceInfoTable
                exists join vendInvoiceInfoLine
                    where vendInvoiceInfoLine.RecId == _vendInvoiceInfoLine.RecId
                        && vendInvoiceInfoLine.TableRefId == existingVendInvoiceInfoTable.TableRefId;

        select firstonly RecId from documentEventRequestTmp;

        if (documentEventRequestTmp.RecId != 0)
        {
            //Log automatic prepayment application status of the imported vendor invoice to the automation history
            DocumentEventLogRequest logRequest = new DocumentEventLogRequest();
            logRequest.eventEnumId = enumNum(VendInvoiceAutomationPrepaymentApplicationEvent);
            logRequest.eventEnumValue = _prepaymentEventValue;
            logRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
            logRequest.sourceRecId = 0;
            logRequest.requestDocumentsTmp = documentEventRequestTmp;

            DocumentEventLog::logDocumentEvent(logRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFinTags</Name>
				<Source><![CDATA[
    private void resolveFinTags(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = _dataSourceCtx.getBuffer();
        if (FinTagConfiguration::isFinTagConfigurationSet(vendInvoiceInfoLine.DataAreaId) && PurchaseOrderFinTagFeature::isEnabled())
        {
            VendorInvoiceLineEntity entity = _entityCtx.getEntityRecord();
            vendInvoiceInfoLine.FinTag = FinTagResolver::resolve(entity.FinTagDisplayValue, vendInvoiceInfoLine.DataAreaId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendInvoiceLineEntityDeveloperDocumentation</DeveloperDocumentation>
	<Label>@AccountsPayable:VendorInvoiceLineEntity</Label>
	<Tags>Invoice</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>VendorInvoiceLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsPayable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>VendorInvoiceLines</PublicCollectionName>
	<PublicEntityName>VendorInvoiceLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAccount</Name>
			<DataField>OrderAccount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AccountingDistributionTemplate</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdvanceApplicationReference</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AdvanceApplicationId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChangeQuantityManually</Name>
			<DataField>changedManually</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CloseForReceipt</Name>
			<DataField>closed</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CountyOrigDest</Name>
			<DataField>CountyOrigDest</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Currency</Name>
			<DataField>currencyCode</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryName</Name>
			<DataField>DeliveryName</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDescription</Name>
			<DataField>Description</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionNumber</Name>
			<DataField>InventDimId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventNow</Name>
			<DataField>InventNow</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceAccount</Name>
			<DataField>InvoiceAccount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ItemId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NetAmount</Name>
			<DataField>LineAmount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Discount</Name>
			<DataField>LineDisc</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountPercent</Name>
			<DataField>LinePercent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscount</Name>
			<DataField>MultiLnDisc</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscountPercentage</Name>
			<DataField>MultiLnPercent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Ordering</Name>
			<DataField>Ordering</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PackedExtensions</Name>
			<DataField>PackedExtensions</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PayrollLedgerDimension</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AdjustedUnitPrice</Name>
			<DataField>PDSCalculatedUnitPrice</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PDSCalculationId</Name>
			<DataField>PDSCalculationId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CWUpdate</Name>
			<DataField>PdsCWReceiveNow</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CWDeliveryRemainder</Name>
			<DataField>PdsCWRemainAfter</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CWRemainingQuantity</Name>
			<DataField>PdsCWRemainBefore</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Port</Name>
			<DataField>Port</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PriceUnit</Name>
			<DataField>PriceUnit</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCategory</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<DataField>ProcurementCategory</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReleaseAllRetainedAmount</Name>
			<DataField>PSAIsFinal</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<DataField>PSAReleaseAmount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Percentage</Name>
			<DataField>PSAReleasePercent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetainageAmount</Name>
			<DataField>PSARetainageAmount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalRetainedAmount</Name>
			<DataField>PSARetainageBalance</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetainPercentage</Name>
			<DataField>PSARetainagePercent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargesOnPurchases</Name>
			<DataField>PurchMarkup</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitPrice</Name>
			<DataField>PurchPrice</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Unit</Name>
			<DataField>PurchUnit</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReasonTableReference</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ReasonTableRef</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReceiveNow</Name>
			<Label>@SYS129091</Label>
			<DataField>ReceiveNow</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemainAfter</Name>
			<DataField>RemainAfter</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemainAfterInvent</Name>
			<DataField>RemainAfterInvent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemainBefore</Name>
			<DataField>RemainBefore</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RemainBeforeInvent</Name>
			<DataField>RemainBeforeInvent</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OriginalDeliverRemainder</Name>
			<DataField>RemainBeforeInventPhysical</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorInvoiceLineReviewStatus</Name>
			<DataField>RequestStatus</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDocumentLine</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SourceDocumentLine</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StatisticsProcedure</Name>
			<DataField>StatProcId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseOrder</Name>
			<DataField>OrigPurchId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099Amount</Name>
			<DataField>Tax1099Amount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099BoxDetailReference</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Tax1099BoxDetail</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099Fields</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Tax1099Fields</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryState</Name>
			<DataField>Tax1099State</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099StateAmount</Name>
			<DataField>Tax1099StateAmount</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTax</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WithholdingTaxGroup</Name>
			<DataField>TaxWithholdGroup</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WithholdingTaxItemGroup</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdItemGroup</DataField>
			<DataSource>TaxWithholdItemGroupHeading_TH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCode</Name>
			<DataField>TransactionCode</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Transport</Name>
			<DataField>Transport</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Commodity</Name>
			<DataField>Code</DataField>
			<DataSource>IntrastatCommodity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrigCountryRegionId</Name>
			<DataField>OrigCountryRegionId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StateOfOrigin</Name>
			<DataField>OrigStateId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingDistributionTemplateId</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>AccountingDistributionTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntity</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LegalEntity</DataField>
			<DataSource>AccountingDistributionTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyID</Name>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataAreaCompany</Name>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCategoryHierarchy</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CategoryHierarchy</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCategoryName</Name>
			<Label>@SYS136906</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCategoryHierarchyName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099Box</Name>
			<Mandatory>No</Mandatory>
			<DataField>Tax1099Box</DataField>
			<DataSource>Tax1099Fields</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099Type</Name>
			<Mandatory>No</Mandatory>
			<DataField>Tax1099Type</DataField>
			<DataSource>Tax1099Fields</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>MainAccountDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HeaderReference</Name>
			<Label>@SYS129060</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>TableRefId</DataField>
			<DataSource>VendInvoiceInfoTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchLineNumber</Name>
			<DataField>PurchaseLineLineNumber</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CFOPCodeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CFOPTable_BR</DataField>
			<DataSource>VendInvoiceInfoLine_W</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxServiceCode</Name>
			<DataField>TaxServiceCode_BR</DataField>
			<DataSource>VendInvoiceInfoLine_W</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxWithholdGroup</Name>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdGroup</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxWithholdItemGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdItemGroupHeadingId</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CFOPCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CFOPId</DataField>
			<DataSource>CFOPTable_BR</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxWithholdItemGroupName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>TaxWithholdItemGroupHeading_TH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiotOperationType</Name>
			<DataField>DiotOperationType</DataField>
			<DataSource>VendInvoiceInfoLine_W</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS319915</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>120</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceLineNumber</Name>
			<DataField>InvoiceLineNum</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventorySiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<DataField>InventColorId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<DataField>configId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVersionId</Name>
			<DataField>InventVersionId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchNumber</Name>
			<DataField>inventBatchId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderedInventoryStatusId</Name>
			<DataField>InventStatusId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetReservationLineRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
			<DataField>BudgetReservationLine_PSN</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetReservationLineNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<DataField>LineNumber</DataField>
			<DataSource>BudgetReservationLine_PSN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetReservationDocumentNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<DataField>DocumentNumber</DataField>
			<DataSource>BudgetReservationHeader_PSN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceTransactionDate</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TransDate</DataField>
			<DataSource>VendInvoiceInfoTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099SClosingDate</Name>
			<DataField>Tax1099DateOfClosing</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099GTaxYear</Name>
			<DataField>Tax1099TaxYear</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099SAddressOrLegalDescription</Name>
			<DataField>Tax1099AddressorLegalDesc</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099SBuyerPartOfRealEstateTaxAmount</Name>
			<DataField>Tax1099BuyersTax</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTax1099SPropertyOrServices</Name>
			<DataField>Tax1099PropertyOrServices</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099GVendorStateTaxId</Name>
			<DataField>Tax1099StateTaxID</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099GStateTaxWithheldAmount</Name>
			<DataField>Tax1099StateTaxWithheld</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTax1099GTradeOrBusinessIncome</Name>
			<DataField>Tax1099TradeOrBusiness</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Tax1099GVendorStateId</Name>
			<DataField>State</DataField>
			<DataSource>Tax1099BoxDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OverrideSalesTax</Name>
			<DataField>OverrideSalesTax</DataField>
			<DataSource>VendInvoiceInfoLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FinTagDisplayValue</Name>
			<FeatureClass>PurchaseOrderFinTagFeature</FeatureClass>
			<DataField>DisplayValue</DataField>
			<DataSource>FinTag</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>HeaderReference</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InvoiceLineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>ProductConfigurationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
					<MapFieldTo>ItemBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>ProductColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventoryWarehouseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventorySiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>ProductSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
					<MapFieldTo>OrderedInventoryStatusId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>ProductStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>ProductVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Dimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>MainAccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>MainAccount</Name>
					<Field>MainAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>VendorInvoiceHeaderEntity</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedDataEntity>VendorInvoiceHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>HeaderReference</Field>
					<RelatedField>HeaderReference</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>VendInvoiceInfoLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>VendInvoiceInfoLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>AccountingDistributionTemplate</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>AccountingDistributionTemplate</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>CompanyInfo</Name>
										<JoinRelationName>CompanyInfo</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>AccountingDistributionTemplate</Name>
								<JoinRelationName>AccountingDistributionTemplate</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResCategoryHierarchy</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResCategoryHierarchy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>EcoResCategoryHierarchy</Name>
										<JoinRelationName>BelongsTo</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProcurementCategory</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Tax1099Fields</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Tax1099Fields</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Tax1099Fields</Name>
								<JoinRelationName>Tax1099Fields</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>MainAccountDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>MainAccountDAVC</Name>
								<Field>PayrollLedgerDimension</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceInfoTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>VendInvoiceInfoTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ParmJobStatus</Name>
								<Field>ParmJobStatus</Field>
								<Value>ContainErrors, Waiting</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TableRefId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>TableRefId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceInfoSubTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceInfoSubTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TableRefId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>TableRefId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>IntrastatCommodity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>IntrastatCommodity_PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>IntrastatCommodity</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceInfoLine_W</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceInfoLine_W</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CFOPTable_BR</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CFOPTable_BR</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>CFOPTable_BR</Field>
										<JoinDataSource>VendInvoiceInfoLine_W</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>VendInvoiceInfoLineRelation</Name>
								<Field>RecId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>VendInvoiceInfoLine</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxWithholdItemGroupHeading_TH</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TaxWithholdItemGroupHeading_TH</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TaxWithholdItemGroupHeadingId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InventDimId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>InventDimId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetReservationLine_PSN</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetReservationLine_PSN</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetReservationHeader_PSN</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>BudgetReservationHeader_PSN</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>BudgetReservationHeader_PSN</Field>
										<JoinDataSource>BudgetReservationLine_PSN</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetReservationLine_PSN</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Tax1099BoxDetail</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>Tax1099BoxDetail</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Tax1099BoxDetail</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceInfoLineTaxExtension_IN</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceInfoLineTaxExtension_IN</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>VendInvoiceInfoLine</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>FinTag</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>FinTag</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>FinTag</Field>
								<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>