<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleasedDistinctProductCDSEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class EcoResReleasedDistinctProductCDSEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productNameCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product name from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Product name</returns>
    public static str productNameCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
                                              SysComputedColumn::comparisonLiteral('')),

            SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
            SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Description</returns>
    public static str descriptionCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)),
                                              SysComputedColumn::comparisonLiteral('')),

            SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)),
            SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitCostCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Unit Cost from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>UnitCost</returns>
    public static str unitCostCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventTable), fieldStr(InventTable, ItemDimCostPrice)),
            SysComputedColumn::comparisonLiteral(NoYes::Yes)),

            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventDistinctItemCostPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventDistinctItemCostPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventTableModuleInvent), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )),
            
            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventDistinctItemCostPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventDistinctItemCostPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventTableModuleInvent), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales price from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>SalesPrice</returns>
    public static str salesPriceCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventTable), fieldStr(InventTable, ItemDimCostPrice)),
            SysComputedColumn::comparisonLiteral(NoYes::Yes)),

            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventDistinctItemSalesPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventDistinctItemSalesPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventTableModuleSales), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )),
            
            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResReleasedDistinctProductCDSEntity), identifierStr(InventDistinctItemSalesPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventDistinctItemSalesPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResReleasedDistinctProductCDSEntity::calcPricePerQty(identifierStr(InventTableModuleSales), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPricePerQty</Name>
				<Source><![CDATA[
    private static str calcPricePerQty(str _dataSourceName, FieldName _priceFieldName, FieldName _priceQtyFieldName)
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), _dataSourceName, _priceQtyFieldName),
                SysComputedColumn::returnLiteral(0)),
            SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), _dataSourceName, _priceFieldName),
            SysComputedColumn::divide(SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), _dataSourceName, _priceFieldName),
                                      SysComputedColumn::returnField(tableStr(EcoResReleasedDistinctProductCDSEntity), _dataSourceName, _priceQtyFieldName)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldServiceProductTypeDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the string that defines the Field Service product type computed column.
    /// </summary>
    /// <returns>The string that defines the Field Service product type.</returns>
    public static str fieldServiceProductTypeDefinition()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                EcoResReleasedDistinctProductCDSEntity::productTypeComputedColumnDefinition(),
                SysComputedColumn::comparisonLiteral(EcoResProductType::Service)),
            SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::Service),
            SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(
                        dataentityviewstr(EcoResReleasedDistinctProductCDSEntity),
                        dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventModelGroup),
                        fieldStr(InventModelGroup, StockedProduct)),
                    SysComputedColumn::comparisonLiteral(NoYes::Yes)),
                SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::Inventory),
                        SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                dataentityviewstr(EcoResReleasedDistinctProductCDSEntity),
                                dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventModelGroup),
                                fieldStr(InventModelGroup, StockedProduct)),
                            SysComputedColumn::comparisonLiteral(NoYes::No)),
                        SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::NonInventory),
                        SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::NotAvailable))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getViewSQLTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table name used in the SQL view definition.
    /// </summary>
    /// <param name = "_field">A computed column definition from which to get the table name.</param>
    /// <returns>The table name used in the SQL view definition.</returns>
    /// <remarks>The SQL view definition will contain a string with the value T1.FieldName. This API will return T1.</remarks>
    private static str getViewSQLTableName(str _field)
    {
        var periodPosition = strScan(_field, '.', 1, strlen(_field));
        
        return strDel(_field, periodPosition, strLen(_field));
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTypeComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str productTypeComputedColumnDefinition()
    {
        str recIdField = SysComputedColumn::comparisonField(
            dataentityviewstr(EcoResReleasedDistinctProductCDSEntity),
            dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, EcoResDistinctProduct),
            fieldStr(EcoResDistinctProduct, RecId));

        DictField productTypeDictField = new DictField(tableNum(EcoResDistinctProduct), fieldNum(EcoResDistinctProduct, ProductType));

        return strFmt('%1.%2', EcoResReleasedDistinctProductCDSEntity::getViewSQLTableName(recIdField), productTypeDictField.name(DbBackend::Sql));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dualWriteShouldSkipDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if a datasource should be skipped for DualWrite
    /// </summary>
    /// <param name = "_entityToAnalyze">The data entity being checked. Not used</param>
    /// <param name = "_datasourceName">The data source being evaluated.</param>
    /// <param name = "_primaryTableId">The tableId of the data source. NotUSed</param>
    /// <param name = "_fieldMapping">The fieldMapping used in Dual Write.</param>
    /// <param name = "_atLeastOneFieldMapped">Whether at least one value was previously found.</param>
    /// <returns> result should be True if you want to skip the datasource.</returns>
    /// <remarks>This is an override to the default behavoir in BuisnessEventsRegistrationBase.shouldSkipDataSource(). This will ensure calculated values are properly updated in DualWrite.</remarks>
    public static boolean dualWriteShouldSkipDataSource(DictDataEntity _entityToAnalyze, str _datasourceName, tableid  _primaryTableId, Map _fieldMapping, boolean _atLeastOneFieldMapped)
    {
        if (_datasourceName == dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, Ledger)
            || (_datasourceName == dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventModelGroup))) // IsStockedProduct cannot be updated when products are associated with a model group
        {
            return true;
        }

        if (_atLeastOneFieldMapped) {
            return false;
        }
        
        switch (_datasourceName)
        {
            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, EcoResProductTranslationToSystemLanguage) :
            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, EcoResProductMasterTranslationToSystemLanguage) :
                return !(_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, ProductName)) ||
                     _fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, ProductDescription)));

            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventTableModuleInvent) :
                return !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, UnitCost))
                    && !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, InventoryUnitSymbol));

            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventDistinctItemCostPriceCurrentActivePerVariant) :
            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventDistinctItemCostPriceCurrentActivePerMaster) :
                return !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, UnitCost));

            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventTableModuleSales) :
                return !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, SalesPrice))
                    && !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, SalesUnitSymbol));

            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventDistinctItemSalesPriceCurrentActivePerMaster) :
            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventDistinctItemSalesPriceCurrentActivePerVariant) :
                return !_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, SalesPrice));

            case dataEntityDataSourceStr(EcoResReleasedDistinctProductCDSEntity, InventModelGroupItem) :
                return !(_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, FieldServiceProductType))
                         ||_fieldMapping.exists(fieldStr(EcoResReleasedDistinctProductCDSEntity, IsStockedProduct)));

            default :
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change tracking is currently not supported for this entity.
    /// </summary>
    /// <returns>An error message stating that change tracking is not supported for this query.</returns>
    public static Query defaultCTQuery()
    {
        throw error("@SCM:ErrorMessage_ChangeTrackingNotSupportedForEntity");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CDSIntegration</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResReleasedDistinctProductCDSEntityDevDoc</DeveloperDocumentation>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SCM:EcoResReleasedDistinctProductCDSEntity</Label>
	<Tags>Products</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResReleasedDistinctProductCDSStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<IsPublic>Yes</IsPublic>
	<IsReadOnly>Yes</IsReadOnly>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CDSReleasedDistinctProducts</PublicCollectionName>
	<PublicEntityName>CDSReleasedDistinctProduct</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitDecimalPrecision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsStockedProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitDecimalPrecision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ItemId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitSymbol</Name>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitDecimalPrecision</Name>
			<DataField>DecimalPrecision</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductName</Name>
			<ComputedFieldMethod>productNameCalc</ComputedFieldMethod>
			<ExtendedDataType>EcoResProductName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductDescription</Name>
			<ComputedFieldMethod>descriptionCalc</ComputedFieldMethod>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductType</Name>
			<DataField>ProductType</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ServiceType</Name>
			<DataField>ServiceType</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsStockedProduct</Name>
			<DataField>StockedProduct</DataField>
			<DataSource>InventModelGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>UnitCost</Name>
			<ComputedFieldMethod>unitCostCalc</ComputedFieldMethod>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>SalesPrice</Name>
			<ComputedFieldMethod>salesPriceCalc</ComputedFieldMethod>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>AccountingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitDecimalPrecision</Name>
			<DataField>DecimalPrecision</DataField>
			<DataSource>UnitOfMeasureInvent</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitSymbol</Name>
			<Label>@SYS16617</Label>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasureInvent</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCatchWeightProduct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>PdsCWProduct</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<DataField>configId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<DataField>InventColorId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVersionId</Name>
			<DataField>InventVersionId</DataField>
			<DataSource>InventDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantyDurationTime</Name>
			<DataField>DurationTime</DataField>
			<DataSource>EcoResProductServiceWarranty</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantyDurationTimeUnit</Name>
			<DataField>DurationTimeUnit</DataField>
			<DataSource>EcoResProductServiceWarranty</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarrantablePriceRangeBaseType</Name>
			<DataField>ApplicablePriceRangeBaseType</DataField>
			<DataSource>WarrantyInventTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LowerWarrantablePriceRangeLimit</Name>
			<DataField>ApplicablePriceRangeMin</DataField>
			<DataSource>WarrantyInventTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UpperWarrantablePriceRangeLimit</Name>
			<DataField>ApplicablePriceRangeMax</DataField>
			<DataSource>WarrantyInventTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>FieldServiceProductType</Name>
			<ComputedFieldMethod>fieldServiceProductTypeDefinition</ComputedFieldMethod>
			<EnumType>EcoResFieldServiceProductType</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>EcoResReleasedProductV2Entity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>EcoResReleasedProductV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ReleasedProductV2</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReleasedDistinctProductCDS</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ItemNumber</Field>
					<RelatedField>ItemNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductConfigurationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductConfiguration</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSReleasedDistinctProducts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductConfigurationEntity_ConfigurationId</Name>
					<Field>ProductConfigurationId</Field>
					<RelatedField>ConfigurationId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductColorEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductColor</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSReleasedDistinctProducts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductColorEntity_ColorId</Name>
					<Field>ProductColorId</Field>
					<RelatedField>ColorId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>ProductColorKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductSizeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductSize</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSReleasedDistinctProducts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductSizeEntity_SizeId</Name>
					<Field>ProductSizeId</Field>
					<RelatedField>SizeId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>ProductSizeKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductStyleEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductStyle</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSReleasedDistinctProducts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductStyleEntity_StyleId</Name>
					<Field>ProductStyleId</Field>
					<RelatedField>StyleId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>ProductStyleKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductVersion</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>EcoResProductVersionEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductVersion</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CDSReleasedDistinctProducts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductVersionEntity_VersionId</Name>
					<Field>ProductVersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>ProductVersionKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventDistinctProduct</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>InventDistinctProduct</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResDistinctProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResDistinctProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductServiceWarranty</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductServiceWarranty</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>EcoResDistinctProduct</JoinDataSource>
										<RelatedField>DistinctProduct</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResDistinctProductVariant</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProductVariant</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResDistinctProduct</Name>
								<JoinRelationName>EcoResDistinctProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductSystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductTranslationToSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
								<RelatedField>LanguageId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTableModuleSales</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTableModule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasure</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>UnitId</Field>
										<JoinDataSource>InventTableModuleSales</JoinDataSource>
										<RelatedField>Symbol</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ModuleTypeSales</Name>
								<Field>ModuleType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTableModuleInvent</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTableModule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasureInvent</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>UnitId</Field>
										<JoinDataSource>InventTableModuleInvent</JoinDataSource>
										<RelatedField>Symbol</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ModuleTypeInvent</Name>
								<Field>ModuleType</Field>
								<Value>Invent</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventModelGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventModelGroupItem</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>InventModelGroup</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>InventModelGroup</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ModelGroupDataAreaId</Field>
										<JoinDataSource>InventModelGroupItem</JoinDataSource>
										<RelatedField>DataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy1</Name>
										<Field>ModelGroupId</Field>
										<JoinDataSource>InventModelGroupItem</JoinDataSource>
										<RelatedField>ModelGroupId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemDataAreaId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductMaster</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductMaster</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Product</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductMasterTranslationToSystemLanguage</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductTranslation</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>EcoResProductMaster</JoinDataSource>
										<RelatedField>Product</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>SystemLanguageId</Field>
										<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
										<RelatedField>LanguageId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>WarrantyInventTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>WarrantyInventTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ItemId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventdistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctProductDefaultSalesSetup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctProductDefaultSalesSetup</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>DistinctProduct</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemCostPriceCurrentActivePerVariant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>CostPriceType</Name>
								<Field>PriceType</Field>
								<Value>Cost</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy1</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation_InventVersionId</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemCostPriceCurrentActivePerMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>CostPriceType</Name>
								<Field>PriceType</Field>
								<Value>Cost</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceConfigId</Name>
								<Field>ItemPriceConfigId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceConfigId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventStyleId</Name>
								<Field>ItemPriceInventStyleId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventStyleId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventVersionId</Name>
								<Field>ItemPriceInventVersionId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventVersionId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventSizeId</Name>
								<Field>ItemPriceInventSizeId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventSizeId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventColorId</Name>
								<Field>ItemPriceInventColorId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventColorId == "")</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemSalesPriceCurrentActivePerVariant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>SalesPriceType</Name>
								<Field>PriceType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy1</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation_InventVersionId</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemSalesPriceCurrentActivePerMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>SalesPriceType</Name>
								<Field>PriceType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceConfigId</Name>
								<Field>ItemPriceConfigId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceConfigId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventStyleId</Name>
								<Field>ItemPriceInventStyleId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventStyleId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventVersionId</Name>
								<Field>ItemPriceInventVersionId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventVersionId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventSizeId</Name>
								<Field>ItemPriceInventSizeId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventSizeId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventColorId</Name>
								<Field>ItemPriceInventColorId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventColorId == "")</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Ledger</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Ledger</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Name</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>