<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCreditCardTransactionEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class TrvCreditCardTransactionEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the exchange code field is set, that the credit card is valid,
    /// and no more than one enhanced data field has been populated.
    /// </summary>
    /// <returns>True if the validation passed, false otherwise.</returns>
    public boolean validateWrite()
    {
        boolean         ret = true;
        TrvEmpPaymethod trvEmpPaymethod;

        ret = super();

        // If this is a multi-currency transaction, make sure the currency is specified for the transaction currency.
        if (!this.isValidLocalCurrencyCode())
        {
            return checkFailed("@Expense:CreditCardTransactionCurrencyError");
        }

        // Check that a valid card number is entered. Mandatory check done by super();
        if (this.CardNumber)
        {
            trvEmpPaymethod = this.findTrvEmpPayMethod();

            // display error message - make sure we don't show a complete cc number
            if (!trvEmpPaymethod.RecId || !HcmWorker::checkExist(TrvEmpPaymethod.Worker))
            {
                if (TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::PreventCardNumberEntry)
                {
                    if (!TrvEmpPaymethod::isLuhnValid(this.CardNumber))
                    {
                        return checkFailed(strFmt("@Expense:CreditCardWorker_Error", "@SYS101348", this.CardNumber));
                    }
                    else
                    {
                        return checkFailed(strFmt("@Expense:CreditCardWorker_CreditCardError", TrvEmpPaymethod::getLastFourCharacters(this.CardNumber)));
                    }
                }

                return checkFailed(strFmt("@Expense:CreditCardWorker_ErrorLastFour",TrvEmpPaymethod::getLastFourCharacters(this.CardNumber)));
            }
        }

        // Check if more than one enhanced field is entered.
        if ((this.isCarRentalEnhancedData() && this.isFlightEnhancedData()) ||
            (this.isCarRentalEnhancedData() && this.isHotelEnhancedData()) ||
            (this.isHotelEnhancedData() && this.isFlightEnhancedData()))
        {
            return checkFailed("@Expense:CreditCardCostType_Error");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLocalCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the local currency code is valid.
    /// </summary>
    /// <returns>
    /// true if local currency is present; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean isValidLocalCurrencyCode()
    {
        return !(this.Amount_LocalCurrency != 0 && this.ExchCode_LocalCurrency == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method skips any unrelated underlying table insert that might be done for unrelated cost type.
    /// </summary>
    /// <param name = "entityCtx">The <c>DataEntityRuntimeContext</c> object containing the current entity context.</param>
    /// <param name = "dataSourceCtx">The <c>DataEntityDataSourceRuntimeContext</c> containing the current data source context.</param>
    /// <remarks>This method runs for every database operation for every data source.</remarks>
    public void mapEntityToDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        TrvCostType         trvCostType;
        TrvEmpPaymethod     trvEmpPaymethod;

        super(entityCtx, dataSourceCtx);

        // This code runs for every data source and DB operation. Select desired data source and operation.
        if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            // Default the values just once & check if CardNumber exists. If card number is 
            // invalid, validateWrite() failed, and we won't get this far.
            if (dataSourceCtx.name() == dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvPBSMaindata) && this.CardNumber && this.CardType)
            {
                trvEmpPaymethod = this.findTrvEmpPayMethod();

                if (trvEmpPaymethod.RecId)
                {
                    TrvPBSMaindata trvPbsMainData = dataSourceCtx.getBuffer();
                    trvPbsMainData.EmpPayMethodRecId                  = trvEmpPaymethod.RecId;
                    trvPbsMainData.Worker                             = trvEmpPaymethod.Worker;
                }
            }

            // Skip based off cost type.
            if (this.CostType)
            {
                trvCostType = TrvCostType::find(this.CostType);

                // If there is a valid expense type that matches the cost type of the entity.
                if (trvCostType.RecId)
                {
                    if ((trvCostType.ExpType == TrvExpType::Airline) ||
                        (trvCostType.ExpType == TrvExpType::Hotel) ||
                        (trvCostType.ExpType == TrvExpType::CarRental))
                    {
                        this.skipInsertBasedOnExpenseType(dataSourceCtx, trvCostType.ExpType);
                    }
                    else  // Category with no enhanced data required, skip all enhanced data insert.
                    {
                        this.skipInsertToDataSource(dataSourceCtx);
                    }
                }
                else // Invalid cost type, skip all enhanced data insert.
                {
                    this.skipInsertToDataSource(dataSourceCtx);
                }
            }
            // Skip based off provided enhanced data.
            else if (this.isCarRentalEnhancedData())
            {
                this.skipInsertBasedOnExpenseType(dataSourceCtx, TrvExpType::CarRental);
            }
            else if (this.isHotelEnhancedData())
            {
                this.skipInsertBasedOnExpenseType(dataSourceCtx, TrvExpType::Hotel);
            }
            else if (this.isFlightEnhancedData())
            {
                this.skipInsertBasedOnExpenseType(dataSourceCtx, TrvExpType::Airline);
            }
            else // Enhanced data is not provided so skip insert for all enhanced data tables.
            {
                this.skipInsertToDataSource(dataSourceCtx);
            }
        }

        if (dataSourceCtx.name() == dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvPBSMaindata))
        {
            TrvPbsMainData pbsMainData = dataSourceCtx.getBuffer() as TrvPbsMainData;

            // Currency conversion for amount fields.
            pbsMainData.AmountCurr = CurrencyExchangeHelper::amount(pbsMainData.AmountCurr, pbsMainData.ExchCode);

            if (pbsMainData.AmountLocal != 0 && pbsMainData.ExchCodeLocal != '')
            {
                pbsMainData.AmountLocal = CurrencyExchangeHelper::amount(pbsMainData.AmountLocal, pbsMainData.ExchCodeLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInsertToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method skips the insert database operation of a data source for a given table.
    /// </summary>
    /// <param name = "dataSourceCtx">The <c>DataEntityDataSourceRuntimeContext</c> containing the current data source context.</param>
    private void skipInsertToDataSource(DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        switch (dataSourceCtx.name())
        {
            case dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedTripLegDetail):
                this.skipDataSourceValidateField(fieldnum(TrvCreditCardTransactionEntity, TrvEnhancedTripLegDetail_ItineraryRecId), true);
                dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;

            case dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedCarRentalData):
            case dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedHotelData):
            case dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedItineraryData):
                dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipInsertBasedOnExpenseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method skips a set of table inserts based off the given expense category type.
    /// </summary>
    /// <param name = "dataSourceCtx">The <c>DataEntityDataSourceRuntimeContext</c> containing the current data source context.</param>
    /// <param name = "expType">The <c>TrvExpType</c> to decide which tables need an entry and which ones don't.</param>
    private void skipInsertBasedOnExpenseType(DataEntityDataSourceRuntimeContext dataSourceCtx, TrvExpType expType)
    {
        // For a particular expense type, skip all enhanced data tables except those related to the expense type itself.
        switch (expType)
        {
            case TrvExpType::CarRental:
                if (dataSourceCtx.name() != dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedCarRentalData))
                {
                    this.skipInsertToDataSource(dataSourceCtx);
                }
                break;

            case TrvExpType::Hotel:
                if (dataSourceCtx.name() != dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedHotelData))
                {
                    this.skipInsertToDataSource(dataSourceCtx);
                }
                break;

            case TrvExpType::Airline:
                if (dataSourceCtx.name() != dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedItineraryData) &&
                    dataSourceCtx.name() != dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvEnhancedTripLegDetail))
                {
                    this.skipInsertToDataSource(dataSourceCtx);
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCarRentalEnhancedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any car rental enhanced data in the current entity object.
    /// </summary>
    /// <returns>True if there are any enhanced data, false otherwise.</returns>
    private boolean isCarRentalEnhancedData()
    {
        return (this.CarRentalCheckOutDate || this.CheckOutLocation || this.DailyRentalRate || this.DaysRented || this.MonthlyRentalRate ||
                this.RegularMileageCharges || this.RenterName || this.ReservationNumber || this.ReturnDate || this.ReturnLocation ||
                this.TotalMiles || this.VehicleClass || this.WeeklyRentalRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHotelEnhancedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any hotel enhanced data in the current entity object.
    /// </summary>
    /// <returns>True if there are any enhanced data, false otherwise.</returns>
    private boolean isHotelEnhancedData()
    {
        return (this.CheckInDate || this.CheckOutDate || this.FolioNumber || this.GuestName || this.GuestNumber || this.NoShowIndicator ||
                this.TotalRoomNights || this.TotalRoomRent || this.TotalTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlightEnhancedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any flight enhanced data in the current entity object.
    /// </summary>
    /// <returns>True if there are any enhanced data, false otherwise.</returns>
    private boolean isFlightEnhancedData()
    {
        return (this.DepartureDate || this.DomesticIndicator || this.ExchangeTicketNumber || this.IssuingCarrier || this.NumberOfLegs ||
                this.OriginalTicketNumber || this.PassengerName || this.TicketIssueDate || this.TravelAgencyCode || this.TravelAgencyInvoiceNumber ||
                this.TravelAgencyName || this.ArrivalDate || this.CarrierCode || this.CityOfOrigin || this.DepartureTax || this.DestinationCity ||
                this.FareAmount || this.FeeAmount || this.FlightNumber || this.ServiceClass || this.StopOverCity || this.TaxAmount ||
                this.TravelDate || this.TripLegNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallow delete on this entity.
    /// </summary>
    /// <returns>Throws an error indicating that read, update or delete actions cannot be performed on this entity.</returns>
    public boolean aosValidateDelete()
    {
        throw error("@Expense:CreditCardEntityRUDError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallow read on this entity.
    /// </summary>
    /// <returns>Throws an error indicating that read, update or delete actions cannot be performed on this entity.</returns>
    public boolean aosValidateRead()
    {
        TrvCreditCardTransactionEntityStaging trvCCTransStagingTable;
        select ExecutionId from trvCCTransStagingTable
            where trvCCTransStagingTable.CCTransUniqueID == this.CCTransUniqueID;

        info(strFmt("@Expense:CreditCardTransUniqueIdError",this.CCTransUniqueID,trvCCTransStagingTable.ExecutionId));
        throw error("@Expense:CreditCardEntityRUDError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disallow update on this entity.
    /// </summary>
    /// <returns>Throws an error indicating that read, update or delete actions cannot be performed on this entity.</returns>
    public boolean aosValidateUpdate()
    {
        TrvCreditCardTransactionEntityStaging trvCCTransStagingTable;
        select CCTransUniqueID,ExecutionId from trvCCTransStagingTable
            where trvCCTransStagingTable.CCTransUniqueID == this.CCTransUniqueID;

        info(strFmt("@Expense:CreditCardTransUniqueIdError",this.CCTransUniqueID,trvCCTransStagingTable.ExecutionId));
        throw error("@Expense:CreditCardEntityRUDError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the card number with the last four digits and a hash once the data is in the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">Entity import group to update cards for.</param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TrvCreditCardTransactionEntityStaging staging;

        if (TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::HashCardNumbers)
        {
            ttsbegin;
            while select forupdate staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.CardNumber && !staging.HashedCCNumber
            {
                staging.HashedCCNumber = TrvEmpPaymethod::generateHash(staging.CardNumber, staging.CardType);
                staging.CardNumber = TrvEmpPaymethod::getLastFourCharacters(staging.CardNumber);
                staging.update();
            }
            ttscommit;

            // Ensure TrvEmpPaymethod records have been hashed.
            ttsbegin;
            TrvEmpPaymethod trvEmpPaymethod;

            while select forupdate trvEmpPaymethod
                where !trvEmpPaymethod.HashedPaymethodID && trvEmpPaymethod.WorkerPaymethodID
            {
                trvEmpPaymethod.HashedPaymethodID = TrvEmpPaymethod::generateHash(trvEmpPaymethod.WorkerPaymethodID, trvEmpPaymethod.TrvCreditCardType);
                trvEmpPaymethod.WorkerPaymethodID = TrvEmpPaymethod::getLastFourCharacters(trvEmpPaymethod.WorkerPaymethodID);
                trvEmpPaymethod.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTrvEmpPayMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related TrvEmpPaymethod record to the imported transaction
    /// </summary>
    /// <returns>The related TrvEmpPaymethod record if found, otherwise an empty record.</returns>
    private TrvEmpPaymethod findTrvEmpPayMethod()
    {
        if (TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::HashCardNumbers)
        {
            TrvCreditCardTransactionEntityStaging staging;

            select HashedCCNumber from staging where staging.CCTransUniqueID == this.CCTransUniqueID;

            // Check for valid credit card - worker mapping
            return TrvEmpPaymethod::findByHash(staging.HashedCCNumber);
        }
        else
        {
            return TrvEmpPaymethod::findByWorkerPaymentIDAndCardType(this.CardNumber, this.CardType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks all failed imports to validate if they are credit cards that are not allowed to be in the system.
    /// Any found have their numbers hashed and truncated so the import could be tried again if the parameter is changed.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">Entity import group to update cards for.</param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (TrvParameters::find().AllowCreditCardNumberEntry == TrvPaymethodNumberValidationRule::HashCardNumbers)
        {
            TrvCreditCardTransactionEntityStaging staging;

            ttsbegin;
            while select forupdate staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.TransferStatus == DMFTransferStatus::Error && !staging.HashedCCNumber && TrvEmpPaymethod::isLuhnValid(staging.CardNumber)
            {
                staging.HashedCCNumber = TrvEmpPaymethod::generateHash(staging.CardNumber, staging.CardType);
                staging.CardNumber = TrvEmpPaymethod::getLastFourCharacters(staging.CardNumber);
                staging.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ignoreDataSource;
        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(TrvCreditCardTransactionEntity, TrvPBSMaindata):
                
                TrvPBSMaindata pbsMainData = _dataSourceCtx.getBuffer();

                if (pbsMainData.TravelNo)
                {
                    ignoreDataSource = true;
                }

                break;
        }

        return ignoreDataSource ? true : super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TrvElectronicPayment</ConfigurationKey>
	<Label>@SYS101657</Label>
	<Tags>Credit card</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TrvCreditCardTransactionEntityStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>TravelAndExpense</Modules>
	<PrimaryCompanyContext>dataAreaId</PrimaryCompanyContext>
	<PrimaryKey>CCTransUniqueID</PrimaryKey>
	<PublicCollectionName>CreditCardTransactions</PublicCollectionName>
	<PublicEntityName>CreditCardTransaction</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount_CreditCardCurrency</Name>
			<Label>@SYS107167</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>AmountCurr</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount_LocalCurrency</Name>
			<Label>@SYS115318</Label>
			<Mandatory>No</Mandatory>
			<DataField>AmountLocal</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BusinessName</Name>
			<Label>@SYS125529</Label>
			<Mandatory>No</Mandatory>
			<DataField>BusinessName</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CardNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CardNumber</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CardNumberNIKS</Name>
			<Label>@SYS101741</Label>
			<Mandatory>No</Mandatory>
			<DataField>CardNumberNIKS</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CardType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CardType</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CatCode</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryCodesDescription</Name>
			<Mandatory>No</Mandatory>
			<DataField>CatCodesDesc</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CCTransUniqueID</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CCTransUniqueID</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CostType</Name>
			<Mandatory>No</Mandatory>
			<DataField>CostType</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Country</Name>
			<Mandatory>No</Mandatory>
			<DataField>Country</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmpPayMethodRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>EmpPayMethodRecId</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchCode_CreditCardCurrency</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ExchCode</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchCode_LocalCurrency</Name>
			<Label>@SYS115320</Label>
			<Mandatory>No</Mandatory>
			<DataField>ExchCodeLocal</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MerchantCategoryCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>MerchantCategoryCode</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<Label>@SYS125531</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentMethod</Name>
			<Mandatory>No</Mandatory>
			<DataField>Paymethod</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Posted</Name>
			<Label>@SYS101145</Label>
			<Mandatory>No</Mandatory>
			<DataField>Posted</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reference</Name>
			<Mandatory>No</Mandatory>
			<DataField>Reference</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Town</Name>
			<Mandatory>No</Mandatory>
			<DataField>Town</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>TransDate</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Transferred</Name>
			<Label>@SYS343778</Label>
			<Mandatory>No</Mandatory>
			<DataField>Transferred</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TravelNo</Name>
			<Mandatory>No</Mandatory>
			<DataField>TravelNo</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Worker</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Worker</DataField>
			<DataSource>TrvPBSMaindata</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CarRentalCheckOutDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>CarRentalCheckOutDate</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckOutLocation</Name>
			<Mandatory>No</Mandatory>
			<DataField>CheckOutLocation</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DailyRentalRate</Name>
			<Mandatory>No</Mandatory>
			<DataField>DailyRentalRate</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DaysRented</Name>
			<Mandatory>No</Mandatory>
			<DataField>DaysRented</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MonthlyRentalRate</Name>
			<Mandatory>No</Mandatory>
			<DataField>MonthlyRentalRate</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RegularMileageCharges</Name>
			<Mandatory>No</Mandatory>
			<DataField>RegularMileageCharges</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RenterName</Name>
			<Mandatory>No</Mandatory>
			<DataField>RenterName</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReservationNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>ReservationNumber</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReturnLocation</Name>
			<Mandatory>No</Mandatory>
			<DataField>ReturnLocation</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReturnDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ReturnDate</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalMiles</Name>
			<Mandatory>No</Mandatory>
			<DataField>TotalMiles</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VehicleClass</Name>
			<Mandatory>No</Mandatory>
			<DataField>VehicleClass</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WeeklyRentalRate</Name>
			<Mandatory>No</Mandatory>
			<DataField>WeeklyRentalRate</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DepartureDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>DepartureDate</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DomesticIndicator</Name>
			<Mandatory>No</Mandatory>
			<DataField>DomesticIndicator</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeTicketNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>ExchangeTicketNumber</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IssuingCarrier</Name>
			<Mandatory>No</Mandatory>
			<DataField>IssuingCarrier</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfLegs</Name>
			<Mandatory>No</Mandatory>
			<DataField>NumberOfLegs</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OriginalTicketNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>OriginalTicketNumber</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PassengerName</Name>
			<Mandatory>No</Mandatory>
			<DataField>PassengerName</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TicketIssueDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>TicketIssueDate</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TravelAgencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>TravelAgencyCode</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TravelAgencyInvoiceNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>TravelAgencyInvoiceNumber</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TravelAgencyName</Name>
			<Mandatory>No</Mandatory>
			<DataField>TravelAgencyName</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArrivalDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ArrivalDate</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CarrierCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CarrierCode</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CityOfOrigin</Name>
			<Mandatory>No</Mandatory>
			<DataField>CityOfOrigin</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DepartureTax</Name>
			<Mandatory>No</Mandatory>
			<DataField>DepartureTax</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DestinationCity</Name>
			<Mandatory>No</Mandatory>
			<DataField>DestinationCity</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FareAmount</Name>
			<Mandatory>No</Mandatory>
			<DataField>FareAmount</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FeeAmount</Name>
			<Mandatory>No</Mandatory>
			<DataField>FeeAmount</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FlightNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>FlightNumber</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TrvEnhancedTripLegDetail_ItineraryRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ItineraryRecId</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ServiceClass</Name>
			<Mandatory>No</Mandatory>
			<DataField>ServiceClass</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StopOverCity</Name>
			<Mandatory>No</Mandatory>
			<DataField>StopOverCity</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxAmount</Name>
			<Mandatory>No</Mandatory>
			<DataField>TaxAmount</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TravelDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>TravelDate</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TripLegNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>TripLegNumber</DataField>
			<DataSource>TrvEnhancedTripLegDetail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckInDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>CheckInDate</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckOutDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>CheckOutDate</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FolioNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>FolioNumber</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GuestName</Name>
			<Mandatory>No</Mandatory>
			<DataField>GuestName</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GuestNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>GuestNumber</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalRoomNights</Name>
			<Mandatory>No</Mandatory>
			<DataField>TotalRoomNights</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalRoomRent</Name>
			<Mandatory>No</Mandatory>
			<DataField>TotalRoomRent</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalTaxAmount</Name>
			<Mandatory>No</Mandatory>
			<DataField>TotalTaxAmount</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NoShowIndicator</Name>
			<Mandatory>No</Mandatory>
			<DataField>NoShowIndicator</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CarRental_PBSRecid</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PBSRecid</DataField>
			<DataSource>TrvEnhancedCarRentalData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Itinerary_PBSRecid</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PBSRecid</DataField>
			<DataSource>TrvEnhancedItineraryData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Hotel_PBSRecid</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PBSRecid</DataField>
			<DataSource>TrvEnhancedHotelData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>HashedCCNumber</Name>
			<ExtendedDataType>TrvHashedPaymentId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>128</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>CCTransUniqueID</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CCTransUniqueID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TrvPBSMaindata</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TrvPBSMaindata</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvEmpPaymethod</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TrvEmpPaymethod</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>TrvEmpPaymethod</Name>
								<JoinRelationName>IsUsedAsAPaymentMethodIn</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>HcmWorker</Name>
								<JoinRelationName>Incurred</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvEnhancedCarRentalData</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TrvEnhancedCarRentalData</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RecId</Field>
								<JoinDataSource>TrvPBSMaindata</JoinDataSource>
								<JoinDerivedTable>TrvPBSMaindata</JoinDerivedTable>
								<RelatedField>PBSRecid</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvEnhancedItineraryData</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TrvEnhancedItineraryData</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>TrvPBSMaindata</JoinDataSource>
								<JoinDerivedTable>TrvPBSMaindata</JoinDerivedTable>
								<RelatedField>PBSRecid</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvEnhancedTripLegDetail</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TrvEnhancedTripLegDetail</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>TrvEnhancedItineraryData</JoinDataSource>
								<JoinDerivedTable>TrvEnhancedItineraryData</JoinDerivedTable>
								<RelatedField>ItineraryRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvEnhancedHotelData</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TrvEnhancedHotelData</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>TrvPBSMaindata</JoinDataSource>
								<JoinDerivedTable>TrvPBSMaindata</JoinDerivedTable>
								<RelatedField>PBSRecid</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>