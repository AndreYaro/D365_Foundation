<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvReceiptEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Public entity exposed to be able to import/ export <c>DocuRefEntity</c> records using ODataService. 
/// </summary>
public class TrvReceiptEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ret = super();
       
        // All four fields {FileName, FileType, FileContents, Resource} need to be set.
        if (!this.FileName)
        {
            ret = ret && checkFailed(strFmt("@ApplicationFoundation:DocuRefEntity_FileFieldBlank", fieldStr(TrvReceiptEntity, FileName)));
        }

         if (!this.FileType)
         {
            ret = ret && checkFailed(strFmt("@ApplicationFoundation:DocuRefEntity_FileFieldBlank", fieldStr(TrvReceiptEntity, FileType)));
         }

         if (!this.FileContents)
         {
            ret = ret && checkFailed(strFmt("@ApplicationFoundation:DocuRefEntity_FileFieldBlank", fieldStr(TrvReceiptEntity, FileContents)));
         }

         if (!this.Resource)
         {
             ret = ret && checkFailed(strFmt("@ApplicationFoundation:DocuRefEntity_FileFieldBlank", fieldStr(TrvReceiptEntity, Resource)));
         }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data from the entity to the data source.
    /// </summary>
    /// <param name = "_entityCtx">The entity.</param>
    /// <param name = "_dataSourceCtx">The data source.</param>
    /// <returns>true on success; false otherwise.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        HcmWorkerRecId workerRecId = this.getWorkerFromResource(this.Resource);

        // If TrvUnreconciledExpenseTrans exists for worker use the existing record, else create a new record.
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(TrvReceiptEntity, DocuRefEntity))
        {
            DocuRefEntity docuRefEntity = _dataSourceCtx.getBuffer() as DocuRefEntity;
            TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction = this.findOrCreateTrvUnreconciledExpenseTrans(workerRecId);
            if (trvUnreconciledExpenseTransaction)
            {
                docuRefEntity.RefRecId = trvUnreconciledExpenseTransaction.RecId;
                docuRefEntity.RefCompanyId = 'dat';
                docuRefEntity.TypeId = DocuType::findGroup(DocuTypeGroup::File).TypeId;
                docuRefEntity.RefTableId = tableNum(TrvUnreconciledExpenseTrans);
            }
        }

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the update method to block the entity update.
    /// </summary>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        throw error("@Expense:TrvReceiptEntityUpdateError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the delete method to block the entity deletion.
    /// </summary>
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        throw error("@Expense:TrvReceiptEntityDeleteError");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerFromResource</Name>
				<Source><![CDATA[
    private HcmWorkerRecId getWorkerFromResource(ResourceRecId resource)
    {
        ResourceWorkerView resourceWorkerView;
        select firstonly Worker from ResourceWorkerView where ResourceWorkerView.RecId == resource;
        return ResourceWorkerView.Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTrvUnreconciledExpenseTrans</Name>
				<Source><![CDATA[
    private TrvUnreconciledExpenseTransaction findOrCreateTrvUnreconciledExpenseTrans(HcmWorkerRecId workerRecId)
    {
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction;
        select firstonly trvUnreconciledExpenseTransaction where trvUnreconciledExpenseTransaction.Worker == workerRecId;
        if (!trvUnreconciledExpenseTransaction)
        {
            ttsbegin;
            trvUnreconciledExpenseTransaction.ExpenseLine = 0;
            trvUnreconciledExpenseTransaction.TransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            trvUnreconciledExpenseTransaction.Worker = workerRecId;
            trvUnreconciledExpenseTransaction.insert();
            ttscommit;
        }

        return trvUnreconciledExpenseTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@Expense:TrvReceiptEntityDescription</DeveloperDocumentation>
	<Label>@Expense:TrvReceiptEntityLabel</Label>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>TravelAndExpense</Modules>
	<PrimaryCompanyContext>ActualCompanyId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>TrvReceipts</PublicCollectionName>
	<PublicEntityName>TrvReceiptEntity</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ActualCompanyId</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentId</Name>
			<DataField>DocumentId</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Notes</Name>
			<DataField>Notes</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FileName</Name>
			<DataField>FileName</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FileContents</Name>
			<DataField>FileContents</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FileType</Name>
			<DataField>FileType</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocuRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>RefRecId</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt64">
			<Name>Resource</Name>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActualCompanyId</Name>
			<DataField>ActualCompanyId</DataField>
			<DataSource>DocuRefEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsCreditCardExpense</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DocumentId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>DocuRefEntity</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>DocuRefEntity</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>