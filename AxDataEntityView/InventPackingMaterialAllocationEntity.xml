<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPackingMaterialAllocationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventPackingMaterialAllocationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret && this.ItemNumber && this.PackingMaterialGroupId)
        {
            ret = checkFailed("@SCM:InventPackingMaterialAllocationEntityItemAndGroupSpecifiedError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventPackingMaterialAllocationEntity, InventPackagingUnit):
                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                    case DataEntityDatabaseOperation::Update:
                        // Set the correct inventDimId on the table buffer.
                        InventPackagingUnit packagingUnit = _dataSourceCtx.getBuffer();
                        packagingUnit.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNumberComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str itemNumberComputedColumnDefinition()
    {
        return InventPackingMaterialAllocationEntity::codeRelationComputedColumnDefinition(TableGroupAll::Table);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packagingGroupComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str packagingGroupComputedColumnDefinition()
    {
        return InventPackingMaterialAllocationEntity::codeRelationComputedColumnDefinition(TableGroupAll::GroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeRelationComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str codeRelationComputedColumnDefinition(TableGroupAll _itemCode)
    {
        TableName entityName = tableStr(InventPackingMaterialAllocationEntity);
        DataSourceName dataSourceName = dataEntityDataSourceStr(InventPackingMaterialAllocationEntity, InventPackagingUnit);

        return SysComputedColumn::codeDependentRelation(entityName, dataSourceName, fieldStr(InventPackagingUnit, ItemCode), _itemCode, fieldStr(InventPackagingUnit, ItemRelation), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemCode</Name>
				<Source><![CDATA[
    private void defaultItemCode()
    {
        boolean isFieldItemNumberSet        = this.isFieldSet(fieldNum(InventPackingMaterialAllocationEntity, ItemNumber));
        boolean isFieldPackingMaterialGroupIdSet    = this.isFieldSet(fieldNum(InventPackingMaterialAllocationEntity, PackingMaterialGroupId));

        if (this.ItemNumber)
        {
            if (isFieldItemNumberSet)
            {
                this.ItemCode = TableGroupAll::Table;
            }
        }
        else if (this.PackingMaterialGroupId)
        {
            if (isFieldPackingMaterialGroupIdSet)
            {
                this.ItemCode = TableGroupAll::GroupId;
            }
        }
        else if (!this.RecId
            || isFieldItemNumberSet
            || isFieldPackingMaterialGroupIdSet)
        {
            this.ItemCode = TableGroupAll::All;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemRelation</Name>
				<Source><![CDATA[
    private void defaultItemRelation()
    {
        boolean isFieldItemNumberSet        = this.isFieldSet(fieldNum(InventPackingMaterialAllocationEntity, ItemNumber));
        boolean isFieldPackingMaterialGroupIdSet    = this.isFieldSet(fieldNum(InventPackingMaterialAllocationEntity, PackingMaterialGroupId));

        if (this.ItemNumber)
        {
            if (isFieldItemNumberSet)
            {
                this.ItemRelation = this.ItemNumber;
            }
        }
        else if (this.PackingMaterialGroupId)
        {
            if (isFieldPackingMaterialGroupIdSet)
            {
                this.ItemRelation = this.PackingMaterialGroupId;
            }
        }
        else if (!this.RecId
            || isFieldItemNumberSet
            || isFieldPackingMaterialGroupIdSet)
        {
            this.ItemRelation = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(InventPackingMaterialAllocationEntity, ItemCode),
                [fieldNum(InventPackingMaterialAllocationEntity, PackingMaterialGroupId), fieldNum(InventPackingMaterialAllocationEntity, ItemNumber)]],
            [fieldNum(InventPackingMaterialAllocationEntity, ItemRelation),
                [fieldNum(InventPackingMaterialAllocationEntity, PackingMaterialGroupId), fieldNum(InventPackingMaterialAllocationEntity, ItemNumber)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventPackingMaterialAllocationEntity, ItemCode): this.defaultItemCode(); break;
            case fieldNum(InventPackingMaterialAllocationEntity, ItemRelation): this.defaultItemRelation(); break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(InventPackingMaterialAllocationEntity, InventDim))
        {
            // InventInventoryDimensionEntityFieldsMapping already created the record for us, so we just need to update the buffer.
            // We skip the call to super as it would return false if all the dimensions are blank, failing the whole operation.
            this.reloadInventDim(_entityCtx, _dataSourceCtx);
            ret = true;
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(InventPackingMaterialAllocationEntity, InventDim))
        {
            // InventInventoryDimensionEntityFieldsMapping already created the record for us, so we just need to update the buffer.
            // We skip the call to super as it would return false if all the dimensions are blank, failing the whole operation.
            this.reloadInventDim(_entityCtx, _dataSourceCtx);
            ret = true;
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadInventDim</Name>
				<Source><![CDATA[
    private void reloadInventDim(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        InventPackagingUnit packagingUnit = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(InventPackingMaterialAllocationEntity, InventPackagingUnit)).getBuffer();
        _dataSourceCtx.setBuffer(InventDim::find(packagingUnit.InventDimId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventPackaging</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DevDocInventPackingMaterialAllocationEntity</DeveloperDocumentation>
	<FormRef>inventpackagingunit</FormRef>
  <IsObsolete>Yes</IsObsolete>
	<Label>@SCM:InventPackingMaterialAllocationEntity</Label>
	<Tags>Packing material allocation</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>InventPackingMaterialAllocationStaging</DataManagementStagingTable>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS12836</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemNumberComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PackingMaterialGroupId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS72975</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>packagingGroupComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemPackagingGroupId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitConversionFactor</Name>
			<DataField>Factor</DataField>
			<DataSource>InventPackagingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemCode</DataField>
			<DataSource>InventPackagingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemRelation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemRelation</DataField>
			<DataSource>InventPackagingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PackingUnitSymbol</Name>
			<DataField>Unit</DataField>
			<DataSource>InventPackagingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<DataField>InventColorId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<DataField>configId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PackingUnitSymbol</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PackingMaterialGroupId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductColorId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductSizeId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductStyleId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductConfigurationId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>ProductConfigurationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>ProductColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>ProductSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>ProductStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventPackagingUnit</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventPackagingUnit</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>InventDim</Name>
								<JoinRelationName>InventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>