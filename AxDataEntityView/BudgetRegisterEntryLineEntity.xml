<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetRegisterEntryLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetRegisterEntryLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntryNumberSql</Name>
				<Source><![CDATA[
    private static str getEntryNumberSql()
    {
        DictDataEntity budgetRegisterEntryLineEntity = new DictDataEntity(tableNum(BudgetRegisterEntryLineEntity));

        // Get the data source name that contains the entry number details.
        str headerDataSourceName = budgetRegisterEntryLineEntity.query().dataSourceTable(tablenum(BudgetTransactionHeader)).name();

        // Get the field name that contains the entry number.
        str transactionNumber = budgetRegisterEntryLineEntity.computedColumnString(headerDataSourceName, fieldStr(BudgetTransactionHeader, TransactionNumber), FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(transactionNumber),
            SysComputedColumn::returnLiteral(''),
            transactionNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResultSQL</Name>
				<Source><![CDATA[
    private static str getBudgetCheckResultSQL()
    {
        str budgetCheckResultSql = strFmt(@"
            SELECT COALESCE(BS.CHECKRESULT, 0) FROM BUDGETTRANSACTIONLINE BTL
                LEFT JOIN BUDGETSOURCE BS ON BS.PARTITION = BTL.PARTITION AND BS.BUDGETSOURCETYPE = %1 AND BS.BUDGETTRANSACTIONLINE = BTL.RECID
                WHERE BTL.RECID = %2",
            enum2int(BudgetSourceType::BudgetTransactionLine),
            SysComputedColumn::returnField(tablestr(BudgetRegisterEntryLineEntity), dataEntityDataSourceStr(BudgetRegisterEntryLineEntity, BudgetTransactionLine), fieldstr(BudgetRegisterEntryLineEntity, RecId)));

        return budgetCheckResultSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyAmountSQL</Name>
				<Source><![CDATA[
    private static str getAccountingCurrencyAmountSQL()
    {
        DictDataEntity budgetRegisterEntryLineEntity = new DictDataEntity(tableNum(BudgetRegisterEntryLineEntity));

        // Get the data source name that contains the accounting currency amount details.
        str lineDataSourceName = budgetRegisterEntryLineEntity.query().dataSourceTable(tablenum(BudgetTransactionLine)).name();

        // Get the field name that contains the accounting currency amount.
        str accountingCurrencyAmount = budgetRegisterEntryLineEntity.computedColumnString(lineDataSourceName, fieldStr(BudgetTransactionLine, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);

        // Get the field name that contains the amount type.
        str amountType = budgetRegisterEntryLineEntity.computedColumnString(lineDataSourceName, fieldStr(BudgetTransactionLine, BudgetType), FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(amountType, int2Str(enum2int(BudgetType::Revenue))),
            SysComputedColumn::multiply(accountingCurrencyAmount, int2Str(-1)),
            accountingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmountSQL</Name>
				<Source><![CDATA[
    private static str getTransactionCurrencyAmountSQL()
    {
        DictDataEntity budgetRegisterEntryLineEntity = new DictDataEntity(tableNum(BudgetRegisterEntryLineEntity));

        // Get the data source name that contains the transaction currency amount details.
        str lineDataSourceName = budgetRegisterEntryLineEntity.query().dataSourceTable(tablenum(BudgetTransactionLine)).name();

        // Get the field name that contains the transaction currency amount.
        str transactionCurrencyAmount = budgetRegisterEntryLineEntity.computedColumnString(lineDataSourceName, fieldStr(BudgetTransactionLine, TransactionCurrencyAmount), FieldNameGenerationMode::WhereClause);

        // Get the field name that contains the amount type.
        str amountType = budgetRegisterEntryLineEntity.computedColumnString(lineDataSourceName, fieldStr(BudgetTransactionLine, BudgetType), FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(amountType, int2Str(enum2int(BudgetType::Revenue))),
            SysComputedColumn::multiply(transactionCurrencyAmount, int2Str(-1)),
            transactionCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BudgetRegisterEntryLineEntity, BudgetTransactionLine):
                    BudgetTransactionLine line = _dataSourceCtx.getBuffer();

                    line.AccountingCurrencyAmount = this.AccountingCurrencyAmount;
                    line.TransactionCurrencyAmount = this.TransactionCurrencyAmount;

                    if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                    {
                        MainAccountNum mainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.Dimension);
                        if (mainAccount)
                        {
                            line.BudgetType = BudgetTransactionLine::determineBudgetTypeFromMainAccount(mainAccount);
                        }
                    }

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isValid = true;

        switch (_dataSourceCtx.name())
        {
            case dataentitydatasourcestr(BudgetRegisterEntryLineEntity, BudgetTransactionLine):
                isValid = BudgetTransactionManager::checkWorkflowStatusForUpdate(this.WorkflowStatus, this.EntryNumber) && isValid;

                break;
        }

        if (!isValid)
        {
            // The validation will log errors, throw an exception to stop the update.
            throw Exception::Error;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.checkBudget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.checkBudget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    private void checkBudget()
    {
        if (this.AmountType == BudgetType::Expense)
        {
            if (!this.PrimaryLedgerId)
            {
                this.PrimaryLedgerId = Ledger::primaryLedger(CompanyInfo::current(this.LegalEntityId));
            }

            if (Ledger::isLedgerBudgetControlEnabled(this.PrimaryLedgerId))
            {
                BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToCheckBudget(this.RecId, true);

                // Register the notify commit event to reread the budget check result after it has been processed.
                appl.onTtsNotifyCommit += eventhandler(this.onTtsNotifyCommit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsNotifyCommit</Name>
				<Source><![CDATA[
    private void onTtsNotifyCommit()
    {
        // Reread to get the budget check result details.
        this.reread();

        // Remove the one time event handler that was added for the budget check result processing to ensure there is only one registered.
        appl.onTtsNotifyCommit -= eventhandler(this.onTtsNotifyCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of account structure IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of account structure IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetRegisterEntryLineEntityDimensionAccountStructureLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("DimensionAccountStructure")]
    public static str lookupDimensionAccountStructure(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetRegisterEntryLineEntity),
            fieldStr(BudgetRegisterEntryLineEntity, LegalEntityId),
            _fields);

        List lookupList = BudgetRegisterEntryEntityHelper::getDimensionAccountStructures(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEntryNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of entry numbers.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of entry numbers.
    /// </returns>
    [SysODataActionAttribute("BudgetRegisterEntryLineEntityEntryNumberLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("EntryNumber")]
    public static str lookupEntryNumber(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetRegisterEntryLineEntity),
            fieldStr(BudgetRegisterEntryLineEntity, LegalEntityId),
            _fields);

        List lookupList = BudgetRegisterEntryEntityHelper::getEntryNumbers(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetRegisterEntryLineEntityDeveloperDocumentation</DeveloperDocumentation>
	<Label>@Budget:BudgetRegisterEntryLineEntityLabel</Label>
	<Tags>Budget register</Tags>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetRegisterEntryLines</PublicCollectionName>
	<PublicEntityName>BudgetRegisterEntryLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCheckResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAccountStructure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionDisplayValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@Budget:EntityField_AccountingCurrencyAmount</Label>
			<ComputedFieldMethod>getAccountingCurrencyAmountSQL</ComputedFieldMethod>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountType</Name>
			<DataField>BudgetType</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetTransactionHeaderRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetTransactionHeader</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Comment</Name>
			<DataField>Comment</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>TransactionCurrency</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EntryDate</Name>
			<DataField>Date</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EntryNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TransactionNumber</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
			<DimensionLegalEntityContextField>LegalEntityId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAccountStructure</Name>
			<Label>@Budget:EntityField_DimensionAccountStructure</Label>
			<DataField>AccountStructure</DataField>
			<DataSource>DimensionValuesDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:EntityField_DimensionValues</Label>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionValuesDAVC</DataSource>
			<DimensionLegalEntityContextField>LegalEntityId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IncludeInCashFlowForecast</Name>
			<DataField>IncludeInCashFlowForecast</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LineNumber</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Price</Name>
			<DataField>Price</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryLedgerId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PrimaryLedger</DataField>
			<DataSource>BudgetTransactionHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity</Name>
			<DataField>Quantity</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:RegisterEntryLineEntityAmount</Label>
			<ComputedFieldMethod>getTransactionCurrencyAmountSQL</ComputedFieldMethod>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkflowStatus</Name>
			<DataField>WorkflowStatus</DataField>
			<DataSource>BudgetTransactionLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>BudgetCheckResult</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@Budget:ControlCheckResults</Label>
			<ComputedFieldMethod>getBudgetCheckResultSQL</ComputedFieldMethod>
			<EnumType>BudgetCheckResult</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>EntryNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>LedgerEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>PrimaryLedger</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryLinePrimaryLedger</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionValuesCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CurrencyCodes</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryLineCurrencyCode</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CurrencyEntity_CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetRegisterEntryHeader</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>BudgetRegisterEntryHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetRegisterEntryHeader</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetRegisterEntryLineEntryHeader</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetRegisterEntryHeaderEntity_EntryNumber</Name>
					<Field>EntryNumber</Field>
					<RelatedField>EntryNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetRegisterEntryHeaderEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>DimensionHierarchy</Name>
			<RelatedDataEntity>LedgerAccountStructureEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>DimensionAccountStructure</Field>
					<RelatedField>AccountStructureName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetTransactionLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetTransactionLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetTransactionHeader</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetTransactionHeader</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>PrimaryLedger</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>Ledger</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>CompanyInfo</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>CompanyInfo</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>PrimaryForLegalEntity</Field>
												<JoinDataSource>PrimaryLedger</JoinDataSource>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>PrimaryLedger</Name>
										<JoinRelationName>Ledger</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetTransactionHeader</Name>
								<JoinRelationName>BudgetTransactionHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionValuesDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LedgerDimensionDAVC</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>BudgetTransactionLine</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>