<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLineDMFEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
// Microsoft internal use only, please do not do any extension to this data entity. For any extension requests, please reach out to Bank Management team.
public class BankStatementLineDMFEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    // <summary>
    // Validates field for <c>BankStatementLineDMFEntity</c>.
    // </summary>
    // <param name = "_fieldIdToCheck">Field id to check</param>
    // <returns>Returns true if the validation pass, otherwise, returns false.</returns>
    [Hookable(false)]
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BankStatementLineDMFEntity, CounterCurrency):
                    if (this.CounterCurrency && !Currency::find(this.CounterCurrency).RecId)
                    {
                        ret = checkFailed(strFmt("@Bank:BankStmtLineDMFEntityCounterCurrencyValidationMessage", this.CounterCurrency));
                    }
                    break;

                case fieldNum(BankStatementLineDMFEntity, InstructedCurrency):
                    if (this.InstructedCurrency && !Currency::find(this.InstructedCurrency).RecId)
                    {
                        ret = checkFailed(strFmt("@Bank:BankStmtDMFEntityInstructedCurrencyValidationMessage", this.InstructedCurrency));
                    }
                    break;

                case fieldNum(BankStatementLineDMFEntity, LineNumber):
                    if (this.LineNumber <= 0)
                    {
                        ret = checkFailed(strFmt("@Bank:BankStmtLineDMFEntityLineNumValidationMessage"));
                    }
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    internal static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankStatementLineDMFStaging bankStatementLineDMFStaging;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;

        while select StatementId, BankAccount from bankStatementLineDMFStaging
            group by bankStatementLineDMFStaging.BankAccount, bankStatementLineDMFStaging.StatementId
                where bankStatementLineDMFStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && bankStatementLineDMFStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            select count(RecId) from bankStmtISOAccountStatement
                where bankStmtISOAccountStatement.Identification == bankStatementLineDMFStaging.StatementId
                    && bankStmtISOAccountStatement.BankAccountTable == bankStatementLineDMFStaging.BankAccount;

            if (!bankStmtISOAccountStatement.RecId)
            {
                throw error(strFmt("@Bank:BankStmtLineDMFEntityStatementIdErrorMessage", bankStatementLineDMFStaging.StatementId, bankStatementLineDMFStaging.BankAccount));
            }
            else if (bankStmtISOAccountStatement.RecId > 1)
            {
                throw error(strFmt("@Bank:BankStmtAndLineDMFEntityImportStopErrorMessage", bankStatementLineDMFStaging.StatementId, bankStatementLineDMFStaging.BankAccount));
            }
            else
            {
                bankStmtISOAccountStatement = BankStmtISOAccountStatement::findByBankAccountAndStatementId(bankStatementLineDMFStaging.BankAccount, bankStatementLineDMFStaging.StatementId);

                if (bankStmtISOAccountStatement.Status != BankStatementStatus::Open)
                {
                    throw error(strFmt("@Bank:BankStmtLineDMFEntityStatementStatusErrorMessage", bankStatementLineDMFStaging.StatementId, bankStatementLineDMFStaging.BankAccount));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps data entity fields to fields of the data sources.
    /// </summary>
    /// <param name = "_entityCtx">Entity context.</param>
    /// <param name = "_dataSourceCtx">Datasource context.</param>
    [Hookable(false)]
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            // If TradingParty is empty, record with Tradingparty is empty string should not be insert to table <c>BankStmtISOPartyIdentification</c>, set database operation to None.
            case dataEntityDataSourceStr(BankStatementLineDMFEntity, BankStmtISOPartyIdentification):
                if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                    && this.TradingParty == '')
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        if (this.Amount > 0)
        {
            this.AmountCreditDebitIndicator = DebitCredit::Debit;
        }
        else if (this.Amount < 0)
        {
            this.Amount = abs(this.Amount);
        }

        BankStmtISOAccountStatement bankStmtISOAccountStatement = BankStmtISOAccountStatement::findByBankAccountAndStatementId(this.BankAccount, this.StatementId);

        this.BankStmtISOAccountStatement = bankStmtISOAccountStatement.RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postLoad()
    {
        super();

        // Handle export processing.
        if (this.RecId)
        {
            // Amount are always postive in <c>BankStmtISOAccountStatement</c> table, using Indicator field to identify the negative and positive numbers.
            // If CreditDebitIndicator is Credit, means the amount exported should be negative.
            if (this.AmountCreditDebitIndicator == DebitCredit::Credit)
            {
                this.Amount *= -1;
            }

            BankStmtISOAccountStatement bankStmtISOAccountStatement = BankStmtISOAccountStatement::find(this.BankStmtISOAccountStatement);
            this.BankAccount = bankStmtISOAccountStatement.BankAccountTable;
            this.StatementId = bankStmtISOAccountStatement.Identification;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@Bank:BankStatementLineDMFEntity</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankStatementLineDMFStaging</DataManagementStagingTable>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>LineNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BankAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>StatementId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<ExtendedDataType>BankStatementId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BookingDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>BookingDateTime</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineStatus</Name>
			<DataField>BankStatementLineStatus</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EntryReference</Name>
			<DataField>EntryReference</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankStatementTransactionCode</Name>
			<DataField>ProprietaryBankTransactionCode</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TradingParty</Name>
			<DataField>Name</DataField>
			<DataSource>BankStmtISOPartyIdentification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountCreditDebitIndicator</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AmountCreditDebitIndicator</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<DataField>Amount</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<DataField>BankDocumentNumber</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferenceNumber</Name>
			<DataField>ReferenceNumber</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reversal</Name>
			<DataField>ReversalIndicator</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CounterCurrency</Name>
			<DataField>BankStatementCounterCurrency</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CounterAmount</Name>
			<DataField>BankStatementCounterCurrencyAmount</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CounterExchangeRate</Name>
			<DataField>BankStatementCounterExchangeRate</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InstructedCurrency</Name>
			<DataField>BankStatementInstructedCurrency</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InstructedAmount</Name>
			<DataField>BankStatementInstructedCurrencyAmt</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InstructedExchangeRate</Name>
			<DataField>BankStatementInstructedExchangeRate</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RelatedBank</Name>
			<DataField>RelatedBankName</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RelatedBankAccount</Name>
			<DataField>RelatedBankAccount</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditorReferenceInformation</Name>
			<DataField>CreditorReferenceInformation</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankStmtISOAccountStatement</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BankStmtISOAccountStatement</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BankAccount</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>StatementId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BookingDate</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankStmtISOReportEntry</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankStmtISOReportEntry</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankStmtISOPartyIdentification</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOPartyIdentification</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TradingParty</Field>
								<JoinDataSource>BankStmtISOReportEntry</JoinDataSource>
								<JoinRelationName>BankStmtISOPartyIdentification</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>