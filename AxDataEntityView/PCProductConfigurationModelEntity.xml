<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCProductConfigurationModelEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCProductConfigurationModelEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if(this.ModelName)
        {
            this.ModelXml = this.readProductConfigurationModelXML(this.ModelName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readProductConfigurationModelXML</Name>
				<Source><![CDATA[
    private str readProductConfigurationModelXML(str _modelName)
    {
        PCProductConfigurationModel model = PCProductConfigurationModel::findByName(_modelName);

        str modelXml;
        if(model)
        {
            modelXml = PCExport::SerializeProductConfigurationModel(model);
        }
        else
        {
            warning(strFmt("@SCM:ProductConfigurationModelNotFound", _modelName));
        }

        return modelXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DataEntityDatabaseOperation operation = _dataSourceCtx.getDatabaseOperation();

        if (operation == DataEntityDatabaseOperation::Insert || operation == DataEntityDatabaseOperation::Update)
        {
            if(_dataSourceCtx.name() == dataEntityDataSourceStr(PCProductConfigurationModelEntity, PCProductConfigurationModel))
            {    
                this.importXml(this.ModelXml, this.ModelName);
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports a xml serialized product configuration model.
    /// </summary>
    /// <remarks>Import indirectly inserts all the needed fields in the target data source included ProductConfigurationModelName.</remarks>
    /// <param name = "_configurationModelXml">a string containing a xml model configuration.</param>
    /// <param name = "_modelName">a string containing a model name.</param>
    private void importXml(str _configurationModelXml, str _modelName)
    {
        if(_configurationModelXml)
        {
            PCTemplateInitialize::construct().run();
            PCImportTreeBuilder builder = PCImportTreeBuilder::construct();

            Set selectedLegalEntities = new Set(Types::Int64);
            selectedLegalEntities.add(CompanyInfo::current());
            PCImportXmlDocumentHandler handler = builder.buildHandlerTree();

            handler.importModel(selectedLegalEntities.pack(), _configurationModelXml);
        }
        else
        {
            warning(strFmt("@SCM:ProductConfigurationModelNotFound", _modelName));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DevDocPCProductConfigurationModelEntity</DeveloperDocumentation>
	<FormRef>PCProductConfigurationModelDetails</FormRef>
	<IsObsolete>Yes</IsObsolete>
	<Label>@SCM:DataEntity_PCProductConfigurationModelEntity</Label>
	<Tags>Product configuration model</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PCProductConfigurationModelStaging</DataManagementStagingTable>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModelName</Name>
			<DataField>Name</DataField>
			<DataSource>PCProductConfigurationModel</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ModelXml</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
			<StringSize>-1</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ModelName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PCProductConfigurationModel</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PCProductConfigurationModel</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>