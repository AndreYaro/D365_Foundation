<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountLineV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountLineV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    // Majority of the code below are from RetailDiscountLineEntity. Review the changes you made and update RetailDiscountLineEntity if necessary.

    /// <summary>
    /// Initializes entity data source for sub types.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    public void initializeEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);
        if (!discount)
        {
            // One possiblity for RetailDiscountEntity not found is that it is RetailShippingThresholdDiscountsEntity.
            RetailShippingThresholdDiscountsEntity shippingDiscount = RetailShippingThresholdDiscountsEntity::find(this.OfferId);
            if (!shippingDiscount)
            {
                throw error(strFmt("@Retail:CannotFindOffer", this.OfferId));
            }

            // RetailShippingThresholdDiscounts table guarantees PeriodicDiscountType to be RetailDiscountOfferTypeBase::Shipping, so no need to process the types as the case of RetailDiscountEntity below.
        }
        else
        {
            RetailPeriodicDiscountLine discountLine;
            RetailDiscountLineOffer offerLine;
            RetailDiscountLineMixAndMatch mixAndMatchLine;
            RetailDiscountLineMultibuy multibuyLine;
            RetailDiscountLineThresholdApplying thresholdApplyingLine;

            if (dataSourceCtx.name() == dataEntityDataSourceStr(RetailDiscountLineV2Entity, RetailPeriodicDiscountLine))
            {
                if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    discountLine = dataSourceCtx.getBuffer();
                    switch (discount.PeriodicDiscountType)
                    {
                        case RetailDiscountOfferTypeBase::DiscountOffer:
                        case RetailDiscountOfferTypeBase::Promotion:
                        case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                            offerLine = discountLine as RetailDiscountLineOffer;
                            dataSourceCtx.setBuffer(offerLine);
                            break;
                        case RetailDiscountOfferTypeBase::Multibuy:
                            multibuyLine = discountLine as RetailDiscountLineMultibuy;
                            dataSourceCtx.setBuffer(multibuyLine);
                            break;
                        case RetailDiscountOfferTypeBase::MixAndMatch:
                        case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                            mixAndMatchLine = discountLine as RetailDiscountLineMixAndMatch;
                            dataSourceCtx.setBuffer(mixAndMatchLine);
                            break;
                        case RetailDiscountOfferTypeBase::Threshold:
                            if (discountLine.IsDiscountApplyingLine == NoYes::Yes)
                            {
                                thresholdApplyingLine = discountLine as RetailDiscountLineThresholdApplying;
                                dataSourceCtx.setBuffer(thresholdApplyingLine);
                            }
                            break;
                    }
                }
                else if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    switch (discount.PeriodicDiscountType)
                    {
                        case RetailDiscountOfferTypeBase::DiscountOffer:
                        case RetailDiscountOfferTypeBase::Promotion:
                        case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineOffer)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::Multibuy:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineMultibuy)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::MixAndMatch:
                        case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineMixAndMatch)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::Threshold:
                            if (this.IsDiscountApplyingLine == NoYes::Yes)
                            {
                                dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineThresholdApplying)).makeRecord());
                            }
                            break;
                    }
                }

            }
        }

        super(entityCtx, dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map entity to data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Discount line group isn't ready for validation yet, as it may not exist yet. We'll validate it and may populate it later in insert and update.
        this.skipDataSourceValidateField(fieldNum(RetailDiscountLineEntity, MixAndMatchLineGroup), true);

        switch(_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(RetailDiscountLineEntity, RetailDiscountThresholdTiers):
                if (this.IsDiscountApplyingLine == NoYes::No)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else
                {
                    RetailDiscountThresholdTiers tier = _dataSourceCtx.getBuffer();
                    tier.RecId = this.ThresholdTierRecId;
                    tier.OfferId = this.OfferId;
                    tier.AmountThreshold = this.ThresholdTierAmount;
                    _dataSourceCtx.setBuffer(tier);
                }
                break;

            case dataEntityDataSourceStr(RetailDiscountLineEntity, RetailPeriodicDiscountLine):
                RetailPeriodicDiscountLine discountLine = _dataSourceCtx.getBuffer();
                discountLine.IsPropertyBased = NoYes::Yes;
                if (this.IsDiscountApplyingLine == NoYes::Yes)
                {
                    RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);
                    if (discount && discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::Threshold)
                    {
                        RetailDiscountThresholdTiers tier;
                        select firstonly RecId from tier where tier.OfferId == this.OfferId && tier.AmountThreshold == this.ThresholdTierAmount;

                        if (tier.RecId)
                        {
                            RetailDiscountLineThresholdApplying thresholdApplyingLine = discountLine;
                            thresholdApplyingLine.Tier = tier.RecId;
                            thresholdApplyingLine.QuantityLimit = this.ThresholdLineQuantityLimit;
                            thresholdApplyingLine.ThresholdLineDiscountMethod = this.ThresholdApplyingLineDiscountMethod;

                            _dataSourceCtx.setBuffer(thresholdApplyingLine);

                            this.ThresholdTierRecId = tier.RecId;
                        }
                    }
                }

                break;

            default:
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        ret = this.validateDiscountLine(entityCtx,dataSourceCtx);

        if (dataSourceCtx.name() == dataEntityDataSourceStr(RetailDiscountLineV2Entity, RetailPeriodicDiscountLine))
        {
            // Skip overriding LineNum in the data method as parallel import is likely to produce duplicate value.
            // We can directly consume LineNum from the import file as the entity key OfferId+LineNum guarantees no duplicate.
            dataSourceCtx.skipDataMethods(true);
        }

        if (dataSourceCtx.name() == dataEntityDataSourceStr(RetailDiscountLineV2Entity, RetailDiscountApplicabilityRule))
        {
            DataEntityDataSourceRuntimeContext discountLineCtx = entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(RetailDiscountLineV2Entity, RetailPeriodicDiscountLine));
            RetailPeriodicDiscountLine discountLine = discountLineCtx.getBuffer();

            RetailDiscountApplicabilityRule applicabilityRule = dataSourceCtx.getBuffer();
            applicabilityRule.RetailPeriodicDiscountLine = discountLine.RecId;
        }

        ret = ret && super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        ret = this.validateDiscountLine(entityCtx,dataSourceCtx);

        ret = ret && super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountLine</Name>
				<Source><![CDATA[
    private boolean validateDiscountLine(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        if (dataSourceCtx.name() != dataEntityDataSourceStr(RetailDiscountLineV2Entity, RetailPeriodicDiscountLine))
        {
            return true;
        }

        RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);

        if (discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch
            || discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer)
        {
            if (!this.MixAndMatchLineGroup)
            {
                throw error(strFmt("@Retail:MixAndMatchLineGroupRequired", this.LineNum));
            }
            else
            {
                RetailMixAndMatchLineGroupSetup lineGroupSetup = RetailMixAndMatchLineGroupSetup::find(this.MixAndMatchLineGroup);
                if (!lineGroupSetup)
                {
                    throw error(strFmt("@Retail:BadMixAndMatchLineGroup", this.MixAndMatchLineGroup));
                }
            }

            if (this.MixAndMatchNumberOfItemsNeeded < 1)
            {
                throw error(strFmt("@Retail:BadMixAndMatchNumberOfItemsNeeded", this.MixAndMatchNumberOfItemsNeeded));
            }

            RetailMixAndMatchLineGroups mixMatchLineGroup;
            select forupdate mixMatchLineGroup where mixMatchLineGroup.mixAndMatchId == this.OfferId && mixMatchLineGroup.mixAndMatchLineGroup == this.MixAndMatchLineGroup;
            if (mixMatchLineGroup)
            {
                if (mixMatchLineGroup.numberOfItemsNeeded != this.MixAndMatchNumberOfItemsNeeded)
                {
                    mixMatchLineGroup.numberOfItemsNeeded = this.MixAndMatchNumberOfItemsNeeded;
                    mixMatchLineGroup.update();
                }
            }
            else
            {
                mixMatchLineGroup.mixAndMatchId = this.OfferId;
                mixMatchLineGroup.mixAndMatchLineGroup = this.MixAndMatchLineGroup;
                mixMatchLineGroup.numberOfItemsNeeded = this.MixAndMatchNumberOfItemsNeeded;
                mixMatchLineGroup.insert();
            }

            if (discount.MixAndMatchDiscountType == RetailMixAndMatchDiscountType::LineSpec)
            {
                switch (this.MixAndMatchDiscountType)
                {
                    case RetailDealPriceDiscountPctBase::DealPrice:
                        if (!RetailPricingConfigurationValidator::isValidDiscountDealPriceAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@Retail:IncorrectMixAndMatchLineDealPrice", this.DiscountPercentOrValue));
                        }
                        break;
                    case RetailDealPriceDiscountPctBase::DiscountPct:
                        if (!RetailPricingConfigurationValidator::isValidDiscountPercentageAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@Retail:IncorrectMixAndMatchLinePercentOff", this.DiscountPercentOrValue));
                        }
                        break;
                    case RetailDealPriceDiscountPctBase::DiscountAmount:
                        if (!RetailPricingConfigurationValidator::isValidDiscountAmountAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@RetailDiscount:IncorrectMixAndMatchLineAmountOff", this.DiscountPercentOrValue));
                        }
                        break;
                    default:
                        throw error(strFmt("@Retail:IncorrectMixAndMatchLineDiscountType", this.MixAndMatchDiscountType));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatMapping</Name>
				<Source><![CDATA[
    internal static void generatMapping()
    {
        DMFEntity entity = DMFEntity::findFirstByTableId(tableNum(RetailDiscountLineV2Entity));

        if (entity)
        {
            DMFTargetXMLToEntityMap::generateMapping(entity, /* _isFromScratch */ true);

            RetailDiscountLineV2Entity::removePropColumns(entity.EntityName);

            RetailDiscountLineV2Entity::generateStaging(entity.EntityName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePropColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// We don't want to expose prop value columns to end user directly.
    /// </summary>
    private static void removePropColumns(EntityName entityName)
    {
        const container propValueFieldNames = [
            fieldStr(RetailDiscountLineV2Entity, PropValue0),
            fieldStr(RetailDiscountLineV2Entity, PropValue1),
            fieldStr(RetailDiscountLineV2Entity, PropValue2),
            fieldStr(RetailDiscountLineV2Entity, PropValue3),
            fieldStr(RetailDiscountLineV2Entity, PropValue4),
            fieldStr(RetailDiscountLineV2Entity, PropValue5),
            fieldStr(RetailDiscountLineV2Entity, PropValue6),
            fieldStr(RetailDiscountLineV2Entity, PropValue7),
            fieldStr(RetailDiscountLineV2Entity, PropValue8),
            fieldStr(RetailDiscountLineV2Entity, PropValue9)
         ];

        DMFTargetXMLToEntityMap mapping;

        for (int idx = 1; idx <= conLen(propValueFieldNames); idx += 1)
        {
            FieldName fieldName = conPeek(propValueFieldNames, idx);
            
            delete_from mapping where mapping.EntityField == fieldName && mapping.Entity == entityName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// For every attribute, we expose them by PropValue but with a proper name in staging table.
    /// </summary>
    private static void generateStaging(EntityName entityName)
    {
        RetailPricingPropertyDefinition definition;
        EcoResAttribute attribute;

        TableName stagingTableName = tableStr(RetailDiscountLineV2Staging);
        RetailPricingPropertyStagingTableHelper::clearExtensionColumns(stagingTableName);

        DictTable dt = new DictTable(tableNum(RetailDiscountApplicabilityRule));

        while select RecId, Sequence from definition
            where definition.PropertyLevel == RetailPricingPropertyLevel::Line
            && definition.PropertyType == RetailPricingPropertyType::EcoResAttribute
            && definition.Status == RetailPricingPropertyProcessStatus::Published
            join Name from attribute
            where attribute.RecId == definition.EcoResAttributeRecId
        {
            FieldName fieldName = RetailPricingPropertyStagingTableHelper::normalizeFieldName(attribute.Name);

            FieldId fieldNumber = RetailDiscountApplicabilityRule::getPropValueFieldId(definition.Sequence);

            DictField df = dt.fieldObject(fieldNumber);

            RetailPricingPropertyStagingTableHelper::addStringExtensionColumn(stagingTableName, fieldName, df.stringLen());

            DMFTargetXMLToEntityMap mapping;
            mapping.Entity = entityName;
            mapping.EntityField = fieldName;
            mapping.MappingType = DMFMappingType::Assignment;
            mapping.XMLField = df.name();
            mapping.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RetailPricing:RetailDiscountLineV2EntityLabel</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailDiscountLineV2Staging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailDiscountLinesV2</PublicCollectionName>
	<PublicEntityName>RetailDiscountLineV2</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>OfferId</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNum</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>LineNum</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue0</Name>
			<DataField>PropValue0</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue1</Name>
			<DataField>PropValue1</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue2</Name>
			<DataField>PropValue2</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue3</Name>
			<DataField>PropValue3</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue4</Name>
			<DataField>PropValue4</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue5</Name>
			<DataField>PropValue5</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue6</Name>
			<DataField>PropValue6</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue7</Name>
			<DataField>PropValue7</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue8</Name>
			<DataField>PropValue8</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PropValue9</Name>
			<DataField>PropValue9</DataField>
			<DataSource>RetailDiscountApplicabilityRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryHierarchyName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisplayProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVariant_DisplayProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProductVariant</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitOfMeasure_Symbol</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DlvMode_Code</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Code</DataField>
			<DataSource>DlvMode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventSiteId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>SiteId</DataField>
			<DataSource>InventSite</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>InventLocationId</DataField>
			<DataSource>InventLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CatalogId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CatalogId</DataField>
			<DataSource>Catalog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResStyleName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResStyle</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResSizeName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResSize</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResConfigurationName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResConfiguration</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResColorName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResColor</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchDiscountType</Name>
			<DataField>discountType</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchLineGroup</Name>
			<DataField>lineGroup</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchNumberOfItemsNeeded</Name>
			<DataField>numberOfItemsNeeded</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountAmount</Name>
			<DataField>discAmount</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountMethod</Name>
			<DataField>discountMethod</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountPercentage</Name>
			<DataField>discPct</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPrice</Name>
			<DataField>offerPrice</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountMethodN1</Name>
			<DataField>discountMethodN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPriceInclTaxN1</Name>
			<DataField>offerPriceInclTaxN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPriceN1</Name>
			<DataField>offerPriceN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdApplyingLineDiscountMethod</Name>
			<DataField>ThresholdLineDiscountMethod</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdTierAmount</Name>
			<DataField>AmountThreshold</DataField>
			<DataSource>RetailDiscountThresholdTiers</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdTierRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Tier</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDiscountApplyingLine</Name>
			<DataField>IsDiscountApplyingLine</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdLineQuantityLimit</Name>
			<DataField>QuantityLimit</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountPercentOrValue</Name>
			<DataField>DiscountPercentOrValue</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>OfferId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNum</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailDiscountApplicabilityRule</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailDiscountApplicabilityRule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailPeriodicDiscountLine</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailPeriodicDiscountLine</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>RetailDiscountThresholdTiers</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>RetailDiscountThresholdTiers</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>RetailPeriodicDiscountLine</Name>
										<Field>Tier</Field>
										<JoinDataSource>RetailPeriodicDiscountLine</JoinDataSource>
										<JoinDerivedTable>RetailDiscountLineThresholdApplying</JoinDerivedTable>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>RetailDiscountLineMixAndMatch</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailDiscountLineMixAndMatch</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>RetailDiscountLineMultibuy</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailDiscountLineMultibuy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>RetailDiscountLineOffer</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailDiscountLineOffer</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>RetailDiscountLineThresholdApplying</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailDiscountLineThresholdApplying</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>RetailPeriodicDiscountLine</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResCategoryHierarchy</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResCategoryHierarchy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>BelongsTo</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResCategory_PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResCategory</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProduct</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResProduct_EcoResDistinctProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProduct</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProductVariant</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResProduct_EcoResProductMaster</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResProductMaster</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResDistinctProductVariant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResDistinctProductVariant</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResDistinctProductVariant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>UnitOfMeasure</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>UnitOfMeasure</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>UnitOfMeasure</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DlvMode</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DlvMode</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>DlvMode</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventSite</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>InventSite</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventLocation</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventLocation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>InventLocation</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Catalog</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Catalog</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>Catalog</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResStyle</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResStyle</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResStyle</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResSize</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResSize</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResSize</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResConfiguration</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResConfiguration</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResConfiguration</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResColor</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResColor</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>EcoResColor</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>