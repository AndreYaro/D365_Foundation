<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsBICollectionStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionsBICollectionStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>translateDisputeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create computed column for transaction status.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str translateDisputeStatus()
    {
        CustCollectionsBICollectionStatus collectionStatus;

        return SysComputedColumn::switch(
            SysComputedColumn::returnField(
                tableStr(CustCollectionsBICollectionStatus), 
                identifierStr(CustDispute), 
                fieldStr(CustDispute, Status)),
            collectionStatus.getDisputeStatusMap(),
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisputeStatusMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the dispute status map from the <c>CustVendDisputeStatus</c> enumeration for en-US only.
    /// </summary>
    /// <returns>The computed column map.</returns>
    /// <remarks>
    /// This method will be removed once PowerBI integration fully supports label translations. 
    /// </remarks>
    protected Map getDisputeStatusMap()
    {
        int i;
        var disputeStatusEnum = new DictEnum(enumName2Id('CustVendDisputeStatus'));
        var statusMap = SysComputedColumn::comparisionExpressionMap();
        CustVendDisputeStatus disputeStatus;

        for (i = 0; i < disputeStatusEnum.values(); i++)
        {
            disputeStatus = any2Enum(disputeStatusEnum.index2Value(i));

            if (this.shouldAddStatusToMap(disputeStatus))
            {
                statusMap.insert(SysComputedColumn::comparisonLiteral(disputeStatusEnum.index2Value(i)), SysComputedColumn::comparisonLiteral(disputeStatusEnum.index2Label(i)));
            }
        }

        return statusMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddStatusToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the <c>CustVendDisputeStatus</c> enumeration value should be added to the map.
    /// </summary>
    /// <param name = "_disputeStatus">The <c>CustVendDisputeStatus</c> enumeration value.</param>
    /// <returns>true if the value should be added to the map; otherwise, false.</returns>
    protected boolean shouldAddStatusToMap(CustVendDisputeStatus _disputeStatus)
    {
        return (_disputeStatus == CustVendDisputeStatus::Disputed ||
            _disputeStatus == CustVendDisputeStatus::PromiseToPay ||
            _disputeStatus == CustVendDisputeStatus::PromiseToPayBroken);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Collections</ConfigurationKey>
	<IsObsolete>Yes</IsObsolete>
	<Label>@AccountsReceivable:AR_Collections_CustCollectionsBICollectionStatus</Label>
	<Tags>BI</Tags>
	<Modules>CreditCollections</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountNum</Name>
			<DataField>AccountNum</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>CustDispute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DisputeStatusTranslated</Name>
			<ComputedFieldMethod>translateDisputeStatus</ComputedFieldMethod>
			<StringSize>50</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SystemCurrencyAmount</Name>
			<DataField>SystemCurrencyAmount</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DueDate</Name>
			<DataField>DueDate</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Invoice</Name>
			<DataField>Invoice</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AccountNum</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DataAreaId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustCollectionsBIAccountsReceivables</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustCollectionsBIAccountsReceivables</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustDispute</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustDispute</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>Status</Name>
								<Field>Status</Field>
								<Value>Disputed, PromiseToPay, PromiseToPayBroken</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CustTransRecId</Field>
								<JoinDataSource>CustCollectionsBIAccountsReceivables</JoinDataSource>
								<RelatedField>CustTrans</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>AccountNum</Name>
						<DataSource>CustCollectionsBIAccountsReceivables</DataSource>
						<Field>AccountNum</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>Status</Name>
						<DataSource>CustDispute</DataSource>
						<Field>Status</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>