<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRuleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlRuleEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEnityOfficeMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Office menu options for the entity when the <c>setEntityOfficeMenuOptionDelegate</c> delegate in the <c>BudgetControlConfigurationEntityHelper</c> class is called.
    /// </summary>
    /// <param name="_entityOfficeMenuOption">
    /// The <c>BudgetControlConfigurationEntityOfficeMenuOption</c> instance for the entity.
    /// </param>
    [SubscribesTo(classstr(BudgetControlConfigurationEntityHelper), delegatestr(BudgetControlConfigurationEntityHelper, setEntityOfficeMenuOptionDelegate))]
    public static void setEnityOfficeMenuOption(BudgetControlConfigurationEntityOfficeMenuOption _entityOfficeMenuOption)
    {
        if (_entityOfficeMenuOption.parmEntityName() == tableStr(BudgetControlRuleEntity))
        {
            _entityOfficeMenuOption.parmLegalEntityIdFieldName(fieldStr(BudgetControlRuleEntity, LegalEntityId));
            _entityOfficeMenuOption.parmStatusFieldName(fieldStr(BudgetControlRuleEntity, Status));
            _entityOfficeMenuOption.parmDisplayFieldGroupName(tableFieldGroupStr(BudgetControlRuleEntity, AutoReport));
            _entityOfficeMenuOption.parmDisplayName("@Budget:ControlRuleEntityOfficeExportDisplayValue");
            _entityOfficeMenuOption.parmDataAreaIdFieldName(fieldStr(BudgetControlRuleEntity, DataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.upsertRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetControlRule draftControlRule = this.getDraftBudgetControlRule();
        BudgetControlRuleManager::delete(draftControlRule.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsertRecord</Name>
				<Source><![CDATA[
    private void upsertRecord()
    {
        ttsbegin;

        BudgetControlRule draftControlRule = this.getDraftBudgetControlRule();

        if (draftControlRule)
        {
            // Set the values that were specified by the entity.
            draftControlRule.Name = this.Name;
            draftControlRule.Description = this.Description;
        }
        else
        {
            // Create a new rule with the default values.
            BudgetControlConfiguration budgetControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

            BudgetControlRuleManager::createBudgetControlRule(
                budgetControlConfiguration.RecId,
                this.Name,
                this.Description);

            // Select the new rule for update.
            draftControlRule = this.getDraftBudgetControlRule();
        }

        if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetCycleTimeSpanName)) == FieldState::Set
            || this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetCycleTimeSpanFiscalCalendarId)) == FieldState::Set)
        {
            // Map the BudgetCycleTimeSpan value as the mapEntityToDataSource method is not executed.
            this.BudgetCycleTimeSpan = BudgetControlConfigurationEntityHelper::getBudgetCycleTimeSpan(this.BudgetCycleTimeSpanName, this.BudgetCycleTimeSpanFiscalCalendarId).RecId;
            draftControlRule.BudgetCycleTimeSpan = this.BudgetCycleTimeSpan;
        }

        if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetControlInterval)) == FieldState::Set)
        {
            draftControlRule.Interval = this.BudgetControlInterval;
        }

        if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetManager)) == FieldState::Set)
        {
            draftControlRule.OverrideResponsibleUser = this.BudgetManager;
        }

        if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetThresholdPercent)) == FieldState::Set)
        {
            draftControlRule.ThresholdPercent = this.BudgetThresholdPercent;
        }

        if (this.validateBudgetControlRule(draftControlRule.RecId))
        {
            // Update the rule record without using the BudgetControlRuleManager to avoid resetting any existing criteria.
            draftControlRule.update();

            // The entity keys and the company context field may not be correct for the changes or current context.
            // Set the entity instance to the saved data.
            BudgetControlRuleEntity entity;

            // Set the current company context to match the primary company context set on the entity.
            changecompany(this.LegalEntityId)
            {
                // Select the entity record based on the key.
                select * from entity
                    where entity.Status == BudgetControlConfigurationStatus::Draft
                        && entity.Name == this.Name;
            }

            this.data(entity);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftBudgetControlRule</Name>
				<Source><![CDATA[
    private BudgetControlRule getDraftBudgetControlRule()
    {
        // Get the draft budget control configuration.
        BudgetControlConfiguration controlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

        // Select the rule for update.
        BudgetControlRule draftControlRule = BudgetControlRule::findByConfigurationAndRuleName(controlConfiguration.RecId, this.Name, true);

        return draftControlRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetControlRule</Name>
				<Source><![CDATA[
    private boolean validateBudgetControlRule(RecId _budgetControlRuleRecId)
    {
        boolean isValid = true;

        BudgetControlRuleManager controlRuleManager = BudgetControlRuleManager::construct(_budgetControlRuleRecId);

        if (controlRuleManager)
        {
            controlRuleManager.parmName(this.Name);
            controlRuleManager.parmDescription(this.Description);

            if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetCycleTimeSpanName)) == FieldState::Set
                || this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetCycleTimeSpanFiscalCalendarId)) == FieldState::Set)
            {
                controlRuleManager.parmBudgetCycleTimeSpan(this.BudgetCycleTimeSpan);
            }

            if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetControlInterval)) == FieldState::Set)
            {
                controlRuleManager.parmBudgetInterval(this.BudgetControlInterval);
            }

            if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetManager)) == FieldState::Set)
            {
                controlRuleManager.parmBudgetResponsibleUser(this.BudgetManager);
            }

            if (this.fieldState(fieldNum(BudgetControlRuleEntity, BudgetThresholdPercent)) == FieldState::Set)
            {
                controlRuleManager.parmBudgetThresholdPercent(this.BudgetThresholdPercent);
            }

            // Validate the rule but do not validate the criteria as the criteria may not yet be added.
            // Activation of the budget control configuration will validate for overlapping criteria.
            isValid = controlRuleManager.validate(false);

            if (isValid)
            {
                // Validate whether the time span is still valid since it is possible that the time span might have
                // been deleted or the time span may not have any budget cycles before persisting the rule.
                isValid = BudgetControlConfigurationManager::validateBudgetCycleTimeSpan(controlRuleManager.parmBudgetCycleTimeSpan());
            }
            else
            {
                // The validation will log errors, throw an exception to stop the update.
                throw Exception::Error;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetControlRuleEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@Budget:ControlRuleEntity</Label>
	<Tags>Control</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetControlRuleStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetControlRules</PublicCollectionName>
	<PublicEntityName>BudgetControlRule</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpanFiscalCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetControlInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetManager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetThresholdPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<DataField>LegalEntityId</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Status</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpan</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>BudgetCycleTimeSpan</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpanName</Name>
			<Label>@Budget:BudgetCycleTimeSpan</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetCycleTimeSpanEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpanFiscalCalendarId</Name>
			<Label>@Budget:BudgetCycleTimeSpanFiscalCalendar</Label>
			<Mandatory>No</Mandatory>
			<DataField>FiscalCalendarId</DataField>
			<DataSource>BudgetCycleTimeSpanEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlInterval</Name>
			<Mandatory>No</Mandatory>
			<DataField>Interval</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetManager</Name>
			<Mandatory>No</Mandatory>
			<DataField>OverrideResponsibleUser</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetThresholdPercent</Name>
			<Label>@Budget:ControlBudgetThreshold</Label>
			<Mandatory>No</Mandatory>
			<DataField>ThresholdPercent</DataField>
			<DataSource>BudgetControlRule</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Status</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Name</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetControlConfiguration</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedDataEntity>BudgetControlConfigurationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetControlConfigurations</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlRuleConfiguration</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_LedgerName</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_IsActive</Name>
					<Field>Status</Field>
					<RelatedField>Status</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetManager</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>SystemUserEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetManagers</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlRuleBudgetManager</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>SystemUserEntity_UserID</Name>
					<Field>BudgetManager</Field>
					<RelatedField>UserID</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetCycleTimeSpan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>BudgetCycleTimeSpanEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetCycleTimeSpans</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlRuleBudgetCycleTimeSpan</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetCycleTimeSpanEntity_Name</Name>
					<Field>BudgetCycleTimeSpanName</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetCycleTimeSpanEntity_FiscalCalendarId</Name>
					<Field>BudgetCycleTimeSpanFiscalCalendarId</Field>
					<RelatedField>FiscalCalendarId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetControlRule</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetControlRule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetControlConfigurationEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetControlConfigurationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetControlConfiguration</Field>
								<JoinDataSource>BudgetControlRule</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetCycleTimeSpanEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetCycleTimeSpanEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetCycleTimeSpan</Field>
								<JoinDataSource>BudgetControlRule</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>