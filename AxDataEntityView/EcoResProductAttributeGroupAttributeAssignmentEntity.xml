<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeGroupAttributeAssignmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductAttributeGroupAttributeAssignmentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (!ret.RecId && _dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeGroupAttributeAssignmentEntity, EcoResAttribute))
        {
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);
            ret = EcoResAttribute::findByNameTypeModifier(this.ProductAttributeName, ecoResAttributeType.RecId, EcoResAttributeModifier::Catalog);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeGroupAttributeAssignmentEntity, EcoResAttributeValueEntity))
        {
            EcoResAttributeValueEntity buffer = _dataSourceCtx.getBuffer();
            buffer.ProductAttributeName = this.ProductAttributeName;
            buffer.ProductAttributeTypeName = this.ProductAttributeTypeName;

            this.setFieldStateSetForAttributeType(buffer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        super(_entityCtx);

        boolean isEcoResProductAttributeGroupAttributeCategoryLookupPerfFlightEnabled = EcoResProductAttributeGroupAttributeCategoryLookupPerfFlight::instance().isEnabled();

        if ((!isEcoResProductAttributeGroupAttributeCategoryLookupPerfFlightEnabled 
                && _entityCtx.isDatabaseOperationInsertOrUpdate())
            || (isEcoResProductAttributeGroupAttributeCategoryLookupPerfFlightEnabled
                && EcoResCategoryAttributeLookup::shouldEntitySynchronize(_entityCtx, this)))
        {
            EcoResAttributeGroupAttribute::synchronizeAttributeGroupChangeWithCategoryAttributes(
                EcoResAttributeGroup::findByName(this.ProductAttributeGroupName).RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the category attribute lookups after the import.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The group execution definition.</param>
    /// <remarks>
    /// This method is only called in a data management context, and not for OData.
    /// </remarks>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (EcoResProductAttributeGroupAttributeCategoryLookupPerfFlight::instance().isEnabled()
            && EcoResCategoryAttributeLookup::shouldSynchronizePostImport(_dmfDefinitionGroupExecution))
        {
            EcoResProductAttributeGroupAttributeAssignmentStaging staging;
            EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
            EcoResAttributeGroup attributeGroup;
            EcoResCategory rootCategory, category;

            while select rootCategory
                    where rootCategory.Level == 1
                    exists join category
                        where category.CategoryHierarchy == rootCategory.CategoryHierarchy
                    exists join ecoResCategoryAttributeGroup
                        where ecoResCategoryAttributeGroup.Category == category.RecId
                            && ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                    exists join attributeGroup
                        where ecoResCategoryAttributeGroup.AttributeGroup == attributeGroup.RecId
                    exists join staging
                        where staging.ProductAttributeGroupName == attributeGroup.Name
                            && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::Completed
            {
                rootCategory.ForceFullLookupSync = NoYes::Yes;
                EcoResCategoryAttributeLookup::synchronizeWithCategoryAttribute(rootCategory);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldStateSetForAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the fields of attribute values table based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_buffer">
    ///     Attribute values table buffer.
    /// </param>
    protected void setFieldStateSetForAttributeType(EcoResAttributeValueEntity _buffer)
    {
        EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);

        switch (ecoResAttributeType.DataType)
        {
            case AttributeDataType::Currency:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, CurrencyValue), FieldState::Set);
                break;

            case AttributeDataType::DateTime:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, DateTimeValue), FieldState::Set);
                break;

            case AttributeDataType::Decimal:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, DecimalValue), FieldState::Set);
                break;

            case AttributeDataType::Integer:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, IntegerValue), FieldState::Set);
                break;

            case AttributeDataType::Text:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, TextValue), FieldState::Set);
                break;

            case AttributeDataType::TrueFalse:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, BooleanValue), FieldState::Set);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResProductAttributeGroupAttributeAssignmentEntityDevDoc</DeveloperDocumentation>
	<FormRef>EcoResAttributeGroup</FormRef>
	<Label>@SCM:EcoResProductAttributeGroupAttributeAssignmentEntity</Label>
	<Tags>Product setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductAttributeGroupAttributeAssignmentStaging</DataManagementStagingTable>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeGroupName</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeName</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeTypeName</Name>
			<Label>@SCM:AttributeType</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BooleanValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>BooleanValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateTimeValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DecimalValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DecimalValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegerValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>IntegerValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TextValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>TextValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeRetailDisplayOrder</Name>
			<DataField>RetailDisplayOrder</DataField>
			<DataSource>EcoResAttributeGroupAttribute</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductAttributeGroupName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductAttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductAttributeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResAttributeGroupAttribute</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResAttributeGroupAttribute</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeGroup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttributeGroup</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResAttributeGroup</Name>
								<JoinRelationName>EcoResAttributeGroup</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttribute</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttributeType</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResAttributeType</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>DataType</Name>
										<Field>DataType</Field>
										<Status>Hidden</Status>
										<Value>!= Reference</Value>
									</AxQuerySimpleDataSourceRange>
									<AxQuerySimpleDataSourceRange>
										<Name>IsHidden</Name>
										<Field>IsHidden</Field>
										<Status>Hidden</Status>
										<Value>No</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>EcoResAttributeType</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>AttributeModifier</Name>
								<Field>AttributeModifier</Field>
								<Status>Hidden</Status>
								<Value>Catalog</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResAttribute</Name>
								<JoinRelationName>EcoResAttribute</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeValueEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResAttributeValueEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultValue</Field>
								<JoinDataSource>EcoResAttributeGroupAttribute</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>