<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentConfirmEnity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntgrExportDocumentConfirmEnity extends common
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic after getting staging data
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxIntgrExportDocumentConfirmEntityStaging staging;
        TaxIntgrExportDocument_CN taxIntgrExportDocument;
        TaxProfileTable_CN taxProfile;
        TaxIntgrExportDocumentConfirmEntityStaging stagingDup;
        TaxIntgrExportDocOperationHistoryLine_CN historyLine;

        // Find non exist batch id
        select firstOnly BatchName from staging
            where staging.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus  == DMFTransferStatus::NotStarted
            notexists join historyLine
                where staging.BatchName == historyLine.BatchName;
        if (staging)
        {
            // Invoice %1 is not found
            throw error(strfmt("@TaxIntgr:BatchNameIsNotFound", staging.BatchName, SysDictField::findFieldById(tableNum(TaxIntgrExportDocumentConfirmEntityStaging), fieldNum(TaxIntgrExportDocumentConfirmEntityStaging, BatchName))));
        }

        // Avoid duplicate update external invoice id for the same export invoice id
        select firstOnly ExternalInvoiceId from staging
            where staging.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus  == DMFTransferStatus::NotStarted
            join ExportDocumentId from historyLine
                where staging.BatchName == historyLine.BatchName
                    && staging.Position == historyLine.Position
            exists join taxIntgrExportDocument
                where historyLine.ExportDocumentId == taxIntgrExportDocument.Id
                    && taxIntgrExportDocument.ExternalInvoiceId != '';
        if (staging)
        {
            // The VAT invoice %1 is not imported, the internal invoice ID %2 already assigned with VAT invoice.
            throw error (strfmt("@TaxIntgr:VATAssigned", staging.ExternalInvoiceId, historyLine.ExportDocumentId));
        }

        // Find duplicate external invoice id in staging
        select firstonly ExternalInvoiceId from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId    == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join stagingDup
                where stagingDup.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stagingDup.ExecutionId    == _dmfDefinitionGroupExecution.ExecutionId
                    && stagingDup.TransferStatus == DMFTransferStatus::NotStarted
                    && stagingDup.RecId     != staging.RecId
                    && stagingDup.ExternalInvoiceId == staging.ExternalInvoiceId
                    && stagingDup.ExternalInvoiceId != '';

        if (!staging)
        {
            // Find if external invoice id in staging exists in taxIntgrExportDocument
            select firstonly ExternalInvoiceId from staging
                where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus   == DMFTransferStatus::NotStarted
                    && staging.ExternalInvoiceId != ''
                exists join taxIntgrExportDocument
                    where staging.ExternalInvoiceId     != ''
                        && staging.ExternalInvoiceId    == taxIntgrExportDocument.ExternalInvoiceId;
        }

        if (staging)
        {
            select IsDuplicatedVATInvNumAllowed from taxProfile
                exists join taxIntgrExportDocument
                    where taxIntgrExportDocument.TaxCode == taxProfile.TaxCode
                exists join historyLine
                    where historyLine.ExportDocumentId == taxIntgrExportDocument.id
                exists join stagingDup
                    where historyLine.BatchName == stagingDup.BatchName
                        && historyLine.Position == stagingDup.Position
                        && stagingDup.ExternalInvoiceId == staging.ExternalInvoiceId;

            if (!taxProfile.IsDuplicatedVATInvNumAllowed)
            {
                // The official invoice %1 has already been assigned.
                throw error(strFmt("@TaxIntgr:VATOccupied", staging.ExternalInvoiceId));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<Label>@TaxIntgr:TaxIntegrationResponseImport</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxIntgrExportDocumentConfirmEntityStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalInvoiceId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ExternalInvoiceId</DataField>
			<DataSource>TaxIntgrExportDocument_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BatchName</Name>
			<DataField>BatchName</DataField>
			<DataSource>TaxIntgrExportDocOperationHistoryLine_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<DataField>Position</DataField>
			<DataSource>TaxIntgrExportDocOperationHistoryLine_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExportDocumentId</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>Id</DataField>
			<DataSource>TaxIntgrExportDocument_CN</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>BatchName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Position</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxIntgrExportDocument_CN</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxIntgrExportDocument_CN</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxIntgrExportDocOperationHistoryLine_CN</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TaxIntgrExportDocOperationHistoryLine_CN</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Id</Field>
								<JoinDataSource>TaxIntgrExportDocument_CN</JoinDataSource>
								<RelatedField>ExportDocumentId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>