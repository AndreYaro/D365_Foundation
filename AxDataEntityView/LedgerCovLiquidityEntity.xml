<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovLiquidityEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerCovLiquidityEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enterpriseCurrencyInflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the enterprise currency inflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str enterpriseCurrencyInflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, EnterpriseCurrencyAmount)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyInflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction currency inflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str transactionCurrencyInflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, AmountCur)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyInflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the accounting currency inflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str accountingCurrencyInflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, AmountMST)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterpriseCurrencyOutflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the enterprise currency outflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str enterpriseCurrencyOutflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(1)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, EnterpriseCurrencyAmount)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyOutflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction currency outflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str transactionCurrencyOutflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(1)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, AmountCur)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyOutflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the accounting currency outflow.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str accountingCurrencyOutflowSQL()
    {
        TableName viewName = tableStr(LedgerCovLiquidityEntity);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, IsBeginningBalance)), SysComputedColumn::returnLiteral(1)),
            SysComputedColumn::returnLiteral(0.0),
                SysComputedColumn::if(
                SysComputedColumn::equalExpression(SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, Crediting)), SysComputedColumn::returnLiteral(1)),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerCov), fieldStr(LedgerCov, AmountMST)),
                SysComputedColumn::returnLiteral(0.0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterpriseCurrencyBalanceSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the enterprise currency balance.
    /// </summary>
    /// <returns>The computed column SQL.</returns>
    public static str enterpriseCurrencyBalanceSQL()
    {
        return SysComputedColumn::returnField(tableStr(LedgerCovLiquidityEntity), identifierStr(LedgerCov), fieldStr(LedgerCov, EnterpriseCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyBalanceSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction currency balance.
    /// </summary>
    /// <returns>The computed column SQL.</returns>
    public static str transactionCurrencyBalanceSQL()
    {
        return SysComputedColumn::returnField(tableStr(LedgerCovLiquidityEntity), identifierStr(LedgerCov), fieldStr(LedgerCov, AmountCur));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrencyBalanceSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the accounting currency balance.
    /// </summary>
    /// <returns>The computed column SQL.</returns>
    public static str accountingCurrencyBalanceSQL()
    {
        return SysComputedColumn::returnField(tableStr(LedgerCovLiquidityEntity), identifierStr(LedgerCov), fieldStr(LedgerCov, AmountMST));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inflowOutflowSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column to translate the crediting identification to incoming and outgoing.
    /// </summary>
    /// <returns>The computed column SQL.</returns>
    public static str inflowOutflowSQL()
    {
        Map inflowOutflowTranslation = SysComputedColumn::comparisionExpressionMap();
        inflowOutflowTranslation.insert(
            SysComputedColumn::returnLiteral(NoYes::Yes),
            SysComputedColumn::returnLiteral(LedgerCovLiquidityDirection::Outgoing));
        inflowOutflowTranslation.insert(
            SysComputedColumn::returnLiteral(NoYes::No),
            SysComputedColumn::returnLiteral(LedgerCovLiquidityDirection::Incoming));

        return SysComputedColumn::switch(
            SysComputedColumn::returnField(
                tableStr(LedgerCovLiquidityEntity),
                dataEntityDataSourceStr(LedgerCovLiquidityEntity, LedgerCov),
                fieldStr(LedgerCov, Crediting)),
            inflowOutflowTranslation,
            SysComputedColumn::returnLiteral(LedgerCovLiquidityDirection::Outgoing)
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTypeENUSOnlySQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column to translate the cash flow document type enumeration to the en-US label value.
    /// </summary>
    /// <returns>
    /// The computed column SQL.
    /// </returns>
    /// <remarks>
    /// Refactor: 
    /// This method will be removed once the PowerBI integration fully supports label translations.
    /// The <c>LedgerCovLiquidityMeasurement</c> DocumentType will be changed to point from DocumentTypeEnUSOnly to DocumentType.
    /// The <c>LedgerCovLegalEntity</c> field DocumentTypeENUSOnly will be removed.
    /// The <c>LedgerCovDocumentType</c> will become an extensible enumeration.
    /// </remarks>
    public static str documentTypeENUSOnlySQL()
    {
        Map documentTypeTranslation = LedgerCovLiquidityEntity::buildDocumentTypeENUSOnlyLiteralMap();

        return SysComputedColumn::switch(
            SysComputedColumn::returnField(
                tableStr(LedgerCovLiquidityEntity),
                dataEntityDataSourceStr(LedgerCovLiquidityEntity, LedgerCovDocument),
                fieldStr(LedgerCovDocument, Type)),
            documentTypeTranslation,
            SysComputedColumn::returnLiteral('')
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDocumentTypeENUSOnlyLiteralMap</Name>
				<Source><![CDATA[
    protected static Map buildDocumentTypeENUSOnlyLiteralMap()
    {
        Map documentTypeTranslation = SysComputedColumn::comparisionExpressionMap();
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::None),
                SysComputedColumn::returnLiteral(''));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::BudgetTransactionLine),
                SysComputedColumn::returnLiteral('Budget register entry'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::CustInvoiceTable),
                SysComputedColumn::returnLiteral('Free text invoice'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::CustTransOpen),
                SysComputedColumn::returnLiteral('Customer open transaction'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::ForecastPurch),
                SysComputedColumn::returnLiteral('Supply forecast'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::ForecastSales),
                SysComputedColumn::returnLiteral('Demand forecast'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::GeneralJournalAccountEntry),
                SysComputedColumn::returnLiteral('General journal account entry'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::PurchTable),
                SysComputedColumn::returnLiteral('Purchase order'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::SalesTable),
                SysComputedColumn::returnLiteral('Sales order'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::VendTransOpen),
                SysComputedColumn::returnLiteral('Vendor open transaction'));
        documentTypeTranslation.insert(
            SysComputedColumn::returnLiteral(LedgerCovDocumentType::ExternalSourceEntry),
                SysComputedColumn::returnLiteral('External source entry'));
        documentTypeTranslation.insert(
                SysComputedColumn::returnLiteral(LedgerCovDocumentType::TaxTrans),
                SysComputedColumn::returnLiteral('Tax open transactions'));
        documentTypeTranslation.insert(
            SysComputedColumn::returnLiteral(LedgerCovDocumentType::Project),
                SysComputedColumn::returnLiteral('Project forecast'));

        return documentTypeTranslation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
	<Label>@CashManagement:CashBankMgmt_CashFlow_MessageDeveloper_LedgerCovLiquidityEntity</Label>
	<Tags>Cov</Tags>
	<EntityCategory>Transaction</EntityCategory>
	<IsReadOnly>Yes</IsReadOnly>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccountId</Name>
			<DataField>MainAccountId</DataField>
			<DataSource>MainAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccount</Name>
			<DataField>BankAccount</DataField>
			<DataSource>BankAccountMainAccountView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransTableId</Name>
			<DataField>TransTableId</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransRecId</Name>
			<DataField>TransRecId</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<DataField>AmountCur</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountMST</Name>
			<DataField>AmountMST</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EnterpriseCurrencyAmount</Name>
			<DataField>EnterpriseCurrencyAmount</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccountCurrencyAmount</Name>
			<DataField>BankAccountCurrencyAmount</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>InflowOutflow</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityInflowOutflow</Label>
			<ComputedFieldMethod>inflowOutflowSQL</ComputedFieldMethod>
			<EnumType>LedgerCovLiquidityDirection</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrency</Name>
			<DataField>AccountingCurrency</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentAccountName</Name>
			<DataField>AccountName</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentAccountNumber</Name>
			<DataField>AccountNumber</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentDueDate</Name>
			<DataField>DueDate</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<DataField>Number</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentTransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentType</Name>
			<DataField>Type</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DocumentTypeENUSOnly</Name>
			<Label>@SYS301347</Label>
			<ComputedFieldMethod>documentTypeENUSOnlySQL</ComputedFieldMethod>
			<StringSize>50</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentVoucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>LedgerCovDocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>EnterpriseCurrencyInflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityEnterpriseCurrencyInflowAmount</Label>
			<ComputedFieldMethod>enterpriseCurrencyInflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>EnterpriseCurrencyOutflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityEnterpriseCurrencyOutflowAmount</Label>
			<ComputedFieldMethod>enterpriseCurrencyOutflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>EnterpriseCurrencyBalanceAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityEnterpriseCurrencyBalanceAmount</Label>
			<ComputedFieldMethod>enterpriseCurrencyBalanceSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TransactionCurrencyInflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityTransactionCurrencyInflowAmount</Label>
			<ComputedFieldMethod>transactionCurrencyInflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TransactionCurrencyOutflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityTransactionCurrencyOutflowAmount</Label>
			<ComputedFieldMethod>transactionCurrencyOutflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TransactionCurrencyBalanceAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityTransactionCurrencyBalanceAmount</Label>
			<ComputedFieldMethod>transactionCurrencyBalanceSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyInflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityAccountingCurrencyInflowAmount</Label>
			<ComputedFieldMethod>accountingCurrencyInflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyOutflowAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityAccountingCurrencyOutflowAmount</Label>
			<ComputedFieldMethod>accountingCurrencyOutflowSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>AccountingCurrencyBalanceAmount</Name>
			<Label>@CashManagement:CashBankMgmt_CashFlow_EntityField_LedgerCovLiquidityEntityAccountingCurrencyBalanceAmount</Label>
			<ComputedFieldMethod>accountingCurrencyBalanceSQL</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsBeginningBalance</Name>
			<DataField>IsBeginningBalance</DataField>
			<DataSource>LedgerCov</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DataAreaId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransTableId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransRecId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RecId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerCov</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerCov</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerLiquidity</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerLiquidity</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>MainAccount</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>MainAccount</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>BankAccountMainAccountView</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>BankAccountMainAccountView</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>MainAccount</JoinDataSource>
												<RelatedField>MainAccountRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation2</Name>
												<Field>DataAreaId</Field>
												<JoinDataSource>LedgerLiquidity</JoinDataSource>
												<RelatedField>BankAccountCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>MainAccount</Field>
										<JoinDataSource>LedgerLiquidity</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>MainAccount</Field>
								<JoinDataSource>LedgerCov</JoinDataSource>
								<RelatedField>MainAccount</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerCovDocument</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerCovDocument</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TransTableId</Field>
								<JoinDataSource>LedgerCov</JoinDataSource>
								<RelatedField>TransTableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>TransRecId</Field>
								<JoinDataSource>LedgerCov</JoinDataSource>
								<RelatedField>TransRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>