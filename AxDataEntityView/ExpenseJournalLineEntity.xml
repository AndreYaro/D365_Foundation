<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExpenseJournalLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ExpenseJournalLineEntity extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "entityCtx">The context of the entity.</param>
    /// <param name = "dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        this.DelayTaxCalculation = NoYes::Yes;

        if (this.AccountType == LedgerJournalACType::Project ||
            this.OffsetAccountType == LedgerJournalACType::Project)
        {
            this.setProjectFields();            
        }        

        switch (dataSourceCtx.name())
        {
            case dataentitydatasourcestr(ExpenseJournalLineEntity, LedgerJournalTable):
                dataSourceCtx.setbuffer(LedgerJournalTable::find(this.JournalBatchNumber));
                dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                dataSourceCtx.setDataSaved(true);
                break;

            case dataEntityDataSourceStr(ExpenseJournalLineEntity, LedgerJournalTrans_Project):
                if (!(this.AccountType == LedgerJournalACType::Project ||
                      this.OffsetAccountType == LedgerJournalACType::Project))
                {
                    dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    dataSourceCtx.setDataSaved(true);
                }

                break;
        }        

        super(entityCtx, dataSourceCtx);

        if (dataSourceCtx.name() == dataentitydatasourcestr(ExpenseJournalLineEntity,LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerTrans = dataSourceCtx.getBuffer();

            if (ledgerTrans.AccountType == LedgerJournalACType::Project)
            {
                ExpenseJournalLineEntity entity = entityCtx.getEntityRecord();

                if (entity.isFieldModified(fieldNum(ExpenseJournalLineEntity, ProjId))
                    && !entity.isFieldSet(fieldNum(ExpenseJournalLineEntity, Dimension)))
                {
                    // if project changes and user did not set a dimension manually, then it must default
                    ledgerTrans.DefaultDimension = this.determineDefaultDimension(ledgerTrans);
                }
                else if (entity.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjId))
                    && entity.isFieldSet(fieldNum(ExpenseJournalLineEntity, Dimension)))
                {
                    // merge with project default dimension
                    ledgerTrans.DefaultDimension = ledgerTrans.mergeDimension(ProjTable::find(ledgerTrans.parmAccount()).DefaultDimension);
                }

                if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    // merge with resource default dimension
                    this.mergeResourceDimensionDefault(ledgerTrans);
                }
            }

            if (!this.OffsetAccount)
            {
                this.initOffsetFromLedgerJournalTable(ledgerTrans);
            }

            if (!ledgerTrans.Voucher)
            {
                ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, Voucher), FieldState::NotSet);
            }
            else
            {
                NewVoucher newVoucherType = LedgerJournalTable::find(this.JournalBatchNumber).ledgerJournalName().NewVoucher;

                if (newVoucherType == NewVoucher::Manually)
                {
                    ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, Voucher), FieldState::Defaulted);
                }
            }

            if (!ledgerTrans.TransDate)
            {
                ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, TransDate), FieldState::NotSet);
            }

            if (!ledgerTrans.Company)
            {
                ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, Company), FieldState::NotSet);
            }

            if (!ledgerTrans.OffsetCompany)
            {
                ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, OffsetCompany), FieldState::NotSet);
            }

            if (ledgerTrans.TransactionType == LedgerTransType::None)
            {
                ledgerTrans.fieldState(fieldNum(LedgerJournalTrans, TransactionType), FieldState::NotSet);
            }

            if (TaxParameters::checkTaxParameters_IN())
            {
                LedgerJournalTrans_IN_Extension::setAssessableValue_IN(ledgerTrans);
            }
        }

        if (dataSourceCtx.name() == dataentitydatasourcestr(ExpenseJournalLineEntity,ResourceView))
        {
            // If resource related fields are blank make sure they are marked as not set. Otherwise the framework will look
            // for a related record in ResourceView with empty resource/company and fail when it doesn't find such record.
            ResourceView resource = dataSourceCtx.getBuffer();
            if (!resource.ResourceId)
            {
                resource.fieldState(fieldnum(ResourceView, resourceid), FieldState::NotSet);
            }
            if (!resource.ResourceCompanyId)
            {
                resource.fieldState(fieldnum(ResourceView, ResourceCompanyId), FieldState::NotSet);
            }
        }

        if (dataSourceCtx.name() == dataEntityDataSourceStr(ExpenseJournalLineEntity, LedgerJournalTrans_Project))
        {
            boolean isProjectCostPriceSet = this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjectCostPrice));
            boolean isProjectCostQuantitySet = this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjectCostQuantity));

            LedgerJournalTrans_Project projJournalTrans = dataSourceCtx.getBuffer();

            if (! (isProjectCostPriceSet || isProjectCostQuantitySet))
            {
                // user did not change projCostPrice or projQuantity, so set them properly
                LedgerJournalTrans journalTrans = projJournalTrans.ledgerJournalTrans();

                journalTrans.AmountCurCredit = this.CreditAmount;
                journalTrans.AmountCurDebit = this.DebitAmount;

                LedgerJournalEngine journalEngine = LedgerJournalEngine::construct(journalTrans.ledgerJournalTable().JournalType);

                journalEngine.setProjAmount(journalTrans, projJournalTrans);
            }

            projJournalTrans.updateAssessableValue_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseJournalHeaderEntity</Name>
				<Source><![CDATA[
    private ExpenseJournalHeaderEntity expenseJournalHeaderEntity()
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(this.JournalBatchNumber);
        LedgerJournalName ledgerJournalName = ledgerJournalName::find(ledgerJournalTable.JournalNum);

        if (!(ledgerJournalName.JournalType == LedgerJournalType::Cost ||
             ledgerJournalName.JournalType == LedgerJournalType::Daily))
        {
            throw error(strFmt("@Proj:Proj_ErrorMessage_InvalidJournalType", ledgerJournalTable.JournalNum, LedgerJournalType::Cost, LedgerJournalType::Daily));
        }

        ExpenseJournalHeaderEntity header;

        select firstonly header
            where header.JournalBatchNumber == this.JournalBatchNumber;

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = ExpenseJournalHeaderEntity::validateExpenseJournal(this.expenseJournalHeaderEntity());

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = ExpenseJournalHeaderEntity::validateExpenseJournal(this.expenseJournalHeaderEntity());

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(ExpenseJournalLineEntity, AccountDisplayValue), true);
        this.skipDataSourceValidateField(fieldNum(ExpenseJournalLineEntity, OffsetAccountDisplayValue), true);
        this.skipDataSourceValidateField(fieldNum(ExpenseJournalLineEntity, ProjId), true);
        this.skipDataSourceValidateField(fieldNum(ExpenseJournalLineEntity, AccountType), true);
        this.skipDataSourceValidateField(fieldNum(ExpenseJournalLineEntity, Voucher), true);   
        
        if (this.AccountType == LedgerJournalACType::Project ||
            this.OffsetAccountType == LedgerJournalACType::Project)
        {
            this.setAmountsAndQuantity();
        }
        else
        {
            if (this.DebitAmount > 0)
            {
                this.CreditAmount = 0;
            }
            else if (this.CreditAmount > 0)
            {
                this.DebitAmount = 0;
            }
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        if (_dataSourceCtx.name() == dataentitydatasourcestr(ExpenseJournalLineEntity,ResourceView))
        {
            ResourceView resource;

            select firstonly resource
            where resource.ResourceCompanyId == this.ResourceCompanyId &&
                  resource.ResourceId == this.ResourceId;
            ret = resource;
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountsAndQuantity</Name>
				<Source><![CDATA[
    private void setAmountsAndQuantity()
    {
        // Debit has higher priority
        if (this.DebitAmount != 0)
        {
            this.CreditAmount = 0;
        }

        if (!this.ProjectCostQuantity && this.Quantity)
        {
            this.ProjectCostQuantity = this.Quantity;
        }
        else if (!this.ProjectCostQuantity && !this.Quantity)
        {
            this.ProjectCostQuantity = LedgerJournalEngine::getGLQtySign(this.AccountType, this.OffsetAccountType, this.CreditAmount, this.DebitAmount);
        }

        if (!this.ProjectCostPrice)
        {
            this.ProjectCostPrice = abs(this.DebitAmount != 0 ? this.DebitAmount : this.CreditAmount);
        }
        
        boolean isProjectCostPriceSet = this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjectCostPrice));
        boolean isProjectCostQuantitySet = this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjectCostQuantity));
         
        if (isProjectCostPriceSet || isProjectCostQuantitySet)
        {
            if (!this.ProjectCostPrice)
            {
                ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                    this.ProjId,
                    this.Resource,
                    this.ProjectCategory,
                    0,
                    this.CurrencyCode,
                    this.ProjectSalesCurrencyCode,
                    this.ProjectDate,
                    '',
                    '',
                    '',
                    this.ExchangeRate);

                this.ProjectCostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
            }

            // when cost price or quantity is set, we always calculate debit/credit from cost price * qty.
            AmountCurDebCred debitCredit = CurrencyExchangeHelper::amount(this.ProjectCostQuantity * this.ProjectCostPrice, this.CurrencyCode);;

            // For the project expense journal, we always calculate debit/credit from cost price * qty.
            if (LedgerJournalTable::find(this.JournalBatchNumber).JournalType == LedgerJournalType::Cost)
            {
                if (debitCredit > 0)
                {
                    this.DebitAmount = debitCredit;
                    this.CreditAmount = 0;
                }
                else
                {
                    this.DebitAmount = 0;
                    this.CreditAmount = abs(debitCredit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectFields</Name>
				<Source><![CDATA[
    private void setProjectFields()
    {
        if (this.AccountType == LedgerJournalACType::Project)
        {
            if (this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjId)))
            {
                this.Account = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.ProjId, LedgerJournalACType::Project);
            }
            else if (this.isFieldSet(fieldNum(ExpenseJournalLineEntity, AccountDisplayValue)))
            {
                this.ProjId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.Account);
            }
        }
        else if (this.OffsetAccountType == LedgerJournalACType::Project)
        {
            if (this.isFieldSet(fieldNum(ExpenseJournalLineEntity, ProjId)))
            {
                this.OffsetAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.ProjId, LedgerJournalACType::Project);
            }
            else if (this.isFieldSet(fieldNum(ExpenseJournalLineEntity, OffsetAccountDisplayValue)))
            {
                this.ProjId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(this.OffsetAccount);
            }
        }

        if (!this.ProjId)
        {
            throw error ("@Proj:ProjIdRequiredForExpJournalEntity");
        }

        ProjTable projTable = ProjTable::find(this.ProjId);

        if (!this.ProjectCategory)
        {
            throw error ("@Proj:CategoryjIdRequiredForExpJournalEntity");
        }

        if (!this.ProjectDate)
        {
            this.ProjectDate = this.VoucherDate;
        }

        if (!this.ProjectLineProperty)
        {
            this.ProjectLineProperty = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjectCategory);
        }

        this.ProjectPriceGroupID        = projTable.ProjPriceGroup;

        if (!this.ProjectTaxGroupSales)
        {
            this.ProjectTaxGroupSales       = projTable.TaxGroupId;
        }

        if (!this.ProjectTaxItemGroupSales)
        {
            this.ProjectTaxItemGroupSales   = ProjCategory::find(this.ProjectCategory).TaxItemGroupId;
        }

        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(projTable.ProjInvoiceProjId);

        if (projInvoiceTable && Currency::exist(this.ProjectSalesCurrencyCode) && projInvoiceTable.ProjLockSalesCurrency &&
            this.ProjectSalesCurrencyCode && this.ProjectSalesCurrencyCode != projInvoiceTable.CurrencyId)
        {
            throw error(strFmt('@Proj:SalesCurrencyInJournalAndContractNotEqual', projInvoiceTable.CurrencyId));
        }

        if (!this.ProjectSalesCurrencyCode)
        {
            this.ProjectSalesCurrencyCode    = projInvoiceTable.CurrencyId;

            if (!this.ProjectSalesCurrencyCode)
            {
                this.ProjectSalesCurrencyCode = this.CurrencyCode;
            }
        }

        if (!this.ProjectCostPrice)
        {
            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
                this.ProjId,
                this.Resource,
                this.ProjectCategory,
                0,
                this.CurrencyCode,
                this.ProjectSalesCurrencyCode,
                this.ProjectDate,
                '',
                '',
                '',
                this.ExchangeRate);
            this.ProjectCostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
        }

        if (!this.ProjectSalesPrice)
        {
            boolean priceFound;

            ProjPriceParameters priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
				this.ProjId,
                this.Resource,
                this.ProjectCategory,
                this.ProjectCostPrice,
                this.CurrencyCode,
                this.ProjectSalesCurrencyCode,
                this.ProjectDate,
				'',
				'',
				'',
                this.ExchangeRate);
            [this.ProjectSalesPrice, priceFound] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = TaxJournalLineEntityHelper::setLedgerJournalTransTaxExtension(_dataSourceCtx);

        ret = super(_entityCtx, _dataSourceCtx);

        // Tax is calculated for project related ledger journal so we need to recal it after insert to make sure we clear the TaxCache
        // that can result in incorrect tax calculation when the ledger is posted
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ExpenseJournalLineEntity, LedgerJournalTrans) ||
            _dataSourceCtx.name() == dataEntityDataSourceStr(ExpenseJournalLineEntity, LedgerJournalTrans_Project))
        {
            LedgerJournalTrans journalTrans;

            if (_dataSourceCtx.name() == dataEntityDataSourceStr(ExpenseJournalLineEntity, LedgerJournalTrans_Project))
            {
                LedgerJournalTrans_Project projJournalTrans = _dataSourceCtx.getBuffer();
                journalTrans = projJournalTrans.ledgerJournalTrans();
            }
            else
            {
                journalTrans = _dataSourceCtx.getBuffer();
            }

            LedgerJournalTable journalTable = journalTrans.ledgerJournalTable();

            if ((journalTrans.TaxGroup && journalTrans.TaxItemGroup) || journalTrans.TaxCode)
            {
                if (this.ActualSalesTaxAmount > 0)
                {
                    LedgerJournalEngine journalEngine = LedgerJournalEngine::construct(journalTable.JournalType);

                    journalEngine.correctTaxAmount(journalTrans, this.ActualSalesTaxAmount, true, false);
                }
                else if (TaxUncommitted::existByDocumentAndInvoice(journalTable.TableId, journalTable.RecId, journalTrans.Voucher, journalTrans.Invoice))
                {
                    TaxUncommitted::deleteForInvoice(journalTable.TableId, journalTable.RecId, journalTrans.Voucher, journalTrans.Invoice);
                }
            }
        }

        // When <c>LedgerJournalTransTaxExtension</c> is not inserted successfully and it links well with <c>LedgerJournalTrans</c>,
        // it should try to insert/update the table <c>LedgerJournalTransTaxExtension</c> with set value.
        if (!ret && ledgerJournalTransTaxExtension.LedgerJournalTrans)
        {
            ttsbegin;
            LedgerJournalTrans ledgerJournalTrans = ledgerJournalTransTaxExtension.getLedgerJournalTrans();
            ledgerJournalTransTaxExtension.save(ledgerJournalTrans, true);
            ttscommit;

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOffsetFromLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilizes dimension from <c>LedgerJournalTrans</c> table buffer.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    protected void initOffsetFromLedgerJournalTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTrans.ledgerJournalTable();

        DimensionDynamicAccount offsetLedgerDimension;
        if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            CompanyId offsetCompany = _ledgerJournalTrans.getOffsetCompany();
            if (ledgerJournalTable.OffsetLedgerDimension)
            {
                this.initDefaultDimension(_ledgerJournalTrans);

                offsetLedgerDimension = _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(ledgerJournalTable.OffsetLedgerDimension, offsetCompany);
            }
            else
            {
                DimensionDynamicDefaultAccount defaultoffsetLedgerDimension = ProjDefaultOffsetSetup::findDefaultOffsetAccount(this.ProjId, this.ProjectCategory, this.Resource).LedgerDimension;
                
                if (defaultoffsetLedgerDimension)
                {
                    this.OffsetAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(offsetLedgerDimension).RecId;
                    
                    offsetLedgerDimension = _ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(defaultoffsetLedgerDimension, offsetCompany);
                }
            }
        }
        else
        {
            offsetLedgerDimension = ledgerJournalTable.parmOffsetLedgerDimension();
        }

        _ledgerJournalTrans.setOffsetLedgerDimension(ledgerJournalTable,
                                                    ledgerJournalTable.OffsetAccountType,
                                                    offsetLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimension</Name>
				<Source><![CDATA[
    private void initDefaultDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.DefaultDimension = this.determineDefaultDimension(_ledgerJournalTrans);
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.mergeResourceDimensionDefault(_ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDimension</Name>
				<Source><![CDATA[
    private DimensionDefault determineDefaultDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            return 0;
        }

        changecompany(_ledgerJournalTrans.Company)
        {
            DimensionDefault journalHeaderDefaultDimension;
            // Get dimensions from journal header
            LedgerJournalTable ledgerJournalTableLocal = _ledgerJournalTrans.ledgerJournalTable();
            if (_ledgerJournalTrans.Company == ledgerJournalTableLocal.company())
            {
                journalHeaderDefaultDimension = ledgerJournalTableLocal.DefaultDimension;
            }
            else
            {
                LedgerInterCompany ledgerInterCompany = LedgerInterCompany::findCompanyPair(_ledgerJournalTrans.Company, ledgerJournalTableLocal.company());
                journalHeaderDefaultDimension = LedgerJournalName::find(ledgerInterCompany.JournalName).DefaultDimension;
            }

            DimensionDefault accountDefaultDimension;
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && _ledgerJournalTrans.AccountAgreementId_RU)
            {
                accountDefaultDimension = _ledgerJournalTrans.DefaultDimension;
            }
            else
            {
                // </GEERU>
                // Get dimensions based on account number
                if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
                {
                    accountDefaultDimension = ProjTable::find(_ledgerJournalTrans.parmAccount()).DefaultDimension;
                }
                // <GEERU>
            }
            // </GEERU>

            DimensionDefault defaultDimension;
            // Merge default dimensions
            if (journalHeaderDefaultDimension && accountDefaultDimension)
            {
                defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(journalHeaderDefaultDimension, accountDefaultDimension);
            }
            else
            {
                defaultDimension = (journalHeaderDefaultDimension ? journalHeaderDefaultDimension : accountDefaultDimension);
            }

            return defaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeResourceDimensionDefault</Name>
				<Source><![CDATA[
    private void mergeResourceDimensionDefault(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans_Project ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(_ledgerJournalTrans.RecId);

        if (ledgerJournalTrans_Project && ledgerJournalTrans_Project.Resource)
        {
            _ledgerJournalTrans.DefaultDimension
                = _ledgerJournalTrans.mergeDimension(ResourceFacade::getDefaultDimension(ledgerJournalTrans_Project.Resource));
        }
        else if (this.ResourceId && this.ResourceCompanyId)
        {
            ResourceRecId resource = ResourceFacade::findByResourceId(this.ResourceId, this.ResourceCompanyId);

            if (resource)
            {
                _ledgerJournalTrans.DefaultDimension = _ledgerJournalTrans.mergeDimension(ResourceFacade::getDefaultDimension(resource));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        LedgerJournalTrans journalTrans;
        TaxAmountCur actualTax, calculatedTax;

        select firstonly journalTrans where journalTrans.JournalNum == this.JournalBatchNumber &&
                                            journalTrans.LineNum == this.LineNumber;

        if (journalTrans)
        {
            [actualTax, calculatedTax] = journalTrans.getActualAndCalculatedTaxForSingleLine(false);
        }

        if (calculatedTax < 0 && actualTax > 0)
        {
            actualTax = -actualTax;
        }
        else
        {
            actualTax = abs(actualTax);
        }

        this.ActualSalesTaxAmount = actualTax;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom account type lookup serialized string for the Account type field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of account types.</returns>
    [
        SysODataActionAttribute("ExpenseJournalLineEntityAccountTypeFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("AccountType"),
		Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str accountTypeCustomLookup(Array _fields)
    {
        return ProjEntityCustomLookupHelper::getAccountTypeLookUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountTypeCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom offset account type lookup serialized string for the Account type field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of account types.</returns>
    [
        SysODataActionAttribute("ExpenseJournalLineEntityOffsetAccountTypeFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("OffsetAccountType"),
		Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str offsetAccountTypeCustomLookup(Array _fields)
    {
        return ProjEntityCustomLookupHelper::getOffsetAccountTypeLookUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectCategoryCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of Project categories of type Expense to be used in Excel lookup.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of project categories.</returns>
    [
        SysODataActionAttribute("ExpenseJournalLineEntityProjectCategoryFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("ProjectCategory"),
		Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str projectCategoryCustomLookup(Array _fields)
    {
        return ProjEntityCustomLookupHelper::getProjCategoryLookUp(_fields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumberCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a custom lookup serialized string for the activity numbers field for the selected project.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A serialized string with the list of activity numbers for the lookup.
    /// </returns>
    [   SysODataActionAttribute("ExpenseJournalLineEntityActivityNumberFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("ActivityNumber"),
		Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str activityNumberCustomLookup(Array _fields)
    {
        return ProjEntityCustomLookupHelper::getActivityNumberLookup(_fields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountDisplayValueCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a custom lookup serialized string for the project field.
    /// </summary>
    /// <param name="_fields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A serialized string with the list of projects for the lookup.
    /// </returns>
    [   SysODataActionAttribute("ExpenseJournalLineEntityAccountDisplayValueFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("AccountDisplayValue"),
		Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str accountDisplayValueCustomLookup(Array _fields)
    {
        return ProjEntityCustomLookupHelper::getProjectIDLookup(_fields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@Proj:ProjectExpenseJournalLineEntity</Label>
	<Tags>Expense journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ExpenseJournalLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ExpenseJournalLines</PublicCollectionName>
	<PublicEntityName>ExpenseJournalLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucherType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountType</Name>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Account</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>AccountCompany</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>AccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountType</Name>
			<DataField>OffsetAccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetLedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>OffsetCompany</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>OffsetAccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetTransactionText</Name>
			<DataField>OffsetTxt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity</Name>
			<DataField>Qty</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VoucherDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Text</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS24500</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>AccountDAVC</DataSource>
			<DimensionLegalEntityContextField>AccountCompany</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS11162</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetAccountDAVC</DataSource>
			<DimensionLegalEntityContextField>OffsetCompany</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Resource</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Resource</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DelayTaxCalculation</Name>
			<DataField>DelayTaxCalculation</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectCostQuantity</Name>
			<Label>@SYS84544</Label>
			<DataField>Qty</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectCategory</Name>
			<Mandatory>No</Mandatory>
			<DataField>CategoryId</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectCostPrice</Name>
			<DataField>CostPrice</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectLineProperty</Name>
			<DataField>LinePropertyId</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@PSA2040</Label>
			<Mandatory>No</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ResourceId</DataField>
			<DataSource>ResourceView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCompanyId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ResourceCompanyId</DataField>
			<DataSource>ResourceView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectSalesCurrencyCode</Name>
			<DataField>SalesCurrencyId</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Dimension</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionSetEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectDate</Name>
			<DataField>ProjTransDate</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectSalesPrice</Name>
			<DataField>SalesPrice</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Invoice</Name>
			<DataField>Invoice</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DueDate</Name>
			<DataField>Due</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Payment</Name>
			<DataField>Payment</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentId</Name>
			<DataField>PaymId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxExcemptNumber</Name>
			<DataField>VATNumJournal</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroup</Name>
			<Label>@SYS21932</Label>
			<DataField>TaxItemGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscount</Name>
			<DataField>CashDiscCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountAmount</Name>
			<DataField>CashDiscAmount</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountDate</Name>
			<DataField>DateCashDisc</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseOrder</Name>
			<DataField>PurchIdRange</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Document</Name>
			<DataField>DocumentNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentDate</Name>
			<DataField>DocumentDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentMethod</Name>
			<DataField>PaymMode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentSpecification</Name>
			<DataField>PaymSpec</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Approver</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Approver</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ApprovedBy</Name>
			<Label>@SYS3492</Label>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingProfile</Name>
			<DataField>PostingProfile</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAmount</Name>
			<DataField>AmountCurCredit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAmount</Name>
			<DataField>AmountCurDebit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Approved</Name>
			<DataField>Approved</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherTypeId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerVoucherType_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>Id</DataField>
			<DataSource>LedgerVoucherType_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucher</Name>
			<DataField>Voucher_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerJournalTrans_Project</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RefRecId</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectTaxGroupSales</Name>
			<DataField>TaxGroupSales</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectTaxItemGroupSales</Name>
			<DataField>TaxItemGroupSales</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectPriceGroupID</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProjPriceGroupID</DataField>
			<DataSource>LedgerJournalTrans_Project</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountCompany</Name>
			<DataField>Company</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetCompany</Name>
			<DataField>OffsetCompany</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsReversingEntry</Name>
			<DataField>ReverseEntry</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReversingDate</Name>
			<DataField>ReverseDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<DataField>ExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SecondaryExchangeRate</Name>
			<DataField>ExchRateSecond</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ActualSalesTaxAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS128972</Label>
			<ExtendedDataType>TaxAmountJournal</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionType</Name>
			<DataField>TransactionType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetDefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Dimension</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetDimensionSetEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OverrideSalesTax</Name>
			<DataField>OverrideSalesTax</DataField>
			<DataSource>LedgerJournalTransTaxExtension</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>AccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProjExpenseJournalLineLedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjExpenseJournalLineLedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>DimensionCombinationEntity_RecordId</Name>
					<Field>Account</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>DimensionCombinationKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>ExpenseJournalHeaderEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ExpenseJournalHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>JournalBatchNumber</Field>
					<RelatedField>JournalBatchNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>LegalEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>OMLegalEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>DataAreaId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerVoucherTypeEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerVoucherTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ChineseVoucherType</Field>
					<RelatedField>VoucherType</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProjectExpenseJournalLineCurrencies</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjectExpenseJournalLineCurrency</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>LineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ProjProjectLinePropertyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProjExpenseJournalLineProperties</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjExpenseJournalLineProperty</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ProjectLineProperty</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ExpenseJournalLineDefaultDimension</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExpenseJournalLineDefaultDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ExpenseJournalLineOffsetDefaultDimension</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExpenseJournalLineOffsetDefaultDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetAccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProjExpenseJournalLineOffsetLedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjExpenseJournalLineOffsetLedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>AccountDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>AccountDAVC</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OffsetAccountDAVC</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>OffsetAccountDAVC</Name>
								<Field>OffsetLedgerDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans_Project</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTrans_Project</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ResourceView</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>ResourceView</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Resource</Field>
										<JoinDataSource>LedgerJournalTrans_Project</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RefRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionSetEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Approver</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LedgerJournalTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>JournalTypeCost</Name>
								<Field>JournalType</Field>
								<Status>Hidden</Status>
								<Value>Cost</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>JournalTypeDaily</Name>
								<Field>JournalType</Field>
								<Status>Hidden</Status>
								<Value>Daily</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>JournalNum</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>JournalNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerVoucherType_CN</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LedgerVoucherType_CN</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>LedgerVoucherType_CN</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<JoinRelationName>LedgerVoucherType_CN</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OffsetDimensionSetEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>OffsetDefaultDimension</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTransTaxExtension</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTransTaxExtension</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>LedgerJournalTrans</JoinDataSource>
								<RelatedField>LedgerJournalTrans</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>