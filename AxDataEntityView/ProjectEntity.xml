<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjectEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetProjectTypes</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("GetProjectTypes", true),
     SysODataCollectionAttribute("return", Types::String)]
    public List GetProjectTypes()
    {
        DictEnum enumDict = new DictEnum(enumName2Id(enumstr("ProjType")));
        List enumLabels = new List(Types::String);
        int i ;
        str enumValue;

        for (i = 0; i < enumDict.values(); i++)
        {
            enumValue = enumDict.index2Label(i);
            if (enumValue != "")
            {
                enumLabels.addEnd(enumValue);
            }
        }
        return enumLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjectEntity,ProjTable))
        {
            ProjTable projTable = _dataSourceCtx.getBuffer();

            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                if (!ProjTable::isNumberSeqManual() && !this.isFieldSet(fieldNum(ProjectEntity,ProjectId)))
                {
                    NumberSequenceReference     projectNumberSequenceReference = ProjParameters::numRefProjId();
                    projTable.ProjId   =  NumberSeq::newGetNum(projectNumberSequenceReference, false, true).num();                
                }
            }
            
            ProjSorting projSorting;

            if (this.isFieldSet(fieldNum(ProjectEntity, SortingId1)))
            {                
                if (!this.SortingId1)
                {
                    projTable.sortingId[1] = "";
                }
                else
                {
                    select firstonly RecId from projSorting where projSorting.sortingId == this.SortingId1 && projSorting.SortCode == ProjSortValue::Sorting1;

                    if (projSorting.RecId != 0)
                    {
                        projTable.sortingId[1] = this.SortingId1;
                    }
                }
            }

            if (this.isFieldSet(fieldNum(ProjectEntity, SortingId2)))
            {
                projSorting.clear();

                if (!this.SortingId2)
                {
                    projTable.sortingId[2] = "";
                }
                else
                {
                    select firstonly RecId from projSorting where projSorting.sortingId == this.SortingId2 && projSorting.SortCode == ProjSortValue::Sorting2;

                    if (projSorting.RecId != 0)
                    {
                        projTable.sortingId[2] = this.SortingId2;
                    }
                }
            }

            if (this.isFieldSet(fieldNum(ProjectEntity, SortingId3)))
            {
                projSorting.clear();

                if (!this.SortingId3)
                {
                    projTable.sortingId[3] = "";
                }
                else
                {
                    select firstonly RecId from projSorting where projSorting.sortingId == this.SortingId3 && projSorting.SortCode == ProjSortValue::Sorting3;

                    if (projSorting.RecId != 0)
                    {
                        projTable.sortingId[3] = this.SortingId3;
                    }
                }
            }
        }

        //calling super will then map the field value set on the data entity to the underlying data source.
        //in thise case, since we're modifying the entity field, we need to call super so that it can be propagated to the data source buffer.
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areRequiredFieldsSet</Name>
				<Source><![CDATA[
    private boolean areRequiredFieldsSet()
    {
        boolean ret = true;

        if (this.ProjectType == ProjType::FixedPrice || this.ProjectType == ProjType::TimeMaterial)
        {
            if (!this.ProjectContractID)
            {
                return checkFailed("@SYS37918");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWIPTable</Name>
				<Source><![CDATA[
    private boolean validateWIPTable()
    {
        ProjGroup projGroup;
        ProjWIPTable projWIPTable;

        if (this.ProjectType == ProjType::FixedPrice)
        {
            projGroup = ProjGroup::find(this.ProjectGroup);

            if (projGroup.ControlId == '' || projGroup.PeriodId == '')
            {
                return checkFailed("@GLS480006");
            }

            projWIPTable.ProjId         = this.ProjectId;
            projWIPTable.ControlId      = projGroup.ControlId;
            projWIPTable.PeriodId       = projGroup.PeriodId;
            projWIPTable.Description    = this.ProjectName;

            if (projWIPTable.validateWrite(false) == false)
            {
                return false; //validatewrite add error message to the log
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///  validates write operation on project entity
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean ret;
        ProjWIPTable    projWIPTable;
        ProjGroup projGroup;

        if (!this.areRequiredFieldsSet() && !this.validateWIPTable() )
        {
            return false;
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        boolean ret;
        ProjGroup projGroup;
        ProjWIPTable projWIPTable;
        ProjTable projTable;
        ProjInvoiceTable projInvoiceTable;
        #ISOCountryRegionCodes

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjectEntity, ProjTable))
        {
            projTable = _dataSourceCtx.getBuffer() as ProjTable;
            if (projTable.ParentId && !projTable.validateProjId(projTable.ProjId))
            {
                throw error(strFmt("@SYS62416", projTable.ParentId, ProjTable::find(projTable.ParentId).Format));
            }
            else
            {
                if (strLen(strLTrim(strRTrim(projTable.ProjId))) == 0)
                {
                    throw error("@SYS62427");
                }
            }

            if (this.isFieldSet(fieldNum(ProjectEntity, LocationID)))
            {
                // Creating a <c>LogisticsLocation</c> and <c>LogisticsPostalAddress</c> records for a project.
                LogisticsLocation logisticsLocation = LogisticsLocation::findByLocationId(this.LocationID);

                if (logisticsLocation)
                {
                    LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(logisticsLocation.RecId);

                    if (location && location.parmLocationRecId())
                    {
                        // Create a location record
                        logisticsLocation = LogisticsLocation::create(location.parmLocationDescription(), true);

                        LogisticsPostalAddress  logisticsPostalAddress;
                        // Copy Address to location record
                        logisticsPostalAddress.data(location.getPostalAddress());
                        logisticsPostalAddress.Location = logisticsLocation.RecId;
                        logisticsPostalAddress.insert();
                    }

                    this.Location = logisticsLocation.RecId;
                    projTable.DeliveryLocation = logisticsLocation.RecId;
                }
            }

            // Insert WIP project prior to the ProjTable datasource
            // or foreign key validation will fail when EstimateProjectId is set.
            this.insertEstimateProject();
        }

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEstimateProject</Name>
				<Source><![CDATA[
    private ProjWIPTable insertEstimateProject()
    {
        ProjGroup ProjGroup;
        ProjWIPTable projWIPTable;

        if ((this.ProjectType == ProjType::Investment || this.ProjectType == ProjType::FixedPrice)
            && (this.EstimateProjectID == '' || this.EstimateProjectID == this.ProjectID))
        {
            projGroup = ProjGroup::find(this.ProjectGroup);

            if (projGroup.CompletePrincip != ProjCompletePrincip::NoWIP)
            {
                ttsbegin;

                projWIPTable.ProjId = this.ProjectID;
                projWIPTable.Description = this.ProjectName;
                projWIPTable.ControlId = projGroup.ControlId;
                projWIPTable.PeriodId = projGroup.PeriodId;
                projWIPTable.insert();

                ttscommit;
            }
        }

        return projWIPTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCustomer</Name>
				<Source><![CDATA[
    private void setDefaultCustomer()
    {
        ProjInvoiceTable projInvoiceTable;

        if (this.isFieldSet(fieldnum(ProjectEntity, ProjectContractId)))
        {
            projInvoiceTable = ProjInvoiceTable::find(this.ProjectContractId);
            this.CustomerAccount = projInvoiceTable.fundingSourceCustomerID();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLinePropertySearch</Name>
				<Source><![CDATA[
    private void setProjLinePropertySearch()
	{
		if (this.isFieldSet(fieldnum(ProjectEntity, ProjectGroup)))
		{
            ProjGroup projGroup = ProjGroup::find(this.ProjectGroup);
            if (projGroup)
            {
				this.SearchPriority = projGroup.ProjLinePropertySearch;
            }
		}
	}

]]></Source>
			</Method>
			<Method>
				<Name>setProjLedgerPosting</Name>
				<Source><![CDATA[
    private void setProjLedgerPosting()
    {
        if (this.isFieldSet(fieldnum(ProjectEntity, ProjectGroup)))
        {
            ProjGroup projGroup = ProjGroup::find(this.ProjectGroup);
            if (projGroup)
            {
                this.LedgerPostingSortPriority = projGroup.LedgerPosting;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultStartDate1</Name>
				<Source><![CDATA[
    private void setDefaultStartDate1()
    {
        if (this.isFieldSet(fieldNum(ProjectEntity,Calendar)) && this.isFieldSet(fieldNum(ProjectEntity, ProjectedStartDate)))
        {
            if (!WorkCalendarDate::isPickupDate(this.Calendar, this.ProjectedStartDate))
            {
                this.StartDate1  = WorkCalendar::findOpenDateForward(this.Calendar, this.ProjectedStartDate, this.StartTime);
            }
            else
            {
                this.StartDate1  = this.ProjectedStartDate;
            }
        }
        else  if (this.isFieldSet(fieldNum(ProjectEntity, ProjectedStartDate)))
        {
            this.StartDate1  = this.ProjectedStartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultEndDate1</Name>
				<Source><![CDATA[
    private void setDefaultEndDate1()
    {
        if (this.isFieldSet(fieldnum(ProjectEntity, ProjectedEndDate)))
        {
            this.EndDate1 = this.ProjectedEndDate;
        }
        else if (this.isFieldSet(fieldNum(ProjectEntity, StartDate1)))
        {
            this.EndDate1 = this.StartDate1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);
        if (!this.isFieldSet(_fieldId))
        {
            switch (_fieldId)
            {
                case fieldnum(ProjectEntity, CustomerAccount):
                    this.setDefaultCustomer();
                    break;

                case fieldNum(ProjectEntity, StartDate1):
                    this.setDefaultStartDate1();
                    break;

                case fieldNum(ProjectEntity, EndDate1):
                    this.setDefaultEndDate1();
                    break;

				case fieldNum(ProjectEntity, SearchPriority):
                    this.setProjLinePropertySearch();
                    break;

                case fieldNum(ProjectEntity, LedgerPostingSortPriority):
                    this.setProjLedgerPosting();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [
                fieldnum (ProjectEntity, CustomerAccount),
                    [
                        fieldnum (ProjectEntity, ProjectContractId)
                    ]
                ],
                [
                fieldnum (ProjectEntity, StartDate1),
                    [
                        fieldnum (ProjectEntity, ProjectedStartDate),
                        fieldnum (ProjectEntity, Calendar)
                    ]
                ],
                [
                fieldnum (ProjectEntity, EndDate1),
                    [
                        fieldnum (ProjectEntity, ProjectedEndDate),
                        fieldnum (ProjectEntity, StartDate1)
                    ]
                ],
                [
                fieldnum (ProjectEntity, SearchPriority),
                    [
                        fieldnum (ProjectEntity, ProjectGroup)
                    ]
                ],
                [
                fieldnum (ProjectEntity, LedgerPostingSortPriority),
                    [
                        fieldnum (ProjectEntity, ProjectGroup)
                    ]
                ]
              ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record of the related datasources if the foreign key is part of the entity projection
    /// </summary>
    /// <param name = "_entityCtx">
    /// The data entity runtime context
    /// </param>
    /// <param name = "_dataSourceCtx">
    /// The related datasource context
    /// </param>
    /// <returns>
    /// The record buffer of the related datasource.
    /// </returns>
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjectEntity, LogisticsLocation):
                ret = LogisticsLocation::findByLocationId(this.LocationID);

                if (ret.RecId == 0)
                {
                    LogisticsLocation location = _dataSourceCtx.getBuffer();
                    location.LocationID = '';
                }

                break;

            case dataEntityDataSourceStr(ProjectEntity, ProjFundingSource):
                if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
                {
                    ret = ProjFundingSource::findContractFundingSource(this.ProjectContractID, this.DefaultInvoiceAccount);
                }

                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (!this.ParentProject)
        {
            this.skipDataSourceValidateField(fieldNum(ProjectEntity, ParentProject), true);
        }

        this.Scheduled = PSAScheduled::NotScheduled;

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            this.Dimension = DimensionDefaultResolver::checkAndCreateSelfReference(tablenum(ProjTable), this.ProjectId, this.DimensionDisplayValue);
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        boolean isValid = this.checkDataAreaAccessible(this.DataAreaId);

        if (isValid)
        {
            changecompany(this.DataAreaId)
            {

                ProjTable localProj;

                select firstonly RecId,sortingId from localProj where localProj.ProjId == this.ProjectID;
        
                if (localProj.RecId != 0)
                {
                    this.SortingId1 = localProj.sortingId[1];
                    this.SortingId2 = localProj.sortingId[2];
                    this.SortingId3 = localProj.sortingId[3];
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Link project and WIP project for records inserted with no WIP project specified
    /// and a project type that automatically generates a WIP record.
    /// </summary>
    /// <param name= “_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            ProjectStaging projectStaging;
            ProjTable projTable;
            ProjWIPTable projWIPTable;

            update_recordset projTable
                setting WIPProject = projWIPTable.ProjId
            join projWIPTable
                where projWIPTable.ProjId == projTable.ProjId
            join projectStaging
                where projectStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && projectStaging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                    && projectStaging.TransferStatus  == DMFTransferStatus::Completed
                    && ((projectStaging.ProjectType   == ProjType::Investment) || (projectStaging.ProjectType == ProjType::FixedPrice))
                    && projectStaging.EstimateProjectID == ''
                    && projectStaging.ProjectId == projTable.ProjId;
        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve conflicts in the ordering of data import such that dependent records insert after parent records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The execution context for import.</param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        ProjectStaging::resolveImportSequence(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataAreaAccessible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the Company value is valid or not.
    /// </summary>
    /// <returns>
    /// true if the Company is valid; otherwise, false.
    /// </returns>
    private boolean checkDataAreaAccessible(SelectableDataArea dataAreaId)
    {
        const str CheckDataAreaAccessible = 'CheckDataAreaAccessible';
        SysGlobalCache cache = classfactory.globalCache();
        boolean isValid;

        if (cache.isSet(CheckDataAreaAccessible, dataAreaId))
        {
            isValid = cache.get(CheckDataAreaAccessible, dataAreaId);
        }
        else
        {
            isValid = xDataArea::exist(dataAreaId);
            cache.set(CheckDataAreaAccessible, dataAreaId, isValid);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {                    
        boolean isValid = super(_fieldIdToCheck);
        
        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ProjectEntity, ProjectBudgetManagement):                    
                    if (ProjTable::find(this.ProjectID).ProjBudgetManagement != this.ProjectBudgetManagement
                        && this.existProjBudget())
                    {
                        // When project budget exists for the project or its project hierarchy
                        // field <c>ProjBudgetManagement</c> should not be allowed for update further to avoid inconsistent behavior on budget.
                        isValid = checkFailed(strFmt("@Proj:IndependentBudgetForSubprojectsUpdateError", this.ProjectBudgetManagement));
                    }
                    break;
            }
        }    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies project budget exists for current project or any project in its hierarchy or not.
    /// </summary>
    /// <returns>
    /// Returns true if budget exists otherwise false.
    /// </returns>
    private boolean existProjBudget()
    {
        boolean isRootProj;
        ProjBudget projBudget;
        ProjBudget projBudgetRoot;
        ProjBudgetLine projBudgetLine;    
        #define.star('*')
        
        ProjId rootProjId = ProjTable::getRootProjId(this.ProjectID);
        isRootProj = this.ProjectID == rootProjId;
               
        if (isRootProj)
        {
            // Try and find a budget which in the hierarchy which is not root
            select firstonly RecId from projBudget
                exists join projBudgetLine
            where projBudgetLine.ProjBudget == projBudget.RecId
                && projBudgetLine.ProjId like (rootProjId + #star);            

            // Find a budget exists for current project.
            if (!projBudget.RecId)
            {                
                select firstonly RecId from projBudgetRoot
                    exists join projBudgetLine
                where projBudgetRoot.RecId == projBudgetLine.ProjBudget
                    && projBudgetRoot.RootProjId == this.ProjectID
                    && projBudgetLine.ProjId == this.ProjectID;
            }
        }
        else
        {
            // Find a budget exists for subproject.
            select firstonly RecId from projBudget
                exists join projBudgetLine
            where projBudget.RecId == projBudgetLine.ProjBudget
                && projBudgetLine.ProjId == this.ProjectID;

            if (!projBudget.RecId)
            {
                select firstonly RecId from projBudgetRoot
                    exists join projBudgetLine
                where projBudgetRoot.RecId == projBudgetLine.ProjBudget
                    && projBudgetLine.ProjId == this.ParentProject;
            }
        }

        return (projBudget.RecId || projBudgetRoot.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FormRef>ProjTable</FormRef>
	<Label>@SYS36368</Label>
	<Tags>Projects master</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjectStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>Projects</PublicCollectionName>
	<PublicEntityName>Project</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectContractID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectedStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectedEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractAmendment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatProjectValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectID</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AlternateProject</Name>
			<DataField>AlternateBudgetProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FixedAssetNumber</Name>
			<DataField>AssetId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankDocumentType</Name>
			<DataField>BankDocumentType</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CertifiedPayroll</Name>
			<DataField>CertifiedPayroll</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanVerifyCostAgainstRemainingForecast</Name>
			<DataField>CheckBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskCompletelyScheduled</Name>
			<DataField>CompleteScheduled</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractAmendment</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractAmendment_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractDate_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractPeriod</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractPeriod_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatProjectValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractValue_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateOfCreation</Name>
			<DataField>Created</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccount</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Location</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DeliveryLocation</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryName</Name>
			<DataField>DlvName</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Email</Name>
			<DataField>Email</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActualEndDate</Name>
			<DataField>EndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExtensionDate</Name>
			<DataField>ExtensionDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubprojectIDFormat</Name>
			<DataField>Format</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Header</Name>
			<DataField>Header</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JobIdentification</Name>
			<DataField>JobId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JobPayType</Name>
			<DataField>JobPayType</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumTimeIncrement</Name>
			<DataField>MinTimeIncrement</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentProject</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>ParentProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionTypesControlled</Name>
			<DataField>ProjBudgetaryControlOn</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlInterval</Name>
			<DataField>ProjBudgetInterval</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectBudgetManagement</Name>
			<DataField>ProjBudgetManagement</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetOverrunDefault</Name>
			<DataField>ProjBudgetOverrunOption</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowNegativeBudgetsToBeCarriedForward</Name>
			<DataField>ProjCarryForwardNegativeBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanCarryForwardRemainingBudgets</Name>
			<DataField>ProjCarryForwardRemainingBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedEndDate</Name>
			<DataField>ProjectedEndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedStartDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjectedStartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectGroup</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractID</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerPostingSortPriority</Name>
			<DataField>ProjLedgerPosting</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SearchPriority</Name>
			<DataField>ProjLinePropertySearch</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPriceGroup</Name>
			<DataField>ProjPriceGroup</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceCost</Name>
			<DataField>PSADoInvoiceCost</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActiveRevision</Name>
			<DataField>PSAForecastModelId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalRevision</Name>
			<DataField>PSAForecastModelIdExternal</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoicingMethod</Name>
			<DataField>PSAInvoiceMethod</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Notes</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSANotes</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Telephone</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAPhone</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequisitionOrPurchaseOrderControl</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAPReqControl</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HourValidation</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAPReqHourValidate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemValidation</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAPReqItemValidate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<DataField>PSAProjStatus</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectOrTask</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAProjTask</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsReadyForInvoicing</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAReadyForInvoicing</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ScheduleStatus</Name>
			<DataField>PSAResSchedStatus</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultOnSubprojects</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSARetainIncludeLower</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PercentToRetain</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSARetainPercent</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerRetentionTermId</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSARetainScheduleId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Calendar</Name>
			<DataField>PSASchedCalendarId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConstraintDate</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSASchedConstraintDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConstraintType</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSASchedConstraintType</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Date</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSASchedDefaultDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DurationInDays</Name>
			<DataField>PSASchedDuration</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalEffortInHours</Name>
			<DataField>PSASchedEffort</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndDate1</Name>
			<DataField>PSASchedEndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartTime</Name>
			<DataField>PSASchedFromTime</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PSASchedIgnoreCalendar</Name>
			<DataField>PSASchedIgnoreCalendar</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Milestone</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSASchedMilestone</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Scheduled</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PSASchedScheduled</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartDate1</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>PSASchedStartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndTime</Name>
			<DataField>PSASchedToTime</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DurationDeterminesEndDate</Name>
			<DataField>PSASchedUseDuration</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Fax</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSATeleFax</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TimeMeasure</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSATimeMeasure</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TrackCost</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSATrackCost</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Unit</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSAUnitId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForExpenseForecast</Name>
			<DataField>RequireActivityExpenseForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForExpenseTransaction</Name>
			<DataField>RequireActivityExpenseTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForHourForecast</Name>
			<DataField>RequireActivityHourForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForHourTransaction</Name>
			<DataField>RequireActivityHourTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForItemForecast</Name>
			<DataField>RequireActivityItemForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForItemTransaction</Name>
			<DataField>RequireActivityItemTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActualStartDate</Name>
			<DataField>StartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectStage</Name>
			<DataField>Status</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatSubject</Name>
			<Mandatory>No</Mandatory>
			<DataField>Subject_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroupId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectTemplate</Name>
			<DataField>Template</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingLevel</Name>
			<DataField>TimePostDetailSummary</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Type</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanUseAlternateProjectBudget</Name>
			<DataField>UseAlternateProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanUseBudgetControl</Name>
			<DataField>UseBudgeting</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Category</Name>
			<DataField>ValidateProjCategory</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EstimateProjectID</Name>
			<DataField>WIPProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Reference</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerPSAArchitect</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectManager</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsible</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectController</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsibleFinancial</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesManager</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsibleSales</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateApplied</Name>
			<DataField>TemplateApplied</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AlertTimeFrameWeeks</Name>
			<DataField>AlertTimeFrameWeeks</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LocationID</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkerArchitectPersonnelNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkerRespFinancialPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS92681</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker1</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkerResponsiblePersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS70488</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker2</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkerRespSalesPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS79867</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>HcmWorker3</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingId1</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54053</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingId2</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54054</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingId3</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54055</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultInvoiceAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<FeatureClass>ProjItemRequirementMultipleFundingSources</FeatureClass>
			<Mandatory>No</Mandatory>
			<DataField>FundingSourceId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Dimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsLocation</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsLocation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LogisticsLocation</Name>
								<JoinRelationName>LogisticsLocation</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerPSAArchitect</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker1</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsibleFinancial</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker2</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsible</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorker3</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsibleSales</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ParentProjTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ParentId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjFundingSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjFundingSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultFundingSource</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>