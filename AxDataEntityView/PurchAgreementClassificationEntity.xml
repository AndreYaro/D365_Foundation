<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementClassificationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementClassificationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PurchAgreementClassificationEntity, AgreementClassification):
                AgreementClassification agreementClassification = _dataSourceCtx.getBuffer();
                agreementClassification.AgreementRelationType = tableNum(PurchAgreementHeader);
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jump ref method for target record
    /// </summary>
    public static void jumpRefMethod(str _menuItemName, Common _stagingBuffer, Object _callerObj, DataAreaId _dataAreaId)
    {
        changeCompany(_dataAreaId)
        {
            PurchAgreementClassificationStaging stagingBuffer = _stagingBuffer;
            AgreementClassification agreementClassification = AgreementClassification::findAgreementClassificationByName(stagingBuffer.ClassificationName, tableNum(PurchAgreementHeader));

            Args args = new Args();
            args.record(agreementClassification);
            args.lookupRecord(agreementClassification);
            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PurchAgreementClassificationEntity, PrimaryResponsibleWorkerName):
                case fieldNum(PurchAgreementClassificationEntity, SecondaryResponsibleWorkerName):
                    if (this.PrimaryResponsibleWorkerName != ''
                        && this.PrimaryResponsibleWorkerName == this.SecondaryResponsibleWorkerName)
                    {
                        ret = checkFailed(strFmt("@SCM:ErrorSecondaryResponsibleWorkerSameAsThePrimary"));
                    }
                    else if (this.PrimaryResponsibleWorkerName == ''
                        && this.SecondaryResponsibleWorkerName != '')
                    {
                        ret = checkFailed(strFmt("@SCM:ErrorSecondaryResponsibleWorkerWithoutAPrimary"));
                    }

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.setResponsibleWorker(_dataSourceCtx);

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.setResponsibleWorker(_dataSourceCtx);

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResponsibleWorker</Name>
				<Source><![CDATA[
    private void setResponsibleWorker(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(PurchAgreementClassificationEntity, AgreementClassification))
        {
            AgreementClassification agreementClassification = _dataSourceCtx.getBuffer();
            agreementClassification.PrimaryResponsibleWorker = this.getResponsibleWorker(this.PrimaryResponsibleWorkerName);
            agreementClassification.SecondaryResponsibleWorker = this.getResponsibleWorker(this.SecondaryResponsibleWorkerName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsibleWorker</Name>
				<Source><![CDATA[
    private HcmWorkerRecId getResponsibleWorker(Name _name)
    {
        HcmWorker worker;
        DirPerson person;

        select firstonly RecId from worker
            exists join person
            where person.Name == _name
                && worker.Person == person.RecId;

        return worker.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PurchAgreementClassificationEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>PurchAgreementClassification</FormRef>
	<Label>@SCM:PurchAgreementClassificationEntity</Label>
	<Tags>Purchase agreement setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PurchAgreementClassificationStaging</DataManagementStagingTable>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SecondaryResponsibleWorkerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryResponsibleWorkerName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArePurchaseAgreementActitivitesEnabled</Name>
			<DataField>Activity_PSN</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArePurchaseAgreementCertificationsEnabled</Name>
			<DataField>Certification_PSN</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClassificationDescription</Name>
			<DataField>Description_PSN</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDirectInvoicingRequired</Name>
			<DataField>DirectInvoiceEnable_PSN</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClassificationName</Name>
			<DataField>Name</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArePurchaseAgreementSubcontractorsEnabled</Name>
			<DataField>Subcontractor_PSN</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryResponsibleWorkerName</Name>
			<Label>@SCM:PrimaryResponsibleWorker</Label>
			<DataField>Name</DataField>
			<DataSource>DirPersonPrimary</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SecondaryResponsibleWorkerName</Name>
			<Label>@SCM:SecondaryResponsibleWorker</Label>
			<DataField>Name</DataField>
			<DataSource>DirPersonSecondary</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryResponsibleWorkerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PrimaryResponsibleWorker</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SecondaryResponsibleWorkerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SecondaryResponsibleWorker</DataField>
			<DataSource>AgreementClassification</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ClassificationName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>HcmWorkerPrimary</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>HcmWorkerEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>PrimaryResponsibleWorker</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PrimaryResponsibiltyAgreementClassifications</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>PrimaryResponsibleWorkerRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>HcmWorkerSecondary</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>HcmWorkerEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>SecondaryResponsibleWorker</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SecondaryResponsibiltyAgreementClassifications</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>SecondaryResponsibleWorkerRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>AgreementClassification</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>AgreementClassification</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorkerPrimary</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirPersonPrimary</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DirPerson</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Person</Field>
										<JoinDataSource>HcmWorkerPrimary</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryResponsibleWorker</Field>
								<JoinDataSource>AgreementClassification</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmWorkerSecondary</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirPersonSecondary</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DirPerson</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Person</Field>
										<JoinDataSource>HcmWorkerSecondary</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SecondaryResponsibleWorker</Field>
								<JoinDataSource>AgreementClassification</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>AgreementRelationType</Name>
						<Field>AgreementRelationType</Field>
						<Status>Hidden</Status>
						<Value>(AgreementClassificationEntityHelper::purchAgreementClassificationRangeConfiguration())</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>