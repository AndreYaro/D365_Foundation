<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxZakatLedgerInfoEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxZakatLedgerInfoEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        MainAccount						mainAccount;
        LedgerInfoZakat_SA				ledgerInfoZakat;

        ret = super();

        mainAccount = MainAccount::findByMainAccountId(this.MainAccountId);

        if (ret)
        {
            if (mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss ||
                mainAccount.Type == DimensionLedgerAccountType::Revenue ||
                mainAccount.Type == DimensionLedgerAccountType::Expense)
            {
                if (this.OpeningBalanceItemCode || this.ClosingBalanceItemCode || this.DebitItemCode || this.CreditItemCode)
				{
                    ret = checkFailed(strFmt("@Tax:ValidateBalanceZakatItems", DimensionLedgerAccountType::ProfitAndLoss, DimensionLedgerAccountType::Expense, DimensionLedgerAccountType::Revenue));
				}
            }

            if (mainAccount.Type == DimensionLedgerAccountType::BalanceSheet ||
                mainAccount.Type == DimensionLedgerAccountType::Asset ||
                mainAccount.Type == DimensionLedgerAccountType::Liability)
            {
                if (this.ProfitLossDebitItemCode || this.ProfitLossCreditItemCode || this.IsProfitLossDebitRepair || this.IsProfitLossCreditRepair)
                {
                    ret = checkFailed(strFmt("@Tax:ValidateProfitLossZakatItems", DimensionLedgerAccountType::BalanceSheet, DimensionLedgerAccountType::Liability, DimensionLedgerAccountType::Asset));
                }
            }

            if (this.ProfitLossDebitItemCode)
            {
                ret = ret && ledgerInfoZakat.checkZakatItemType(this.ProfitLossDebitItemCode, mainAccount.Type);
            }

            if (this.ProfitLossCreditItemCode)
            {
                ret = ret && ledgerInfoZakat.checkZakatItemType(this.ProfitLossCreditItemCode, mainAccount.Type);
            }

            if (this.OpeningBalanceItemCode)
            {
                ret = ret && ledgerInfoZakat.checkReserveAndProvisions(this.OpeningBalanceItemCode, mainAccount.Type);
            }

            if (this.ClosingBalanceItemCode)
            {
                ret = ret && ledgerInfoZakat.checkReserveAndProvisions(this.ClosingBalanceItemCode, mainAccount.Type);
            }

            if (this.DebitItemCode)
            {
                ret = ret && ledgerInfoZakat.validateReserveProvisions(this.DebitItemCode, mainAccount.Type);
            }

            if (this.CreditItemCode)
            {
                ret = ret && ledgerInfoZakat.validateReserveProvisions(this.CreditItemCode, mainAccount.Type);
            }

            if (this.IsProfitLossDebitRepair == NoYes::Yes)
            {
                if (LedgerItemCodeZakat_SA::findByItemCode(this.ProfitLossDebitItemCode).ItemType != LedgerItemTypeZakat_SA::MiscExpenses)
                {
                    ret = checkFailed("@Tax:ValidateRepairMaintenance");
                }
            }

            if (this.IsProfitLossCreditRepair == NoYes::Yes)
            {
                if (LedgerItemCodeZakat_SA::findByItemCode(this.ProfitLossCreditItemCode).ItemType != LedgerItemTypeZakat_SA::MiscExpenses)
                {
                    ret = checkFailed("@Tax:ValidateRepairMaintenance");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data from the entity to the data source.
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    /// <param name = "_dataSourceCtx">Data source context</param>
    /// <returns></returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;
        DimensionAttributeValue dimensionAttributeValue;
        MainAccount				mainAccount;

        LedgerInfoZakat_SA ledgerInfoZakat = _dataSourceCtx.getBuffer();

        mainAccount = MainAccount::findByMainAccountId(this.MainAccountId);

        if (!mainAccount)
        {
            return true;
        }

        select firstonly RecId from dimensionAttributeValue
            where dimensionAttributeValue.EntityInstance == mainAccount.RecId
				&& dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        if (!dimensionAttributeValue)
        {
            RecId dimensionRecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
            dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionRecId, mainAccount.RecId, false, true);

            if (!dimensionAttributeValue)
            {
                return true;
            }
        }

        ledgerInfoZakat.DimensionAttributeValue = dimensionAttributeValue.RecId;

        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the sql to populate the MainAccountId view field.
    /// </summary>
    private static str mainAccountId()
    {
        str mainAccountId;

        mainAccountId =
            @"
            SELECT MA.MAINACCOUNTID
                FROM MAINACCOUNT MA
				WHERE MA.RECID IN
					(SELECT DAV.ENTITYINSTANCE
						FROM DIMENSIONATTRIBUTEVALUE DAV
						WHERE DAV.RECID = T1.DIMENSIONATTRIBUTEVALUE)"
            ;

        return mainAccountId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<FormRef>MainAccountDetails</FormRef>
	<Label>@SYS321552</Label>
	<Tags>Zakat</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxZakatLedgerInfoStaging</DataManagementStagingTable>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitLossDebitItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProfitLossDebitRepair</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfitLossCreditItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProfitLossCreditRepair</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpeningBalanceItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosingBalanceItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DebitItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAttributeValue</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DimensionAttributeValue</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>MainAccountId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>mainAccountId</ComputedFieldMethod>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProfitLossDebitItemCode</Name>
			<DataField>ProfitLossDebitItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProfitLossDebitRepair</Name>
			<DataField>IsProfitLossDebitRepair</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProfitLossCreditItemCode</Name>
			<DataField>ProfitLossCreditItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProfitLossCreditRepair</Name>
			<DataField>IsProfitLossCreditRepair</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OpeningBalanceItemCode</Name>
			<DataField>OpeningBalanceItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClosingBalanceItemCode</Name>
			<DataField>ClosingBalanceItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitItemCode</Name>
			<DataField>DebitItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditItemCode</Name>
			<DataField>CreditItemCode</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>LedgerInfoZakat_SA</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>MainAccountId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerInfoZakat_SA</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerInfoZakat_SA</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>