<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountingPlanProductSelectionV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCycleCountingPlanProductSelectionV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(WHSCycleCountingPlanProductSelectionV2Entity, WHSCycleCountPlanProductSelection):
                WHSDataEntityHelper::markEmptyDataEntityFieldAsNotSetForUpdate(_entityCtx, _dataSourceCtx, fieldNum(WHSCycleCountingPlanProductSelectionV2Entity, ProductQueryJson), fieldNum(WHSCycleCountPlanProductSelection, ItemQuery));
                WHSDataEntityHelper::markEmptyDataEntityFieldAsNotSetForUpdate(_entityCtx, _dataSourceCtx, fieldNum(WHSCycleCountingPlanProductSelectionV2Entity, ProductVariantQueryJson), fieldNum(WHSCycleCountPlanProductSelection, ProductVariantQuery));
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if (this.ProductQuery)
        {
            QueryRun queryRun = new QueryRun(this.ProductQuery);
            this.ProductQueryJson = new SysQuery(queryRun.query()).toJson();
        }

        if (this.ProductVariantQuery)
        {
            QueryRun queryRun = new QueryRun(this.ProductVariantQuery);
            this.ProductVariantQueryJson = new SysQuery(queryRun.query()).toJson();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSCycleCountingPlanProductSelectionV2Entity, WHSCycleCountPlanProductSelection))
        {
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Insert);
            this.validateQuery(_dataSourceCtx);
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSCycleCountingPlanProductSelectionV2Entity, WHSCycleCountPlanProductSelection))
        {
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Update);
            this.validateQuery(_dataSourceCtx);
        }
    
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    private void initializeQuery(DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityDatabaseOperation _databaseOperation)
    {
        WHSCycleCountPlanProductSelection cycleCountPlanProductSelection = _dataSourceCtx.getBuffer();

        switch (_databaseOperation)
        {
            case DataEntityDatabaseOperation::Insert:
            case DataEntityDatabaseOperation::Update:
                if (this.ProductQueryJson)
                {
                    cycleCountPlanProductSelection.ItemQuery = this.initializeQueryFromJson(this.ProductQueryJson);
                }

                if (this.ProductVariantQueryJson)
                {
                    cycleCountPlanProductSelection.ProductVariantQuery = this.initializeQueryFromJson(this.ProductVariantQueryJson);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryFromJson</Name>
				<Source><![CDATA[
    private container initializeQueryFromJson(str _jsonQuery)
    {
        Query deserializedQuery = SysQuery::newFromJson(_jsonQuery);
        return new QueryRun(deserializedQuery).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    private void validateQuery(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.validateQueryStructure(_dataSourceCtx, this.ProductQueryJson, fieldNum(WHSCycleCountPlanProductSelection, ItemQuery));
        this.validateQueryStructure(_dataSourceCtx, this.ProductVariantQueryJson, fieldNum(WHSCycleCountPlanProductSelection, ProductVariantQuery));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryStructure</Name>
				<Source><![CDATA[
    private void validateQueryStructure(DataEntityDataSourceRuntimeContext _dataSourceCtx, str _queryJson, FieldId _fieldId)
    {
        if (_queryJson)
        {
            Query actualQuery = SysQuery::newFromJson(_queryJson);
            Query expectedQuery = this.defaultExpectedQuery(_fieldId);

            if (!WHSQueryInitializer::initializeDataSource(expectedQuery.dataSourceNo(1), actualQuery.dataSourceNo(1)))
            {
                _dataSourceCtx.throwValidateWriteFailed();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExpectedQuery</Name>
				<Source><![CDATA[
    private Query defaultExpectedQuery(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(WHSCycleCountPlanProductSelection, ItemQuery):
                return WHSCycleCountPlanProductSelection::defaultItemQuery().query();
            case fieldNum(WHSCycleCountPlanProductSelection, ProductVariantQuery):
                return WHSCycleCountPlanProductSelection::defaultProductVariantQuery().query();
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<FormRef>WHSCycleCountPlan</FormRef>
	<Label>@WAX:DataEntity_WHSCycleCountingPlanProductSelectionV2Entity_Label</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSCycleCountingPlanProductSelectionV2Staging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>WMS</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CycleCountingPlanId</Name>
			<DataField>CycleCountPlanId</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSelectionSequence</Name>
			<DataField>SequenceNumber</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSelectionQueryDescription</Name>
			<DataField>Description</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSelectionQueryMode</Name>
			<DataField>ProductSelectionMode</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductQuery</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<IsObsolete>Yes</IsObsolete>
			<DataField>ItemQuery</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVariantQuery</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<IsObsolete>Yes</IsObsolete>
			<DataField>ProductVariantQuery</DataField>
			<DataSource>WHSCycleCountPlanProductSelection</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductQueryJson</Name>
			<Label>@WAX:CCPlanProductSelectionProductQueryJson</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>-1</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductVariantQueryJson</Name>
			<Label>@WAX:CCPlanProductSelectionProductVariantQueryJson</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>-1</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CycleCountingPlanId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductSelectionSequence</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>CycleCountingPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSCycleCountingPlanEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CycleCountingPlan</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CycleCountingPlanProductSelections</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>WHSCycleCountingPlanEntity_PlanId</Name>
					<Field>CycleCountingPlanId</Field>
					<RelatedField>PlanId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSCycleCountPlanProductSelection</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSCycleCountPlanProductSelection</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>