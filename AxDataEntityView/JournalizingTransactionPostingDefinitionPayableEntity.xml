<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingTransactionPostingDefinitionPayableEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingTransactionPostingDefinitionPayableEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the posting definition is associated to purchasing model.
    /// </summary>
    /// <returns>
    /// true if the validation passes, otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean retValue;

        this.assignItemFromItemRelation();
        this.assignAccountFromAccountRelation();

        retValue = super();
        retValue = retValue
                    && JournalizingDefinition::checkExistJournalizingDefinitionByModule(this.PostingDefinitionId, JournalizingDefinitionModuleId::AccountsPayable)
                    && this.validateItemCodeAndRelatedFieldsHaveValidValues()
                    && this.accountCodeIsAllAndAccountRelationIsNotSet();

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountCodeIsAllAndAccountRelationIsNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the account code is all and the account relation is set.
    /// </summary>
    /// <returns>
    /// True if the account code is all and related fields are valid, otherwise false.
    /// </returns>
    private boolean accountCodeIsAllAndAccountRelationIsNotSet()
    {
        if (this.AccountCodeTableGroupAll == TableGroupAll::All &&
            this.AccountRelation != "")
        {
            return checkFailed("@AccountingFramework:RemoveValuesForAccountRelationWhenAccountCodeIsAll");
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemCodeAndRelatedFieldsHaveValidValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item code and the related fields values.
    /// </summary>
    /// <returns>
    /// True if the item code and related fields are valid, otherwise false.
    /// </returns>
    private boolean validateItemCodeAndRelatedFieldsHaveValidValues()
    {
        return (this.itemCodeIsAllAndCategoryAndItemRelationAreNotSet() &&
                this.itemCodeIsTableOrGroupAndCategoryIsNotSet() &&
                this.itemCodeIsCategoryAndItemRelationIsNotSet());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCodeIsAllAndCategoryAndItemRelationAreNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the item code is all and both the category relation name and item relation are not set.
    /// </summary>
    /// <returns>
    /// True if the item code is all and both the item relation and category relation name are valid, otherwise false.
    /// </returns>
    private boolean itemCodeIsAllAndCategoryAndItemRelationAreNotSet()
    {
        if (this.ItemCodeTableGroupCategoryAll == TableGroupCategoryAll::All &&
            (this.CategoryRelation != "" ||
            this.ItemRelation != "" ))
        {
            return checkFailed("@AccountingFramework:RemoveValuesForItemAndCategoryWhenItemCodeIsAll");
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCodeIsTableOrGroupAndCategoryIsNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the item code is table or group and the category relation name is not set.
    /// </summary>
    /// <returns>
    /// True if the item code is table or group and the category relation name is valid, otherwise false.
    /// </returns>
    private boolean itemCodeIsTableOrGroupAndCategoryIsNotSet()
    {
        if ((this.ItemCodeTableGroupCategoryAll == TableGroupCategoryAll::Table ||
            this.ItemCodeTableGroupCategoryAll == TableGroupCategoryAll::Group) &&
            this.CategoryRelation != "")
        {
            return checkFailed("@AccountingFramework:RemoveValuesForCategoryWhenItemCodeIsTableOrGroup");
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCodeisCategoryAndItemRelationIsNotSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the item code is category and the item relation is not set.
    /// </summary>
    /// <returns>
    /// True if the item code is category and the item relation is valid, otherwise false.
    /// </returns>
    private boolean itemCodeisCategoryAndItemRelationIsNotSet()
    {
        if (this.ItemCodeTableGroupCategoryAll == TableGroupCategoryAll::Category &&
            this.ItemRelation != "")
        {
            return checkFailed("@AccountingFramework:RemoveValuesForItemRelationWhenItemCodeIsCategory");
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignItemFromItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a value to either an Item group or an Item number from the item relation field, based on the item code value.
    /// </summary>
    private void assignItemFromItemRelation()
    {
        switch (this.ItemCodeTableGroupCategoryAll)
        {
            case TableGroupCategoryAll::Table:
                this.ItemRelationNumber = this.ItemRelation;
                break;
            case TableGroupCategoryAll::Group:
                this.ItemRelationGroup = this.ItemRelation;
                break;
            case TableGroupCategoryAll::All:
                break;
            case TableGroupCategoryAll::Category:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignAccountFromAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a value to either a vendor group or a vendor account from the account relation field, based on the account code value.
    /// </summary>
    private void assignAccountFromAccountRelation()
    {
        switch (this.AccountCodeTableGroupAll)
        {
            case TableGroupAll::Table:
                this.AccountRelationVendorAccount = this.AccountRelation;
                break;
            case TableGroupAll::GroupId:
                this.AccountRelationVendorGroup = this.AccountRelation;
                break;
            case TableGroupAll::All:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the category hierarchy value from procurement category hierarchy role.
    /// </summary>
    /// <param name = "_entityCtx">An entity runtime context.</param>
    /// <param name = "_dataSourceCtx">A datasource runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        // This entity restricts the selection of CategoryRelation values by supplying CategoryHierarchy values related to the procurement category hierarchy role.
        if (_dataSourceCtx.name() == dataentitydatasourcestr(JournalizingTransactionPostingDefinitionPayableEntity, EcoResCategory))
        {
            EcoResCategory ecoResCategory = _dataSourceCtx.getBuffer() as EcoResCategory;
            ecoResCategory.CategoryHierarchy = this.fetchCategoryHierarchyIfCategoryNameProvided(ecoResCategory.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCategoryHierarchyIfCategoryNameProvided</Name>
				<Source><![CDATA[
    private RefRecId fetchCategoryHierarchyIfCategoryNameProvided(EcoResCategoryName _ecoResCategoryName)
    {
        RefRecId categoryHierarchy = 0;

        if (_ecoResCategoryName != '')
        {
            categoryHierarchy= EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy;
        }

        return categoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeItemRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This computation fetches the data from either the ItemGroupId or ItemId field to ItemRelation field based on the value of ItemCode field.
    /// </summary>
    /// <returns>
    /// The item relation value.
    /// </returns>
    private static str computeItemRelation()
    {
        return SysComputedColumn::if(SysComputedColumn::equalExpression(
                                        SysComputedColumn::returnLiteral(TableGroupCategoryAll::Table),
                                        SysComputedColumn::comparisonField(
                                            tableStr(JournalizingTransactionPostingDefinitionPayableEntity),
                                            dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionPayableEntity,
                                                JournalizingDefinitionPayablesTrans),
                                            fieldStr(JournalizingDefinitionPayablesTrans, ItemCode)
                                            )
                                        ),
                                    fieldStr(JournalizingDefinitionPayablesTrans, ItemId),
                                    SysComputedColumn::codeDependentRelation(
                                        tableStr(JournalizingTransactionPostingDefinitionPayableEntity),
                                        dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionPayableEntity,
                                            JournalizingDefinitionPayablesTrans),
                                        fieldStr(JournalizingDefinitionPayablesTrans, ItemCode),
                                        TableGroupCategoryAll::Group,
                                        fieldStr(JournalizingDefinitionPayablesTrans, ItemGroupId),
                                        ''
                                    )
                                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAccountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This computation fetches the data from either the VendAccount or VendGroup field to AccountRelation field based on the value of VendAccountCode field.
    /// </summary>
    /// <returns>
    /// The account relation value.
    /// </returns>
    private static str computeAccountRelation()
    {
        return SysComputedColumn::if(SysComputedColumn::equalExpression(
                                        SysComputedColumn::returnLiteral(TableGroupAll::Table),
                                        SysComputedColumn::comparisonField(
                                            tableStr(JournalizingTransactionPostingDefinitionPayableEntity),
                                            dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionPayableEntity,
                                                JournalizingDefinitionPayablesTrans),
                                            fieldStr(JournalizingDefinitionPayablesTrans, VendAccountCode)
                                            )
                                        ),
                                    fieldStr(JournalizingDefinitionPayablesTrans, VendAccount),
                                    SysComputedColumn::codeDependentRelation(
                                        tableStr(JournalizingTransactionPostingDefinitionPayableEntity),
                                        dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionPayableEntity,
                                            JournalizingDefinitionPayablesTrans),
                                        fieldStr(JournalizingDefinitionPayablesTrans, VendAccountCode),
                                        TableGroupAll::GroupId,
                                        fieldStr(JournalizingDefinitionPayablesTrans, VendGroup),
                                        ''
                                    )
                                );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>JournalizingDefinitionTrans</FormRef>
	<Label>@AccountingFramework:PayablesTransactionPostingDefinition</Label>
	<Tags>Posting setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>JournalizingTransactionPostingDefinitionPayableEntityStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>TransactionPostingDefinitionPayables</PublicCollectionName>
	<PublicEntityName>TransactionPostingDefinitionPayable</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountsPayableTransactionType</Name>
			<DataField>AccountsPayableTransactionType</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryRelationRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>EcoResCategory</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemCodeTableGroupCategoryAll</Name>
			<DataField>ItemCode</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemRelationGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemGroupId</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemRelationNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@SYS12836</Label>
			<DataField>ItemId</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingDefinition</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@SYS128173</Label>
			<DataField>JournalizingDefinition</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountRelationVendorAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@SYS14048</Label>
			<DataField>VendAccount</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountCodeTableGroupAll</Name>
			<Label>@SYS12243</Label>
			<DataField>VendAccountCode</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountRelationVendorGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@SYS9253</Label>
			<DataField>VendGroup</DataField>
			<DataSource>JournalizingDefinitionPayablesTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingDefinitionId</Name>
			<Label>@SYS128173</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>JournalizingDefinitionCode</DataField>
			<DataSource>JournalizingDefinition</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryRelation</Name>
			<Label>@SYS50022</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemRelation</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>computeItemRelation</ComputedFieldMethod>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AccountRelation</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>computeAccountRelation</ComputedFieldMethod>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AccountsPayableTransactionType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemCodeTableGroupCategoryAll</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountCodeTableGroupAll</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemRelation</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountRelation</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>JournalizingDefinitionPayablesTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>JournalizingDefinitionPayablesTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>JournalizingDefinition</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>JournalizingDefinition</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>JournalizingDefinition</Name>
								<JoinRelationName>JournalizingDefinition</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResCategory_PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>EcoResCategory</Field>
								<JoinDataSource>JournalizingDefinitionPayablesTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>