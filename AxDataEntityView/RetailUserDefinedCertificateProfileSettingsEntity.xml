<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUserDefinedCertificateProfileSettingsEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailUserDefinedCertificateProfileSettingsEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override initializeEntityDataSource. Ensure correct company is set for company specific data sources.
    /// </summary>
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Setting company on datasources here means findEntityDataSource(), updateEntityDataSource(), mapDataSourceToEntity() run in given company for the datasources.
        DataAreaId companyToSwitch = this.LegalEntity ? this.LegalEntity : curExt();
        switch(_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(RetailUserDefinedCertificateProfileSettingsEntity, RetailUserDefinedCertificateProfileLine):
                _dataSourceCtx.setCompany(companyToSwitch);
                changecompany(companyToSwitch)
                {
                    // Ensure correct company is on the buffer, otherwise SysDataEntityPersister.selectDataSourceBufferByRecId() won't find record.
                    RetailUserDefinedCertificateProfileLine initialBuffer;
                    _dataSourceCtx.setBuffer(initialBuffer);
                    super(_entityCtx, _dataSourceCtx);

                    if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                    {
                        RetailUserDefinedCertificateProfileSettingsEntity entityRecord = _entityCtx.getEntityRecord();

                        // Make NotSet state of entity Priority field since we don't want to overwrite automatically set value in initValue() method
                        // of RetailUserDefinedCertificateProfileLine table during insert operation.
                        entityRecord.fieldState(fieldNum(RetailUserDefinedCertificateProfileSettingsEntity, Priority), FieldState::NotSet);
                    }
                }
                break;
            case dataEntityDataSourceStr(RetailUserDefinedCertificateProfileSettingsEntity, KeyVaultCertificateTable):
                _dataSourceCtx.setCompany(companyToSwitch);
                changecompany(companyToSwitch)
                {
                    // Ensure correct company is on the buffer, otherwise SysDataEntityPersister.selectDataSourceBufferByRecId() won't find record.
                    KeyVaultCertificateTable initialBuffer;
                    _dataSourceCtx.setBuffer(initialBuffer);
                    super(_entityCtx, _dataSourceCtx);
                }
                break;
            default:
                super(_entityCtx, _dataSourceCtx);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override mapEntityToDataSource. Ensure profile name and description are not overwritten if they are empty.
    /// </summary>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(RetailUserDefinedCertificateProfileSettingsEntity, RetailUserDefinedCertificateProfile):
                if (!this.Name || !this.Description)
                {
                    RetailUserDefinedCertificateProfile profile = RetailUserDefinedCertificateProfile::findByProfileId(this.CertificateProfile);

                    if (profile)
                    {
                        this.Name = this.Name ? this.Name : profile.Name;
                        this.Description = this.Description ? this.Description : profile.Description;
                    }
                }
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = this.validateSpecificMandatoryFields() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecificMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates related specific mandatory fields are set depending on certificate location type.
    /// </summary>
    /// <returns>true if necessary fields are set; otherwise false.</returns>
    private boolean validateSpecificMandatoryFields()
    {
        switch(this.LocationType)
        {
            case RetailUserDefinedCertificateProfileLineLocationType::KeyVault:
                if (!this.KeyVaultCertificate)
                {
                    return checkFailed(strFmt("@SYS84753", "@KeyVault:EDTLabel_KeyVaultCertificateRef"));
                }
                break;
            case RetailUserDefinedCertificateProfileLineLocationType::LocalCertificate:
                if (!this.Thumbprint)
                {
                    return checkFailed(strFmt("@SYS84753", "@Retail:RetailUserDefinedCertificateProfileLineThumbprint"));
                }
                break;
            default:
                return checkFailed(strFmt("@SYS78966", "@Retail:RetailUserDefinedCertificateProfileLineLocationType"));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@Retail:RetailUserDefinedCertificateProfileLineTableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailUserDefinedCertificateProfileSettingsStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailUserDefinedCertificateProfileSettings</PublicCollectionName>
	<PublicEntityName>RetailUserDefinedCertificateProfileSetting</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Thumbprint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CertificateProfile</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>ProfileId</DataField>
			<DataSource>RetailUserDefinedCertificateProfile</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>RetailUserDefinedCertificateProfile</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>RetailUserDefinedCertificateProfile</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntity</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>LegalEntity</DataField>
			<DataSource>RetailUserDefinedCertificateProfileCompany</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Priority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>Priority</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LocationType</Name>
			<DataField>CertificateLocationType</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>KeyVaultCertificate</Name>
			<Label>@KeyVault:EDTLabel_KeyVaultCertificateRef</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>KeyVaultCertificateTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Thumbprint</Name>
			<DataField>Thumbprint</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StoreName</Name>
			<DataField>StoreName</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StoreLocation</Name>
			<DataField>StoreLocation</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Comments</Name>
			<DataField>Comments</DataField>
			<DataSource>RetailUserDefinedCertificateProfileLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CertificateProfile</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntity</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Priority</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailUserDefinedCertificateProfileLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailUserDefinedCertificateProfileLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailUserDefinedCertificateProfileCompany</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailUserDefinedCertificateProfileCompany</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>RetailUserDefinedCertificateProfile</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>RetailUserDefinedCertificateProfile</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<JoinRelationName>RetailUserDefinedCertificateProfile</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>RetailUserDefinedCertificateProfileCompany</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>KeyVaultCertificateTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>KeyVaultCertificateTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>KeyVaultCertificateTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>