<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProcurementCatalogProductAssignmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatProcurementCatalogProductAssignmentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CatProcurementCatalogProductAssignmentEntity, CatDisplayProductCategory):
                if (this.isFieldSet(fieldNum(CatProcurementCatalogProductAssignmentEntity, IsDisplayed)))
                {
                    CatProcurementCatalogProductAssignmentEntity orig = this.orig();

                    if (!orig.IsDisplayed && this.IsDisplayed)
                    {
                        if (CatProcCatalogProductAssignmentSaveInitialOriginFlight::instance().isEnabled())
                        {
                            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                        }
                        else
                        {
                            CatDisplayProductCategory catDisplayProductCategory = _dataSourceCtx.getBuffer();
                            catDisplayProductCategory.Origin = CatDisplayOrigin::ManuallyAdded;
                        }
                    }
                    else if (!this.IsDisplayed)
                    {
                        CatDisplayProductCategory catDisplayProductCategory = _dataSourceCtx.getBuffer();
                        catDisplayProductCategory.Origin = CatDisplayOrigin::ManuallyHidden;
                    }
                    else
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        var procurementHierarchy = CatProcureCatalogTable::findProcurementHierarchy();

        EcoResCategory category = EcoResCategory::findByName(this.ProcurementCatalogCategoryName, procurementHierarchy.RecId);
        if (!category.RecId)
        {
            return checkFailed(strFmt("@SCM:OnlyProcurementCategoriesCanBeIncludedInProcurementCatalog", this.ProcurementCatalogCategoryName));
        }

        EcoResProductCategory productCategory = EcoResProductCategory::findByProductIdAndCategoryId(EcoResProduct::findByDisplayProductNumber(this.ProductNumber).RecId, category.RecId);

        if (!productCategory.RecId)
        {
            return checkFailed(strFmt("@SCM:OnlyProcurementCategoryProductsCanBeIncludedInProcurementCatalog", this.ProductNumber, this.ProcurementCatalogCategoryName));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayedComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str isDisplayedComputedColumnDefinition()
    {           
        str originExpression;
       
        if (CatProcurementCatalogProductIsDisplayedFlight::instance().isEnabled())
        {
            originExpression    = SysComputedColumn::comparisonField(tablestr(CatProcurementCatalogProductAssignmentEntity),
                                                                  tablestr(CatDisplayProductAll),
                                                                  fieldstr(CatDisplayProductAll, Origin));
            str sharedSyncTime  = SysComputedColumn::comparisonField(tablestr(CatProcurementCatalogProductAssignmentEntity),
                                                                  tablestr(CatDisplayProductAll),
                                                                  fieldstr(CatDisplayProductAll, SharedDataLastSyncTime));
            str prodCatDateTime = SysComputedColumn::comparisonField(tablestr(CatProcurementCatalogProductAssignmentEntity),
                                                                  tablestr(CatDisplayProductAll),
                                                                  fieldstr(CatDisplayProductAll, ProductCategoryDateTime));

            str isHiddenExpression = SysComputedColumn::comparisonLiteral(CatDisplayOrigin::ManuallyHidden);

            str dateDiffIsPositive;
            if (CatProcurementCatalogCompareDatesFlight::instance().isEnabled())
            {
                dateDiffIsPositive = SysComputedColumn::compareExpressions(sharedSyncTime, ' > ', prodCatDateTime);
            }
            else
            {
                str dateDiff = SysComputedColumn::getDateDiff(prodCatDateTime, sharedSyncTime, SysComputedColumnDatePart::Second);
                dateDiffIsPositive = SysComputedColumn::compareExpressions(dateDiff, ' > ', '0'); //Catalog is published              
            }

            return SysComputedColumn::if(
                        SysComputedColumn::and2(dateDiffIsPositive,
                            SysComputedColumn::notEqualExpression(originExpression, isHiddenExpression)),
                    SysComputedColumn::returnLiteral(NoYes::Yes),
                    SysComputedColumn::returnLiteral(NoYes::No));
        }
        else
        {
            originExpression = SysComputedColumn::comparisonField(tablestr(CatProcurementCatalogProductAssignmentEntity),
                                                                  tablestr(CatDisplayProductCategory),
                                                                  fieldstr(CatDisplayProductCategory, Origin));

            str originManuallyHiddenExpression = SysComputedColumn::comparisonLiteral(CatDisplayOrigin::ManuallyAdded);
            str recIdExpression = SysComputedColumn::comparisonField(tablestr(CatProcurementCatalogProductAssignmentEntity),
                                                                 tablestr(CatDisplayProductCategory),
                                                                 fieldstr(CatDisplayProductCategory, RecId));
            return SysComputedColumn::if(
                SysComputedColumn::and2(
                    SysComputedColumn::isNotNullExpression(recIdExpression),
                    SysComputedColumn::equalExpression(originExpression, originManuallyHiddenExpression)),
                SysComputedColumn::returnLiteral(NoYes::Yes),
                SysComputedColumn::returnLiteral(NoYes::No));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jump ref method for target record
    /// </summary>
    public static void jumpRefMethod(str _menuItemName, Common _stagingBuffer, Object _callerObj, DataAreaId _dataAreaId)
    {
        changeCompany(_dataAreaId)
        {
            CatProcurementCatalogProductAssignmentStaging stagingRecord = _stagingBuffer;
            var record = CatProcureCatalogTable::find(stagingRecord.ProcurementCatalogName);

            Args args = new Args();
            args.record(record);
            args.lookupRecord(record);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:CatProcurementCatalogProductEntityDevDocs</DeveloperDocumentation>
	<FormRef>CatProcureCatalogEdit</FormRef>
	<Label>@SCM:CatProcurementCatalogProductEntityTitle</Label>
	<Tags>Procurement catalog</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CatProcurementCatalogProductAssignmentStaging</DataManagementStagingTable>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCatalogName</Name>
			<Label>@SCM:CatProcurementCatalogName</Label>
			<DataField>Name</DataField>
			<DataSource>CatProcureCatalogTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementCatalogCategoryName</Name>
			<Label>@SCM:CatProcurementCatalogCategoryName</Label>
			<DataField>Name</DataField>
			<DataSource>CatDisplayCategoryTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsDisplayed</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isDisplayedComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProductRecId</DataField>
			<DataSource>CatDisplayProductAll</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SharedDataRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SharedDataRecId</DataField>
			<DataSource>CatDisplayProductAll</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Origin</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Origin</DataField>
			<DataSource>CatDisplayProductCategory</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProcurementCatalogName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProcurementCatalogCategoryName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CatDisplayProductAll</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>CatDisplayProductAll</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CatDisplayProductCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CatDisplayProductCategory</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SharedDataRecId</Field>
								<JoinDataSource>CatDisplayProductAll</JoinDataSource>
								<RelatedField>SharedData</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>ProductCategoryRecId</Field>
								<JoinDataSource>CatDisplayProductAll</JoinDataSource>
								<RelatedField>ProductCategory</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CatDisplayCategoryTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CatDisplayCategoryTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CatProcureCatalogTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CatProcureCatalogTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Catalog</Field>
										<JoinDataSource>CatDisplayCategoryTable</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SharedDataRecId</Field>
								<JoinDataSource>CatDisplayProductAll</JoinDataSource>
								<RelatedField>SharedData</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductCategory</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProduct</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResDistinctProduct</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProduct</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>EcoResDistinctProductVariant</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResProductMaster</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResProductMaster</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Product</Field>
										<JoinDataSource>EcoResProductCategory</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProductCategoryRecId</Field>
								<JoinDataSource>CatDisplayProductAll</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>