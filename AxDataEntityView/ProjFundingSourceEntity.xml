<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingSourceEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFundingSourceEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjFundingSourceEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret;
        using (var activityContext = entityActivities.insertEntityContext())
        {
            this.updateLocation(_entityCtx, _dataSourceCtx);

            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);

            if (ret)
            {
                switch (_dataSourceCtx.name())
                {
                    case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                        this.handleFundingRuleOnFundingSourceInsertOrUpdate(_dataSourceCtx.getBuffer());
                        if (this.IsPrimaryFundingSource == NoYes::Yes && this.ProjectContractID)
                        {
                            this.updateContractFromFundingSource(_dataSourceCtx.getBuffer());
                        }
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjFundingSourceEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret;
        using (var activityContext = entityActivities.updateEntityContext())
        {
            this.updateLocation(_entityCtx, _dataSourceCtx);
        
            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        
            if (ret)
            {
                switch (_dataSourceCtx.name())
                {
                    case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                        this.handleFundingRuleOnFundingSourceInsertOrUpdate(_dataSourceCtx.getBuffer());
                        if (this.IsPrimaryFundingSource == NoYes::Yes && this.ProjectContractID)
                        {
                            this.updateContractFromFundingSource(_dataSourceCtx.getBuffer());
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ttsbegin;
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjFundingSourceEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret = true;

        using (var activityContext = entityActivities.deleteEntityContext())
        {
            str dataSourceName = _dataSourceCtx.name();
            switch (dataSourceName)
            {
                case dataEntityDataSourceStr(ProjProjectContractHeaderEntity, ProjFundingSource):
                    this.handleFundingRuleOnFundingSourceDelete(_dataSourceCtx.getBuffer());
                    break;
            }

            this.logTelemetry(_dataSourceCtx, activityContext);
            // Dont allow deletion of logistics address since that is associated with the customer
            if (dataSourceName != dataEntityDataSourceStr(ProjFundingSourceEntity, LogisticsPostalAddressBaseEntity))
            {
                ret = super(_entityCtx, _dataSourceCtx);
            }
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetry</Name>
				<Source><![CDATA[
    private void logTelemetry(DataEntityDataSourceRuntimeContext _dataSourceCtx, SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(ProjOpsIntegrationInstrumentationActivites::DataSource, any2Str(_dataSourceCtx.name()));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ContractIdProperty, any2Str(this.ProjectContractID));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::FundingSourceIdProperty, any2Str(this.FundingSourceId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContractFromFundingSource</Name>
				<Source><![CDATA[
    private void updateContractFromFundingSource(ProjFundingSource _projFundingSource)
    {
        if (_projFundingSource.CustAccount)
        {
            ttsbegin;
            ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ProjectContractID, true);
            CustTable custTable = CustTable::find(_projFundingSource.CustAccount);
            projInvoiceTable.TaxGroupId = custTable.TaxGroup;
            projInvoiceTable.DefaultDimension = custTable.DefaultDimension;
            projInvoiceTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFundingRuleOnFundingSourceInsertOrUpdate</Name>
				<Source><![CDATA[
    private void handleFundingRuleOnFundingSourceInsertOrUpdate(ProjFundingSource _projFundingSource)
    {
        if (this.CreateDefaultFundingRule == NoYes::Yes)
        {
            if (this.createDefaultFundingRuleIfNoneExists(_projFundingSource))
            {
                // Funding rule was created, so simply return
                return;
            }

            if (this.IsPrimaryFundingSource == NoYes::Yes)
            {
                this.ensureFundingRuleAllocationExistsForFundingSource(_projFundingSource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultFundingRuleIfNoneExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a funding rule exists for the contract on the specified funding source.
    /// Will use the provided funding source to create it.
    /// </summary>
    /// <param name = "_projFundingSource">The funding source to allocate the funding rule to.</param>
    /// <returns>Boolean value indicating whether a new rule was created.</returns>
    private boolean createDefaultFundingRuleIfNoneExists(ProjFundingSource _projFundingSource)
    {
        if (ProjFundingRule::numberOfRulesForContract(_projFundingSource.ContractId) == 0)
        {
            ProjFundingRule::createDefaultFundingRule(_projFundingSource.ContractId, _projFundingSource.RecId);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureFundingRuleAllocationExistsForFundingSource</Name>
				<Source><![CDATA[
    private void ensureFundingRuleAllocationExistsForFundingSource(ProjFundingSource _projFundingSource)
    {
        ProjFundingRuleRefId fundingRuleRecId = ProjFundingRule::existsForContractAndFundingSource(_projFundingSource.ContractId, _projFundingSource.RecId);

        if (fundingRuleRecId)
        {
            // Allocation already exists
            return;
        }

        if (ProjFundingRule::numberOfRulesForContract(_projFundingSource.ContractId) == 1)
        {
            ProjFundingRule fundingRule = ProjFundingRule::findFirstByContractId(_projFundingSource.ContractId);
        
            // Reallocate rule to provided funding source
            fundingRule.resetAllocationToSingleFundingSource(_projFundingSource.RecId);
        }
        else
        {
            // As there is more than one funding rule it's unclear which one to allocate to the funding rule.
            // Therefore create a new rule.
            ProjFundingRule::createDefaultFundingRule(_projFundingSource.ContractId, _projFundingSource.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFundingRuleOnFundingSourceDelete</Name>
				<Source><![CDATA[
    private void handleFundingRuleOnFundingSourceDelete(ProjFundingSource _projFundingSource)
    {
        if (this.CreateDefaultFundingRule == NoYes::Yes
            && this.IsPrimaryFundingSource == NoYes::Yes)
        {
            ProjFundingRuleRefId fundingRule = ProjFundingRule::existsForContractAndFundingSource(_projFundingSource.ContractId, _projFundingSource.RecId);

            if (fundingRule)
            {
                ttsbegin;
                ProjFundingRule::find(fundingRule, true).delete();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the InvoiceLocation of the ProjFundingSource record from the InvoiceLocationId on the entity.
    /// If this field is blank, the address fields on the entity are used.
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    private void updateLocation(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (dataEntityDataSourceStr(ProjFundingSourceEntity, ProjFundingSource) == _dataSourceCtx.name())
        {
            LogisticsLocationRecId locationRecId;
            CompanyName invoiceName;
            DataAreaId dataAreaId = this.DataAreaId ? this.DataAreaId : curExt();

            if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId))
            {
                // These can be set during mapEntityToDataSource process.
                ProjFundingSource projFundingSource = _dataSourceCtx.getBuffer();
                locationRecId = projFundingSource.InvoiceLocation;
                invoiceName = projFundingSource.InvoiceName;
            }

            if (this.InvoiceLocationId)
            {
                LogisticsLocation location = LogisticsLocation::findByLocationId(this.InvoiceLocationId);
                locationRecId = location.RecId;
                invoiceName = location.Description;
            }
            else if (this.isAnyAddressFieldSet())
            {
                locationRecId = LogisticsPostalAddressBaseEntity::saveAddress(_entityCtx, dataEntityDataSourceStr(ProjFundingSourceEntity, LogisticsPostalAddressBaseEntity));
            }

            if (locationRecId)
            {
                this.setInvoiceLocationOnFundingSource(_entityCtx, _dataSourceCtx, locationRecId, invoiceName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLocationFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the InvoiceLocation of the ProjFundingSource record to a default address from the customer.
    /// Called when InvoiceLocationId and all address fields are blank.
    /// </summary>
    /// <param name = "_entityCtx"></param>
    /// <param name = "_dataSourceCtx"></param>
    /// <param name = "_custTable">The customer, or the customer's invoice account if it exists.</param>
    private void defaultLocationFromCustomer(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CustTable _custTable)
    {
        // Default to customer's invoice address, or their primary address if that doesn't exist
        LogisticsLocationEntity location = LogisticsLocationEntity::findLocation(_custTable, LogisticsLocationRoleType::Invoice);

        if (location)
        {
            LogisticsPostalAddress  logisticsPostalAddressLocal = LogisticsPostalAddress::findByLocation(location.parmLocationRecId());

            if (!logisticsPostalAddressLocal.isEffective())
            {
                location = null;

                DirPartyLocation        partyLocation;
                DirPartyLocationRole    partyLocationRole;
                LogisticsLocationRole   locationRole;

                while select Location from partyLocation
                    where partyLocation.Party == _custTable.Party
                    exists join partyLocationRole
                        where partyLocationRole.PartyLocation == partyLocation.RecId
                    exists join locationRole
                        where locationRole.RecId == partyLocationRole.LocationRole
                            && locationRole.Type == LogisticsLocationRoleType::Invoice
                {
                    select logisticsPostalAddressLocal
                            where partyLocation.Location == logisticsPostalAddressLocal.Location
                            && logisticsPostalAddressLocal.ValidFrom <= DateTimeUtil::utcNow()
                            && logisticsPostalAddressLocal.ValidTo >= DateTimeUtil::utcNow();

                    if (logisticsPostalAddressLocal.Location)
                    {
                        location = LogisticsLocationEntity::constructFromLocationRecId(partyLocation.Location);

                        if (location)
                        {
                            break;
                        }
                    }
                }
            }
        }
        
        LogisticsLocationRecId  locationRecId;
        CompanyName invoiceName;
        DataAreaId dataAreaId = this.DataAreaId ? this.DataAreaId : curExt();

        if (location && location.parmLocationRecId())
        {
            locationRecId = location.parmLocationRecId();
            
            // Default InvoiceName to what is set from entity insert/update or from the location
            invoiceName = this.InvoiceName && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId)? this.InvoiceName : location.parmLocationDescription();
        }
        else
        {
            LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_custTable.Party);
            locationRecId = postalAddress.Location ? postalAddress.Location : 0;
            
            // Default InvoiceName to what is set from entity insert/update or customer name
            invoiceName = this.InvoiceName && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId)? this.InvoiceName : _custTable.name();
        }
        
        if (locationRecId)
        {
            this.setInvoiceLocationOnFundingSource(_entityCtx, _dataSourceCtx, locationRecId, invoiceName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyAddressFieldSet</Name>
				<Source><![CDATA[
    private boolean isAnyAddressFieldSet()
    {
        boolean ret = false;

        container addressFields = [
            fieldnum(ProjFundingSourceEntity, AddressCity),
            fieldnum(ProjFundingSourceEntity, AddressCountry),
            fieldnum(ProjFundingSourceEntity, AddressCounty),
            fieldnum(ProjFundingSourceEntity, AddressDescription),
            fieldnum(ProjFundingSourceEntity, AddressDistrictName),
            fieldnum(ProjFundingSourceEntity, AddressLatitude),
            fieldnum(ProjFundingSourceEntity, AddressLongitude),
            fieldnum(ProjFundingSourceEntity, AddressState),
            fieldnum(ProjFundingSourceEntity, AddressStreet),
            fieldnum(ProjFundingSourceEntity, AddressTimeZone),
            fieldnum(ProjFundingSourceEntity, AddressValidFrom),
            fieldnum(ProjFundingSourceEntity, AddressValidTo),
            fieldnum(ProjFundingSourceEntity, AddressZipCode)
        ];

        for (int i = 1; i <= conLen(addressFields) && !ret; i++)
        {
            int columnNum = conPeek(addressFields, i);
            ret = (this.(columnNum)) ? true : false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceLocationOnFundingSource</Name>
				<Source><![CDATA[
    private void setInvoiceLocationOnFundingSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, LogisticsLocationRecId _locationRecId, CompanyName _invoiceName)
    {
        DataEntityDataSourceRuntimeContext  addressDataSourceContext;
        ProjFundingSource                   projFundingSource;

        projFundingSource = _dataSourceCtx.getBuffer();
        projFundingSource.InvoiceLocation = _locationRecId;

        if (!projFundingSource.InvoiceName)
        {
            projFundingSource.InvoiceName = _invoiceName;
        }
        
        addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(ProjFundingSourceEntity, LogisticsPostalAddressBaseEntity));
        addressDataSourceContext.setDatabaseOperation(DataEntityDatabaseOperation::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert ||
            _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjFundingSourceEntity, ProjFundingSource))
            {
                ProjFundingSource projFundingSource = _dataSourceCtx.getBuffer();
                CustTable custTable;

                switch (this.FundingType)
                {
                    case ProjFundingType::Customer:
                        custTable  = CustTable::find(this.CustomerOrOrganization);
                        projFundingSource.Party = custTable.Party;
                        this.setFieldsFromCustTable(_entityCtx, _dataSourceCtx, custTable);
                        projFundingSource.ProjGrant = 0;

                        if (!projFundingSource.FundingSourceId)
                        {
                            projFundingSource.FundingSourceId = ProjFundingSource::processFundingSourceId(custTable.name(), this.ProjectContractID);
                        }

                        if (!projFundingSource.ContactPersonId)
                        {
                            if (CustTable::isCustDKPublic(custTable.AccountNum))
                            {
                                projFundingSource.ContactPersonId = custTable.ContactPersonId;
                            }
                        }

                        break;

                    case ProjFundingType::OnHoldFundingSource:
                    case ProjFundingType::Organization:
                        projFundingSource.Party = DirPartyTable::findByName(this.CustomerOrOrganization, DirPartyType::OperatingUnit, false).RecId;
                        projFundingSource.LanguageId = '';
                        projFundingSource.ProjGrant = 0;

                        if (!projFundingSource.FundingSourceId)
                        {
                            projFundingSource.FundingSourceId = ProjFundingSource::processFundingSourceId(this.CustomerOrOrganization, this.ProjectContractID);
                        }

                        break;

                    case ProjFundingType::Grant:
                        ProjGrant grant;

                        if (this.GrantId)
                        {
                            grant = ProjGrant::findByGrantId(this.GrantId);
                        }
                        else if (this.CustomerOrOrganization)
                        {
                            grant = ProjGrant::findByGrantId(this.CustomerOrOrganization);
                        }

                        if (grant.RecId != 0)
                        {
                            projFundingSource.ProjGrant = grant.RecId;

                            custTable = CustTable::find(grant.CustAccount);

                            this.setFieldsFromCustTable(_entityCtx, _dataSourceCtx, custTable);
                            projFundingSource.Party = custTable.Party;

                            if (!projFundingSource.FundingSourceId)
                            {
                                projFundingSource.FundingSourceId = ProjFundingSource::processFundingSourceId(grant.GrantName, this.ProjectContractID);
                            }
                        }
                }

                _dataSourceCtx.setBuffer(projFundingSource);
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsFromCustTable</Name>
				<Source><![CDATA[
    private void setFieldsFromCustTable(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx, CustTable custTable)
    {
        CustTable invoiceAccount = CustTable::find(custTable.InvoiceAccount);
        ProjFundingSource projFundingSource = _dataSourceCtx.getBuffer();

        if (invoiceAccount)
        {
            if (!projFundingSource.PaymentscheduleId)
            {
                projFundingSource.PaymentscheduleId = invoiceAccount.PaymSched;
            }

            if (!projFundingSource.PaymentTermsId)
            {
                projFundingSource.PaymentTermsId = invoiceAccount.PaymTermId;
            }

            if (!projFundingSource.NumberSequenceGroupId)
            {
                projFundingSource.NumberSequenceGroupId = invoiceAccount.NumberSequenceGroup;
            }

            if (!projFundingSource.CashDiscountId)
            {
                projFundingSource.CashDiscountId = invoiceAccount.CashDisc;
            }

            if (!projFundingSource.TaxPeriodPaymentCode_PL)
            {
                projFundingSource.TaxPeriodPaymentCode_PL = invoiceAccount.TaxPeriodPaymentCode_PL;
            }

            if (!this.InvoiceLocationId && !this.isAnyAddressFieldSet())
            {
                this.defaultLocationFromCustomer(_entityCtx, _dataSourceCtx, invoiceAccount);
            }
        }
        else
        {
            if (!projFundingSource.PaymentscheduleId)
            {
                projFundingSource.PaymentscheduleId = custTable.PaymSched;
            }

            if (!projFundingSource.PaymentTermsId)
            {
                projFundingSource.PaymentTermsId = custTable.PaymTermId;
            }

            if (!projFundingSource.NumberSequenceGroupId)
            {
                projFundingSource.NumberSequenceGroupId = custTable.NumberSequenceGroup;
            }

            if (!projFundingSource.CashDiscountId)
            {
                projFundingSource.CashDiscountId = custTable.CashDisc;
            }

            if (!projFundingSource.TaxPeriodPaymentCode_PL)
            {
                projFundingSource.TaxPeriodPaymentCode_PL = custTable.TaxPeriodPaymentCode_PL;
            }

            if (!this.InvoiceLocationId && !this.isAnyAddressFieldSet())
            {
                this.defaultLocationFromCustomer(_entityCtx, _dataSourceCtx, custTable);
            }
        }

        if (!projFundingSource.LanguageId)
        {
            projFundingSource.LanguageId             = DirPartyTable::findRec(custTable.Party).LanguageId;
        }

        if (!projFundingSource.DefaultDimension)
        {
            projFundingSource.DefaultDimension       = custTable.DefaultDimension;
        }

        if (!projFundingSource.GiroType)
        {
            projFundingSource.GiroType               = custTable.GiroTypeProjInvoice;
        }

        if (!projFundingSource.PostingProfile)
        {
            this.PostingProfile         = CustParameters::find().PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(ProjFundingSourceEntity, CustomerOrOrganization), true);
        this.skipDataSourceValidateField(fieldNum(ProjFundingSourceEntity, ProjectGrant), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjFundingSourceEntity, IsPrimaryFundingSource):
                DataAreaId dataAreaId = this.DataAreaId ? this.DataAreaId : curExt();
                if (this.IsPrimaryFundingSource == NoYes::Yes
                    && !ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId))
                {
                    ret = checkFailed(strFmt("@Proj:ProjFundingSourceEntity_IsPrimaryFundingSource_ValidateField", "@Proj:EnableProjectOperationsIntegration"));
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ProjFundingRule::numberOfRulesForContractAndFundingSource(this.ProjectContractID, this.RecId) > 1)
        {
            // Unexpected behaviour; there was more than one funding rule for the contract and funding source.
            ret = checkFailed("@Proj:ProjFundingSourceEntity_ValidateDelete_MultipleRules");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FormRef>projfundingSourceDetail</FormRef>
	<Label>@SYS133006</Label>
	<Tags>Project contracts</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjFundingSourceStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectFundingSources</PublicCollectionName>
	<PublicEntityName>ProjectFundingSource</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscount</Name>
			<DataField>CashDiscountId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactID</Name>
			<DataField>ContactPersonId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractID</Name>
			<DataField>ContractId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerOrOrganization</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerRequisition</Name>
			<DataField>CustPurchaseOrder</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerReference</Name>
			<DataField>CustRef</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAccount</Name>
			<DataField>EInvoiceAccountCode</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EInvoiceLineSpec</Name>
			<DataField>EInvoiceLineSpec</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FundingSourceId</Name>
			<Mandatory>No</Mandatory>
			<DataField>FundingSourceId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FundingType</Name>
			<DataField>FundingType</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssociatedPaymentAttachmentOnTheProjectInvoice</Name>
			<DataField>GiroType</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IndividualBufferDays</Name>
			<DataField>IndividualBuffer</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceName</Name>
			<DataField>InvoiceName</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Language</Name>
			<DataField>LanguageId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberSequenceGroup</Name>
			<DataField>NumberSequenceGroupId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Party</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentSchedule</Name>
			<DataField>PaymentscheduleId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TermsOfPayment</Name>
			<DataField>PaymentTermsId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingProfile</Name>
			<DataField>PostingProfile</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectGrant</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ProjGrant</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerPaymentRetentionTerms</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PSACustRetentionTermId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceFormat</Name>
			<DataField>PSAInvoiceFormats</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VATReportDateCode</Name>
			<DataField>TaxPeriodPaymentCode_PL</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>Party_FK</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GrantId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>GrantId</DataField>
			<DataSource>ProjGrant</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetentionTermId</Name>
			<Mandatory>No</Mandatory>
			<DataField>RetentionTermId</DataField>
			<DataSource>PSACustomerRetentionTermTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountry</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountryISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressState</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCounty</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceLocation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InvoiceLocation</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>CreateDefaultFundingRule</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:ProjFundingSourceEntity_CreateDefaultFundingRule_Label</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsPrimaryFundingSource</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:ProjFundingSourceEntity_IsPrimaryFundingSource_Label</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectContractID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FundingSourceId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Dimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjFundingSource</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjFundingSource</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Party_FK</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DirPartyTable</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>DirOrganizationBase</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>DirOrganizationBase</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>DirOrganization</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirOrganization</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMInternalOrganization</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMInternalOrganization</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>CompanyInfo</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>CompanyInfo</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
											<AxQuerySimpleDerivedDataSource>
												<Name>OMOperatingUnit</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>OMOperatingUnit</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
											<AxQuerySimpleDerivedDataSource>
												<Name>OMTeam</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>OMTeam</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>DirPerson</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>DirPerson</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Party_FK</Name>
								<JoinRelationName>DirPartyTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjGrant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjGrant</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProjGrant</Name>
								<JoinRelationName>ProjGrant</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PSACustomerRetentionTermTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PSACustomerRetentionTermTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>PSACustomerRetentionTermTable</Name>
								<JoinRelationName>PSACustomerRetentionTermTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjFundingSource</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<ApplyDateFilter>Yes</ApplyDateFilter>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InvoiceLocation</Field>
								<JoinDataSource>ProjFundingSource</JoinDataSource>
								<RelatedField>LocationRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>