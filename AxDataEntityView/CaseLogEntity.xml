<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseLogEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CaseLogEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSourceTypes</Name>
				<Source><![CDATA[
    public static Map getSourceTypes(str _partitionIdField, str _dataAreaIdField, str _refRecIdField)
    {
        Map map = new Map(Types::String, Types::String);

        map.insert(int2Str(any2Int(SmmSourceTypeList::Activity)),		   strFmt('(SELECT ACTIVITYNUMBER FROM SMMACTIVITIES WHERE RECID = %3 AND SMMACTIVITIES.DATAAREAID = %2 AND SMMACTIVITIES.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(SmmSourceTypeList::Campaign)),		   strFmt('(SELECT CAMPAIGNID FROM SMMCAMPAIGNTABLE WHERE RECID = %3 AND SMMCAMPAIGNTABLE.DATAAREAID = %2 AND SMMCAMPAIGNTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(SmmSourceTypeList::Customer)),		   strFmt('(SELECT ACCOUNTNUM FROM CUSTTABLE WHERE RECID = %3 AND CUSTTABLE.DATAAREAID = %2 AND CUSTTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(SmmSourceTypeList::Employee)),		   strFmt('(SELECT PERSONNELNUMBER FROM HCMWORKER WHERE RECID = %2 AND HCMWORKER.PARTITION = %1)',_partitionIdField,_refRecIdField));
        map.insert(int2Str(any2Int(SmmSourceTypeList::Prospect)),		   strFmt('(SELECT BUSRELACCOUNT FROM SMMBUSRELTABLE WHERE RECID = %3 AND SMMBUSRELTABLE.DATAAREAID = %2 AND SMMBUSRELTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        map.insert(int2Str(any2Int(SmmSourceTypeList::Vendor)),		       strFmt('(SELECT ACCOUNTNUM FROM VENDTABLE WHERE RECID = %3 AND VENDTABLE.DATAAREAID = %2 AND VENDTABLE.PARTITION = %1)',_partitionIdField,_dataAreaIdField,_refRecIdField));
        
        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLSourceId</Name>
				<Source><![CDATA[
    private static str getSQLSourceId()
    {
        Map sourceTypesMap = CaseLogEntity::getSourceTypes(
            SysComputedColumn::comparisonField(tableStr(CaseLogEntity), dataEntityDataSourceStr(CaseLogEntity, CaseLog), fieldStr(CaseLog, Partition)),
            SysComputedColumn::comparisonField(tableStr(CaseLogEntity), dataEntityDataSourceStr(CaseLogEntity, CaseLog), fieldStr(CaseLog, DataAreaId)),
            SysComputedColumn::comparisonField(tableStr(CaseLogEntity), dataEntityDataSourceStr(CaseLogEntity, CaseLog), fieldStr(CaseLog, SourceRefRecId)));

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(CaseLogEntity), dataEntityDataSourceStr(CaseLogEntity, smmSourceTypeTable), fieldStr(smmSourceTypeTable, Type)),
            sourceTypesMap,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(CaseLogEntity, CaseLog) && this.SourceTypeId)
        {
            this.SourceRefRecId = CaseLogEntity::findSourceRefRecId(this.SourceId, smmSourceType::type2TableId((smmSourceTypeTable::find(this.SourceTypeId)).Type));
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// For a given natural key sourceId and the table ID for the table that contains a record with such natural key,
    /// returns the <c>RecId</c> of the record that satisfies:
    ///     record.TableId == sourceRefTableId
    ///     record.(smmSourceType::tableId2FieldId(sourceRefTableId)) == sourceId
    /// </summary>
    /// <param name = "_sourceId">The natural key of the record.</param>
    /// <param name = "_sourceRefTableId">The table ID of the table that contais the record.</param>
    /// <returns>The <c>RecId</c> of the record that satisfies the restrictions defined in the summary.</returns>
    private static RefRecId findSourceRefRecId(anytype _sourceId, TableId _sourceRefTableId)
    {
        Common    source;
        DictTable dictTable = new DictTable(_sourceRefTableId);
        FieldId   fieldId   = smmSourceType::tableId2FieldId(_sourceRefTableId);

        source = dictTable.makeRecord();
        select firstonly RecId from source where source.(fieldId) == _sourceId;

        return source.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>CaseDetail</FormRef>
	<Label>@CaseManagement:CaseLogEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CaseLogStaging</DataManagementStagingTable>
	<Modules>SystemAdministration</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>caseLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Notes</Name>
			<DataField>Notes</DataField>
			<DataSource>caseLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CaseId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CaseId</DataField>
			<DataSource>caseDetailBase</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SourceId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>getSQLSourceId</ComputedFieldMethod>
			<ExtendedDataType>CaseSourceLinkId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceTypeId</Name>
			<DataField>SourceTypeId</DataField>
			<DataSource>caseLog</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceRefRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>SourceRefRecId</DataField>
			<DataSource>caseLog</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CaseId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Description</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>caseLog</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>caseLog</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>caseDetailBase</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>caseDetailBase</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>caseDetailBase_CaseDetail</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CaseDetail</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>caseDetailBase_HcmFMLACaseDetail</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>HcmFMLACaseDetail</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>caseDetailBase_CustCollectionsCaseDetail</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustCollectionsCaseDetail</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CaseRecId</Field>
								<JoinDataSource>caseLog</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>smmSourceTypeTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>smmSourceTypeTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceTypeId</Field>
								<JoinDataSource>caseLog</JoinDataSource>
								<RelatedField>TypeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>