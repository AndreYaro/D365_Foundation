<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllowTransferRuleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetAllowTransferRuleEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCriterionSql</Name>
				<Source><![CDATA[
    private static str getCriterionSql()
    {
        str criterionSql = strFmt(@"
            STUFF(
                (SELECT ',' +
                    CASE WHEN CRIT.WILDCARDSTRING <> '' THEN
                        REPLACE(CRIT.WILDCARDSTRING, '%', '*')
                    WHEN CRIT.RANGETO = '' AND CRIT.ISFROMOPEN = 1 THEN
                        '>' + CRIT.RANGEFROM
                    WHEN CRIT.RANGETO = '' AND CRIT.ISFROMOPEN = 0 THEN
                        CRIT.RANGEFROM + '..*'
                    WHEN CRIT.RANGEFROM = '' AND CRIT.ISTOOPEN = 1 THEN
                        '<' + CRIT.RANGETO
                    WHEN CRIT.RANGEFROM = '' AND CRIT.ISTOOPEN = 0 THEN
                        '*..' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 1 AND CRIT.ISTOOPEN = 1 THEN
                        CRIT.RANGEFROM + '<..<' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 0 AND CRIT.ISTOOPEN = 1 THEN
                        CRIT.RANGEFROM + '..<' + CRIT.RANGETO
                    WHEN CRIT.ISFROMOPEN = 1 AND CRIT.ISTOOPEN = 0 THEN
                        CRIT.RANGEFROM + '<..' + CRIT.RANGETO
                    WHEN CRIT.RANGEFROM = CRIT.RANGETO THEN
                        CRIT.RANGEFROM
                    ELSE
                        CRIT.RANGEFROM + '..' + CRIT.RANGETO
                    END
                    FROM BUDGETALLOWTRANSFERRULEMEMBERCRITERIA CRIT
                    WHERE CRIT.RECID = %1
                    FOR XML PATH(''), TYPE
                ).value('(./text())[1]', 'NVARCHAR(MAX)'),
                1, 1, '')",
            SysComputedColumn::returnField(
                tablestr(BudgetAllowTransferRuleEntity),
                dataEntityDataSourceStr(BudgetAllowTransferRuleEntity, BudgetAllowTransferRuleMemberCriteria),
                fieldstr(BudgetAllowTransferRuleMemberCriteria, RecId)));

        return criterionSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            && _dataSourceCtx.name() == dataEntityDataSourceStr(BudgetAllowTransferRuleEntity, BudgetDimensionEntity))
        {
            BudgetDimensionEntity budgetDimensionEntity = _dataSourceCtx.getBuffer() as BudgetDimensionEntity;

            if (!budgetDimensionEntity.LegalEntityId)
            {
                budgetDimensionEntity.LegalEntityId = this.LegalEntityId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isInserted;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetAllowTransferRuleEntity, BudgetAllowTransferRuleMemberCriteria))
        {
            isInserted = this.upsertRecord();
        }
        else
        {
            isInserted = super(_entityCtx, _dataSourceCtx);
        }

        return isInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isUpdated;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetAllowTransferRuleEntity, BudgetAllowTransferRuleMemberCriteria))
        {
            isUpdated = this.upsertRecord();
        }
        else
        {
            isUpdated = super(_entityCtx, _dataSourceCtx);
        }

        return isUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isDeleted;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetAllowTransferRuleEntity, BudgetAllowTransferRuleMemberCriteria))
        {
            ttsbegin;

            // Remove the criteria from the budget transfer rule.
            BudgetAllowTransferRuleManager allowTransferRuleManager = BudgetAllowTransferRuleManager::construct(this.RuleMemberId);

            DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(this.DimensionAttributeId);

            allowTransferRuleManager.removeExpressionCriteria(dimensionAttribute.RecId);

            if (allowTransferRuleManager.parmExpressionCriteriaCollection().elements() == 0)
            {
                // Remove the rule member when there is no more criteria.
                BudgetAllowTransferRuleManager::deleteBudgetAllowTransferRuleMember(this.RuleMemberId);

                if (!BudgetAllowTransferRuleMember::existByBudgetAllowTransferRule(this.RecId))
                {
                    // Remove the rule when there are no members.
                    BudgetAllowTransferRule allowTransferRule;

                    delete_from allowTransferRule
                        where allowTransferRule.RecId == this.RecId;
                }
            }
            else
            {
                if (allowTransferRuleManager.validate())
                {
                    allowTransferRuleManager.save();

                    this.reread();
                }
                else
                {
                    // The validation will log errors, throw an exception to stop the delete.
                    throw Exception::Error;
                }
            }

            ttscommit;

            isDeleted = true;
        }
        else
        {
            isDeleted = super(_entityCtx, _dataSourceCtx);
        }

        return isDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsertRecord</Name>
				<Source><![CDATA[
    private boolean upsertRecord()
    {
        boolean isValid;

        BudgetAllowTransferRuleManager allowTransferRuleManager = BudgetAllowTransferRuleManager::construct(this.RuleMemberId);

        if (allowTransferRuleManager)
        {
            LedgerRecId primaryLedger = Ledger::primaryLedger(CompanyInfo::current(this.LegalEntityId));

            DimensionHierarchy accountStructure = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, this.AccountStructureId);
            DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(this.DimensionAttributeId);

            boolean isDimensionAttributeAvailable;
            ListEnumerator availableDimensionAttributes = BudgetAllowTransferRuleManager::getAvailableDimensionAttributes(
                primaryLedger, accountStructure.RecId).getEnumerator();

            while (availableDimensionAttributes.moveNext())
            {
                DimensionAttribute availableDimensionAttribute = availableDimensionAttributes.current();

                if (availableDimensionAttribute.RecId == dimensionAttribute.RecId)
                {
                    isDimensionAttributeAvailable = true;
                    break;
                }
            }

            if (!isDimensionAttributeAvailable)
            {
                throw error(strFmt("@Budget:AllowTransferRuleInvalidDimensionAttribute", this.DimensionAttributeId, this.AccountStructureId));
            }

            allowTransferRuleManager.addExpressionCriteria(this.getExpressionCriteria(dimensionAttribute, this.Criterion));

            isValid = allowTransferRuleManager.validate();

            if (isValid)
            {
                allowTransferRuleManager.save();

                this.postLoad();
                this.reread();
            }
            else
            {
                // The validation will log errors, throw an exception to stop the update.
                throw Exception::Error;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCriteria</Name>
				<Source><![CDATA[
    private DimensionExpressionCriteria getExpressionCriteria(DimensionAttribute _dimensionAttribute, DimensionDisplayValue _criterionString)
    {
        DimensionExpressionCriteria expressionCriteria;

        DimensionExpressionCriteriaCollection criteriaCollection = DimensionExpressionCriteriaCollection::newForAttributeCriteriaText(
            _dimensionAttribute,
            _criterionString);

        if (criteriaCollection.elements() > 1)
        {
            throw error("@Budget:AllowTransferRuleMemberCriteriaDimensionCountError");
        }

        criteriaCollection.initializeEnumerator();

        if (criteriaCollection.moveNext())
        {
            expressionCriteria = criteriaCollection.current();
        }
        else
        {
            expressionCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                _dimensionAttribute.RecId,
                DimensionCriteriaOperators::WildcardSQL,
                '',
                '',
                false,
                false);
        }

        return expressionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetTransferRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget transfer rules.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget transfer rules.
    /// </returns>
    [SysODataActionAttribute("BudgetAllowTransferRuleEntityBudgetTransferRuleLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("BudgetTransferRule")]
    public static str lookupBudgetTransferRule(Array _fields)
    {
        List transferRules = new List(Types::String);

        LedgerRecId primaryLedger = BudgetEntityHelper::getPrimaryLedgerFromOfficeAppCustomLookupFields(
            tableStr(BudgetAllowTransferRuleEntity),
            fieldStr(BudgetAllowTransferRuleEntity, LegalEntityId),
            _fields);

        if (primaryLedger)
        {
            BudgetAllowTransferRule transferRule;

            while select Name from transferRule
                order by transferRule.Name
                where transferRule.PrimaryLedger == primaryLedger
            {
                transferRules.addEnd(transferRule.Name);
            }
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(transferRules);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountStructureId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of account structure IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of account structure IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetAllowTransferRuleEntityAccountStructureIdRuleLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("AccountStructureId")]
    public static str lookupAccountStructureId(Array _fields)
    {
        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetAllowTransferRuleEntity),
            fieldStr(BudgetAllowTransferRuleEntity, LegalEntityId),
            _fields);

        List accountStructures = BudgetRegisterEntryEntityHelper::getDimensionAccountStructures(legalEntityId);

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(accountStructures);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetAllowTransferRuleEntityDimensionAttributeIdLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("DimensionAttributeId")]
    public static str lookupDimensionAttributeId(Array _fields)
    {
        List dimensionAttributeIds = new List(Types::String);

        Map fieldMap = BudgetEntityHelper::getOfficeAppCustomLookupFieldMap(tableStr(BudgetAllowTransferRuleEntity), _fields);

        LedgerRecId primaryLedger = BudgetEntityHelper::getPrimaryLedgerFromOfficeAppCustomLookupFields(
            tableStr(BudgetAllowTransferRuleEntity),
            fieldStr(BudgetAllowTransferRuleEntity, LegalEntityId),
            _fields);

        Name accountStructureId;

        if (fieldMap.exists(fieldStr(BudgetAllowTransferRuleEntity, AccountStructureId)))
        {
            accountStructureId = fieldMap.lookup(fieldStr(BudgetAllowTransferRuleEntity, AccountStructureId));
        }

        if (primaryLedger && accountStructureId)
        {
            DimensionHierarchy accountStructure = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, accountStructureId);

            ListEnumerator dimensionAttributes = BudgetAllowTransferRuleManager::getAvailableDimensionAttributes(
                primaryLedger, accountStructure.RecId).getEnumerator();

            while (dimensionAttributes.moveNext())
            {
                DimensionAttribute dimensionAttribute = dimensionAttributes.current();

                dimensionAttributeIds.addEnd(dimensionAttribute.Name);
            }
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(dimensionAttributeIds);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@Budget:AllowTransferRuleEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetAllowTransferRule</FormRef>
	<Label>@Budget:AllowTransferRuleEntity</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetAllowTransferRuleStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetAllowTransferRules</PublicCollectionName>
	<PublicEntityName>BudgetAllowTransferRule</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetTransferRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountStructureId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RuleMember</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Criterion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetTransferRule</Name>
			<DataField>Name</DataField>
			<DataSource>BudgetAllowTransferRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>BudgetAllowTransferRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountStructureId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:AllowTransferRuleAccountStructure</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>DimensionHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RuleMember</Name>
			<Label>@Budget:AllowTransferRuleMember</Label>
			<DataField>Name</DataField>
			<DataSource>BudgetAllowTransferRuleMember</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAttributeId</Name>
			<DataField>DimensionAttributeId</DataField>
			<DataSource>BudgetDimensionEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Criterion</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:AllowTransferRuleMemberCriterion</Label>
			<ComputedFieldMethod>getCriterionSql</ComputedFieldMethod>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RuleMemberId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>BudgetAllowTransferRuleMember</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BudgetTransferRule</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RuleMember</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DimensionAttributeId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>LedgerAccountStructureEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerAccountStructureEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>AccountStructures</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetAllowTransferRuleAccountStructure</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>AccountStructureId</Field>
					<RelatedField>AccountStructureName</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintRelatedFixed">
					<Name>RelationConstraintRelatedFixed1</Name>
					<RelatedField>Status</RelatedField>
					<ValueStr>DimensionHierarchyConstraintStatus::Active</ValueStr>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>LegalEntities</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetAllowTransferRuleLedgerEntity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>BudgetDimensionEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>BudgetDimensionEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetDimensions</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetAllowTransferRuleBudgetDimension</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>DimensionAttributeId</Field>
					<RelatedField>DimensionAttributeId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetAllowTransferRule</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetAllowTransferRule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionHierarchy</Name>
								<JoinRelationName>DimensionHierarchy</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryLedger</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Ledger</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PrimaryForLegalEntity</Field>
										<JoinDataSource>PrimaryLedger</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Ledger</Name>
								<JoinRelationName>Ledger</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetAllowTransferRuleMember</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BudgetAllowTransferRuleMember</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetAllowTransferRuleMemberCriteria</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>BudgetAllowTransferRuleMemberCriteria</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>BudgetDimensionEntity</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>BudgetDimensionEntity</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>BudgetPrimaryLedgerDimensionAttribute</Field>
												<JoinDataSource>BudgetAllowTransferRuleMemberCriteria</JoinDataSource>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<FetchMode>OneToN</FetchMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>BudgetAllowTransferRuleMember</JoinDataSource>
										<RelatedField>BudgetAllowTransferRuleMember</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>BudgetAllowTransferRule</JoinDataSource>
								<RelatedField>BudgetAllowTransferRule</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>