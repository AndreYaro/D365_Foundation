<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogProductAttributeValueEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCatalogProductAttributeValueEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        EcoResAttributeValue   ecoResAttributeValue;
        EcoResValue ecoResValue = this.findEcoResValue();
        AttributeDataType actualDataType = this.GetActualDataType();

        if (!ecoResValue.RecId)
        {
            // Find Attribute type and insert EcoResValue.
            RecId ecoResValueRecId = this.insertEcoResValue(actualDataType);
            ecoResValue = EcoResValue::find(ecoResValueRecId);

            // Find CatalogProductInstanceValue.
            CatalogProductInstanceValue  catalogProductInstanceValue = this.findCatalogProductInstanceValue();

            // Insert catalogProductInstanceValue for specified catalog, product number.
            if (!catalogProductInstanceValue.RecId)
            {
                catalogProductInstanceValue.CatalogProduct = this.findCatalogProduct().RecId;
                catalogProductInstanceValue.insert();
            }

            // Insert EcoResAttributeValue for RetailCatalogProdInternalOrgInstanceVal.
            ecoResAttributeValue.Value = ecoResValue.RecId;
            ecoResAttributeValue.InstanceValue = catalogProductInstanceValue.RecId;
            ecoResAttributeValue.Attribute = this.EcoResAttributeRecId;
            ecoResAttributeValue.insert();
        }
        else
        {
            // Updates EcoResValue for specified attribute data type.
            ttsbegin;
            this.updateEcoResValue(ecoResValue, actualDataType);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResValue</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>EcoResValue</c> table; otherwise, an empty record.</returns>
    private EcoResValue findEcoResValue()
    {
        EcoResAttributeValue ecoResAttributeValue
            = EcoResAttributeValue::findByInstanceAttribute(this.findCatalogProductInstanceValue().RecId, this.EcoResAttributeRecId);

        return EcoResValue::find(ecoResAttributeValue.Value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts EcoResValue for specified attribute data type.
    /// </summary>
    /// <param name = "_dataType">Attribute data type.</param>
    protected RecId insertEcoResValue(AttributeDataType _dataType)
    {
        EcoResTextValue ecoResTextValue;
        EcoResCurrencyValue  ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;
        EcoResBooleanValue ecoResBooleanValue;
        RecId ecoResValueRecId;

        switch (_dataType)
        {
            case AttributeDataType::Currency:
                ecoResCurrencyValue.CurrencyValue = this.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = this.CurrencyCode;
                ecoResCurrencyValue.insert();
                ecoResValueRecId = ecoResCurrencyValue.RecId;
                break;

            case AttributeDataType::DateTime:
                ecoResDateTimeValue.DateTimeValue = this.DateTimeValue;
                ecoResDateTimeValue.insert();
                ecoResValueRecId = ecoResDateTimeValue.RecId;
                break;

            case AttributeDataType::Decimal:
                ecoResFloatValue.FloatValue = this.DecimalValue;
                ecoResFloatValue.insert();
                ecoResValueRecId = ecoResFloatValue.RecId;
                break;

            case AttributeDataType::Integer:
                ecoResIntValue.IntValue = this.IntegerValue;
                ecoResIntValue.insert();
                ecoResValueRecId = ecoResIntValue.RecId;
                break;

            case AttributeDataType::Text:
                ecoResTextValue.TextValue = this.TextValue;
                ecoResTextValue.insert();
                ecoResValueRecId = ecoResTextValue.RecId;
                break;

            case AttributeDataType::TrueFalse:
                ecoResBooleanValue.BooleanValue = this.BooleanValue;
                ecoResBooleanValue.insert();
                ecoResValueRecId = ecoResBooleanValue.RecId;
                break;
        }

        return ecoResValueRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates EcoResValue for specified attribute data type.
    /// </summary>
    /// <param name = "ecoResValue">The record in the <c>EcoResValue</c> table.</param>
    /// <param name = "_dataType">Attribute data type.</param>
    protected void updateEcoResValue(EcoResValue ecoResValue, AttributeDataType _dataType)
    {
        EcoResTextValue ecoResTextValue;
        EcoResCurrencyValue  ecoResCurrencyValue;
        EcoResDateTimeValue ecoResDateTimeValue;
        EcoResFloatValue ecoResFloatValue;
        EcoResIntValue ecoResIntValue;
        EcoResBooleanValue ecoResBooleanValue;

        switch (_dataType)
        {
            case AttributeDataType::Currency:
                ecoResCurrencyValue = EcoResCurrencyValue::find(ecoResValue.RecId, true);
                ecoResCurrencyValue.CurrencyValue = this.CurrencyValue;
                ecoResCurrencyValue.CurrencyCode = this.CurrencyCode;
                ecoResCurrencyValue.update();
                break;

            case AttributeDataType::DateTime:
                ecoResDateTimeValue = EcoResDateTimeValue::find(ecoResValue.RecId, true);
                ecoResDateTimeValue.DateTimeValue = this.DateTimeValue;
                ecoResDateTimeValue.update();
                break;

            case AttributeDataType::Decimal:
                ecoResFloatValue = EcoResFloatValue::find(ecoResValue.RecId, true);
                ecoResFloatValue.FloatValue = this.DecimalValue;
                ecoResFloatValue.update();
                break;

            case AttributeDataType::Integer:
                ecoResIntValue = EcoResIntValue::find(ecoResValue.RecId, true);
                ecoResIntValue.IntValue = this.IntegerValue;
                ecoResIntValue.update();
                break;

            case AttributeDataType::Text:
                ecoResTextValue = EcoResTextValue::find(ecoResValue.RecId, true);
                ecoResTextValue.TextValue = this.TextValue;
                ecoResTextValue.update();
                break;

            case AttributeDataType::TrueFalse:
                ecoResBooleanValue = EcoResBooleanValue::find(ecoResValue.RecId, true);
                ecoResBooleanValue.BooleanValue = this.BooleanValue;
                ecoResBooleanValue.update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        EcoResValue  ecoResValue = this.findEcoResValue();
        AttributeDataType actualDataType = this.GetActualDataType();

        // Find the Attribute value for specified attribute type.
        if (actualDataType == AttributeDataType::Text)
        {
            this.TextValue = EcoResTextValue::find(ecoResValue.RecId).TextValue;
        }
        else if (actualDataType == AttributeDataType::Currency)
        {
            this.CurrencyValue = EcoResCurrencyValue::find(ecoResValue.RecId).CurrencyValue;
        }
        else if (actualDataType == AttributeDataType::Integer)
        {
            this.IntegerValue = EcoResIntValue::find(ecoResValue.RecId).IntValue;
        }
        else if (actualDataType == AttributeDataType::Decimal)
        {
            this.DecimalValue = EcoResFloatValue::find(ecoResValue.RecId).FloatValue;
        }
        else if (actualDataType == AttributeDataType::DateTime)
        {
            this.DateTimeValue = EcoResDateTimeValue::find(ecoResValue.RecId).DateTimeValue;
        }
        else if (actualDataType == AttributeDataType::TrueFalse)
        {
            this.BooleanValue = EcoResBooleanValue::find(ecoResValue.RecId).BooleanValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        throw error ("@RETAIL:DataEntityForInsertOnly");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateAttributeType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates attribute type.
    /// </summary>
    /// <returns>true if attribute type is not reference; otherwise, false.</returns>
    protected boolean validateAttributeType()
    {
        boolean ret = true;
        AttributeDataType actualDataType = this.GetActualDataType();

        // Validates currency code.
        if (ret && actualDataType == AttributeDataType::Currency)
        {
            if (!Currency::find(this.CurrencyCode))
            {
                ret = checkFailed("@SYS1458", this.CurrencyCode);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCatalogProductInstanceValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CatalogProductInstanceValue</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>CatalogProductInstanceValue</c> table; otherwise, an empty record.</returns>
    private CatalogProductInstanceValue findCatalogProductInstanceValue()
    {
        CatalogProduct catalogProduct = this.findCatalogProduct();
        CatalogProductInstanceValue catalogProductInstanceValue
            = CatalogProductInstanceValue::findByCatalogProduct(catalogProduct.RecId);

        return catalogProductInstanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCatalogProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CatalogProduct</c> table.
    /// </summary>
    /// <returns>The specified record in the <c>CatalogProduct</c> table; otherwise, an empty record.</returns>
    private CatalogProduct findCatalogProduct()
    {
        CatalogProduct catalogProduct;
        Catalog catalog;
        EcoResProduct ecoResProduct;

        select firstonly RecId from catalogProduct
            join catalog
                where catalog.RecId == catalogProduct.Catalog
                    && catalog.CatalogId == this.CatalogNumber
            join ecoResProduct
                where ecoResProduct.RecId == catalogProduct.Product
                    && ecoResProduct.DisplayProductNumber == this.DisplayProductNumber;

        return catalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetActualDataType</Name>
				<Source><![CDATA[
    private AttributeDataType GetActualDataType()
    {
        EcoResAttribute attribute = EcoResAttribute::find(this.EcoResAttributeRecId);
        return attribute.getActualDataType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>Catalog product attribute value</Label>
	<Tags>Catalog</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailCatalogProductAttributeValueStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailCatalogProductAttributeValues</PublicCollectionName>
	<PublicEntityName>RetailCatalogProductAttributeValue</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CatalogNumber</Name>
			<DataField>CatalogNumber</DataField>
			<DataSource>RetailCatalogEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisplayProductNumber</Name>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>RetailEcoResProductEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryName</Name>
			<Label>@SYS104926</Label>
			<DataField>Name</DataField>
			<DataSource>RetailEcoResCategoryEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryHierarchyName</Name>
			<Label>@SYS130823</Label>
			<DataField>EcoResCategoryHierarchy_Name</DataField>
			<DataSource>RetailEcoResCategoryEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeGroupName</Name>
			<Label>@SYS4110009</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<Label>@SYS129028</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeName</Name>
			<Label>@SCM:AttributeType</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TextValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>Value</Label>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>CurrencyValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueCurrency</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldUtcDateTime">
			<Name>DateTimeValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueDateTime</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>DecimalValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueFloat</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>IntegerValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>BooleanValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>AttributeValueBoolean</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EcoResAttributeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DataType</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CatalogNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CategoryHierarchyName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CategoryName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DisplayProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeGroupName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>RetailCatalogProductEntity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>RetailCatalogProductEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CatalogNumber</Field>
					<RelatedField>CatalogNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>DisplayProductNumber</Field>
					<RelatedField>DisplayProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>RetailCatalogEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>RetailCatalogEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CatalogNumber</Field>
					<RelatedField>CatalogNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductCategoryEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductCategoryEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CategoryHierarchyName</Field>
					<RelatedField>ProductCategoryHierarchyName</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>CategoryName</Field>
					<RelatedField>CategoryName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>EcoResProductCategoryHierarchyEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductCategoryHierarchyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>CategoryHierarchyName</Field>
					<RelatedField>HierarchyName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailCatalogProductAttributeMaxCategory</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>RetailCatalogProductAttributeMaxCategory</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailCatalogEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailCatalogEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Catalog</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailEcoResProductEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailEcoResProductEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailEcoResCategoryEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailEcoResCategoryEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Category</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttribute</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttributeType</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResAttributeType</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>AttributeType</Field>
										<JoinDataSource>EcoResAttribute</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>AttributeModifier</Name>
								<Field>AttributeModifier</Field>
								<Status>Hidden</Status>
								<Value>Catalog</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Attribute</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategoryAttributeLookup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategoryAttributeLookup</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttributeGroupAttribute</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResAttributeGroupAttribute</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResAttributeGroup</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResAttributeGroup</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>AttributeGroup</Field>
												<JoinDataSource>EcoResAttributeGroupAttribute</JoinDataSource>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>AttributeGroupAttribute</Field>
										<JoinDataSource>EcoResCategoryAttributeLookup</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Category</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>Category</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>Attribute</Field>
								<JoinDataSource>RetailCatalogProductAttributeMaxCategory</JoinDataSource>
								<RelatedField>Attribute</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>