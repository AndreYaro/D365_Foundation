<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetCycleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetCycleEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAllowDatabaseOperation</Name>
				<Source><![CDATA[
    private boolean doAllowDatabaseOperation(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean doAllowDatabaseOperation = true;

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BudgetCycleEntity, BudgetCycle):
                    if (this.BudgetCycleName == ''
                        && this.StartDate == dateNull()
                        && this.EndDate == dateNull())
                    {
                        doAllowDatabaseOperation = false;
                    }
                    break;
            }
        }

        return doAllowDatabaseOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BudgetCycleEntity, BudgetCycle):

                    if (this.fieldState(fieldNum(BudgetCycleEntity, StartDate)) == FieldState::Set)
                    {
                        BudgetCycleTimeSpan budgetCycleTimeSpan;
                        FiscalCalendar fiscalCalendar = FiscalCalendar::findByCalendarId(this.FiscalCalendar);
                        BudgetCycle budgetCycle = _dataSourceCtx.getBuffer();

                        if (budgetCycle.BudgetCycleTimeSpan)
                        {
                            budgetCycleTimeSpan = BudgetCycleTimeSpan::find(budgetCycle.BudgetCycleTimeSpan);
                        }
                        else
                        {
                            budgetCycleTimeSpan.FiscalCalendar = fiscalCalendar.RecId;
                            budgetCycleTimeSpan.BudgetCycleLengthOption = this.LengthOfBudgetCycle;
                            budgetCycleTimeSpan.DefaultNumberOfAccountingPeriods = this.NumberOfFiscalPeriods;
                        }

                        budgetCycle.setCycleStartDate(this.StartDate, budgetCycleTimeSpan);

                        FiscalCalendarPeriod startFiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetCycle.StartFiscalCalendarPeriod);

                        this.StartPeriodYear = startFiscalCalendarPeriod.FiscalCalendarYear;
                        this.StartPeriodName = startFiscalCalendarPeriod.Name;

                        if (this.fieldState(fieldNum(BudgetCycleEntity, EndDate)) == FieldState::Set)
                        {
                            budgetCycle.setCycleEndDate(this.EndDate, budgetCycleTimeSpan);

                            FiscalCalendarPeriod endFiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetCycle.EndFiscalCalendarPeriod);

                            this.EndPeriodYear = endFiscalCalendarPeriod.FiscalCalendarYear;
                            this.EndPeriodName = endFiscalCalendarPeriod.Name;
                            this.EndPeriodStartDate = endFiscalCalendarPeriod.StartDate;
                        }
                        else
                        {
                            FiscalCalendarPeriod endFiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetCycle.EndFiscalCalendarPeriod);

                            this.EndDate = endFiscalCalendarPeriod.EndDate;
                            this.EndPeriodYear = endFiscalCalendarPeriod.FiscalCalendarYear;
                            this.EndPeriodName = endFiscalCalendarPeriod.Name;
                            this.EndPeriodStartDate = endFiscalCalendarPeriod.StartDate;
                        }
                    }
                    else if (this.fieldState(fieldNum(BudgetCycleEntity, EndDate)) == FieldState::Set)
                    {
                        BudgetCycle budgetCycle = _dataSourceCtx.getBuffer();
                        BudgetCycleTimeSpan budgetCycleTimeSpan = BudgetCycleTimeSpan::find(budgetCycle.BudgetCycleTimeSpan);

                        budgetCycle.setCycleEndDate(this.EndDate, budgetCycleTimeSpan);

                        FiscalCalendarPeriod endFiscalCalendarPeriod = FiscalCalendarPeriod::find(budgetCycle.EndFiscalCalendarPeriod);

                        this.EndPeriodYear = endFiscalCalendarPeriod.FiscalCalendarYear;
                        this.EndPeriodName = endFiscalCalendarPeriod.Name;
                        this.EndPeriodStartDate = endFiscalCalendarPeriod.StartDate;
                    }

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isEntityDataSourceUpdated;

        if (this.doAllowDatabaseOperation(_entityCtx, _dataSourceCtx))
        {
            isEntityDataSourceUpdated = super(_entityCtx, _dataSourceCtx);
        }

        return isEntityDataSourceUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isEntityDataSourceInserted;

        if (this.doAllowDatabaseOperation(_entityCtx, _dataSourceCtx))
        {
            isEntityDataSourceInserted = super(_entityCtx, _dataSourceCtx);
        }

        return isEntityDataSourceInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of fiscal calendar IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of fiscal calendar IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetCycleEntityFiscalCalendarLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("FiscalCalendar")]
    public static str lookupFiscalCalendar(Array _fields)
    {
        List lookupList = new List(Types::String);

        FiscalCalendar fiscalCalendar;

        while select CalendarId from fiscalCalendar
        {
            lookupList.addEnd(fiscalCalendar.CalendarId);
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetCycleEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetCycleTimeSpan</FormRef>
	<Label>@Budget:BudgetCycleTimeSpan</Label>
	<Tags>Ledger budget setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetCycleStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetCycles</PublicCollectionName>
	<PublicEntityName>BudgetCycle</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleTimeSpanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendar</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LengthOfBudgetCycle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfFiscalPeriods</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCycleName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleName</Name>
			<Label>@Budget:BudgetCycleName</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetCycle</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetCycleTimeSpanName</Name>
			<Label>@Budget:BudgetCycleTimeSpanName</Label>
			<DataField>Name</DataField>
			<DataSource>BudgetCycleTimeSpan</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>EndDate</DataField>
			<DataSource>EndFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndPeriodStartDate</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>StartDate</DataField>
			<DataSource>EndFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndPeriodName</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>EndFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndPeriodYear</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FiscalCalendarYear</DataField>
			<DataSource>EndFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendarId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FiscalCalendar</DataField>
			<DataSource>BudgetCycleTimeSpan</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FiscalCalendar</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CalendarId</DataField>
			<DataSource>FiscalCalendar</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LengthOfBudgetCycle</Name>
			<DataField>BudgetCycleLengthOption</DataField>
			<DataSource>BudgetCycleTimeSpan</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfFiscalPeriods</Name>
			<DataField>DefaultNumberOfAccountingPeriods</DataField>
			<DataSource>BudgetCycleTimeSpan</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Budget:BudgetCycleStartDate</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>StartDate</DataField>
			<DataSource>StartFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartPeriodName</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Name</DataField>
			<DataSource>StartFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartPeriodYear</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FiscalCalendarYear</DataField>
			<DataSource>StartFiscalCalendarPeriod</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>BudgetCycleTimeSpanName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>FiscalCalendar</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BudgetCycleName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetCycle</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetCycle</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetCycleTimeSpan</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BudgetCycleTimeSpan</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>FiscalCalendar</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>FiscalCalendar</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>FiscalCalendar</Field>
										<JoinDataSource>BudgetCycleTimeSpan</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetCycleTimeSpan</Field>
								<JoinDataSource>BudgetCycle</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>StartFiscalCalendarPeriod</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>FiscalCalendarPeriod</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>StartFiscalCalendarPeriod</Field>
								<JoinDataSource>BudgetCycle</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EndFiscalCalendarPeriod</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>FiscalCalendarPeriod</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>EndFiscalCalendarPeriod</Field>
								<JoinDataSource>BudgetCycle</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>