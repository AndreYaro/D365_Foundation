<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePropertyTableV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EInvoicePropertyTableV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts TableName from data entity to TableId to insert into data source.
    /// </summary>
    /// <param name = "_entityCtx">Data entity context.</param>
    /// <param name = "_dataSourceCtx">Data source context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        this.skipDataSourceValidateField(fieldnum(EInvoicePropertyTableV2Entity, RefRecId), true);
        this.skipDataSourceValidateField(fieldnum(EInvoicePropertyTableV2Entity, RefTableId), true);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EInvoicePropertyTableV2Entity, EInvoicePropertyTable))
        {
            EInvoicePropertyTable dsAppl = _dataSourceCtx.getBuffer();

            if (!dsAppl.RecId)
            {
                dsAppl = _entityCtx.getEntityRecord().findEntityDataSource(_entityCtx, _dataSourceCtx);

                if (!dsAppl.RecId)
                {
                    dsAppl.RefTableId = tableName2Id(this.TableName);
                    DictTable dictTable = new DictTable(dsAppl.RefTableId);
                    dsAppl.RefRecId = this.getPropertyReferenceTableRecId(dictTable);
                }
                dsAppl.Type = EInvoicePropertyTypeTable::findType(this.Type).RecId;
                dsAppl.Value = this.Value;
                _dataSourceCtx.setBuffer(dsAppl);

                if (dsAppl.RecId && _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts TableId to TableName for data entity export.
    /// </summary>
    public void postLoad()
    {
        super();

        if (this.RefTableId && this.RefRecId)
        {
            this.setPropertyReferenceTableValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts table id to table name and field id to field name for data entity export.
    /// </summary>
    /// <param name = "_entityCtx">Data entity context.</param>
    /// <param name = "_dataSourceCtx">Data source context.</param>
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EInvoicePropertyTableV2Entity, EInvoicePropertyTable))
        {
            EInvoicePropertyTable dsAppl = _dataSourceCtx.getBuffer();
            
            if (dsAppl.RefTableId && dsAppl.RecId)
            {
                this.setPropertyReferenceTableValues(dsAppl.RefTableId);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the fields are not empty.
    /// </summary>
    /// <returns>True - if all required fields are set and values provided are exists in tables. Otherwise - false.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();
        
        if (!this.TableName)
        {
            ret = checkFailed(strFmt("@SYS26332",fieldStr(EInvoicePropertyTableV2Entity, TableName)));
        }
        if (!this.TableFieldName )
        {
            ret = checkFailed(strFmt("@SYS26332",fieldStr(EInvoicePropertyTableV2Entity, TableFieldName)));
        }
        if (!this.TableFieldValue)
        {
            ret = checkFailed(strFmt("@SYS26332",fieldStr(EInvoicePropertyTableV2Entity, TableFieldValue)));
        }
        if (!this.Type)
        {
            ret = checkFailed(strFmt("@SYS26332",fieldStr(EInvoicePropertyTableV2Entity, Type)));
        }
        if (!this.Value)
        {
            ret = checkFailed(strFmt("@SYS26332",fieldStr(EInvoicePropertyTableV2Entity, Value)));
        }

        ret = ret && this.validateTableFieldValue();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is the field with given name exists in the table and, if yes, is the given value exists in that field.
    /// </summary>
    /// <returns>True - if given value exists in table field, otherwise - False.</returns>
    private boolean validateTableFieldValue()
    {
        boolean ret = true;
        DictTable dictTable = new DictTable(tableName2Id(this.TableName));
        FieldId fieldId;

        if (dictTable)
        {
            if (!this.getPropertyReferenceTableRecId(dictTable))
            {
                ret = checkFailed(strFmt("@ApplicationSuite_Localization:ValueNotFoundForTableField", this.TableFieldValue, this.TableName, this.TableFieldName));
            }
        }
        else
        {
            ret = checkFailed(strFmt("@ApplicationSuite_Localization:FieldNotFoundInTable", this.TableFieldName, this.TableName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(EInvoicePropertyTableV2Entity, TableName):
                if (tableName2Id(this.TableName) == 0)
                {
                    ret = checkFailed(strFmt("@SYS4007193", this.TableName));
                }
                break;

            case fieldNum(EInvoicePropertyTableV2Entity, TableFieldName):
                TableId tableId = tableName2Id(this.TableName);
                if (fieldName2Id(tableId, this.TableFieldName) == 0)
                {
                    ret = checkFailed(strFmt("@ApplicationSuite_Localization:FieldNotFoundInTable", this.TableFieldName, this.TableName));
                }
                break;

            case fieldNum(EInvoicePropertyTableV2Entity, TableFieldValue):
                ret = this.validateTableFieldValue();
                break;

            case fieldNum(EInvoicePropertyTableV2Entity, Type):
                if (!EInvoicePropertyTypeTable::findType(this.Type))
                {
                    ret = checkFailed(strFmt("@ApplicationSuite_Localization:EInvPropertyTypeNotFound", this.Type));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPropertyReferenceTableValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table name, field name and field value from their Ids.
    /// </summary>
    private void setPropertyReferenceTableValues(TableId _tableId = this.RefTableId)
    {
        DictTable dictTable = new DictTable(_tableId);
        this.TableName = dictTable.name();

        FieldId fieldId = dictTable.primaryKeyField();
        DictField dictField = new DictField(dictTable.id(), fieldId);

        if (!dictField || dictField.baseType() != Types::String)
        {
            DictIndex dictIndex = new DictIndex(dictTable.id(), dictTable.replacementKey());
            if (dictIndex.numberOfFields() == 1)
            {
                fieldId = dictIndex.field(1);
                dictField = new DictField(dictTable.id(), fieldId);
            }
            else
            {
                fieldId = 0;
            }
        }

        if (fieldId)
        {
            this.TableFieldName = fieldId2Name(dictTable.id(), fieldId);

            Common record = dictTable.makeRecord();
            select firstonly crosscompany record
              where record.recId == this.RefRecId;

            this.TableFieldValue = strfmt('%1', record.(fieldId));
            this.TableDataAreaId = record.dataAreaId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyReferenceTableRecId</Name>
				<Source><![CDATA[
    private RecId getPropertyReferenceTableRecId(DictTable _dictTable)
    {
        Common record;
        FieldId fieldId = fieldName2Id(_dictTable.id(), this.TableFieldName);

        if (fieldId)
        {
            record = _dictTable.makeRecord();
            select firstonly crosscompany RecId from record
                where record.(fieldId) == this.TableFieldValue
                    && record.dataAreaId == this.TableDataAreaId;
        }

        return record.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the datasource for entity.
    /// </summary>
    /// <param name = "_entityCtx">Entity context.</param>
    /// <param name = "_dataSourceCtx">Datasource context.</param>
    /// <returns>Corresponding record.</returns>
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EInvoicePropertyTableV2Entity, EInvoicePropertyTypeTable):
                ret = EInvoicePropertyTypeTable::findType(this.Type);
                break;

            case dataEntityDataSourceStr(EInvoicePropertyTableV2Entity, EInvoicePropertyTable):
                DictTable dictTable = new DictTable(tableName2Id(this.TableName));
                EInvoicePropertyTable eInvoicePropertyTable;
                EInvoicePropertyTypeTable eInvoicePropertyTypeTable;

                select firstonly eInvoicePropertyTable
                    where eInvoicePropertyTable.RefTableId == dictTable.id()
                    && eInvoicePropertyTable.RefRecId == this.getPropertyReferenceTableRecId(dictTable)
                    exists join RecId from eInvoicePropertyTypeTable
                        where eInvoicePropertyTypeTable.RecId == eInvoicePropertyTable.Type
                        && eInvoicePropertyTypeTable.Type == this.Type;

                ret = eInvoicePropertyTable;
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>EInvoiceProperties</FormRef>
	<Label>@AccountsReceivable:EInvoicePropertyTableV2Entity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EInvoicePropertyTableV2Staging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>EInvoice</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>EInvoicePropertiesV2</PublicCollectionName>
	<PublicEntityName>EInvoicePropertyV2</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableFieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableFieldValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefRecId</Name>
			<DataField>RefRecId</DataField>
			<DataSource>EInvoicePropertyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefTableId</Name>
			<DataField>RefTableId</DataField>
			<DataSource>EInvoicePropertyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Value</Name>
			<DataField>Value</DataField>
			<DataSource>EInvoicePropertyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Type</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<DataField>Type</DataField>
			<DataSource>EInvoicePropertyTypeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TableName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TableFieldName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TableFieldValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TableDataAreaId</Name>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TableName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TableFieldName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TableFieldValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Type</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TableDataAreaId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EInvoicePropertyTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EInvoicePropertyTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EInvoicePropertyTypeTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EInvoicePropertyTypeTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EInvoicePropertyTypeTable</Name>
								<JoinRelationName>EInvoicePropertyTypeTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>