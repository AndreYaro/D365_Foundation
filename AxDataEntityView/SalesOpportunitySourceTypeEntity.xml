<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOpportunitySourceTypeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesOpportunitySourceTypeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesOpportunitySourceTypeEntity find(SmmSourceTypeList _sourceType, SmmSourceTypeId _userDefinedSourceTypeName, boolean _forupdate = false)
    {
        SalesOpportunitySourceTypeEntity salesOpportunitySourceTypeEntity = null;

        salesOpportunitySourceTypeEntity.selectForUpdate(_forupdate);

        select firstonly salesOpportunitySourceTypeEntity
            where salesOpportunitySourceTypeEntity.SourceType == _sourceType &&
                  salesOpportunitySourceTypeEntity.UserDefinedSourceTypeName == _UserDefinedSourceTypeName;

        return salesOpportunitySourceTypeEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(SalesOpportunitySourceTypeEntity, SourceType) :
                if (!ret)
                {
                    break;
                }

                int sourceTypeTableId = tableNum(SalesOpportunitySourceTypeEntity);
                str sourceTypeFieldName = fieldId2PName(sourceTypeTableId, fieldNum(SalesOpportunitySourceTypeEntity, SourceType));

                if (this.SourceType == SmmSourceTypeList::UserDefined && this.UserDefinedSourceTypeName == '')
                {
                    ret = checkFailed(strFmt("@SCM:Entity_SalesOpportunitySourceTypeEntity_ValidateFieldForUserDefinedError",
                            fieldId2PName(sourceTypeTableId, fieldNum(SalesOpportunitySourceTypeEntity, UserDefinedSourceTypeName)),
                            sourceTypeFieldName,
                            this.SourceType));
                }
                else if (this.SourceType != SmmSourceTypeList::UserDefined && (this.UserDefinedSourceTypeName != '' || this.UserDefinedSourceTypeDescription != ''))
                {
                    ret = checkFailed(strFmt("@SCM:Entity_SalesOpportunitySourceTypeEntity_ValidateFieldForSystemDefinedError",
                            fieldId2PName(sourceTypeTableId, fieldNum(SalesOpportunitySourceTypeEntity, UserDefinedSourceTypeName)),
                            fieldId2PName(sourceTypeTableId, fieldNum(SalesOpportunitySourceTypeEntity, UserDefinedSourceTypeDescription)),
                            sourceTypeFieldName,
                            this.SourceType));
                }

                if (this.SourceType != SmmSourceTypeList::UserDefined && this.IsFreeformTextAllowed != NoYes::No)
                {
                    ret = checkFailed(strFmt("@SCM:Entity_SalesOpportunitySourceTypeEntity_ValidateIsFreeformTextAllowedFieldError",
                            fieldId2PName(sourceTypeTableId, fieldNum(SalesOpportunitySourceTypeEntity, IsFreeformTextAllowed)),
                            this.IsFreeformTextAllowed,
                            sourceTypeFieldName,
                            this.SourceType));
                }

                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValueOrEmptyString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return field value if source type is user defined. Otherwise, return empty string.
    /// </summary>
    /// <param name = "fieldName">Name of the field, which value should be returned.</param>
    /// <returns>Field value if source type is user defined; the empty string otherise.</returns>
    private static str fieldValueOrEmptyString(str fieldName)
    {
        DataEntityName entityName = tableStr(SalesOpportunitySourceTypeEntity);
        str dataSourceName = dataEntityDataSourceStr(SalesOpportunitySourceTypeEntity, smmSourceTypeTable);
        str typeValue = SysComputedColumn::returnField(entityName, dataSourceName, fieldStr(smmSourceTypeTable, Type));

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnLiteral(SmmSourceTypeList::UserDefined), typeValue),
            SysComputedColumn::returnField(entityName, dataSourceName, fieldName),
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>userDefinedSourceTypeNameComputedColumn</Name>
				<Source><![CDATA[
    private static str userDefinedSourceTypeNameComputedColumn()
    {
        return SalesOpportunitySourceTypeEntity::fieldValueOrEmptyString(fieldStr(smmSourceTypeTable, TypeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>userDefinedSourceTypeDescriptionComputedColumn</Name>
				<Source><![CDATA[
    private static str userDefinedSourceTypeDescriptionComputedColumn()
    {
        return SalesOpportunitySourceTypeEntity::fieldValueOrEmptyString(fieldStr(smmSourceTypeTable, Description));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the source types UI based on the selected record in the opportunity source type staging table.
    /// </summary>
    /// <param name="_menuItemName">
    /// The name of the menu item to open.
    /// </param>
    /// <param name="_buffer">
    /// The opportunity source type staging record selected.
    /// </param>
    /// <param name="_caller">
    /// The caller.
    /// </param>
    /// <param name="_dataArea">
    /// The legal entity ID of the caller context.
    /// </param>
    public static void jumpRefMethod(MenuItemName _menuItemName, SalesOpportunitySourceTypeStaging _buffer, object _caller, DataAreaId _dataArea)
    {
        changeCompany(_dataArea)
        {
            Args args = new Args();

            SmmSourceTypeId typeId = (_buffer.SourceType == SmmSourceTypeList::UserDefined) ? _buffer.UserDefinedSourceTypeName : enum2Str(_buffer.SourceType);
            args.record(smmSourceTypeTable::find(typeId));
            args.caller(_caller);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(SalesOpportunitySourceTypeEntity, SourceTypeId), [fieldNum(SalesOpportunitySourceTypeEntity, SourceType)]],
            [fieldNum(SalesOpportunitySourceTypeEntity, Description), [
                fieldNum(SalesOpportunitySourceTypeEntity, SourceType),
                fieldNum(SalesOpportunitySourceTypeEntity, UserDefinedSourceTypeDescription)
            ]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The ID of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesOpportunitySourceTypeEntity, SourceTypeId):
                this.defaultSourceTypeId();
                break;
            case fieldNum(SalesOpportunitySourceTypeEntity, Description):
                this.defaultDescription();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSourceTypeId</Name>
				<Source><![CDATA[
    private void defaultSourceTypeId()
    {
        if (this.isFieldSet(fieldNum(SalesOpportunitySourceTypeEntity, SourceType)))
        {
            if (this.SourceType == SmmSourceTypeList::UserDefined)
            {
                this.SourceTypeId = this.UserDefinedSourceTypeName;
            }
            else
            {
                this.SourceTypeId = enum2Str(this.SourceType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDescription</Name>
				<Source><![CDATA[
    private void defaultDescription()
    {
        if (this.isFieldSet(fieldNum(SalesOpportunitySourceTypeEntity, UserDefinedSourceTypeDescription)) ||
            this.isFieldSet(fieldNum(SalesOpportunitySourceTypeEntity, SourceType)))
        {
            if (this.SourceType == SmmSourceTypeList::UserDefined)
            {
                this.Description = this.UserDefinedSourceTypeDescription;
            }
            else
            {
                this.Description = enum2Str(this.SourceType);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@SCM:Entity_DevDoc_SalesOpportunitySourceTypeEntity</DeveloperDocumentation>
	<FormRef>smmSourceType</FormRef>
	<Label>@SCM:Entity_SalesOpportunitySourceTypeEntity</Label>
	<Tags>Responsibility</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SalesOpportunitySourceTypeStaging</DataManagementStagingTable>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsFreeformTextAllowed</Name>
			<DataField>AllowFreeformText</DataField>
			<DataSource>smmSourceTypeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceType</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Type</DataField>
			<DataSource>smmSourceTypeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>UserDefinedSourceTypeName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>userDefinedSourceTypeNameComputedColumn</ComputedFieldMethod>
			<ExtendedDataType>SmmSourceTypeId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Description</DataField>
			<DataSource>smmSourceTypeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceTypeId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>TypeId</DataField>
			<DataSource>smmSourceTypeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>UserDefinedSourceTypeDescription</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>userDefinedSourceTypeDescriptionComputedColumn</ComputedFieldMethod>
			<ExtendedDataType>SmmSourceDescription</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>SourceType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>UserDefinedSourceTypeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>smmSourceTypeTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>smmSourceTypeTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>