<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsFinanceCopilotEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
using Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService;

/// <summary>
/// This is OData action for copilot report executions.
/// </summary>
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public class SrsFinanceCopilotEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runFinCopilotReport</Name>
				<Source><![CDATA[
    [
        SysODataActionAttribute("RunFinCopilotReport", false)
    ]
    public static str runFinCopilotReport(str _reportName, str _reportDesignName, str _contractName, str _reportParameterJson)
    {
        ParameterValue[] parameterValueArray;
        Map reportParametersMap;
        str base64Report;
        SRSReportExecutionInfo executionInfo;
        System.Exception ex;
        System.Guid reportExecutionId = newGuid();

        SSRSReportSharedEventSource::EventWriteSharedInformation(_reportName);
        SSRSReportSharedEventSource::EventWriteSharedInformation(_reportDesignName);
        SSRSReportSharedEventSource::EventWriteSharedInformation(_contractname);
        SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt("Report parameter Json length is: %1", strLen(_reportParameterJson)));
 
        try
        {
            SSRSReportRuntimeEventSource::EventWriteReportExecutionTaskStart(_reportName, reportExecutionId);

            // Look up the report catelog item name from report name.
            SrsReportRunController controller = new SrsReportRunController();
            var reportCatelogName = SrsFinanceCopilotContractUtil::getCatelogItemName(_reportName, _reportDesignName);
            SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt('The report catelog item name is: %1', reportCatelogName));

            controller.parmReportName(reportCatelogName);
            controller.parmShowDialog(false);
 
            // Initialize report data contract from request.
            SrsReportDataContract reportContract = controller.parmReportContract();
            var rdpContract = SrsFinanceCopilotContractUtil::getRdpDataContract(_contractname, _reportParameterJson);

            reportContract.parmRdpContract(rdpContract);
            SrsReportRunImpl reportRunRunImpl = controller.parmReportRun() as SrsReportRunImpl;
        
            // Pre-run the report if necessary.
            executionInfo = new SRSReportExecutionInfo();
            executionInfo.parmReportRunId(reportExecutionId);
            reportContract.parmReportExecutionInfo(executionInfo);
            reportRunRunImpl.preRunReport();
 
            // Set print medium type and report parameter values.
            reportContract.parmPrintSettings().printMediumType(SRSPrintMediumType::File);
            reportContract.parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
 
            reportParametersMap = reportRunRunImpl.parmReportRunService().createParamMapFromContract(reportContract);
            parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);
            SrsReportRunPrinter reportRunPrinter = new SrsReportRunPrinter(reportContract, parameterValueArray);
 
            // Run the report to PDF file (base64).
            str deviceInfo = reportContract.parmPrintSettings().deviceInfo();
            System.Byte[] reportBytes = reportRunPrinter.parmSrsProxy().renderReportToByteArray(reportContract.parmReportPath(), parameterValueArray, SRSReportFileFormat::PDF, deviceInfo);
            base64Report = System.Convert::ToBase64String(reportBytes);
            SSRSReportRuntimeEventSource::EventWriteReportExecutionSuccess(_reportName, reportExecutionId);
        }
        catch(ex)
        {
            SSRSReportRuntimeEventSource::EventWriteReportRuntimeError(ex.Message, ex.GetType().ToString(), ex.ToString());
            throw Error(ex.Message);
        }
        finally
        {
            SSRSReportRuntimeEventSource::EventWriteReportExecutionTaskStop(_reportName, reportExecutionId);
        }
 
        return base64Report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCopilotReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is OData action for copilot report executions.
    /// </summary>
    [
        SysODataActionAttribute("RunCopilotReport", false)
    ]
    public static str runCopilotReport(str _legalEntityName, str _controllerName, str _controllerArgsJson, str _contractName, str _reportParameterJson)
    {
        str companyId = curExt();
        str runId = SrsReportRunUtil::convertAndTrimGuidValue(newGuid());
        System.Exception ex;
        str base64Report;

        SSRSReportSharedEventSource::EventWriteSharedInformation(_legalEntityName);
        SSRSReportSharedEventSource::EventWriteSharedInformation(_controllerName);
        SSRSReportSharedEventSource::EventWriteSharedInformation(_contractname);
        SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt("Controller args Json length is: %1", strLen(_controllerArgsJson)));
        SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt("Report parameter Json length is: %1", strLen(_reportParameterJson)));

        if(_legalEntityName)
        {
            SSRSReportSharedEventSource::EventWriteSharedInformation(strFmt("The legal entity name is updated to %1 from %2", _legalEntityName, companyId));
            companyId = _legalEntityName;
        }
        
        try
        {
            SSRSReportRuntimeEventSource::EventWriteReportExecutionTaskStart(_controllerName, str2Guid(runId));

            changecompany(companyId)
            {
                SysDictClass controllerDict = new SysDictClass(className2Id(_controllerName));
                Args args = SrsFinanceCopilotContractUtil::getCopilotArgsFromJson(_controllerArgsJson);
                
                // Sets caller object to this entity for Copilot scenarios
                SrsCopilotCallerContract callerContract = new SrsCopilotCallerContract();
                callerContract.parmCallerName(dataentityviewstr(SrsFinanceCopilotEntity));
                callerContract.parmRunId(runId);

                // Sets report parameter contract
                SrsCopilotReportContract paramContract = new SrsCopilotReportContract();
                paramContract.parmCallerName(dataentityviewstr(SrsFinanceCopilotEntity));
                paramContract.parmRunId(runId);
                paramContract.parmContractName(_contractName);
                paramContract.parmContractJson(_reportParameterJson);
                callerContract.parmReportContract(paramContract);
                args.caller(callerContract);

                // Calls main method with args
                controllerDict.callStatic("main", args);

                // Gets downloadable URLs
                SRSFileUploadTempStorageStrategy uploadStrategy= new SRSFileUploadTempStorageStrategy();
                List urls = uploadStrategy.GetDataInCategory(strLwr(runId));
                Enumerator urlEnumerator = urls.getEnumerator();

                // Downloads document and converts to byte array
                while(urlEnumerator.moveNext())
                {
                    using(System.IO.MemoryStream reportFile = File::UseFileFromURL(urlEnumerator.current()))
                    {
                        System.Byte[] reportBytes = reportFile.ToArray();
                        base64Report = System.Convert::ToBase64String(reportBytes);
                    }
                }

                return base64Report;
            }
        }
        catch(ex)
        {
            SSRSReportRuntimeEventSource::EventWriteReportRuntimeError(ex.Message, ex.GetType().ToString(), ex.ToString());
            throw Error(ex.Message);
        }
        finally
        {
            SSRSReportRuntimeEventSource::EventWriteReportExecutionTaskStop(_controllerName, str2Guid(runId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SrsFinanceCopilotStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>SrsFinanceCopilots</PublicCollectionName>
	<PublicEntityName>SrsFinanceCopilot</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportMenuItemName</Name>
			<DataField>ReportMenuItemName</DataField>
			<DataSource>SrsFinanceCopilotTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportMenuItemType</Name>
			<DataField>ReportMenuItemType</DataField>
			<DataSource>SrsFinanceCopilotTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportName</Name>
			<DataField>ReportName</DataField>
			<DataSource>SrsFinanceCopilotTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportDesignName</Name>
			<DataField>ReportDesignName</DataField>
			<DataSource>SrsFinanceCopilotTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ReportMenuItemName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SrsFinanceCopilotTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>SrsFinanceCopilotTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>