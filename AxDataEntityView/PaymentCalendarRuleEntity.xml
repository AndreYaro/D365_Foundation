<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymentCalendarRuleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymentCalendarRuleEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if (this.RuleType == PaymCalendarRuleType::ThirdPartyLocation)
        {
            changecompany(this.DataAreaId)
            {
                this.ThirdPartyDocumentBankAddressPriority = PaymCalendarEvaluationPriority::findByLocationType(this.RecId, PaymCalendarLocationType::Bank).Priority;
                this.ThirdPartyPrimaryAddressPriority = PaymCalendarEvaluationPriority::findByLocationType(this.RecId, PaymCalendarLocationType::ThirdParty).Priority;
                this.ThirdPartyDocumentAddressPriority = PaymCalendarEvaluationPriority::findByLocationType(this.RecId, PaymCalendarLocationType::LegalEntity).Priority;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == tableStr(PaymCalendarRule))
        {
            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                switch (this.RuleType)
                {
                    case PaymCalendarRuleType::LegalEntityLocation:
                        PaymCalendarRule paymCalendarRule = _dataSourceCtx.getBuffer() as PaymCalendarRule;
                        _dataSourceCtx.setBuffer(paymCalendarRule);
                        break;

                    case PaymCalendarRuleType::ThirdPartyLocation:
                        PaymCalendarLocationRule paymCalendarLocationRule = _dataSourceCtx.getBuffer() as PaymCalendarLocationRule;
                        _dataSourceCtx.setBuffer(paymCalendarLocationRule);
                        break;

                    case PaymCalendarRuleType::Specific:
                        PaymCalendarCriteriaRule paymCalendarCriteriaRule = _dataSourceCtx.getBuffer() as PaymCalendarCriteriaRule;
                        _dataSourceCtx.setBuffer(paymCalendarCriteriaRule);
                        break;
                }
            }
            else if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                switch (this.RuleType)
                {
                    case PaymCalendarRuleType::LegalEntityLocation:
                        _dataSourceCtx.setBuffer(new DictTable(tableNum(PaymCalendarRule)).makeRecord());
                        break;

                    case PaymCalendarRuleType::ThirdPartyLocation:
                        _dataSourceCtx.setBuffer(new DictTable(tableNum(PaymCalendarLocationRule)).makeRecord());
                        break;

                    case PaymCalendarRuleType::Specific:
                        _dataSourceCtx.setBuffer(new DictTable(tableNum(PaymCalendarCriteriaRule)).makeRecord());
                        break;
                }
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(PaymentCalendarRuleEntity, PaymCalendar))
        {
            ret = PaymCalendar::findByName(this.SpecificPaymentCalendarName);
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(PaymentCalendarRuleEntity, PaymCalendarCriteriaRule):
                    if (this.RuleType != PaymCalendarRuleType::Specific)
                    {
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    }
                    break;
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret
            && _dataSourceCtx.name() == dataEntityDataSourceStr(PaymentCalendarRuleEntity, PaymCalendarRule)
            && this.RuleType == PaymCalendarRuleType::ThirdPartyLocation)
        {
            this.updateThirdPartyEvaluationPriorities();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret
            && _dataSourceCtx.name() == dataEntityDataSourceStr(PaymentCalendarRuleEntity, PaymCalendarRule)
            && this.RuleType == PaymCalendarRuleType::ThirdPartyLocation)
        {
            this.updateThirdPartyEvaluationPriorities();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateThirdPartyEvaluationPriorities</Name>
				<Source><![CDATA[
    ///<summary>
    ///Updates the evaluation priorities in the <c>PaymCalendarEvaluationPriority</c> table.
    ///</summary>
    public void updateThirdPartyEvaluationPriorities()
    {
        this.moveEvaluationPriorityToSpecificPriority(PaymCalendarLocationType::Bank, this.ThirdPartyDocumentBankAddressPriority);
        this.moveEvaluationPriorityToSpecificPriority(PaymCalendarLocationType::ThirdParty, this.ThirdPartyPrimaryAddressPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveEvaluationPriorityToSpecificPriority</Name>
				<Source><![CDATA[
    private void moveEvaluationPriorityToSpecificPriority(PaymCalendarLocationType _locationType, PaymCalendarPriority _priority)
    {
        PaymCalendarEvaluationPriority evaluationPriority = PaymCalendarEvaluationPriority::findByLocationType(this.RecId, _locationType, true);

        while (evaluationPriority.Priority < _priority)
        {
            evaluationPriority = evaluationPriority.moveDown();
        }

        while (evaluationPriority.Priority > _priority)
        {
            evaluationPriority = evaluationPriority.moveUp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateThirdPartyEvaluationPriorities</Name>
				<Source><![CDATA[
    private boolean validateThirdPartyEvaluationPriorities()
    {
        boolean isValid = true;

        if (this.ThirdPartyDocumentAddressPriority < 1
            || this.ThirdPartyDocumentAddressPriority > 3
            || this.ThirdPartyDocumentBankAddressPriority < 1
            || this.ThirdPartyDocumentBankAddressPriority > 3
            || this.ThirdPartyPrimaryAddressPriority < 1
            || this.ThirdPartyPrimaryAddressPriority > 3)
        {
            isValid = checkFailed("@CashManagement:ThirdPartyLocationPriorityInvalidRange");
        }

        if (this.ThirdPartyDocumentAddressPriority == this.ThirdPartyDocumentBankAddressPriority
            || this.ThirdPartyDocumentBankAddressPriority == this.ThirdPartyPrimaryAddressPriority
            || this.ThirdPartyPrimaryAddressPriority == this.ThirdPartyDocumentAddressPriority)
        {
            isValid = checkFailed("@CashManagement:ThirdPartyLocationPriorityDuplicatePriority");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        switch (this.RuleType)
        {
            case PaymCalendarRuleType::Specific:
                if (ret && this.SpecificPaymentCalendarName == '')
                {
                    ret = checkFailed("@CashManagement:SpecificRuleRequiresPaymentCalendar");
                }

                if ((this.ModuleType == PaymCalendarModuleType::Customer && this.SpecificVendorPaymentMethod != '')
                    || (this.ModuleType == PaymCalendarModuleType::Vendor && this.SpecificCustomerPaymentMethod != ''))
                {
                    ret = checkFailed(strFmt("@CashManagement:SpecificRuleWrongModuleForPaymentMethod", this.ModuleType));
                }
                break;

            case PaymCalendarRuleType::ThirdPartyLocation:
                ret = ret && this.validateThirdPartyEvaluationPriorities();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<Label>@CashManagement:GLS220431</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PaymentCalendarRuleStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>APARShared</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PaymentCalendarRules</PublicCollectionName>
	<PublicEntityName>PaymentCalendarRule</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InstanceRelationType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InstanceRelationType</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModuleType</Name>
			<DataField>ModuleType</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RuleType</Name>
			<DataField>RuleType</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActive</Name>
			<DataField>IsActive</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Priority</Name>
			<DataField>Priority</DataField>
			<DataSource>PaymCalendarRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ThirdPartyDocumentBankAddressPriority</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:GLS220440</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ThirdPartyPrimaryAddressPriority</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:GLS220441</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ThirdPartyDocumentAddressPriority</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:GLS220442</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecificPaymentCalendarName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>PaymCalendar</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecificVendorPaymentMethod</Name>
			<Label>@CashManagement:VendorMethodOfPayment</Label>
			<DataField>VendorPaymMode</DataField>
			<DataSource>PaymCalendarCriteriaRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecificCustomerPaymentMethod</Name>
			<Label>@CashManagement:CustomerMethodOfPayment</Label>
			<DataField>CustomerPaymMode</DataField>
			<DataSource>PaymCalendarCriteriaRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecificPaymentTerms</Name>
			<DataField>PaymTerm</DataField>
			<DataSource>PaymCalendarCriteriaRule</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ModuleType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Priority</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PaymCalendarRule</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PaymCalendarRule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PaymCalendar</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PaymCalendar</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PaymCalendar</Field>
								<JoinDataSource>PaymCalendarRule</JoinDataSource>
								<JoinDerivedTable>PaymCalendarCriteriaRule</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>PaymCalendarCriteriaRule</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PaymCalendarCriteriaRule</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>PaymCalendarLocationRule</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PaymCalendarLocationRule</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>