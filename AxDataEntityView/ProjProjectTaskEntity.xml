<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectTaskEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectTaskEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jump ref method for target record
    /// </summary>
    public static void jumpRefMethod(str _menuItemName, Common _stagingBuffer, Object _callerObj, DataAreaId _dataAreaId)
    {
        changeCompany(_dataAreaId)
        {
            ProjProjectTaskStaging stagingRecord = _stagingBuffer;
            var record = smmActivities::find(stagingRecord.TaskId);

            Args args = new Args();
            args.record(record);
            args.caller(_callerObj);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(ProjProjectTaskEntity, TaskElementId), NumberSeqReference::findReference(extendedTypeNum(ElementNumber)));

            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(ProjProjectTaskEntity, TaskId), NumberSeqReference::findReference(extendedtypenum(smmActivityNumber)));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, Hierarchy))
        {
            ret = this.findHierarchyForParentProject();
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHierarchyForParentProject</Name>
				<Source><![CDATA[
    private Hierarchy findHierarchyForParentProject()
    {
        return Hierarchy::findByNameType(this.ProjectId, HierarchyType::Project, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjectAssociation</Name>
				<Source><![CDATA[
    private void insertProjectAssociation(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, smmActivities))
        {
            SmmActivityParentLink::insertLink(
                                        this.TaskId,
                                        smmActivityParentType::Project,
                                        ProjTable::find(this.ProjectId).RecId,
                                        true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjProjectTaskEntity::validateDependentFeaturesAreEnabled(true);

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectTaskEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        boolean result;
        using (var activityContext = entityActivities.insertEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            result = super(_entityCtx, _dataSourceCtx);

            this.insertProjectAssociation(_dataSourceCtx);
            this.updateActivitiesPurpose(_dataSourceCtx);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjProjectTaskEntity::validateDependentFeaturesAreEnabled(true);

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectTaskEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        boolean result;
        using (var activityContext = entityActivities.updateEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            result = super(_entityCtx, _dataSourceCtx);
        	
			this.updateActivitiesPurpose(_dataSourceCtx);
		}

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        ProjProjectTaskEntity::validateDependentFeaturesAreEnabled(true);

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectTaskEntity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();

        boolean result;
        using (var activityContext = entityActivities.deleteEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            result = super(_entityCtx, _dataSourceCtx);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetry</Name>
				<Source><![CDATA[
    private void logTelemetry(DataEntityDataSourceRuntimeContext _dataSourceCtx, SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(ProjOpsIntegrationInstrumentationActivites::DataSource, any2Str(_dataSourceCtx.name()));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ProjectIdProperty, any2Str(this.ProjectId));
        _activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::TaskIdProperty, any2Str(this.TaskId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitiesPurpose</Name>
				<Source><![CDATA[
    private void updateActivitiesPurpose(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, smmActivities))
        {
            // The Purpose field is normally copied to HierarchyTreeTable Name field. As this entity saves all of them
            // we need to copy it separately to avoid a conflict on save.
            // Note also that we should not use the entity datasource as we may not have the latest smmActivities record either!
            smmActivities smmActivities = smmActivities::find(this.TaskId ,true);

            if (smmActivities.Purpose != this.TaskName)
            {
                smmActivities.Purpose = this.TaskName;
                smmActivities.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureTaskHasParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures root tasks have the project as their parent. Should happen after entity has been mapped to datasource!
    /// </summary>
    /// <param name = "_dataSourceCtx">Entity datasource. If not HierarchyTreeTable then invocation returns without action.</param>
    private void ensureTaskHasParent(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, HierarchyTreeTable))
        {
            HierarchyTreeTable hierarchyTreeTable = _dataSourceCtx.getBuffer();

            if(!hierarchyTreeTable.ParentElementNumber && hierarchyTreeTable.Level == 1)
            {
                HierarchyTreeTable projectHierarchyTreeTable;
                HierarchyLinkTable hierarchyLinkTable;
                ProjTable projTable;

                select firstonly ElementNumber from projectHierarchyTreeTable
                    where projectHierarchyTreeTable.Level == 0
                        && projectHierarchyTreeTable.ParentElementNumber == ''
                join RecId from hierarchyLinkTable
                    where hierarchyLinkTable.HierarchyId == projectHierarchyTreeTable.HierarchyId
                        && hierarchyLinkTable.RefTableId == projTable.TableId
                join RecId from projTable
                    where projTable.RecId == hierarchyLinkTable.RefRecId
                        && projTable.ProjId == this.ProjectId;

                if (projectHierarchyTreeTable.ElementNumber)
                {
                    hierarchyTreeTable.ParentElementNumber = projectHierarchyTreeTable.ElementNumber;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, HierarchyTreeTable))
        {
            HierarchyTreeTable hierarchyTreeTable = _dataSourceCtx.getBuffer();
            
            hierarchyTreeTable.PSAHierarchyLevelType = PSAHierarchyLevelType::Task;
            hierarchyTreeTable.IsNodeExpanded = NoYes::No;
            hierarchyTreeTable.IsRequired = NoYes::No;
            hierarchyTreeTable.ElementNodeType = ElementNodeType::Activity;
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectTaskEntity, smmActivities))
        {
            smmActivities smmActivities = _dataSourceCtx.getBuffer();
            
            smmActivities.Category = smmActivityCategory::Task;
        }

        super(_entityCtx, _dataSourceCtx);

        this.ensureTaskHasParent(_dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && ProjProjectTaskEntity::validateDependentFeaturesAreEnabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return super() && ProjProjectTaskEntity::validateDependentFeaturesAreEnabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDependentFeaturesAreEnabled</Name>
				<Source><![CDATA[
    private static boolean validateDependentFeaturesAreEnabled(boolean raiseException)
    {
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            if (raiseException)
            {
                throw error(strFmt("@ProjectOperations:ProjProjectOperationsIntegrationFeatureEntityValidation", curExt()));
            }

            error(strFmt("@ProjectOperations:ProjProjectOperationsIntegrationFeatureEntityValidation", curExt()));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjProjectTaskEntityDevDoc</DeveloperDocumentation>
	<FormRef>smmActivities</FormRef>
	<Label>@Proj:ProjProjectTaskEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Tags>Project tasks</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjProjectTaskStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectTasks</PublicCollectionName>
	<PublicEntityName>ProjectTask</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaskElementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskOutlineLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentTaskElementId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskDisplaySequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskTimeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaskStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>Hierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>ActivityNumber</DataField>
			<DataSource>smmActivities</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskElementId</Name>
			<DataField>ElementNumber</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskName</Name>
			<Label>@Proj:ProjProjectTaskEntity_HierarchyNodeName</Label>
			<DataField>Name</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskOutlineLevel</Name>
			<Label>@Proj:ProjProjectTaskEntity_Level</Label>
			<DataField>Level</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskDisplaySequence</Name>
			<DataField>SiblingNumber</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentTaskElementId</Name>
			<DataField>ParentElementNumber</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskTimeType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ActivityTaskTimeType</DataField>
			<DataSource>smmActivities</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaskStatus</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ActivityTimeType</DataField>
			<DataSource>smmActivities</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TaskId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>HierarchyTreeTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>HierarchyTreeTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>smmActivities</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>smmActivities</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>smmActivities</Name>
								<JoinDataSource>HierarchyTreeTable</JoinDataSource>
								<JoinRelationName>smmActivities</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Hierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Hierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Hierarchy</Name>
								<JoinDataSource>HierarchyTreeTable</JoinDataSource>
								<JoinRelationName>Hierarchy</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>