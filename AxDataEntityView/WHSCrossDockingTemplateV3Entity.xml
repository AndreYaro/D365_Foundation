<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockingTemplateV3Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCrossDockingTemplateV3Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(WHSCrossDockingTemplateV3Entity, WHSCrossDockTemplate):
                WHSDataEntityHelper::markEmptyDataEntityFieldAsNotSetForUpdate(_entityCtx, _dataSourceCtx, fieldNum(WHSCrossDockingTemplateV3Entity, ProductQuery), fieldNum(WHSCrossDockTemplate, PackedQueryRun));
                this.initWarehouseSelection();
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseSelection</Name>
				<Source><![CDATA[
    private void initWarehouseSelection()
    {
        if (!this.isFieldSet(fieldNum(WHSCrossDockingTemplateV3Entity, WarehouseSelection)))
        {
            if (this.WarehouseId && !this.WarehouseGroupId)
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::Warehouse;
            }
            else if (this.WarehouseGroupId && !this.WarehouseId)
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::Group;
            }
            else
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::All;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        return ret && this.validateWarehouseGroupSetting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSetting</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSetting()
    {
        if (!this.isFieldSet(fieldNum(WHSCrossDockingTemplateV3Entity, WarehouseSelection)))
        {
            if (this.WarehouseId && this.WarehouseGroupId)
            {
                return checkFailed(strFmt("@WAX:WHSCrossDockingTemplateWarehouseGroupSelectionIsEmpty",
                    fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseId),
                    fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseGroupId)));
            }
            return true;
        }

        boolean ret = this.validateWarehouseGroupSettingAll();
        ret = ret && this.validateWarehouseGroupSettingGroup();
        return ret && this.validateWarehouseGroupSettingWarehouse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingAll</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingAll()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::All && (this.WarehouseId || this.WarehouseGroupId))
        {
            return checkFailed(strFmt("@WAX:WHSCrossDockingTemplateWarehouseGroupSelectionAll",
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseId),
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseGroupId),
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingGroup</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingGroup()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::Group && this.WarehouseId)
        {
            return checkFailed(strFmt("@WAX:WHSCrossDockingTemplateWarehouseGroupSelectionWarehouse",
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseId),
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingWarehouse</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingWarehouse()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::Warehouse && this.WarehouseGroupId)
        {
            return checkFailed(strFmt("@WAX:WHSLocationDirectiveWarehouseGroupIdMentioned",
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseGroupId),
                fieldPName(WHSCrossDockingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if (this.ProductQuery)
        {
            QueryRun queryRun = new QueryRun(this.ProductQuery);
            this.ProductQueryJson = new SysQuery(queryRun.query()).toJson();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSCrossDockingTemplateV3Entity, WHSCrossDockTemplate))
        {
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Insert);

            if (this.ProductQueryJson)
            {
                this.validateQueryStructure(_dataSourceCtx);
            }
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSCrossDockingTemplateV3Entity, WHSCrossDockTemplate))
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Update);

            if (this.ProductQueryJson)
            {
                this.validateQueryStructure(_dataSourceCtx);
            }
        }
    
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    private void initializeQuery(DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityDatabaseOperation _databaseOperation)
    {
        WHSCrossDockTemplate crossDockTemplate = _dataSourceCtx.getBuffer();

        switch (_databaseOperation)
        {
            case DataEntityDatabaseOperation::Insert:
                if (this.ProductQueryJson)
                {
                    this.initializeQueryFromJson(crossDockTemplate);
                }
                else
                {
                    this.initializeDefaultQuery(crossDockTemplate);
                }
                break;
            case DataEntityDatabaseOperation::Update:
                if (this.ProductQueryJson)
                {
                    this.initializeQueryFromJson(crossDockTemplate);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryFromJson</Name>
				<Source><![CDATA[
    private void initializeQueryFromJson(WHSCrossDockTemplate _crossDockTemplate)
    {
        Query deserializedQuery = SysQuery::newFromJson(this.ProductQueryJson);
        _crossDockTemplate.PackedQueryRun = new QueryRun(deserializedQuery).pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultQuery</Name>
				<Source><![CDATA[
    private void initializeDefaultQuery(WHSCrossDockTemplate _crossDockTemplate)
    {
        _crossDockTemplate.defaultPackedQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryStructure</Name>
				<Source><![CDATA[
    private void validateQueryStructure(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Query actualQuery = SysQuery::newFromJson(this.ProductQueryJson);
        Query expectedQuery = this.defaultExpectedQuery(_dataSourceCtx.getBuffer());

        if (!WHSQueryInitializer::initializeDataSource(expectedQuery.dataSourceNo(1), actualQuery.dataSourceNo(1)))
        {
            _dataSourceCtx.throwValidateWriteFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExpectedQuery</Name>
				<Source><![CDATA[
    private Query defaultExpectedQuery(WHSCrossDockTemplate _crossDockTemplate)
    {
        return _crossDockTemplate.defaultPackedQueryRun().query();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<FormRef>WHSCrossDockingTemplate</FormRef>
	<Label>@WAX:WHSCrossDockingTemplateV3EntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSCrossDockingTemplateV3Staging</DataManagementStagingTable>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateId</Name>
			<DataField>CrossDockTemplateId</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateDescription</Name>
			<DataField>Description</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FEFOExpirationDaysRange</Name>
			<DataField>FEFODaysRange</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PutLocationStorageCriteria</Name>
			<DataField>LocatingType</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MaximumTimeWindow</Name>
			<DataField>MaximumTimeValue</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MaximumTimeWindowUnit</Name>
			<DataField>MaximumTimeUnit</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumTimeWindow</Name>
			<DataField>MinimumTimeValue</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumTimeWindowUnit</Name>
			<DataField>MinimumTimeUnit</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DemandRequirementRule</Name>
			<DataField>DemandRequirements</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillReceiptRevalidateSupply</Name>
			<DataField>RevalidateOnReceipt</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsMaximumTimeWindowValidated</Name>
			<DataField>ValidateTimeWindow</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductQuery</Name>
			<DataField>PackedQueryRun</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SequenceNumber</Name>
			<DataField>SequenceNumber</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CrossDockingWorkTemplateId</Name>
			<DataField>WorkTemplateCode</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DemandReleasePolicy</Name>
			<DataField>DemandReleasePolicy</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseLocationDirectiveCode</Name>
			<DataField>LocationDirectiveHintCode</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductQueryJson</Name>
			<Label>@WAX:WHSCrossDockingProductQueryJson</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>-1</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseGroupId</Name>
			<DataField>WarehouseGroupId</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseSelection</Name>
			<DataField>WarehouseGroupAll</DataField>
			<DataSource>WHSCrossDockTemplate</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TemplateId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>WarehouseLocationDirectiveCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>WHSWarehouseLocationDirectiveCodeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>WarehouseLocationDirectiveCode</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WarehouseCrossDockingTemplateLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>WHSWarehouseWorkDirectiveEntity_DirectiveCode</Name>
					<Field>WarehouseLocationDirectiveCode</Field>
					<RelatedField>DirectiveCodeId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSCrossDockTemplate</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSCrossDockTemplate</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>