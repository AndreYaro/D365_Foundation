<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxImportInvoiceTaxIntegrationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxImportInvoiceTaxIntegrationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic after getting staging data
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxImportInvoiceTaxIntegrationEntityStaging staging;
        TaxIntgrExportDocument_CN taxIntgrExportDocument;
        TaxProfileTable_CN taxProfile;
        TaxImportInvoiceTaxIntegrationEntityStaging stagingDup;

        // Find non exist export invoice id
        select firstOnly Id from staging
            where staging.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus  == DMFTransferStatus::NotStarted
            notexists join taxIntgrExportDocument
                where staging.Id == taxIntgrExportDocument.Id;
        if (staging)
        {
            // Invoice %1 is not found
            throw error(strfmt("@GLS63363", staging.Id));
        }

        // Avoid duplicate update external invoice id for the same export invoice id
        select firstOnly ExternalInvoiceId, Id from staging
            where staging.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus  == DMFTransferStatus::NotStarted
            exists join taxIntgrExportDocument
                where staging.Id                                == taxIntgrExportDocument.Id
                    && taxIntgrExportDocument.ExternalInvoiceId != '';
        if (staging)
        {
            // The VAT invoice %1 is not imported, the internal invoice ID %2 already assigned with VAT invoice.
            throw error (strfmt("@TaxIntgr:VATAssigned", staging.ExternalInvoiceId, staging.Id));
        }

        // Find duplicate external invoice id in staging
        while select ExternalInvoiceId, count(RecId) from staging
            group by staging.ExternalInvoiceId
            where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus   == DMFTransferStatus::NotStarted
        {
            if (staging.RecId > 1)
            {
                select firstonly Id from stagingDup
                    where stagingDup.ExternalInvoiceId == staging.ExternalInvoiceId;
                taxIntgrExportDocument = TaxIntgrExportDocument_CN::findById(stagingDup.Id);

                taxProfile = TaxProfileTable_CN::findByTaxCode(taxIntgrExportDocument.TaxCode);
                if (taxProfile
                    && !taxProfile.IsDuplicatedVATInvNumAllowed)
                {
                    // The official invoice %1 has already been assigned.
                    throw error(strFmt("@TaxIntgr:VATOccupied", staging.ExternalInvoiceId));
                }
            }
        }

        // Find if external invoice id in staging exists in taxIntgrExportDocument
        select firstonly ExternalInvoiceId from staging
            where staging.DefinitionGroup   == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId      == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus   == DMFTransferStatus::NotStarted
            join taxIntgrExportDocument
                where staging.ExternalInvoiceId     != ''
                    && staging.ExternalInvoiceId    == taxIntgrExportDocument.ExternalInvoiceId;
        if (staging)
        {
            select firstonly Id from stagingDup
                where stagingDup.ExternalInvoiceId == staging.ExternalInvoiceId;
            taxIntgrExportDocument = TaxIntgrExportDocument_CN::findById(stagingDup.Id);

            taxProfile = TaxProfileTable_CN::findByTaxCode(taxIntgrExportDocument.TaxCode);
            if (taxProfile
                && !taxProfile.IsDuplicatedVATInvNumAllowed)
            {
                // The official invoice %1 has already been assigned.
                throw error(strFmt("@TaxIntgr:VATOccupied", staging.ExternalInvoiceId));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<Label>@GLS60748</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxImportInvoiceTaxIntegrationEntityStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalInvoiceId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<CountryRegionCodes>CN</CountryRegionCodes>
			<DataField>ExternalInvoiceId</DataField>
			<DataSource>TaxIntgrExportDocument_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Id</Name>
			<CountryRegionCodes>CN</CountryRegionCodes>
			<DataField>Id</DataField>
			<DataSource>TaxIntgrExportDocument_CN</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>Id</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxIntgrExportDocument_CN</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxIntgrExportDocument_CN</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>