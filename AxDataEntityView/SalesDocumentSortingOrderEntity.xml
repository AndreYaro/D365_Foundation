<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesDocumentSortingOrderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesDocumentSortingOrderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentNameComputedColumnDefinition</Name>
				<Source><![CDATA[
    public static str documentNameComputedColumnDefinition()
    {
        Map comparisonExpressions = SysComputedColumn::comparisionExpressionMap();
        comparisonExpressions.insert(
            SysComputedColumn::comparisonLiteral(tableNum(CustQuotationJour)),
            SysComputedColumn::returnLiteral(tableStr(CustQuotationJour)));
        comparisonExpressions.insert(
            SysComputedColumn::comparisonLiteral(tableNum(CustConfirmJour)),
            SysComputedColumn::returnLiteral(tableStr(CustConfirmJour)));
        comparisonExpressions.insert(
            SysComputedColumn::comparisonLiteral(tableNum(WMSPickingRoute)),
            SysComputedColumn::returnLiteral(tableStr(WMSPickingRoute)));
        comparisonExpressions.insert(
            SysComputedColumn::comparisonLiteral(tableNum(CustPackingSlipJour)),
            SysComputedColumn::returnLiteral(tableStr(CustPackingSlipJour)));
        comparisonExpressions.insert(
            SysComputedColumn::comparisonLiteral(tableNum(CustInvoiceJour)),
            SysComputedColumn::returnLiteral(tableStr(CustInvoiceJour)));

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(SalesDocumentSortingOrderEntity), dataEntityDataSourceStr(SalesDocumentSortingOrderEntity, FormLetterSortingParameters), fieldStr(FormLetterSortingParameters, SortingTableId)),
            comparisonExpressions,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNameComputedColumnDefinition</Name>
				<Source><![CDATA[
    public static str fieldNameComputedColumnDefinition()
    {
        Map fieldsCustQuotationJour =  FormLetterSortingParametersEntityHelper::generateComparisonMapForFieldIds(tablenum(CustQuotationJour));
        Map fieldsCustConfirmJour =  FormLetterSortingParametersEntityHelper::generateComparisonMapForFieldIds(tablenum(CustConfirmJour));
        Map fieldsWMSPickingRoute =  FormLetterSortingParametersEntityHelper::generateComparisonMapForFieldIds(tablenum(WMSPickingRoute));
        Map fieldsCustPackingSlipJour =  FormLetterSortingParametersEntityHelper::generateComparisonMapForFieldIds(tablenum(CustPackingSlipJour));
        Map fieldsCustInvoiceJour =  FormLetterSortingParametersEntityHelper::generateComparisonMapForFieldIds(tablenum(CustInvoiceJour));

        str sortingTableId_FormLetterSortingParametersEntity = SysComputedColumn::comparisonField(tableStr(SalesDocumentSortingOrderEntity), dataEntityDataSourceStr(SalesDocumentSortingOrderEntity, FormLetterSortingParameters), fieldStr(FormLetterSortingParameters, SortingTableId));
        str fieldId_FormLetterSortingParametersEntity = SysComputedColumn::comparisonField(tableStr(SalesDocumentSortingOrderEntity), dataEntityDataSourceStr(SalesDocumentSortingOrderEntity, FormLetterSortingParameters), fieldStr(FormLetterSortingParameters, fieldId));

        return
        SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                sortingTableId_FormLetterSortingParametersEntity,
                SysComputedColumn::comparisonLiteral(tableNum(CustQuotationJour))
            ),
            SysComputedColumn::switch(
                fieldId_FormLetterSortingParametersEntity,
                fieldsCustQuotationJour,
                SysComputedColumn::returnLiteral('')
            ),
            SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    sortingTableId_FormLetterSortingParametersEntity,
                    SysComputedColumn::comparisonLiteral(tableNum(CustConfirmJour))
                ),
                SysComputedColumn::switch(
                    fieldId_FormLetterSortingParametersEntity,
                    fieldsCustConfirmJour,
                    SysComputedColumn::returnLiteral('')
                ),
                SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        sortingTableId_FormLetterSortingParametersEntity,
                        SysComputedColumn::comparisonLiteral(tableNum(WMSPickingRoute))
                    ),
                    SysComputedColumn::switch(
                        fieldId_FormLetterSortingParametersEntity,
                        fieldsWMSPickingRoute,
                        SysComputedColumn::returnLiteral('')
                    ),
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            sortingTableId_FormLetterSortingParametersEntity,
                            SysComputedColumn::comparisonLiteral(tableNum(CustPackingSlipJour))
                        ),
                        SysComputedColumn::switch(
                            fieldId_FormLetterSortingParametersEntity,
                            fieldsCustPackingSlipJour,
                            SysComputedColumn::returnLiteral('')
                        ),
                        SysComputedColumn::if(
                            SysComputedColumn::equalExpression(
                                sortingTableId_FormLetterSortingParametersEntity,
                                SysComputedColumn::comparisonLiteral(tableNum(CustInvoiceJour))
                            ),
                            SysComputedColumn::switch(
                                fieldId_FormLetterSortingParametersEntity,
                                fieldsCustInvoiceJour,
                                SysComputedColumn::returnLiteral('')
                            ),
                            SysComputedColumn::returnLiteral('')
                        )
                    )
                )
            )
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDocumentNameComputedColumnDefinition</Name>
				<Source><![CDATA[
    public static str subDocumentNameComputedColumnDefinition()
    {
        return  SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(SalesDocumentSortingOrderEntity), dataEntityDataSourceStr(SalesDocumentSortingOrderEntity, FormLetterSortingParameters), fieldStr(FormLetterSortingParameters, SortingSubTableId)),
                        SysComputedColumn::comparisonLiteral(tableNum(CustInvoiceTable))
                    ),
                    SysComputedColumn::returnLiteral(tableStr(CustInvoiceTable)),
                    SysComputedColumn::returnLiteral('')
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(SalesDocumentSortingOrderEntity, SortingTableId),
                [fieldNum(SalesDocumentSortingOrderEntity, DocumentName)]],
            [fieldNum(SalesDocumentSortingOrderEntity, FieldId),
                [fieldNum(SalesDocumentSortingOrderEntity, SortingTableId), fieldNum(SalesDocumentSortingOrderEntity, FieldName)]],
            [fieldNum(SalesDocumentSortingOrderEntity, SortingSubTableId),
                [fieldNum(SalesDocumentSortingOrderEntity, SubDocumentName)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesDocumentSortingOrderEntity, SortingTableId):
                this.defaultTableId();
                break;

            case fieldNum(SalesDocumentSortingOrderEntity, FieldId):
                this.defaultFieldId();
                break;

            case fieldNum(SalesDocumentSortingOrderEntity, SortingSubTableId):
                this.defaultSubTableId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTableId</Name>
				<Source><![CDATA[
    private void defaultTableId()
    {
        if (this.DocumentName)
        {
            if (this.isFieldSet(fieldNum(SalesDocumentSortingOrderEntity, DocumentName)))
            {
                this.SortingTableId = tableName2Id(this.DocumentName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldId</Name>
				<Source><![CDATA[
    private void defaultFieldId()
    {
        if (this.SortingTableId && this.FieldName)
        {
            if (this.isFieldSet(fieldNum(SalesDocumentSortingOrderEntity, SortingTableId))
                && this.isFieldSet(fieldNum(SalesDocumentSortingOrderEntity, FieldName)))
            {
                // the logic in the table for this entity expects the fieldId to be array-based
                const int firstArrayIdx = 1;
                FieldId resolvedFieldId = fieldName2Id(this.SortingTableId, this.FieldName);
                this.FieldId = new SysDictField(this.SortingTableId, resolvedFieldId, firstArrayIdx).id();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSubTableId</Name>
				<Source><![CDATA[
    private void defaultSubTableId()
    {
        if (this.SubDocumentName)
        {
            if (this.isFieldSet(fieldNum(SalesDocumentSortingOrderEntity, SubDocumentName)))
            {
                this.SortingSubTableId = tableName2Id(this.SubDocumentName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(SalesDocumentSortingOrderEntity, DocumentName):
                ret = this.validateDocumentName() && ret;
                break;
            case fieldNum(SalesDocumentSortingOrderEntity, FieldName):
                ret = this.validateFieldName() && ret;
                break;
            case fieldNum(SalesDocumentSortingOrderEntity, SubDocumentName):
                ret = this.validateSubDocumentName() && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocumentName</Name>
				<Source><![CDATA[
    private boolean validateDocumentName()
    {
        switch (tableName2Id(this.DocumentName))
        {
            case tableNum(CustQuotationJour):
            case tableNum(CustConfirmJour):
            case tableNum(WMSPickingRoute):
            case tableNum(CustPackingSlipJour):
            case tableNum(CustInvoiceJour):
                return true;
            default:
                return checkFailed("@SYS16078");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubDocumentName</Name>
				<Source><![CDATA[
    private boolean validateSubDocumentName()
    {
        if (this.SubDocumentName == '')
        {
            return true;
        }

        switch (tableName2Id(this.SubDocumentName))
        {
            case tableNum(CustInvoiceTable):
                return (tableName2Id(this.DocumentName) == tableNum(CustInvoiceJour));
            default:
                return checkFailed("@SCM:InvalidSubDocumentName");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldName</Name>
				<Source><![CDATA[
    private boolean validateFieldName()
    {
        TableId tableId = tableName2Id(this.DocumentName);
        FieldId fieldId = fieldName2Id(tableId,this.FieldName);

        if (!fieldId)
        {
            return checkFailed("@SCM:InvalidFieldTableName");
        }

        if (!FormLetterSortingParameters::isFieldVisible(tableId,fieldId))
        {
            return checkFailed("@SCM:FieldNotVisible");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesDocumentSortingOrderEntityDevDoc</DeveloperDocumentation>
	<FormRef>SalesFormLetterSortingParameters</FormRef>
	<Label>@SCM:SalesFormSorting</Label>
	<Tags>SAD</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SalesDocumentSortingOrderStaging</DataManagementStagingTable>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FieldId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>FieldId</DataField>
			<DataSource>FormLetterSortingParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SortingSubTableId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SortingSubTableId</DataField>
			<DataSource>FormLetterSortingParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SortingTableId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>SortingTableId</DataField>
			<DataSource>FormLetterSortingParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>FieldName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fieldNameComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>FieldName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DocumentName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>documentNameComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>TableName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SubDocumentName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>subDocumentNameComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>TableName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Position</DataField>
			<DataSource>FormLetterSortingParameters</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>FieldName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocumentName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SubDocumentName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>FormLetterSortingParameters</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>FormLetterSortingParameters</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>SortingTableId</Name>
						<Field>SortingTableId</Field>
						<Value>(FormLetterSortingParametersEntityHelper::salesTableRangeValues())</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>