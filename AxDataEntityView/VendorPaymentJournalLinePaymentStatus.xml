<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorPaymentJournalLinePaymentStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendorPaymentJournalLinePaymentStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(VendorPaymentJournalLinePaymentStatus, LedgerJournalTrans):
                    this.updateJounalBatchNumber(_entityCtx, _dataSourceCtx);
                    this.validateJournalType();

                default:
                    break;
            }

            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        RecId ledgerJournalTableRecId;
        try
        {
            ledgerJournalTableRecId = this.registerLedgerJournalTable(_dataSourceCtx);
            return super(_entityCtx, _dataSourceCtx);
        }
        finally
        {
            this.unregisterLedgerJournalTable(ledgerJournalTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLedgerJournalTable</Name>
				<Source><![CDATA[
    private RecId registerLedgerJournalTable(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        RecId ledgerJournalTableRecId;
        if (VendPaymTransferWithApprovalFlight::instance().isEnabled()
            && _dataSourceCtx.name() == dataEntityDataSourceStr(VendorPaymentJournalLinePaymentStatus, LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
            LedgerJournalTable ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
            if (ledgerJournalTable.ledgerJournalName().JournalType == LedgerJournalType::Payment)
            {
                ledgerJournalTableRecId = ledgerJournalTable.RecId;
                VendPaymTransferInProgress::register(ledgerJournalTableRecId);
            }
        }
        return ledgerJournalTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterLedgerJournalTable</Name>
				<Source><![CDATA[
    private void unregisterLedgerJournalTable(RefRecId _ledgerJournalTableRecId)
    {
        if (_ledgerJournalTableRecId
            && VendPaymTransferInProgress::registered(_ledgerJournalTableRecId))
        {
            VendPaymTransferInProgress::unregister(_ledgerJournalTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJounalBatchNumber</Name>
				<Source><![CDATA[
    private void updateJounalBatchNumber(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update
            && this.NewJournalBatchNumber != ''
            && this.NewJournalBatchNumber != this.JournalBatchNumber)
        {
            LedgerJournalTable newLedgerJournalTable = LedgerJournalTable::find(this.NewJournalBatchNumber);
            LedgerJournalTable currentLedgerJournalTable = LedgerJournalTable::find(this.JournalBatchNumber);

            if (newLedgerJournalTable.JournalType != currentLedgerJournalTable.JournalType)
            {
                throw error(strFmt("@CashManagement:WrongJournalType", newLedgerJournalTable.JournalName, currentLedgerJournalTable.JournalType));
            }

            if (newLedgerJournalTable.NumberSequenceTable != currentLedgerJournalTable.NumberSequenceTable)
            {
                NumberSeq numberSeq = NumberSeq::newGetVoucherFromId(newLedgerJournalTable.NumberSequenceTable);

                LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
                ledgerJournalTrans.Voucher = numberSeq.voucher();
            }

            this.JournalBatchNumber = this.NewJournalBatchNumber;
            this.LineNumber = LedgerJournalTrans::lastLineNum(this.NewJournalBatchNumber) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalType</Name>
				<Source><![CDATA[
    private void validateJournalType()
    {
        LedgerJournalTable currentLedgerJournalTable = LedgerJournalTable::find(this.JournalBatchNumber);

        if (currentLedgerJournalTable.RecId != 0 && currentLedgerJournalTable.JournalType != LedgerJournalType::Payment)
        {
            throw error(strFmt("@CashManagement:WrongJournalType", currentLedgerJournalTable.JournalName, currentLedgerJournalTable.JournalType));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>LedgerJournalTransVendPaym</FormRef>
	<Label>@CashManagement:VendorPaymentJournalLinePaymentStatus</Label>
	<Tags>Journal</Tags>
	<DataManagementStagingTable>VendorPaymentJournalLineUpdateStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<Modules>AccountsPayable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>VendorPaymentJournalLinesPaymentStatus</PublicCollectionName>
	<PublicEntityName>VendorPaymentJournalLinePaymentStatus</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<Mandatory>Yes</Mandatory>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentReference</Name>
			<DataField>PaymReference</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ErrorCodePayment</Name>
			<DataField>ErrorCodePayment</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<DataField>ExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>NewJournalBatchNumber</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:NewJournalBatchNumber</Label>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentStatus</Name>
			<AccessModifier>Internal</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PaymentStatus</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTrans</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>