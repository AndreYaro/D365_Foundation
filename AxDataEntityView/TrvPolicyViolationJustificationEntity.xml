<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvPolicyViolationJustificationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvPolicyViolationJustificationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNaturalKeyForViolatingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key from the target table defined in field ViolationJustificationType
    /// </summary>
    private static str getNaturalKeyForViolatingRecord()
    {
        const str selectStatementBase = '(SELECT %1 FROM %2 a WHERE a.RECID = %3)';
        DictTable dictTableExpTrans = new DictTable(tableNum(TrvExpTrans));
        DictTable dictTableExpTable = new DictTable(tableNum(TrvExpTable));

        str violatingRecordFieldValue = SysComputedColumn::returnField(tablestr(TrvPolicyViolationJustificationEntity),
                                            dataEntityDataSourceStr(TrvPolicyViolationJustificationEntity, TrvPolicyViolationJustification),
                                            fieldStr(TrvPolicyViolationJustification, VIOLATINGRECORD));
        str selectStatementExpTrans = strFmt(selectStatementBase,
                                            dictTableExpTrans.fieldName(fieldNum(TrvExpTrans, ExpTransNumber), DbBackend::Sql),
                                            dictTableExpTrans.name(DbBackend::Sql),
                                            violatingRecordFieldValue);
        str selectStatementExpTable = strFmt(selectStatementBase,
                                            dictTableExpTable.fieldName(fieldNum(TrvExpTable, ExpNumber), DbBackend::Sql),
                                            dictTableExpTable.Name(DbBackend::Sql),
                                            violatingRecordFieldValue);

        Map sqlStmt = new Map(Types::String, Types::String);
        sqlStmt.insert(int2Str(enum2int(TrvPolicyViolationJustificationTypeEnum::TrvExpLine)), selectStatementExpTrans);
        sqlStmt.insert(int2Str(enum2int(TrvPolicyViolationJustificationTypeEnum::TrvExpHeader)), selectStatementExpTable);

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(TrvPolicyViolationJustificationEntity),
                                                tableStr(TrvPolicyViolationJustification),
                                                fieldStr(TrvPolicyViolationJustification, VIOLATIONJUSTIFICATIONTYPE)),
            sqlStmt,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(TrvPolicyViolationJustificationEntity, TrvPolicyViolationJustification))
        {
            //
            // Convert the data in entity field ViolatingRecordId, which contains a natural key for
            // the table indicated in ViolationJustificationType, to its RecId and store that in ViolatingRecord field
            //

            TrvPolicyViolationJustification buffer = _dataSourceCtx.getBuffer();

            if (this.ViolatingRecordId)
            {
                switch (this.ViolationJustificationType)
                {
                    case TrvPolicyViolationJustificationTypeEnum::TrvExpLine:
                        buffer.ViolatingRecord = TrvExpTrans::findByTransactionNumber(this.ViolatingRecordId).RecId;
                        break;
                    case TrvPolicyViolationJustificationTypeEnum::TrvExpHeader:
                        buffer.ViolatingRecord = TrvExpTable::find(this.ViolatingRecordId).RecId;
                        break;
                    default:
                        throw error("@SYS345511");                        
                }
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<Label>@SYS302366</Label>
	<Tags>Policies</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TrvPolicyViolationJustificationStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>TravelAndExpense</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PolicyViolationJustifications</PublicCollectionName>
	<PublicEntityName>PolicyViolationJustification</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JustificationText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViolationJustificationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JustificationText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Action</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JustificationId</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>JustificationId</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Action</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>Action</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JustificationText</Name>
			<DataField>Justification</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JustifyingWorker</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>JustifyingWorker</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonnelNumber</Name>
			<DataField>PersonnelNumber</DataField>
			<DataSource>TrvHcmWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ViolatingRecord</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>No</AllowEdit>
			<DataField>ViolatingRecord</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ViolatingRecordId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Expense:ViolatingRecord</Label>
			<ComputedFieldMethod>getNaturalKeyForViolatingRecord</ComputedFieldMethod>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ViolationJustificationType</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>ViolationJustificationType</DataField>
			<DataSource>TrvPolicyViolationJustification</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JustificationId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TrvPolicyViolationJustification</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TrvPolicyViolationJustification</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvHcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>TrvHcmWorker</Name>
								<JoinRelationName>Justifies</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>