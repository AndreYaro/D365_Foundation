<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGDimensionInterval_RUEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGDimensionInterval_RUEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(LedgerRRGDimensionInterval_RUEntity, LedgerRRGDimensionInterval_RU))
        {
            LedgerRRGDimensionInterval_RU dimensionInterval = _dataSourceCtx.getBuffer();
            dimensionInterval.DimTableId = tableName2Id(this.RefTableName);

            switch (dimensionInterval.DimTableId)
            {
                case tableNum(LedgerRRGCellTable_RU):
                    LedgerRRGCellTable_RU ledgerRRGCellTable_RU;

                    select firstonly RecId from ledgerRRGCellTable_RU
                        where ledgerRRGCellTable_RU.LineId == str2Guid(this.RefLineId);

                    dimensionInterval.DimRecId = ledgerRRGCellTable_RU.RecId;
                    break;

                case tableNum(LedgerRRGEQueries_W):
                    dimensionInterval.DimRecId = LedgerRRGEQueries_W::findByQueryId(this.RefLineId).RecId;
                    break;

                case tableNum(LedgerRRGOperationTable_RU):
                    LedgerRRGOperationTable_RU ledgerRRGOperationTable_RU;

                    select firstonly RecId from ledgerRRGOperationTable_RU
                        where ledgerRRGOperationTable_RU.LineId == str2Guid(this.RefLineId);

                    dimensionInterval.DimRecId = ledgerRRGOperationTable_RU.RecId;
                    break;

                case tableNum(LedgerRRGReportTable_RU):
                    dimensionInterval.DimRecId = LedgerRRGReportTable_RU::findByRepCode(this.RefLineId).RecId;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        this.RefTableName = tableId2Name(this.DimTableId);

        switch (this.DimTableId)
        {
            case tableNum(LedgerRRGCellTable_RU):
                this.RefLineId = guid2Str(LedgerRRGCellTable_RU::findRecId(this.DimRecId).LineId);
                break;

            case tableNum(LedgerRRGEQueries_W):
                this.RefLineId = LedgerRRGEQueries_W::find(this.DimRecId).QueryId;
                break;

            case tableNum(LedgerRRGOperationTable_RU):
                this.RefLineId = guid2Str(LedgerRRGOperationTable_RU::findByRecID(this.DimRecId).LineId);
                break;

            case tableNum(LedgerRRGReportTable_RU):
                this.RefLineId = LedgerRRGReportTable_RU::find(this.DimRecId).RepCode;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(LedgerRRGDimensionInterval_RUEntity, LedgerRRGDimensionInterval_RU))
        {
            LedgerRRGDimensionInterval_RU dimensionInterval = _dataSourceCtx.getBuffer();
            this.RefTableName = tableId2Name(dimensionInterval.DimTableId);

            switch (dimensionInterval.DimTableId)
            {
                case tableNum(LedgerRRGCellTable_RU):
                    this.RefLineId = guid2Str(LedgerRRGCellTable_RU::findRecId(dimensionInterval.DimRecId).LineId);
                    break;

                case tableNum(LedgerRRGEQueries_W):
                    this.RefLineId = LedgerRRGEQueries_W::find(dimensionInterval.DimRecId).QueryId;
                    break;

                case tableNum(LedgerRRGOperationTable_RU):
                    this.RefLineId = guid2Str(LedgerRRGOperationTable_RU::findByRecID(dimensionInterval.DimRecId).LineId);
                    break;

                case tableNum(LedgerRRGReportTable_RU):
                    this.RefLineId = LedgerRRGReportTable_RU::find(dimensionInterval.DimRecId).RepCode;
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU,LT,LV,EE,CZ,HU,PL</CountryRegionCodes>
	<Label>@LedgerRRG:FinancialReportsDimensionIntervals</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LedgerRRGDimensionInterval_RUStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RRGDimensionInterval_RU</PublicCollectionName>
	<PublicEntityName>RRGDimensionInterval_RU</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAttributeName</Name>
			<DataField>Name</DataField>
			<DataSource>DimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionFromValue</Name>
			<DataField>DimensionFromValue</DataField>
			<DataSource>LedgerRRGDimensionInterval_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionToValue</Name>
			<DataField>DimensionToValue</DataField>
			<DataSource>LedgerRRGDimensionInterval_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimRecID</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DimRecID</DataField>
			<DataSource>LedgerRRGDimensionInterval_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimTableID</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DimTableID</DataField>
			<DataSource>LedgerRRGDimensionInterval_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>RefLineId</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>RefTableName</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>100</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DimensionAttributeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DimensionFromValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DimensionToValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RefLineId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RefTableName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerRRGDimensionInterval_RU</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerRRGDimensionInterval_RU</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionAttribute</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DimensionAttribute</Field>
								<JoinDataSource>LedgerRRGDimensionInterval_RU</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>