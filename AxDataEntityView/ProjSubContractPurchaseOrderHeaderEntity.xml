<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSubContractPurchaseOrderHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjSubContractPurchaseOrderHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initilizes the values
    /// </summary>
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(ProjSubContractPurchaseOrderHeaderEntity, PurchaseOrderNumber), PurchParameters::numRefPurchId());
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert entity operation.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns>true if succeed; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
         switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjSubContractPurchaseOrderHeaderEntity, PurchTable):
                PurchTable purchTable = _dataSourceCtx.getBuffer();
                purchTable.initValue(PurchaseType::Purch);
                purchTable.initFromVendTable();
                purchTable.initFromProjInvoiceTable();
                purchTable.ChangeRequestRequired = NoYes::No;
                this.PurchStatus = PurchStatus::Backorder;
                break;

            case dataEntityDataSourceStr(ProjSubContractPurchaseOrderHeaderEntity, ProjSubConTable):
                ProjSubConTable projSubConTable = _dataSourceCtx.getBuffer();
                projSubConTable.SubConNumber = this.ProjSubContractNumber;
                projSubConTable.PurchId = this.PurchaseOrderNumber;
                break;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update entity operation.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    /// <returns>true if succeed; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean res;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjSubContractPurchaseOrderHeaderEntity, PurchTable))
        {
            _dataSourceCtx.skipDefaultRow(true);
            this.initializeFieldsOnUpdate(_dataSourceCtx.getBuffer());
            res = super(_entityCtx, _dataSourceCtx);

            this.processSubcontractStatusReasonUpdate();
        }
        else
        {
            res = super(_entityCtx, _dataSourceCtx);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSubcontractStatusReasonUpdate</Name>
				<Source><![CDATA[
    private void processSubcontractStatusReasonUpdate()
    {
        PurchTable purchTable = PurchTable::findBySubConNumber(this.ProjSubContractNumber);

        if (this.SubconStatus == ProjSubconStatus::Confirmed 
            && purchTable.DocumentState == VersioningDocumentState::Approved)
        {
            PurchFormLetter formletter = PurchFormLetter::construct(DocumentStatus::PurchaseOrder);
            formletter.update(purchTable, purchTable.PurchId);
        }
        else if (this.SubconStatus == ProjSubconStatus::Canceled || this.SubconStatus == ProjSubconStatus::Closed)
        {
            PurchCancel::cancelPurchaseOrder(purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFieldsOnUpdate</Name>
				<Source><![CDATA[
    private void initializeFieldsOnUpdate(PurchTable _incomingPurchTable)
    {
        PurchTable orig = _incomingPurchTable.extensionOrig();
        ListIterator updateIterator = new ListIterator(this.fieldsRequiringReinitialization());

        while (updateIterator.more())
        {
            fieldId updateField = updateIterator.value();

            if (_incomingPurchTable.(updateField) != orig.(updateField))
            {
                _incomingPurchTable.modifiedFieldWithUserInput(updateField);
                if (updateField == fieldNum(PurchTable, OrderAccount))
                {
                    _incomingPurchTable.ChangeRequestRequired = NoYes::No;
                }
            }

            updateIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsRequiringReinitialization</Name>
				<Source><![CDATA[
    private List fieldsRequiringReinitialization()
    {
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(PurchTable, OrderAccount));

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjSubContractPurchaseOrderHeaderEntityDevDoc</DeveloperDocumentation>
	<FormRef>PurchTable</FormRef>
	<Label>@Proj:ProjSubContractPurchaseOrderHeaderEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjSubContractPurchaseOrderHeaderStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>SubContractPurchaseOrderHeaders</PublicCollectionName>
	<PublicEntityName>SubContractPurchaseOrderHeader</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderAccount</Name>
			<DataField>OrderAccount</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingDate</Name>
			<DataField>AccountingDate</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjSubContractNumber</Name>
			<DataField>ProjSubContractNumber</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchaseOrderNumber</Name>
			<DataField>PurchId</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurchStatus</Name>
			<DataField>PurchStatus</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>PurchTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConName</Name>
			<DataField>SubConName</DataField>
			<DataSource>ProjSubConTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConState</Name>
			<DataField>SubConState</DataField>
			<DataSource>ProjSubConTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConStatus</Name>
			<DataField>SubConStatus</DataField>
			<DataSource>ProjSubConTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubConDate</Name>
			<DataField>SubConDate</DataField>
			<DataSource>ProjSubConTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjSubContractNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PurchTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PurchTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjSubConTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjSubConTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjSubContractNumber</Field>
								<JoinDataSource>PurchTable</JoinDataSource>
								<RelatedField>SubConNumber</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>