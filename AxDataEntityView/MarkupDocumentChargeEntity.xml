<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupDocumentChargeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupDocumentChargeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(MarkupDocumentChargeEntity, MarkupTrans):
                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                    case DataEntityDatabaseOperation::Update:
                        this.skipDataSourceValidateField(fieldNum(MarkupDocumentChargeEntity, ModuleType), true);
                        this.skipDataSourceValidateField(fieldNum(MarkupDocumentChargeEntity, ChargeLineNumber), true);
                        this.skipDataSourceValidateField(fieldNum(MarkupDocumentChargeEntity, IsBrokerContractCharge), true);

                        MarkupTrans markupTrans = _dataSourceCtx.getBuffer();

                        // LineNum field is mandatory - ensure that field is always set to support correct defaulting on markupTrans in insert and update scenarios
                        markupTrans.fieldState(fieldNum(MarkupTrans, LineNum), FieldState::Set);

                        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                        {
                            markupTrans.defaultRow();

                            // Remap entity fields to buffer that is set using the initFromCaller method on MarkupTrans table from defaultRow call
                            super(_entityCtx, _dataSourceCtx);
                        }

                        // Skip defaultRow in update and insert to avoid override of entity fields
                        _dataSourceCtx.skipDefaultRow(true);
                        break;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(MarkupDocumentChargeEntity, FixedChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Fixed);
                break;
            case fieldNum(MarkupDocumentChargeEntity, UnitChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Pcs);
                break;
            case fieldNum(MarkupDocumentChargeEntity, ChargePercentage):
                this.defaultChargeCategoryValue(MarkupCategory::Percent);
                break;
            case fieldNum(MarkupDocumentChargeEntity, IntercompanyChargePercentage):
                this.defaultChargeCategoryValue(MarkupCategory::InterCompanyPercent);
                break;
            case fieldNum(MarkupDocumentChargeEntity, ExternalChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::External);
                break;
            case fieldNum(MarkupDocumentChargeEntity, ProportionalChargeAmount):
                this.defaultChargeCategoryValue(MarkupCategory::Proportional);
                break;
            case fieldNum(MarkupDocumentChargeEntity, Value):
                if ((this.ChargeCategory == MarkupCategory::UnitSpecific || this.ChargeCategory == MarkupCategory::UnitSpecificMatch)
                     && AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
                {
                    break;
                }
                this.defaultValue();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultChargeCategoryValue</Name>
				<Source><![CDATA[
    private void defaultChargeCategoryValue(MarkupCategory _chargeCategory)
    {
        if (this.isFieldSet(fieldNum(MarkupDocumentChargeEntity, ChargeCategory)))
        {
            if (this.ChargeCategory != _chargeCategory)
            {
                this.(this.getChargeCategoryValueFieldId(_chargeCategory)) = 0.0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValue</Name>
				<Source><![CDATA[
    private void defaultValue()
    {
        FieldId chargeCategoryValueFieldId = this.getChargeCategoryValueFieldId(this.ChargeCategory);

        if (this.isFieldSet(fieldNum(MarkupDocumentChargeEntity, ChargeCategory))  ||
            this.isFieldSet(chargeCategoryValueFieldId))
        {
            this.Value = this.(chargeCategoryValueFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [fieldNum(MarkupDocumentChargeEntity, FixedChargeAmount), this.fixedChargeAmountDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, UnitChargeAmount), this.unitChargeAmountDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, ChargePercentage), this.chargePercentageDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, IntercompanyChargePercentage), this.intercompanyChargePercentageDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, ExternalChargeAmount), this.externalChargeAmountDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, ProportionalChargeAmount), this.proportionalChargeAmountDefaultingDependencies()],
                [fieldNum(MarkupDocumentChargeEntity, Value), this.valueDefaultingDependencies()]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container fixedChargeAmountDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container unitChargeAmountDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargePercentageDefaultingDependencies</Name>
				<Source><![CDATA[
    private container chargePercentageDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyChargePercentageDefaultingDependencies</Name>
				<Source><![CDATA[
    private container intercompanyChargePercentageDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container externalChargeAmountDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>proportionalChargeAmountDefaultingDependencies</Name>
				<Source><![CDATA[
    private container proportionalChargeAmountDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueDefaultingDependencies</Name>
				<Source><![CDATA[
    private container valueDefaultingDependencies()
    {
        return [fieldNum(MarkupDocumentChargeEntity, ChargeCategory),
                fieldNum(MarkupDocumentChargeEntity, UnitChargeAmount),
                fieldNum(MarkupDocumentChargeEntity, FixedChargeAmount),
                fieldNum(MarkupDocumentChargeEntity, ChargePercentage),
                fieldNum(MarkupDocumentChargeEntity, IntercompanyChargePercentage),
                fieldNum(MarkupDocumentChargeEntity, ExternalChargeAmount),
                fieldNum(MarkupDocumentChargeEntity, ProportionalChargeAmount)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(MarkupDocumentChargeEntity, FixedChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Fixed) && ret;
                break;

            case fieldNum(MarkupDocumentChargeEntity, UnitChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Pcs) && ret;
                break;

            case fieldNum(MarkupDocumentChargeEntity, ChargePercentage):
                ret = this.checkChargeCategoryValue(MarkupCategory::Percent) && ret;
                break;

            case fieldNum(MarkupDocumentChargeEntity, IntercompanyChargePercentage):
                ret = this.checkChargeCategoryValue(MarkupCategory::InterCompanyPercent) && ret;
                break;

            case fieldNum(MarkupDocumentChargeEntity, ExternalChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::External) && ret;
                break;

            case fieldNum(MarkupDocumentChargeEntity, ProportionalChargeAmount):
                ret = this.checkChargeCategoryValue(MarkupCategory::Proportional) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChargeCategoryValue</Name>
				<Source><![CDATA[
    private boolean checkChargeCategoryValue(MarkupCategory _chargeCategory)
    {
        boolean ok = true;

        if (this.chargeCategory != _chargeCategory)
        {
            if (this.(this.getChargeCategoryValueFieldId(_chargeCategory)) != 0.0)
            {
                ok = this.chargeCategoryValueCheckFailed(_chargeCategory);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargeCategoryValueCheckFailed</Name>
				<Source><![CDATA[
    private boolean chargeCategoryValueCheckFailed(MarkupCategory _correctChargeCategory)
    {
        FieldId correctChargeCategoryValueFieldId   = this.getChargeCategoryValueFieldId(_correctChargeCategory);
        FieldId incorrectChargeCategoryValueFieldId = this.getChargeCategoryValueFieldId(this.chargeCategory);

        return checkFailed(strFmt("@SCM:ChargeCategoryAndChargeValueMismatchErrorMessage",
                                   fieldId2pname(tablenum(MarkupDocumentChargeEntity), correctChargeCategoryValueFieldId),
                                   fieldPName(MarkupDocumentChargeEntity, ChargeCategory),
                                   _correctChargeCategory,
                                   fieldId2pname(tablenum(MarkupDocumentChargeEntity), incorrectChargeCategoryValueFieldId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargeCategoryValueFieldId</Name>
				<Source><![CDATA[
    private FieldId getChargeCategoryValueFieldId(MarkupCategory _chargeCategory)
    {
        FieldId chargeCategoryValueFieldId;

        switch (_chargeCategory)
        {
            case MarkupCategory::Fixed:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, FixedChargeAmount);
                break;

            case MarkupCategory::Pcs:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, UnitChargeAmount);
                break;

            case MarkupCategory::Percent:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, ChargePercentage);
                break;

            case MarkupCategory::InterCompanyPercent:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, IntercompanyChargePercentage);
                break;

            case MarkupCategory::External:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, ExternalChargeAmount);
                break;

            case MarkupCategory::Proportional:
                chargeCategoryValueFieldId = fieldNum(MarkupDocumentChargeEntity, ProportionalChargeAmount);
                break;

            default:
                throw error(strFmt("@SCM:ChargeCategoryValueCannotBeSpecified", _chargeCategory, fieldPName(MarkupDocumentChargeEntity, ChargeCategory)));
        }

        return chargeCategoryValueFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>FixedChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>FixedChargeAmount</c> field.
    /// </returns>
    private static str fixedChargeAmountDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Fixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargePercentageDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ChargePercentage</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ChargePercentage</c> field.
    /// </returns>
    private static str chargePercentageDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Percent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>UnitChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>UnitChargeAmount</c> field.
    /// </returns>
    private static str unitChargeAmountDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Pcs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyChargePercentageDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>IntercompanyChargePercentage</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>IntercompanyChargePercentage</c> field.
    /// </returns>
    private static str intercompanyChargePercentageDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::InterCompanyPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ExternalChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ExternalChargeAmount</c> field.
    /// </returns>
    private static str externalChargeAmountDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::External);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proportionalChargeAmountDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>ProportionalChargeAmount</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>ProportionalChargeAmount</c> field.
    /// </returns>
    private static str proportionalChargeAmountDefinition()
    {
        return MarkupDocumentChargeEntity::chargeCategoryValueDefinition(MarkupCategory::Proportional);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chargeCategoryValueDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining a computed field for the specified category.
    /// </summary>
    /// <param name = "_chargeCategory">
    /// Category to define a computed field for.
    /// </param>
    /// <returns>
    /// A string to compute a category value field.
    /// </returns>
    private static str chargeCategoryValueDefinition(MarkupCategory _chargeCategory)
    {
        return SysComputedColumn::codeDependentRelation(tableStr(MarkupDocumentChargeEntity),
                                                        dataEntityDataSourceStr(MarkupDocumentChargeEntity, MarkupTrans),
                                                        fieldStr(MarkupTrans, MarkupCategory),
                                                        _chargeCategory,
                                                        fieldStr(MarkupTrans, Value),
                                                        0.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyChargeDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the <c>IsIntercompanyCharge</c> computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>IsIntercompanyCharge</c> field.
    /// </returns>
    private static str isIntercompanyChargeDefinition()
    {
        return SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonLiteral(''),
                    SysComputedColumn::comparisonField(tablestr(MarkupDocumentChargeEntity), dataEntityDataSourceStr(MarkupDocumentChargeEntity, MarkupTrans), fieldstr(MarkupTrans, InterCompanyCompanyId))),
                SysComputedColumn::returnLiteral(NoYes::No),
                SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Markup</ConfigurationKey>
	<FormRef>MarkupTable</FormRef>
	<Label>@SYS13015</Label>
	<Tags>Charges Setup</Tags>
	<EntityCategory>Document</EntityCategory>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CalculatedDocumentCurrencyAmount</Name>
			<DataField>CalculatedAmount</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeAccountingCurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeCategory</Name>
			<DataField>MarkupCategory</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeCode</Name>
			<DataField>MarkupCode</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeCreationMethod</Name>
			<DataField>MCRMarkupTransCreatedBy</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeDescription</Name>
			<DataField>Txt</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeLineNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>LineNum</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeOverrideInformationSubcodeId</Name>
			<DataField>MCRReasonCode</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CorrectedDocumentChargeRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>CorrectedMarkupTrans</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentCurrencyAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Posted</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentStatus</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>DocumentStatus</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromTotalLineAmount</Name>
			<DataField>FromAmount</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InfocodeNumber</Name>
			<DataField>MCRRetailInfocodeId</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsAutomaticCharge</Name>
			<DataField>IsAutoCharge</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsBrokerContractCharge</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>MCRBrokerContractFee</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsChargeDeleted</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>IsDeleted</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsChargeModified</Name>
			<DataField>IsModified</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsChargeOverridden</Name>
			<DataField>MCRMiscChargeOverride</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCouponCharge</Name>
			<DataField>MCRCouponMarkup</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsIntercompanyCharge</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ConfigurationKey>TradeInterCompany</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isIntercompanyChargeDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupIsIntercompanyCharge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsInstallmentPlanCharge</Name>
			<DataField>MCRInstallmentEligible</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsSalesTaxAutogenerated</Name>
			<DataField>TaxAutogenerated</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTieredCharge</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>IsTieredCharge</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModuleCategory</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>ModuleCategory</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModuleType</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ModuleType</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OriginalChargeAmount</Name>
			<DataField>MCROriginalMiscChargeValue</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxDocumentCurrencyAmount</Name>
			<DataField>TaxAmount</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroupCode</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxItemGroupCode</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxPrintCode</Name>
			<DataField>TaxWriteCode</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToTotalLineAmount</Name>
			<DataField>ToAmount</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillInvoiceProcessingKeepCharge</Name>
			<DataField>Keep</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Value</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Value</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MCRSavedRecID</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>MCRSavedRecID</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MCRSavedTableID</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>MCRSavedTableID</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>OrigRecId</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeTableId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>OrigTableId</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDocumentLineRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>SourceDocumentLine</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TransRecId</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentTableId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TransTableId</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustInvoiceLineRefId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>CustInvoiceLineIdRef</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustInvoiceLineTemplate</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>CustInvoiceLineTemplate</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ChargePercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>chargePercentageDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupPercent</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FixedChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>fixedChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupFixedAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>IntercompanyChargePercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>intercompanyChargePercentageDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupIntercompanyPercent</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>UnitChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>unitChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupUnitAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ExternalChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>externalChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupExternalAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ProportionalChargeAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>proportionalChargeAmountDefinition</ComputedFieldMethod>
			<ExtendedDataType>MarkupProportionalAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeClassification</Name>
			<DataField>MarkupClassification_BR</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDeleted</Name>
			<DataField>IsDeleted</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OverrideSalesTax</Name>
			<DataField>OverrideSalesTax</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCompound</Name>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<DataField>IsCompound</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Sequence</Name>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<DataField>Sequence</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecificUnitSymbol</Name>
			<FeatureClass>AutoChargesSetupLineLevelUnitOfMeasureFeature</FeatureClass>
			<DataField>SpecificUnitSymbol</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<FeatureClass>AutoChargesSetupSequenceCompoundFeature</FeatureClass>
			<DataField>Position</DataField>
			<DataSource>MarkupTrans</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DocumentTableId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocumentRecId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChargeLineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>MarkupTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>MarkupTrans</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>