<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTmpBulkProductAttributeValueEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTmpBulkProductAttributeValueEntity extends common
{
    #RetailBulkProductAttributeValue

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (!super())
        {
            return false;
        }

        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib = RetailTmpCatBulkAttrib::find(this.TmpCatBulkAttrib);
        if (!retailTmpCatBulkAttrib)
        {
            throw error("@Retail:ProductAttributeValueNotLinked");
        }

        if (retailTmpCatBulkAttrib.Catalog)
        {
            CatalogManager catalogManager = CatalogManager::construct(retailTmpCatBulkAttrib.Catalog);
            if (!catalogManager.canEdit())
            {
                throw error("@RET15111");
            }
        }

        if (retailTmpCatBulkAttrib.IsRequired && !this.ValueAsText)
        {
            throw error("@Retail:ProductAttributeValueMissingRequired");
        }

        if (!this.ValueAsText)
        {
            return true;
        }

        boolean valid = this.validateCatAttribute();

        if (!valid)
        {
            throw error(retailTmpCatBulkAttrib.ValidationMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates catalogue product attribute.
    /// </summary>
    /// <returns>
    ///     true if catalogue product attribute is known attribute type; otherwise, false.
    /// </returns>
    protected boolean validateCatAttribute()
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib = RetailTmpCatBulkAttrib::find(this.TmpCatBulkAttrib);
        str valueAsText = strLTrim(strRTrim(this.ValueAsText));
        boolean valid;

        switch (retailTmpCatBulkAttrib.DataType)
        {
            case AttributeDataType::Currency:
                if (RetailUtilities::isNumeric(valueAsText))
                {
                    real currencyValue = str2Num(valueAsText);
                    if (!retailTmpCatBulkAttrib.IsBounded || (retailTmpCatBulkAttrib.CurrencyLowerBound <= currencyValue && currencyValue <= retailTmpCatBulkAttrib.CurrencyUpperBound))
                    {
                        valid = true;
                    }
                }
                break;
            case AttributeDataType::DateTime:
                utcdatetime dateTimeValue = RetailTmpBulkProductAttributeValueEntity::str2Datetime(valueAsText);
                if (dateTimeValue)
                {
                    if (!retailTmpCatBulkAttrib.IsBounded || (retailTmpCatBulkAttrib.DateTimeLowerBound <= dateTimeValue && dateTimeValue <= retailTmpCatBulkAttrib.DateTimeUpperBound))
                    {
                        valid = true;
                    }
                }
                break;
            case AttributeDataType::Decimal:
                if (RetailUtilities::isNumeric(valueAsText))
                {
                    real floatValue = str2Num(valueAsText);
                    if (!retailTmpCatBulkAttrib.IsBounded || (retailTmpCatBulkAttrib.FloatLowerBound <= floatValue && floatValue <= retailTmpCatBulkAttrib.FloatUpperBound))
                    {
                        valid = true;
                    }
                }
                break;
            case AttributeDataType::Integer:
                if (isInteger(valueAsText))
                {
                    int intValue = str2int(valueAsText);
                    if (!retailTmpCatBulkAttrib.IsBounded || (retailTmpCatBulkAttrib.IntLowerBound <= intValue && intValue <= retailTmpCatBulkAttrib.IntUpperBound))
                    {
                        valid = true;
                    }
                }
                break;
            case AttributeDataType::Text:
                if (retailTmpCatBulkAttrib.IsEnumeration)
                {
                    str fixedValue = strReplace(valueAsText, #FakeComma, #Comma);
                    List enumValues = strSplit(retailTmpCatBulkAttrib.TextEnumList, #Comma);
                    ListEnumerator enumValuesEnumerator = enumValues.getEnumerator();
                    while (enumValuesEnumerator.moveNext())
                    {
                        str fixedCurrent = strReplace(enumValuesEnumerator.current(), #FakeComma, #Comma);
                        if (fixedCurrent == fixedValue)
                        {
                            valid = true;
                            break;
                        }
                    }
                    if (!valid)
                    {
                        throw error(strFmt("@Retail:ProductAttributeValueInvalidEnumValue", retailTmpCatBulkAttrib.TextEnumList));
                    }
                }
                else
                {
                    valid = true;
                }
                break;
            case AttributeDataType::TrueFalse:
                valid = RetailTmpBulkProductAttributeValueEntity::isValidBooleanValue(valueAsText);
                break;
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        super();

        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib = RetailTmpCatBulkAttrib::find(this.TmpCatBulkAttrib);
        if (!retailTmpCatBulkAttrib)
        {
            throw error("@Retail:ProductAttributeValueNotLinked");
        }

        retailTmpCatBulkAttrib = this.initializeRetailtmpCatValues();

        retailTmpCatBulkAttrib.updateCatalogProductAttribute();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRetailtmpCatValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes retail catalogue table buffer attribute values.
    /// </summary>
    /// <returns>
    ///     Retail catalogue table buffer with new attribute values.
    /// </returns>
    protected RetailTmpCatBulkAttrib initializeRetailtmpCatValues()
    {
        RetailTmpCatBulkAttrib retailTmpCatBulkAttrib = RetailTmpCatBulkAttrib::find(this.TmpCatBulkAttrib);
        str valueAsText = strLTrim(strRTrim(this.ValueAsText));

        switch (retailTmpCatBulkAttrib.DataType)
        {
            case AttributeDataType::Currency:
                retailTmpCatBulkAttrib.CurrencyValue = str2Num(valueAsText);
                break;
            case AttributeDataType::DateTime:
                utcdatetime localDateTime = RetailTmpBulkProductAttributeValueEntity::str2Datetime(valueAsText);
                retailTmpCatBulkAttrib.DateTimeValue = DateTimeUtil::newDateTime(DateTimeUtil::date(localDateTime), DateTimeUtil::time(localDateTime), DateTimeUtil::getUserPreferredTimeZone());
                break;
            case AttributeDataType::Integer:
                retailTmpCatBulkAttrib.IntValue = str2int(valueAsText);
                break;
            case AttributeDataType::Decimal:
                retailTmpCatBulkAttrib.FloatValue = str2Num(valueAsText);
                break;
            case AttributeDataType::Text:
                if (retailTmpCatBulkAttrib.IsEnumeration)
                {
                    retailTmpCatBulkAttrib.TextValue = strReplace(valueAsText, #FakeComma, #Comma);
                }
                else if (retailTmpCatBulkAttrib.RichMediaType == RetailRichMediaType::Images || retailTmpCatBulkAttrib.RichMediaType == RetailRichMediaType::Videos)
                {
                    RetailRichMediaTmp retailRichMediaTmp;
                    RecId defaultRecId = RetailRichMediaEncoder::Decode(valueAsText, retailRichMediaTmp);
                    retailTmpCatBulkAttrib.TextValue = RetailRichMediaEncoder::Encode(retailRichMediaTmp, defaultRecId);
                }
                else
                {
                    retailTmpCatBulkAttrib.TextValue = valueAsText;
                }
                break;
            case AttributeDataType::TrueFalse:
                retailTmpCatBulkAttrib.BooleanValue = valueAsText == enum2Str(NoYes::Yes);
                break;
            default:
                break;
        }
        return retailTmpCatBulkAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Datetime</Name>
				<Source><![CDATA[
    private static utcdatetime str2Datetime(str _valueAsText)
    {
        utcdatetime dateTime;
        System.DateTime systemDateTime;
        boolean valid = System.DateTime::TryParse(_valueAsText, byref systemDateTime);
        if (valid)
        {
            dateTime = clrSystemDateTime2UtcDateTime(systemDateTime);
        }
        return dateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidBooleanValue</Name>
				<Source><![CDATA[
    private static boolean isValidBooleanValue(str _valueAsText)
    {
        return !_valueAsText || _valueAsText == enum2Str(NoYes::No) || _valueAsText == enum2Str(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeSourceTypeAsLabel</Name>
				<Source><![CDATA[
    private static str getAttributeSourceTypeAsLabel()
    {
        return RetailTmpBulkProductAttributeValueEntity::getEnumLabel(
            tableStr(RetailTmpBulkProductAttributeValueEntity),
            tableStr(RetailTmpBulkProductAttributeValue),
            fieldStr(RetailTmpBulkProductAttributeValue, AttributeSourceType),
            enumNum(RetailProductAttributeRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequiredAsLabel</Name>
				<Source><![CDATA[
    private static str getRequiredAsLabel()
    {
        return RetailTmpBulkProductAttributeValueEntity::getEnumLabel(
            tableStr(RetailTmpBulkProductAttributeValueEntity),
            tableStr(RetailTmpBulkProductAttributeValue),
            fieldStr(RetailTmpBulkProductAttributeValue, IsRequired),
            enumNum(NoYes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataTypeAsLabel</Name>
				<Source><![CDATA[
    private static str getDataTypeAsLabel()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(
                    tableStr(RetailTmpBulkProductAttributeValueEntity),
                    tableStr(RetailTmpBulkProductAttributeValue),
                    fieldStr(RetailTmpBulkProductAttributeValue, RichMediaType)),
                SysComputedColumn::comparisonLiteral(0)),
            RetailTmpBulkProductAttributeValueEntity::getEnumLabel(
                tableStr(RetailTmpBulkProductAttributeValueEntity),
                tableStr(RetailTmpBulkProductAttributeValue),
                fieldStr(RetailTmpBulkProductAttributeValue, DataType),
                enumNum(AttributeDataType)),
            RetailTmpBulkProductAttributeValueEntity::getEnumLabel(
                tableStr(RetailTmpBulkProductAttributeValueEntity),
                tableStr(RetailTmpBulkProductAttributeValue),
                fieldStr(RetailTmpBulkProductAttributeValue, RichMediaType),
                enumNum(RetailRichMediaType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumLabel</Name>
				<Source><![CDATA[
    // OData framework doesn't support enum as part of a key, so we have to marshall enum to string, and back forth.
    private static str getEnumLabel(DataEntityName _dataEntityName, DataSourceName _dateSourceName, FieldName _fieldName, EnumId _enumId)
    {
        str comparisonField = SysComputedColumn::comparisonField(_dataEntityName, _dateSourceName, _fieldName);
        Map valueMap = new Map(Types::String, Types::String);
        DictEnum dictEnum = new DictEnum(_enumId);
        int enumCount = dictEnum.values();
        int i;

        for (i = 0; i < enumCount; i++)
        {
            valueMap.insert(int2Str(dictEnum.index2Value(i)), SysComputedColumn::returnLiteral(dictEnum.index2Label(i)));
        }

        return SysComputedColumn::switch(comparisonField, valueMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@SYP5070034</Label>
	<Tags>Product</Tags>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>TmpBulkProductAttributeValues</PublicCollectionName>
	<PublicEntityName>TmpBulkProductAttributeValue</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeSourceTypeAsLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeSourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataTypeAsLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequiredAsLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueAsText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeProperty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CatalogNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrgNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CatalogName</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>CatalogName</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CatalogNumber</Name>
			<DataField>CatalogId</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS129028</Label>
			<DataField>AttributeName</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeName</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>AttributeTypeName</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisplayProductNumber</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InternalOrgNumber</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>InternalOrgNumber</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>LanguageId</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValueAsText</Name>
			<Label>@Retail:ProductAttributeValueAsText</Label>
			<DataField>ValueAsText</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeProperty</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Retail:ProductAttributeValueProperty</Label>
			<DataField>AttributeProperty</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductName</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>ProductName</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeSourceName</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Retail:ProductAttributeSourceName</Label>
			<DataField>AttributeSourceName</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AttributeSourceTypeAsLabel</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@Retail:ProductAttributeSourceType</Label>
			<ComputedFieldMethod>getAttributeSourceTypeAsLabel</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>RequiredAsLabel</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS53664</Label>
			<ComputedFieldMethod>getRequiredAsLabel</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DataTypeAsLabel</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS333319</Label>
			<ComputedFieldMethod>getDataTypeAsLabel</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TmpCatBulkAttrib</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TmpCatBulkAttrib</DataField>
			<DataSource>RetailTmpBulkProductAttributeValue</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CatalogNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DisplayProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InternalOrgNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LanguageId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailTmpBulkProductAttributeValue</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailTmpBulkProductAttributeValue</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>