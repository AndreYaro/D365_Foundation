<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsAddressZipcodeChinaEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsAddressZipcodeChinaEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "entityCtx">The context of the entity.</param>
    /// <param name = "dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        str stateId;
        str cityName;
        str regionName;

        ListEnumerator stateEnumerator;
        ListEnumerator cityEnumerator;

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataentitydatasourcestr(LogisticsAddressZipcodeChinaEntity, LogisticsAddressZipCode))
        {
            LogisticsAddressZipCode logisticsAddressZipCode = _dataSourceCtx.getBuffer();

            stateEnumerator = LogisticsAddressZipcodeChinaEntity::prepareStateKeyList();
            cityEnumerator = LogisticsAddressZipcodeChinaEntity::prepareCityKeyList();

            regionName = this.xzqh;
            [stateId, regionName]  = LogisticsAddressZipcodeChinaEntity::getRegionName(regionName, stateEnumerator);
            [cityName, regionName] = LogisticsAddressZipcodeChinaEntity::getRegionName(regionName, cityEnumerator);

            logisticsAddressZipCode.State = stateId;
            logisticsAddressZipCode.City = cityName;
            logisticsAddressZipCode.StreetName = regionName + this.jd1 + this.jd2 + this.jd3 + this.jd4 + this.jd5;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persisting the entity into the database
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateWrite(true);

        this.Country = LogisticsAddressZipcodeChinaEntity::findChinaLogisticsAddressCountryRegionId();

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findChinaLogisticsAddressCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find country region which has China ISO code.
    /// </summary>
    /// <returns>China country region ID</returns>
    private static LogisticsAddressCountryRegionId findChinaLogisticsAddressCountryRegionId()
    {
        #ISOCountryRegionCodes

        LogisticsAddressCountryRegionId countryRegionId;

        if (!LogisticsAddressCountryRegion::existISOcode(#isoCN))
        {
            DirDataPopulation::insertLogisticAddressCountryRegions();
        }
        countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoCN).CountryRegionId;

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets stateId or cityName from address field.
    /// </summary>
    /// <param name="_address">
    /// Address field.
    /// </param>
    /// <param name="_listEnumerator">
    /// a listEnumerator which contains state keys or city keys.
    /// </param>
    /// <returns>
    /// A contianer which have stateId, or cityName and address.
    /// </returns>
    private static container getRegionName(str _address, ListEnumerator _listEnumerator)
    {
        str regionName = '';
        str address;

        _listEnumerator.reset();
        address = _address;
        while (_listEnumerator.moveNext())
        {
            if (strlen(regionName) == 0)
            {
                [regionName, address] = LogisticsAddressZipcodeChinaEntity::parseRegionDetails(address, _listEnumerator.current());
            }
            else
            {
                break;
            }
        }

        return [regionName, address];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRegionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses content of address column for getting stateId, cityName and streetName.
    /// </summary>
    /// <param name="_address">
    /// The content of address column.
    /// </param>
    /// <param name="_keyWord">
    /// Key word for region name.
    /// </param>
    /// <returns>
    /// stateId, cityName or streetName.
    /// </returns>
    private static container parseRegionDetails(str _address, str _keyWord)
    {
        int pos = 0;
        int addressLen = 0;
        int regionNameLen = 0;
        str address = _address;
        str regionName;

        addressLen = strlen(address);
        pos = strscan(address, _keyWord, 1, addressLen);

        if (pos != 0)
        {
            regionName = substr(address, 1, (strlen(_keyWord) + pos - 1));
            regionNameLen = strlen(regionName);
            address = substr(address, (regionNameLen + 1), (addressLen - regionNameLen));
        }

        return [regionName, address];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareStateKeyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares key word of state level for parsing text line.
    /// </summary>
    /// <returns>The list enumerator of state list</returns>
    private static ListEnumerator prepareStateKeyList()
    {
        List stateList;
        ListEnumerator stateEnumerator;
        str State = '省';
        str AutonomousRegion = '自治区';
        str SAR = '特别行政区';
        str Beijing = '北京市';
        str Shanghai = '上海市';
        str Tianjin = '天津市';
        str Chongqing = '重庆市';

        stateList = new List(Types::String);
        stateList.addEnd(State);
        stateList.addEnd(AutonomousRegion);
        stateList.addEnd(SAR);
        stateList.addEnd(Beijing);
        stateList.addEnd(Shanghai);
        stateList.addEnd(Tianjin);
        stateList.addEnd(Chongqing);

        stateEnumerator = stateList.getEnumerator();

        return stateEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCityKeyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares key word of city level for parsing text line.
    /// </summary>
    /// <returns>The list enumerator of city list</returns>
    private static ListEnumerator prepareCityKeyList()
    {
        List cityList;
        ListEnumerator cityEnumerator;
        str City = '市';
        str Union = '盟';

        cityList = new List(Types::String);
        cityList.addEnd(City);
        cityList.addEnd(Union);

        cityEnumerator = cityList.getEnumerator();

        return cityEnumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<FormRef>LogisticsAddressZipCodes</FormRef>
	<Label>@GCN:ZIPPostalCodeChina</Label>
	<Tags>GAB</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LogisticsAddressZipcodeChinaStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>GAB</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>AddressZipcodeChinas</PublicCollectionName>
	<PublicEntityName>AddressZipcodeChina</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>yzbm</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>xzqh</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>Name</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>xzqu</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>jd1</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>StreetName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>jd2</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>StreetName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>jd3</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>StreetName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>jd4</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>StreetName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>jd5</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>StreetName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Country</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsAddressZipCode</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>yzbm</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LogisticsAddressZipCode</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LogisticsAddressZipCode</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>