<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMixAndMatchLineGroupsEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailMixAndMatchLineGroupsEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new entity record to the database.
    /// </summary>
    /// <param name="_entityCtx">Data entity context</param>
    /// <param name="_dataSourceCtx">Data source context</param>
    /// <returns><c>true</c> if the insert succeeded; otherwise, <c>false</c>.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret, reEnableDiscount = false;
        RetailMixAndMatchLineGroups mixAndMatchGroups;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(RetailMixAndMatchLineGroupsEntity, RetailMixAndMatchLineGroups))
        {
            mixAndMatchGroups = _dataSourceCtx.getBuffer();
            // Set the RetailPeriodicDiscount to disable if it is enabled, otherwise it will fail the RetailMixAndMatchLineGroups import.
            reEnableDiscount = this.resetRetailPeriodicDiscountStatus(mixAndMatchGroups, RetailDisabledEnabled::Disabled);
        }

        ret = super(_entityCtx,_dataSourceCtx);

        // Reset the RetailPeriodicDiscount to enable if it is disabled in above step.
        if (reEnableDiscount && _dataSourceCtx.name() == dataEntityDataSourceStr(RetailMixAndMatchLineGroupsEntity, RetailMixAndMatchLineGroups))
        {
            mixAndMatchGroups = _dataSourceCtx.getBuffer();
            this.resetRetailPeriodicDiscountStatus(mixAndMatchGroups, RetailDisabledEnabled::Enabled);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a new entity record to the database.
    /// </summary>
    /// <param name="_entityCtx">Data entity context</param>
    /// <param name="_dataSourceCtx">Data source context</param>
    /// <returns><c>true</c> if the insert succeeded; otherwise, <c>false</c>.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret, reEnableDiscount = false;
        RetailMixAndMatchLineGroups mixAndMatchGroups;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(RetailMixAndMatchLineGroupsEntity, RetailMixAndMatchLineGroups))
        {
            RetailMixAndMatchLineGroups docuRefBuffer = _dataSourceCtx.getBuffer();

            mixAndMatchGroups = _dataSourceCtx.getBuffer();
            // Set the RetailPeriodicDiscount to disable if it is enabled, otherwise it will fail the RetailMixAndMatchLineGroups import.
            reEnableDiscount = this.resetRetailPeriodicDiscountStatus(mixAndMatchGroups, RetailDisabledEnabled::Disabled);
        }

        ret = super(_entityCtx,_dataSourceCtx);

        // Reset the RetailPeriodicDiscount to enable if it is disabled in above step.
        if (reEnableDiscount && _dataSourceCtx.name() == dataEntityDataSourceStr(RetailMixAndMatchLineGroupsEntity, RetailMixAndMatchLineGroups))
        {
            RetailMixAndMatchLineGroups docuRefBuffer = _dataSourceCtx.getBuffer();

            mixAndMatchGroups = _dataSourceCtx.getBuffer();
            this.resetRetailPeriodicDiscountStatus(mixAndMatchGroups, RetailDisabledEnabled::Enabled);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRetailPeriodicDiscountStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the status of the RetailPeriodicDiscount associated with RetailMixAndMatchLineGroups.
    /// </summary>
    /// <param name="groups">Target RetailMixAndMatchLineGroups</param>
    /// <param name="status">Target RetailDisabledEnabled</param>
    /// <returns><c>true</c> if the resetting happens; otherwise, <c>false</c>.</returns>
    private boolean resetRetailPeriodicDiscountStatus(RetailMixAndMatchLineGroups groups, RetailDisabledEnabled status)
    {
        boolean ret = false;

        RetailPeriodicDiscount discount;
        select forupdate discount where discount.OfferId == groups.mixAndMatchId;

        if (discount.Status != status)
        {
            ret = true;

            discount.Status = status;
            discount.doUpdate();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<FormRef>RetailMixAndMatchLineGroups</FormRef>
	<Label>@RET3902</Label>
	<Tags>Merchandising - Assortment</Tags>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailMixAndMatchLineGroupsStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>MixAndMatchLineGroups</PublicCollectionName>
	<PublicEntityName>MixAndMatchLineGroups</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountLineColor</Name>
			<DataField>discountLineColorId</DataField>
			<DataSource>RetailMixAndMatchLineGroups</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchOfferId</Name>
			<DataField>mixAndMatchId</DataField>
			<DataSource>RetailMixAndMatchLineGroups</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchLineGroup</Name>
			<DataField>mixAndMatchLineGroup</DataField>
			<DataSource>RetailMixAndMatchLineGroups</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfItemsNeeded</Name>
			<DataField>numberOfItemsNeeded</DataField>
			<DataSource>RetailMixAndMatchLineGroups</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>MixAndMatchOfferId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>MixAndMatchLineGroup</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailMixAndMatchLineGroups</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailMixAndMatchLineGroups</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>