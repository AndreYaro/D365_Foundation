<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingTransactionPostingDefinitionReceivableEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JournalizingTransactionPostingDefinitionReceivableEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the posting definition is associated to customer module.
    /// </summary>
    /// <returns>
    /// true if the validation passes, otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        this.assignCodeClassFromBillingRelation();

        return super() && JournalizingDefinition::checkExistJournalizingDefinitionByModule(this.PostingDefinition, JournalizingDefinitionModuleId::AccountsReceivable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeBillingClassification</Name>
				<Source><![CDATA[
    private static str computeBillingClassification()
    {
        return SysComputedColumn::if
            (
                SysComputedColumn::isNullExpression // if is Null
                (
                    SysComputedColumn::comparisonField
                    (
                        tableStr(JournalizingTransactionPostingDefinitionReceivableEntity),
                        dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingClassification),
                        fieldStr(CustBillingClassification, BillingClassification)
                    )
                ),
                SysComputedColumn::returnLiteral(''), // then return literal blank
                SysComputedColumn::returnField // else return field value
                (
                    tableStr(JournalizingTransactionPostingDefinitionReceivableEntity),
                    dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingClassification),
                    fieldStr(CustBillingClassification, BillingClassification)
                )
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeBillingCode</Name>
				<Source><![CDATA[
    private static str computeBillingCode()
    {
        return SysComputedColumn::if
            (
                SysComputedColumn::isNullExpression // if is Null
                (
                    SysComputedColumn::comparisonField
                    (
                        tableStr(JournalizingTransactionPostingDefinitionReceivableEntity),
                        dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingCode),
                        fieldStr(CustBillingCode, BillingCode)
                    )
                ),
                SysComputedColumn::returnLiteral(''), // then return literal blank
                SysComputedColumn::returnField // else return field value
                (
                    tableStr(JournalizingTransactionPostingDefinitionReceivableEntity),
                    dataEntityDataSourceStr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingCode),
                    fieldStr(CustBillingCode, BillingCode)
                )
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        ret = this.overrideDataSource(_entityCtx, _dataSourceCtx);

        if (!ret)
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        ret = this.overrideDataSource(_entityCtx, _dataSourceCtx);

        if (!ret)
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideDataSource</Name>
				<Source><![CDATA[
    private boolean overrideDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingCode):
                    if (this.BillingCode == '')
                    {
                        ret = true;
                    }
                    break;
                case dataentitydatasourcestr(JournalizingTransactionPostingDefinitionReceivableEntity, CustBillingClassification):
                    if (this.BillingClassification == '')
                    {
                        ret = true;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCodeClassFromBillingRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a value to either a Billing code or a Billing classification from the Billing value field, based on the item code value.
    /// </summary>
    private void assignCodeClassFromBillingRelation()
    {
        switch (this.AttributeTypeBillingClassificationBillingCodeAll)
        {
            case BillingCodeBillingClassAll::BillingClassification:
                this.CustBillingClassificationRecId = CustBillingClassification::findByBillingClassification(this.BillingClassification).RecId;
                this.CustBillingCodeRecId = 0;
                break;
            case BillingCodeBillingClassAll::BillingCode:
                this.CustBillingCodeRecId = CustBillingCode::findBillingCode(this.BillingCode).RecId;
                this.CustBillingClassificationRecId = 0;
                break;
            case BillingCodeBillingClassAll::All:
                this.CustBillingCodeRecId = 0;
                this.CustBillingClassificationRecId = 0;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<FormRef>journalizingDefinitionTrans</FormRef>
	<Label>@PublicSector:CustomerTransactionPostingDefinition</Label>
	<Tags>Posting setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>JournalizingTransactionPostingDefinitionReceivableEntityStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>TransactionPostingDefinitionReceivables</PublicCollectionName>
	<PublicEntityName>TransactionPostingDefinitionReceivable</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustBillingClassificationRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CustBillingClassification</DataField>
			<DataSource>JournalizingDefinitionCustomerTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustBillingCodeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CustBillingCode</DataField>
			<DataSource>JournalizingDefinitionCustomerTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerTransactionType</Name>
			<DataField>CustomerTransactionType</DataField>
			<DataSource>JournalizingDefinitionCustomerTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingDefinitionRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>JournalizingDefinition</DataField>
			<DataSource>JournalizingDefinitionCustomerTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeBillingClassificationBillingCodeAll</Name>
			<Label>@SPS770</Label>
			<DataField>MatchType</DataField>
			<DataSource>JournalizingDefinitionCustomerTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingDefinition</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>JournalizingDefinitionCode</DataField>
			<DataSource>JournalizingDefinition</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BillingClassification</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>computeBillingClassification</ComputedFieldMethod>
			<ExtendedDataType>BillingClassification</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BillingCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>computeBillingCode</ComputedFieldMethod>
			<ExtendedDataType>BillingCode</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeBillingClassificationBillingCodeAll</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CustomerTransactionType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BillingClassification</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BillingCode</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>JournalizingDefinitionCustomerTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>JournalizingDefinitionCustomerTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustBillingClassification</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustBillingClassification</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CustBillingClassification</Name>
								<JoinRelationName>CustBillingClassification</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>JournalizingDefinition</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>JournalizingDefinition</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>JournalizingDefinition</Name>
								<JoinRelationName>JournalizingDefinition</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustBillingCode</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustBillingCode</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CustBillingCode</Field>
								<JoinDataSource>JournalizingDefinitionCustomerTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>