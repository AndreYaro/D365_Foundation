<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderLineD365SalesEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesOrderLineD365SalesEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query query = new Query();
        
        var salesLineDS = query.addDataSource(tableNum(SalesLine));
        
        var categoryDS = salesLineDS.addDataSource(tableNum(EcoResCategory));
        categoryDS.joinMode(JoinMode::OuterJoin);
        categoryDS.relations(true);

        var foreignTradeCategoryDS = salesLineDS.addDataSource(tableNum(SalesLineForeignTradeCategory));
        foreignTradeCategoryDS.joinMode(JoinMode::OuterJoin);
        foreignTradeCategoryDS.relations(true);

        var inventTableDS = salesLineDS.addDataSource(tableNum(InventTable));
        inventTableDS.addLink(fieldNum(SalesLine, ItemId), fieldNum(InventTable, ItemId));

        LogisticsPostalAddressBaseEntityChangeTrackingHelper::addPostalAddressBasedOnAddressRecIdLink(salesLineDS, fieldNum(SalesLine, DeliveryPostalAddress));

        var lineTotalsDS = salesLineDS.addDataSource(tableNum(SalesOrderLineTotals));
        lineTotalsDS.joinMode(JoinMode::OuterJoin);
        lineTotalsDS.addLink(fieldNum(SalesLine, InventTransId), fieldNum(SalesOrderLineTotals, InventTransId));
        
        var salesTableDS = salesLineDS.addDataSource(tableNum(SalesTable));
        salesTableDS.addLink(fieldNum(SalesLine, SalesId), fieldNum(SalesTable, SalesId));

        var salesOrderTotalsDS = salesTableDS.addDataSource(tableNum(SalesOrderTotals));
        salesOrderTotalsDS.joinMode(JoinMode::OuterJoin);
        salesOrderTotalsDS.addLink(fieldNum(SalesTable, SalesId), fieldNum(SalesOrderTotals, SalesId));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, EcoResCategory):
                ret = this.resolveProductCategory();
                break;

            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, InventDim):
                SalesLine salesLine = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine)).getBuffer();
                ret = InventDim::find(salesLine.InventDimId);
                break;

            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                ret = TradeEntitySpecificDeliveryAddress::findLogisticsPostalAddressBaseEntityDataSource();
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        using (var activityContext = SalesInstrumentationLogger::createLogger(tableStr(SalesOrderLineD365SalesEntity)).salesOrderActivities().insertEntityDataSource(_dataSourceCtx))
        {
            SalesLine salesLine;
            SalesPrice salesPrice;
            LineAmount lineAmount;
            real lineDiscountPercentage;
            LineAmount lineDiscountAmount;
            boolean isLineDiscountSet;

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                    salesLine = _dataSourceCtx.getBuffer();
                    
                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        salesPrice = (this.SalesPrice == 0 && this.shouldDefaultToAgreementPrice()) ? 0 : salesLine.SalesPrice;
                        lineAmount = salesLine.LineAmount;
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        lineDiscountPercentage = salesLine.LinePercent;
                        lineDiscountAmount = salesLine.LineDisc;
                    }

                    isLineDiscountSet = this.insertLineDiscount(_dataSourceCtx);
                    
                    this.setProjectFields(salesLine);
                    salesLine.LineNum = salesLine.LineNum ? salesLine.LineNum : SalesLine::lastLineNum(this.SalesOrderNumber) + 1;

                    this.initializeDefaultInventDimForDirectDelivery(salesLine);

                    salesLine.defaultField(fieldNum(SalesLine, DeliveryType));
                    salesLine.defaultField(fieldNum(SalesLine, SourcingVendAccount));
                    salesLine.defaultField(fieldNum(SalesLine, SourcingOrigin));
                    salesLine.defaultField(fieldNum(SalesLine, SourcingCompanyId));
                    salesLine.defaultField(fieldNum(SalesLine, SourcingInventSiteId));
                    salesLine.defaultField(fieldNum(SalesLine, SourcingInventLocationId));

                    if (salesLine.ItemId && SalesParameters::find().DeferDirectDeliveryCreation == true)
                    {
                        salesLine.initDropShipAndInstallmentEligible(salesLine.inventTable());
                    }
                    break;
            }

            boolean ret = super(_entityCtx, _dataSourceCtx);
            
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                    this.TradeEntitySpecificDeliveryAddress::postInsertLogisticsPostalAddressBaseEntityDataSource(_dataSourceCtx);
                    break;

                case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                    if (salesLine.isCategoryBased())
                    {
                        SalesTableSalesLineDataSourceWriting salesLineWriting = SalesTableSalesLineDataSourceWriting::newFromSalesLine(salesLine);
                        SalesLineForeignTradeCategory salesLineForeignTradeCategory;
                        salesLineWriting.updateForeignTradeCategory(salesLineForeignTradeCategory);
                    }
                
                    if (CustParameters::find().IsTotalsCalculationAutomatic)
                    {
                        SalesTable salesTable = salesLine.salesTable(true);
                        if (salesTable.RecId && salesTable.setEstimate())
                        {
                            salesTable.doUpdate();
                        }
                    }

                    if (isLineDiscountSet)
                    {
                        this.updateSalesMarkupWithRoundingDifference(_dataSourceCtx);
                    }

                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesPriceOrLineAmountOutOfSync(salesLine, salesPrice, lineAmount);
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(salesLine, salesPrice, lineAmount);
                    }
                    break;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the sales order line entity back to Sales.
    /// </summary>
    /// <param name = "_salesOrderLineEntityRecord">The sales order line entity record.</param>
    /// <returns>The sales order line entity record that need to be resynced.</returns>
    /// <remarks>
    /// This method is aimed to be used by Dual Write to trigger synchronization of the sales order line entity back to Sales.
    /// See <c>RunDocumentAction</c> OData action on the <c>DualWriteProjectConfigurationEntity</c> entity.
    /// </remarks>
    public static List syncLineData(Common _salesOrderLineEntityRecord)
    {
        SalesOrderLineD365SalesEntity salesOrderLineEntityRecord = _salesOrderLineEntityRecord;
        List relatedRecords = new List(Types::Container);

        using (var activityContext = SalesInstrumentationLogger::createLogger(tableStr(SalesOrderLineD365SalesEntity)).salesOrderActivities().syncSalesLineEntityData())
        {
            if (salesOrderLineEntityRecord != null)
            {
                relatedRecords.addEnd([salesOrderLineEntityRecord.TableId, salesOrderLineEntityRecord.RecId]);

                SalesOrderLineNotSyncedWithCDSRecord salesOrderLineNotSyncedWithCDSRecord;
                delete_from salesOrderLineNotSyncedWithCDSRecord where salesOrderLineNotSyncedWithCDSRecord.SalesLineRefRecId == salesOrderLineEntityRecord.RecId;

                activityContext.addCustomProperty('RecordToSync', int642Str(salesOrderLineEntityRecord.RecId));
            }
        }
        
        return relatedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        using (var activityContext = SalesInstrumentationLogger::createLogger(tableStr(SalesOrderLineD365SalesEntity)).salesOrderActivities().updateEntityDataSource(_dataSourceCtx))
        {
            SalesLine salesLine;
            SalesPrice salesPrice;
            LineAmount lineAmount;
            real lineDiscountPercentage;
            LineAmount lineDiscountAmount;
            boolean isLineDiscountSet;

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                    salesLine = _dataSourceCtx.getBuffer();

                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        salesPrice = (this.SalesPrice == 0 && this.shouldDefaultToAgreementPrice()) ? 0 : salesLine.SalesPrice;
                        lineAmount = salesLine.LineAmount;
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        lineDiscountPercentage = salesLine.LinePercent;
                        lineDiscountAmount = salesLine.LineDisc;
                    }

                    isLineDiscountSet = this.updateLineDiscount(_dataSourceCtx);
                    
                    if (salesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
                    {
                        SalesTableForm_DeliverySchedule salesTableForm = new SalesTableForm_DeliverySchedule(salesLine);
                        salesTableForm.deliveryLinesSync(salesLine, false);
                    }
                    this.defaultLineDimension(salesLine);
                
                    // SalesLine.CustomerRef was updated during salesTable.initializeSalesLineOnUpdateSalesTable(), so need to resolve the conflict.
                    if (this.RecVersion != salesLine.RecVersion)
                    {
                        this.fromViewDataSource(_dataSourceCtx.id(), salesLine);
                    }
                    break;
            }

            boolean ret = super(_entityCtx, _dataSourceCtx);

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                    if (CustParameters::find().IsTotalsCalculationAutomatic)
                    {
                        SalesTable salesTable = salesLine.salesTable(true);
                        if (salesTable.RecId && salesTable.setEstimate())
                        {
                            salesTable.doUpdate();
                        }
                    }

                    if (isLineDiscountSet)
                    {
                        this.updateSalesMarkupWithRoundingDifference(_dataSourceCtx);
                    }
                    
                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesPriceOrLineAmountOutOfSync(salesLine, salesPrice, lineAmount);
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(salesLine, lineDiscountPercentage, lineDiscountAmount);
                    }
                    break;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesPriceOrLineAmountOutOfSync</Name>
				<Source><![CDATA[
    private void checkSalesPriceOrLineAmountOutOfSync(SalesLine _salesLine, SalesPrice _originalSalesPrice, LineAmount _originalLineAmount)
    {
        if (_salesLine.SalesPrice != _originalSalesPrice || _salesLine.LineAmount != _originalLineAmount)
        {
            SalesOrderLineNotSyncedWithCDSRecord::insertRecord(_salesLine.SalesId, _salesLine.RecId, SalesNotSyncedWithCDSFieldsType::SalesPriceOrLineAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync</Name>
				<Source><![CDATA[
    private void checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(SalesLine _salesLine, real _originalLineDiscountPercentage, LineAmount _originalLineDiscountAmount)
    {
        if (_salesLine.LinePercent != _originalLineDiscountPercentage || _salesLine.LineDisc != _originalLineDiscountAmount)
        {
            SalesOrderLineNotSyncedWithCDSRecord::insertRecord(_salesLine.SalesId, _salesLine.RecId, SalesNotSyncedWithCDSFieldsType::SalesLineDiscountPercentageOrLineDiscountAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLineDiscount</Name>
				<Source><![CDATA[
    private boolean insertLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (this.TotalDiscountAmount != 0 && this.OrderedSalesQuantity != 0
            && !SalesParameters::find().IsD365SalesPriceMasterEnabled)
        {
            this.setLineDiscount(_dataSourceCtx, this.OrderedSalesQuantity);        
            return true;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineDiscount</Name>
				<Source><![CDATA[
    private boolean updateLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (SalesCDSUpdateLineDiscountOnlyWhenTotalDiscountAmountModifiedFlight::instance().isEnabled()
            && !this.isFieldModified(fieldNum(SalesOrderLineD365SalesEntity, TotalDiscountAmount)))
        {
            return false;
        }

        if (this.TotalDiscountAmount != 0 && !SalesParameters::find().IsD365SalesPriceMasterEnabled)
        {
            boolean isQuantitySet = this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, OrderedSalesQuantity));

            if (isQuantitySet && this.OrderedSalesQuantity != 0)
            {
                this.setLineDiscount(_dataSourceCtx, this.OrderedSalesQuantity);
                return true;
            }
            else
            {
                SalesLine salesLine = SalesLine::findLineCreationSequence(this.SalesOrderNumber, this.LineCreationSequenceNumber);
                if (salesLine.SalesQty != 0)
                {
                    this.setLineDiscount(_dataSourceCtx, salesLine.SalesQty);
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesMarkupWithRoundingDifference</Name>
				<Source><![CDATA[
    private void updateSalesMarkupWithRoundingDifference(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        SalesLine salesLine = _dataSourceCtx.getBuffer();
        var calculatedDiscount = CurrencyExchange::round(salesLine.SalesQty * salesLine.LineDisc, salesLine.CurrencyCode);
        
        if (this.TotalDiscountAmount != calculatedDiscount)
        {
            SalesParameters salesParameters = SalesParameters::find();

            if ((!salesParameters.IsD365SalesDefaultSalesOrderEnabled || !salesLine.salesTable().QuotationId)
                && !salesParameters.IsD365SalesPriceMasterEnabled)
            {
                salesLine.selectForUpdate(true);
                salesLine.SalesMarkup = calculatedDiscount - this.TotalDiscountAmount;
                salesLine.LineAmount = salesLine.calcLineAmountForced();
                salesLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineDiscount</Name>
				<Source><![CDATA[
    private void setLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx, SalesOrderedQty _qty)
    {
        if (_qty != 0)
        {
            SalesLine salesLine = _dataSourceCtx.getBuffer();
            salesLine.LineDisc = CurrencyExchange::round((this.TotalDiscountAmount / _qty), Ledger::accountingCurrency());
            salesLine.SalesMarkup = 0;
            _dataSourceCtx.setBuffer(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDefaultToAgreementPrice</Name>
				<Source><![CDATA[
    protected boolean shouldDefaultToAgreementPrice()
    {
        // Indicates if default pricing (i.e. Trade Agreement) should be used or not if sales price is set to zero from the entity.
        return FeatureStateProvider::isFeatureEnabled(SalesZeroPriceAsABlankOnSalesQuoteLineToggle::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLineDimension</Name>
				<Source><![CDATA[
    private void defaultLineDimension(SalesLine _salesLine)
    {
        if (!_salesLine.DefaultDimension && !_salesLine.isFieldSet(fieldNum(SalesLine, DefaultDimension)))
        {
            _salesLine.DefaultDimension = _salesLine.copyDimension(SalesTable::find(_salesLine.SalesId).DefaultDimension);
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                this.SalesDocumentD365SalesEntitySpecificMap::mapLogisticsPostalAddressBaseEntityDataSourceToEntity(_entityCtx, _dataSourceCtx);

                if (_dataSourceCtx.isAnyEntityFieldSet(this))
                {
                    this.TradeEntitySpecificDeliveryAddress::mapLogisticsPostalAddressBaseEntityDataSourceToEntity(_dataSourceCtx);
                }
                break;

            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                // Enable insert of records with blank values for mandatory field RequestedShippingDate
                if (_entityCtx.isDatabaseOperationInsert())
                {
                    this.setBlankFieldStateToNotSet(fieldNum(SalesOrderLineD365SalesEntity, RequestedShippingDate));
                }

                if (_entityCtx.isDatabaseOperationInsertOrUpdate())
                {
                    // Find existing logistic address location to avoid duplicate.
                    if (this.IsDeliveryAddressOrderSpecific)
                    {
                        this.TradeEntitySpecificDeliveryAddress::resolveOrderSpecificLocationId(this.SalesOrderNumber);
                    }
                    else
                    {
                        this.TradeEntitySpecificDeliveryAddress::resolvePartyAddressLocationId();
                    }

                    if (this.SalesPrice == 0 && this.shouldDefaultToAgreementPrice())
                    {
                        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, SalesPrice), FieldState::NotSet);
                    }
                    
                    SalesLine salesLine = _dataSourceCtx.getBuffer() as SalesLine;

                    if (this.mustMarkLineAmountAsNotSet(_entityCtx))
                    {
                        // Will clear the change policy without a dialog.
                        if (salesLine.Type().canLineAmountBeUpdatedWithNonInteractiveSession())
                        {
                            this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, LineAmount), FieldState::NotSet);
                        }
                    }
                    else
                    {
                        this.resetLineAmountDependentFieldStages();
                    }
                }
                break;
        }

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                SalesLine salesLine = _dataSourceCtx.getBuffer();
                this.setProjectFields(salesLine);

                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                        if (this.InventoryLotId && this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, InventoryLotId)))
                        {
                            // Without skipping this validation, validateField will fail on the mapped field.
                            this.skipDataSourceValidateField(fieldNum(SalesOrderLineD365SalesEntity, InventoryLotId), true);
                        }
                        salesLine.SkipAssignInventTransId = NoYes::Yes;
                        SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);
                        salesLine.CustAccount = salesTable.CustAccount;
                        salesLine.CustGroup = salesTable.CustGroup;

                    // Continue to fall through to next case:
                    case DataEntityDatabaseOperation::Update:
                        // Set the correct inventDimId on the table buffer.
                        salesLine.parmQuantityErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods::acceptUserInputWithWarning());

                        salesLine.setStockedProduct();
                        salesLine.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
                        salesLine.AutoCreateInterCompanyOrders = NoYes::Yes;

                        // When SkipCreateAutoCharges is specified, the SkipCreateMarkup field on salesline should be set to the value of the SkipCreateAutoCharges field on the entity.
                        if (this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, SkipCreateAutoCharges)))
                        {
                            salesLine.SkipCreateMarkup = this.SkipCreateAutoCharges;
                        }
                        else
                        {
                            // When SkipCreateAutoCharges is not specified, keep the original rule.
                            if (this.scopeIdentifier())
                            {
                                // Skip creation of markup when doing data migration.
                                salesLine.SkipCreateMarkup = NoYes::Yes;
                            }
                        }
      
                        guid blankGuid;

                        if (this.scopeIdentifier() != blankGuid)
                        {
                            // And propagate the scopeIdentifier to the datasource.
                            salesLine.scopeIdentifier(this.scopeIdentifier());
                        }

                        salesLine.IsIntegration = TradeIntegrationType::Dynamics365Sales;
                        salesLine.SalesOrderIntegrationCreationType = this.SalesOrderIntegrationCreationType;
                        break;
                }
                break;

            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                LogisticsPostalAddressBaseEntity logisticsPostalAddressBaseEntity = _dataSourceCtx.getBuffer();
                
                boolean skipDatabaseOperation = !this.DeliveryAddressDescription
                                                && SalesSkipAddressCreationIfAddressDescriptionBlankFlight::instance().isEnabled()
                                                && _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update
                                                && !logisticsPostalAddressBaseEntity.isAnyMappedFieldModified();

                if (skipDatabaseOperation)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else
                {
                    // The Address field is generated to a specified format based on the component address parts. Updating it directly is not allowed.
                    logisticsPostalAddressBaseEntity.fieldState(fieldNum(LogisticsPostalAddressBaseEntity, Address), FieldState::NotSet);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine))
        {
            SalesLine salesLine = _dataSourceCtx.getBuffer();
            this.TradeEntitySpecificDeliveryAddress::mapSavedPostalAddressToEntity(_entityCtx,  salesLine.DeliveryPostalAddress);
            this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(salesLine.inventDim());
            this.mapSalesCategoryFromSalesLineToEntity(_entityCtx, salesLine);

            if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
            {
                salesLine.fieldState(fieldNum(SalesLine, SalesPrice), FieldState::Set);
                salesLine.fieldState(fieldNum(SalesLine, LineAmount), FieldState::Set);
            }

            if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
            {
                salesLine.fieldState(fieldNum(SalesLine, LinePercent), FieldState::Set);
                salesLine.fieldState(fieldNum(SalesLine, LineDisc), FieldState::Set);
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);

        if (SalesOrderLineV2EntityValidateWriteFlight::instance().isEnabled() && !salesTable.RecId)
        {
            return checkFailed(strFmt("@SCM:SpecifiedSalesOrderCouldNotBeFoundOperationAbortedError", this.SalesOrderNumber));
        }

        if (this.RecId)
        {
            if (RetailParameters::isRetailEnabledAndInUse()
                && RetailSalesTable::find(this.SalesOrderNumber).RetailChannel)
            {
                return checkFailed("@SCM:SalesOrderLineEntityDoesNotSupportUpdatesOfRetailOrders");
            }
        }

        if (!salesTable.checkUpdate(true, true, true))
        {
            return false;
        }

        boolean ret = super();

        ret = ret && InventTable::checkExist(this.ItemNumber);

        if (ret && this.mustValidateSalesProductCategory())
        {
            EcoResProductCategory productCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(this.ItemNumber, EcoResCategoryNamedHierarchyRole::Sales);
            EcoResCategory selectedCategory = this.resolveProductCategory();

            if (selectedCategory.RecId != productCategory.Category)
            {
                ret = checkFailed(strFmt("@SCM:SalesLineItemAndCategorySpecifiedError", this.ItemNumber, this.SalesProductCategoryName));
            }
        }

        if (ret)
        {
            InventDim userSpecifiedDimensions = InventDim::find(this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId());
            Set allowEmptyFiels = new Set(Types::Integer);
            allowEmptyFiels.add(-1); // checkDimFieldsValid should allow empty values for all fields since we haven't done defaulting yet.
			ret = userSpecifiedDimensions.checkDimFieldsValid(this.ItemNumber, userSpecifiedDimensions, true, allowEmptyFiels);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateSalesProductCategory</Name>
				<Source><![CDATA[
    private boolean mustValidateSalesProductCategory()
    {
        return this.ItemNumber && this.SalesProductCategoryName 
            && (!SalesOrderQuoteLineCDSCheckProductCategoryOnlyIfModifiedFlight::instance().isEnabled() || this.isFieldModified(fieldNum(SalesOrderLineD365SalesEntity, SalesProductCategoryName)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        if (!SalesLine::findInventTransId(this.InventoryLotId).checkDelete(true, true))
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductCategory</Name>
				<Source><![CDATA[
    private EcoResCategory resolveProductCategory()
    {
        EcoResCategory category;
        EcoResCategoryHierarchyRole hierarchyRole;

        select firstonly hierarchyRole 
            where hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Sales;
        
        if (hierarchyRole)
        {
            category = EcoResCategory::findByName(this.SalesProductCategoryName, hierarchyRole.CategoryHierarchy);
        }

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressPartyRecId</Name>
				<Source><![CDATA[
    // This method implements the interface defined by <c>TradeEntitySpecificDeliveryAddress</c>
    public RecId deliveryAddressPartyRecId()
    {
        return SalesTable::find(this.SalesOrderNumber).custTable_CustAccount().Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [[fieldNum(SalesOrderLineD365SalesEntity, DeliveryAddressDescription), [fieldNum(SalesOrderLineD365SalesEntity, DeliveryAddressCountryRegionId)]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesOrderLineD365SalesEntity, DeliveryAddressDescription):
                if (!this.DeliveryAddressDescription && this.DeliveryAddressCountryRegionId)
                {
                    this.defaultDeliveryAddressDescription();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryAddressDescription</Name>
				<Source><![CDATA[
    private void defaultDeliveryAddressDescription()
    {
        SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);
        this.DeliveryAddressDescription = salesTable.customerName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSalesCategoryFromSalesLineToEntity</Name>
				<Source><![CDATA[
    private void mapSalesCategoryFromSalesLineToEntity(DataEntityRuntimeContext _entityCtx, SalesLine _salesLine)
    {
        DataEntityDataSourceRuntimeContext categoryContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, EcoResCategory));
        EcoResCategory category = categoryContext.getBuffer();

        if (category.RecId != _salesLine.SalesCategory)
        {
            this.SalesProductCategoryName = EcoResCategory::find(_salesLine.SalesCategory).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(SalesOrderLineD365SalesEntity, InventoryLotId), InventParameters::numRefInventTransId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityDataSourceToFieldMapping</Name>
				<Source><![CDATA[
    public static container getEntityDataSourceToFieldMapping(container mapping)
    {
        mapping += [[dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, LogisticsPostalAddressBaseEntity), tablenum(LogisticsPostalAddress), fieldstr(SalesOrderLineD365SalesEntity, DeliveryPostalAddressRecId)]];

        return mapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine):
                SalesLine salesLine = _dataSourceCtx.getBuffer();
                SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);

                if (salesTable)
                {
                    salesLine.setSalesLineTypeFactoryAttributeFieldsFromSalesTable(salesTable);
                }

                this.defaultItemIdAndDimensions();
                break;
        }

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine))
        {
            SalesLine salesLine = _dataSourceCtx.getBuffer();
            this.setSaleslineProjectCategoryId(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemIdAndDimensions</Name>
				<Source><![CDATA[
    private void defaultItemIdAndDimensions()
    {
        EcoResProduct product = EcoResProduct::findByDisplayProductNumber(this.ProductNumber);
        InventDistinctProduct distinctProduct = InventDistinctProduct::findByProduct(product.RecId);
        
        if (distinctProduct)
        {
            this.ItemNumber = distinctProduct.ItemId;
            this.ProductColorId = distinctProduct.InventColorId;
            this.ProductStyleId = distinctProduct.InventStyleId;
            this.ProductVersionId = distinctProduct.InventVersionId;
            this.ProductSizeId = distinctProduct.InventSizeId;
            this.ProductConfigurationId = distinctProduct.configId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectFields</Name>
				<Source><![CDATA[
    private void setProjectFields(SalesLine _salesLine)
    {
        if (_salesLine.ProjId)
        {
            ProjTable projtable = ProjTable::find(_salesLine.ProjId);

            _salesLine.CurrencyCode = this.CurrencyCode ? this.CurrencyCode : projtable.currencyId();

            if (!ProjValProjCategorySetUp::checkProjCategory(_salesLine.ProjId, _salesLine.ProjCategoryId))
            {
                _salesLine.ProjCategoryId = '';
            }

            _salesLine.ProjLinePropertyId = this.ProjectLinePropertyId ? this.ProjectLinePropertyId : ProjLinePropertySetup::findLinePropertyId(_salesLine.ProjId, _salesLine.ProjCategoryId);

            if (!this.DeliveryAddressName)
            {
                _salesLine.setAddressFromProjTable(projtable);
            }

            if (!_salesLine.ItemId)
            {
                _salesLine.StockedProduct = NoYes::No;
            }
            else
            {
                InventModelGroup inventModelGroup = InventTable::modelGroupByItemId(_salesLine.ItemId);
                _salesLine.StockedProduct = inventModelGroup.isStocked()? NoYes::Yes : NoYes::No;
            }

            _salesLine.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesOrderLineD365SalesEntity)).salesOrderActivities().insert(this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets project category ID for sales line.
    /// </summary>
    /// <param name = "_salesLine">Sales order line record.</param>
    private void setSalesLineProjectCategoryId(SalesLine _salesLine)
    {
        if (_salesLine.ProjId && this.ItemNumber && !this.ProjectCategoryId)
        {
            ProjCategoryId categoryId = this.getInventProjCategoryId(InventTable::find(this.ItemNumber));

            _salesLine.ProjCategoryId = categoryId ? categoryId : _salesLine.ProjCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get inventory project category Id.
    /// </summary>
    /// <param name = "_inventTable">Invent table record.</param>
    /// <returns>Inventory project category Id</returns>
    protected ProjCategoryId getInventProjCategoryId(InventTable _inventTable)
    {
        return _inventTable.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///validates data entity fields
    /// </summary>
    /// <param name = "_fieldIdToCheck"></param>
    /// <returns></returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret && this.RecId)
        {
            SalesTable salesTable = SalesTable::find(this.SalesOrderNumber);

            if (_fieldIdToCheck != fieldNum(SalesOrderLineD365SalesEntity, OrderedSalesQuantity) && salesTable.isInterCompanyOrder())
            {
                ret = checkFailed("@SCM:SalesOrderLineEntityDoesNotSupportUpdatesOfIntercompanyOrders");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesOrderLineD365SalesEntity)).salesOrderActivities().update(this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultInventDimForDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize default inventDim for direct delivery invent from sales header or default warehouse in
    /// item is marked for direct delivery when inventDim not setting up.
    /// </summary>
    /// <param name = "_salesLine">Sales line record.</param>
    protected void initializeDefaultInventDimForDirectDelivery(SalesLine _salesLine)
    {
        MCRInventTable mcrInventTable;

        select firstonly DropShipment from mcrInventTable
            where mcrInventTable.InventTable == _salesLine.inventTable().RecId;
        
        InventDim inventDim = _salesLine.inventDim();

        if (mcrInventTable.DropShipment && (!inventDim.InventSiteId || !inventDim.InventLocationId))
        {
            if (SalesOrderLineD365SalesEntityDefaultDimensionsFlight::instance().isEnabled())
            {
                this.defaultLineDimension(_salesLine);
                _salesLine.type().initReleasedProductSpecificDefaulting(_salesLine.inventTable());
            }

            _salesLine.type().initStorageDimensionsFromHeader();

            if (SalesOrderLineD365SalesEntityDefaultDimensionsFlight::instance().isEnabled())
            {
                if (mcrInventTable.DefaultDropShipmentWarehouse)
                {
                    InventDim inventDimLocal = _salesLine.inventDim();
                    inventDimLocal.InventLocationId = mcrInventTable.DefaultDropShipmentWarehouse;
                    inventDimLocal.InventSiteId     = InventLocation::find(inventDimLocal.InventLocationId).InventSiteId;
                    inventDimLocal = InventDim::findOrCreate(inventDimLocal);
                    _salesLine.setInventDimId(inventDimLocal.inventDimId, inventDimLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineAmountDependentFieldStages</Name>
				<Source><![CDATA[
    private void resetLineAmountDependentFieldStages()
    {
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, SalesPrice), FieldState::NotSet);
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, LineDiscountAmount), FieldState::NotSet);
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, LineDiscountPercentage), FieldState::NotSet);
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, MultiLineDiscountAmount), FieldState::NotSet);
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, MultiLineDiscountPercentage), FieldState::NotSet);
        this.fieldState(fieldNum(SalesOrderLineD365SalesEntity, FixedPriceCharges), FieldState::NotSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreateAutoChargesComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>SkipCreateAutoCharges</c> field is only designed for import scenarios
    /// so we will always return 'Yes' for export scenarios to save performance.
    /// </summary>
    /// <returns>Yes</returns>
    private static str skipCreateAutoChargesComputedColumnDefinition()
    {
        return SysComputedColumn::returnLiteral(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryAddressOrderSpecificComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str isDeliveryAddressOrderSpecificComputedColumnDefinition()
    {
        // The <c>IsDeliveryAddressOrderSpecific</c> field is only designed for import scenarios
        // so we will always return 'No' for export scnearios to save performance.
        return SysComputedColumn::returnLiteral(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product name from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Product name</returns>
    public static str productNameComputedColumnDefinition()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
                                                  SysComputedColumn::comparisonLiteral('')),
            SysComputedColumn::returnField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
            SysComputedColumn::returnField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>areTotalsComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the are totals calculated flag.
    /// </summary>
    /// <returns>The value of <c>AreTotalsCalculated</c> field.</returns>
    public static str areTotalsComputedColumnDefinition()
    {
        return SysComputedColumn::if(SysComputedColumn::isNullExpression(SysComputedColumn::comparisonField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesOrderLineTotals), fieldStr(SalesOrderLineTotals, RecId))),
            SysComputedColumn::returnLiteral(NoYes::No),
            SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the Total discount amount by subtracting the fixed price charge from the total discount.
    /// </summary>
    /// <returns>The value of <c>TotalDiscountAmount</c> field.</returns>
    /// <remarks>
    /// On entity import the TotalDiscountAmount for a full line is divided by line quantity.
    /// Due to rounding of the result there may be an amount difference once the result is again multiplied by line quantity.
    /// This difference is stored in FixedPriceCharges on import.
    /// </remarks>
    public static str totalDiscountAmountComputedColumnDefinition()
    {
        return SysComputedColumn::subtract(
            SysComputedColumn::returnField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesOrderLineTotals), fieldStr(SalesOrderLineTotals, TotalDiscountAmount)),
            SysComputedColumn::returnField(tableStr(SalesOrderLineD365SalesEntity), dataEntityDataSourceStr(SalesOrderLineD365SalesEntity, SalesLine), fieldStr(SalesLine, SalesMarkup)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkLineAmountAsNotSet</Name>
				<Source><![CDATA[
    private boolean mustMarkLineAmountAsNotSet(DataEntityRuntimeContext _entityCtx)
    {
        boolean dwCalculateLineAmountFlight, ret;
        
        dwCalculateLineAmountFlight = DualWriteCalculateLineAmountFlight::instance().isEnabled();

        ret = SalesParameters::find().SalesEntityCalculateLineAmount
            || (!dwCalculateLineAmountFlight && !this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, LineAmount)))
            || (dwCalculateLineAmountFlight && !this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, LineAmount))
                && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                && this.hasLineAmountDependentFieldsSet());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLineAmountDependentFieldsSet</Name>
				<Source><![CDATA[
    private boolean hasLineAmountDependentFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, SalesPrice))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, OrderedSalesQuantity))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, LineDiscountAmount))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, LineDiscountPercentage))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, MultilineDiscountAmount))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, MultilineDiscountPercentage))
            || this.isFieldSet(fieldNum(SalesOrderLineD365SalesEntity, FixedPriceCharges));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CDSIntegration</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesOrderLineD365SalesEntityDevDoc</DeveloperDocumentation>
	<FormRef>SalesTable</FormRef>
	<Label>@SCM:SalesOrderLineD365SalesEntity</Label>
	<Tags>Sales order</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SalesOrderLineD365SalesStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>D365SalesOrderLines</PublicCollectionName>
	<PublicEntityName>D365SalesOrderLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderLineStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsLineStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultilineDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultilineDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedReceiptDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedPriceCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderedSalesQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedShippingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShippingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingWarehouseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderedInventoryStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDeliveryAddressOrderSpecific</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormattedDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryBuildingCompliment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDistrictName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDunsNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDeliveryAddressPrivate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLatitude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLongitude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressPostBox</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStreet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStreetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressTimeZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedOverdeliveryPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedUnderdeliveryPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedReceiptDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTermsId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBatchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderPromisingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesProductCategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesProductCategoryHierarchyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesOrderNumber</Name>
			<DataField>SalesId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineCreationSequenceNumber</Name>
			<DataField>LineCreationSequenceNumber</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesOrderLineStatus</Name>
			<DataField>SalesStatus</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsLineStopped</Name>
			<DataField>Blocked</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressName</Name>
			<Label>@SCM:DeliveryAddressName</Label>
			<Mandatory>No</Mandatory>
			<DataField>DeliveryName</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineAmount</Name>
			<DataField>LineAmount</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDiscountAmount</Name>
			<DataField>LineDisc</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDiscountPercentage</Name>
			<DataField>LinePercent</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscountAmount</Name>
			<DataField>MultiLnDisc</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscountPercentage</Name>
			<DataField>MultiLnPercent</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDescription</Name>
			<DataField>Name</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPriceQuantity</Name>
			<DataField>PriceUnit</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedReceiptDate</Name>
			<DataField>ReceiptDateRequested</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FixedPriceCharges</Name>
			<DataField>SalesMarkup</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPrice</Name>
			<DataField>SalesPrice</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderedSalesQuantity</Name>
			<DataField>SalesQty</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitSymbol</Name>
			<DataField>SalesUnit</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConfirmedShippingDate</Name>
			<DataField>ShippingDateConfirmed</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedShippingDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ShippingDateRequested</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>configId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventColorId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingSiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingWarehouseLocationId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>wMSLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrderedInventoryStatusId</Name>
			<DataField>InventStatusId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVersionId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventVersionId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchNumber</Name>
			<DataField>inventBatchId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSerialNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>inventSerialId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalTaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>TotalTaxAmount</DataField>
			<DataSource>SalesOrderLineTotals</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalChargesAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>TotalChargesAmount</DataField>
			<DataSource>SalesOrderLineTotals</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>totalDiscountAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>AreTotalsCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>areTotalsComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesTotalsCalculated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountryRegionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountryRegionISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountyId</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDunsNumber</Name>
			<DataField>DunsNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressPostBox</Name>
			<DataField>PostBox</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStateId</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStreetNumber</Name>
			<DataField>StreetNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryBuildingCompliment</Name>
			<DataField>BuildingCompliment</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidTo</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidFrom</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormattedDeliveryAddress</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDeliveryAddressPrivate</Name>
			<Label>@SCM:IsDeliveryAddressPrivate</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsDeliveryAddressOrderSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:IsOneTimeDeliveryAddress</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isDeliveryAddressOrderSpecificComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>productNameComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResProductName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>SalesTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowedOverdeliveryPercentage</Name>
			<DataField>OverDeliveryPct</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowedUnderdeliveryPercentage</Name>
			<DataField>UnderDeliveryPct</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ConfirmedReceiptDate</Name>
			<DataField>ReceiptDateConfirmed</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryModeCode</Name>
			<DataField>DlvMode</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryTermsId</Name>
			<DataField>DlvTerm</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalItemNumber</Name>
			<Label>@SYS14552</Label>
			<DataField>ExternalItemId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesOrderPromisingMethod</Name>
			<DataField>DeliveryDateControlType</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesProductCategoryName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectCategoryId</Name>
			<DataField>ProjCategoryId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectId</Name>
			<DataField>ProjId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectLinePropertyId</Name>
			<DataField>ProjLinePropertyId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesProductCategoryHierarchyName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>SalesProductCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryPostalAddressRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>AddressRecId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryLotId</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>InventTransId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesDeliverNow</Name>
			<DataField>SalesDeliverNow</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryServiceReservationId</Name>
			<DataField>InventoryServiceReservationId</DataField>
			<DataSource>SalesLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>SkipCreateAutoCharges</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:SkipAutoChargeCreation</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>skipCreateAutoChargesComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>SalesOrderIntegrationCreationType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>SalesOrderIntegrationCreationType</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>SalesOrderNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesDocumentD365SalesEntitySpecificMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressDescription</MapField>
					<MapFieldTo>DeliveryAddressDescription</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLocationId</MapField>
					<MapFieldTo>DeliveryAddressLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FormattedDeliveryAddress</MapField>
					<MapFieldTo>FormattedDeliveryAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeliveryAddressOrderSpecific</MapField>
					<MapFieldTo>IsDeliveryAddressOrderSpecific</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>ProductConfigurationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
					<MapFieldTo>ItemBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>ProductColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>ShippingWarehouseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
					<MapFieldTo>ItemSerialNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>ShippingSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>ProductSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
					<MapFieldTo>OrderedInventoryStatusId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>ProductStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>ProductVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
					<MapFieldTo>ShippingWarehouseLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradeEntitySpecificDeliveryAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCity</MapField>
					<MapFieldTo>DeliveryAddressCity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountryRegionId</MapField>
					<MapFieldTo>DeliveryAddressCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountryRegionISOCode</MapField>
					<MapFieldTo>DeliveryAddressCountryRegionISOCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountyId</MapField>
					<MapFieldTo>DeliveryAddressCountyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressDistrictName</MapField>
					<MapFieldTo>DeliveryAddressDistrictName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLatitude</MapField>
					<MapFieldTo>DeliveryAddressLatitude</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLongitude</MapField>
					<MapFieldTo>DeliveryAddressLongitude</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressPostBox</MapField>
					<MapFieldTo>DeliveryAddressPostBox</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStateId</MapField>
					<MapFieldTo>DeliveryAddressStateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStreet</MapField>
					<MapFieldTo>DeliveryAddressStreet</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStreetNumber</MapField>
					<MapFieldTo>DeliveryAddressStreetNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressZipCode</MapField>
					<MapFieldTo>DeliveryAddressZipCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryBuildingCompliment</MapField>
					<MapFieldTo>DeliveryBuildingCompliment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocationId</MapField>
					<MapFieldTo>DeliveryAddressLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeliveryAddressOrderSpecific</MapField>
					<MapFieldTo>IsDeliveryAddressOrderSpecific</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>SalesOrderHeaderD365Sales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>SalesOrderHeaderD365SalesEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>D365SalesOrderHeader</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>D365SalesOrderLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>SalesOrderHeaderCDSEntity_SalesOrderNumber</Name>
					<Field>SalesOrderNumber</Field>
					<RelatedField>SalesOrderNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>SalesOrderHeaderCDSEntity_DataAreaId</Name>
					<Field>DataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SalesLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>SalesLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResCategory</Name>
								<Field>SalesCategory</Field>
								<JoinRelationName>EcoResCategory</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesLine</JoinDataSource>
								<JoinRelationName>InventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DeliveryPostalAddress</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>AddressRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesOrderLineTotals</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesOrderLineTotals</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InventTransId</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>InventTransId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SalesId</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>SalesId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResDistinctProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResDistinctProduct</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResProductSystemLanguage</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResProductSystemLanguage</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>Product</Field>
												<JoinDataSource>InventDistinctProduct</JoinDataSource>
												<RelatedField>Product</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResProductTranslationToSystemLanguage</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResProductTranslation</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>EcoResDistinctProduct</JoinDataSource>
												<RelatedField>Product</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation2</Name>
												<Field>SystemLanguageId</Field>
												<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
												<RelatedField>LanguageId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>InventTable</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>InventTable</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResProductMaster</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>EcoResProductMaster</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>Product</Field>
														<JoinDataSource>InventTable</JoinDataSource>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResProductMasterTranslationToSystemLanguage</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>EcoResProductTranslation</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>RecId</Field>
														<JoinDataSource>EcoResProductMaster</JoinDataSource>
														<RelatedField>Product</RelatedField>
													</AxQuerySimpleDataSourceRelation>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation2</Name>
														<Field>SystemLanguageId</Field>
														<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
														<RelatedField>LanguageId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>ItemId</Field>
												<JoinDataSource>InventdistinctProduct</JoinDataSource>
												<RelatedField>ItemId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResDistinctProduct_EcoResDistinctProductVariant</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProductVariant</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Product</Field>
										<JoinDataSource>InventDistinctProduct</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>SalesLine</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy1</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy2</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>ConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation_ProductVersionId</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesProductCategoryHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategoryHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CategoryHierarchy</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>SalesType</Name>
						<Field>SalesType</Field>
						<Value>Sales</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>