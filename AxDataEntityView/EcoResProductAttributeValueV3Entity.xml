<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValueV3Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductAttributeValueV3Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateProduct();
        ret = ret && this.validateAttributeType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResValue)
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            this.initializeEcoResValue(_dataSourceCtx, EcoResAttributeType::findByName(this.AttributeTypeName));
        }
        else
        {
            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret = super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResAttribute):
                if (!ret)
                {
                    EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
                    ret = EcoResAttribute::findByName(this.AttributeName, ecoResAttributeType.RecId);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResValue):
                if (!ret)
                {
                    EcoResProductInstanceValue ecoResProductInstanceValue = _entityCtx.getRuntimeContextByName(tableStr(EcoResProductInstanceValue)).getBuffer();
                    EcoResAttribute ecoResAttribute = _entityCtx.getRuntimeContextByName(tableStr(EcoResAttribute)).getBuffer();

                    if (ecoResProductInstanceValue
                        && ecoResAttribute)
                    {
                        EcoResAttributeValue ecoResAttributeValue = EcoResAttributeValue::findByInstanceAttribute(ecoResProductInstanceValue.RecId, ecoResAttribute.RecId);
                        ret = EcoResValue::getConcreteEcoResValueRecord(EcoResValue::find(ecoResAttributeValue.Value));
                    }
                }
                break;

            case dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResProductAttributeView):
                if (!ret)
                {
                    EcoResProductAttributeView ecoResProductAttributeView = _dataSourceCtx.getBuffer();
                    EcoResProductAttributeView resolvedEcoResProductAttributeView;
                    select firstonly resolvedEcoResProductAttributeView
                        where resolvedEcoResProductAttributeView.Product == ecoResProductAttributeView.Product
                            && resolvedEcoResProductAttributeView.Attribute == ecoResProductAttributeView.Attribute;

                    ret = resolvedEcoResProductAttributeView;

                    if (!ret)
                    {
                        throw error(strFmt("@SCM:ErrorMessage_AttributeNotAssociatedToProduct", this.AttributeName, this.ProductNumber));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResValue))
        {
            EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.AttributeTypeName);

            if (this.isDefaultValueProvided(attributeType.DataType))
            {
                this.validateDefaultValues(_dataSourceCtx, attributeType);
            }
            else
            {
                this.fillDefaultValueFromAttribute(_dataSourceCtx, attributeType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize attribute values table based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     Datasource context.
    /// </param>
    /// <param name = "_attributeType">
    ///     An attribute data type.
    /// </param>
    protected void initializeEcoResValue(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        DictTable dictTable;
        switch (_attributeType.DataType)
        {
            case AttributeDataType::Currency:
                dictTable = new DictTable(tableNum(EcoResCurrencyValue));
                break;

            case AttributeDataType::DateTime:
                dictTable = new DictTable(tableNum(EcoResDateTimeValue));
                break;

            case AttributeDataType::Decimal:
                dictTable = new DictTable(tableNum(EcoResFloatValue));
                break;

            case AttributeDataType::Integer:
                dictTable = new DictTable(tableNum(EcoResIntValue));
                break;

            case AttributeDataType::Text:
                dictTable = new DictTable(tableNum(EcoResTextValue));
                break;

            case AttributeDataType::TrueFalse:
                dictTable = new DictTable(tableNum(EcoResBooleanValue));
                break;
        }

        if (dictTable != null)
        {
            if (_attributeType.DataType == AttributeDataType::Decimal)
            {
                EcoResFloatValue floatValue = dictTable.makeRecord();
                floatValue.FloatUnitOfMeasure = this.UnitOfMeasure ? UnitOfMeasure::findBySymbol(this.UnitOfMeasure).RecId : EcoResAttributeTypeUnitOfMeasure::findByAttributeType(_attributeType).DefaultUnitOfMeasure;
                _dataSourceCtx.setBuffer(floatValue);
                this.FloatUnitOfMeasureSymbol = this.UnitOfMeasure;
            }
            else if (_attributeType.DataType == AttributeDataType::Integer)
            {
                EcoResIntValue intValue = dictTable.makeRecord();
                intValue.IntUnitOfMeasure = this.UnitOfMeasure ? UnitOfMeasure::findBySymbol(this.UnitOfMeasure).RecId : EcoResAttributeTypeUnitOfMeasure::findByAttributeType(_attributeType).DefaultUnitOfMeasure;;
                _dataSourceCtx.setBuffer(intValue);
                this.IntUnitOfMeasureSymbol = this.UnitOfMeasure;
            }
            else
            {
                _dataSourceCtx.setBuffer(dictTable.makeRecord());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultValueProvided</Name>
				<Source><![CDATA[
    protected boolean isDefaultValueProvided(AttributeDataType _attributeDataType)
    {
        boolean ret;

        switch (_attributeDataType)
        {
            case AttributeDataType::Currency:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, CurrencyValue)))
                {
                    ret = true;
                }
                break;

            case AttributeDataType::DateTime:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, DateTimeValue)))
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Decimal:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, DecimalValue)))
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Integer:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, IntegerValue)))
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Text:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, TextValue)))
                {
                    ret = true;
                }
                break;

            case AttributeDataType::TrueFalse:
                if (this.isFieldSet(fieldNum(EcoResProductAttributeValueV3Entity, BooleanValue)))
                {
                    ret = true;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultValues</Name>
				<Source><![CDATA[
    private void validateDefaultValues(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResValue ecoResDefaultValue = _dataSourceCtx.getBuffer();
        EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

        if (attributeDefaultValueHelper.validateDefaultValue(ecoResDefaultValue) == false)
        {
            throw error(strFmt("@SCM:DefaultValueIsNotValid", _attributeType.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    private boolean validateAttributeType()
    {
        boolean ret = true;
        EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(attributeType.DataType))
        {
            ret = checkfailed("@SCM:ReferenceTypeIsNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProduct</Name>
				<Source><![CDATA[
    private boolean validateProduct()
    {
        boolean ret = true;
        EcoResProduct ecoResProduct = EcoResProduct::findByProductNumber(this.ProductNumber);
        if (ecoResProduct.isDistinctProductVariant())
        {
            ret = checkFailed("@SCM:ErrorProductAttributeCannotBeOnDistinctProductVariant");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValueFromAttribute</Name>
				<Source><![CDATA[
    private void fillDefaultValueFromAttribute(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResAttribute ecoResAttribute = EcoResAttribute::findByName(this.AttributeName, _attributeType.RecId);
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(ecoResAttribute.RecId);

        if (ecoResAttributeDefaultValue.RecId)
        {
            EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

            EcoResValue ecoResDefaultValue = attributeDefaultValueHelper.getDefaultValueFromAttribute(ecoResAttributeDefaultValue);

            _dataSourceCtx.setBuffer(ecoResDefaultValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    public static Query defaultCTQuery()
    {
        Query ctQuery = new Query();

        QueryBuildDataSource qbdsEcoResAttributeValue = ctQuery.addDataSource(tableNum(EcoResAttributeValue));

        QueryBuildDataSource qbdsEcoResProductInstanceValue = qbdsEcoResAttributeValue.addDataSource(tableNum(EcoResProductInstanceValue));
        qbdsEcoResProductInstanceValue.addLink(fieldNum(EcoResAttributeValue, InstanceValue), fieldNum(EcoResProductInstanceValue, RecId));
        qbdsEcoResProductInstanceValue.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEcoResProductCategory = qbdsEcoResProductInstanceValue.addDataSource(tableNum(EcoResProductCategory));
        qbdsEcoResProductCategory.addLink(fieldNum(EcoResProductInstanceValue, Product), fieldNum(EcoResProductCategory, Product));
        qbdsEcoResProductCategory.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEcoResCategoryAttributeLookup = qbdsEcoResProductCategory.addDataSource(tableNum(EcoResCategoryAttributeLookup));
        qbdsEcoResCategoryAttributeLookup.addLink(fieldnum(EcoResProductCategory, Category), fieldnum(EcoResCategoryAttributeLookup, Category));
        qbdsEcoResCategoryAttributeLookup.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEcoResValue = qbdsEcoResAttributeValue.addDataSource(tableNum(EcoResValue));
        qbdsEcoResValue.addLink(fieldNum(EcoResAttributeValue, Value), fieldNum(EcoResValue, RecId));
        qbdsEcoResValue.joinMode(JoinMode::OuterJoin);
        qbdsEcoResValue.fetchMode(QueryFetchMode::One2One);
        
        return ctQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the string definition of the <c>UnitOfMeasure</c> computed column.
    /// </summary>
    /// <returns>The definition of the computed column</returns>
    /// <remarks>
    /// The computed column is defined as:
    /// CASE
    ///     WHEN <UNITOFMEASUREFLOAT>.SYMBOL IS NOT NULL
    ///     THEN <UNITOFMEASUREFLOAT>.SYMBOL
    ///     ELSE CASE
    ///         WHEN <UNITOFMEASUREINT>.SYMBOL IS NOT NULL
    ///         THEN <UNITOFMEASUREINT>.SYMBOL
    ///         ELSE ''
    ///     END
    /// END
    /// </remarks>
    public static str unitOfMeasureDefinition()
    {
        str dataEntityViewName = dataentityviewstr(EcoResProductAttributeValueV3Entity);
        str floatUoMDatasourceName = dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, UnitOfMeasureFloat);
        str intUoMDatasourceName = dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, UnitOfMeasureInt);
        str uomSymbolFieldName = fieldStr(UnitOfMeasure, Symbol);

        return SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(dataEntityViewName, floatUoMDatasourceName, uomSymbolFieldName)),
            SysComputedColumn::returnField(dataEntityViewName, floatUoMDatasourceName, uomSymbolFieldName),
            SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(dataEntityViewName, intUoMDatasourceName, uomSymbolFieldName)),
                SysComputedColumn::returnField(dataEntityViewName, intUoMDatasourceName, uomSymbolFieldName),
                SysComputedColumn::returnLiteral('')));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueV3Entity, EcoResAttributeValue))
        {
            EcoResAttributeValue attributeValueBufferToInsert = _dataSourceCtx.getBuffer();
            this.validateUniqueness(attributeValueBufferToInsert);
        }
    
        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUniqueness</Name>
				<Source><![CDATA[
    private boolean validateUniqueness(EcoResAttributeValue _attributeValueBufferToInsert)
    {
        if (!_attributeValueBufferToInsert)
        {
            EcoResAttributeValue attributeValue;

            select firstonly RecId from attributeValue
                where attributeValue.Attribute == _attributeValueBufferToInsert.Attribute
                    && attributeValue.InstanceValue == _attributeValueBufferToInsert.InstanceValue;
      
            if (attributeValue)
            {
                throw error(strFmt("@SCM:ErrorMessage_EcoResProductAttributeValueV3Entity_Duplicate", this.ProductNumber, this.AttributeName, this.AttributeTypeName));
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:Developer_EcoResProductAttributeValueV3Entity</DeveloperDocumentation>
	<FormRef>EcoResAttributeValue</FormRef>
	<Label>@SCM:DataEntity_EcoResProductAttributeValueV3Entity</Label>
	<Tags>Product attribute values</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductAttributeValueV3Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductAttributeValuesV3</PublicCollectionName>
	<PublicEntityName>ProductAttributeValueV3</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BooleanValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateTimeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DecimalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntegerValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeName</Name>
			<Label>@SCM:AttributeType</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BooleanValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>BooleanValue</DataField>
			<DataSource>EcoResValue_EcoResBooleanValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateTimeValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResValue_EcoResDateTimeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DecimalValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>FloatValue</DataField>
			<DataSource>EcoResValue_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegerValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>IntValue</DataField>
			<DataSource>EcoResValue_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TextValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>TextValue</DataField>
			<DataSource>EcoResValue_EcoResTextValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FloatUnitOfMeasure</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>FloatUnitOfMeasure</DataField>
			<DataSource>EcoResValue_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntUnitOfMeasure</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>IntUnitOfMeasure</DataField>
			<DataSource>EcoResValue_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>UnitOfMeasure</Name>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>unitOfMeasureDefinition</ComputedFieldMethod>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FloatUnitOfMeasureSymbol</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasureFloat</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntUnitOfMeasureSymbol</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasureInt</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductV2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductV2</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductAttributeValuesV3</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductV2Entity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Currency</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductAttributeValuesV3</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CurrencyEntity_CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResAttributeValue</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResAttributeValue</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttribute</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttribute</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttributeType</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResAttributeType</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinDataSource>EcoResAttribute</JoinDataSource>
										<JoinRelationName>EcoResAttributeType</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResAttributeValue</JoinDataSource>
								<JoinRelationName>Attribute</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductInstanceValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResProductInstanceValue</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProduct</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResDistinctProduct</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProduct</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>EcoResProduct_EcoResDistinctProductVariant</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>EcoResDistinctProductVariant</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResProduct_EcoResProductMaster</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResProductMaster</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinDataSource>EcoResProductInstanceValue</JoinDataSource>
										<JoinRelationName>EcoResProduct</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResAttributeValue</JoinDataSource>
								<JoinRelationName>InstanceValue</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResValue</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasureFloat</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>FloatUnitOfMeasure</Field>
										<JoinDataSource>EcoResValue</JoinDataSource>
										<JoinDerivedTable>EcoResFloatValue</JoinDerivedTable>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasureInt</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>IntUnitOfMeasure</Field>
										<JoinDataSource>EcoResValue</JoinDataSource>
										<JoinDerivedTable>EcoResIntValue</JoinDerivedTable>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResBooleanValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResBooleanValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResCurrencyValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResCurrencyValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResDateTimeValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDateTimeValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResFloatValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResFloatValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResIntValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResIntValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResValue_EcoResTextValue</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResTextValue</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>Value</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductAttributeView</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductAttributeView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResAttribute</JoinDataSource>
								<RelatedField>Attribute</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>