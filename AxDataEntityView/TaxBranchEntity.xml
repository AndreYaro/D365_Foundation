<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBranchEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxBranchEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "entityCtx">The context of the entity.</param>
    /// <param name = "dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LogisticsPostalAddress logisticsPostalAddress;

        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataentitydatasourcestr(TaxBranchEntity, TaxBranch))
        {
            TaxBranch taxBranch = _dataSourceCtx.getBuffer();

            select firstonly logisticsPostalAddress
                where logisticsPostalAddress.Address == this.Address;

            taxBranch.LogisticsLocation = logisticsPostalAddress.Location;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxBranchEntity::checkTaxBranchParamMarked();
        TaxBranchEntity::checkAllLocationIdFilledIn(_dmfDefinitionGroupExecution);
        TaxBranchEntity::checkLocationIdIsUnique(_dmfDefinitionGroupExecution);
        TaxBranchEntity::checkHeadOfficeSelected(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxBranchParamMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method indicates whether the tax branch parameter is marked.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkTaxBranchParamMarked()
    {
        if (!TaxThaiGovCertificationFeatureChecker::isTaxBranchParamMarked())
        {
            // 'Use tax branch must be set to yes.'
            throw error("@SYS4082530");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllLocationIdFilledIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all locationId are filled in.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkAllLocationIdFilledIn(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        InventSiteLogisticsLocation inventSiteLogisticsLocation;
        CompanyInfo companyInfo;
        DirPartyLocation dirPartyLocation;
        LogisticsPostalAddress logisticsPostalAddress;
        TaxBranchStaging taxBranchStaging;

        while select taxBranchStaging
            where taxBranchStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && taxBranchStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            select firstonly inventSiteLogisticsLocation
                exists join logisticsPostalAddress
                where logisticsPostalAddress.Location == inventSiteLogisticsLocation.Location
                    && logisticsPostalAddress.Address == taxBranchStaging.Address;

            if (inventSiteLogisticsLocation.RecId != 0)
            {
                continue;
            }

            select firstonly dirPartyLocation
                exists join companyInfo
                where companyInfo.RecId == dirPartyLocation.Party
                    exists join logisticsPostalAddress
                    where logisticsPostalAddress.Location == dirPartyLocation.Location
                        && logisticsPostalAddress.Address == taxBranchStaging.Address;

            if (dirPartyLocation.RecId == 0)
            {
                // Enter an address for the tax branch.
                throw error("@SYS4082520");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationIdIsUnique</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether address is unique for each tax branch.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkLocationIdIsUnique(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxBranchStaging taxBranchStaging;

        while select count(RecId) from taxBranchStaging
            group by Address
            where taxBranchStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && taxBranchStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            if (taxBranchStaging.RecId != 1)
            {
                // The address must be unique for each tax branch.
                throw error("@SYS4082518");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeadOfficeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the head office has been selected.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A table buffer.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void checkHeadOfficeSelected(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxBranchStaging taxBranchStaging;

        select firstonly taxBranchStaging
            where taxBranchStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && taxBranchStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        if (taxBranchStaging.RecId == 0)
        {
            return;
        }

        select count(RecId) from taxBranchStaging
            where taxBranchStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && taxBranchStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && taxBranchStaging.HeadOffice == NoYes::Yes;

        if (taxBranchStaging.RecId != 1)
        {
            // Select a Tax branch as the head office.
            throw error("@SYS4082521");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        this.Address = LogisticsPostalAddress::findByLocation(this.LogisticsLocation).Address;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TaxThailandGovCertification</ConfigurationKey>
	<CountryRegionCodes>TH</CountryRegionCodes>
	<FormRef>TaxBranch</FormRef>
	<Label>@SYS4082514</Label>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxBranchStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>Branches</PublicCollectionName>
	<PublicEntityName>Branch</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HeadOffice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Address</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Code</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<DataField>Code</DataField>
			<DataSource>TaxBranch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HeadOffice</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<DataField>HeadOffice</DataField>
			<DataSource>TaxBranch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LogisticsLocation</Name>
			<AccessModifier>Private</AccessModifier>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<DataField>LogisticsLocation</DataField>
			<DataSource>TaxBranch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<DataField>Name</DataField>
			<DataSource>TaxBranch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LogisticsLocation_LocationId</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Address</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>LogisticsAddressing</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>Code</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxBranch</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxBranch</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsLocation</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsLocation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LogisticsLocation</Name>
								<JoinRelationName>LogisticsLocation</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>