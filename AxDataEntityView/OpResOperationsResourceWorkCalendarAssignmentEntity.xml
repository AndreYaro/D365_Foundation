<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OpResOperationsResourceWorkCalendarAssignmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class OpResOperationsResourceWorkCalendarAssignmentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(OpResOperationsResourceWorkCalendarAssignmentEntity, WrkCtrResourceCalendar))
        {
            this.processWrkCtrResourceCalendarDeviations(_entityCtx, _dataSourceCtx);
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWrkCtrResourceCalendarDeviations</Name>
				<Source><![CDATA[
    private void processWrkCtrResourceCalendarDeviations(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Insert needs to handle deviations to existing resource calendar assignments. E.g. if
        // a resource is already assigned to a calendar for any of the dates specified, and the
        // current insert request is for a different calendar, then the insert should create
        // deviations for the specified dates. This mimics capabilities in the UI.

        WrkCtrResourceCalendar datasourceBuffer = _dataSourceCtx.getBuffer();

        if (!this.validateDeviationPeriod(datasourceBuffer))
        {
            return;
        }

        date startDate = datasourceBuffer.ValidFrom;
        date endDate = datasourceBuffer.ValidTo;

        WrkCtrResourceCalendar wrkCtrResourceCalendar;

        // In order to reduce complexity, find all existing associations to a different calendar
        // in the same period, regardless of whether a regular insert (non-deviation) would work:
        select validTimeState(startDate, endDate) count(RecId), minof(ValidFrom), maxof(ValidTo)
            from wrkCtrResourceCalendar
            where wrkCtrResourceCalendar.WrkCtrId == datasourceBuffer.WrkCtrId
            && wrkCtrResourceCalendar.CalendarId != datasourceBuffer.CalendarId;

        if (wrkCtrResourceCalendar.RecId)
        {
            // Detect obvious non-deviations (regular insert will work - required for long periods):
            if (this.checkNonDeviation(wrkCtrResourceCalendar, datasourceBuffer))
            {
                return;
            }

            this.validateDeviationLength(datasourceBuffer);

            date dateToChange = datasourceBuffer.ValidFrom;

            while (dateToChange <= datasourceBuffer.ValidTo)
            {
                WrkCtrResourceCalendar::changeResourceCalendar(datasourceBuffer.WrkCtrId, dateToChange, datasourceBuffer.CalendarId);

                dateToChange++;
            }

            // The deviation has now effectively handled the insert, so update the buffer and mark
            // the datasource as saved:
            _dataSourceCtx.setBuffer(this.findEntityDataSource(_entityCtx, _dataSourceCtx));
            _dataSourceCtx.setDataSaved(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNonDeviation</Name>
				<Source><![CDATA[
    private boolean checkNonDeviation(WrkCtrResourceCalendar _existingSum, WrkCtrResourceCalendar _new)
    {
        if (_existingSum.RecId == 1)
        {
            // Detect non-deviation:
            // Before:  <---1--->
            // After:   <-1-><---2--->
            if (_existingSum.ValidFrom < _new.ValidFrom && _existingSum.ValidTo <= _new.ValidTo)
            {
                // Check whether there are other later records. If there are, then
                // it is necessary to handle the change as a deviation:
                // Before:  <---1--->       <---n--->
                // After:   <-1-><---2--->  <---n--->
                date endDatePlus1 = _new.ValidTo + 1;
                date endOfTime = maxDate();

                WrkCtrResourceCalendar wrkCtrResourceCalendar;

                select firstonly validTimeState(endDatePlus1, endOfTime) RecId from wrkCtrResourceCalendar
                        where wrkCtrResourceCalendar.WrkCtrId == _new.WrkCtrId;

                if (!wrkCtrResourceCalendar.RecId)
                {
                    return true; // non-deviation
                }
            }

            // Detect non-deviation:
            // Before:  <-n->        <---1--->
            // After:   <-n->   <---2---><-1->
            if (_existingSum.ValidFrom > _new.ValidFrom && _existingSum.ValidTo > _new.ValidTo)
            {
                return true; // non-deviation
            }
        }

        return false; // deviation
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeviationPeriod</Name>
				<Source><![CDATA[
    private boolean validateDeviationPeriod(WrkCtrResourceCalendar _wrkCtrResourceCalendar)
    {
        if (_wrkCtrResourceCalendar.ValidFrom < today() || _wrkCtrResourceCalendar.ValidTo == dateMax())
        {
            return false; // let the framework handle this case
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeviationLength</Name>
				<Source><![CDATA[
    private void validateDeviationLength(WrkCtrResourceCalendar _wrkCtrResourceCalendar)
    {
        // For performance reasons, if the deviation period is too large, then do not allow
        // this approach:
        const int maxDeviationDays = 90;

        int validFrom = date2Num(_wrkCtrResourceCalendar.ValidFrom);
        int validTo = date2Num(_wrkCtrResourceCalendar.ValidTo);

        if (validTo - validFrom > maxDeviationDays)
        {
            throw error(strFmt("@SCM:OpResOperationsResourceWorkCalendarAssignmentEntityDeviationTooLong", maxDeviationDays));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SCM:OperationsResourceWorkCalendarAssignmentEntityDevDoc</DeveloperDocumentation>
	<FormRef>WrkCtrResourceGroup</FormRef>
	<Label>@SCM:ResourceCalendarAssignment</Label>
	<Tags>Resources</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>OpResOperationsResourceWorkCalendarAssignmentStaging</DataManagementStagingTable>
	<Modules>ProductionControl</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OperationsResourceId</Name>
			<DataField>WrkCtrId</DataField>
			<DataSource>WrkCtrTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WorkCalendarId</Name>
			<DataField>CalendarId</DataField>
			<DataSource>WrkCtrResourceCalendar</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>WrkCtrResourceCalendar</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>WrkCtrResourceCalendar</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>OperationsResourceId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ValidFrom</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ValidTo</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WrkCtrResourceCalendar</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WrkCtrResourceCalendar</Table>
				<ValidTimeStateUpdate>Correction</ValidTimeStateUpdate>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WrkCtrTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>WrkCtrTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>IsIndividualResource</Name>
								<Field>IsIndividualResource</Field>
								<Value>1</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Resource</Name>
								<JoinRelationName>Resource</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>