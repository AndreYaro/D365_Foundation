<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResSellableReleasedProductEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResSellableReleasedProductEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    public static Query defaultCTQuery()
    {
        Query sellableReleasedProductQuery = new Query();

        var inventDistinctproductDS = sellableReleasedProductQuery.addDataSource(tableNum(InventDistinctProduct));
        
        var productTranslation = inventDistinctproductDS.addDataSource(tableNum(EcoResProductTranslation));
        productTranslation.joinMode(JoinMode::OuterJoin);
        productTranslation.addLink(fieldNum(InventDistinctProduct, Product), fieldNum(EcoResProductTranslation, Product));
        productTranslation.fetchMode(QueryFetchMode::One2One);

        var inventTableModuleDS = inventDistinctproductDS.addDataSource(tableNum(InventTableModule));
        inventTableModuleDS.addLink(fieldNum(InventDistinctProduct, ItemId), fieldNum(InventTableModule, ItemId));
        inventTableModuleDS.fetchMode(QueryFetchMode::One2One);

        var unitOfMeasureDS = inventTableModuleDS.addDataSource(tableNum(UnitOfMeasure));
        unitOfMeasureDS.addLink(fieldNum(InventTableModule, UnitId), fieldNum(UnitOfMeasure, Symbol));
        unitOfMeasureDS.fetchMode(QueryFetchMode::One2One);

        var modelGroupItemDS = inventDistinctproductDS.addDataSource(tableNum(InventModelGroupItem));
        modelGroupItemDS.addLink(fieldNum(InventDistinctProduct, DataAreaId), fieldNum(InventModelGroupItem, ItemDataAreaId));
        modelGroupItemDS.addLink(fieldNum(InventDistinctProduct, ItemId), fieldNum(InventModelGroupItem, ItemId));
        modelGroupItemDS.fetchMode(QueryFetchMode::One2One);

        var inventTableDS = inventDistinctproductDS.addDataSource(tableNum(InventTable));
        inventTableDS.addLink(fieldNum(InventDistinctProduct, ItemId), fieldNum(InventTable, ItemId));
        inventTableDS.fetchMode(QueryFetchMode::One2One);
        
        var productMasterTranslation = inventTableDS.addDataSource(tableNum(EcoResProductTranslation));
        productMasterTranslation.joinMode(JoinMode::OuterJoin);
        productMasterTranslation.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product));
        productMasterTranslation.fetchMode(QueryFetchMode::One2One);

        var storageDimensionGroupItemDS = inventTableDS.addDataSource(tableNum(EcoResStorageDimensionGroupItem));
        storageDimensionGroupItemDS.addLink(fieldNum(InventTable, DataAreaId), fieldNum(EcoResStorageDimensionGroupItem, ItemDataAreaId));
        storageDimensionGroupItemDS.addLink(fieldNum(InventTable, ItemId), fieldNum(EcoResStorageDimensionGroupItem, ItemId));
        storageDimensionGroupItemDS.fetchMode(QueryFetchMode::One2One);

        var trackingDimensionGroupItemDS = inventTableDS.addDataSource(tableNum(EcoResTrackingDimensionGroupItem));
        trackingDimensionGroupItemDS.addLink(fieldNum(InventTable, DataAreaId), fieldNum(EcoResTrackingDimensionGroupItem, ItemDataAreaId));
        trackingDimensionGroupItemDS.addLink(fieldNum(InventTable, ItemId), fieldNum(EcoResTrackingDimensionGroupItem, ItemId));
        trackingDimensionGroupItemDS.fetchMode(QueryFetchMode::One2One);

        var itemGroupItemDS = inventTableDS.addDataSource(tableNum(InventItemGroupItem));
        itemGroupItemDS.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventItemGroupItem, ItemDataAreaId));
        itemGroupItemDS.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId));
        itemGroupItemDS.fetchMode(QueryFetchMode::One2One);

        var distinctProductDefaultSalesSetupDS = inventDistinctproductDS.addDataSource(tableNum(InventDistinctProductDefaultSalesSetup));
        distinctProductDefaultSalesSetupDS.addLink(fieldNum(InventDistinctProduct, RecId), fieldNum(InventDistinctProductDefaultSalesSetup, DistinctProduct));
        distinctProductDefaultSalesSetupDS.fetchMode(QueryFetchMode::One2One);

        var itemPriceDS = inventDistinctproductDS.addDataSource(tableNum(InventItemPrice));
        itemPriceDS.joinMode(JoinMode::OuterJoin);
        itemPriceDS.addLink(fieldNum(InventDistinctProduct, ItemId), fieldNum(InventItemPrice, ItemId));
        itemPriceDS.fetchMode(QueryFetchMode::One2One);

        return sellableReleasedProductQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product name from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Product name</returns>
    public static str productNameCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
                                              SysComputedColumn::comparisonLiteral('')),

            SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
            SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Description</returns>
    public static str descriptionCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)),
                                              SysComputedColumn::comparisonLiteral('')),

            SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)),
            SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Description)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitCostCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Unit Cost from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>UnitCost</returns>
    public static str unitCostCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventTable), fieldStr(InventTable, ItemDimCostPrice)),
            SysComputedColumn::comparisonLiteral(NoYes::Yes)),

            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventDistinctItemCostPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventDistinctItemCostPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventTableModuleInvent), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )),
            
            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventDistinctItemCostPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventDistinctItemCostPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventTableModuleInvent), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales price from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>SalesPrice</returns>
    public static str salesPriceCalc()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventTable), fieldStr(InventTable, ItemDimCostPrice)),
            SysComputedColumn::comparisonLiteral(NoYes::Yes)),

            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventDistinctItemSalesPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventDistinctItemSalesPriceCurrentActivePerVariant), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventTableModuleSales), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )),
            
            (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(EcoResSellableReleasedProductEntity), identifierStr(InventDistinctItemSalesPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price))),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventDistinctItemSalesPriceCurrentActivePerMaster), fieldStr(InventDistinctItemPriceCurrentActivePerSite, Price), fieldStr(InventDistinctItemPriceCurrentActivePerSite, PriceUnit)),
            EcoResSellableReleasedProductEntity::calcPricePerQty(identifierStr(InventTableModuleSales), fieldStr(InventTableModule, Price), fieldStr(InventTableModule, PriceUnit))
            )));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPricePerQty</Name>
				<Source><![CDATA[
    private static str calcPricePerQty(str _dataSourceName, FieldName _priceFieldName, FieldName _priceQtyFieldName)
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), _dataSourceName, _priceQtyFieldName),
                SysComputedColumn::returnLiteral(0)),
            SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), _dataSourceName, _priceFieldName),
            SysComputedColumn::divide(SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), _dataSourceName, _priceFieldName),
                                      SysComputedColumn::returnField(tableStr(EcoResSellableReleasedProductEntity), _dataSourceName, _priceQtyFieldName)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldServiceProductTypeDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the string that defines the Field Service product type computed column.
    /// </summary>
    /// <returns>The string that defines the Field Service product type.</returns>
    public static str fieldServiceProductTypeDefinition()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                EcoResSellableReleasedProductEntity::productTypeComputedColumnDefinition(),
                SysComputedColumn::comparisonLiteral(EcoResProductType::Service)),
            SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::Service),
            SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(
                        dataentityviewstr(EcoResSellableReleasedProductEntity),
                        dataEntityDataSourceStr(EcoResSellableReleasedProductEntity, InventModelGroup),
                        fieldStr(InventModelGroup, StockedProduct)),
                    SysComputedColumn::comparisonLiteral(NoYes::Yes)),
                SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::Inventory),
                SysComputedColumn::returnLiteral(EcoResFieldServiceProductType::NonInventory)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getViewSQLTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table name used in the SQL view definition.
    /// </summary>
    /// <param name = "_field">A computed column definition from which to get the table name.</param>
    /// <returns>The table name used in the SQL view definition.</returns>
    /// <remarks>The SQL view definition will contain a string with the value T1.FieldName. This API will return T1.</remarks>
    private static str getViewSQLTableName(str _field)
    {
        var periodPosition = strScan(_field, '.', 1, strlen(_field));
        
        return strDel(_field, periodPosition, strLen(_field));
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTypeComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str productTypeComputedColumnDefinition()
    {
        str recIdField = SysComputedColumn::comparisonField(
            dataentityviewstr(EcoResSellableReleasedProductEntity),
            dataEntityDataSourceStr(EcoResSellableReleasedProductEntity, EcoResDistinctProduct),
            fieldStr(EcoResDistinctProduct, RecId));

        DictField productTypeDictField = new DictField(tableNum(EcoResDistinctProduct), fieldNum(EcoResDistinctProduct, ProductType));

        return strFmt('%1.%2', EcoResSellableReleasedProductEntity::getViewSQLTableName(recIdField), productTypeDictField.name(DbBackend::Sql));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CDSIntegration</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResSellableReleasedProductEntityDevDoc</DeveloperDocumentation>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@SCM:EcoResSellableReleasedProductEntity</Label>
	<Tags>Products</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResSellableReleasedProductStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>SellableReleasedProducts</PublicCollectionName>
	<PublicEntityName>SellableReleasedProduct</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitDecimalPrecision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsStockedProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSalesStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldServiceProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitDecimalPrecision</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitSymbol</Name>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitDecimalPrecision</Name>
			<DataField>DecimalPrecision</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductName</Name>
			<ComputedFieldMethod>productNameCalc</ComputedFieldMethod>
			<ExtendedDataType>EcoResProductName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductDescription</Name>
			<ComputedFieldMethod>descriptionCalc</ComputedFieldMethod>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductType</Name>
			<DataField>ProductType</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsStockedProduct</Name>
			<DataField>StockedProduct</DataField>
			<DataSource>InventModelGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsSalesStopped</Name>
			<DataField>DefaultSiteSalesStopped</DataField>
			<DataSource>InventDistinctProductDefaultSalesSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>UnitCost</Name>
			<ComputedFieldMethod>unitCostCalc</ComputedFieldMethod>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>SalesPrice</Name>
			<ComputedFieldMethod>salesPriceCalc</ComputedFieldMethod>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>AccountingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>FieldServiceProductType</Name>
			<ComputedFieldMethod>fieldServiceProductTypeDefinition</ComputedFieldMethod>
			<EnumType>EcoResFieldServiceProductType</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitDecimalPrecision</Name>
			<DataField>DecimalPrecision</DataField>
			<DataSource>UnitOfMeasureInvent</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryUnitSymbol</Name>
			<Label>@SYS16617</Label>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasureInvent</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventDistinctProduct</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>InventDistinctProduct</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResDistinctProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResDistinctProduct</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>EcoResDistinctProductVariant</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResDistinctProductVariant</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResDistinctProduct</Name>
								<JoinRelationName>EcoResDistinctProduct</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductSystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductTranslationToSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
								<RelatedField>LanguageId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTableModuleSales</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTableModule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesTaxWithholdItemGroupHeading</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>TaxWithholdItemGroupHeading_TH</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>TaxWithholdItemGroupHeading_TH</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesTaxGSTReliefCategory</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>TaxGSTReliefCategory_MY</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>TaxGSTReliefCategory_MY</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasure</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>UnitId</Field>
										<JoinDataSource>InventTableModuleSales</JoinDataSource>
										<RelatedField>Symbol</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ModuleTypeSales</Name>
								<Field>ModuleType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTableModuleInvent</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTableModule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesTaxWithholdItemGroupHeadingCopy1</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>TaxWithholdItemGroupHeading_TH</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>TaxWithholdItemGroupHeading_TH</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesTaxGSTReliefCategoryCopy1</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>TaxGSTReliefCategory_MY</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>TaxGSTReliefCategory_MY</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasureInvent</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>UnitOfMeasure</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>UnitId</Field>
										<JoinDataSource>InventTableModuleInvent</JoinDataSource>
										<RelatedField>Symbol</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ModuleTypeInvent</Name>
								<Field>ModuleType</Field>
								<Value>Invent</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventModelGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventModelGroupItem</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>InventModelGroup</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>InventModelGroup</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ModelGroupDataAreaId</Field>
										<JoinDataSource>InventModelGroupItem</JoinDataSource>
										<RelatedField>DataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy1</Name>
										<Field>ModelGroupId</Field>
										<JoinDataSource>InventModelGroupItem</JoinDataSource>
										<RelatedField>ModelGroupId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemDataAreaId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductMaster</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductMaster</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Product</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResProductMasterTranslationToSystemLanguage</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResProductTranslation</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>EcoResProductMaster</JoinDataSource>
										<RelatedField>Product</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>SystemLanguageId</Field>
										<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
										<RelatedField>LanguageId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResStorageDimensionGroupItem</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResStorageDimensionGroupItem</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DataAreaId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemDataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>ItemId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResTrackingDimensionGroupItem</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResTrackingDimensionGroupItem</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DataAreaId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemDataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>ItemId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>InventItemGroupItem</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>InventItemGroupItem</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ItemId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>DataAreaId</Field>
										<JoinDataSource>InventTable</JoinDataSource>
										<RelatedField>ItemDataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventdistinctProduct</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctProductDefaultSalesSetup</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventDistinctProductDefaultSalesSetup</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>DistinctProduct</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemCostPriceCurrentActivePerVariant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>CostPriceType</Name>
								<Field>PriceType</Field>
								<Value>Cost</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy1</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation_InventVersionId</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemCostPriceCurrentActivePerMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>CostPriceType</Name>
								<Field>PriceType</Field>
								<Value>Cost</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceConfigId</Name>
								<Field>ItemPriceConfigId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceConfigId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventStyleId</Name>
								<Field>ItemPriceInventStyleId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventStyleId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventVersionId</Name>
								<Field>ItemPriceInventVersionId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventVersionId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventSizeId</Name>
								<Field>ItemPriceInventSizeId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventSizeId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventColorId</Name>
								<Field>ItemPriceInventColorId</Field>
								<Value>(InventDistinctItemCostPriceCurrentActivePerMaster.ItemPriceInventColorId == "")</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemSalesPriceCurrentActivePerVariant</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>SalesPriceType</Name>
								<Field>PriceType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy1</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy4</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceInventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>ItemPriceConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctItemSalesPriceCurrentActivePerMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctItemPriceCurrentActivePerSite</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>SalesPriceType</Name>
								<Field>PriceType</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceConfigId</Name>
								<Field>ItemPriceConfigId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceConfigId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventStyleId</Name>
								<Field>ItemPriceInventStyleId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventStyleId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventVersionId</Name>
								<Field>ItemPriceInventVersionId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventVersionId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventSizeId</Name>
								<Field>ItemPriceInventSizeId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventSizeId == "")</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>ItemPriceInventColorId</Name>
								<Field>ItemPriceInventColorId</Field>
								<Value>(InventDistinctItemSalesPriceCurrentActivePerMaster.ItemPriceInventColorId == "")</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Product</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1Copy1</Name>
								<Field>DefaultSalesSiteId</Field>
								<JoinDataSource>InventDistinctProductDefaultSalesSetup</JoinDataSource>
								<RelatedField>ItemPriceInventSiteId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Ledger</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>Ledger</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>InventDistinctProduct</JoinDataSource>
								<RelatedField>Name</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>