<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttributeValueEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttributeValueEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateAttributeType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResAttributeValueEntity, EcoResValue)
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);
            this.initializeEcoResValue(_dataSourceCtx, ecoResAttributeType.DataType);
        }
        else
        {
            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResAttributeValueEntity, EcoResValue))
        {
            EcoResValue ecoResValue = _dataSourceCtx.getBuffer();
            if (this.RecId && ecoResValue.RecId == 0)
            {
                ecoResValue = EcoResValue::getConcreteEcoResValueRecord(EcoResValue::find(this.RecId));
                _dataSourceCtx.setBuffer(ecoResValue);
            }
        }
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResAttributeValueEntity, EcoResValue))
        {
            EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);

            if (this.isDefaultValueProvided(attributeType.DataType))
            {
                this.validateDefaultValues(_dataSourceCtx, attributeType);
            }
            else
            {
                this.fillDefaultValues(_dataSourceCtx, attributeType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResAttributeValueEntity, EcoResValue))
        {
            EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);            
            if (AttributeDataTypeDiscriminator::checkAttributeDataTypeText(attributeType.DataType))
            {
                EcoResTextValue textValue = _dataSourceCtx.getBuffer();
                if (textValue.TextValue == "")
                {
                    //Default (Text) value will not be saved if it is empty
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                    _dataSourceCtx.setDataSaved(true);
                }
            }
        }
        boolean ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes tables based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     Datasource context.
    /// </param>
    /// <param name = "_dataType">
    ///     An attribute data type.
    /// </param>
    protected void initializeEcoResValue(DataEntityDataSourceRuntimeContext _dataSourceCtx, AttributeDataType _dataType)
    {
        DictTable dictTable;
        switch (_dataType)
        {
            case AttributeDataType::Currency:
                dictTable = new DictTable(tableNum(EcoResCurrencyValue));
                break;

            case AttributeDataType::DateTime:
                dictTable = new DictTable(tableNum(EcoResDateTimeValue));
                break;

            case AttributeDataType::Decimal:
                dictTable = new DictTable(tableNum(EcoResFloatValue));
                break;

            case AttributeDataType::Integer:
                dictTable = new DictTable(tableNum(EcoResIntValue));
                break;

            case AttributeDataType::Text:
                dictTable = new DictTable(tableNum(EcoResTextValue));
                break;

            case AttributeDataType::TrueFalse:
                dictTable = new DictTable(tableNum(EcoResBooleanValue));
                break;
        }

        if (dictTable != null)
        {
            _dataSourceCtx.setBuffer(dictTable.makeRecord());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultValueProvided</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if default value is provided based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_attributeDataType">
    ///     An attribute data type.
    /// </param>
    /// <returns>
    ///     true if default value is provided; otherwise, false
    /// </returns>
    protected boolean isDefaultValueProvided(AttributeDataType _attributeDataType)
    {
        boolean ret;
        switch (_attributeDataType)
        {
            case AttributeDataType::Currency:
                if (this.CurrencyValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::DateTime:
                if (this.DateTimeValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Decimal:
                if (this.DecimalValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Integer:
                if (this.IntegerValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Text:
                if (this.TextValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::TrueFalse:
                if (this.BooleanValue)
                {
                    ret = true;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultValues</Name>
				<Source><![CDATA[
    private void validateDefaultValues(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResValue ecoResDefaultValue = _dataSourceCtx.getBuffer();
        EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

        if (attributeDefaultValueHelper.validateDefaultValue(ecoResDefaultValue) == false)
        {
            throw error(strFmt("@SCM:DefaultValueIsNotValid", _attributeType.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    private boolean validateAttributeType()
    {
        boolean ret = true;
        EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);        
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(attributeType.DataType))
        {
            ret = checkfailed("@SCM:ReferenceTypeIsNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValues</Name>
				<Source><![CDATA[
    private void fillDefaultValues(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResValue ecoResDefaultValue = _dataSourceCtx.getBuffer();
        if (!ecoResDefaultValue.RecId)
        {
            if (this.ProductAttributeName)
            {
                this.fillDefaultValueFromAttribute(_dataSourceCtx, _attributeType);
            }
            else
            {
                this.fillDefaultValueFromAttributeType(_dataSourceCtx, _attributeType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValueFromAttribute</Name>
				<Source><![CDATA[
    private void fillDefaultValueFromAttribute(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResAttribute ecoResAttribute = EcoResAttribute::findByName(this.ProductAttributeName, _attributeType.RecId);
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(ecoResAttribute.RecId);

        if (ecoResAttributeDefaultValue.RecId)
        {
            EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

            EcoResValue ecoResDefaultValue = attributeDefaultValueHelper.getDefaultValueFromAttribute(ecoResAttributeDefaultValue);

            _dataSourceCtx.setBuffer(ecoResDefaultValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValueFromAttributeType</Name>
				<Source><![CDATA[
    private void fillDefaultValueFromAttributeType(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);
        EcoResValue ecoResDefaultValue = attributeDefaultValueHelper.getDefaultValue();
        _dataSourceCtx.setBuffer(ecoResDefaultValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResAttributeValueEntityDevDoc</DeveloperDocumentation>
	<FormRef>EcoResAttribute</FormRef>
	<Label>@SCM:EcoResAttributeValueEntity</Label>
	<Tags>Attribute values</Tags>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductAttributeTypeName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:AttributeType</Label>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>Name</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductAttributeName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>Name</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BooleanValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>BooleanValue</DataField>
			<DataSource>EcoResValue_EcoResBooleanValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateTimeValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResValue_EcoResDateTimeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DecimalValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>FloatValue</DataField>
			<DataSource>EcoResValue_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegerValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>IntValue</DataField>
			<DataSource>EcoResValue_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TextValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>TextValue</DataField>
			<DataSource>EcoResValue_EcoResTextValue</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RecId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResValue</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResValue</Table>
				<DataSources />
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResBooleanValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResBooleanValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResCurrencyValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResCurrencyValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResDateTimeValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResDateTimeValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResReferenceValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResReferenceValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResTextValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResTextValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResFloatValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResFloatValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>EcoResValue_EcoResIntValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResIntValue</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>