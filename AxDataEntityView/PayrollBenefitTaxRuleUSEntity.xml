<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBenefitTaxRuleUSEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollBenefitTaxRuleUSEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
      boolean ret;

      ret = super(_fieldIdToCheck);

      if (ret)
      {
          switch (_fieldIdToCheck)
          {
              case fieldNum(PayrollBenefitTaxRuleUSEntity, PreTaxBasis):

                  HcmBenefitPlan hcmBenefitPlan = HcmBenefitPlan::findByBenefitPlanId(this.BenefitPlanId);

                  if (hcmBenefitPlan.PayrollImpact == PayrollImpact::None)
                  {
                      ret = checkFailed("@PayrollProcessing:BenefitPlanTaxBasisCannotBeSet");
                  }
                  break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromFederalIncomeTax):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromFederalIncomeTax == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromFica):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromFica == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromLocalIncomeTax):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromLocalIncomeTax == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromMedicare):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromMedicare == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromStateDisabilityInsurance):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromStateDisabilityInsurance == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromStateIncomeTax):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromStateIncomeTax == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, IsExemptFromStateUnemployment):

                    if (this.PreTaxBasis == PayrollPreTaxBasis::Custom && this.IsExemptFromStateUnemployment == NoYes::Yes)
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxExemptionCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, TaxGroupId):

                    if (this.CustomPretaxMethod != PayrollCustomPretaxMethod::ByTaxGroup && this.TaxGroupId != Null )
                    {
                        ret = checkFailed("@PayrollProcessing:BenefitPlanTaxGroupCannotBeSet");
                    }
                    break;

                case fieldNum(PayrollBenefitTaxRuleUSEntity, TaxGroupId):

                    if (this.CustomPretaxMethod == PayrollCustomPretaxMethod::ByTaxGroup && this.TaxGroupId == Null )
                    {
                        ret = checkFailed(strFmt("@SYS110217", "@Payroll:TaxGroup"));
                    }
                    break;
          }
      }

      return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Payroll:BenefitTaxRuleUS</Label>
	<Tags>Payroll benefit setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PayrollBenefitTaxRuleUSStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>Payroll</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BenefitTaxRulesUS</PublicCollectionName>
	<PublicEntityName>BenefitTaxRuleUS</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BenefitPlanID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreTaxBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomPretaxMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFederalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromFICA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromLocalIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromMedicare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateDisabilityInsurance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateIncomeTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExemptFromStateUnemployment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BenefitPlanID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreTaxBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomPretaxMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BenefitPlan</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BenefitPlan</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomPretaxMethod</Name>
			<DataField>CustomPretaxMethod</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromFederalIncomeTax</Name>
			<DataField>IsExemptFromFederalIncomeTax</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromFICA</Name>
			<DataField>IsExemptFromFICA</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromLocalIncomeTax</Name>
			<DataField>IsExemptFromLocalIncomeTax</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromMedicare</Name>
			<DataField>IsExemptFromMedicare</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromStateDisabilityInsurance</Name>
			<DataField>IsExemptFromStateDisabilityInsurance</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromStateIncomeTax</Name>
			<DataField>IsExemptFromStateIncomeTax</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsExemptFromStateUnemployment</Name>
			<DataField>IsExemptFromStateUnemployment</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreTaxBasis</Name>
			<DataField>PreTaxBasis</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxGroup</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TaxGroup</DataField>
			<DataSource>PayrollBenefitTaxRule_US</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BenefitPlanID</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>BenefitPlanID</DataField>
			<DataSource>HcmBenefitPlan</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxGroupId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>GroupId</DataField>
			<DataSource>PayrollTaxGroup</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>BenefitPlanID</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>HcmBenefitPlanEntity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedDataEntity>HcmBenefitPlanEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>BenefitPlanID</Field>
					<RelatedField>Plan</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>PayrollTaxGroupEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>PayrollTaxGroupEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>TaxGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PayrollBenefitTaxRule_US</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PayrollBenefitTaxRule_US</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmBenefitPlan</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmBenefitPlan</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>HcmBenefitPlan</Name>
								<JoinRelationName>HcmBenefitPlan</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PayrollTaxGroup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PayrollTaxGroup</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>PayrollTaxGroup</Name>
								<JoinRelationName>PayrollTaxGroup</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>