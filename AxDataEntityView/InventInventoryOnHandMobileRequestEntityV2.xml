<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryOnHandMobileRequestEntityV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryOnHandMobileRequestEntityV2 extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        this.deletePreviousOnHandRequestEntry();

        super();

        this.insertOnHandEntries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOnHandEntries</Name>
				<Source><![CDATA[
    private void insertOnHandEntries()
    {
        InventSum inventSum;
        EcoResProduct ecoResProduct;
        InventTable inventTable;
        InventSumMobileTmp inventSumMobileTmp;

        select firstonly inventTable
            exists join ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
                   && ecoResProduct.DisplayProductNumber == this.ProductNumber
                   && inventTable.DataAreaId == this.DataAreaId;

        insert_recordset inventSumMobileTmp
            (InventVersionId, configId, InventStyleId, InventSizeId, InventColorId,
             InventSiteId, InventLocationId, wMSLocationId, InventBatchId, InventStatusId,
             PhysicalInvent, AvailPhysical, OnOrder, ReservPhysical, Ordered, Arrived, ReservOrdered)
        select InventVersionId, configId, InventStyleId, InventSizeId, InventColorId,
            InventSiteId, InventLocationId, wMSLocationId, InventBatchId, InventStatusId,
            PhysicalInvent, AvailPhysical, OnOrder, ReservPhysical, Ordered, Arrived, ReservOrdered
        from inventSum
            where inventSum.Closed == NoYes::No
               && inventSum.ItemId == inventTable.ItemId
               && inventSum.DataAreaId == this.DataAreaId;

        if (WHSInventEnabled::exist(inventTable.ItemId))
        {
            this.createWhsOnHandEntryAggregatedBySite(inventTable, inventSumMobileTmp);
            this.createWhsOnHandEntryAggregatedByWarehouse(inventTable, inventSumMobileTmp);
            this.createWhsOnHandEntryAggregatedByLocation(inventTable, inventSumMobileTmp);
            this.createWhsOnHandEntryAggregatedByInventBatch(inventTable, inventSumMobileTmp);
            this.createWhsOnHandEntryAggregatedByInventStatus(inventTable, inventSumMobileTmp);
        }
        else
        {
            this.createOnHandEntryAggregatedBySite(inventSumMobileTmp);
            this.createOnHandEntryAggregatedByWarehouse(inventSumMobileTmp);
            this.createOnHandEntryAggregatedByLocation(inventSumMobileTmp);
            this.createOnHandEntryAggregatedByInventBatch(inventSumMobileTmp);
            this.createOnHandEntryAggregatedByInventStatus(inventSumMobileTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWhsOnHandEntryAggregatedBySite</Name>
				<Source><![CDATA[
    private void createWhsOnHandEntryAggregatedBySite(InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId
        {
            InventDim inventDim = this.initInventDim(_inventSumMobileTmp);

            InventInventoryOnHandMobileEntry onHandEntry = this.initWhsOnHandEntry(inventDim, _inventTable, _inventSumMobileTmp);
                        
            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Site;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWhsOnHandEntryAggregatedByWarehouse</Name>
				<Source><![CDATA[
    private void createWhsOnHandEntryAggregatedByWarehouse(InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId
        {
            InventDim inventDim = this.initInventDim(_inventSumMobileTmp);
            inventDim.InventLocationId = _inventSumMobileTmp.InventLocationId;

            InventInventoryOnHandMobileEntry onHandEntry = this.initWhsOnHandEntry(inventDim, _inventTable, _inventSumMobileTmp);

            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Warehouse;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWhsOnHandEntryAggregatedByLocation</Name>
				<Source><![CDATA[
    private void createWhsOnHandEntryAggregatedByLocation(InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, wMSLocationId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, wMSLocationId
        {
            InventDim inventDim = this.initInventDim(_inventSumMobileTmp);
            inventDim.InventLocationId = _inventSumMobileTmp.InventLocationId;
            inventDim.wMSLocationId = _inventSumMobileTmp.wMSLocationId;
                        
            InventInventoryOnHandMobileEntry onHandEntry = this.initWhsOnHandEntry(inventDim, _inventTable, _inventSumMobileTmp);

            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.wMSLocationId = _inventSumMobileTmp.wMSLocationId;
            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Location;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWhsOnHandEntryAggregatedByInventBatch</Name>
				<Source><![CDATA[
    private void createWhsOnHandEntryAggregatedByInventBatch(InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventBatchId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventBatchId
        {
            if (!_inventSumMobileTmp.InventBatchId)
            {
                continue;
            }

            InventDim inventDim = this.initInventDim(_inventSumMobileTmp);
            inventDim.InventLocationId = _inventSumMobileTmp.InventLocationId;
            inventDim.InventBatchId = _inventSumMobileTmp.InventBatchId;
                        
            InventInventoryOnHandMobileEntry onHandEntry = this.initWhsOnHandEntry(inventDim, _inventTable, _inventSumMobileTmp);

            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.InventBatchId = _inventSumMobileTmp.InventBatchId;
            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::InventBatch;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWhsOnHandEntryAggregatedByInventStatus</Name>
				<Source><![CDATA[
    private void createWhsOnHandEntryAggregatedByInventStatus(InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventStatusId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventStatusId
        {
            if (!_inventSumMobileTmp.InventStatusId)
            {
                continue;
            }

            InventDim inventDim = this.initInventDim(_inventSumMobileTmp);
            inventDim.InventLocationId = _inventSumMobileTmp.InventLocationId;
            inventDim.InventStatusId = _inventSumMobileTmp.InventStatusId;
                        
            InventInventoryOnHandMobileEntry onHandEntry = this.initWhsOnHandEntry(inventDim, _inventTable, _inventSumMobileTmp);

            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.InventStatusId = _inventSumMobileTmp.InventStatusId;
            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::InventStatus;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandEntryAggregatedBySite</Name>
				<Source><![CDATA[
    private void createOnHandEntryAggregatedBySite(InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), sum(AvailPhysical), sum(ReservPhysical), sum(Ordered), sum(Arrived), sum(ReservOrdered),
                InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId
        {
            InventInventoryOnHandMobileEntry onHandEntry = this.initOnHandEntry(_inventSumMobileTmp);

            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Site;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandEntryAggregatedByWarehouse</Name>
				<Source><![CDATA[
    private void createOnHandEntryAggregatedByWarehouse(InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), sum(AvailPhysical), sum(ReservPhysical), sum(Ordered), sum(Arrived), sum(ReservOrdered),
                InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId
        {
            InventInventoryOnHandMobileEntry onHandEntry = this.initOnHandEntry(_inventSumMobileTmp);

            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Warehouse;
            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandEntryAggregatedByLocation</Name>
				<Source><![CDATA[
    private void createOnHandEntryAggregatedByLocation(InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), sum(AvailPhysical), sum(ReservPhysical), sum(Ordered), sum(Arrived), sum(ReservOrdered),
                InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, wMSLocationId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, wMSLocationId
        {
            InventInventoryOnHandMobileEntry onHandEntry = this.initOnHandEntry(_inventSumMobileTmp);

            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::Location;
            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.wMSLocationId = _inventSumMobileTmp.wMSLocationId;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandEntryAggregatedByInventBatch</Name>
				<Source><![CDATA[
    private void createOnHandEntryAggregatedByInventBatch(InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), sum(AvailPhysical), sum(ReservPhysical), sum(Ordered), sum(Arrived), sum(ReservOrdered),
                InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventBatchId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventBatchId
        {
            if (!_inventSumMobileTmp.InventBatchId)
            {
                continue;
            }

            InventInventoryOnHandMobileEntry onHandEntry = this.initOnHandEntry(_inventSumMobileTmp);

            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::InventBatch;
            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.InventBatchId = _inventSumMobileTmp.InventBatchId;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnHandEntryAggregatedByInventStatus</Name>
				<Source><![CDATA[
    private void createOnHandEntryAggregatedByInventStatus(InventSumMobileTmp _inventSumMobileTmp)
    {
        while select sum(PhysicalInvent), sum(OnOrder), sum(AvailPhysical), sum(ReservPhysical), sum(Ordered), sum(Arrived), sum(ReservOrdered),
                InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventStatusId
            from _inventSumMobileTmp
            group by InventVersionId, configId, InventStyleId, InventSizeId, InventColorId, InventSiteId, InventLocationId, InventStatusId
        {
            if (!_inventSumMobileTmp.InventStatusId)
            {
                continue;
            }

            InventInventoryOnHandMobileEntry onHandEntry = this.initOnHandEntry(_inventSumMobileTmp);

            onHandEntry.AggregateType = InventInventoryOnHandMobileAggregateType::InventBatch;
            onHandEntry.InventLocationId = _inventSumMobileTmp.InventLocationId;
            onHandEntry.InventStatusId = _inventSumMobileTmp.InventStatusId;
            onHandEntry.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    private InventDim initInventDim(InventSumMobileTmp _inventSumMobileTmp)
    {
        InventDim inventDim;

        inventDim.InventColorId     = _inventSumMobileTmp.InventColorId;
        inventDim.InventSizeId      = _inventSumMobileTmp.InventSizeId;
        inventDim.InventStyleId     = _inventSumMobileTmp.InventStyleId;
        inventDim.configId          = _inventSumMobileTmp.configId;
        inventDim.InventVersionId   = _inventSumMobileTmp.InventVersionId;
        inventDim.InventSiteId      = _inventSumMobileTmp.InventSiteId;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHSInventReserveQty</Name>
				<Source><![CDATA[
    private WHSInventReserveQty getWHSInventReserveQty(InventDim inventDim, InventTable _inventTable)
    {
        inventDim = InventDim::findOrCreate(inventDim);
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDim);

        return WHSInventReserveQty::newFromParms(
                            _inventTable,
                            inventDim,
                            inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWhsOnHandEntry</Name>
				<Source><![CDATA[
    private InventInventoryOnHandMobileEntry initWhsOnHandEntry(InventDim inventDim, InventTable _inventTable, InventSumMobileTmp _inventSumMobileTmp)
    {
        WHSInventReserveQty wHSInventReserveQty = this.getWHSInventReserveQty(inventDim, _inventTable);

        InventInventoryOnHandMobileEntry onHandEntry;

        onHandEntry.RequestId         = this.RequestId;
        onHandEntry.IsWHSItem         = NoYes::Yes;
        onHandEntry.ProductNumber     = this.ProductNumber;
        onHandEntry.InventColorId     = _inventSumMobileTmp.InventColorId;
        onHandEntry.InventSizeId      = _inventSumMobileTmp.InventSizeId;
        onHandEntry.InventStyleId     = _inventSumMobileTmp.InventStyleId;
        onHandEntry.configId          = _inventSumMobileTmp.configId;
        onHandEntry.InventVersionId   = _inventSumMobileTmp.InventVersionId;
        onHandEntry.InventSiteId      = _inventSumMobileTmp.InventSiteId;
        onHandEntry.PhysicalInvent    = _inventSumMobileTmp.PhysicalInvent;
        onHandEntry.OnOrder           = _inventSumMobileTmp.OnOrder;
        onHandEntry.AvailPhysical     = whsInventReserveQty.availPhysical();
        onHandEntry.TotalAvailable    = whsInventReserveQty.availTotal();
        onHandEntry.ReservedPhysical  = whsInventReserveQty.reservPhysical();

        return onHandEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOnHandEntry</Name>
				<Source><![CDATA[
    private InventInventoryOnHandMobileEntry initOnHandEntry(InventSumMobileTmp _inventSumMobileTmp)
    {
        InventInventoryOnHandMobileEntry onHandEntry;

        onHandEntry.RequestId         = this.RequestId;
        onHandEntry.IsWHSItem         = NoYes::No;
        onHandEntry.ProductNumber     = this.ProductNumber;
        onHandEntry.InventColorId     = _inventSumMobileTmp.InventColorId;
        onHandEntry.InventSizeId      = _inventSumMobileTmp.InventSizeId;
        onHandEntry.InventStyleId     = _inventSumMobileTmp.InventStyleId;
        onHandEntry.configId          = _inventSumMobileTmp.configId;
        onHandEntry.InventVersionId   = _inventSumMobileTmp.InventVersionId;
        onHandEntry.InventSiteId      = _inventSumMobileTmp.InventSiteId;
        onHandEntry.PhysicalInvent    = _inventSumMobileTmp.PhysicalInvent;
        onHandEntry.OnOrder           = _inventSumMobileTmp.OnOrder;
        onHandEntry.AvailPhysical     = _inventSumMobileTmp.AvailPhysical;
        onHandEntry.ReservedPhysical  = _inventSumMobileTmp.ReservPhysical;
        onHandEntry.TotalAvailable    = _inventSumMobileTmp.AvailPhysical + _inventSumMobileTmp.Ordered +
                        _inventSumMobileTmp.Arrived - _inventSumMobileTmp.ReservOrdered - _inventSumMobileTmp.OnOrder;

        return onHandEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousOnHandRequestEntry</Name>
				<Source><![CDATA[
    private void deletePreviousOnHandRequestEntry()
    {
        InventInventoryOnHandMobileEntry onHandEntry;
        InventInventoryOnHandMobileRequestV2 onHandRequest;

        delete_from onHandRequest where onHandRequest.RequestId == this.RequestId;
        delete_from onHandEntry where onHandEntry.RequestId == this.RequestId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SCM:InventInventoryOnhandMobileRequestEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>InventoryOnHandMobileRequestsV2</PublicCollectionName>
	<PublicEntityName>InventoryOnHandMobileRequestV2</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<DataField>ProductNumber</DataField>
			<DataSource>InventInventoryOnHandMobileRequestV2</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestId</Name>
			<DataField>RequestId</DataField>
			<DataSource>InventInventoryOnHandMobileRequestV2</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RequestId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventInventoryOnHandMobileRequestV2</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventInventoryOnHandMobileRequestV2</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>