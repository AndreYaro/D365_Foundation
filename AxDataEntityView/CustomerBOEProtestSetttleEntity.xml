<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerBOEProtestSetttleEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This entity enables support for customer's transactions marking for settlement when importing bill of exchange protest lines 
/// </summary>
public class CustomerBOEProtestSetttleEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, SpecTrans):
                SpecTrans specTrans = _dataSourceCtx.getBuffer();

                if (specTrans.SpecTableId != tableNum(LedgerJournalTrans))
                {
                    throw error("@ExtendedItallianLocalization:IncorrectRecordTypeToMark");
                }

                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findByRefAndDataArea(specTrans.SpecCompany, specTrans.SpecRecId);

                ret = this.insertSpecTransAndUpdateLedgerTrans(ledgerJournalTrans);

                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSpecTransAndUpdateLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks transactions for settlement and updates ledger transaction's text and settlement status if marked.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger transaction to process.</param>
    private boolean insertSpecTransAndUpdateLedgerTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ttsbegin;

        boolean protestSettled = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).ProtestSettledBill;
        CustVendNegInstStatus billStatus = protestSettled ? CustVendNegInstStatus::Honored : CustVendNegInstStatus::Remitted;

        CustTrans custTrans;
        select firstOnly custTrans
            where custTrans.BillOfExchangeID == this.BOE
                && custTrans.BillOfExchangeStatus == billStatus;

        if (!custTrans)
        {
            throw error(StrFmt("@SYS71513", this.BOE));
        }

        Common transToMark;

        if (protestSettled)
        {
            CustSettlement custSettlement;

            select firstonly custSettlement
                where custSettlement.TransRecId == custTrans.recId
                    && custSettlement.AccountNum == custTrans.AccountNum
                    && custSettlement.TransCompany == custTrans.dataAreaId;

            transToMark = custSettlement;
        }
        else
        {
            CustTransOpen custTransOpen;
            select firstOnly custTransOpen
                where custTransOpen.refRecId == custTrans.recId;

            if (!custTransOpen)
            {
                throw error("@ExtendedItallianLocalization:DrawnBillNoLongerOpen");
            }

            transToMark = custTransOpen;
        }

        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        if (specTransManager.existForOtherSpec(transToMark.dataAreaId,transToMark.TableId, transToMark.recId))
        {
            throw error("@SYS29065");
        }

        specTransManager.insert(transToMark.DataAreaId, transToMark.TableId, transToMark.RecId, -_ledgerJournalTrans.amount(), _ledgerJournalTrans.CurrencyCode);

        TransactionTxt transTxt = TransactionTxt::construct(LedgerTransTxt::CustBillOfExchangeCust, CustTable::find(custTrans.AccountNum).languageId());
        transTxt.setDate(custTrans.transDate);
        transTxt.setFormLetter(custTrans.documentNum ? custTrans.documentNum : custTrans.invoice);
        transTxt.setKey1(custTrans.PaymId);
        transTxt.setVoucher(custTrans.voucher);

        _ledgerJournalTrans.selectForUpdate(true);
        _ledgerJournalTrans.paymentNotes = transTxt.txt();
        _ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        _ledgerJournalTrans.update();

        ttscommit;
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAllocationRules</ConfigurationKey>
	<DeveloperDocumentation>@ExtendedItallianLocalization:CustBOESettleEntityDevDoc</DeveloperDocumentation>
	<Label>@ExtendedItallianLocalization:CustBOESettle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CustomerBOEProtestSetttleStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CustBOEProtestSetttles</PublicCollectionName>
	<PublicEntityName>CustBOEProtestSetttle</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecTableId</Name>
			<DataField>SpecTableId</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecRecId</Name>
			<DataField>SpecRecId</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SpecCompany</Name>
			<DataField>SpecCompany</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefTableId</Name>
			<Mandatory>No</Mandatory>
			<DataField>RefTableId</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefRecId</Name>
			<Mandatory>No</Mandatory>
			<DataField>RefRecId</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefCompany</Name>
			<Mandatory>No</Mandatory>
			<DataField>RefCompany</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BOE</Name>
			<Label>@ExtendedItallianLocalization:BillOfExchangeId</Label>
			<Mandatory>Yes</Mandatory>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>SpecTableId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SpecRecId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SpecCompany</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SpecTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>SpecTrans</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>