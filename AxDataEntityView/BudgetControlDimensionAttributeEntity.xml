<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDimensionAttributeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlDimensionAttributeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setEnityOfficeMenuOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Office menu options for the entity when the <c>setEntityOfficeMenuOptionDelegate</c> delegate in the <c>BudgetControlConfigurationEntityHelper</c> class is called.
    /// </summary>
    /// <param name="_entityOfficeMenuOption">
    /// The <c>BudgetControlConfigurationEntityOfficeMenuOption</c> instance for the entity.
    /// </param>
    [SubscribesTo(classstr(BudgetControlConfigurationEntityHelper), delegatestr(BudgetControlConfigurationEntityHelper, setEntityOfficeMenuOptionDelegate))]
    public static void setEnityOfficeMenuOption(BudgetControlConfigurationEntityOfficeMenuOption _entityOfficeMenuOption)
    {
        if (_entityOfficeMenuOption.parmEntityName() == tableStr(BudgetControlDimensionAttributeEntity))
        {
            _entityOfficeMenuOption.parmLegalEntityIdFieldName(fieldStr(BudgetControlDimensionAttributeEntity, LegalEntityId));
            _entityOfficeMenuOption.parmStatusFieldName(fieldStr(BudgetControlDimensionAttributeEntity, Status));
            _entityOfficeMenuOption.parmDisplayFieldGroupName(tableFieldGroupStr(BudgetControlDimensionAttributeEntity, AutoReport));
            _entityOfficeMenuOption.parmDisplayName("@Budget:ControlDimensionAttributeEntityOfficeExportDisplayValue");
            _entityOfficeMenuOption.parmDataAreaIdFieldName(fieldStr(BudgetControlDimensionAttributeEntity, DataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BudgetControlDimensionAttributeEntity, BudgetDimensionEntity):
                    BudgetDimensionEntity budgetDimension = _dataSourceCtx.getBuffer();
                    budgetDimension.LegalEntityId = this.LegalEntityId;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
         // Update case will only be caught through DIXF import.
         // Data entity update is not supported as the position value is not updatable without knowing the state of all updates that are of part of this execution group.
         throw error("@Budget:BudgetControlDimensionAttributeEntity_UpdateIsNotAllowed");
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        BudgetDimensionEntity budgetDimensionEntity = this.getBudgetDimensionEntity();

        BudgetControlDimensionAttribute draftBudgetControlDimensionAttribute = this.getDraftBudgetControlDimensionAttribute(budgetDimensionEntity.RecId, this.LegalEntityId);

        if (!draftBudgetControlDimensionAttribute)
        {
            // Find budget control configuration
            BudgetControlConfiguration draftControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(this.LegalEntityId);

            if (budgetDimensionEntity)
            {
                // The budget control dimension attribute can be inserted for the needed references
                draftBudgetControlDimensionAttribute.BudgetControlConfiguration = draftControlConfiguration.RecId;
                draftBudgetControlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute = budgetDimensionEntity.RecId;
                draftBudgetControlDimensionAttribute.Ordinal = BudgetControlDimensionAttribute::getNextOrdinal(draftControlConfiguration.RecId);

                draftBudgetControlDimensionAttribute.insert();
            }
            else
            {
                throw error(strFmt("@Budget:BudgetControlDimensionAttributeEntity_InvalidDimensionValue", this.DimensionAttributeId, this.LegalEntityId));
            }
        }

        // The entity keys and the company context field may not be correct for the changes or current context.
        // Set the entity instance to the saved data.
        BudgetControlDimensionAttributeEntity entity;

        // Set the current company context to match the primary company context set on the entity.
        changecompany(this.LegalEntityId)
        {
            // Select the entity record based on the key.
            select * from entity
                where entity.Status == BudgetControlConfigurationStatus::Draft
                    && entity.DimensionAttributeId == this.DimensionAttributeId;
        }

        this.data(entity);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensionEntity</Name>
				<Source><![CDATA[
    private BudgetDimensionEntity getBudgetDimensionEntity()
    {
        BudgetDimensionEntity budgetDimensionEntity;

        changecompany(this.LegalEntityId)
        {
            select firstonly RecId, LegalEntityId from budgetDimensionEntity
                where budgetDimensionEntity.LegalEntityId == this.LegalEntityId
                    && budgetDimensionEntity.DimensionAttributeId == this.DimensionAttributeId;
        }

        return budgetDimensionEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftBudgetControlDimensionAttribute</Name>
				<Source><![CDATA[
    private BudgetControlDimensionAttribute getDraftBudgetControlDimensionAttribute(RecId _budgetPrimaryLedgerDimensionAttributeRecId, LegalEntityDataAreaId _legalEntityId)
    {
        BudgetControlConfiguration draftControlConfiguration = BudgetControlConfigurationEntityHelper::getDraftBudgetControlConfiguration(_legalEntityId);

        BudgetControlDimensionAttribute draftBudgetControlDimensionAttribute;

        select firstonly forupdate * from draftBudgetControlDimensionAttribute
            where draftBudgetControlDimensionAttribute.BudgetControlConfiguration == draftControlConfiguration.RecId
            && draftBudgetControlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == _budgetPrimaryLedgerDimensionAttributeRecId;

        return draftBudgetControlDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveBudgetControlDimensionAttribute</Name>
				<Source><![CDATA[
    private BudgetControlDimensionAttribute getActiveBudgetControlDimensionAttribute(RecId _budgetPrimaryLedgerDimensionAttributeRecId, LegalEntityDataAreaId _legalEntityId)
    {
        LedgerRecId primaryLedger = Ledger::primaryLedger(CompanyInfo::current(_legalEntityId));
        BudgetControlConfiguration activeControlConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedger);

        BudgetControlDimensionAttribute activeBudgetControlDimensionAttribute;

        select firstonly forupdate * from activeBudgetControlDimensionAttribute
            where activeBudgetControlDimensionAttribute.BudgetControlConfiguration == activeControlConfiguration.RecId
            && activeBudgetControlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == _budgetPrimaryLedgerDimensionAttributeRecId;

        return activeBudgetControlDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::findByName(this.DimensionAttributeId);

            if (BudgetControlConfigurationManager::isDimensionAttributeInUse(this.BudgetControlConfiguration, dimensionAttribute.RecId))
            {
                error("@Budget:BudgetControlDimensionAttribute_DeleteError");
                isValid = false;
            }

            BudgetControlDimensionAttribute controlDimensionAttribute = this.getDraftBudgetControlDimensionAttribute(this.BudgetPrimaryLedgerDimensionAttribute, this.LegalEntityId);

            if (!controlDimensionAttribute)
            {
                error(strFmt("@Budget:BudgetControlDimensionAttributeEntity_NonExistingRecord",
                    this.LegalEntityId, this.Status, this.DimensionAttributeId));
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // Get draft
        BudgetControlDimensionAttribute controlDimensionAttribute = this.getDraftBudgetControlDimensionAttribute(this.BudgetPrimaryLedgerDimensionAttribute, this.LegalEntityId);
        DimensionOrdinal deletedOrdinal = controlDimensionAttribute.Ordinal;
        BudgetControlConfigurationRecId budgetControlConfigurationId = controlDimensionAttribute.BudgetControlConfiguration;

        controlDimensionAttribute.delete();

        // Shift ordinals of the other dimension attribute which positioned after the deleted one
        BudgetControlDimensionAttribute otherControlDimensionAttribute;

        update_recordset otherControlDimensionAttribute
            setting Ordinal = otherControlDimensionAttribute.Ordinal - 1
            where otherControlDimensionAttribute.BudgetControlConfiguration == budgetControlConfigurationId
                && otherControlDimensionAttribute.Ordinal > deletedOrdinal;

        this.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of dimension attribute IDs.
    /// </returns>
    [SysODataActionAttribute("BudgetControlDimensionAttributeIdLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("DimensionAttributeId")]
    public static str lookupDimensionAttributeId(Array _fields)
    {
        List lookupList = new List(Types::String);

        LegalEntityDataAreaId legalEntityId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetControlDimensionAttributeEntity),
            fieldStr(BudgetControlDimensionAttributeEntity, LegalEntityId),
            _fields);

        BudgetDimensionEntity budgetDimension;

        while select DimensionAttributeId from budgetDimension
            where budgetDimension.LegalEntityId == legalEntityId
        {
            lookupList.addEnd(budgetDimension.DimensionAttributeId);
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetCtrl</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetControlDimensionAttributeEntityDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetControlConfiguration</FormRef>
	<Label>@Budget:BudgetControlDimensionAttribute</Label>
	<Tags>Budget control setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetControlDimensionAttributeStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>LegalEntityId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetControlDimensionAttributes</PublicCollectionName>
	<PublicEntityName>BudgetControlDimensionAttribute</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InUseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttributeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>LegalEntityId</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>InUseBy</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Ordinal</DataField>
			<DataSource>BudgetControlDimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionAttributeId</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>DimensionAttributeId</DataField>
			<DataSource>BudgetDimensionEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlConfiguration</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetControlConfiguration</DataField>
			<DataSource>BudgetControlDimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Status</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPrimaryLedgerDimensionAttribute</DataField>
			<DataSource>BudgetControlDimensionAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryLedger</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PrimaryLedger</DataField>
			<DataSource>BudgetControlConfigurationEntity</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LegalEntityId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Status</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DimensionAttributeId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>BudgetControlConfigurationEntity</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedDataEntity>BudgetControlConfigurationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetControlConfigurations</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetControlDimensionAttributeConfiguration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_LegalEntityId</Name>
					<Field>LegalEntityId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>BudgetControlConfigurationEntity_Status</Name>
					<Field>Status</Field>
					<RelatedField>Status</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetControlDimensionAttribute</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetControlDimensionAttribute</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetControlConfigurationEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetControlConfigurationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BudgetControlConfiguration</Field>
								<JoinDataSource>BudgetControlDimensionAttribute</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetDimensionEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetDimensionEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>BudgetPrimaryLedgerDimensionAttribute</Field>
								<JoinDataSource>BudgetControlDimensionAttribute</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>