<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomerPaymentJournalLineSettledInvoiceEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class CustomerPaymentJournalLineSettledInvoiceEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize private variables for the settled invoice entity.
    /// </summary>
    public void initValue()
    {
        super();

        // Account Type must be initialized for dimension resolution to recognize values as customers rather than ledger dimensions.
        this.JournalLineAccountType = LedgerJournalACType::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTrans):
                LedgerJournalTrans ledgerJournalTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer();
                ret = this.resolveCustTrans(ledgerJournalTrans);
                break;

            case dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTransOpen):
                CustTrans custTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTrans)).getBuffer();
                ret = this.resolveCustTransOpen(custTrans);
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, SpecTrans))
        {
            this.deleteLinesForLineLevelSettlement(_entityCtx.getRuntimeContextByName(
                dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer(),
                _dataSourceCtx.getBuffer());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, SpecTrans):
                SpecTrans specTrans = _dataSourceCtx.getBuffer();
                CustTransOpen custTransOpen = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTransOpen)).getBuffer();
                CustTrans custTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTrans)).getBuffer();
                LedgerJournalTrans ledgerJournalTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer();
                this.populateSpecTransForInsert(_entityCtx, specTrans);
                this.validateNewMarkWillNotExceedOpenAmount(specTrans, custTransOpen, custTrans);
                this.updateCashDiscount(specTrans, custTransOpen, ledgerJournalTrans);
                this.updateSettleAmount(specTrans, custTransOpen);

                ret = super(_entityCtx, _dataSourceCtx);

                if (ret)
                {
                    this.insertLinesForLineLevelSettlement(
                        _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer(),
                        specTrans);

                    changecompany (ledgerJournalTrans.Company)
                    {
                        this.updateLedgerJournalTrans(custTransOpen, custTrans);
                    }
                }
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, SpecTrans):
                SpecTrans specTrans = _dataSourceCtx.getBuffer();
                CustTransOpen custTransOpen = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTransOpen)).getBuffer();
                LedgerJournalTrans ledgerJournalTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer();
                this.updateCashDiscount(specTrans, custTransOpen, ledgerJournalTrans);
                this.updateSettleAmount(specTrans, custTransOpen);
                ret = super(_entityCtx, _dataSourceCtx);

                if (ret)
                {
                    this.updateLinesForLineLevelSettlement(
                        _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer(),
                        specTrans);
                }
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = LedgerJournalEntityBase::isWorkflowDocumentEditable(this.JournalBatchNumber) && super();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = LedgerJournalEntityBase::isWorkflowDocumentEditable(this.JournalBatchNumber) && super();

        if (ret && this.InvoiceCompany != this.JournalLineCompany)
        {
            container centralizedPaymentCompanies = CustVendOpenTransManager::findSharedServiceCompanies(this.JournalLineCompany);
            boolean isCompanyInCentralizedPaymentHierarchy = conFind(centralizedPaymentCompanies, this.InvoiceCompany);

            if (!isCompanyInCentralizedPaymentHierarchy)
            {
                ret = checkFailed(strFmt("@CashManagement:InvoiceCompanyNotInCentralizedPaymentHierarchy", this.InvoiceCompany));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSpecTransForInsert</Name>
				<Source><![CDATA[
    private void populateSpecTransForInsert(DataEntityRuntimeContext _entityCtx, SpecTrans _specTrans)
    {
        _specTrans.RefTableId = tableNum(CustTransOpen);
        _specTrans.SpecTableId = tableNum(LedgerJournalTrans);

        LedgerJournalTrans ledgerJournalTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, LedgerJournalTrans)).getBuffer();
        _specTrans.SelectedDateUsedToCalcCashDisc = ledgerJournalTrans.TransDate;

        CustTrans custTrans = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(CustomerPaymentJournalLineSettledInvoiceEntity, CustTrans)).getBuffer();
        _specTrans.Code = custTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCustTrans</Name>
				<Source><![CDATA[
    private CustTrans resolveCustTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        DimensionAttributeValueCombination davcJournalCompany;
        CustTable custTableJournalCompany;
        CustTable custTableInvoiceCompany;
        CustTrans custTrans;

        select firstonly crosscompany Party from custTableJournalCompany
            where custTableJournalCompany.DataAreaId == this.JournalLineCompany
            exists join davcJournalCompany
                where davcJournalCompany.RecId == _ledgerJournalTrans.LedgerDimension
                    && davcJournalCompany.DisplayValue == custTableJournalCompany.AccountNum;

        select firstonly crosscompany custTrans
            where custTrans.Invoice == this.InvoiceNumber
                && custTrans.DataAreaId == this.InvoiceCompany
                && custTrans.TransType != LedgerTransType::Settlement
                && custTrans.TransType != LedgerTransType::ExchAdjustment
            exists join custTableInvoiceCompany
                where custTableInvoiceCompany.Party == custTableJournalCompany.Party
                    && custTableInvoiceCompany.DataAreaId == this.InvoiceCompany
                    && custTableInvoiceCompany.AccountNum == custTrans.AccountNum;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCustTransOpen</Name>
				<Source><![CDATA[
    private CustTransOpen resolveCustTransOpen(CustTrans _custTrans)
    {
        CustTransOpen custTransOpen;

        select firstonly crosscompany custTransOpen
            where custTransOpen.DueDate == this.InvoiceDueDate
                && custTransOpen.DataAreaId == this.InvoiceCompany
                && custTransOpen.RefRecId == _custTrans.RecId;

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscount</Name>
				<Source><![CDATA[
    private void updateCashDiscount(SpecTrans _specTrans, CustTransOpen _custTransOpen, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (this.CashDiscountToTakeInInvoiceCurrency != 0.0)
        {
            changecompany(this.InvoiceCompany)
            {
                CustTransCashDisc custTransCashDisc = CustTransCashDisc::findCashDisc(
                    _specTrans.RefTableId,
                    _specTrans.RefRecId,
                    _specTrans.SelectedDateUsedToCalcCashDisc,
                    CustPaymModeTable::discGraceDays(_ledgerJournalTrans.PaymMode));

                if (!custTransCashDisc)
                {
                    throw error(strFmt("@CashManagement:CashDiscountForInvoiceNotFound", this.InvoiceNumber));
                }

                if (_custTransOpen.UseCashDisc == UseCashDisc::Never)
                {
                    _specTrans.CashDiscToTake = 0.0;
                }
                else if (abs(this.CashDiscountToTakeInInvoiceCurrency) > abs(custTransCashDisc.CashDiscAmount))
                {
                    _specTrans.CashDiscToTake = custTransCashDisc.CashDiscAmount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmount</Name>
				<Source><![CDATA[
    private void updateSettleAmount(SpecTrans _specTrans, CustTransOpen _custTransOpen)
    {
        if (abs(this.SettlementAmountInInvoiceCurrency +_specTrans.CashDiscToTake) > abs(_custTransOpen.AmountCur))
        {
            _specTrans.Balance01 = _custTransOpen.AmountCur - _specTrans.CashDiscToTake;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewMarkWillNotExceedOpenAmount</Name>
				<Source><![CDATA[
    private void validateNewMarkWillNotExceedOpenAmount(SpecTrans _specTrans, CustTransOpen _custTransOpen, CustTrans _custTrans)
    {
        boolean doesSpecTransExist = SpecTrans::existByRef(
            _specTrans.RefCompany,
            _specTrans.RefTableId,
            _specTrans.RefRecId);

        if (doesSpecTransExist)
        {
            SpecTrans specTransMarked;

            select sum(Balance01), sum(CashDiscToTake)
            from specTransMarked
                where specTransMarked.RefRecId == _specTrans.RefRecId
                    && specTransMarked.RefTableId == _specTrans.RefTableId
                    && specTransMarked.RefCompany == _specTrans.RefCompany;

            AmountCur amountIncludingNewMarkedEntry = abs(this.SettlementAmountInInvoiceCurrency +_specTrans.CashDiscToTake) + abs(specTransMarked.Balance01 + specTransMarked.CashDiscToTake);

            // Exclude entity lines that would oversettle the open amount.
            if (amountIncludingNewMarkedEntry > abs(_custTransOpen.AmountCur))
            {
                throw error(strFmt("@CashManagement:InvoiceHasAlreadyBeenSettledOrIsOverpayment", _custTrans.Invoice, _custTrans.AccountNum, _custTransOpen.AmountCur, _custTrans.CurrencyCode));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinesForLineLevelSettlement</Name>
				<Source><![CDATA[
    private void deleteLinesForLineLevelSettlement(LedgerJournalTrans _ledgerJournalTrans, SpecTrans _specTrans)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        specTransManager.deleteAllLine(_specTrans.RefCompany, _specTrans.RefTableId, _specTrans.RefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLinesForLineLevelSettlement</Name>
				<Source><![CDATA[
    private void insertLinesForLineLevelSettlement(LedgerJournalTrans _ledgerJournalTrans, SpecTrans _specTrans)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        specTransManager.insertAllLines(
            _specTrans.RefCompany,
            _specTrans.RefTableId,
            _specTrans.RefRecId,
            _specTrans.RecId,
            _specTrans.Balance01,
            _specTrans.CashDiscToTake);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesForLineLevelSettlement</Name>
				<Source><![CDATA[
    private void updateLinesForLineLevelSettlement(LedgerJournalTrans _ledgerJournalTrans, SpecTrans _specTrans)
    {
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);

        specTransManager.deleteAllLine(_specTrans.RefCompany, _specTrans.RefTableId, _specTrans.RefRecId);

        specTransManager.insertAllLines(
            _specTrans.RefCompany,
            _specTrans.RefTableId,
            _specTrans.RefRecId,
            _specTrans.RecId,
            _specTrans.Balance01,
            _specTrans.CashDiscToTake);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void updateLedgerJournalTrans(CustTransOpen _custTransOpen, CustTrans _custTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;
        int specCount;

        ttsbegin;

        select forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == this.JournalBatchNumber &&
                ledgerJournalTrans.LineNum == this.JournalLineNumber;

        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;

        specCount = SpecTrans::getSpecTransCount(ledgerJournalTrans.company(), tablenum(LedgerJournalTrans), ledgerJournalTrans.RecId);

        ledgerJournalTrans.updateMarkedInvoiceWithTrans(specCount, _custTransOpen, _custTrans);

        ledgerJournalTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public static str invoiceAccount()
    {
        const str CustTransAlias = 'CT';
        const str CustTableAlias = 'T5';
        const str CustTrans = tableStr(CustTrans);
        const str CustTransAccountNum = fieldStr(CustTrans, AccountNum);
        const str RecId = fieldStr(CustTrans, RecId);

        str custNameSelect = strFmt('SELECT %1.%2 FROM %3 as %1 where %1.%4 = %5.%4',
            CustTransAlias,
            CustTransAccountNum,
            CustTrans,
            RecId,
            CustTableAlias);

        return custNameSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line settled invoice staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CustomerPaymentJournalHeaderStaging headerStaging;
        CustomerPaymentJournalLineSettledInvoiceStaging lineSettledInvoiceStaging;

        update_recordset lineSettledInvoiceStaging
            setting JournalBatchNumber = headerStaging.JournalBatchNumber
            join JournalBatchNumber from headerStaging
                where lineSettledInvoiceStaging.JournalBatchNumber == headerStaging.JournalBatchNumberOld
                    && lineSettledInvoiceStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && lineSettledInvoiceStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && lineSettledInvoiceStaging.TransferStatus == DMFTransferStatus::NotStarted
                    && headerStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && headerStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@CashManagement:CustomerPaymentJournalLineSettledInvoiceEntity</Label>
	<Tags>Journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CustomerPaymentJournalLineSettledInvoiceStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsReceivable</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PaymentJournalLineSettledInvoices</PublicCollectionName>
	<PublicEntityName>PaymentJournalLineSettledInvoice</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettlementAmountInInvoiceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountToTakeInInvoiceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceToPaymentCrossRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLineCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalBatchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLineAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountDisplayValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SettlementAmountInInvoiceCurrency</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Balance01</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountToTakeInInvoiceCurrency</Name>
			<DataField>CashDiscToTake</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceToPaymentCrossRate</Name>
			<DataField>CrossRate</DataField>
			<DataSource>SpecTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalLineCompany</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:JournalCompany</Label>
			<DataField>DataAreaId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalLineAccountType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalLineNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Invoice</DataField>
			<DataSource>CustTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceCompany</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@CashManagement:InvoiceCompany</Label>
			<DataField>DataAreaId</DataField>
			<DataSource>CustTransOpen</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceDueDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DueDate</DataField>
			<DataSource>CustTransOpen</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Account</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>JournalLineCompany</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>JournalLineAccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountDisplayValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>AccountDAVC</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>invoiceAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS25708</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>invoiceAccount</ComputedFieldMethod>
			<ExtendedDataType>CustVendAc</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalLineCompany</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>JournalLineNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InvoiceNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InvoiceCompany</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>InvoiceDueDate</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>CustomerPaymentJournalHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CustomerPaymentJournalHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CustomerPaymentJournalHeaderRelatedRole</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomerPaymentJournalHeaderRole</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>JournalBatchNumber</Field>
					<RelatedField>JournalBatchNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintRelatedFixed">
					<Name>RelationConstraintRelatedFixed1</Name>
					<RelatedField>IsPosted</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>JournalLineCompany</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>CustomerPaymentJournalLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CustomerPaymentJournalLineEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CustomerPaymentJournalLineRelatedRole</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomerPaymentJournalLineRole</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>JournalLineNumber</Field>
					<RelatedField>LineNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>JournalBatchNumber</Field>
					<RelatedField>JournalBatchNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField3</Name>
					<Field>JournalLineCompany</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>AccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CustomerPaymentJournalLineSettledInvoiceAccountCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomerPaymentJournalLineSettledInvoiceAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Account</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SpecTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>SpecTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LedgerJournalTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>AccountDAVC</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>AccountType</Name>
								<Field>AccountType</Field>
								<Value>Customer</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SpecRecId</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SpecCompany</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>DataAreaId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation3</Name>
								<Field>SpecTableId</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustTransOpen</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustTransOpen</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTrans</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CustTrans</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RefRecId</Field>
										<JoinDataSource>CustTransOpen</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RefRecId</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RefCompany</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>DataAreaId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation3</Name>
								<Field>RefTableId</Field>
								<JoinDataSource>SpecTrans</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>