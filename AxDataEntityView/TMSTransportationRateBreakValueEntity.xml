<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTransportationRateBreakValueEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSTransportationRateBreakValueEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldDefinition</Name>
				<Source><![CDATA[
    private static str fieldDefinition(TMSDataType _rateBreakMasterType, str _nullLiteral)
    {
        TableName entityName = tableStr(TMSTransportationRateBreakValueEntity);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(TMSTransportationRateBreakValueEntity, TMSBreakMaster), fieldStr(TMSBreakMaster, DataType)),
                            int2Str(enum2Int(_rateBreakMasterType))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(TMSTransportationRateBreakValueEntity, TMSBreakDetail), fieldStr(TMSBreakDetail, Value)),
                        SysComputedColumn::returnLiteral(_nullLiteral));
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakIntegerValueDefinition</Name>
				<Source><![CDATA[
    private static str breakIntegerValueDefinition()
    {
        return TMSTransportationRateBreakValueEntity::fieldDefinition(TMSDataType::Integer, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakRealValueDefinition</Name>
				<Source><![CDATA[
    private static str breakRealValueDefinition()
    {
        return TMSTransportationRateBreakValueEntity::fieldDefinition(TMSDataType::Real, '0.0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakStringValueDefinition</Name>
				<Source><![CDATA[
    private static str breakStringValueDefinition()
    {
        return TMSTransportationRateBreakValueEntity::fieldDefinition(TMSDataType::String, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(TMSTransportationRateBreakValueEntity, BreakValue),
                [fieldNum(TMSTransportationRateBreakValueEntity, BreakIntegerValue),
                fieldNum(TMSTransportationRateBreakValueEntity, BreakRealValue),
                fieldNum(TMSTransportationRateBreakValueEntity, BreakStringValue)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBreakValue</Name>
				<Source><![CDATA[
    private void defaultBreakValue()
    {
        TMSBreakMaster breakMaster = TMSBreakMaster::find(this.TransportationRateBreakMasterCode);

        if (breakMaster.DataType == TMSDataType::Integer)
        {
            if (this.isFieldSet(fieldNum(TMSTransportationRateBreakValueEntity, BreakIntegerValue)))
            {
                this.BreakValue = int2str(this.BreakIntegerValue);
            }
        }
        else if (breakMaster.DataType == TMSDataType::Real)
        {
            if (this.isFieldSet(fieldNum(TMSTransportationRateBreakValueEntity, BreakRealValue)))
            {
                this.BreakValue = any2Str(this.BreakRealValue);
            }
        }
        else if (breakMaster.DataType == TMSDataType::String)
        {
            if (this.isFieldSet(fieldNum(TMSTransportationRateBreakValueEntity, BreakStringValue)))
            {
                this.BreakValue = this.BreakStringValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TMSTransportationRateBreakValueEntity, BreakValue):
                this.defaultBreakValue();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            TMSDataType breakMasterDataType = TMSBreakMaster::find(this.TransportationRateBreakMasterCode).DataType;

            switch (breakMasterDataType)
            {
                case TMSDataType::Integer:
                    if (this.BreakRealValue || this.BreakStringValue)
                    {
                        ret = checkFailed(strFmt("@TRX:TMSTransportationRateBreakValueEntity_FieldAssignmentError", TMSDataType::Integer));
                    }
                    break;
                case TMSDataType::Real:
                    if (this.BreakIntegerValue || this.BreakStringValue)
                    {
                        ret = checkFailed(strFmt("@TRX:TMSTransportationRateBreakValueEntity_FieldAssignmentError", TMSDataType::Real));
                    }
                    break;
                case TMSDataType::String:
                    if (this.BreakRealValue || this.BreakIntegerValue)
                    {
                        ret = checkFailed(strFmt("@TRX:TMSTransportationRateBreakValueEntity_FieldAssignmentError", TMSDataType::String));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX:Developer_TMSTransportationRateBreakValueEntity</DeveloperDocumentation>
	<FormRef>TMSBreakMaster</FormRef>
	<Label>@TRX:DataEntity_TMSTransportationRateBreakValueEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Tags>Setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TMSTransportationRateBreakValueStaging</DataManagementStagingTable>
	<EntityCategory>Reference</EntityCategory>
	<Modules>Transportation</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransportationRateBreakMasterCode</Name>
			<DataField>BreakMasterCode</DataField>
			<DataSource>TMSBreakMaster</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>BreakIntegerValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>breakIntegerValueDefinition</ComputedFieldMethod>
			<ExtendedDataType>TMSTransportationRateBreakIntegerValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>BreakRealValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>breakRealValueDefinition</ComputedFieldMethod>
			<ExtendedDataType>TMSTransportationRateBreakRealValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BreakStringValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>breakStringValueDefinition</ComputedFieldMethod>
			<ExtendedDataType>TMSTransportationRateBreakStringValue</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BreakValue</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Value</DataField>
			<DataSource>TMSBreakDetail</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TransportationRateBreakMasterCode</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BreakIntegerValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BreakRealValue</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BreakStringValue</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>TransportationRateBreakMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>TMSTransportationRateBreakMasterEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>TransportationRateBreakMaster</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TransportationRateBreakValues</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>TMSTransportationRateBreakMasterEntity_MasterCode</Name>
					<Field>TransportationRateBreakMasterCode</Field>
					<RelatedField>MasterCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TMSBreakDetail</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TMSBreakDetail</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TMSBreakMaster</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TMSBreakMaster</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>TMSBreakDetail</JoinDataSource>
								<JoinRelationName>TMSBreakMaster</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>