<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProductSiteSpecificOrderSettingsEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventProductSiteSpecificOrderSettingsEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        const int siteSequenceNumber = 10;

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventDim):
                _dataSourceCtx.setBuffer(this.getOrCreateSiteDim());
                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, DefaultInventDim):
                _dataSourceCtx.setBuffer(this.getOrCreateLocationDim(this.InventoryWarehouseId));
                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, PurchDefaultInventDim):
                _dataSourceCtx.setBuffer(this.getOrCreateLocationDim(this.ProcurementWarehouseId));
                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, SalesDefaultInventDim):
                _dataSourceCtx.setBuffer(this.getOrCreateLocationDim(this.SalesWarehouseId));
                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemInventSetup):
                InventItemInventSetup inventSetup = _dataSourceCtx.getBuffer();
                inventSetup.Sequence = siteSequenceNumber;

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    inventSetup.ItemId = this.ItemNumber;
                }

                if (this.AreInventoryDefaultOrderSettingsOverridden)
                {
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryOrderPromisingMethod)))
                    {
                        inventSetup.DeliveryDateControlType = this.InventoryOrderPromisingMethod;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryATPDelayedDemandOffsetDays)))
                    {
                        inventSetup.ATPApplyDemandTimeFence = this.InventoryATPDelayedDemandOffsetDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryATPDelayedSupplyOffsetDays)))
                    {
                        inventSetup.ATPApplySupplyTimeFence = this.InventoryATPDelayedSupplyOffsetDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryATPBackwardDemandTimeFenceDays)))
                    {
                        inventSetup.ATPBackwardDemandTimeFence = this.InventoryATPBackwardDemandTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryATPBackwardSupplyTimeFenceDays)))
                    {
                        inventSetup.ATPBackwardSupplyTimeFence = this.InventoryATPBackwardSupplyTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsInventoryATPIncludingPlannedOrders)))
                    {
                        inventSetup.ATPInclPlannedOrders = this.IsInventoryATPIncludingPlannedOrders;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryATPTimeFenceDays)))
                    {
                        inventSetup.ATPTimeFence = this.InventoryATPTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsInventoryUsingWorkingDays)))
                    {
                        inventSetup.CalendarDays = this.IsInventoryUsingWorkingDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MaximumInventoryOrderQuantity)))
                    {
                        inventSetup.HighestQty = this.MaximumInventoryOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MinimumInventoryOrderQuantity)))
                    {
                        inventSetup.LowestQty = this.MinimumInventoryOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, StandardInventoryOrderQuantity)))
                    {
                        inventSetup.StandardQty = this.StandardInventoryOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryQuantityMultiples)))
                    {
                        inventSetup.MultipleQty = this.InventoryQuantityMultiples;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsInventoryProcessingStopped)))
                    {
                        inventSetup.Stopped = this.IsInventoryProcessingStopped;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, InventoryLeadTimeDays)))
                    {
                        inventSetup.LeadTime = this.InventoryLeadTimeDays;
                    }
                }

                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemPurchSetup):
                InventItemPurchSetup purchSetup = _dataSourceCtx.getBuffer();
                purchSetup.Sequence = siteSequenceNumber;

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    purchSetup.InventDimId = this.getOrCreateSiteDim().InventDimId;
                }

                if (this.AreProcurementDefaultOrderSettingsOverridden)
                {
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsProcurementUsingWorkingDays)))
                    {
                        purchSetup.CalendarDays = this.IsProcurementUsingWorkingDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MaximumProcurementOrderQuantity)))
                    {
                        purchSetup.HighestQty = this.MaximumProcurementOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MinimumProcurementOrderQuantity)))
                    {
                        purchSetup.LowestQty = this.MinimumProcurementOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, StandardProcurementOrderQuantity)))
                    {
                        purchSetup.StandardQty = this.StandardProcurementOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, ProcurementQuantityMultiples)))
                    {
                        purchSetup.MultipleQty = this.ProcurementQuantityMultiples;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsProcurementProcessingstopped)))
                    {
                        purchSetup.Stopped = this.IsProcurementProcessingstopped;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, ProcurementLeadTimeDays)))
                    {
                        purchSetup.LeadTime = this.ProcurementLeadTimeDays;
                    }
                }

                break;
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemSalesSetup):
                InventItemSalesSetup salesSetup = _dataSourceCtx.getBuffer();
                salesSetup.Sequence = siteSequenceNumber;

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    salesSetup.InventDimId = this.getOrCreateSiteDim().InventDimId;
                    salesSetup.ItemId = this.ItemNumber;
                }

                if (this.AreSalesDefaultOrderSettingsOverridden)
                {
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesOrderPromisingMethod)))
                    {
                        salesSetup.DeliveryDateControlType = this.SalesOrderPromisingMethod;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesATPDelayedDemandOffsetDays)))
                    {
                        salesSetup.ATPApplyDemandTimeFence = this.SalesATPDelayedDemandOffsetDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesATPDelayedSupplyOffsetDays)))
                    {
                        salesSetup.ATPApplySupplyTimeFence = this.SalesATPDelayedSupplyOffsetDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesATPBackwardDemandTimeFenceDays)))
                    {
                        salesSetup.ATPBackwardDemandTimeFence = this.SalesATPBackwardDemandTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesATPBackwardSupplyTimeFenceDays)))
                    {
                        salesSetup.ATPBackwardSupplyTimeFence = this.SalesATPBackwardSupplyTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsSalesATPIncludingPlannedOrders)))
                    {
                        salesSetup.ATPInclPlannedOrders = this.IsSalesATPIncludingPlannedOrders;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesATPTimeFenceDays)))
                    {
                        salesSetup.ATPTimeFence = this.SalesATPTimeFenceDays;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MaximumSalesOrderQuantity)))
                    {
                        salesSetup.HighestQty = this.MaximumSalesOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, MinimumSalesOrderQuantity)))
                    {
                        salesSetup.LowestQty = this.MinimumSalesOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, StandardSalesOrderQuantity)))
                    {
                        salesSetup.StandardQty = this.StandardSalesOrderQuantity;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesQuantityMultiples)))
                    {
                        salesSetup.MultipleQty = this.SalesQuantityMultiples;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, IsSalesProcessingStopped)))
                    {
                        salesSetup.Stopped = this.IsSalesProcessingStopped;
                    }
                    if (this.isFieldSet(fieldNum(InventProductSiteSpecificOrderSettingsEntity, SalesLeadTimeDays)))
                    {
                        salesSetup.LeadTime = this.SalesLeadTimeDays;
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (this.mustSkipInsertEntityDataSource(_dataSourceCtx))
        {
            return true;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipInsertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the insertion should be skipped for the given datasource or not.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    /// The <c>DataEntityDataSourceRuntimeContext</c> object.
    /// </param>
    /// <returns>
    /// true, if it must skip the insertion of the given datasource; otherwise, false.
    /// </returns>
    protected boolean mustSkipInsertEntityDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventDim):
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, DefaultInventDim):
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, PurchDefaultInventDim):
            case dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, SalesDefaultInventDim):
                // Read only datasource was handled by mapEntityToDataSource(...)
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateSiteDim</Name>
				<Source><![CDATA[
    private InventDim getOrCreateSiteDim()
    {
        InventDim inventDim;
        inventDim.InventSiteId = this.OperationalSiteId;

        this.validateInventoryDimensions(inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        //FieldState is set to 'Set' to avoid the framework in thinking that the mandatory field site is not set by the user.
        inventDim.fieldState(fieldNum(InventDim, InventSiteId), FieldState::Set);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateLocationDim</Name>
				<Source><![CDATA[
    private InventDim getOrCreateLocationDim(InventLocationId _locationId)
    {
        InventDim inventDim;
        inventDim.InventLocationId = _locationId;

        this.validateInventoryDimensions(inventDim);

        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryDimensions</Name>
				<Source><![CDATA[
    private void validateInventoryDimensions(InventDim _inventDim)
    {
        Set allowEmptyFields = new Set(Types::Integer);
        allowEmptyFields.add(-1);
        if (!_inventDim.checkDimFieldsValid(this.ItemNumber, InventDim::findOrCreateBlank(), true, allowEmptyFields, true))
        {
            throw error("@SYS304643");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStoppedForSalesDefinition</Name>
				<Source><![CDATA[
    private static str isStoppedForSalesDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, Stopped),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsSalesProcessingStopped));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTimeDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesLeadTimeDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, LeadTime),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesLeadTimeDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuantityMultiplesDefinition</Name>
				<Source><![CDATA[
    private static str salesQuantityMultiplesDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, MultipleQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesQuantityMultiples));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumSalesOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str maximumSalesOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, HighestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MaximumSalesOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumSalesOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str minimumSalesOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, LowestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MinimumSalesOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardSalesOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str standardSalesOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, StandardQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, StandardSalesOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOrderPromisingMethodDefinition</Name>
				<Source><![CDATA[
    private static str salesOrderPromisingMethodDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, DeliveryDateControlType),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesOrderPromisingMethod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesATPDelayedDemandOffsetDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesATPDelayedDemandOffsetDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPApplyDemandTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesATPDelayedDemandOffsetDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesATPDelayedSupplyOffsetDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesATPDelayedSupplyOffsetDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPApplySupplyTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesATPDelayedSupplyOffsetDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesATPBackwardDemandTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesATPBackwardDemandTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPBackwardDemandTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesATPBackwardDemandTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesATPBackwardSupplyTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesATPBackwardSupplyTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPBackwardSupplyTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesATPBackwardSupplyTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesATPIncludingPlannedOrdersDefinition</Name>
				<Source><![CDATA[
    private static str isSalesATPIncludingPlannedOrdersDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPInclPlannedOrders),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsSalesATPIncludingPlannedOrders));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesATPTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str salesATPTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::salesDefaulting(
            fieldStr(InventItemSalesSetup, ATPTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, SalesATPTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStoppedForProcurementDefinition</Name>
				<Source><![CDATA[
    private static str isStoppedForProcurementDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, Stopped),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsProcurementProcessingstopped));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useWorkingDaysForProcurementDefinition</Name>
				<Source><![CDATA[
    private static str useWorkingDaysForProcurementDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, CalendarDays),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsProcurementUsingWorkingDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementLeadTimeDaysDefinition</Name>
				<Source><![CDATA[
    private static str procurementLeadTimeDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, LeadTime),
            fieldStr(InventProductDefaultOrderSettingsEntity, ProcurementLeadTimeDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementQuantityMultiplesDefinition</Name>
				<Source><![CDATA[
    private static str procurementQuantityMultiplesDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, MultipleQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, ProcurementQuantityMultiples));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumProcurementOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str maximumProcurementOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, HighestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MaximumProcurementOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumProcurementOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str minimumProcurementOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, LowestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MinimumProcurementOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardProcurementOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str standardProcurementOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::procurementDefaulting(
            fieldStr(InventItemPurchSetup, StandardQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, StandardProcurementOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStoppedForInventoryDefinition</Name>
				<Source><![CDATA[
    private static str isStoppedForInventoryDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, Stopped),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsInventoryProcessingStopped));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryLeadTimeDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryLeadTimeDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, LeadTime),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryLeadTimeDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryQuantityMultiplesDefinition</Name>
				<Source><![CDATA[
    private static str inventoryQuantityMultiplesDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, MultipleQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryQuantityMultiples));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumInventoryOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str maximumInventoryOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, HighestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MaximumInventoryOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumInventoryOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str minimumInventoryOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, LowestQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, MinimumInventoryOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardInventoryOrderQuantityDefinition</Name>
				<Source><![CDATA[
    private static str standardInventoryOrderQuantityDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, StandardQty),
            fieldStr(InventProductDefaultOrderSettingsEntity, StandardInventoryOrderQuantity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useWorkingDaysForInventoryDefinition</Name>
				<Source><![CDATA[
    private static str useWorkingDaysForInventoryDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, CalendarDays),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsInventoryUsingWorkingDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryOrderPromisingMethodDefinition</Name>
				<Source><![CDATA[
    private static str inventoryOrderPromisingMethodDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, DeliveryDateControlType),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryOrderPromisingMethod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryATPDelayedDemandOffsetDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryATPDelayedDemandOffsetDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPApplyDemandTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryATPDelayedDemandOffsetDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryATPDelayedSupplyOffsetDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryATPDelayedSupplyOffsetDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPApplySupplyTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryATPDelayedSupplyOffsetDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryATPBackwardDemandTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryATPBackwardDemandTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPBackwardDemandTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryATPBackwardDemandTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryATPBackwardSupplyTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryATPBackwardSupplyTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPBackwardSupplyTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryATPBackwardSupplyTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryATPIncludingPlannedOrdersDefinition</Name>
				<Source><![CDATA[
    private static str isInventoryATPIncludingPlannedOrdersDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPInclPlannedOrders),
            fieldStr(InventProductDefaultOrderSettingsEntity, IsInventoryATPIncludingPlannedOrders));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryATPTimeFenceDaysDefinition</Name>
				<Source><![CDATA[
    private static str inventoryATPTimeFenceDaysDefinition()
    {
        return InventProductSiteSpecificOrderSettingsEntity::inventoryDefaulting(
            fieldStr(InventItemInventSetup, ATPTimeFence),
            fieldStr(InventProductDefaultOrderSettingsEntity, InventoryATPTimeFenceDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryDefaulting</Name>
				<Source><![CDATA[
    private static str inventoryDefaulting(FieldName _inventoryFieldName, FieldName _defaultFieldName)
    {
        return InventProductSiteSpecificOrderSettingsEntity::fieldDefaulting(
            dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemInventSetup),
            _inventoryFieldName,
            _defaultFieldName,
            fieldStr(InventItemInventSetup, Override));
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementDefaulting</Name>
				<Source><![CDATA[
    private static str procurementDefaulting(FieldName _procurementFieldName, FieldName _defaultFieldName)
    {
        return InventProductSiteSpecificOrderSettingsEntity::fieldDefaulting(
            dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemPurchSetup),
            _procurementFieldName,
            _defaultFieldName,
            fieldStr(InventItemPurchSetup, Override));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesDefaulting</Name>
				<Source><![CDATA[
    private static str salesDefaulting(FieldName _salesFieldName, FieldName _defaultFieldName)
    {
        return InventProductSiteSpecificOrderSettingsEntity::fieldDefaulting(
            dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventItemSalesSetup),
            _salesFieldName,
            _defaultFieldName,
            fieldStr(InventItemSalesSetup, Override));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefaulting</Name>
				<Source><![CDATA[
    private static str fieldDefaulting(
        DataSourceName _sourceDataSourceName,
        FieldName _sourceFieldName,
        FieldName _defaultFieldName,
        FieldName _overrideFieldName)
    {
        TableName entityName = tablestr(InventProductSiteSpecificOrderSettingsEntity);

        str overrideFieldExpression = SysComputedColumn::returnField(
                                        entityName,
                                        _sourceDataSourceName,
                                        _overrideFieldName);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(overrideFieldExpression, SysComputedColumn::returnLiteral(NoYes::Yes)),
            SysComputedColumn::returnField(
                    entityName,
                    _sourceDataSourceName,
                    _sourceFieldName),
            SysComputedColumn::returnField(
                    entityName,
                    dataEntityDataSourceStr(InventProductSiteSpecificOrderSettingsEntity, InventProductDefaultOrderSettingsEntity),
                    _defaultFieldName));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventProductSiteSpecificOrderSettingsEntityDevDoc</DeveloperDocumentation>
	<FormRef>InventItemOrderSetup</FormRef>
	<Label>@SYS118360</Label>
	<Tags>Site setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>InventProductSiteSpecificOrderSettingsStaging</DataManagementStagingTable>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ItemId</DataField>
			<DataSource>InventItemPurchSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OperationalSiteId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>InventSiteId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AreInventoryDefaultOrderSettingsOverridden</Name>
			<DataField>Override</DataField>
			<DataSource>InventItemInventSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>InventoryOrderPromisingMethod</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryOrderPromisingMethodDefinition</ComputedFieldMethod>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryATPDelayedDemandOffsetDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryATPDelayedDemandOffsetDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPApplyDemandTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryATPDelayedSupplyOffsetDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryATPDelayedSupplyOffsetDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPApplySupplyTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryATPBackwardDemandTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryATPBackwardDemandTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPBackwardDemandTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryATPBackwardSupplyTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryATPBackwardSupplyTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPBackwardSupplyTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsInventoryATPIncludingPlannedOrders</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isInventoryATPIncludingPlannedOrdersDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPInclPlannedOrders</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryATPTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryATPTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsInventoryUsingWorkingDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>useWorkingDaysForInventoryDefinition</ComputedFieldMethod>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>InventoryLeadTimeDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryLeadTimeDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>LeadTimeInventDefault</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumInventoryOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumInventoryOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumInventoryOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumInventoryOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>StandardInventoryOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>standardInventoryOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>InventoryQuantityMultiples</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>inventoryQuantityMultiplesDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsInventoryProcessingStopped</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isStoppedForInventoryDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>DefaultInventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsInventoryWarehouseMandatory</Name>
			<DataField>MandatoryInventLocation</DataField>
			<DataSource>InventItemInventSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AreProcurementDefaultOrderSettingsOverridden</Name>
			<DataField>Override</DataField>
			<DataSource>InventItemPurchSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsProcurementProcessingstopped</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isStoppedForProcurementDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsProcurementUsingWorkingDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>useWorkingDaysForProcurementDefinition</ComputedFieldMethod>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ProcurementQuantityMultiples</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>procurementQuantityMultiplesDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumProcurementOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumProcurementOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumProcurementOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumProcurementOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>StandardProcurementOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>standardProcurementOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ProcurementLeadTimeDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>procurementLeadTimeDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>LeadTimeInventDefault</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcurementWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>PurchDefaultInventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProcurementWarehouseMandatory</Name>
			<DataField>MandatoryInventLocation</DataField>
			<DataSource>InventItemPurchSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AreSalesDefaultOrderSettingsOverridden</Name>
			<DataField>Override</DataField>
			<DataSource>InventItemSalesSetup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>SalesOrderPromisingMethod</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesOrderPromisingMethodDefinition</ComputedFieldMethod>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesATPDelayedDemandOffsetDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesATPDelayedDemandOffsetDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPApplyDemandTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesATPDelayedSupplyOffsetDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesATPDelayedSupplyOffsetDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPApplySupplyTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesATPBackwardDemandTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesATPBackwardDemandTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPBackwardDemandTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesATPBackwardSupplyTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesATPBackwardSupplyTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPBackwardSupplyTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsSalesATPIncludingPlannedOrders</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isSalesATPIncludingPlannedOrdersDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPInclPlannedOrders</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesATPTimeFenceDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesATPTimeFenceDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesATPTimeFence</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsSalesProcessingStopped</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isStoppedForSalesDefinition</ComputedFieldMethod>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>SalesQuantityMultiples</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesQuantityMultiplesDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumSalesOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumSalesOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumSalesOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumSalesOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>StandardSalesOrderQuantity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>standardSalesOrderQuantityDefinition</ComputedFieldMethod>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>SalesLeadTimeDays</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>salesLeadTimeDaysDefinition</ComputedFieldMethod>
			<ExtendedDataType>LeadTimeInventDefault</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>SalesDefaultInventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsSalesWarehouseMandatory</Name>
			<DataField>MandatoryInventLocation</DataField>
			<DataSource>InventItemSalesSetup</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ItemNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>OperationalSiteId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventItemInventSetup</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventItemInventSetup</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>InventSiteId</Name>
								<Field>InventSiteId</Field>
								<Value>!""</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventItemInventSetup</JoinDataSource>
								<JoinRelationName>InventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultInventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventItemInventSetup</JoinDataSource>
								<JoinRelationName>DefaultInventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventItemPurchSetup</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventItemPurchSetup</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>PurchDefaultInventDim</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>InventDim</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinDataSource>InventItemPurchSetup</JoinDataSource>
										<JoinRelationName>DefaultInventDim</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventItemInventSetup</JoinDataSource>
								<JoinRelationName>InventItemPurchSetup</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventItemSalesSetup</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventItemSalesSetup</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesDefaultInventDim</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>InventDim</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinDataSource>InventItemSalesSetup</JoinDataSource>
										<JoinRelationName>DefaultInventDim</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventItemInventSetup</JoinDataSource>
								<JoinRelationName>InventItemSalesSetup</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventProductDefaultOrderSettingsEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventProductDefaultOrderSettingsEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventItemInventSetup</JoinDataSource>
								<RelatedField>ItemNumber</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>