<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsItemBatchAttributeGroupAttributeAssignmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsItemBatchAttributeGroupAttributeAssignmentEntity extends common
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalValue),
                    [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalInteger),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalDecimal),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalText),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalDate),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalEnumerate)]],
            [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumTolerance),
                    [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumIntegerTolerance),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumDecimalTolerance)]],
            [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumTolerance),
                    [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumIntegerTolerance),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumDecimalTolerance)]],
            [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, ToleranceIncrement),
                    [fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, IntegerToleranceIncrement),
                     fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, DecimalToleranceIncrement)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        PdsBatchAttribType attributeType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

        switch (_fieldId)
        {
            case fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalValue):
                if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalInteger))
                    && attributeType == PdsBatchAttribType::Integer)
                {
                    this.OptimalValue = int2Str(this.OptimalInteger);
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalDecimal))
                    && attributeType == PdsBatchAttribType::Realnumber)
                {
                    this.OptimalValue = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Realnumber, this.OptimalDecimal);
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalText))
                    && attributeType == PdsBatchAttribType::String)
                {
                    this.OptimalValue = this.OptimalText;
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalDate))
                    && attributeType == PdsBatchAttribType::Date)
                {
                    this.OptimalValue = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Date, this.OptimalDate);
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, OptimalEnumerate))
                    && attributeType == PdsBatchAttribType::Enumerate)
                {
                    this.OptimalValue = this.OptimalEnumerate;
                }
                break;

            case fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumTolerance):
                if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumIntegerTolerance))
                    && attributeType == PdsBatchAttribType::Integer)
                {
                    this.MinimumTolerance = this.MinimumIntegerTolerance;
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MinimumDecimalTolerance))
                    && attributeType == PdsBatchAttribType::Realnumber)
                {
                    this.MinimumTolerance = this.MinimumDecimalTolerance;
                }
                break;

            case fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumTolerance):
                if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumIntegerTolerance))
                    && attributeType == PdsBatchAttribType::Integer)
                {
                    this.MaximumTolerance = this.MaximumIntegerTolerance;
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, MaximumDecimalTolerance))
                    && attributeType == PdsBatchAttribType::Realnumber)
                {
                    this.MaximumTolerance = this.MaximumDecimalTolerance;
                }
                break;

            case fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, ToleranceIncrement):
                if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, IntegerToleranceIncrement))
                    && attributeType == PdsBatchAttribType::Integer)
                {
                    this.ToleranceIncrement = this.IntegerToleranceIncrement;
                }
                else if (this.isFieldSet(fieldNum(PdsItemBatchAttributeGroupAttributeAssignmentEntity, DecimalToleranceIncrement))
                    && attributeType == PdsBatchAttribType::Realnumber)
                {
                    this.ToleranceIncrement = this.DecimalToleranceIncrement;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            boolean isAnyIntegerFieldSet = this.OptimalInteger || this.IntegerToleranceIncrement || this.MinimumIntegerTolerance || this.MaximumIntegerTolerance;
            boolean isAnyDecimalFieldSet = this.OptimalDecimal || this.DecimalToleranceIncrement || this.MinimumDecimalTolerance || this.MaximumDecimalTolerance;

            PdsBatchAttribType batchAttribType = PdsBatchAttrib::findAttribType(this.ItemBatchAttributeId);

            switch (batchAttribType)
            {
                case PdsBatchAttribType::Integer:
                    if (this.OptimalText || this.OptimalDate || this.OptimalEnumerate || isAnyDecimalFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Integer));
                    }
                    break;
                case PdsBatchAttribType::Realnumber:
                    if (this.OptimalText || this.OptimalDate || this.OptimalEnumerate || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Realnumber));
                    }
                    break;
                case PdsBatchAttribType::String:
                    if (this.OptimalDate || this.OptimalEnumerate || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::String));
                    }
                    break;
                case PdsBatchAttribType::Date:
                    if (this.OptimalText || this.OptimalEnumerate || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Date));
                    }
                    break;
                case PdsBatchAttribType::Enumerate:
                    if (this.OptimalDate || this.OptimalText || isAnyDecimalFieldSet || isAnyIntegerFieldSet)
                    {
                        ret = checkFailed(strFmt("@SCM:PdsItemBatchAttributeEntityFieldAssignmentError", PdsBatchAttribType::Enumerate));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalTextDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalText computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalText field.
    /// </returns>
    public static str optimalTextDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::FieldDefinition(PdsBatchAttribType::String, fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalEnumerateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalEnumerate computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalEnumerate field.
    /// </returns>
    public static str optimalEnumerateDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::FieldDefinition(PdsBatchAttribType::Enumerate, fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalDate computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalDate field.
    /// </returns>
    public static str optimalDateDefinition()
    {
        TableName entityName = tableStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity);
    
        str calculatedDateString = SysComputedColumn::getDateAdd(
            SysComputedColumn::cast(
                SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttribByAttribGroup), fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget)),
                'int'),
            SysComputedColumn::returnLiteral(Global::DateNull()),
            SysComputedColumnDatePart::Day);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(PdsBatchAttribType::Date))),
                        calculatedDateString,
                        SysComputedColumn::returnLiteral(Global::DateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MinimumIntegerTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MinimumIntegerTolerance field.
    /// </returns>
    public static str minimumIntegerToleranceDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumIntegerToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MaximumIntegerTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MaximumIntegerTolerance field.
    /// </returns>
    public static str maximumIntegerToleranceDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the IntegerToleranceIncrement computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the IntegerToleranceIncrement field.
    /// </returns>
    public static str integerToleranceIncrementDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalIntegerDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalInteger computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalInteger field.
    /// </returns>
    public static str optimalIntegerDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::IntegerFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minimumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MinimumDecimalTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MinimumDecimalTolerance field.
    /// </returns>
    public static str minimumDecimalToleranceDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumDecimalToleranceDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the MaximumDecimalTolerance computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the MaximumDecimalTolerance field.
    /// </returns>
    public static str maximumDecimalToleranceDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalToleranceIncrementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the DecimalToleranceIncrement computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the DecimalToleranceIncrement field.
    /// </returns>
    public static str decimalToleranceIncrementDefinition()
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::DecimalFieldDefinition(fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimalDecimalDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute the OptimalDecimal computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the OptimalDecimal field.
    /// </returns>
    public static str optimalDecimalDefinition()
    {
        TableName entityName = tableStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity);
    
        // The decimal target definition has a different structure than then integer one,
        // because SQL was throwing an error for the empty value: Error converting data type nvarchar to numeric.
        return SysComputedColumn::if(
                    SysComputedColumn::and2(
                        SysComputedColumn::notEqualExpression(
                            SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttribByAttribGroup), fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget)),
                            SysComputedColumn::returnLiteral('')),
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                                int2Str(enum2Int(PdsBatchAttribType::Realnumber)))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttribByAttribGroup), fieldStr(PdsBatchAttribByAttribGroup, PdsBatchAttribTarget)),
                        SysComputedColumn::returnLiteral('0.0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerFieldDefinition</Name>
				<Source><![CDATA[
    private static str integerFieldDefinition(FieldName _fieldName)
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::FieldDefinition(PdsBatchAttribType::Integer, _fieldName, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalFieldDefinition</Name>
				<Source><![CDATA[
    private static str decimalFieldDefinition(FieldName _fieldName)
    {
        return PdsItemBatchAttributeGroupAttributeAssignmentEntity::FieldDefinition(PdsBatchAttribType::Realnumber, _fieldName, '0.0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefinition</Name>
				<Source><![CDATA[
    private static str fieldDefinition(PdsBatchAttribType _batchAttributeType, FieldName _fieldName, str _nullLiteral)
    {
        TableName entityName = tableStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(_batchAttributeType))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(PdsItemBatchAttributeGroupAttributeAssignmentEntity, PdsBatchAttribByAttribGroup), _fieldName),
                        SysComputedColumn::returnLiteral(_nullLiteral));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@SCM:Developer_PdsItemBatchAttributeGroupAttributeAssignmentEntity</DeveloperDocumentation>
	<FormRef>PdsBatchAttribByAttribGroup</FormRef>
	<Label>@SCM:DataEntity_PdsItemBatchAttributeGroupAttributeAssignmentEntity</Label>
	<Tags>Batch attributes</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PdsItemBatchAttributeGroupAttributeAssignmentStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchAttributeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>PdsBatchAttribId</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchAttributeGroupId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>PdsBatchAttribGroupId</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToleranceFailingAction</Name>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribToleranceAction</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OptimalValue</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribTarget</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OptimalText</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeStringTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalTextDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribTarget</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>OptimalDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDateTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDateDefinition</ComputedFieldMethod>
			<ExtendedDataType>BaseDate</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OptimalEnumerate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeEnumTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalEnumerateDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribEnumValue</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MinimumTolerance</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribMin</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MaximumTolerance</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribMax</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToleranceIncrement</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribMultiple</DataField>
			<DataSource>PdsBatchAttribByAttribGroup</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MinimumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>MaximumIntegerTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumIntegerToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumIntegerToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>IntegerToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>integerToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>OptimalInteger</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeIntegerTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalIntegerDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MinimumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMinimumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>minimumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaximumDecimalTolerance</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeMaximumDecimalToleranceLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>maximumDecimalToleranceDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>DecimalToleranceIncrement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDecimalToleranceIncrementLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>decimalToleranceIncrementDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsBatchAttribMultiple</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OptimalDecimal</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:PdsItemBatchAttributeDecimalTargetLabel</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>optimalDecimalDefinition</ComputedFieldMethod>
			<ExtendedDataType>PdsItemBatchAttributeDecimalTarget</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ItemBatchAttributeGroupId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ItemBatchAttributeId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PdsBatchAttribByAttribGroup</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PdsBatchAttribByAttribGroup</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PdsBatchAttrib</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PdsBatchAttrib</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PdsBatchAttribAttribId</Field>
								<JoinDataSource>PdsBatchAttribByAttribGroup</JoinDataSource>
								<RelatedField>PdsBatchAttribId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>