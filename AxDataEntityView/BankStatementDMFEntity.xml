<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementDMFEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
// Microsoft internal use only, please do not do any extension to this data entity. For any extension requests, please reach out to Bank Management team.
public class BankStatementDMFEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps data entity fields to fields of the data sources.
    /// </summary>
    /// <param name = "_entityCtx">Entity context.</param>
    /// <param name = "_dataSourceCtx">Datasource context.</param>
    [Hookable(false)]
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        BankStmtISOAccountStatement bankStmtISOAccountStatement = BankStmtISOAccountStatement::findByBankAccountAndStatementId(this.BankAccount, this.StatementId);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            BankStmtISODocument bankStmtISODocument;
            BankStmtISOGroupHeader bankStmtISOGroupHeader;

            if (bankStmtISOAccountStatement.RecId)
            {
                switch (_dataSourceCtx.name())
                {
                    case dataEntityDataSourceStr(BankStatementDMFEntity, BankStmtISOAccountStatement):
                        _dataSourceCtx.setBuffer(bankStmtISOAccountStatement);
                        break;

                    case dataEntityDataSourceStr(BankStatementDMFEntity, BankStmtISODocument):
                        bankStmtISODocument = BankStmtISODocument::find(bankStmtISOAccountStatement.BankStmtISODocument);
                        _dataSourceCtx.setBuffer(bankStmtISODocument);
                        break;

                    case dataEntityDataSourceStr(BankStatementDMFEntity, BankStmtISOGroupHeader):
                        bankStmtISODocument = BankStmtISODocument::find(bankStmtISOAccountStatement.BankStmtISODocument);
                        bankStmtISOGroupHeader = BankStmtISOGroupHeader::find(bankStmtISODocument.GroupHeader);
                        _dataSourceCtx.setBuffer(bankStmtISOGroupHeader);
                        break;

                    case dataEntityDataSourceStr(BankStatementDMFEntity, OpeningBalance):
                        BankStmtISOCashBalance openingBalance = BankStmtISOCashBalance::findByStatementAndBalanceType(bankStmtISOAccountStatement.RecId, BankStatementBalanceType::Opening);
                        _dataSourceCtx.setBuffer(openingBalance);
                        break;

                    case dataEntityDataSourceStr(BankStatementDMFEntity, EndingBalance):
                        BankStmtISOCashBalance endingBalance = BankStmtISOCashBalance::findByStatementAndBalanceType(bankStmtISOAccountStatement.RecId, BankStatementBalanceType::Closing);
                        _dataSourceCtx.setBuffer(endingBalance);
                        break;

                    case dataEntityDataSourceStr(BankStatementDMFEntity, NetAmount):
                        BankStmtISOCashBalance netAmount = BankStmtISOCashBalance::findByStatementAndBalanceType(bankStmtISOAccountStatement.RecId, BankStatementBalanceType::NetAmount);
                        _dataSourceCtx.setBuffer(netAmount);
                        break;

                    default:
                        break;
                }

                _dataSourceCtx.skipValidateWrite(true);
                _dataSourceCtx.skipDataMethods(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
            }
        }

        super(_entityCtx, _dataSourceCtx);

        if (!bankStmtISOAccountStatement.RecId)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(BankStatementDMFEntity, BankStmtISOGroupHeader):
                    BankStmtISOGroupHeader bankStmtISOGroupHeader = _dataSourceCtx.getBuffer();
                    bankStmtISOGroupHeader.MessageIdentification = NumberSeq::newGetNum(BankParameters::numRefBankStatementDownloadId()).num();
                    _dataSourceCtx.setBuffer(bankStmtISOGroupHeader);
                    break;

                case dataEntityDataSourceStr(BankStatementDMFEntity, BankStmtISOAccountStatement):
                    bankStmtISOAccountStatement = _dataSourceCtx.getBuffer();
                    BankStmtISOAccountStatement.Manual = NoYes::Yes;
                    _dataSourceCtx.setBuffer(bankStmtISOAccountStatement);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field for <c>BankStatementDMFEntity</c>.
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field id to check</param>
    /// <returns>Returns true if the validation pass, otherwise, returns false.</returns>
    [Hookable(false)]
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            BankAccountTable bankAccountTable = BankAccountTable::find(this.BankAccount);

            switch (_fieldIdToCheck)
            {
                case fieldNum(BankStatementDMFEntity, BankAccount):
                    if (!bankAccountTable)
                    {
                        ret = checkFailed(strFmt("@Bank:BankStmtDMFEntityBankAccountValidationMessage", this.BankAccount));
                    }
                    break;

                case fieldNum(BankStatementDMFEntity, Currency):
                    if (bankAccountTable && this.Currency != bankAccountTable.CurrencyCode)
                    {
                        ret = checkFailed(strFmt("@Bank:BankStmtDMFEntityCurrencyValidationMessage", this.Currency, bankAccountTable.CurrencyCode));
                    }
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void insert()
    {
        this.setBalance();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.setBalance();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBalance</Name>
				<Source><![CDATA[
    private void setBalance()
    {
        if (this.OpeningBalance > 0)
        {
            this.OpeningBalanceCreditDebitIndicator = DebitCredit::Debit;
        }
        else if (this.OpeningBalance < 0)
        {
            this.OpeningBalance = abs(this.OpeningBalance);
        }

        if (this.EndingBalance> 0)
        {
            this.EndingBalanceCreditDebitIndicator = DebitCredit::Debit;
        }
        else if (this.EndingBalance < 0)
        {
            this.EndingBalance = abs(this.EndingBalance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postLoad()
    {
        super();

        // Handle export processing.
        if (this.RecId)
        {
            // OpeningBalance and EndingBalance are always postive in <c>BankStmtISOCashBalance</c> table, using Indicator field to identify the negative and positive numbers.
            // If CreditDebitIndicator is Credit, means the amount exported should be negative.
            if (this.OpeningBalanceCreditDebitIndicator == DebitCredit::Credit)
            {
                this.OpeningBalance *= -1;
            }
            
            if (this.EndingBalanceCreditDebitIndicator == DebitCredit::Credit)
            {
                this.EndingBalance *= -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    internal static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankStatementDMFStaging bankStatementDMFStaging;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;

        while select count(RecId), BankAccountTable, Identification from bankStmtISOAccountStatement
            group by bankStmtISOAccountStatement.BankAccountTable, bankStmtISOAccountStatement.Identification
            join RecId from bankStatementDMFStaging
                where bankStatementDMFStaging.StatementId == bankStmtISOAccountStatement.Identification
                    && bankStatementDMFStaging.BankAccount == bankStmtISOAccountStatement.BankAccountTable
                    && bankStatementDMFStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && bankStatementDMFStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            if (bankStmtISOAccountStatement.RecId > 1)
            {
                throw error(strFmt("@Bank:BankStmtAndLineDMFEntityImportStopErrorMessage", bankStmtISOAccountStatement.Identification, bankStmtISOAccountStatement.BankAccountTable));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        BankStmtISOAccountStatement bankStmtISOAccountStatement = BankStmtISOAccountStatement::findByBankAccountAndStatementId(this.BankAccount, this.StatementId);
        if (bankStmtISOAccountStatement && bankStmtISOAccountStatement.Status != BankStatementStatus::Open)
        {
            ret = checkFailed(strFmt("@Bank:BankStmtDMFEntityStatementStatusValidationMessage", bankStmtISOAccountStatement.Identification, bankStmtISOAccountStatement.BankAccountTable));
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@Bank:BankStatementDMFEntity</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankStatementDMFStaging</DataManagementStagingTable>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccount</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>BankAccountTable</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StatementId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Identification</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FromDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>FromDateTime</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ToDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ToDateTime</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OpeningBalance</Name>
			<DataField>CashBalanceAmount</DataField>
			<DataSource>OpeningBalance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndingBalance</Name>
			<DataField>CashBalanceAmount</DataField>
			<DataSource>EndingBalance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Currency</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>AccountCurrency</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EndingBalanceCreditDebitIndicator</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AmountCreditDebitIndicator</DataField>
			<DataSource>EndingBalance</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OpeningBalanceCreditDebitIndicator</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AmountCreditDebitIndicator</DataField>
			<DataSource>OpeningBalance</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>StatementId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BankAccount</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankStmtISOAccountStatement</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankStmtISOAccountStatement</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>OpeningBalance</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOCashBalance</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>BankStatementBalanceType</Name>
								<Field>BankStatementBalanceType</Field>
								<Value>1</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>BankStmtISOAccountStatement</JoinDataSource>
								<JoinRelationName>BankStmtISOAccountStatement</JoinRelationName>
								<RelatedField>BankStmtISOAccountStatement</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EndingBalance</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOCashBalance</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>BankStatementBalanceType</Name>
								<Field>BankStatementBalanceType</Field>
								<Value>2</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>BankStmtISOAccountStatement</JoinDataSource>
								<JoinRelationName>BankStmtISOAccountStatement</JoinRelationName>
								<RelatedField>BankStmtISOAccountStatement</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>NetAmount</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOCashBalance</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>BankStatementBalanceType</Name>
								<Field>BankStatementBalanceType</Field>
								<Value>3</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>BankStmtISOAccountStatement</JoinDataSource>
								<JoinRelationName>BankStmtISOAccountStatement</JoinRelationName>
								<RelatedField>BankStmtISOAccountStatement</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankStmtISODocument</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISODocument</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BankStmtISOGroupHeader</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>BankStmtISOGroupHeader</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>GroupHeader</Field>
										<JoinDataSource>BankStmtISODocument</JoinDataSource>
										<JoinRelationName>BankStmtISOGroupHeader</JoinRelationName>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>BankStmtISODocument</Field>
								<JoinDataSource>BankStmtISOAccountStatement</JoinDataSource>
								<JoinRelationName>BankStmtISODocument</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>