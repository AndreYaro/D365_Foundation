<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowTSResultEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CashFlowTSResultEntity extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateExistingResultsFromStaging</Name>
				<Source><![CDATA[
    private static int64 updateExistingResultsFromStaging(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowTimeSeriesResultStaging stagingTable;
        CashFlowTimeSeriesResult resultTable;
        CashFlowTSResultEntity::skipTableMethods(resultTable);

        update_recordset resultTable
            setting AIConfigurationId = stagingTable.AIConfigurationId,
                AmountMST = stagingTable.AmountMST,
                RunId = stagingTable.RunId,
                Quantiles = stagingTable.Quantiles,
                ModelId = stagingTable.ModelId
            join stagingTable
                where stagingTable.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stagingTable.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && (stagingTable.TransferStatus == DMFTransferStatus::NotStarted || stagingTable.TransferStatus == DMFTransferStatus::Validated)
                    && resultTable.Company == stagingTable.Company
                    && resultTable.CashFlowDate == stagingTable.CashFlowDate
                    && resultTable.MainAccount == stagingTable.MainAccount
                    && resultTable.CashFlowDimension == stagingTable.CashFlowDimension
                    && resultTable.TimeSeriesId == stagingTable.TimeSeriesId;

            return resultTable.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewResultsFromStaging</Name>
				<Source><![CDATA[
    private static int64 insertNewResultsFromStaging(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowTimeSeriesResultStaging stagingTable;
        CashFlowTimeSeriesResult resultTable;
        CashFlowTSResultEntity::skipTableMethods(resultTable);

        insert_recordset resultTable (AIConfigurationId, AmountMST, CashFlowDate, CashFlowDimension, Company, MainAccount, ModelId, Quantiles, RunId, TimeSeriesId)
            select AIConfigurationId, AmountMST, CashFlowDate, CashFlowDimension, Company, MainAccount, ModelId, Quantiles, RunId, TimeSeriesId from stagingTable
                where stagingTable.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stagingTable.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && (stagingTable.TransferStatus == DMFTransferStatus::NotStarted || stagingTable.TransferStatus == DMFTransferStatus::Validated)
            notexists join resultTable
                where resultTable.Company == stagingTable.Company
                    && resultTable.CashFlowDate == stagingTable.CashFlowDate
                    && resultTable.MainAccount == stagingTable.MainAccount
                    && resultTable.CashFlowDimension == stagingTable.CashFlowDimension
                    && resultTable.TimeSeriesId == stagingTable.TimeSeriesId;

        return resultTable.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markStagingRowsAsCompleted</Name>
				<Source><![CDATA[
    private static void markStagingRowsAsCompleted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowTimeSeriesResultStaging stagingTable;
        CashFlowTimeSeriesResult resultTable;
        CashFlowTSResultEntity::skipTableMethods(stagingTable);

        update_recordset stagingTable
        setting TransferStatus = DMFTransferStatus::Completed
        where stagingTable.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            && stagingTable.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            && (stagingTable.TransferStatus == DMFTransferStatus::NotStarted || stagingTable.TransferStatus == DMFTransferStatus::Validated)
        exists join resultTable
            where resultTable.Company == stagingTable.Company
                && resultTable.CashFlowDate == stagingTable.CashFlowDate
                && resultTable.MainAccount == stagingTable.MainAccount
                && resultTable.CashFlowDimension == stagingTable.CashFlowDimension
                && resultTable.TimeSeriesId == stagingTable.TimeSeriesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    [Hookable(false)]
    internal static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        #OCCRetryCount

        int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

        CashFlowTimeSeriesResultStaging stagingTable;
        CashFlowTimeSeriesResult resultTable;

        int64 updateCount;
        int64 insertCount;

        try
        {
            ttsbegin;


            updateCount = CashFlowTSResultEntity::updateExistingResultsFromStaging(_dmfDefinitionGroupExecution);

            insertCount = CashFlowTSResultEntity::insertNewResultsFromStaging(_dmfDefinitionGroupExecution);

            CashFlowTSResultEntity::markStagingRowsAsCompleted(_dmfDefinitionGroupExecution);

            CashFlowTSResultEntity::postTargetProcess(_dmfDefinitionGroupExecution);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                sleep(xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }

        return [insertCount, updateCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTableMethods</Name>
				<Source><![CDATA[
    private static void skipTableMethods(Common _table)
    {
        _table.skipDataMethods(true);
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipNumberSequenceCheck(true);
        _table.skipPostLoad(true);
        _table.skipTTSCheck(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    [Hookable(false)]
    internal static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowTimeSeriesTransformationPipeline::transformResultToResultBalance();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
	<Label>@CashManagement:CashFlowTSResultEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CashFlowTimeSeriesResultStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashFlowDate</Name>
			<DataField>CashFlowDate</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TimeSeriesId</Name>
			<DataField>TimeSeriesId</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MainAccount</Name>
			<DataField>MainAccount</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashFlowDimension</Name>
			<DataField>CashFlowDimension</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Company</Name>
			<DataField>Company</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountMST</Name>
			<DataField>AmountMST</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AIConfigurationId</Name>
			<DataField>AIConfigurationId</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModelId</Name>
			<DataField>ModelId</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantiles</Name>
			<DataField>Quantiles</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RunId</Name>
			<DataField>RunId</DataField>
			<DataSource>CashFlowTimeSeriesResult</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CashFlowDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TimeSeriesId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>MainAccount</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CashFlowDimension</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Company</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CashFlowTimeSeriesResult</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CashFlowTimeSeriesResult</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>