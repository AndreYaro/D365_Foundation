<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingPairEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNettingPairEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            CustVendNettingAgreement agreement = CustVendNettingAgreement::findByName(this.AgreementName);

            switch (_fieldIdToCheck)
            {
                case fieldNum(CustVendNettingPairEntity, AgreementName):
                    if (agreement.AgreementStatus != CustVendNettingStatus::Inactive)
                    {
                        isValid = checkFailed(strFmt("@CashManagement:ActiveNettingAgreement", this.AgreementName));
                    }
                    break;

                case fieldNum(CustVendNettingPairEntity, CreditAccountNum):
                    if (this.validateCustAccountNotExist(this.CreditAccountNum, this.CreditCompany))
                    {
                        isValid = checkFailed(strFmt("@CashManagement:InvalidCreditAccount", this.CreditAccountNum));
                    }
                    if (CustVendNettingPair::validateDuplicateCustAccount(this.CreditCompany, this.CreditAccountNum, agreement.RecId))
                    {
                        isValid = checkFailed("@CashManagement:DuplicateNettingRelation");
                    }
                    break;

                case fieldNum(CustVendNettingPairEntity, DebitAccountNum):
                    if (this.validateVendAccountNotExist(this.DebitAccountNum, this.DebitCompany))
                    {
                        isValid = checkFailed(strFmt("@CashManagement:InvalidDebitAccount", this.DebitAccountNum));
                    }
                    if (CustVendNettingPair::validateDuplicateVendAccount(this.DebitCompany, this.DebitAccountNum, agreement.RecId))
                    {
                        isValid = checkFailed("@CashManagement:DuplicateNettingRelation");
                    }
                    break;

                case fieldNum(CustVendNettingPairEntity, CreditAccountType):
                    if (this.CreditAccountType != LedgerJournalACType::Cust)
                    {
                        isValid = checkFailed("@CashManagement:WrongCreditAccountType");
                    }
                    break;

                case fieldNum(CustVendNettingPairEntity, DebitAccountType):
                    if (this.DebitAccountType != LedgerJournalACType::Vend)
                    {
                        isValid = checkFailed("@CashManagement:WrongDebitAccountType");
                    }
                    break;

                default:
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountName</Name>
				<Source><![CDATA[
    public static str creditAccountName()
    {
        str custAccountNameView = viewstr(CustAccountName);
        str custAccountNameName = fieldStr(CustAccountName, Name);
        str custAccountNameAccountNum = fieldStr(CustAccountName, AccountNum);
        str custAccountNameDataArea = fieldStr(CustAccountName, DataAreaId);
        str custAccountNamePartition = fieldStr(CustAccountName, Partition);

        str nettingPairAlias = 'T1';
        str nettingPairCreditComapny = fieldStr(CustVendNettingPair, CreditCompany);
        str nettingPairCreditAccountNum = fieldStr(CustVendNettingPair, CreditAccountNum);
        str nettingPairPartition = fieldStr(CustVendNettingPair, Partition);

        str creditAccountNameSelect = strFmt(
            'SELECT TOP 1 %1.%2 FROM %1 WHERE %1.%3 = %6.%8 AND %1.%4 = %6.%7 AND %1.%5 = %6.%9',
            custAccountNameView,
            custAccountNameName,
            custAccountNameAccountNum,
            custAccountNameDataArea,
            custAccountNamePartition,
            nettingPairAlias,
            nettingPairCreditComapny,
            nettingPairCreditAccountNum,
            nettingPairPartition);

        return creditAccountNameSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountName</Name>
				<Source><![CDATA[
    public static str debitAccountName()
    {
        str vendAccountNameView = viewstr(VendAccountName_IT);
        str vendAccountNameName = fieldStr(VendAccountName_IT, Name);
        str vendAccountNameAccountNum = fieldStr(VendAccountName_IT, AccountNum);
        str vendAccountNameDataArea = fieldStr(VendAccountName_IT, DataAreaId);
        str vendAccountNamePartition = fieldStr(VendAccountName_IT, Partition);

        str nettingPairAlias = 'T1';
        str nettingPairCreditComapny = fieldStr(CustVendNettingPair, DebitCompany);
        str nettingPairCreditAccountNum = fieldStr(CustVendNettingPair, DebitAccountNum);
        str nettingPairPartition = fieldStr(CustVendNettingPair, Partition);

        str debitAccountNameSelect = strFmt(
            'SELECT TOP 1 %1.%2 FROM %1 WHERE %1.%3 = %6.%8 AND %1.%4 = %6.%7 AND %1.%5 = %6.%9',
            vendAccountNameView,
            vendAccountNameName,
            vendAccountNameAccountNum,
            vendAccountNameDataArea,
            vendAccountNamePartition,
            nettingPairAlias,
            nettingPairCreditComapny,
            nettingPairCreditAccountNum,
            nettingPairPartition);

        return debitAccountNameSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAccountNotExist</Name>
				<Source><![CDATA[
    private boolean validateCustAccountNotExist(CustAccount _custAccount, CompanyId _company)
    {
        CustTable custTable = CustTable::findByCompany(_company, _custAccount);

        return custTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendAccountNotExist</Name>
				<Source><![CDATA[
    private boolean validateVendAccountNotExist(VendAccount _vendAccount, CompanyId _company)
    {
        VendTable vendTable = VendTable::findByCompany(_company, _vendAccount);

        return vendTable.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CashManagement:NettingPairEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CustVendNettingPairStaging</DataManagementStagingTable>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgreementName</Name>
			<DataField>Name</DataField>
			<DataSource>CustVendNettingAgreement</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CreditAccountName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@AccountsReceivable:PersonName</Label>
			<ComputedFieldMethod>creditAccountName</ComputedFieldMethod>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAccountNum</Name>
			<DataField>CreditAccountNum</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAccountType</Name>
			<DataField>CreditAccountType</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditCompany</Name>
			<DataField>CreditCompany</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DebitAccountName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@AccountsReceivable:PersonName</Label>
			<ComputedFieldMethod>debitAccountName</ComputedFieldMethod>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAccountNum</Name>
			<DataField>DebitAccountNum</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAccountType</Name>
			<DataField>DebitAccountType</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitCompany</Name>
			<DataField>DebitCompany</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExpireDate</Name>
			<DataField>ExpireDate</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StartDate</Name>
			<DataField>StartDate</DataField>
			<DataSource>CustVendNettingPair</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>AgreementName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CreditAccountNum</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DebitAccountNum</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>NettingAgreements</Name>
			<RelatedDataEntity>CustVendNettingAgreementEntity</RelatedDataEntity>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>AgreementName</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustVendNettingPair</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustVendNettingPair</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustVendNettingAgreement</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustVendNettingAgreement</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CustVendNettingAgreement</Field>
								<JoinDataSource>CustVendNettingPair</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>