<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundShipmentHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInboundShipmentHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up dependant fields in <c>WHSShipmentTable</c> record to be created or updated.
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSInboundShipmentHeaderEntity, WHSShipmentTable)
            && _entityCtx.getDatabaseOperation() == DataEntitydatabaseOperation::Insert)
        {
            WHSShipmentTable shipmentTable = _dataSourceCtx.getBuffer();
            shipmentTable.LoadDirection = WHSLoadDirection::Inbound;
            shipmentTable.DeliveryName = "@WAX521";

            super(_entityCtx, _dataSourceCtx);
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSInboundShipmentHeaderEntity, LogisticsPostalAddress)
                && _entityCtx.getDatabaseOperation() == DataEntitydatabaseOperation::Insert)
        {
            // To facilitate the setting up of LogisticsPostalAddress FK value on WHSShipmentTable record during the FK propagation
            // for existing matching addresses we need to re-select the corresponding EXISTING record from LogisticsPostalAddress table,
            // so its PK (RecId) could be fetched and then propagated to the  WHSShipment record.
            // For non-existing matching addresses we first create the record in LogisticsPostalAddress table, and after return it to set the _dataSourceCtx buffer.
            // (because of LogisticsPostalAddress DS is Read-only, there is no other way to obtain PK of the address record other than explicitly re-reading it)
            if (this.isDeliveryPostalAddressSet())
            {
                LogisticsPostalAddress shipmentAddress = this.findOrCreateVendorAddressForInboundASNHeader();

                _dataSourceCtx.setBuffer(shipmentAddress);
            }
            // No call to super() is needed here - we handled update of LogisticsPostalAddress data source allready.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryPostalAddressSet</Name>
				<Source><![CDATA[
    private boolean isDeliveryPostalAddressSet()
    {
        return (   this.VendorAddressCountryRegionId != ''
                || this.VendorAddressStreet          != ''
                || this.VendorAddressStateId         != ''
                || this.VendorAddressCountyId        != ''
                || this.VendorAddressCity            != ''
                || this.VendorAddressZipCode         != '' );
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateVendorAddressForInboundASNHeader</Name>
				<Source><![CDATA[
    private LogisticsPostalAddress findOrCreateVendorAddressForInboundASNHeader()
    {
        LogisticsPostalAddress vendorAddress;
        select firstonly vendorAddress
            where vendorAddress.CountryRegionId == this.VendorAddressCountryRegionId
                && vendorAddress.Street == this.VendorAddressStreet
                && vendorAddress.State == this.VendorAddressStateId
                && vendorAddress.County == this.VendorAddressCountyId
                && vendorAddress.City == this.VendorAddressCity
                && vendorAddress.ZipCode == this.VendorAddressZipCode;

        if (!vendorAddress.RecId)
        {
            vendorAddress.CountryRegionId = this.VendorAddressCountryRegionId;
            vendorAddress.Street = this.VendorAddressStreet;
            vendorAddress.State = this.VendorAddressStateId;
            vendorAddress.County = this.VendorAddressCountyId;
            vendorAddress.City = this.VendorAddressCity;
            vendorAddress.ZipCode = this.VendorAddressZipCode;
            vendorAddress.insert();
        }
        return vendorAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Entity_DevDoc_WHSInboundShipmentHeaderEntity</DeveloperDocumentation>
	<FormRef>whsshipmentdetails</FormRef>
	<Label>@WAX:Entity_Title_WHSInboundShipmentHeaderEntity</Label>
	<Tags>Inbound</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSInboundShipmentHeaderStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>WMS</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>InboundShipmentHeaders</PublicCollectionName>
	<PublicEntityName>InboundShipmentHeader</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InboundLoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTermsCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressStreet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressStreetInKana</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressCityInKana</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorAddressZipCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryTermsCode</Name>
			<DataField>DlvTermId</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShipmentId</Name>
			<DataField>ShipmentId</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorShipmentId</Name>
			<DataField>CustomerRef</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressCountryRegionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressStreetInKana</Name>
			<DataField>StreetKana_JP</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressStateId</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressCountyId</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressCityInKana</Name>
			<DataField>CityKana_JP</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorAddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddress</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InboundLoadId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>LoadId</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorPackingSlipId</Name>
			<DataField>ReceivingCompletedPackingSlipId</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VendorPackingSlipDocumentDate</Name>
			<DataField>ReceivingCompletedDocumentDate</DataField>
			<DataSource>WHSShipmentTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ShipmentId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>WHSInboundLoadHeaderEntity</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedDataEntity>WHSInboundLoadHeaderEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>InboundLoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSShipmentTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSShipmentTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddress</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsPostalAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LogisticsPostalAddress</Name>
								<JoinRelationName>LogisticsPostalAddress</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>LoadDirection</Name>
						<Field>LoadDirection</Field>
						<Status>Hidden</Status>
						<Value>Inbound</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>