<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineD365SalesEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationLineD365SalesEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query query = new Query();

        var salesQuotationLineDS = query.addDataSource(tableNum(SalesQuotationLine));
        salesQuotationLineDS.addRange(fieldNum(SalesQuotationLine, QuotationType)).value(queryValue(QuotationType::Sales));

        var categoryDS = salesQuotationLineDS.addDataSource(tableNum(EcoResCategory));
        categoryDS.addLink(fieldNum(SalesQuotationLine, SalesCategory), fieldNum(EcoResCategory, RecId));
        categoryDS.relations(true);
        categoryDS.joinMode(JoinMode::OuterJoin);

        var foreignTradeCategoryDS = salesQuotationLineDS.addDataSource(tableNum(SalesQuotationLineForeignTradeCategory));
        foreignTradeCategoryDS.addLink(fieldNum(SalesQuotationLine, DataAreaId), fieldNum(SalesQuotationLineForeignTradeCategory, SalesQuotationLineDataAreaId));
        foreignTradeCategoryDS.addLink(fieldNum(SalesQuotationLine, InventTransId), fieldNum(SalesQuotationLineForeignTradeCategory, SalesQuotationLineInventTransId));
        foreignTradeCategoryDS.joinMode(JoinMode::OuterJoin);
        
        var inventTableDS = salesQuotationLineDS.addDataSource(tableNum(InventTable));
        inventTableDS.addLink(fieldNum(SalesQuotationLine, ItemId), fieldNum(InventTable, ItemId));
        
        LogisticsPostalAddressBaseEntityChangeTrackingHelper::addPostalAddressBasedOnAddressRecIdLink(salesQuotationLineDS, fieldNum(SalesQuotationLine, DeliveryPostalAddress));

        var lineTotalsDS = salesQuotationLineDS.addDataSource(tableNum(SalesQuotationLineCalculatedTotals));
        lineTotalsDS.joinMode(JoinMode::OuterJoin);
        lineTotalsDS.addLink(fieldNum(SalesQuotationLine, InventTransId), fieldNum(SalesQuotationLineCalculatedTotals, InventTransId));

        var salesQuotationTableDS = salesQuotationLineDS.addDataSource(tableNum(SalesQuotationTable));
        salesQuotationTableDS.addLink(fieldNum(SalesQuotationLine, QuotationId), fieldNum(SalesQuotationTable, QuotationId));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, EcoResCategory):
                ret = this.resolveProductCategory();
                break;

            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, InventDim):
                SalesQuotationLine salesQuotationLine = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine)).getBuffer();
                ret = InventDim::find(salesQuotationLine.InventDimId);
                break;

            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                ret = TradeEntitySpecificDeliveryAddress::findLogisticsPostalAddressBaseEntityDataSource();
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLineD365SalesEntity)).salesQuotationActivities().insertEntityDataSource(_dataSourceCtx))
        {
            SalesQuotationLine salesQuotationLine;
            SalesPrice salesPrice;
            LineAmount lineAmount;
            real lineDiscountPercentage;
            LineAmount lineDiscountAmount;
            boolean isLineDiscountSet;

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                    salesQuotationLine = _dataSourceCtx.getBuffer();

                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        salesPrice = this.shouldDefaultToAgreementPrice() ? 0 : salesQuotationLine.SalesPrice;
                        lineAmount = salesQuotationLine.LineAmount;
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        lineDiscountPercentage = salesQuotationLine.LinePercent;
                        lineDiscountAmount = salesQuotationLine.LineDisc;
                    }

                    if (SalesParameters::find().IsD365SalesQuotationLifecycleEnabled)
                    {
                        salesQuotationLine.QuotationLineCreationMethod = SalesQuotationCreationMethod::Dynamics365Sales;
                    }

                    isLineDiscountSet = this.insertLineDiscount(_dataSourceCtx);

                    salesQuotationLine.LineNum = salesQuotationLine.LineNum ? salesQuotationLine.LineNum : SalesQuotationLine::lastLineNum(this.SalesQuotationNumber) + 1;
                    break;
            }

            boolean ret = super(_entityCtx, _dataSourceCtx);

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                    this.TradeEntitySpecificDeliveryAddress::postInsertLogisticsPostalAddressBaseEntityDataSource(_dataSourceCtx);
                    break;

                case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                    if (isLineDiscountSet)
                    {
                        this.updateSalesMarkupWithRoundingDifference(_dataSourceCtx);
                    }

                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesPriceOrLineAmountOutOfSync(salesQuotationLine, salesPrice, lineAmount);
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(salesQuotationLine, lineDiscountPercentage, lineDiscountAmount);
                    }
                    break;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLineD365SalesEntity)).salesQuotationActivities().updateEntityDataSource(_dataSourceCtx))
        {
            SalesQuotationLine salesQuotationLine;
            SalesPrice salesPrice;
            LineAmount lineAmount;
            real lineDiscountPercentage;
            LineAmount lineDiscountAmount;
            boolean isLineDiscountSet;

            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                    salesQuotationLine = _dataSourceCtx.getBuffer();
                
                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        salesPrice = salesQuotationLine.SalesPrice;
                        lineAmount = salesQuotationLine.LineAmount;
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        lineDiscountPercentage = salesQuotationLine.LinePercent;
                        lineDiscountAmount = salesQuotationLine.LineDisc;
                    }

                    isLineDiscountSet = this.updateLineDiscount(_dataSourceCtx);
                    break;
            }
        
            boolean ret = super(_entityCtx, _dataSourceCtx);
        
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                    if (isLineDiscountSet)
                    {
                        this.updateSalesMarkupWithRoundingDifference(_dataSourceCtx);
                    }

                    if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesPriceOrLineAmountOutOfSync(salesQuotationLine, salesPrice, lineAmount);
                    }

                    if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
                    {
                        this.checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(salesQuotationLine, lineDiscountPercentage, lineDiscountAmount);
                    }
                    break;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesPriceOrLineAmountOutOfSync</Name>
				<Source><![CDATA[
    private void checkSalesPriceOrLineAmountOutOfSync(SalesQuotationLine _salesQuotationLine, SalesPrice _originalSalesPrice, LineAmount _originalLineAmount)
    {
        if (_salesQuotationLine.SalesPrice != _originalSalesPrice || _salesQuotationLine.LineAmount != _originalLineAmount)
        {
            SalesQuotationLineNotSyncedWithCDSRecord::insertRecord(_salesQuotationLine.QuotationId, _salesQuotationLine.RecId, SalesNotSyncedWithCDSFieldsType::SalesPriceOrLineAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync</Name>
				<Source><![CDATA[
    private void checkSalesLineDiscountPercentageOrLineDiscountAmountOutOfSync(SalesQuotationLine _salesQuotationLine, real _originalLineDiscountPercentage, LineAmount _originalLineDiscountAmount)
    {
        if (_salesQuotationLine.LinePercent != _originalLineDiscountPercentage || _salesQuotationLine.LineDisc != _originalLineDiscountAmount)
        {
            SalesQuotationLineNotSyncedWithCDSRecord::insertRecord(_salesQuotationLine.QuotationId, _salesQuotationLine.RecId, SalesNotSyncedWithCDSFieldsType::SalesLineDiscountPercentageOrLineDiscountAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the sales quotation line entity back to Sales.
    /// </summary>
    /// <param name = "_salesQuotationLineEntityRecord">The sales quotation line entity record.</param>
    /// <returns>The sales quotation line entity record that need to be resynced.</returns>
    /// <remarks>
    /// This method is aimed to be used by Dual Write to trigger synchronization of the sales quotation line entity back to Sales.
    /// See <c>RunDocumentAction</c> OData action on the <c>DualWriteProjectConfigurationEntity</c> entity.
    /// </remarks>
    public static List syncLineData(Common _salesQuotationLineEntityRecord)
    {
        SalesQuotationLineD365SalesEntity salesQuotationLineD365SalesEntity = _salesQuotationLineEntityRecord;
        List relatedRecords = new List(Types::Container);

        using (var activityContext = SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLineD365SalesEntity)).salesQuotationActivities().syncQuotationLineEntityData())
        {
            if (salesQuotationLineD365SalesEntity != null)
            {
                relatedRecords.addEnd([salesQuotationLineD365SalesEntity.TableId, salesQuotationLineD365SalesEntity.RecId]);

                SalesQuotationLineNotSyncedWithCDSRecord salesQuotationLineNotSyncedWithCDSRecord;
                delete_from salesQuotationLineNotSyncedWithCDSRecord where salesQuotationLineNotSyncedWithCDSRecord.QuotationLineRefRecId == salesQuotationLineD365SalesEntity.RecId;
            
                activityContext.addCustomProperty('RecordToSync', int642Str(salesQuotationLineD365SalesEntity.RecId));
            }
        }

        
        return relatedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLineDiscount</Name>
				<Source><![CDATA[
    private boolean insertLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (this.TotalDiscountAmount != 0 && this.RequestedSalesQuantity != 0
            && !SalesParameters::find().IsD365SalesPriceMasterEnabled)
        {
            this.setLineDiscount(_dataSourceCtx, this.RequestedSalesQuantity);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineDiscount</Name>
				<Source><![CDATA[
    private boolean updateLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (SalesCDSUpdateLineDiscountOnlyWhenTotalDiscountAmountModifiedFlight::instance().isEnabled()
            && !this.isFieldModified(fieldNum(SalesQuotationLineD365SalesEntity, TotalDiscountAmount)))
        {
            return false;
        }

        if (this.TotalDiscountAmount != 0 && !SalesParameters::find().IsD365SalesPriceMasterEnabled)
        {
            boolean isQuantitySet = this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, RequestedSalesQuantity));

            if (isQuantitySet && this.RequestedSalesQuantity != 0)
            {
                this.setLineDiscount(_dataSourceCtx, this.RequestedSalesQuantity);
                return true;
            }
            else
            {
                SalesQuotationLine salesQuotationLine = SalesQuotationLine::findLineCreationSequence(this.SalesQuotationNumber, this.LineCreationSequenceNumber);
                if (salesQuotationLine.SalesQty != 0)
                {
                    this.setLineDiscount(_dataSourceCtx, salesQuotationLine.SalesQty);
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesMarkupWithRoundingDifference</Name>
				<Source><![CDATA[
    private void updateSalesMarkupWithRoundingDifference(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        SalesQuotationLine salesQuotationLine = _dataSourceCtx.getBuffer();
        var calculatedDiscount = CurrencyExchange::round(salesQuotationLine.SalesQty * salesQuotationLine.LineDisc, salesQuotationLine.CurrencyCode);
        
        if (this.TotalDiscountAmount != calculatedDiscount
            && !SalesParameters::find().IsD365SalesPriceMasterEnabled)
        {
            salesQuotationLine.selectForUpdate(true);
            salesQuotationLine.SalesMarkup = calculatedDiscount - this.TotalDiscountAmount;
            salesQuotationLine.LineAmount = salesQuotationLine.calcLineAmountForced();
            salesQuotationLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineDiscount</Name>
				<Source><![CDATA[
    private void setLineDiscount(DataEntityDataSourceRuntimeContext _dataSourceCtx, SalesOrderedQty _qty)
    {
        if (_qty != 0)
        {
            SalesQuotationLine salesQuotationLine = _dataSourceCtx.getBuffer();
            salesQuotationLine.LineDisc = CurrencyExchange::round((this.TotalDiscountAmount / _qty), Ledger::accountingCurrency());
            salesQuotationLine.SalesMarkup = 0;
            _dataSourceCtx.setBuffer(salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDefaultToAgreementPrice</Name>
				<Source><![CDATA[
    protected boolean shouldDefaultToAgreementPrice()
    {
        // Indicates if default pricing (i.e. Trade Agreement) should be used or not if sales price is set to zero from the entity.
        return this.SalesPrice == 0 && FeatureStateProvider::isFeatureEnabled(SalesZeroPriceAsABlankOnSalesQuoteLineToggle::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                this.SalesDocumentD365SalesEntitySpecificMap::mapLogisticsPostalAddressBaseEntityDataSourceToEntity(_entityCtx, _dataSourceCtx);

                if (_dataSourceCtx.isAnyEntityFieldSet(this))
                {
                    this.TradeEntitySpecificDeliveryAddress::mapLogisticsPostalAddressBaseEntityDataSourceToEntity(_dataSourceCtx);
                }
                break;

            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                // Enable insert of records with blank values for mandatory field RequestedShippingDate.
                if (_entityCtx.isDatabaseOperationInsert())
                {
                    this.setBlankFieldStateToNotSet(fieldNum(SalesQuotationLineD365SalesEntity, RequestedShippingDate));
                }

                if (_entityCtx.isDatabaseOperationInsertOrUpdate())
                {
                    // Find existing logistic address location to avoid duplicate.
                    if (this.IsDeliveryAddressOrderSpecific)
                    {
                        this.TradeEntitySpecificDeliveryAddress::resolveQuotationSpecificLocationId(this.SalesQuotationNumber);
                    }
                    else
                    {
                        this.TradeEntitySpecificDeliveryAddress::resolvePartyAddressLocationId();
                    }

                    if (this.shouldDefaultToAgreementPrice())
                    {
                        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, SalesPrice), FieldState::NotSet);
                    }

                    SalesQuotationLine salesQuotationLine = _dataSourceCtx.getBuffer();

                    if (this.mustMarkLineAmountAsNotSet(_entityCtx))
                    {
                        // Will clear the change policy without a dialog.
                        if (salesQuotationLine.Type().canLineAmountBeUpdatedWithNonInteractiveSession())
                        {
                            this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, LineAmount), FieldState::NotSet);
                        }
                    }
                    else
                    {
                        this.resetLineAmountDependentFieldStages();
                    }

                    this.setIntegration(salesQuotationLine);
                }
                break;
        }

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = _dataSourceCtx.getBuffer();
                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                        if (this.InventoryLotId && this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, InventoryLotId)))
                        {
                            // Without skipping this validation, validateField will fail on the mapped field.
                            this.skipDataSourceValidateField(fieldNum(SalesQuotationLineD365SalesEntity, InventoryLotId), true);
                        }

                        salesQuotationLine.CustAccount = SalesQuotationTable::find(this.SalesQuotationNumber).CustAccount;

                    // Continue to fall through to next case:
                    case DataEntityDatabaseOperation::Update:
                        if (SalesQuotationLineEntitySetStockedProductFlight::instance().isEnabled())
                        {
                            // Set the StockedProduct field, it is required for validating field DeliveryDateControlType
                            salesQuotationLine.setStockedProduct();
                        }

                        // Set the correct inventDimId on the table buffer.
                        salesQuotationLine.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
                        salesQuotationLine.parmQuantityErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods::acceptUserInputWithWarning());
                        break;
                }

                break;

            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, LogisticsPostalAddressBaseEntity):
                
                LogisticsPostalAddressBaseEntity entityBuf = _dataSourceCtx.getBuffer();

                if (!this.DeliveryAddressDescription && SalesSkipAddressCreationIfAddressDescriptionBlankFlight::instance().isEnabled()
                    && _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update && !entityBuf.isAnyMappedFieldModified())
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else
                {
                    // The Address field is generated to a specified format based on the component address parts. Updating it directly is not allowed.
                    entityBuf.fieldState(fieldNum(LogisticsPostalAddressBaseEntity, Address), FieldState::NotSet);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntegration</Name>
				<Source><![CDATA[
    private void setIntegration(SalesQuotationLine _salesQuotationLine)
    {
        if (SalesParameters::find().IsD365SalesQuotationLifecycleEnabled)
        {
            _salesQuotationLine.IsIntegration = TradeIntegrationType::Dynamics365Sales;
        }
        else
        {
            _salesQuotationLine.IsIntegration = TradeIntegrationType::CDS;
        }

        _salesQuotationLine.SalesQuotationIntegrationCreationType = this.SalesQuotationIntegrationCreationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine))
        {
            if (DualWriteTrackSalesPriceOrLineAmountOutOfSyncFlight::instance().isEnabled())
            {
                _dataSourceCtx.getBuffer().fieldState(fieldNum(SalesQuotationLine, SalesPrice), FieldState::Set);
                _dataSourceCtx.getBuffer().fieldState(fieldNum(SalesQuotationLine, LineAmount), FieldState::Set);
            }

            if (DualWriteLineDiscountPercentageOrLineDiscountAmountOutOfSyncFlight::instance().isEnabled())
            {
                _dataSourceCtx.getBuffer().fieldState(fieldNum(SalesQuotationLine, LinePercent), FieldState::Set);
                _dataSourceCtx.getBuffer().fieldState(fieldNum(SalesQuotationLine, LineDisc), FieldState::Set);
            }            
        }

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = _dataSourceCtx.getBuffer();
                this.TradeEntitySpecificDeliveryAddress::mapSavedPostalAddressToEntity(_entityCtx, salesQuotationLine.DeliveryPostalAddress);
                this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(salesQuotationLine.inventDim());
                this.mapSalesCategoryFromSalesQuotationLineToEntity(_entityCtx, salesQuotationLine);

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    salesQuotationLine.SkipAssignInventTransId = NoYes::Yes;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.RecId)
        {
            SalesQuotationTable validateSalesQuotationTable = SalesQuotationTable::find(this.SalesQuotationNumber);

            validateSalesQuotationTable.IsIntegration = SalesParameters::find().IsD365SalesQuotationLifecycleEnabled ? TradeIntegrationType::Dynamics365Sales
                                                                                                               : TradeIntegrationType::CDS;

            if (!validateSalesQuotationTable.checkUpdate())
            {
                ret = false;
            }
        }

        ret = ret && this.validateQuotationId();

        ret = ret && super();

        if (ret && this.mustValidateSalesProductCategory())
        {
            EcoResProductCategory productCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(this.ItemNumber, EcoResCategoryNamedHierarchyRole::Sales);
            EcoResCategory selectedCategory = this.resolveProductCategory();

            if (selectedCategory.RecId != productCategory.Category)
            {
                ret = checkFailed(strFmt("@SCM:SalesLineItemAndCategorySpecifiedError", this.ItemNumber, this.SalesProductCategoryName));
            }
        }

        if (ret)
        {
            InventDim userSpecifiedDimensions = InventDim::find(this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId());
            Set allowEmptyFiels = new Set(Types::Integer);
            allowEmptyFiels.add(-1); // checkDimFieldsValid should allow empty values for all fields since we haven't done defaulting yet.
            ret = userSpecifiedDimensions.checkDimFieldsValid(this.ItemNumber, userSpecifiedDimensions, true, allowEmptyFiels);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateSalesProductCategory</Name>
				<Source><![CDATA[
    private boolean mustValidateSalesProductCategory()
    {
        return this.ItemNumber && this.SalesProductCategoryName
            && (!SalesOrderQuoteLineCDSCheckProductCategoryOnlyIfModifiedFlight::instance().isEnabled() || this.isFieldModified(fieldNum(SalesQuotationLineD365SalesEntity, SalesProductCategoryName)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuotationId</Name>
				<Source><![CDATA[
    private boolean validateQuotationId()
    {
        boolean ret = true;

        SalesQuotationLine line;

        line.QuotationId = this.SalesQuotationNumber;

        if (!line.QuotationId
            || !line.validateField(fieldNum(SalesQuotationLine, QuotationId)))
        {
            ret = checkFailed(strfmt("@ApplicationFoundation:DataEntitiesDataSourceValidateFieldFailed", strFmt('%1.%2', tableStr(SalesQuotationLineD365SalesEntity),fieldStr(SalesQuotationLineD365SalesEntity, SalesQuotationNumber))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProductCategory</Name>
				<Source><![CDATA[
    private EcoResCategory resolveProductCategory()
    {
        EcoResCategory category;
        EcoResCategoryHierarchyRole hierarchyRole;

        select firstonly hierarchyRole where hierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Sales;
        if (hierarchyRole)
        {
            category = EcoResCategory::findByName(this.SalesProductCategoryName, hierarchyRole.CategoryHierarchy);
        }

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressPartyRecId</Name>
				<Source><![CDATA[
    // This method implements the interface defined by <c>TradeEntitySpecificDeliveryAddress</c>
    public RecId deliveryAddressPartyRecId()
    {
        SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(this.SalesQuotationNumber);

        if (salesQuotationTable.CustAccount)
        {
            return CustTable::find(salesQuotationTable.CustAccount).Party;
        }
        else
        {
            return smmBusRelTable::find(salesQuotationTable.BusRelAccount).Party;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [[fieldNum(SalesQuotationLineD365SalesEntity, DeliveryAddressDescription), [fieldNum(SalesQuotationLineD365SalesEntity, DeliveryAddressCountryRegionId)]]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationLineD365SalesEntity, DeliveryAddressDescription):
                if (!this.DeliveryAddressDescription && this.DeliveryAddressCountryRegionId)
                {
                    this.defaultDeliveryAddressDescription();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryAddressDescription</Name>
				<Source><![CDATA[
    private void defaultDeliveryAddressDescription()
    {
        SalesQuotationTable quotation = SalesQuotationTable::find(this.SalesQuotationNumber);
        this.DeliveryAddressDescription = quotation.customerName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSalesCategoryFromSalesQuotationLineToEntity</Name>
				<Source><![CDATA[
    private void mapSalesCategoryFromSalesQuotationLineToEntity(DataEntityRuntimeContext _entityCtx, SalesQuotationLine _salesQuotationLine)
    {
        DataEntityDataSourceRuntimeContext categoryContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, EcoResCategory));
        EcoResCategory category = categoryContext.getBuffer();

        if (category.RecId != _salesQuotationLine.SalesCategory)
        {
            this.SalesProductCategoryName = EcoResCategory::find(_salesQuotationLine.SalesCategory).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(SalesQuotationLineD365SalesEntity, InventoryLotId), InventParameters::numRefInventTransId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityDataSourceToFieldMapping</Name>
				<Source><![CDATA[
    public static container getEntityDataSourceToFieldMapping(container mapping)
    {
        mapping += [[dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, LogisticsPostalAddressBaseEntity), tablenum(LogisticsPostalAddress), fieldstr(SalesQuotationLineD365SalesEntity, DeliveryPostalAddressRecId)]];

        return mapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                this.defaultItemIdAndDimensions();
                break;
        }

        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine):
                // Clear out 'isFieldSet' so the defaulting logic does not consider fields that were set by initValue as specified by the user.
                _dataSourceCtx.setAllFieldStatesToNotSet();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemIdAndDimensions</Name>
				<Source><![CDATA[
    private void defaultItemIdAndDimensions()
    {
        EcoResProduct product = EcoResProduct::findByDisplayProductNumber(this.ProductNumber);
        InventDistinctProduct distinctProduct = InventDistinctProduct::findByProduct(product.RecId);
        
        if (distinctProduct)
        {
            this.ItemNumber = distinctProduct.ItemId;
            this.ProductColorId = distinctProduct.InventColorId;
            this.ProductStyleId = distinctProduct.InventStyleId;
            this.ProductVersionId = distinctProduct.InventVersionId;
            this.ProductSizeId = distinctProduct.InventSizeId;
            this.ProductConfigurationId = distinctProduct.configId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLineD365SalesEntity)).salesQuotationActivities().insert(this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineAmountDependentFieldStages</Name>
				<Source><![CDATA[
    private void resetLineAmountDependentFieldStages()
    {
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, SalesPrice), FieldState::NotSet);
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, LineDiscountAmount), FieldState::NotSet);
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, LineDiscountPercentage), FieldState::NotSet);
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, MultiLineDiscountAmount), FieldState::NotSet);
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, MultiLineDiscountPercentage), FieldState::NotSet);
        this.fieldState(fieldNum(SalesQuotationLineD365SalesEntity, FixedPriceCharges), FieldState::NotSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryAddressOrderSpecificComputedColumnDefinition</Name>
				<Source><![CDATA[
    private static str isDeliveryAddressOrderSpecificComputedColumnDefinition()
    {
        // The <c>IsDeliveryAddressOrderSpecific</c> field is only designed for import scenarios
        // so we will always return 'No' for export scnearios to save performance.
        return SysComputedColumn::returnLiteral(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productNameComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product name from either the variant (if exists) or the product.
    /// </summary>
    /// <returns>Product name</returns>
    public static str productNameComputedColumnDefinition()
    {
        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
                                                  SysComputedColumn::comparisonLiteral('')),
            SysComputedColumn::returnField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, EcoResProductTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)),
            SysComputedColumn::returnField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, EcoResProductMasterTranslationToSystemLanguage), fieldStr(EcoResProductTranslation, Name)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>areTotalsComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate a boolean that indicates whether the totals have been calculated before or not.
    /// </summary>
    /// <returns>The value of <c>AreTotalsCalculated</c> field.</returns>
    public static str areTotalsComputedColumnDefinition()
    {
        return SysComputedColumn::if(SysComputedColumn::isNullExpression(SysComputedColumn::comparisonField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLineCalculatedTotals), fieldStr(SalesQuotationLineCalculatedTotals, RecId))),
            SysComputedColumn::returnLiteral(NoYes::No),
            SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountComputedColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the Total discount amount by subtracting the fixed price charge from the total discount.
    /// </summary>
    /// <returns>The value of <c>TotalDiscountAmount</c> field.</returns>
    /// <remarks>
    /// On entity import the TotalDiscountAmount for a full line is divided by line quantity.
    /// Due to rounding of the result there may be an amount difference once the result is again multiplied by line quantity.
    /// This difference is stored in FixedPriceCharges on import.
    /// </remarks>
    public static str totalDiscountAmountComputedColumnDefinition()
    {
        return SysComputedColumn::subtract(
            SysComputedColumn::returnField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLineCalculatedTotals), fieldStr(SalesQuotationLineCalculatedTotals, TotalDiscountAmount)),
            SysComputedColumn::returnField(tableStr(SalesQuotationLineD365SalesEntity), dataEntityDataSourceStr(SalesQuotationLineD365SalesEntity, SalesQuotationLine), fieldStr(SalesQuotationLine, SalesMarkup)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    public static void jumpRefMethod(str _menuItemName, Common _stagingBuffer, Object _callerObj, DataAreaId _dataAreaId)
    {
        changeCompany(_dataAreaId)
        {
            SalesQuotationLineD365SalesStaging stagingBuffer = _stagingBuffer;

            Args args = new Args();
            args.lookupValue(stagingBuffer.SalesQuotationNumber);

            MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        using (var context = SalesInstrumentationLogger::createLogger(tableStr(SalesQuotationLineD365SalesEntity)).salesQuotationActivities().update(this))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkLineAmountAsNotSet</Name>
				<Source><![CDATA[
    private boolean mustMarkLineAmountAsNotSet(DataEntityRuntimeContext _entityCtx)
    {
        boolean dwCalculateLineAmountFlight, ret;
        
        dwCalculateLineAmountFlight = DualWriteCalculateLineAmountFlight::instance().isEnabled();

        ret = SalesParameters::find().SalesEntityCalculateLineAmount
            || (!dwCalculateLineAmountFlight && !this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, LineAmount)))
            || (dwCalculateLineAmountFlight && !this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, LineAmount))
                && _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                && this.hasLineAmountDependentFieldsSet());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLineAmountDependentFieldsSet</Name>
				<Source><![CDATA[
    private boolean hasLineAmountDependentFieldsSet()
    {
        return this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, SalesPrice))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, RequestedSalesQuantity))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, LineDiscountAmount))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, LineDiscountPercentage))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, MultilineDiscountAmount))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, MultilineDiscountPercentage))
            || this.isFieldSet(fieldNum(SalesQuotationLineD365SalesEntity, FixedPriceCharges));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CDSIntegration</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesQuotationLineD365SalesEntityDevDoc</DeveloperDocumentation>
	<FormRef>SalesQuotationJumpRef</FormRef>
	<Label>@SCM:SalesQuotationLineD365SalesEntity</Label>
	<Tags>Sales quote</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>SalesQuotationLineD365SalesStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>D365SalesQuotationLines</PublicCollectionName>
	<PublicEntityName>D365SalesQuotationLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedOverdeliveryPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedUnderdeliveryPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AreTotalsCalculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCountryRegionISOCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDistrictName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressDunsNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLatitude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressLongitude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressPostBox</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStreet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressStreetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressTimeZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryAddressZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryBuildingCompliment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddressRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryTermsId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedPriceCharges</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormattedDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDeliveryAddressOrderSpecific</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDeliveryAddressPrivate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBatchNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultilineDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultilineDiscountPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductConfigurationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductVersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedInventoryStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedReceiptDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedSalesQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedShippingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPriceQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesProductCategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQuotationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQuotationPromisingMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesQuotationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingWarehouseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalChargesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalDiscountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesProductCategoryHierarchyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowedOverdeliveryPercentage</Name>
			<DataField>OverDeliveryPct</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowedUnderdeliveryPercentage</Name>
			<DataField>UnderDeliveryPct</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>AreTotalsCalculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>areTotalsComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesTotalsCalculated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>SalesQuotationTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountryRegionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountryRegionISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressCountyId</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressDunsNumber</Name>
			<DataField>DunsNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressName</Name>
			<Label>@SCM:DeliveryAddressName</Label>
			<DataField>DeliveryName</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressPostBox</Name>
			<DataField>PostBox</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStateId</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressStreetNumber</Name>
			<DataField>StreetNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidTo</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryValidFrom</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryBuildingCompliment</Name>
			<DataField>BuildingCompliment</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryPostalAddressRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>AddressRecId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryModeCode</Name>
			<DataField>DlvMode</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryTermsId</Name>
			<DataField>DlvTerm</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalItemNumber</Name>
			<Label>@SYS14552</Label>
			<DataField>ExternalItemId</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FixedPriceCharges</Name>
			<DataField>SalesMarkup</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormattedDeliveryAddress</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsDeliveryAddressOrderSpecific</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SCM:IsOneTimeDeliveryAddress</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>isDeliveryAddressOrderSpecificComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDeliveryAddressPrivate</Name>
			<Label>@SCM:IsDeliveryAddressPrivate</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ItemId</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchNumber</Name>
			<DataField>inventBatchId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSerialNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>inventSerialId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineAmount</Name>
			<DataField>LineAmount</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineCreationSequenceNumber</Name>
			<DataField>LineCreationSequenceNumber</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDescription</Name>
			<DataField>Name</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDiscountAmount</Name>
			<DataField>LineDisc</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineDiscountPercentage</Name>
			<DataField>LinePercent</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscountAmount</Name>
			<DataField>MultiLnDisc</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MultilineDiscountPercentage</Name>
			<DataField>MultiLnPercent</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductColorId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventColorId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductConfigurationId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>configId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProductName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>productNameComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResProductName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResDistinctProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductSizeId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductStyleId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductVersionId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InventVersionId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedInventoryStatusId</Name>
			<DataField>InventStatusId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedReceiptDate</Name>
			<DataField>ReceiptDateRequested</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedSalesQuantity</Name>
			<DataField>SalesQty</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequestedShippingDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ShippingDateRequested</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPrice</Name>
			<DataField>SalesPrice</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPriceQuantity</Name>
			<DataField>PriceUnit</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesProductCategoryName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesQuotationNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>QuotationId</DataField>
			<DataSource>SalesQuotationTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesQuotationPromisingMethod</Name>
			<DataField>DeliveryDateControlType</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesQuotationStatus</Name>
			<DataField>QuotationStatus</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesUnitSymbol</Name>
			<DataField>SalesUnit</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingSiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingWarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ShippingWarehouseLocationId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>wMSLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalTaxAmount</Name>
			<DataField>TotalTaxAmount</DataField>
			<DataSource>SalesQuotationLineCalculatedTotals</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalChargesAmount</Name>
			<DataField>TotalChargesAmount</DataField>
			<DataSource>SalesQuotationLineCalculatedTotals</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>totalDiscountAmountComputedColumnDefinition</ComputedFieldMethod>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventoryLotId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>InventTransId</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesProductCategoryHierarchyName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>SalesProductCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesQuotationLineCreationMethod</Name>
			<DataField>QuotationLineCreationMethod</DataField>
			<DataSource>SalesQuotationLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>SalesQuotationIntegrationCreationType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<IsComputedField>No</IsComputedField>
			<EnumType>SalesQuotationIntegrationCreationType</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LineCreationSequenceNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SalesQuotationNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesDocumentD365SalesEntitySpecificMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressDescription</MapField>
					<MapFieldTo>DeliveryAddressDescription</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLocationId</MapField>
					<MapFieldTo>DeliveryAddressLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FormattedDeliveryAddress</MapField>
					<MapFieldTo>FormattedDeliveryAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeliveryAddressOrderSpecific</MapField>
					<MapFieldTo>IsDeliveryAddressOrderSpecific</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>configId</MapField>
					<MapFieldTo>ProductConfigurationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventBatchId</MapField>
					<MapFieldTo>ItemBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventColorId</MapField>
					<MapFieldTo>ProductColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventGTDId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>ShippingWarehouseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>inventSerialId</MapField>
					<MapFieldTo>ItemSerialNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>ShippingSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSizeId</MapField>
					<MapFieldTo>ProductSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStatusId</MapField>
					<MapFieldTo>RequestedInventoryStatusId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventStyleId</MapField>
					<MapFieldTo>ProductStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventVersionId</MapField>
					<MapFieldTo>ProductVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LicensePlateId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSLocationId</MapField>
					<MapFieldTo>ShippingWarehouseLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>wMSPalletId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradeEntitySpecificDeliveryAddress</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCity</MapField>
					<MapFieldTo>DeliveryAddressCity</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountryRegionId</MapField>
					<MapFieldTo>DeliveryAddressCountryRegionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountryRegionISOCode</MapField>
					<MapFieldTo>DeliveryAddressCountryRegionISOCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressCountyId</MapField>
					<MapFieldTo>DeliveryAddressCountyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressDistrictName</MapField>
					<MapFieldTo>DeliveryAddressDistrictName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLatitude</MapField>
					<MapFieldTo>DeliveryAddressLatitude</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressLongitude</MapField>
					<MapFieldTo>DeliveryAddressLongitude</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressPostBox</MapField>
					<MapFieldTo>DeliveryAddressPostBox</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStateId</MapField>
					<MapFieldTo>DeliveryAddressStateId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStreet</MapField>
					<MapFieldTo>DeliveryAddressStreet</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressStreetNumber</MapField>
					<MapFieldTo>DeliveryAddressStreetNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddressZipCode</MapField>
					<MapFieldTo>DeliveryAddressZipCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryBuildingCompliment</MapField>
					<MapFieldTo>DeliveryBuildingCompliment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocationId</MapField>
					<MapFieldTo>DeliveryAddressLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeliveryAddressOrderSpecific</MapField>
					<MapFieldTo>IsDeliveryAddressOrderSpecific</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>SalesQuotationHeaderD365Sales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>SalesQuotationHeaderD365SalesEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>D365SalesQuotationHeader</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>D365SalesQuotationLines</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>SalesQuotationHeaderCDSEntity_SalesQuotationNumber</Name>
					<Field>SalesQuotationNumber</Field>
					<RelatedField>SalesQuotationNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>SalesQuotationLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>SalesQuotationLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>PCClass</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PCClass</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResCategory</Name>
								<Field>SalesCategory</Field>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<JoinRelationName>EcoResCategory</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDim</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDim</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<JoinRelationName>InventDim</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsPostalAddressBaseEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsPostalAddressBaseEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DeliveryPostalAddress</Field>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<RelatedField>AddressRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesQuotationLineCalculatedTotals</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesQuotationLineCalculatedTotals</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InventTransId</Field>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<RelatedField>InventTransId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesQuotationTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>SalesQuotationTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>QuotationId</Field>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<RelatedField>QuotationId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventDistinctProduct</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>InventDistinctProduct</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResDistinctProduct</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResDistinctProduct</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResProductSystemLanguage</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResProductSystemLanguage</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>Product</Field>
												<JoinDataSource>InventDistinctProduct</JoinDataSource>
												<RelatedField>Product</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResProductTranslationToSystemLanguage</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResProductTranslation</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>EcoResDistinctProduct</JoinDataSource>
												<RelatedField>Product</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation2</Name>
												<Field>SystemLanguageId</Field>
												<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
												<RelatedField>LanguageId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>InventTable</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>InventTable</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResProductMaster</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>EcoResProductMaster</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>Product</Field>
														<JoinDataSource>InventTable</JoinDataSource>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResProductMasterTranslationToSystemLanguage</Name>
												<DynamicFields>Yes</DynamicFields>
												<IsReadOnly>Yes</IsReadOnly>
												<Table>EcoResProductTranslation</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>RecId</Field>
														<JoinDataSource>EcoResProductMaster</JoinDataSource>
														<RelatedField>Product</RelatedField>
													</AxQuerySimpleDataSourceRelation>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation2</Name>
														<Field>SystemLanguageId</Field>
														<JoinDataSource>EcoResProductSystemLanguage</JoinDataSource>
														<RelatedField>LanguageId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>ItemId</Field>
												<JoinDataSource>InventdistinctProduct</JoinDataSource>
												<RelatedField>ItemId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>EcoResDistinctProduct_EcoResDistinctProductVariant</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResDistinctProductVariant</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Product</Field>
										<JoinDataSource>InventDistinctProduct</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>SalesQuotationLine</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>InventColorId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventColorId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy1</Name>
								<Field>InventSizeId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventSizeId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy2</Name>
								<Field>InventStyleId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventStyleId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy3</Name>
								<Field>configId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>ConfigId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation_ProductVersionId</Name>
								<Field>InventVersionId</Field>
								<JoinDataSource>InventDim</JoinDataSource>
								<RelatedField>InventVersionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesProductCategoryHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategoryHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CategoryHierarchy</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>QuotationType</Name>
						<Field>QuotationType</Field>
						<Status>Hidden</Status>
						<Value>Sales</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>