<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentProposedAdjustmentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GeneralLedgerAdjustmentProposedAdjustmentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(GeneralLedgerAdjustmentProposedAdjustmentEntity, GeneralLedgerAdjustmentImportInfo))
        {
            GeneralLedgerAdjustmentImportInfo generalLedgerAdjustmentImportInfo;

            // update importedDateTime and company in importInfo record created during import
            update_recordset generalLedgerAdjustmentImportInfo
                setting CompanyId = this.VoucherDataAreaId,
                    ImportedOnDateTime = DateTimeUtil::utcNow()
                where generalLedgerAdjustmentImportInfo.CompanyId == ''
                && generalLedgerAdjustmentImportInfo.ImportedOnDateTime == DateTimeUtil::minValue()
                && generalLedgerAdjustmentImportInfo.ImportName == this.ImportName;
        }
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = this.validateIfImportNameIsUnique(this.ImportName)
            && this.validateVoucherInformation()
            && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVoucherInformation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateVoucherInformation()
    {
        SubledgerJournalEntry subledgerJournalEntry;
        subledgerJournalEntry = SubledgerJournalEntry::find(this.SubledgerJournalEntry);

        // validate voucher number being imported
        if(this.Voucher != subledgerJournalEntry.Voucher)
        {
            return checkFailed(strFmt("@GeneralLedgerAdjustment:AdjustmentEntityVoucherValidationFailed"));
        }

        // validate data area id
        if(this.VoucherDataAreaId != subledgerJournalEntry.VoucherDataAreaId)
        {
            return checkFailed(strFmt("@GeneralLedgerAdjustment:AdjustmentEntityVoucherDataAreaValidationFailed"));
        }

        AccountingEvent accountingEvent;
        accountingEvent = AccountingEvent::find(subledgerJournalEntry.AccountingEvent);

        // validate accouting date
        if(this.AccountingDate != accountingEvent.AccountingDate)
        {
            return checkFailed(strFmt("@GeneralLedgerAdjustment:AdjustmentEntityAccountingDateValidationFailed"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfImportNameIsUnique</Name>
				<Source><![CDATA[
    internal boolean validateIfImportNameIsUnique(str _importName)
    {
        str UniqueNameForCache = GeneralLedgerAdjustmentConstants::UniqueNameForCacheUsedForImport;
        str KeyForCacheContainer = GeneralLedgerAdjustmentConstants::KeyForCacheContainerUsedForImport;
        container importNamesBeingImported;
        SysGlobalCache globalCache = classfactory.globalCache();

        if(globalCache.isSet(UniqueNameForCache, KeyForCacheContainer))
        {
            importNamesBeingImported = globalCache.get(UniqueNameForCache, KeyForCacheContainer);
        }
        else
        {
            GeneralLedgerAdjustmentImportInfo generalLedgerAdjustmentImportInfo;
            while select 
                ImportName 
                from generalLedgerAdjustmentImportInfo
                group by generalLedgerAdjustmentImportInfo.ImportName
            {
                importNamesBeingImported += [generalLedgerAdjustmentImportInfo.ImportName];
            }

            globalCache.set(UniqueNameForCache, KeyForCacheContainer, importNamesBeingImported);
        }

        if(conFind(importNamesBeingImported, _importName))
        {
            return checkFailed(strFmt("@GeneralLedgerAdjustment:ImportNameValidationFailed"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    [Hookable(false)]
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        // Check if import job has finished and remove unique names from cache
        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            str UniqueNameForCache = GeneralLedgerAdjustmentConstants::UniqueNameForCacheUsedForImport;
            str KeyForCacheContainer = GeneralLedgerAdjustmentConstants::KeyForCacheContainerUsedForImport;
            SysGlobalCache globalCache = classfactory.globalCache();

            if(globalCache.isSet(UniqueNameForCache, KeyForCacheContainer))
            {
                globalCache.remove(UniqueNameForCache, KeyForCacheContainer);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<Label>@GeneralLedgerAdjustment:GeneralLedgerAdjustmentProposedAdjustmentEntityLabel</Label>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>GeneralLedgerAdjustmentStaging</DataManagementStagingTable>
	<PrimaryCompanyContext>VoucherDataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ImportName</Name>
			<DataField>ImportName</DataField>
			<DataSource>GeneralLedgerAdjustmentImportInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VoucherDataAreaId</Name>
			<DataField>VoucherDataAreaId</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingDate</Name>
			<DataField>AccountingDate</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>VoucherDescription</Name>
			<DataField>VoucherDescription</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentType</Name>
			<DataField>DocumentType</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingType</Name>
			<DataField>PostingType</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCorrection</Name>
			<DataField>IsCorrection</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Side</Name>
			<DataField>Side</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmountPosted</Name>
			<DataField>TransactionCurrencyAmountPosted</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmountRecommended</Name>
			<DataField>TransactionCurrencyAmountRecommended</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrency</Name>
			<DataField>TransactionCurrency</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyRecommendedAdjustment</Name>
			<DataField>TransactionCurrencyRecommendedAdjustment</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrencyExchangeRate</Name>
			<DataField>AccountingCurrencyExchangeRate</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchangeRate</Name>
			<DataField>ReportingCurrencyExchangeRate</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrencyAmountPosted</Name>
			<DataField>AccountingCurrencyAmountPosted</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountingCurrencyAmountRecommended</Name>
			<DataField>AccountingCurrencyAmountRecommended</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyAmountPosted</Name>
			<DataField>ReportingCurrencyAmountPosted</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyAmountRecommended</Name>
			<DataField>ReportingCurrencyAmountRecommended</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubledgerJournalEntry</Name>
			<DataField>SubledgerJournalEntry</DataField>
			<DataSource>GeneralLedgerAdjustmentProposedAdjustment</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ImportName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SubledgerJournalEntry</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Voucher</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountingDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>VoucherDataAreaId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LedgerDimension</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Side</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>IsCorrection</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PostingType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransactionCurrency</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransactionCurrencyAmountRecommended</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AccountingCurrencyAmountRecommended</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ReportingCurrencyAmountRecommended</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransactionCurrencyRecommendedAdjustment</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerDimensionCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>GeneralLedgerAdjustmentProposedAdjustment</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>GeneralLedgerAdjustmentProposedAdjustment</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>GeneralLedgerAdjustmentImportInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>GeneralLedgerAdjustmentImportInfo</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ImportInfoRecId</Field>
								<JoinDataSource>GeneralLedgerAdjustmentProposedAdjustment</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>