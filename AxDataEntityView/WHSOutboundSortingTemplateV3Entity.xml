<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortingTemplateV3Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOutboundSortingTemplateV3Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(WHSOutboundSortingTemplateV3Entity, WHSOutboundSortTemplate):
                this.initWarehouseSelection();
                WHSDataEntityHelper::markEmptyDataEntityFieldAsNotSetForUpdate(_entityCtx, _dataSourceCtx, fieldNum(WHSOutboundSortingTemplateV3Entity, TemplateQuery), fieldNum(WHSOutboundSortTemplate, PackedQueryRun));
                WHSDataEntityHelper::markEmptyDataEntityFieldAsNotSetForUpdate(_entityCtx, _dataSourceCtx, fieldNum(WHSOutboundSortingTemplateV3Entity, TemplateQueryJson), fieldNum(WHSOutboundSortTemplate, PackedQueryRun));
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if (this.TemplateQuery)
        {
            QueryRun queryRun = new QueryRun(this.TemplateQuery);
            this.TemplateQueryJson = new SysQuery(queryRun.query()).toJson();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSOutboundSortingTemplateV3Entity, WHSOutboundSortTemplate))
        {
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Insert);

            if (this.TemplateQueryJson)
            {
                this.validateQueryStructure(_dataSourceCtx);
            }
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(WHSOutboundSortingTemplateV3Entity, WHSOutboundSortTemplate))
        {
            this.initializeQuery(_dataSourceCtx, DataEntityDatabaseOperation::Update);

            if (this.TemplateQueryJson)
            {
                this.validateQueryStructure(_dataSourceCtx);
            }
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    private void initializeQuery(DataEntityDataSourceRuntimeContext _dataSourceCtx, DataEntityDatabaseOperation _databaseOperation)
    {
        WHSOutboundSortTemplate outboundSortTemplate = _dataSourceCtx.getBuffer();

        switch (_databaseOperation)
        {
            case DataEntityDatabaseOperation::Insert:
                if (this.TemplateQueryJson)
                {
                    this.initializeQueryFromJson(outboundSortTemplate);
                }
                else
                {
                    this.initializeDefaultQuery(outboundSortTemplate);
                }
                break;
            case DataEntityDatabaseOperation::Update:
                if (this.TemplateQueryJson)
                {
                    this.initializeQueryFromJson(outboundSortTemplate);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryFromJson</Name>
				<Source><![CDATA[
    private void initializeQueryFromJson(WHSOutboundSortTemplate _outboundSortTemplate)
    {
        Query deserializedQuery = SysQuery::newFromJson(this.TemplateQueryJson);
        QueryRun queryRun = new QueryRun(deserializedQuery);
        _outboundSortTemplate.PackedQueryRun = queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDefaultQuery</Name>
				<Source><![CDATA[
    private void initializeDefaultQuery(WHSOutboundSortTemplate _outboundSortTemplate)
    {
        _outboundSortTemplate.PackedQueryRun = _outboundSortTemplate.defaultPackedQueryRun().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQueryStructure</Name>
				<Source><![CDATA[
    private void validateQueryStructure(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Query actualQuery = SysQuery::newFromJson(this.TemplateQueryJson);
        Query expectedQuery = this.defaultExpectedQuery(_dataSourceCtx.getBuffer());

        if (!WHSQueryInitializer::initializeDataSource(expectedQuery.dataSourceNo(1), actualQuery.dataSourceNo(1)))
        {
            _dataSourceCtx.throwValidateWriteFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExpectedQuery</Name>
				<Source><![CDATA[
    private Query defaultExpectedQuery(WHSOutboundSortTemplate _outboundSortTemplate)
    {
        WHSOutboundSortTemplate outboundSortTemplate;

        buf2Buf(_outboundSortTemplate, outboundSortTemplate);

        outboundSortTemplate.PackedQueryRun = conNull();

        return outboundSortTemplate.defaultPackedQueryRun().query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWarehouseSelection</Name>
				<Source><![CDATA[
    private void initWarehouseSelection()
    {
        if (!this.isFieldSet(fieldNum(WHSOutboundSortingTemplateV3Entity, WarehouseSelection)))
        {
            if (this.WarehouseId 
                && !this.WarehouseGroupId)
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::Warehouse;
            }
            else if (this.WarehouseGroupId
                && !this.WarehouseId)
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::Group;
            }
            else
            {
                this.WarehouseSelection = WhsWarehouseGroupAll::All;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSetting</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSetting()
    {
        if (!this.isFieldSet(fieldNum(WHSOutboundSortingTemplateV3Entity, WarehouseSelection)))
        {
            if (this.WarehouseId && this.WarehouseGroupId)
            {
                return checkFailed(strFmt("@WAX:WHSOutbountSortTemplateWarehouseGroupIdMentionedWithoutWhsGrpSelection",
                    fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseId),
                    fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseLocationId),
                    fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseGroupId)));
            }

            return true;
        }

        boolean ret = this.validateWarehouseGroupSettingAll();
        ret = ret && this.validateWarehouseGroupSettingGroup();
        return ret && this.validateWarehouseGroupSettingWarehouse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingAll</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingAll()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::All
            && (this.WarehouseId || this.WarehouseGroupId || this.WarehouseLocationId))
        {
            return checkFailed(strFmt("@WAX:WHSOutboundSortTemplateWarehouseLocationOrWarehouseGroupIdMentioned",
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseLocationId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseGroupId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingGroup</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingGroup()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::Group
            && (this.WarehouseId || this.WarehouseLocationId))
        {
            return checkFailed(strFmt("@WAX:WHSOutboundSortTemplateWarehouseMentioned",
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseLocationId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseGroupSettingWarehouse</Name>
				<Source><![CDATA[
    private boolean validateWarehouseGroupSettingWarehouse()
    {
        if (this.WarehouseSelection == WhsWarehouseGroupAll::Warehouse
            && this.WarehouseGroupId)
        {
            return checkFailed(strFmt("@WAX:WHSOutboundSortTemplateWarehouseGroupIdMentioned",
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseGroupId),
                fieldPName(WHSOutboundSortingTemplateV3Entity, WarehouseSelection),
                enum2Symbol(enumNum(WhsWarehouseGroupAll), this.WarehouseSelection)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        return ret && this.validateWarehouseGroupSetting();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<FormRef>WHSOutboundSortTemplate</FormRef>
	<Label>@WAX:WHSOutboundSortingTemplateV3EntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>WHSOutboundSortingTemplateV3Staging</DataManagementStagingTable>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillPositionCloseCreateWork</Name>
			<DataField>CreateWorkOnPositionClose</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PositionAssignmentMethod</Name>
			<DataField>SortPositionAssignment</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateDescription</Name>
			<DataField>Description</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseLocationId</Name>
			<DataField>WMSLocationId</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateQuery</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PackedQueryRun</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SortingTemplateType</Name>
			<DataField>SortTemplateType</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TemplateId</Name>
			<DataField>SortTemplateId</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SortingVerificationMethod</Name>
			<DataField>SortVerification</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PositionAssignmentCriteria</Name>
			<DataField>AssignSortPositionCriteria</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillSortingCompletionClosePosition</Name>
			<DataField>AutoCloseSortPosition</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WillPositionCloseCreateContainer</Name>
			<DataField>AutoPackSortPosition</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NumberOfSortingPositions</Name>
			<DataField>NumberOfSortPositions</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehousePackingProfileId</Name>
			<DataField>PackProfileId</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SortingPositionPrefix</Name>
			<DataField>SortPositionPrefix</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WaveStepCode</Name>
			<DataField>WaveStepCode</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TemplateQueryJson</Name>
			<Label>@WAX:OutboundSortTemplateQueryJson</Label>
			<IsComputedField>No</IsComputedField>
			<StringSize>-1</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseSelection</Name>
			<DataField>WarehouseGroupAll</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WarehouseGroupId</Name>
			<DataField>WarehouseGroupId</DataField>
			<DataSource>WHSOutboundSortTemplate</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TemplateId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSOutboundSortTemplate</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSOutboundSortTemplate</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>