<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvPolicyViolationsCacheEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvPolicyViolationsCacheEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertHeaderExpNumberToNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key from the target table defined in field Header
    /// </summary>
    private static str convertHeaderExpNumberToNaturalKey()
    {
        const str selectStatementBase = '(SELECT %1 FROM %2 a WHERE a.RECID = %3)';
        DictTable dictTableExpTable = new DictTable(tableNum(TrvExpTable));

        str headerFieldValue = SysComputedColumn::returnField(tablestr(TrvPolicyViolationsCacheEntity),
                                            dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, TrvPolicyViolationsCache),
                                            fieldStr(TrvPolicyViolationsCache, Header));
        str selectStatementExpTable = strFmt(selectStatementBase,
                                            dictTableExpTable.fieldName(fieldNum(TrvExpTable, ExpNumber), DbBackend::Sql),
                                            dictTableExpTable.Name(DbBackend::Sql),
                                            headerFieldValue);

        Map sqlStmt = new Map(Types::String, Types::String);
        sqlStmt.insert(int2Str(enum2int(SysPolicyTypeEnum::TrvExpensePolicy)), selectStatementExpTable);

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(TrvPolicyViolationsCacheEntity),
                                                tableStr(TrvPolicyViolationsCache),
                                                fieldStr(TrvPolicyViolationsCache, PolicyType)),
            sqlStmt,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertHeaderLegalEntityToNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key from the target table defined in field HeaderLegalEntity
    /// </summary>
    private static str convertHeaderLegalEntityToNaturalKey()
    {
        const str selectStatementBase = '(SELECT b.DATAAREA FROM %1 a JOIN %2 b ON a.%3 = b.RECID WHERE a.RECID = %4)';
        DictTable dictTableExpTable = new DictTable(tableNum(TrvExpTable));
        DictTable dictTablePartyTable = new DictTable(tableNum(DirPartyTable));

        str headerFieldValue = SysComputedColumn::returnField(tablestr(TrvPolicyViolationsCacheEntity),
                                            dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, TrvPolicyViolationsCache),
                                            fieldStr(TrvPolicyViolationsCache, Header));
        str selectStatementExpTable = strFmt(selectStatementBase,
                                            dictTableExpTable.Name(DbBackend::Sql),
                                            dictTablePartyTable.Name(DbBackend::Sql),
                                            dictTableExpTable.fieldName(fieldNum(TrvExpTable, LegalEntity), DbBackend::Sql),
                                            headerFieldValue);

        Map sqlStmt = new Map(Types::String, Types::String);
        sqlStmt.insert(int2Str(enum2int(SysPolicyTypeEnum::TrvExpensePolicy)), selectStatementExpTable);

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(TrvPolicyViolationsCacheEntity),
                                                tableStr(TrvPolicyViolationsCache),
                                                fieldStr(TrvPolicyViolationsCache, PolicyType)),
            sqlStmt,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLineToNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key from the target table defined in field Line
    /// </summary>
    private static str convertLineToNaturalKey()
    {
        str fieldName = SysComputedColumn::returnField(tablestr(TrvPolicyViolationsCacheEntity),
                                            dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, TrvPolicyViolationsCache),
                                            fieldStr(TrvPolicyViolationsCache, Line));
        return TrvPolicyViolationsCacheEntity::GenerateSqlForNaturalKey(fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertParentToNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key from the target table defined in field Parent
    /// </summary>
    private static str convertParentToNaturalKey()
    {
        str fieldName = SysComputedColumn::returnField(tablestr(TrvPolicyViolationsCacheEntity),
                                            dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, TrvPolicyViolationsCache),
                                            fieldStr(TrvPolicyViolationsCache, ParentRecId));
        return TrvPolicyViolationsCacheEntity::GenerateSqlForNaturalKey(fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSqlForNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a sql statement to return the value of the natural key
    /// </summary>
    /// <param name = "_sourceRecIdField">The SQL identifier for the field containing a line recid such as "T1.LINE"</param>
    /// <returns>SQL statement that will return the natural key for the line</returns>
    private static str generateSqlForNaturalKey(str _sourceRecIdField)
    {
        const str selectStatementBase = '(SELECT %1 FROM %2 a WHERE a.RECID = %3)';
        DictTable dictTableExpTrans = new DictTable(tableNum(TrvExpTrans));


        str selectStatementExpTrans = strFmt(selectStatementBase,
                                            dictTableExpTrans.fieldName(fieldNum(TrvExpTrans, ExpTransNumber), DbBackend::Sql),
                                            dictTableExpTrans.name(DbBackend::Sql),
                                            _sourceRecIdField);

        Map sqlStmt = new Map(Types::String, Types::String);
        sqlStmt.insert(int2Str(enum2int(SysPolicyTypeEnum::TrvExpensePolicy)), selectStatementExpTrans);

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(TrvPolicyViolationsCacheEntity),
                                                tableStr(TrvPolicyViolationsCache),
                                                fieldStr(TrvPolicyViolationsCache, policyType)),
            sqlStmt,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, TrvPolicyViolationsCache))
        {
            TrvPolicyViolationsCache buffer = _dataSourceCtx.getBuffer();

            // Convert Header natural key to recid so that it can be persisted
            if (this.HeaderId && this.HeaderLegalEntity)
            {
                switch (this.PolicyType)
                {
                    case SysPolicyTypeEnum::TrvExpensePolicy:
                        TrvExpTable trvExpTable;
                        select firstonly RecId
                            from trvExpTable
                            where trvExpTable.ExpNumber ==  this.HeaderId
                                && trvExpTable.LegalEntity == CompanyInfo::findByCompany_IN(this.HeaderLegalEntity).RecId;
                        buffer.Header = TrvExpTable.RecId;
                        break;
                    default:
                        throw error("@SYS345511");                        
                }
            }

            // Convert Line natural key to recid so that it can be persisted
            if (this.LineId)
            {
                switch (this.PolicyType)
                {
                    case SysPolicyTypeEnum::TrvExpensePolicy:
                        buffer.Line = TrvExpTrans::findByTransactionNumber(this.LineId).RecId;
                        break;
                    default:
                        throw error("@SYS345511");                        
                }
            }

            //
            // Convert Parent natural key to recid so that it can be persisted
            // Only header values for ExpensePolicy are valid
            //
            if (this.ParentId && this.PolicyType == SysPolicyTypeEnum::TrvExpensePolicy)
            {
                buffer.ParentRecId = TrvExpTrans::findByTransactionNumber(this.ParentId).RecId;
            }
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, SysPolicy))
        {
            SysPolicy buffer = _dataSourceCtx.getBuffer();
            buffer.PolicyType = SysPolicyType::findByEnum(this.PolicyType).RecId;
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(TrvPolicyViolationsCacheEntity, SysPolicyRuleType))
        {
            SysPolicyRuleType buffer = _dataSourceCtx.getBuffer();
            buffer.PolicyType = SysPolicyType::findByEnum(this.PolicyType).RecId;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<Label>@SYS111962</Label>
	<Tags>Policies</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TrvPolicyViolationsCacheStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>TravelAndExpense</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PolicyViolationsCache</PublicCollectionName>
	<PublicEntityName>PolicyViolationsCache</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ViolationsCacheId</Name>
			<DataField>ViolationsCacheId</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Header</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Header</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>HeaderId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS314510</Label>
			<ComputedFieldMethod>convertHeaderExpNumberToNaturalKey</ComputedFieldMethod>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>HeaderLegalEntity</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>convertHeaderLegalEntityToNaturalKey</ComputedFieldMethod>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Line</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@SYS15449</Label>
			<DataField>Line</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>LineId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>convertLineToNaturalKey</ComputedFieldMethod>
			<StringSize>20</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ParentRecId</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ParentId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Expense:Parent</Label>
			<ComputedFieldMethod>convertParentToNaturalKey</ComputedFieldMethod>
			<StringSize>30</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyType</Name>
			<DataField>PolicyType</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyViolationLevel</Name>
			<DataField>PolicyViolationLevel</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Rule</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Rule</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Policy</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Policy</DataField>
			<DataSource>TrvPolicyRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyName</Name>
			<DataField>Name</DataField>
			<DataSource>SysPolicy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyPolicyType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PolicyType</DataField>
			<DataSource>SysPolicy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyRuleType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PolicyRuleType</DataField>
			<DataSource>TrvPolicyRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyRuleTypeName</Name>
			<DataField>Name</DataField>
			<DataSource>SysPolicyRuleType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyRuleTypePolicyType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PolicyType</DataField>
			<DataSource>SysPolicyRuleType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PolicyRuleValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>TrvPolicyRule</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SaveDateTime</Name>
			<DataField>SaveDateTime</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ViolationDate</Name>
			<DataField>ViolationDate</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Worker</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Worker</DataField>
			<DataSource>TrvPolicyViolationsCache</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonnelNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>TrvHcmWorker</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ViolationsCacheId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TrvPolicyViolationsCache</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TrvPolicyViolationsCache</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvHcmWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>TrvHcmWorker</Name>
								<JoinRelationName>Violates</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TrvPolicyRule</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>TrvPolicyRule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SysPolicy</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>SysPolicy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Policy</Field>
										<JoinDataSource>TrvPolicyRule</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SysPolicyRuleType</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>SysPolicyRuleType</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>SysPolicyRuleType_SysPolicySourceDocumentRuleType</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>SysPolicySourceDocumentRuleType</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PolicyRuleType</Field>
										<JoinDataSource>TrvPolicyRule</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Rule</Field>
								<JoinDataSource>TrvPolicyViolationsCache</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>