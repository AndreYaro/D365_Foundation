<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectTransferPriceV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectTransferPriceV2Entity extends common
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSerializedOfficeAppCustomLookupListResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of values.
    /// </summary>
    /// <param name = "_valueList">
    /// The list of values.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of values.
    /// </returns>
    public static str getSerializedOfficeAppCustomLookupListResult(List _valueList)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();

        if (_valueList)
        {
            int counter = 1;
            ListEnumerator values = _valueList.getEnumerator();

            while (values.moveNext())
            {
                result.items().value(counter, values.current());
                counter++;
            }
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom company lookup serialized string for the Company field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of Companies.</returns>
    [
        SysODataActionAttribute("ProjProjectTransferPriceV2EntityCompanyFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("BorrowingLegalEntity")
    ]
    public static str companyCustomLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(ProjProjectTransferPriceV2Entity), _fields);

        List companies = new List(Types::String);

        CompanyInfo companyInfo;

        while select DataArea from companyInfo order by DataArea
        {
            companies.addEnd(companyInfo.DataArea);
        }

        return ProjProjectTransferPriceV2Entity::getSerializedOfficeAppCustomLookupListResult(companies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectIdCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom project lookup serialized string for the Project field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of Projects.</returns>
    [
        SysODataActionAttribute("ProjProjectTransferPriceV2EntityProjectIdFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("ProjectId")
    ]
    public static str projectIdCustomLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(ProjProjectTransferPriceV2Entity), _fields);
        str companyId = fieldMap.lookup(fieldStr(ProjProjectTransferPriceV2Entity, BorrowingLegalEntity));

        if (!companyId)
        {
            companyId = curext();
        }

        List projIds = new List(Types::String);

        changecompany(companyId)
        {
            ProjTable projTable;

            while select ProjId from projTable
                order by projTable.ProjId
            {
                projIds.addEnd(projTable.ProjId);
            }
        }

        return ProjProjectTransferPriceV2Entity::getSerializedOfficeAppCustomLookupListResult(projIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryIdCustomLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a custom category lookup serialized string for the CategoryId field.
    /// </summary>
    /// <param name = "_fields">Collections of field values from the selected record in Excel.</param>
    /// <returns>A serialized string with a list of Project Categories.</returns>
    [
        SysODataActionAttribute("ProjProjectTransferPriceV2EntityCategoryIdFieldCustomLookup", false),
        SysODataCollectionAttribute("_fields", Types::String),
        SysODataFieldLookupAttribute("CategoryId")
    ]
    public static str categoryIdCustomLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(ProjProjectTransferPriceV2Entity), _fields);
        str companyId = fieldMap.lookup(fieldStr(ProjProjectTransferPriceV2Entity, BorrowingLegalEntity));

        if (!companyId)
        {
            companyId = curext();
        }

        List categoryIds = new List(Types::String);

        changecompany(companyId)
        {
            ProjCategory projCategory;

            while select CategoryId from projCategory where projCategory.Active == NoYes::Yes
            {
                categoryIds.addEnd(projCategory.CategoryId);
            }
        }

        return ProjProjectTransferPriceV2Entity::getSerializedOfficeAppCustomLookupListResult(categoryIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roleIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// RoleIdValue is bound to an Role Id unmapped field
    /// </summary>
    /// <returns>
    /// A string that represents a Role Id from <c>PSASchedRole</c>
    /// </returns>
    public static str roleIdValue()
    {
        str sqlStr = @"ISNULL((SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5),'')";

        str roleIDQuery = strFmt(sqlStr,
                                        fieldStr(PSASchedRole, RoleId),
                                        tableStr(PSASchedRole),
                                        fieldStr(PSASchedRole, RecId),
                                        SysComputedColumn::returnField(
                                            tablestr(ProjProjectTransferPriceV2Entity),
                                            dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                            fieldstr(ProjTransferPrice, ResourceCategory)),
                                        SysComputedColumn::returnField(
                                            tablestr(ProjProjectTransferPriceV2Entity),
                                            dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                            fieldstr(ProjTransferPrice, Partition))
                                        );

        return roleIDQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// ResourceIdValue is bound to an ResourceId unmapped field
    /// </summary>
    /// <returns>
    /// A string that represents a resource Id from ResourceView
    /// </returns>
    public static str resourceIdValue()
    {
        str sqlStr = @"ISNULL((SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5),'')";

        str resourceIdQuery = strFmt(sqlStr,
                                        fieldStr(ResourceView, ResourceId),
                                        tableStr(ResourceView),
                                        fieldStr(ResourceView, RecId),
                                        SysComputedColumn::returnField(
                                            tablestr(ProjProjectTransferPriceV2Entity),
                                            dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                            fieldstr(ProjTransferPrice, Resource)),
                                        SysComputedColumn::returnField(
                                            tablestr(ProjProjectTransferPriceV2Entity),
                                            dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                            fieldstr(ProjTransferPrice, Partition))
                                        );

        return resourceIdQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Contract ID SQL query.
    /// </summary>
    /// <returns>Contract ID sql query.</returns>
    /// <remarks>This is used instead of table relation due to Contract ID is referenced by borrowing entity legal entity.</remarks>
    public static str contractIdValue()
    {
        str sqlStr = @"ISNULL((SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5),'')";

        str contractIdQuery = strFmt(sqlStr,
                            fieldStr(ProjInvoiceTable, ProjInvoiceProjId),
                            tableStr(ProjInvoiceTable),
                            fieldStr(ProjInvoiceTable, RecId),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, ProjInvoiceTable)),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, Partition))
                            );


        return contractIdQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project ID SQL query.
    /// </summary>
    /// <returns>Project ID sql query.</returns>
    /// <remarks>This is used instead of table relation due to project ID is referenced by borrowing entity legal entity.</remarks>
    public static str projIdValue()
    {
        str sqlStr = @"ISNULL((SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5),'')";

        str projIdQuery = strFmt(sqlStr,
                            fieldStr(ProjTable, ProjId),
                            tableStr(ProjTable),
                            fieldStr(ProjTable, RecId),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, ProjTable)),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, Partition))
                            );


        return projIdQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the project category ID SQL query.
    /// </summary>
    /// <returns>Project category ID SQL query.</returns>
    /// <remarks>This is used instead of table relation due to category ID is referenced by borrowing entity legal entity.</remarks>
    public static str categoryIdValue()
    {
        str sqlStr = @"ISNULL((SELECT %1 FROM %2 WHERE %3 = %4 AND PARTITION = %5),'')";

        str categoryIdQuery = strFmt(sqlStr,
                            fieldStr(ProjCategory, CategoryId),
                            tableStr(ProjCategory),
                            fieldStr(ProjCategory, RecId),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, ProjCategory)),
                            SysComputedColumn::returnField(
                                tablestr(ProjProjectTransferPriceV2Entity),
                                dataEntityDataSourceStr(ProjProjectTransferPriceV2Entity, ProjTransferPrice),
                                fieldstr(ProjTransferPrice, Partition))
                            );
        
        return categoryIdQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataentitydatasourcestr(ProjProjectTransferPriceV2Entity, ProjTransferPrice))
        {
            ProjTransferPrice transferPrice = _dataSourceCtx.getBuffer();

            if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
            {
                if (this.BorrowingLegalEntity)                    
                {
                    if (this.ProjectContractId)
                    {
                        ProjInvoiceTable projInvoiceTable;

                        select firstonly crosscompany RecId from projInvoiceTable
                            where projInvoiceTable.ProjInvoiceProjId == this.ProjectContractId
                                && projInvoiceTable.DataAreaId == this.BorrowingLegalEntity;

                        if (projInvoiceTable.RecID)
                        {
                            transferPrice.ProjInvoiceTable = projInvoiceTable.RecID;
                        }
                    }

                    if( this.ProjectID)
                    {
                        ProjTable projTable;

                        select firstonly crosscompany  RecId from projTable
                            where projTable.ProjId == this.ProjectID
                                && projTable.DataAreaId == this.BorrowingLegalEntity;

                        transferPrice.ProjTable = projTable.RecID;
                    }

                    if (this.CategoryId)
                    {
                        ProjCategory projCategory;

                        select firstonly crosscompany RecId from projCategory
                            where projCategory.CategoryId == this.CategoryId
                                && projCategory.DataAreaId == this.BorrowingLegalEntity;

                        transferPrice.ProjCategory = projCategory.RecID;
                    }
                }

                if (this.ResourceId)
                {
                    ResourceView resourceView;

                    select RecId from resourceView where resourceView.ResourceId == this.ResourceId && resourceView.ResourceCompanyId == curExt();

                    transferPrice.Resource = resourceView.RecId;
                }

                if (this.RoleId)
                {
                    ResourceCategoryView resourceCategoryView;

                    select firstonly RecId from resourceCategoryView
                        where resourceCategoryView.CategoryId == this.RoleId &&
                            resourceCategoryView.DataAreaId == curExt();

                    transferPrice.ResourceCategory = resourceCategoryView.RecId;
                }
            }
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceV2Entity, Resource), true);
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceV2Entity, ProjTable), true);
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceV2Entity, ProjCategory), true);
        this.skipDataSourceValidateField(fieldNum(ProjProjectTransferPriceV2Entity, ProjectContractId), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FormRef>ProjTransferPricingMenuItem</FormRef>
	<Label>@Proj:ProjectTransferPriceV2</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjProjectTransferPriceV2Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>TransferPrices</PublicCollectionName>
	<PublicEntityName>TransferPrice</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EffectiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Pricing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesCurrency</Name>
			<DataField>Currency</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransferPriceModel</Name>
			<DataField>PriceModel</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjCategory</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ProjCategory</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BorrowingLegalEntity</Name>
			<DataField>ProjectDataAreaId</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjInvoiceTable</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>Contract</Label>
			<DataField>ProjInvoiceTable</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjTable</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ProjTable</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Resource</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Resource</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCategory</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EffectiveDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Pricing</Name>
			<DataField>TransferPrice</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionType</Name>
			<DataField>TransType</DataField>
			<DataSource>ProjTransferPrice</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ResourceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Res:ResourceId</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>resourceIdValue</ComputedFieldMethod>
			<ExtendedDataType>ResResourceID</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProjectId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS110827</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>projIdValue</ComputedFieldMethod>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Proj:Category</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>categoryIdValue</ComputedFieldMethod>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProjectContractId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS330288</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>contractIdValue</ComputedFieldMethod>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>RoleId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Res:RoleId</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>roleIdValue</ComputedFieldMethod>
			<ExtendedDataType>PSASchedRoleId</ExtendedDataType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ResourceId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BorrowingLegalEntity</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProjectId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CategoryId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>EffectiveDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>SalesCurrency</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>TransactionType</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ProjectContractId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>RoleId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ResResourceDataEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Resources</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TransferPriceForResource</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>ResResourceDataEntity_ResourceId</Name>
					<Field>ResourceId</Field>
					<RelatedField>ResourceId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>ResResourceDataEntity_ResourceCompanyId</Name>
					<Field>DataAreaId</Field>
					<RelatedField>ResourceCompanyId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Currencies</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TransferPriceCurrency</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>SalesCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ResourceRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>ResResourceCategoryDataEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ResourceRoles</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TransferPrice</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>ResResourceCategoryDataEntity_RoleId</Name>
					<Field>RoleId</Field>
					<RelatedField>RoleId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTransferPrice</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTransferPrice</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>