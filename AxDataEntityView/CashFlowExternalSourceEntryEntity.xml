<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowExternalSourceEntryEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CashFlowExternalSourceEntryEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupArea</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("CashFlowExternalSourceEntryEntityExternalSourceLegalEntityLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("ExternalSourceLegalEntity")]
    public static str lookupArea(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();

        Name extSourceName;

        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(CashFlowExternalSourceEntryEntity), _fields);

        if (fieldMap.exists(fieldStr(CashFlowExternalSourceEntryEntity, ExternalSourceName)))
        {
            extSourceName = fieldMap.lookup(fieldStr(CashFlowExternalSourceEntryEntity, ExternalSourceName));
            
            CashFlowExternalSourceLegalEntityOverrideEntity extSourceLegalEntityEntity;
            CompanyInfo company;
            int counter = 1;

            while select DataArea from company
                exists join extSourceLegalEntityEntity
                    where extSourceLegalEntityEntity.LegalEntity == company.DataArea
                        && extSourceLegalEntityEntity.ExternalSourceName == extSourceName
            {
                result.items().value(counter, company.DataArea);
                counter++;
            }
        }

        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExternalName</Name>
				<Source><![CDATA[
    [SysODataActionAttribute("CashFlowExternalSourceEntryEntityExternalSourceNameLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("ExternalSourceName")]
    public static str lookupExternalName(Array _fields)
    {
        OfficeAppCustomLookupListResult result = new OfficeAppCustomLookupListResult();

        CashFlowExternalSourceEntity extSourceEntity;
            
        int counter = 1;

        while select Name from extSourceEntity
        {
            result.items().value(counter, extSourceEntity.Name);
            counter++;
        }
        
        return result.serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowExternalSourceEntryStaging staging;

        container result;
        Int64 insertedCount, updatedCount;
        
        CashFlowExternalSourceEntryEntity::resetTransferStatus(_dmfDefinitionGroupExecution);

        CashFlowExternalSourceEntryEntity::validateExternalSourceLegalEntity(_dmfDefinitionGroupExecution);
        CashFlowExternalSourceEntryEntity::validateCurrencyCode(_dmfDefinitionGroupExecution);

        while select ExternalSourceLegalEntity from staging
            group by ExternalSourceLegalEntity
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            SelectableDataArea curDataArea = staging.ExternalSourceLegalEntity;

            changecompany(curDataArea)
            {
                // Validate and resolve dimension
                DimensionDataEntitySFKCacheTmp defaultDimCacheTmp = CashFlowExternalSourceEntryEntity::resovleAndValidateExternalSourceDefaultDimension(_dmfDefinitionGroupExecution, curDataArea);

                ttsbegin;

                // Update
                updatedCount += CashFlowExternalSourceEntryEntity::updateExisitingRecords(_dmfDefinitionGroupExecution, defaultDimCacheTmp, curDataArea);

                // Insert
                insertedCount += CashFlowExternalSourceEntryEntity::insertNewRecords(_dmfDefinitionGroupExecution, defaultDimCacheTmp, curDataArea);

                ttscommit;
            }
        }

        // Update the staging table to specify records were successfully processed.
        update_recordset staging
        setting TransferStatus = DMFTransferStatus::Completed
        where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            && staging.TransferStatus == DMFTransferStatus::NotStarted;

        return [insertedCount, updatedCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExisitingRecords</Name>
				<Source><![CDATA[
    private static int64 updateExisitingRecords(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp, SelectableDataArea _curDataArea)
    {
        CashFlowExternalSourceEntryStaging staging;
        CashFlowExternalSourceEntry updatedRecord;
        CashFlowExternalSourceEntry existingRecord;

        CashFlowExternalSourceLegalEntity extSourceLE;
        CashFlowExternalSource extSource;
        CompanyInfo companyInfo = CompanyInfo::findDataArea(_curDataArea);
        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);

        updatedRecord.skipDataMethods(true);

        update_recordset updatedRecord setting
                Description = staging.Description,
                TransactionDate = staging.TransactionDate,
                TransactionAmount = staging.TransactionAmount,
                TransactionCurrencyCode = staging.TransactionCurrencyCode,
                DocumentNumber = staging.DocumentNumber,
                AccountNumber = staging.AccountNumber,
                AccountName = staging.AccountName,
                ExternalSourceLegalEntity = extSourceLE.RecId,
                DefaultDimension = _defaultDimCacheTmp.ResolvedReference
                join staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted
                        && staging.EntryId == updatedRecord.EntryId
                        && staging.ExternalSourceLegalEntity == _curDataArea
                join extSourceLE
                    where extSourceLE.LegalEntity == companyInfo.RecId
                    join extSource
                        where extSource.Name == staging.ExternalSourceName
                            && extSource.RecId == extSourceLE.ExternalSource
                join _defaultDimCacheTmp
                    where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                                && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                                && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
                                && _defaultDimCacheTmp.DataAreaId == _curDataArea;

        return updatedRecord.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewRecords</Name>
				<Source><![CDATA[
    private static int64 insertNewRecords(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp, SelectableDataArea _curDataArea)
    {
        CashFlowExternalSourceEntryStaging staging;
        CashFlowExternalSourceEntry insertedRecord;
        CashFlowExternalSourceEntry existingRecord;

        CashFlowExternalSourceLegalEntity extSourceLE;
        CashFlowExternalSource extSource;
        CompanyInfo companyInfo = CompanyInfo::findDataArea(_curDataArea);
        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);

        insertedRecord.skipDataMethods(true);

        insert_recordset insertedRecord
                      (EntryId, Description, TransactionDate, TransactionAmount, TransactionCurrencyCode, DocumentNumber, AccountNumber, AccountName, ExternalSourceLegalEntity, DefaultDimension)
                select EntryId, Description, TransactionDate, TransactionAmount, TransactionCurrencyCode, DocumentNumber, AccountNumber, AccountName
                from staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted
                        && staging.ExternalSourceLegalEntity == _curDataArea
                    join RecId from extSourceLE
                        where extSourceLE.LegalEntity == companyInfo.RecId
                        join extSource
                            where extSource.RecId == extSourceLE.ExternalSource
                                && extSource.Name == staging.ExternalSourceName
                    join ResolvedReference from _defaultDimCacheTmp
                        where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                                && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                                && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
                                && _defaultDimCacheTmp.DataAreaId == _curDataArea
                    notexists join existingRecord
                        where existingRecord.EntryId == staging.EntryId;

        return insertedRecord.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resovleAndValidateExternalSourceDefaultDimension</Name>
				<Source><![CDATA[
    private static DimensionDataEntitySFKCacheTmp resovleAndValidateExternalSourceDefaultDimension(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, SelectableDataArea _curDataArea)
    {
        CashFlowExternalSourceEntryStaging staging;

        // Resolve default dimension
        DimensionDataEntitySFKCacheTmp defaultDimCacheTmp = DimensionDefaultSetBasedResolver::Resolve(_dmfDefinitionGroupExecution, staging);

        const DimensionHierarchyType hierarchyTypeDimensionDefault = DimensionHierarchyType::DataEntityDefaultDimensionFormat;
        ExtendedDataTypeName dataTypeDimensionDefault = extendedTypeStr(DimensionDefault);

        // Set records with unresolved dimension to error
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
                && staging.ExternalSourceLegalEntity == _curDataArea
            exists join defaultDimCacheTmp
                where defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                    && defaultDimCacheTmp.EnumValue == enum2int(LedgerJournalACType::Ledger)
                    && defaultDimCacheTmp.HierarchyType == hierarchyTypeDimensionDefault
                    && defaultDimCacheTmp.ExtendedDataType == dataTypeDimensionDefault
                    && defaultDimCacheTmp.Found == NoYes::No;

        // Set proper error message
        DMFStagingValidationLog log;
        FieldName fieldName = fieldStr(CashFlowExternalSourceEntryStaging, DefaultDimensionDisplayValue);
        TableName tableName = tableStr(CashFlowExternalSourceEntryStaging);
        tableName entityName = _dmfDefinitionGroupExecution.Entity;
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        str error = strFmt("@CashManagement:InvalidDefaultDimension");

        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error
                from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.DefaultDimensionDisplayValue != ''
                    && staging.ExternalSourceLegalEntity == _curDataArea
            exists join defaultDimCacheTmp
                where defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                    && defaultDimCacheTmp.EnumValue == enum2int(LedgerJournalACType::Ledger)
                    && defaultDimCacheTmp.HierarchyType == hierarchyTypeDimensionDefault
                    && defaultDimCacheTmp.ExtendedDataType == dataTypeDimensionDefault
                    && defaultDimCacheTmp.Found == NoYes::No;

        return defaultDimCacheTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExternalSourceLegalEntity</Name>
				<Source><![CDATA[
    private static void validateExternalSourceLegalEntity(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowExternalSourceEntryStaging staging;
        DMFStagingValidationLog log;
        CashFlowExternalSourceLegalEntityOverrideEntity externalSourceLegalEntityEntity;
        CashFlowExternalSource externalSource;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.ExternalSourceName != ''
                && staging.externalSourceLegalEntity != ''
            notexists join externalSourceLegalEntityEntity
                where externalSourceLegalEntityEntity.ExternalSourceName == staging.ExternalSourceName
                    && externalSourceLegalEntityEntity.LegalEntity == staging.ExternalSourceLegalEntity;

        FieldName fieldName = fieldStr(CashFlowExternalSourceEntryStaging, ExternalSourceLegalEntity);
        TableName tableName = tableStr(CashFlowExternalSourceEntryStaging);
        tableName entityName = _dmfDefinitionGroupExecution.Entity;
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        str error = strFmt("@CashManagement:InvalidExternalSourceLegalEntity");

        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error
                from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.ExternalSourceName != ''
                    && staging.externalSourceLegalEntity != ''
            notexists join externalSourceLegalEntityEntity
                where externalSourceLegalEntityEntity.ExternalSourceName == staging.ExternalSourceName
                    && externalSourceLegalEntityEntity.LegalEntity == staging.ExternalSourceLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    private static void validateCurrencyCode(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowExternalSourceEntryStaging staging;
        DMFStagingValidationLog log;
        Currency currency;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransactionCurrencyCode != ''
            notexists join currency
                where currency.CurrencyCode == staging.TransactionCurrencyCode;
                    
        FieldName fieldName = fieldStr(CashFlowExternalSourceEntryStaging, TransactionCurrencyCode);
        TableName tableName = tableStr(CashFlowExternalSourceEntryStaging);
        tableName entityName = _dmfDefinitionGroupExecution.Entity;
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        str error = strFmt("@CashManagement:InvalidCurrencyCode");

        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error
                from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransactionCurrencyCode != ''
            notexists join currency
                where currency.CurrencyCode == staging.TransactionCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTransferStatus</Name>
				<Source><![CDATA[
    private static void resetTransferStatus(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CashFlowExternalSourceEntryStaging staging;
        DMFStagingValidationLog log;

        log.skipDataMethods(true);
        delete_from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::NotStarted
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus != DMFTransferStatus::NotStarted
                && staging.TransferStatus != DMFTransferStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        CashFlowExternalSourceEntryEntity orig  = this.orig();

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (CashflowInsightsActivation::isActive())
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(CashFlowExternalSourceEntryEntity, CashFlowExternalSourceEntry))
            {
                // TransactionAmount, TransactionDate, TransactionCurrencyCode, DefaultDimension, DocumentNumber, AccountName, AccountNumber
                // are the only public fields in CashFlowExternalSourceEntry mapped to LedgerCov and LedgerCovDocument.
                if (this.TransactionAmount != orig.TransactionAmount 
                    || this.TransactionDate != orig.TransactionDate 
                    || this.TransactionCurrencyCode != orig.TransactionCurrencyCode 
                    || this.DefaultDimension != orig.DefaultDimension
                    || this.DocumentNumber != orig.DocumentNumber
                    || this.AccountName != orig.AccountName
                    || this.AccountNumber != orig.AccountNumber)
                {
                    CashFlowExternalSourceEntry extSourceEntry = _dataSourceCtx.getBuffer();    
                
                    changecompany(this.ExternalSourceLegalEntity)
                    {
                        extSourceEntry.updateOrCreateLedgerCovDataAndRecalculateBalance(orig.TransactionDate);
                    }
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (CashflowInsightsActivation::isActive())
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(CashFlowExternalSourceEntryEntity, CashFlowExternalSourceEntry))
            {
                CashFlowExternalSourceEntry extSourceEntry = _dataSourceCtx.getBuffer();

                changecompany(this.ExternalSourceLegalEntity)
                {
                    extSourceEntry.updateOrCreateLedgerCovDataAndRecalculateBalance();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (CashflowInsightsActivation::isActive())
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(CashFlowExternalSourceEntryEntity, CashFlowExternalSourceEntry))
            {
                CashFlowExternalSourceEntry extSourceEntry = _dataSourceCtx.getBuffer();

                changecompany(this.ExternalSourceLegalEntity)
                {
                    extSourceEntry.deleteLedgerCovDataAndRecalculateDayBalance();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@CashManagement:CashFlowExternalSourceEntry</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CashFlowExternalSourceEntryStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>CashFlowForecastExternalSourceEntries</PublicCollectionName>
	<PublicEntityName>CashFlowForecastExternalSourceEntry</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EntryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalSourceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalSourceLegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimensionDisplayValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EntryId</Name>
			<DataField>EntryId</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalSourceName</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@CashManagement:CashFLowExternalSourceName</Label>
			<DataField>Name</DataField>
			<DataSource>CashFlowExternalSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalSourceLegalEntity</Name>
			<Label>@CashManagement:LegalEntity</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionDate</Name>
			<DataField>TransactionDate</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionAmount</Name>
			<DataField>TransactionAmount</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyCode</Name>
			<DataField>TransactionCurrencyCode</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
			<DimensionLegalEntityContextField>ExternalSourceLegalEntity</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
			<DimensionLegalEntityContextField>ExternalSourceLegalEntity</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<DataField>DocumentNumber</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountNumber</Name>
			<DataField>AccountNumber</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountName</Name>
			<DataField>AccountName</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CovStatus</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CovStatus</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalSourceRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ExternalSource</DataField>
			<DataSource>CashFlowExternalSourceLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LegalEntity</DataField>
			<DataSource>CashFlowExternalSourceLegalEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalSourceLegalEntityRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ExternalSourceLegalEntity</DataField>
			<DataSource>CashFlowExternalSourceEntry</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>EntryId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DefaultDimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ExternalSourceLegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CashFlowExternalSourceLegalEntityOverrideEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ExternalSourceLegalEntity</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExternalSourceEntryExternalSourceLegalEntity</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ExternalSourceName</Field>
					<RelatedField>ExternalSourceName</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>ExternalSourceLegalEntity</Field>
					<RelatedField>LegalEntity</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ExternalSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CashFlowExternalSourceEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ExternalSources</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashFlowExternalSourceEntryExternalSource</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CashFlowExternalSourceEntity_Name</Name>
					<Field>ExternalSourceName</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>CurrencyCodes</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CashFLowExternalSourceEntryCurrencyCode</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CurrencyEntity_CurrencyCode</Name>
					<Field>TransactionCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CashFlowExternalSourceEntry</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CashFlowExternalSourceEntry</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CashFlowExternalSourceLegalEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CashFlowExternalSourceLegalEntity</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CashFlowExternalSource</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CashFlowExternalSource</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>LedgerCovExternalSource</Name>
										<JoinRelationName>CashFlowExternalSource</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>CompanyInfo</Name>
										<JoinRelationName>CompanyInfo</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LedgerCovExternalSourceLegalEntity</Name>
								<JoinRelationName>CashFlowExternalSourceLegalEntity</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DefaultDimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>CashFlowExternalSourceEntry</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>