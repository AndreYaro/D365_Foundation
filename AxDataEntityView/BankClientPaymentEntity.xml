<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankClientPaymentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankClientPaymentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillUnrecognizedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize payment in case when payment order wasn't found.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    public void fillUnrecognizedPayment(BankClientPayment_RU _rec)
    {
        INN_RU                            seekINN;
        BankBIC_RU                        seekBIC;
        KPPU_RU                           seekKPP;
        BankAccount                       seekBankAccount,
                                          payerBankAccount,
                                          payeeBankAccount;
        CustTable                         custTable;
        VendTable                         vendTable;
        CustBankAccount                   custBankAccount;
        VendBankAccount                   vendBankAccount;
        BankPaymentOrderJour_RU           paymentOrderJour;
        BankGroup                         bankGroup;
        BankAccountTable                  bankAccountTable;
        BankTransType                     bankTransType;
        BankClientDocumentType_RU         bankDocumentType;
        AgreementHeaderExt_RU             agreementHeaderExt;
        date                              documentDate    = _rec.DocumentDate;
        INN_RU                            companyINN      = CompanyInfo::find().partyINNasOfDate_RU(documentDate);
        KPPU_RU                           companyRRC      = CompanyInfo::find().partyKPPasOfDate_RU(documentDate);
        CurrencyCode                      companyCurrency = Ledger::accountingCurrency();
        CurrencyCode                      payerCurrency, payeeCurrency;
        BankClientDocumentTypeCategory_RU documentCategory;

        boolean custBankAccountAndBIC, vendBankAccountAndBIC;
        boolean initCust, initVend;
        boolean custOrVendFound;
        boolean duplicatedCustINN, duplicatedVendINN;
        boolean companyAccountsExists;
        boolean transferCurrency;

        BankAdvancedTransType_RU    advancedTransType;

        DirPartyLocation                dirPartyLocationInn, dirPartyLocationKPP;
        TaxRegistration                 taxRegistrationInn, taxRegistrationKPP;
        TaxRegistrationLegislationTypes legislationTypesInn, legislationTypesKPP;

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Outgoing)
        {
            seekINN         = _rec.PayeeINN;
            seekKPP         = _rec.PayeeRRC;
            seekBIC         = _rec.PayeeBankBIC;
            seekBankAccount = _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount;
        }

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Incoming)
        {
            seekINN         = _rec.PayerINN;
            seekKPP         = _rec.PayerRRC;
            seekBIC         = _rec.PayerBankBIC;
            seekBankAccount = _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount;
        }

        payerBankAccount = _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount;
        payeeBankAccount = _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount;

        if (seekINN)
        {
            select count(RecId) from vendTable
            exists join dirPartyLocationInn
                where dirPartyLocationInn.Party           == vendTable.Party
                   && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
            exists join taxRegistrationInn
                where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                   && taxRegistrationInn.RegistrationNumber == seekINN
                   && taxRegistrationInn.ValidFrom          <= documentDate
                   && taxRegistrationInn.ValidTo            >= documentDate
            exists join legislationTypesInn
                where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                   && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN;

            duplicatedVendINN = int642int(vendTable.RecId) > 1;

            select count(RecId) from custTable
            exists join dirPartyLocationInn
                where dirPartyLocationInn.Party           == custTable.Party
                   && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
            exists join taxRegistrationInn
                where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                   && taxRegistrationInn.RegistrationNumber == seekINN
                   && taxRegistrationInn.ValidFrom          <= documentDate
                   && taxRegistrationInn.ValidTo            >= documentDate
            exists join legislationTypesInn
                where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                   && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN;

            duplicatedCustINN = int642int(custTable.RecId) > 1;

            select firstonly vendTable
            exists join dirPartyLocationInn
                where dirPartyLocationInn.Party           == vendTable.Party
                   && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
            exists join taxRegistrationInn
                where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                   && taxRegistrationInn.RegistrationNumber == seekINN
                   && taxRegistrationInn.ValidFrom          <= documentDate
                   && taxRegistrationInn.ValidTo            >= documentDate
            exists join legislationTypesInn
                where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                   && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN;

            select firstonly custTable
            exists join dirPartyLocationInn
                where dirPartyLocationInn.Party           == custTable.Party
                   && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
            exists join taxRegistrationInn
                where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                   && taxRegistrationInn.RegistrationNumber == seekINN
                   && taxRegistrationInn.ValidFrom          <= documentDate
                   && taxRegistrationInn.ValidTo            >= documentDate
            exists join legislationTypesInn
                where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                   && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN;

            if (seekKPP)
            {
                if (vendTable)
                {
                    select count(RecId) from vendTable
                    exists join dirPartyLocationInn
                        where dirPartyLocationInn.Party           == vendTable.Party
                           && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationInn
                        where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                           && taxRegistrationInn.RegistrationNumber == seekINN
                           && taxRegistrationInn.ValidFrom          <= documentDate
                           && taxRegistrationInn.ValidTo            >= documentDate
                    exists join legislationTypesInn
                        where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
                    exists join dirPartyLocationKPP
                        where dirPartyLocationKPP.Party           == vendTable.Party
                           && dirPartyLocationKPP.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationKPP
                        where taxRegistrationKPP.DirPartyLocation   == dirPartyLocationKPP.RecId
                           && taxRegistrationKPP.RegistrationNumber == seekKPP
                           && taxRegistrationKPP.ValidFrom          <= documentDate
                           && taxRegistrationKPP.ValidTo            >= documentDate
                    exists join legislationTypesKPP
                        where legislationTypesKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;

                    duplicatedVendINN = int642int(vendTable.RecId) > 1;

                    select firstonly vendTable
                    exists join dirPartyLocationInn
                        where dirPartyLocationInn.Party           == vendTable.Party
                           && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationInn
                        where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                           && taxRegistrationInn.RegistrationNumber == seekINN
                           && taxRegistrationInn.ValidFrom          <= documentDate
                           && taxRegistrationInn.ValidTo            >= documentDate
                    exists join legislationTypesInn
                        where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
                    exists join dirPartyLocationKPP
                        where dirPartyLocationKPP.Party           == vendTable.Party
                           && dirPartyLocationKPP.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationKPP
                        where taxRegistrationKPP.DirPartyLocation   == dirPartyLocationKPP.RecId
                           && taxRegistrationKPP.RegistrationNumber == seekKPP
                           && taxRegistrationKPP.ValidFrom          <= documentDate
                           && taxRegistrationKPP.ValidTo            >= documentDate
                    exists join legislationTypesKPP
                        where legislationTypesKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
                }

                if (custTable)
                {
                    select count(RecId) from custTable
                    exists join dirPartyLocationInn
                        where dirPartyLocationInn.Party           == custTable.Party
                           && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationInn
                        where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                           && taxRegistrationInn.RegistrationNumber == seekINN
                           && taxRegistrationInn.ValidFrom          <= documentDate
                           && taxRegistrationInn.ValidTo            >= documentDate
                    exists join legislationTypesInn
                        where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
                    exists join dirPartyLocationKPP
                        where dirPartyLocationKPP.Party           == custTable.Party
                           && dirPartyLocationKPP.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationKPP
                        where taxRegistrationKPP.DirPartyLocation   == dirPartyLocationKPP.RecId
                           && taxRegistrationKPP.RegistrationNumber == seekKPP
                           && taxRegistrationKPP.ValidFrom          <= documentDate
                           && taxRegistrationKPP.ValidTo            >= documentDate
                    exists join legislationTypesKPP
                        where legislationTypesKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;

                    duplicatedCustINN = int642int(custTable.RecId) > 1;

                    select firstonly custTable
                    exists join dirPartyLocationInn
                        where dirPartyLocationInn.Party           == custTable.Party
                           && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationInn
                        where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                           && taxRegistrationInn.RegistrationNumber == seekINN
                           && taxRegistrationInn.ValidFrom          <= documentDate
                           && taxRegistrationInn.ValidTo            >= documentDate
                    exists join legislationTypesInn
                        where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
                    exists join dirPartyLocationKPP
                        where dirPartyLocationKPP.Party           == custTable.Party
                           && dirPartyLocationKPP.IsPostalAddress == NoYes::Yes
                    exists join taxRegistrationKPP
                        where taxRegistrationKPP.DirPartyLocation   == dirPartyLocationKPP.RecId
                           && taxRegistrationKPP.RegistrationNumber == seekKPP
                           && taxRegistrationKPP.ValidFrom          <= documentDate
                           && taxRegistrationKPP.ValidTo            >= documentDate
                    exists join legislationTypesKPP
                        where legislationTypesKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                           && legislationTypesKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
                }
            }

            if (_rec.PayerINN         == companyINN                              &&
                _rec.PayeeINN         == companyINN                              &&
                _rec.PayeeRRC         == companyRRC                              &&
                _rec.PayerRRC         == companyRRC                              &&
                _rec.CurrencyCode && payeeBankAccount  && payerBankAccount)
            {
                select firstonly RecId, CurrencyCode from bankAccountTable
                    where bankAccountTable.AccountNum == payeeBankAccount;

                companyAccountsExists = bankAccountTable.RecId != 0;
                payeeCurrency         = bankAccountTable.CurrencyCode;

                select firstonly RecId, CurrencyCode from bankAccountTable
                    where bankAccountTable.AccountNum == payerBankAccount;

                companyAccountsExists = companyAccountsExists && bankAccountTable.RecId != 0;
                payerCurrency         = bankAccountTable.CurrencyCode;

                if (companyAccountsExists)
                {
                    select firstonly VendAccountNum_RU from bankGroup
                        where (bankGroup.BankBIC_RU  == seekBIC || !seekBIC) &&
                               bankGroup.VendAccountNum_RU
                    exists join bankAccountTable
                        where bankAccountTable.AccountNum  == seekBankAccount &&
                              bankAccountTable.BankGroupId == bankGroup.BankGroupId;

                    vendTable = VendTable::find(bankGroup.VendAccountNum_RU);
                    transferCurrency  = true;
                    duplicatedVendINN = false;
                }
            }
        }

        custOrVendFound = custTable || vendTable;

        if (custOrVendFound)
        {
            if (duplicatedVendINN)
            {
                select firstonly vendTable
                exists join dirPartyLocationInn
                    where dirPartyLocationInn.Party           == vendTable.Party
                        && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                exists join taxRegistrationInn
                    where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                        && taxRegistrationInn.RegistrationNumber == seekINN
                        && taxRegistrationInn.ValidFrom          <= documentDate
                        && taxRegistrationInn.ValidTo            >= documentDate
                exists join legislationTypesInn
                    where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                        && legislationTypesInn.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
                exists join vendBankAccount
                    where vendBankAccount.VendAccount == vendTable.AccountNum &&
                          vendBankAccount.AccountNum  == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == vendBankAccount.BankGroupID &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);
            }

            if (duplicatedCustINN)
            {
                select firstonly custTable
                exists join dirPartyLocationInn
                    where dirPartyLocationInn.Party           == custTable.Party
                        && dirPartyLocationInn.IsPostalAddress == NoYes::Yes
                exists join taxRegistrationInn
                    where taxRegistrationInn.DirPartyLocation   == dirPartyLocationInn.RecId
                        && taxRegistrationInn.RegistrationNumber == seekINN
                        && taxRegistrationInn.ValidFrom          <= documentDate
                        && taxRegistrationInn.ValidTo            >= documentDate
                exists join legislationTypesInn
                    where legislationTypesInn.TaxRegistrationTypeApplicabilityRule == taxRegistrationInn.TaxRegistrationTypeApplicabilityRule
                        && legislationTypesInn.TaxRegistrationTypesList            == TaxRegistrationTypesList::INN
                exists join custBankAccount
                    where custBankAccount.CustAccount == custTable.AccountNum &&
                          custBankAccount.AccountNum  == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == custBankAccount.BankGroupId &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);
            }

            if (custTable && vendTable)
            {
                select firstonly custBankAccount
                    where custBankAccount.CustAccount == custTable.AccountNum &&
                          custBankAccount.AccountNum  == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == custBankAccount.BankGroupId &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);

                custBankAccountAndBIC = custBankAccount.RecId != 0;

                select firstonly vendBankAccount
                    where vendBankAccount.VendAccount == vendTable.AccountNum &&
                          vendBankAccount.AccountNum  == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == vendBankAccount.BankGroupID &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);

                vendBankAccountAndBIC = vendBankAccount.RecId != 0;

                if (custBankAccountAndBIC)
                {
                    initCust = true;
                }
                if (vendBankAccountAndBIC)
                {
                    initVend = true;
                }
            }
            else
            {
                if (custTable)
                {
                    initCust = true;
                }
                if (vendTable)
                {
                    initVend = true;
                }
            }
        }
        else
        {
            if (!seekINN && !seekKPP)
            {
                select firstonly BankGroupId, CustAccount, RecId from custBankAccount
                    where custBankAccount.AccountNum == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == custBankAccount.BankGroupId &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);

                custBankAccountAndBIC = custBankAccount.RecId != 0;

                select firstonly BankGroupID, VendAccount, RecId from vendBankAccount
                    where vendBankAccount.AccountNum == seekBankAccount
                exists join bankGroup
                    where bankGroup.BankGroupId == vendBankAccount.BankGroupID &&
                         (bankGroup.BankBIC_RU  == seekBIC || !seekBIC);

                vendBankAccountAndBIC = vendBankAccount.RecId != 0;

                //payment with currency transfer
                if (_rec.CurrencyCode && payeeBankAccount  && payerBankAccount)
                {
                    select firstonly RecId, CurrencyCode from bankAccountTable
                        where bankAccountTable.AccountNum == payeeBankAccount;

                    companyAccountsExists = bankAccountTable.RecId != 0;
                    payeeCurrency         = bankAccountTable.CurrencyCode;

                    select firstonly RecId, CurrencyCode from bankAccountTable
                        where bankAccountTable.AccountNum == payerBankAccount;

                    companyAccountsExists = companyAccountsExists && bankAccountTable.RecId != 0;
                    payerCurrency         = bankAccountTable.CurrencyCode;

                    if (companyAccountsExists)
                    {
                        select firstonly VendAccountNum_RU from bankGroup
                            where (bankGroup.BankBIC_RU  == seekBIC || !seekBIC)        &&
                                   bankGroup.VendAccountNum_RU
                        exists join bankAccountTable
                            where bankAccountTable.AccountNum  == seekBankAccount       &&
                                  bankAccountTable.BankGroupId == bankGroup.BankGroupId;

                        vendTable = VendTable::find(bankGroup.VendAccountNum_RU);
                        transferCurrency  = true;
                        initVend = vendTable.RecId != 0;
                    }
                }

                if (custBankAccountAndBIC)
                {
                    custTable = CustTable::find(custBankAccount.CustAccount);
                    initCust = true;
                }
                if (vendBankAccountAndBIC)
                {
                    vendTable = VendTable::find(vendBankAccount.VendAccount);
                    initVend = true;
                }
            }
        }

        if (initCust && initVend)
        {
            agreementHeaderExt = this.fillPaymentAgreement(_rec, custTable.AccountNum, ModuleCustVend::Cust);
            if (agreementHeaderExt)
            {
                initVend = false;
                initCust = true;
                _rec.CustVendAC = custTable.AccountNum;
            }
            else
            {
                agreementHeaderExt = this.fillPaymentAgreement(_rec, vendTable.AccountNum, ModuleCustVend::Vend);

                if (agreementHeaderExt)
                {
                    initCust = false;
                    initVend = true;
                    _rec.CustVendAC = vendTable.AccountNum;
                }
            }

        }

        _rec.Unrecognized = !(initCust ^ initVend);
        _rec.PartnerType  = !initCust && initVend ? ModuleCustVend::Vend : ModuleCustVend::Cust;

        if (! initCust && initVend)
        {
            _rec.CustVendAC = vendTable.AccountNum;
            if (!_rec.AgreementHeaderExt)
            {
                _rec.DefaultDimension = vendTable.DefaultDimension;
            }
        }

        if (initCust)
        {
            _rec.CustVendAC = custTable.AccountNum;
            if (!_rec.AgreementHeaderExt)
            {
                _rec.DefaultDimension = custTable.DefaultDimension;
            }
            if (initVend)
            {
                if (custOrVendFound)
                {
                    _rec.UnrecognitionCause += "@GLS115330" + "@GLS115332";
                    _rec.Unrecognized = NoYes::Yes;
                }
                else
                {
                    _rec.UnrecognitionCause += "@GLS115331" + "@GLS115332";
                    _rec.Unrecognized = NoYes::Yes;
                }
            }
        }

        if (! initCust && ! initVend)
        {
            if (custOrVendFound)
            {
                _rec.UnrecognitionCause += "@GLS115334";
            }
            else
            {
                _rec.UnrecognitionCause += strFmt("@GLS221825", seekINN, seekKPP, seekBankAccount);
            }
        }

        if (  _rec.CustVendAC         &&
              _rec.PaymentPurpose     &&
            ! _rec.AgreementHeaderExt &&
            ! agreementHeaderExt)
        {
            this.fillPaymentAgreement(_rec, _rec.CustVendAC, _rec.PartnerType);
        }

        _rec.CurrencyCode = _rec.CurrencyCode ? _rec.CurrencyCode : Ledger::accountingCurrency();

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Outgoing)
        {
            _rec.ExchRate = ExchangeRateHelper::exchRate(_rec.CurrencyCode, _rec.WriteoffDate ? _rec.WriteoffDate : _rec.TransDate);
        }
        else
        {
            _rec.ExchRate = ExchangeRateHelper::exchRate(_rec.CurrencyCode, _rec.ReceiptDate ? _rec.ReceiptDate : _rec.TransDate);
        }

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Outgoing && (!_rec.Unrecognized) && (initCust || initVend))
        {
            paymentOrderJour = _rec.findPaymentOrderJour();
            _rec.Voucher     = paymentOrderJour.Voucher;
            _rec.JournalNum  = paymentOrderJour.JournalNum;
        }

        if (transferCurrency)
        {
            if (payerCurrency == payeeCurrency)
            {
                advancedTransType = BankAdvancedTransType_RU::CurrTransfer;
                documentCategory  = BankClientDocumentTypeCategory_RU::CurrencyTransferOrder;
                _rec.TransferCurrencyCode = companyCurrency;
            }
            else if (payerCurrency == companyCurrency)
            {
                advancedTransType = BankAdvancedTransType_RU::CurrBuy;
                documentCategory  = BankClientDocumentTypeCategory_RU::CurrencyPurchase;
                _rec.Unrecognized = NoYes::Yes;
                _rec.UnrecognitionCause += "@GLS115336";
                _rec.TransferCurrencyCode = payerCurrency;
            }
            else if (payeeCurrency == companyCurrency)
            {
                advancedTransType = BankAdvancedTransType_RU::CurrSell;
                documentCategory  = BankClientDocumentTypeCategory_RU::CurrencySell;
                _rec.Unrecognized = NoYes::Yes;
                _rec.UnrecognitionCause += "@GLS115336";
                _rec.TransferCurrencyCode = payerCurrency;
            }

            select firstonly BankTransType from bankTransType
                where bankTransType.BankAdvancedTransType_RU == advancedTransType;

            select firstonly TypeId from bankDocumentType
                where bankDocumentType.Category == documentCategory;

            _rec.BankTransactionType = bankTransType.BankTransType;
            _rec.DocumentTypeId      = bankDocumentType.TypeId;
        }

        _rec.initPostingProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Scans agreement's requisites in purpose string of payment,
    ///     if agreement is found - set up it on payment.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <param name="_custVendAC">
    ///     Customer (Vendor) account Id.
    /// </param>
    /// <param name="_moduleCustVend">
    ///     Sales or Purch module.
    /// </param>
    /// <returns>
    ///     Agreement table record.
    /// </returns>
    public AgreementHeaderExt_RU fillPaymentAgreement(BankClientPayment_RU _rec, CustVendAC _custVendAC, ModuleCustVend _moduleCustVend)
    {
        SalesAgreementHeader salesAgreementHeader;
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt;
        PurchAgreementHeader purchAgreementHeader;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        AgreementHeaderExt_RU      agreementHeaderExt;

        const str AgreementIdentifier = 'дог';
        const int AgreementIdentifierLeftSpace = 24;

        boolean matchAgreement(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId, DimensionDefault _defaultDimension, AgreementDocumentTitle _documentTitle)
        {
            int agreementPos;

            agreementPos = strScan(
                _rec.PaymentPurpose,
                _documentTitle,
                1,
                strLen(_rec.PaymentPurpose));
            
            if (agreementPos)
            {
                if (strScan(_rec.PaymentPurpose, AgreementIdentifier, agreementPos, -AgreementIdentifierLeftSpace))
                {
                    _rec.AgreementHeaderExt = _agreementHeaderExtRecId;
                    _rec.AgreementBlocked = NoYes::Yes;
                    if (_defaultDimension)
                    {
                        _rec.DefaultDimension = _defaultDimension;
                    }
                    return true;
                }
            }

            return false;
        }

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust:
                while select DocumentTitle, DefaultDimension from salesAgreementHeader
                    where salesAgreementHeader.CustAccount == _custVendAC
                join RecId from salesAgreementHeaderExt
                    where salesAgreementHeaderExt.AgreementHeader == salesAgreementHeader.RecId
                {
                    if (matchAgreement(salesAgreementHeaderExt.RecId, salesAgreementHeader.DefaultDimension, salesAgreementHeader.DocumentTitle))
                    {
                        agreementHeaderExt = salesAgreementHeaderExt;
                        break;
                    }
                }
                break;

            case ModuleCustVend::Vend:
                while select DocumentTitle, DefaultDimension from purchAgreementHeader
                    where purchAgreementHeader.VendAccount == _custVendAC
                join RecId from purchAgreementHeaderExt
                    where purchAgreementHeaderExt.AgreementHeader == purchAgreementHeader.RecId
                {
                    if (matchAgreement(purchAgreementHeaderExt.RecId, purchAgreementHeader.DefaultDimension, purchAgreementHeader.DocumentTitle))
                    {
                        agreementHeaderExt = purchAgreementHeaderExt;
                        break;
                    }
                }
                break;
        }

        return agreementHeaderExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines currency code for payment from payer's bank account or
    ///     from recipient's bank account.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <remarks>
    ///     Last chance to set up currency code on payment is standard currency of company.
    /// </remarks>
    public void identifyCurrency(BankClientPayment_RU _rec)
    {
        BankAccountTable    bankAccountTable;
        BankGroup           bankGroup;
        BankAccount         bankAccount;

        void findCurrency(BankAccount _bankAccount, BankBIC_RU _bankBic)
        {
            if (_bankAccount)
            {
                select firstonly CurrencyCode from bankAccountTable
                    where bankAccountTable.AccountNum == _bankAccount
                join RecId from bankGroup
                    where bankGroup.BankGroupId == bankAccountTable.BankGroupId &&
                         (bankGroup.BankBIC_RU  == _bankBic || !_bankBic);
            }
        }

        if (!_rec.CurrencyCode && _rec.PaymentDirection == BankClientPaymentDirection_RU::Outgoing)
        {
            bankAccount = _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount;
            findCurrency(bankAccount, _rec.PayerBankBIC);
            _rec.CurrencyCode = bankAccountTable.CurrencyCode;
        }

        if (!_rec.CurrencyCode && _rec.PaymentDirection == BankClientPaymentDirection_RU::Incoming)
        {
            bankAccount = _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount;
            findCurrency(bankAccount, _rec.PayeeBankBIC);
            _rec.CurrencyCode = bankAccountTable.CurrencyCode;
        }

        if (!_rec.CurrencyCode)
        {
            _rec.CurrencyCode = Ledger::accountingCurrency();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPaymentByPaymentOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes payment from payment order.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <param name="_paymentOrderJour">
    ///     A <c>BankPaymentOrderJour_RU</c> record.
    /// </param>
    public void fillPaymentByPaymentOrder(BankClientPayment_RU _rec, BankPaymentOrderJour_RU _paymentOrderJour)
    {
        LedgerJournalTrans ledgerJournalTrans;
        
        if (_paymentOrderJour.LedgerACType == LedgerJournalACType::Cust)
        {
            _rec.PartnerType = ModuleCustVend::Cust;
        }
        if (_paymentOrderJour.LedgerACType == LedgerJournalACType::Vend)
        {
            _rec.PartnerType = ModuleCustVend::Vend;
        }

        if (_paymentOrderJour.AccountNumRecipient)
        {
            _rec.CustVendAC = _paymentOrderJour.AccountNumRecipient;
        }
        else
        {
            if (_paymentOrderJour.AccountNumPayer)
            {
                _rec.CustVendAC = _paymentOrderJour.AccountNumPayer;
            }
        }

        _rec.Voucher             = _paymentOrderJour.Voucher;
        _rec.JournalNum          = _paymentOrderJour.JournalNum;

        ledgerJournalTrans      = _paymentOrderJour.ledgerJournalTrans();
        ledgerJournalTrans.selectForUpdate(true);

        _rec.AgreementHeaderExt  = AgreementHeaderExt_RU::findByAgreementId(ledgerJournalTrans.AccountAgreementId_RU).RecId;

        ledgerJournalTrans.TransDate = _rec.WriteoffDate;

        _rec.TransDate        = _rec.WriteoffDate;
        _rec.CurrencyCode     = ledgerJournalTrans.CurrencyCode;
        _rec.ExchRate         = ledgerJournalTrans.ExchRate;
        _rec.DefaultDimension = ledgerJournalTrans.DefaultDimension;

        ledgerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills payment from payment order or without it.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <remarks>
    ///     Fills outgoing and incoming payments.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     The writing off date  is not identified for cash funds.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     The date for cash funds earnings is not defined.
    /// </exception>
    public void initPayment(BankClientPayment_RU _rec)
    {
        BankPaymentOrderJour_RU paymentOrderJour;

        this.identifyCurrency(_rec);

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Outgoing)
        {
            if (_rec.WriteoffDate == dateNull())
            {
                throw error("@GLS115337");
            }
            _rec.TransDate   = _rec.WriteoffDate;
            paymentOrderJour = _rec.findPaymentOrderJour();
            if (paymentOrderJour)
            {
                _rec.Unrecognized = NoYes::No;
                this.fillPaymentByPaymentOrder(_rec, paymentOrderJour);
            }
            else
            {
                this.fillUnrecognizedPayment(_rec);
            }
        }

        if (_rec.PaymentDirection == BankClientPaymentDirection_RU::Incoming)
        {
            if (_rec.ReceiptDate == dateNull())
            {
                throw error("@GLS115338");
            }
            _rec.TransDate = _rec.ReceiptDate;
            this.fillUnrecognizedPayment(_rec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentForDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for duplicate payment.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <returns>
    ///     Returns false if record already exists; otherwise, true.
    /// </returns>
    protected boolean validatePaymentForDuplicate(BankClientPayment_RU _rec)
    {
        boolean ret = true;
        
        if (BankClientPayment_RU::exist(_rec.PaymentDirection,
            _rec.DocumentDate,
            _rec.DocumentNumber,
            _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount,
            _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount,
            _rec.AmountCur,
            _rec.CurrencyCode))
        {
            ret = checkFailed("@SYS35524");
        }

        if (BankClientPayment_RU::existBasic(_rec.PaymentDirection,
            _rec.DocumentDate,
            _rec.DocumentNumber,
            _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount,
            _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount))
        {
            _rec.Unrecognized = NoYes::Yes;
            _rec.UnrecognitionCause += "@GLS115346";
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentInnOrBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates payment on the bases of INN and bank account and
    ///     sets up payment's direction on payment record.
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <returns>
    ///     Returns true if INN or bank account is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Company's INN is not found.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Recipient's and payer's bank accounts are the same.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Not payer's INN and not recipient's INN wasn't recognized as company's INN.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     Document cannot be identified by INN or bank account.
    /// </exception>
    protected boolean validatePaymentInnOrBankAccount(BankClientPayment_RU _rec)
    {
        container   conINN;
        INN_RU      companyINN;
        BankAccount currentBankAccount, payerBankAccount, payeeBankAccount;
        boolean     isPayerBankAccount, isPayeeBankAccount;

        companyINN = CompanyInfo::find().partyINNasOfDate_RU(_rec.DocumentDate);

        if (!companyINN)
        {
            throw error (strFmt("@GLS223772", CompanyInfo::find().Name));
        }

        currentBankAccount = BankAccountTable::find(_rec.AccountID).AccountNum;
        payerBankAccount   = _rec.PayerAccount ? _rec.PayerAccount : _rec.PayerBankAccount;
        payeeBankAccount   = _rec.PayeeAccount ? _rec.PayeeAccount : _rec.PayeeBankAccount;

        isPayerBankAccount = payerBankAccount == currentBankAccount;
        isPayeeBankAccount = payeeBankAccount == currentBankAccount;
        if (isPayerBankAccount && isPayeeBankAccount)
        {
            throw error(strFmt("@GLS115348", _rec.PayerAccount));
        }

        if (_rec.PayerINN && _rec.PayeeINN && companyINN && _rec.PayeeINN != _rec.PayerINN)
        {
            if (_rec.PayerINN == companyINN)
            {
                _rec.PaymentDirection = BankClientPaymentDirection_RU::Outgoing;
                return true;
            }
            else
            if (_rec.PayeeINN == companyINN)
            {
                _rec.PaymentDirection = BankClientPaymentDirection_RU::Incoming;
                return true;
            }
            else
            {
                conINN += _rec.PayerINN;
                conINN += _rec.PayeeINN;
                throw error(strFmt("@GLS115350", con2Str(conINN, ',')));
            }
        }
        else
        {
            if (isPayerBankAccount)
            {
                _rec.PaymentDirection = BankClientPaymentDirection_RU::Outgoing;
                return true;
            }
            if (isPayeeBankAccount)
            {
                _rec.PaymentDirection = BankClientPaymentDirection_RU::Incoming;
                return true;
            }
        }

        throw error("@GLS115351");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate fields of payment
    /// </summary>
    /// <param name="_rec">
    ///     A <c>BankClientPayment_RU</c> record.
    /// </param>
    /// <returns>
    ///     Returns true if all fields are valid, otherwise false.
    /// </returns>
    protected boolean validatePayment(BankClientPayment_RU _rec)
    {
        boolean ret = true;

        _rec.Unrecognized = NoYes::Yes;

        if (! this.validatePaymentInnOrBankAccount(_rec))
        {
            ret = false;
        }

        if (! this.validatePaymentForDuplicate(_rec))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(BankClientPaymentEntity, BankClientPayment_RU):
                BankClientPayment_RU bankClientPayment = _dataSourceCtx.getBuffer();
                
                if (! this.validatePayment(bankClientPayment))
                {
                    return false;
                }

                this.initPayment(bankClientPayment);

                if (this.validatePaymentForDuplicate(bankClientPayment))
                {
                    ret = super(_entityCtx, _dataSourceCtx);
                }
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>bankclientimportedStatement_RU</FormRef>
	<Label>@GLS115244</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankClientPaymentStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BankClientPayments</PublicCollectionName>
	<PublicEntityName>BankClientPayment</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Counteragent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>AccountID</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgreementNumberLocking</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>AgreementBlocked</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>AmountCur</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankExchangeRate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>BankCurrencyDealCourse</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankTransactionType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>BankTransactionType</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Currency</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>CurrencyCode</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Counteragent</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>CustVendAC</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DefaultDimension</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DocumentDate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DocumentNumber</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DocumentTypeId</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ExchRate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Include</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Include</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>JournalNum</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CounteragentType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PartnerType</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeAccountNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeBankAccountNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeBankAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeBankAddress</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeBankAddress</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeBankBIC</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeBankBIC</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeBankCorrAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeBankCorrAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeBankName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeBankName</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeINN</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeINN</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Recipient</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeName</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayeeRegistryReasonCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayeeRRC</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerAccountNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerBankAccountNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerBankAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerBankAddress</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerBankAddress</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerBankBIC</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerBankBIC</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerBankCorrAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerBankCorrAccount</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerBankName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerBankName</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerINN</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerINN</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Payer</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerName</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PayerRegistryReasonCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PayerRRC</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentDirection</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PaymentDirection</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PurposeText</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PaymentPurpose</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Posted</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Posted</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingProfile</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>PostingProfile</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrepaymentJournalVoucher</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Prepayment</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReceiptDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>ReceiptDate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QuittanceContent</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>SlipContents</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QuittanceDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>SlipDate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QuittanceTime</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>SlipTime</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TaxGroup</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroup</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TaxItemGroup</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TransDate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyOfConversion</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>TransferCurrencyCode</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmbiguousText</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>UnidentifiedText</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ErrorCause</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>UnrecognitionCause</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Error</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Unrecognized</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>Voucher</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WithdrawalDate</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>WriteoffDate</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UCI</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>UIN</DataField>
			<DataSource>BankClientPayment_RU</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgreementId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>AgreementId</DataField>
			<DataSource>AgreementHeaderExt_RU</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PaymentDirection</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocumentNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>DocumentDate</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PayerAccountNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>PayeeAccountNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Amount</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Currency</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Dimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankClientPayment_RU</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankClientPayment_RU</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>BankClientPayment_RU</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>AgreementHeaderExt_RU</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>AgreementHeaderExt_RU</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>AgreementHeaderExt_RU_SalesAgreementHeaderExt_RU</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>SalesAgreementHeaderExt_RU</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>AgreementHeaderExt_RU_PurchAgreementHeaderExt_RU</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>PurchAgreementHeaderExt_RU</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>BankClientPayment_RU</JoinDataSource>
								<JoinRelationName>AgreementHeaderExt_RU</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>