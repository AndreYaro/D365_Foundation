<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeValueV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductAttributeValueV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateProduct();
        ret = ret && this.validateAttributeType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueV2Entity, EcoResValue)
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            this.initializeEcoResValue(_dataSourceCtx, EcoResAttributeType::findByName(this.AttributeTypeName));
        }
        else
        {
            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret = super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductAttributeValueV2Entity, EcoResAttribute):
                if (!ret)
                {
                    EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
                    ret = EcoResAttribute::findByName(this.AttributeName, ecoResAttributeType.RecId);
                }
                break;

            case dataEntityDataSourceStr(EcoResProductAttributeValueV2Entity, EcoResValue):
                if (!ret)
                {
                    EcoResProductInstanceValue ecoResProductInstanceValue = _entityCtx.getRuntimeContextByName(tableStr(EcoResProductInstanceValue)).getBuffer();
                    EcoResAttribute ecoResAttribute = _entityCtx.getRuntimeContextByName(tableStr(EcoResAttribute)).getBuffer();

                    if (ecoResProductInstanceValue
                        && ecoResAttribute)
                    {
                        EcoResAttributeValue ecoResAttributeValue = EcoResAttributeValue::findByInstanceAttribute(ecoResProductInstanceValue.RecId, ecoResAttribute.RecId);
                        ret = EcoResValue::getConcreteEcoResValueRecord(EcoResValue::find(ecoResAttributeValue.Value));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeValueV2Entity, EcoResValue))
        {
            EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.AttributeTypeName);

            if (this.isDefaultValueProvided(attributeType.DataType))
            {
                this.validateDefaultValues(_dataSourceCtx, attributeType);
            }
            else
            {
                this.fillDefaultValueFromAttribute(_dataSourceCtx, attributeType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEcoResValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize attribute values table based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_dataSourceCtx">
    ///     Datasource context.
    /// </param>
    /// <param name = "_attributeType">
    ///     An attribute data type.
    /// </param>
    protected void initializeEcoResValue(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        DictTable dictTable;
        switch (_attributeType.DataType)
        {
            case AttributeDataType::Currency:
                dictTable = new DictTable(tableNum(EcoResCurrencyValue));
                break;

            case AttributeDataType::DateTime:
                dictTable = new DictTable(tableNum(EcoResDateTimeValue));
                break;

            case AttributeDataType::Decimal:
                dictTable = new DictTable(tableNum(EcoResFloatValue));
                break;

            case AttributeDataType::Integer:
                dictTable = new DictTable(tableNum(EcoResIntValue));
                break;

            case AttributeDataType::Text:
                dictTable = new DictTable(tableNum(EcoResTextValue));
                break;

            case AttributeDataType::TrueFalse:
                dictTable = new DictTable(tableNum(EcoResBooleanValue));
                break;
        }

        if (dictTable != null)
        {
            if (_attributeType.DataType == AttributeDataType::Decimal)
            {
                EcoResFloatValue floatValue = dictTable.makeRecord();
                floatValue.FloatUnitOfMeasure = this.UnitOfMeasure ? UnitOfMeasure::findBySymbol(this.UnitOfMeasure).RecId : EcoResAttributeTypeUnitOfMeasure::findByAttributeType(_attributeType).DefaultUnitOfMeasure;
                _dataSourceCtx.setBuffer(floatValue);
            }
            else if (_attributeType.DataType == AttributeDataType::Integer)
            {
                EcoResIntValue intValue = dictTable.makeRecord();
                intValue.IntUnitOfMeasure = this.UnitOfMeasure ? UnitOfMeasure::findBySymbol(this.UnitOfMeasure).RecId : EcoResAttributeTypeUnitOfMeasure::findByAttributeType(_attributeType).DefaultUnitOfMeasure;;
                _dataSourceCtx.setBuffer(intValue);
            }
            else
            {
                _dataSourceCtx.setBuffer(dictTable.makeRecord());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultValueProvided</Name>
				<Source><![CDATA[
    protected boolean isDefaultValueProvided(AttributeDataType _attributeDataType)
    {
        boolean ret;
        switch (_attributeDataType)
        {
            case AttributeDataType::Currency:
                if (this.CurrencyValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::DateTime:
                if (this.DateTimeValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Decimal:
                if (this.DecimalValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Integer:
                if (this.IntegerValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::Text:
                if (this.TextValue)
                {
                    ret = true;
                }
                break;

            case AttributeDataType::TrueFalse:
                if (this.BooleanValue)
                {
                    ret = true;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultValues</Name>
				<Source><![CDATA[
    private void validateDefaultValues(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResValue ecoResDefaultValue = _dataSourceCtx.getBuffer();
        EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

        if (attributeDefaultValueHelper.validateDefaultValue(ecoResDefaultValue) == false)
        {
            throw error(strFmt("@SCM:DefaultValueIsNotValid", _attributeType.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttributeType</Name>
				<Source><![CDATA[
    private boolean validateAttributeType()
    {
        boolean ret = true;
        EcoResAttributeType attributeType = EcoResAttributeType::findByName(this.AttributeTypeName);
        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(attributeType.DataType))
        {
            ret = checkfailed("@SCM:ReferenceTypeIsNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProduct</Name>
				<Source><![CDATA[
    private boolean validateProduct()
    {
        boolean ret = true;
        EcoResProduct ecoResProduct = EcoResProduct::findByProductNumber(this.ProductNumber);
        if (ecoResProduct.isDistinctProductVariant())
        {
            ret = checkFailed("@SCM:ErrorProductAttributeCannotBeOnDistinctProductVariant");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValues</Name>
				<Source><![CDATA[
    private void fillDefaultValues(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);
        EcoResValue ecoResDefaultValue = attributeDefaultValueHelper.getDefaultValue();

        _dataSourceCtx.setBuffer(ecoResDefaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDefaultValueFromAttribute</Name>
				<Source><![CDATA[
    private void fillDefaultValueFromAttribute(DataEntityDataSourceRuntimeContext _dataSourceCtx, EcoResAttributeType _attributeType)
    {
        EcoResAttribute ecoResAttribute = EcoResAttribute::findByName(this.AttributeName, _attributeType.RecId);
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(ecoResAttribute.RecId);

        if (ecoResAttributeDefaultValue.RecId)
        {
            EcoResAttributeDefaultValueHelper attributeDefaultValueHelper = new EcoResAttributeDefaultValueHelper(_attributeType);

            EcoResValue ecoResDefaultValue = attributeDefaultValueHelper.getDefaultValueFromAttribute(ecoResAttributeDefaultValue);

            _dataSourceCtx.setBuffer(ecoResDefaultValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exposes the change tracking query. Will handle the following situations:
    /// -	1. Product being added to/removed from a product category
    /// -	2. Attribute group being added to/removed from a product category
    /// -	3. Attribute being added to/removed from a product attribute group
    /// -	4. Value being changed for a product attribute
    /// </summary>
    /// <returns>The change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query ctQuery = new Query();

        QueryBuildDataSource qbdsEcoResProduct = ctQuery.addDataSource(tableNum(EcoResProduct));

        QueryBuildDataSource qbdsEcoResProductCategory = qbdsEcoResProduct.addDataSource(tableNum(EcoResProductCategory));
        qbdsEcoResProductCategory.relations(true);
        qbdsEcoResProductCategory.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductCategory.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEcoResCategoryAttributeLookup = qbdsEcoResProductCategory.addDataSource(tableNum(EcoResCategoryAttributeLookup));
        qbdsEcoResCategoryAttributeLookup.addLink(fieldnum(EcoResProductCategory, Category), fieldnum(EcoResCategoryAttributeLookup, Category));
        qbdsEcoResCategoryAttributeLookup.joinMode(JoinMode::OuterJoin);
        qbdsEcoResCategoryAttributeLookup.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEcoResAttribute = qbdsEcoResCategoryAttributeLookup.addDataSource(tableNum(EcoResAttribute));
        qbdsEcoResAttribute.relations(true);
        qbdsEcoResAttribute.joinMode(JoinMode::OuterJoin);
        qbdsEcoResAttribute.fetchMode(QueryFetchMode::One2One);        
                
        QueryBuildDataSource qbdsEcoResProductInstanceValue = qbdsEcoResProduct.addDataSource(tableNum(EcoResProductInstanceValue));
        qbdsEcoResProductInstanceValue.addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductInstanceValue, Product), qbdsEcoResProduct.name());
        qbdsEcoResProductInstanceValue.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductInstanceValue.fetchMode(QueryFetchMode::One2One);
        
        QueryBuildDataSource qbdsEcoResAttributeValue = qbdsEcoResProductInstanceValue.addDataSource(tableNum(EcoResAttributeValue));
        qbdsEcoResAttributeValue.addLink(fieldNum(EcoResProductInstanceValue, RecId), fieldNum(EcoResAttributeValue, InstanceValue), qbdsEcoResProductInstanceValue.name());
        qbdsEcoResAttributeValue.joinMode(JoinMode::OuterJoin);
        qbdsEcoResAttributeValue.fetchMode(QueryFetchMode::One2One);
        
        QueryBuildDataSource qbdsEcoResValue = qbdsEcoResAttributeValue.addDataSource(tableNum(EcoResValue));
        qbdsEcoResValue.addLink(fieldNum(EcoResAttributeValue, Value), fieldNum(EcoResValue, RecId));
        qbdsEcoResValue.joinMode(JoinMode::OuterJoin);
        qbdsEcoResValue.fetchMode(QueryFetchMode::One2One);
        
        return ctQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        if (this.FloatUnitOfMeasure)
        {
            this.UnitOfMeasure = UnitOfMeasure::find(this.FloatUnitOfMeasure).Symbol;
        }
        else if (this.IntUnitOfMeasure)
        {
            this.UnitOfMeasure = UnitOfMeasure::find(this.IntUnitOfMeasure).Symbol;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:Developer_EcoResProductAttributeValueV2Entity</DeveloperDocumentation>
	<FormRef>EcoResAttributeValue</FormRef>
	<IsObsolete>Yes</IsObsolete>
	<Label>@SCM:DataEntity_EcoResProductAttributeValueV2Entity</Label>
	<Tags>Product attribute values</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductAttributeValueV2Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductAttributeValuesV2</PublicCollectionName>
	<PublicEntityName>ProductAttributeValueV2</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BooleanValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DateTimeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DecimalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntegerValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductNumber</Name>
			<DataField>DisplayProductNumber</DataField>
			<DataSource>EcoResProduct</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeTypeName</Name>
			<Label>@SCM:AttributeType</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResValue_EcoResCurrencyValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BooleanValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>BooleanValue</DataField>
			<DataSource>EcoResValue_EcoResBooleanValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateTimeValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResValue_EcoResDateTimeValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DecimalValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>FloatValue</DataField>
			<DataSource>EcoResValue_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegerValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>IntValue</DataField>
			<DataSource>EcoResValue_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TextValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>TextValue</DataField>
			<DataSource>EcoResValue_EcoResTextValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FloatUnitOfMeasure</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>FloatUnitOfMeasure</DataField>
			<DataSource>EcoResValue_EcoResFloatValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntUnitOfMeasure</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>IntUnitOfMeasure</DataField>
			<DataSource>EcoResValue_EcoResIntValue</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>UnitOfMeasure</Name>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>Product</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductV2Entity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Product</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductAttributeValues</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductV2Entity_ProductNumber</Name>
					<Field>ProductNumber</Field>
					<RelatedField>ProductNumber</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>CurrencyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>Currency</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductAttributeValues</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>CurrencyEntity_CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResProduct</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>EcoResProduct</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResProductAttributeView</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResProductAttributeView</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttribute</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>EcoResAttribute</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResProductInstanceValue</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>EcoResProductInstanceValue</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>EcoResAttributeValue</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>EcoResAttributeValue</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>EcoResValue</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>EcoResValue</Table>
														<DataSources />
														<DerivedDataSources>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResBooleanValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResBooleanValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResCurrencyValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResCurrencyValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResDateTimeValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResDateTimeValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResFloatValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResFloatValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResIntValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResIntValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>EcoResValue_EcoResTextValue</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>EcoResTextValue</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
														</DerivedDataSources>
														<Fields />
														<Ranges />
														<JoinMode>OuterJoin</JoinMode>
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<JoinRelationName>Value</JoinRelationName>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>RecId</Field>
														<JoinDataSource>EcoResProductInstanceValue</JoinDataSource>
														<RelatedField>InstanceValue</RelatedField>
													</AxQuerySimpleDataSourceRelation>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation2</Name>
														<Field>RecId</Field>
														<JoinDataSource>EcoResAttribute</JoinDataSource>
														<RelatedField>Attribute</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>EcoResProduct</JoinDataSource>
												<RelatedField>Product</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>EcoResAttributeType</Name>
										<DynamicFields>Yes</DynamicFields>
										<IsReadOnly>Yes</IsReadOnly>
										<Table>EcoResAttributeType</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges>
											<AxQuerySimpleDataSourceRange>
												<Name>DataType</Name>
												<Field>DataType</Field>
												<Status>Hidden</Status>
												<Value>!= Reference</Value>
											</AxQuerySimpleDataSourceRange>
										</Ranges>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<JoinRelationName>EcoResAttributeType</JoinRelationName>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>AttributeModifier</Name>
										<Field>AttributeModifier</Field>
										<Status>Hidden</Status>
										<Value>Catalog</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Attribute</Field>
										<JoinDataSource>EcoResProductAttributeView</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResProduct</JoinDataSource>
								<RelatedField>Product</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>