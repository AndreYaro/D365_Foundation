<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementDocumentEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankStatementDocumentEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        SysGlobalCache cache = classfactory.globalCache();

        BankStmtISOGroupHeader bankStmtISOGroupHeader;

        if (_dataSourceCtx.name() == dataentitydatasourcestr(BankStatementDocumentEntity, BankStmtISOGroupHeader))
        {
            bankStmtISOGroupHeader = _dataSourceCtx.getBuffer() as BankStmtISOGroupHeader;

            // check document
            if (!bankStmtISOGroupHeader.MessageIdentification)
            {
                bankStmtISOGroupHeader.MessageIdentification = BankStatementDocumentEntity::getStatementFileIdfromNumberSequence();

                if (bankStmtISOGroupHeader.MessageIdentification)
                {
                    _dataSourceCtx.setBuffer(bankStmtISOGroupHeader);
                }
            }
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataentitydatasourcestr(BankStatementDocumentEntity, BankStmtISODocument))
        {
            BankStmtISODocument bankFileDocument = _dataSourceCtx.getBuffer() as BankStmtISODocument;
            cache.set(
                BankStatementImportHelper::getDocumentCacheOwner(),
                BankStatementImportHelper::getDocumentCacheKey(this.DocumentLineNum),
                bankFileDocument.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankStatementStaging stmtStaging;
        BankStatementDocumentStaging docStaging;
        BankStmtISOAccountStatement statement;
        BankStmtISOPartyIdentification sender;
        BankStatementBankAccountIdentify bankAccountIdentify;
        BankAccountTable bankAccountTable;

        BankStatementImportInfoHolder infoHolder = BankStatementImportInfoHolder::find(_dmfDefinitionGroupExecution.ExecutionId, false);

        select firstonly docStaging
            where docStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && docStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && docStaging.TransferStatus == DMFTransferStatus::NotStarted;

        BankStatementDocumentEntity::initializeValidationLog(_dmfDefinitionGroupExecution);

        if (docStaging)
        {
            while select stmtStaging
                where stmtStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stmtStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && stmtStaging.TransferStatus == DMFTransferStatus::NotStarted
            {
                sender.clear();
                sender.Name = docStaging.SenderName;

                statement = BankStatementDocumentEntity::buildBankStatementFromStagingTable(stmtStaging);

                bankAccountIdentify = BankStatementBankAccountIdentify::construct();
                bankAccountTable = bankAccountIdentify.identifyBankAccountWithSenderStmt(statement, sender);

                boolean isValid;
                if (infoHolder.BankAccountId && !bankAccountIdentify.identifiedMultipleBankAccounts())
                {
                    isValid = BankStatementDocumentEntity::validateBankAccountForSingle(_dmfDefinitionGroupExecution, stmtStaging, infoHolder.BankAccountId, bankAccountTable);
                }
                else
                {
                    isValid = BankStatementDocumentEntity::validateBankAccountForMultiple(_dmfDefinitionGroupExecution, stmtStaging, bankAccountTable, statement);
                }

                if (isValid)
                {
                    ttsbegin;
                    stmtStaging.selectForUpdate(true);
                    stmtStaging.BankAccountTable = bankAccountTable.AccountID;
                    
                    if (stmtStaging.BankStatementType != BankStatementType::Reconciliation)
                    {
                        stmtStaging.BankStatementType = BankStatementType::Reconciliation;
                    }

                    stmtStaging.update();
                    ttscommit;
                }
            }

            ttsbegin;
            BankStatementDocumentEntity::deleteErrorStatements(_dmfDefinitionGroupExecution);
            ttscommit;

            if (infoHolder.BankAccountId)
            {
                ttsbegin;
                BankStatementDocumentEntity::deleteInvalidBankAccountErrorMessageForOneSucessfulSingleBankAccount(
                    _dmfDefinitionGroupExecution,
                    infoHolder.BankAccountId);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBankStatementFromStagingTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BankStmtISOAccountStatement</c> table buffer from the <c>BankStatementStaging</c> staging data.
    /// </summary>
    /// <param name = "_stmtStaging">
    /// The <c>BankStatementStaging</c> staging table buffer.
    /// </param>
    /// <returns>
    /// The initialized <c>BankStmtISOAccountStatement</c> table buffer.
    /// </returns>
    [Wrappable(true)]
    protected final static BankStmtISOAccountStatement buildBankStatementFromStagingTable(BankStatementStaging _stmtStaging)
    {
        BankStmtISOAccountStatement statement;

        statement.clear();
        statement.AccountIdOtherId = _stmtStaging.AccountIdOtherId;
        statement.IBAN = _stmtStaging.IBAN;
        statement.SwiftNo = _stmtStaging.SwiftNo;

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvalidBankAccountErrorMessageForOneSucessfulSingleBankAccount</Name>
				<Source><![CDATA[
    private static void deleteInvalidBankAccountErrorMessageForOneSucessfulSingleBankAccount(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, CompanyBankAccountId _singleBankAccount)
    {
        BankStatementStaging stmtStaging;

        select firstonly RecId from stmtStaging
            where stmtStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && stmtStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && stmtStaging.TransferStatus == DMFTransferStatus::NotStarted
                && stmtStaging.BankAccountTable != '';

        if (stmtStaging)
        {
            ErrorMsg errorMessage = strFmt("@CashManagement:BankStatementImportBankAccountValidation", _singleBankAccount);

            DMFStagingValidationLog log;

            delete_from log
                where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
                    && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && log.StagingTableName == tableStr(BankStatementStaging)
                    && log.StagingColumnName == fieldStr(BankStatementStaging, BankAccountTable)
                    && log.EntityName == "@SYS316320"
                    && log.ErrorMessage == errorMessage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteErrorStatements</Name>
				<Source><![CDATA[
    private static void deleteErrorStatements(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankStatementStaging stmtStaging;

        BankStatementLineStaging stmtLineStaging;
        delete_from stmtLineStaging
            where stmtLineStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && stmtLineStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && stmtLineStaging.TransferStatus == DMFTransferStatus::NotStarted
            exists join stmtStaging
                where stmtStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stmtStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && stmtStaging.TransferStatus == DMFTransferStatus::NotStarted
                    && stmtStaging.DocumentLineNum == stmtLineStaging.DocumentLineNum
                    && stmtStaging.StatementLineNum == stmtLineStaging.StatementLineNum
                    && stmtStaging.BankAccountTable == '';

        BankStatementBalanceStaging stmtBalanceStaging;
        delete_from stmtBalanceStaging
            where stmtBalanceStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && stmtBalanceStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && stmtBalanceStaging.TransferStatus == DMFTransferStatus::NotStarted
            exists join stmtStaging
                where stmtStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stmtStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && stmtStaging.TransferStatus == DMFTransferStatus::NotStarted
                    && stmtStaging.DocumentLineNum == stmtBalanceStaging.DocumentLineNum
                    && stmtStaging.StatementLineNum == stmtBalanceStaging.StatementLineNum
                    && stmtStaging.BankAccountTable == '';

        //update_recordset stmtStaging
        delete_from stmtStaging
                where stmtStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && stmtStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && stmtStaging.TransferStatus == DMFTransferStatus::NotStarted
                    && stmtStaging.BankAccountTable == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountForSingle</Name>
				<Source><![CDATA[
    private static boolean validateBankAccountForSingle(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        BankStatementStaging _statementStaging,
        CompanyBankAccountId _singleBankAccount,
        BankAccountTable _searchedBankAccount)
    {
        boolean isValid = true;

        if (_singleBankAccount != _searchedBankAccount.AccountID
            || curExt() != _searchedBankAccount.DataAreaId)
        {
            ErrorMsg errorMessage = strFmt("@CashManagement:BankStatementImportBankAccountValidation", _singleBankAccount);
            boolean hasMessageBeenLoggedOnce = BankStatementDocumentEntity::doesLogStatementValidationMessageExist(_dmfDefinitionGroupExecution, _statementStaging, errorMessage);
            if (!hasMessageBeenLoggedOnce)
            {
                BankStatementDocumentEntity::logStatementValidationMessage(_dmfDefinitionGroupExecution, _statementStaging, errorMessage);
            }
            isValid = false;
        }

        if (isValid)
        {
            changecompany(_searchedBankAccount.DataAreaId)
            {
                if (!BankAccountTable::isAdvancedBankReconciliationEnabled(_searchedBankAccount.AccountID))
                {
                    ErrorMsg errorMessage = strFmt("@CashManagement:AdvancedBankReconciliationNotEnabled", _searchedBankAccount.AccountID, _searchedBankAccount.DataAreaId);
                    BankStatementDocumentEntity::logStatementValidationMessage(_dmfDefinitionGroupExecution, _statementStaging, errorMessage);
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountForMultiple</Name>
				<Source><![CDATA[
    private static boolean validateBankAccountForMultiple(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        BankStatementStaging _statementStaging,
        BankAccountTable _searchedBankAccount,
        BankStmtISOAccountStatement _statement)
    {
        boolean isValid = true;

        if (!_searchedBankAccount || !_searchedBankAccount.AccountID)
        {
            str elementsSearched;
            boolean firstElementSearchedFound;

            BankSecurityUtility bankSecurityUtility = new BankSecurityUtility();
            if (bankSecurityUtility.canMask(_statement.AccountIdOtherId))
            {
                elementsSearched = "@CashManagement:BankAccountNumber" + ' ' + bankSecurityUtility.mask(_statement.AccountIdOtherId);
                firstElementSearchedFound = true;
            }

            if (bankSecurityUtility.canMask(_statement.IBAN))
            {
                if (firstElementSearchedFound)
                {
                    elementsSearched = elementsSearched + ', ';
                }
                elementsSearched = elementsSearched + "@SYS71686" + ' ' + bankSecurityUtility.mask(_statement.IBAN);
            }

            if (bankSecurityUtility.canMask(_statement.SwiftNo))
            {
                if (firstElementSearchedFound)
                {
                    elementsSearched = elementsSearched + ', ';
                }
                elementsSearched = elementsSearched + "@SYS9360" + ' ' + bankSecurityUtility.mask(_statement.SwiftNo);
            }

            ErrorMsg errorMessage = strFmt("@CashManagement:BankAccountForStatementNotFound", elementsSearched);
            BankStatementDocumentEntity::logStatementValidationMessage(_dmfDefinitionGroupExecution, _statementStaging, errorMessage);
            isValid = false;
        }
        else
        {
            changecompany(_searchedBankAccount.DataAreaId)
            {
                if (!BankAccountTable::isAdvancedBankReconciliationEnabled(_searchedBankAccount.AccountID))
                {
                    ErrorMsg errorMessage = strFmt("@CashManagement:AdvancedBankReconciliationNotEnabled", _searchedBankAccount.AccountID, _searchedBankAccount.DataAreaId);
                    BankStatementDocumentEntity::logStatementValidationMessage(_dmfDefinitionGroupExecution, _statementStaging, errorMessage);
                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeValidationLog</Name>
				<Source><![CDATA[
    private static void initializeValidationLog(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFStagingValidationLog log;
        log.skipDataMethods(true);

        delete_from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStatementValidationMessage</Name>
				<Source><![CDATA[
    private static void logStatementValidationMessage(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        BankStatementStaging _statementStaging,
        ErrorMsg _errorMessage)
    {
        DMFStagingValidationLog log;

        log.DefinitionGroupName = _dmfDefinitionGroupExecution.DefinitionGroup;
        log.ExecutionId = _dmfDefinitionGroupExecution.ExecutionId;
        log.StagingRecId = _statementStaging.Recid;
        log.StagingTableName = tableStr(BankStatementStaging);
        log.StagingColumnName = fieldStr(BankStatementStaging, BankAccountTable);
        log.EntityName = "@SYS316320";
        log.ErrorMessage = _errorMessage;

        log.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLogStatementValidationMessageExist</Name>
				<Source><![CDATA[
    private static boolean doesLogStatementValidationMessageExist(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        BankStatementStaging _statementStaging,
        ErrorMsg _errorMessage)
    {
        boolean doesLogStatementValidationMessageExist;
        DMFStagingValidationLog log;

        select firstonly RecId from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
                && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && log.StagingRecId == _statementStaging.Recid
                && log.StagingTableName == tableStr(BankStatementStaging)
                && log.StagingColumnName == fieldStr(BankStatementStaging, BankAccountTable)
                && log.EntityName == "@SYS316320"
                && log.ErrorMessage == _errorMessage;

        if (log)
        {
            doesLogStatementValidationMessageExist = true;
        }

        return doesLogStatementValidationMessageExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        SysGlobalCache cache = classfactory.globalCache();
        BankStmtISOAccountStatement importedStatement;

        RecId docId = cache.get(BankStatementImportHelper::getDocumentCacheOwner(), BankStatementImportHelper::getDocumentCacheKey());
        if (docId)
        {
            ttsbegin;

            while select importedStatement
                where importedStatement.BankStmtISODocument == docId
            {
                importedStatement.selectForUpdate(true);
                importedStatement.initBalances();
                importedStatement.update();
            }

            ttscommit;
        }

        BankStatementImportInfoHolder infoHolder = BankStatementImportInfoHolder::find(_dmfDefinitionGroupExecution.ExecutionId, true);
        if (infoHolder)
        {
            ttsbegin;
            infoHolder.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementFileIdfromNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the statement file id from number sequence.
    /// </summary>
    /// <returns>
    /// The statement file id.
    /// </returns>
    private static Voucher getStatementFileIdfromNumberSequence()
    {
        Voucher voucher;

        NumberSequenceReference numberSeqReference = BankParameters::numRefBankStatementDownloadId();
        if (numberSeqReference)
        {
            // Get the voucher number
            RefRecId numberSequenceTableRecId = numberSeqReference.numberSequenceTable().RecId;
            if (numberSequenceTableRecId)
            {
                voucher = NumberSeq::newGetVoucherFromId(numberSequenceTableRecId, true).voucher();
            }
            else
            {
                // The group message id must be specified in the file or in the number sequence.
                throw error("@SYS4002980");
            }
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.DataAreaId && this.DataAreaId != curExt())
        {
            changecompany(this.DataAreaId)
            {
                super();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankElectronicBanking</ConfigurationKey>
	<Label>@SYS316318</Label>
	<Tags>Statement</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankStatementDocumentStaging</DataManagementStagingTable>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatName</Name>
			<DataField>FormatName</DataField>
			<DataSource>BankStmtISODocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormatVersion</Name>
			<DataField>FormatVersion</DataField>
			<DataSource>BankStmtISODocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>GroupHeader</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>GroupHeader</DataField>
			<DataSource>BankStmtISODocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BlockSize</Name>
			<DataField>BlockSize</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreationDateTime</Name>
			<DataField>CreationDateTime</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MessageIdentification</Name>
			<DataField>MessageIdentification</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MessageRecipient</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>MessageRecipient</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MessageSender</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>MessageSender</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PhysicalRecordLength</Name>
			<DataField>PhysicalRecordLength</DataField>
			<DataSource>BankStmtISOGroupHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RecipientId</Name>
			<DataField>PartyIdOrganisationGenericOrgId</DataField>
			<DataSource>Recipient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RecipientName</Name>
			<DataField>Name</DataField>
			<DataSource>Recipient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>DocumentLineNum</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>BankAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankStatementDocumentRecId</Name>
			<Mandatory>No</Mandatory>
			<DataField>RecId</DataField>
			<DataSource>BankStmtISODocument</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SenderName</Name>
			<DataField>Name</DataField>
			<DataSource>Sender</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SenderId</Name>
			<DataField>PartyIdOrganisationGenericOrgId</DataField>
			<DataSource>Sender</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DocumentLineNum</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankStmtISODocument</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankStmtISODocument</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankStmtISOGroupHeader</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOGroupHeader</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Recipient</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>BankStmtISOPartyIdentification</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>MessageRecipient</Field>
										<JoinDataSource>BankStmtISOGroupHeader</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Sender</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>BankStmtISOPartyIdentification</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>MessageSender</Field>
										<JoinDataSource>BankStmtISOGroupHeader</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BankStmtISOGroupHeader</Name>
								<JoinRelationName>BankStmtISOGroupHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>