<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseRequisitionHeaderV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchaseRequisitionHeaderV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(PurchaseRequisitionHeaderV2Entity, RequisitionNumber), PurchParameters::numRefPurchReqId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || _entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            switch (_dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqTable):
                    this.validateCurrentUserMayInsertOrUpdate(_entityCtx, _dataSourceCtx);
                    this.setCompanyContextForProject(_dataSourceCtx);
                    break;

                case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqBusJustification):
                    PurchReqBusJustification purchReqBusJustification =_dataSourceCtx.getBuffer();
                    purchReqBusJustification.RefTableId = tableNum(PurchReqTable);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqBusJustification):
                // PurchReqTable insert also creates a PurchReqBusJustification record, causing conflict when we try to insert. This, combined with detectConflict... in insertEntityDataSource solves this.
                ret = PurchReqBusJustification::findLine(tableNum(PurchReqTable), this.RecId);
                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqTable):
                this.validateWritePurchReqTableDataSource(_dataSourceCtx);
                break;

            case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqBusJustification):
                // Avoid conflix on insert, as PurchReqTable insert has caused PurchReqBusJustification to be created.
                _entityCtx.detectConflictForDatasource(_dataSourceCtx);
                break;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(PurchaseRequisitionHeaderV2Entity, PurchReqTable):
                PurchReqTable purchReq = _dataSourceCtx.getBuffer();
                this.validateUpdatePurchReqTableDataSource(purchReq, _dataSourceCtx);
                break;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyContextForProject</Name>
				<Source><![CDATA[
    private void setCompanyContextForProject(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (   this.isFieldSet(fieldNum(PurchaseRequisitionHeaderV2Entity, DefaultProjectId)) 
            && this.DefaultProjectId
            && this.isFieldSet(fieldNum(PurchaseRequisitionHeaderV2Entity, ProjectBuyingLegalEntityId))
            && this.ProjectBuyingLegalEntityId)
        {
            _dataSourceCtx.setCompany(this.ProjectBuyingLegalEntityId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePurchReqTableDataSource</Name>
				<Source><![CDATA[
    private void validateWritePurchReqTableDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean isValid = true;

       PurchReqTable purchReqTable = _dataSourceCtx.getBuffer() as PurchReqTable;
       isValid = purchReqTable.validateCoexistenceOfProjectAndBuyingLegalEntity();

        if (!isValid)
        {
            _dataSourceCtx.throwValidateWriteFailed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrentUserMayInsertOrUpdate</Name>
				<Source><![CDATA[
    private void validateCurrentUserMayInsertOrUpdate(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // For editing in excel (OData) enforce restrictions from UI that Preparer will be current worker 
        // (for data migration via data management we want to allow an admin to import purchase requisitions irrespective of who is the Preparer)
        if (!this.isEntityInDataManagementContext())
        {
            DataEntityDatabaseOperation dbOperation = _entityCtx.getDatabaseOperation();
            switch (dbOperation)
            {
                case DataEntityDatabaseOperation::Insert:            
                    if (this.isFieldSet(fieldNum(PurchaseRequisitionHeaderV2Entity, PreparerPersonnelNumber)))                        
                    {
                        this.checkCurrentUserIsPreparer(_dataSourceCtx);
                    }
                    break;

                case DataEntityDatabaseOperation::Update:
                    this.checkCurrentUserIsPreparer(_dataSourceCtx);
                    break;
                                        
                default:
                    break;
            }
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrentUserIsPreparer</Name>
				<Source><![CDATA[
    private void checkCurrentUserIsPreparer(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (this.PreparerPersonnelNumber)
        {
            if (HcmWorker::findByPersonnelNumber(this.PreparerPersonnelNumber).RecId != HcmWorkerLookup::currentWorker())
            {
                _dataSourceCtx.throwValidateWriteFailed("@SCM:PreparerMustBeCurrentWorker");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePurchReqTableDataSource</Name>
				<Source><![CDATA[
    private void validateUpdatePurchReqTableDataSource(PurchReqTable _purchReqTable, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (!_purchReqTable.isInferredDraft())
        {
            _dataSourceCtx.throwValidateWriteFailed(strFmt("@SCM:PurchaseRequisitionHeaderEntityOnlySupportsUpdateForStatusInferredDraft", 
                _purchReqTable.PurchReqId, _purchReqTable.RequisitionStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the purchase requisition details from based on the selected record in the staging table.
    /// </summary>
    /// <param name="_menuItemName">
    /// This name of the menu item to open.
    /// </param>
    /// <param name="_buffer">
    /// The staging record selected.
    /// </param>
    /// <param name="_caller">
    /// This caller.
    /// </param>
    /// <param name="_dataArea">
    /// The legal entity Id of the caller context.
    /// </param>
    public static void jumpRefMethod(MenuItemName _menuItemName, PurchaseRequisitionHeaderStaging _buffer, object _caller, DataAreaId _dataAreaId)
    {
        Args args = new Args();

        if (_buffer.RequisitionNumber)
        {
            var record = PurchReqTable::findPurchReqId(_buffer.RequisitionNumber);
            args.record(record);
        }
        else
        {
            args.lookupValue(_buffer.RequisitionName);
            args.lookupField(fieldNum(PurchReqTable, PurchReqName));
        }

        MenuFunction::runCalled(_menuItemName, MenuItemType::Display, false, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        XDSServices services;
        str prevXdsContext;
        boolean accessToPurchReqTableAll = PurchReqTableHcmWorkersPolicyHandler::checkCurrentUserAccessToPurchReqTableAll();

        try
        {
            if (!accessToPurchReqTableAll)
            {
                services = new XDSServices();
                prevXdsContext = PurchReqTableHcmWorkersPolicyHandler::getCurrentXdsContextString(services);
                PurchReqTableHcmWorkersPolicyHandler::setCurrentXdsContextString(services);
            }
            super(_entityCtx, _dataSourceCtx);
        }
        finally
        {
            if (!accessToPurchReqTableAll)
            {
                PurchReqTableHcmWorkersPolicyHandler::setCurrentXdsContextString(services, prevXdsContext);
            }
                
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PurchaseRequisitionHeaderV2EntityDevdoc</DeveloperDocumentation>
	<FormRef>PurchReqTable</FormRef>
	<Label>@SCM:PurchaseRequisitionHeaderV2EntityLabel</Label>
	<Tags>Purchase requisition</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>PurchaseRequisitionHeaderV2Staging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PurchaseRequisitionHeaders</PublicCollectionName>
	<PublicEntityName>PurchaseRequisitionHeader</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitionNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreparerPersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionPurpose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultRequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultAccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBusinessJustificationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultBusinessJustificationDetails</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectBuyingLegalEntityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPurchaseRequisitionOnHold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHoldExplanation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequisitionNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PurchReqId</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequisitionName</Name>
			<DataField>PurchReqName</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreparerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Originator</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreparerPersonnelNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS127775</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>Originator</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequisitionStatus</Name>
			<DataField>RequisitionStatus</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RequisitionPurpose</Name>
			<DataField>RequisitionPurpose</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultRequestedDate</Name>
			<DataField>RequiredDate</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultAccountingDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultBusinessJustificationRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BusinessJustification</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultBusinessJustificationCode</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Reason</DataField>
			<DataSource>PurchReqBusinessJustificationCodes</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultBusinessJustificationDetails</Name>
			<DataField>BusinessJustification</DataField>
			<DataSource>PurchReqBusJustification</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectBuyingLegalEntityRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CompanyInfoDefault</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectBuyingLegalEntityId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS342437</Label>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfoDefault</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultProjectId</Name>
			<DataField>ProjId</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPurchaseRequisitionOnHold</Name>
			<DataField>OnHold</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OnHoldExplanation</Name>
			<DataField>HoldExplanation</DataField>
			<DataSource>PurchReqTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>RequisitionNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>PurchReqTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>PurchReqTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyInfoDefault</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CompanyInfo</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CompanyInfoDefault</Name>
								<JoinRelationName>CompanyInfo</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Originator</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>Originator</Name>
								<JoinRelationName>HcmWorker</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PurchReqBusinessJustificationCodes</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>PurchReqBusinessJustificationCodes</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>PurchReqBusinessJustificationCodes</Name>
								<JoinRelationName>PurchReqBusinessJustificationCodes</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PurchReqBusJustification</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PurchReqBusJustification</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>RefTableId</Name>
								<Field>RefTableId</Field>
								<Value>(PurchaseRequisitionEntityHelper::getPurchaseRequsitionHeaders())</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>PurchReqTable</JoinDataSource>
								<RelatedField>RefRecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>