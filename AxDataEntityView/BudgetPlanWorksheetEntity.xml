<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanWorksheetEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

public class BudgetPlanWorksheetEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the <c>BudgetPlanHeader</c> early so that the <c>BudgetPlanLineActiveView</c> can be correctly validated.
    /// </summary>
    /// <param name = "_entityCtx">The context for the data entity.</param>
    /// <param name = "_dataSourceCtx">The context for the data source.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanLineActiveView))
        {
            BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);
            if (!budgetPlanHeader)
            {
                throw  error(strFmt("@Budget:BudgetPlanDocumentDoesNotExist", this.DocumentNumber));
            }

            DataEntityDataSourceRuntimeContext dsCtx = _entityCtx.getRuntimeContextByName(dataentitydatasourcestr(BudgetPlanWorksheetEntity, BudgetPlanHeader));
            dsCtx.setBuffer(budgetPlanHeader);
            dsCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            dsCtx.setDataSaved(true);

            BudgetPlanLineActiveView budgetPlanLineActiveView = _dataSourceCtx.getBuffer() as BudgetPlanLineActiveView;
            budgetPlanLineActiveView.BudgetPlanHeader = budgetPlanHeader.RecId;
        }

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanHeader))
        {
            BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanLayout::findByName(this.Layout).RecId;
            if (!budgetPlanLayoutRecId)
            {
                throw  error(strFmt("@Budget:BudgetPlanLayoutDoesNotExist", this.Layout));
            }

            BudgetPlanHeader targetBudgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);
            if (targetBudgetPlanHeader && targetBudgetPlanHeader.Layout != budgetPlanLayoutRecId)
            {
                throw error(strFmt("@Budget:BudgetPlanDifferentLayout", this.DocumentNumber, this.Layout));
            }

            BudgetPlanHeader budgetPlanHeader = _dataSourceCtx.getBuffer() as BudgetPlanHeader;
            budgetPlanHeader.Layout = budgetPlanLayoutRecId;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);
            if (budgetPlanHeader)
            {
                // Validate under the context of the data area ID associated with the BudgetPlanHeader.
                changecompany(BudgetPlan::getDataAreaId(budgetPlanHeader.RecId))
                {
                    isValid = !BudgetPlan::isUserBlocked(budgetPlanHeader, true);

                    if (isValid && !this.canEditBudgetPlan(budgetPlanHeader))
                    {
                        isValid = checkFailed(strFmt("@Budget:BudgetPlanWorksheetCannotBeModified", this.DocumentNumber, budgetPlanHeader.WorkflowStatus));
                    }

                    if (isValid && budgetPlanHeader.DocumentStatus == BudgetPlanStatus::Finalized)
                    {
                        isValid = checkFailed(strFmt("@Budget:BudgetPlanWorksheetCannotBeModified", this.DocumentNumber, budgetPlanHeader.DocumentStatus));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditBudgetPlan</Name>
				<Source><![CDATA[
    private boolean canEditBudgetPlan(BudgetPlanHeader _budgetPlanHeader)
    {
        boolean canEdit;

        container cachedValue = BudgetPlanCache::getValue(
            BudgetPlanCacheScope::HeaderValidation,
            [_budgetPlanHeader.RecId, curUserId(), BudgetPlanHeaderAction::CanEdit]);

        if (cachedValue != conNull())
        {
            canEdit = conPeek(cachedValue, 1);
        }
        else
        {
            BudgetPlanInteractionHelper budgetPlanInteractionHelper = BudgetPlanInteractionHelper::newFromBudgetPlanHeader(_budgetPlanHeader);

            canEdit = budgetPlanInteractionHelper.allowEditBudgetPlan();

            BudgetPlanCache::insertValue(
                BudgetPlanCacheScope::HeaderValidation,
                [_budgetPlanHeader.RecId, curUserId(), BudgetPlanHeaderAction::CanEdit],
                [canEdit]);
        }

        return canEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber);
            if (budgetPlanHeader)
            {
                isValid = !BudgetPlan::isUserBlocked(budgetPlanHeader, true);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        BudgetPlanActiveView::setDimensionNameValues(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available line number for the <c>BudgetPlanWorksheetEntity</c> table records.
    /// </summary>
    /// <returns> The next line number to be used. </returns>
    public LineNum getNextLineNum()
    {
        return (select maxof(LineNumber) from BudgetPlanWorksheetEntity where BudgetPlanWorksheetEntity.BudgetPlanHeader == BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber).RecId).LineNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        super();

        this.LineNumber = this.LineNumber == 0 ? this.getNextLineNum() : this.LineNumber;

        if (this.AssetId || this.ProjectId)
        {
            this.SourceDataAreaId = BudgetPlan::getDataAreaId(BudgetPlanHeader::findByDocumentNumber(this.DocumentNumber).RecId);
        }
        else
        {
            this.SourceDataAreaId = BudgetPlanningConstants::emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the corresponding lookup <c>Query</c> object for a given <c>TableId</c> value.
    /// </summary>
    /// <param name = "_tableId">The <c>TableId</c> value to retrieve a query for.</param>
    /// <param name = "_ledger">The <c>Ledger</c> record used for dimension value queries; optional.</param>
    /// <param name = "_dimensionAttribute">The <c>DimensionAttribute</c> record used for dimension value queries; optional.</param>
    /// <returns>The <c>Query</c> object.</returns>
    public static Query getQuery(TableId _tableId, Ledger _ledger, DimensionAttribute _dimensionAttribute)
    {
        Query query;

        switch (_tableId)
        {
            case (tableNum(AssetTable)):
                query = BudgetPlanLookupHelper::getAssetTableQuery();
                break;
            case (tableNum(ProjTable)):
                query = BudgetPlanLookupHelper::getProjTableQuery();
                break;
            case (tableNum(HcmPosition)):
                query = BudgetPlanLookupHelper::getHcmPositionTableQuery();
                break;
            case (tableNum(BudgetPlanProposedAsset)):
                query = new Query();
                query.addDataSource(tableNum(BudgetPlanProposedAsset));
                break;
            case (tableNum(BudgetPlanProposedProject)):
                query = new Query();
                query.addDataSource(tableNum(BudgetPlanProposedProject));
                break;
            case (tableNum(DimensionAttributeValue)):
                query = BudgetPlanLookupHelper::getDimensionValueQuery(_dimensionAttribute, _ledger);
                break;
            case (tableNum(Currency)):
                query = new Query();
                query.addDataSource(tableNum(Currency));
                break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records from a <c>QueryRun</c> object into a <c>OfficeAppCustomListResult</c> object.
    /// </summary>
    /// <param name = "_tableId">The <c>TableId</c> of the records being inserted, used to determine which record field to display.</param>
    /// <param name = "_fieldName">The <c>FieldName</c> of the record field to insert.</param>
    /// <param name = "_queryRun">The <c>QueryRun</c> object which contains the records to insert.</param>
    /// <param name = "_dimensionAttribute">The <c>DimensionAttribute</c> record for dimension value records; optional.</param>
    /// <returns>The <c>OfficeAppCustomLookupListResult</c> object.</returns>
    public static OfficeAppCustomLookupListResult insertRecords(TableId _tableId, FieldName _fieldName, QueryRun _queryRun, DimensionAttribute _dimensionAttribute = null)
    {
        OfficeAppCustomLookupListResult lookupList = new OfficeAppCustomLookupListResult();

        while (_queryRun.next())
        {
            Common record = _queryRun.getNo(1);

            if (_tableId == tableNum(DimensionAttributeValue))
            {
                DimensionAttributeViewContract  dimAttrViewContract = DimensionAttribute::getViewContract(_dimensionAttribute.RecId);
                lookupList.items().value(lookupList.items().lastIndex() + 1, record.getFieldValue(dimAttrViewContract.parmValueFieldName()));
            }
            else
            {
                lookupList.items().value(lookupList.items().lastIndex() + 1, record.getFieldValue(_fieldName));
            }
        }

        return lookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all record values into a <c>OfficeAppCustomLookupListResult</c> object used in the Excel lookup.
    /// </summary>
    /// <param name = "_documentNumber">The <c>BudgetPlanDocumentNumber</c> of the currently opened plan.</param>
    /// <param name = "_tableId">The <c>TableId</c> of the records to insert.</param>
    /// <param name = "_fieldName">The <c>FieldName</c> of the record field to insert; optional.</param>
    /// <param name = "_dimensionAttribute">The <c>DimensionAttribute</c> record for dimension value lookups; optional.</param>
    /// <returns>The <c>OfficeAppCustomLookupListResult</c> object.</returns>
    public static OfficeAppCustomLookupListResult fillRecordList(BudgetPlanDocumentNumber _documentNumber, TableId _tableId, FieldName _fieldName = null, DimensionAttribute _dimensionAttribute = null)
    {
        Ledger      ledger = Ledger::find(BudgetPlanningProcess::find(BudgetPlanHeader::findByDocumentNumber(_documentNumber).BudgetPlanningProcess).Ledger);
        QueryRun    queryRun = new QueryRun(BudgetPlanWorksheetEntity::getQuery(_tableId, ledger, _dimensionAttribute));

        OfficeAppCustomLookupListResult lookupList;
        switch (_tableId)
        {
            case (tableNum(AssetTable)):
            case (tableNum(ProjTable)):
                changecompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(ledger.RecId)))
                {
                    lookupList = BudgetPlanWorksheetEntity::insertRecords(_tableId, _fieldName, queryRun);
                }
                break;
            default:
                lookupList = BudgetPlanWorksheetEntity::insertRecords(_tableId, _fieldName, queryRun, _dimensionAttribute);
                break;
        }

        return lookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerializedLookupForLookupEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a serialized lookup <c>str</c> value for a lookup entity.
    /// </summary>
    /// <param name = "_fieldMap"> The <c>Map</c> object containing the field-value pairs of the current worksheet. </param>
    /// <param name = "_determinationField"> The <c>FieldName</c> value of the worksheet field to place any user selection in. </param>
    /// <param name = "_entityName"> The <c>TableName</c> value of the entity to use as the lookup base. </param>
    /// <param name = "_entityFieldName"> The <c>FieldName</c> value of the lookup entity to use as the value to place in the determination field. </param>
    /// <param name = "_filter"> A <c>str</c> value of a filter to apply to the lookup entity selection; optional. </param>
    /// <returns> The serialized lookup <c>str</c> value. </returns>
    public static str getSerializedLookupForLookupEntity(Map _fieldMap, FieldName _determinationField, TableName _entityName, FieldName _entityFieldName, str _filter = BudgetPlanningConstants::emptyString)
    {
        OfficeAppCustomLookupRelationResult result = new OfficeAppCUstomLookupRelationResult();
        result.determinationFields().value(1, _determinationField);

		str resultStr;

        if (OfficeAppCustomLookupHelper::fieldsBound(result.determinationFields(), _fieldMap))
        {
            result.entityName(ExportToExcelMetadataCache::getEntity(_entityName).PublicEntityName);
            result.fieldName(_entityFieldName);

            if (_filter)
            {
                result.filter(_filter);
            }

            resultStr = result.serialize();
        }

        return resultStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue1Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue1</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue1CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue1')]
    public static str dimensionValue1Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));

        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue1)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue2Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue2</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue2CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue2')]
    public static str dimensionValue2Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue2)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue3Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue3</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue3CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue3')]
    public static str dimensionValue3Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue3)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue4Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue4</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue4CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue4')]
    public static str dimensionValue4Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue4)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue5Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue5</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue5CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue5')]
    public static str dimensionValue5Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue5)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue6Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue6</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue6CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue6')]
    public static str dimensionValue6Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue6)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue7Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue7</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue7CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue7')]
    public static str dimensionValue7Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue7)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue8Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue8</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue8CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue8')]
    public static str dimensionValue8Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue8)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue9Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue9</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue9CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue9')]
    public static str dimensionValue9Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue9)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue10Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue10</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue10CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue10')]
    public static str dimensionValue10Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue10)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValue11Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>DimensionValue11</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityDimensionValue11CustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('DimensionValue11')]
    public static str dimensionValue11Lookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanLayoutName layoutName = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, Layout));
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        DimensionAttribute dimensionAttribute =  DimensionAttribute::findByName(
                                                    BudgetPlanLayoutMapping::findByLayoutFieldNum(
                                                        BudgetPlanLayout::findByLocalizedName(fieldValueMap.lookup(layoutName)).RecId,
                                                        fieldNum(BudgetPlanLineActiveView, DimensionValue11)).FieldLabel);

        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(DimensionAttributeValue),  BudgetPlanningConstants::emptyString, dimensionAttribute).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>AssetId</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityAssetIdCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('AssetId')]
    public static str assetIdLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        DataAreaId dataAreaId = BudgetPlan::getDataAreaId(BudgetPlanHeader::findByDocumentNumber(fieldMap.lookup(fieldStr(BudgetPlanWorksheetEntity, DocumentNumber))).RecId);

        ExportToExcelFilterTreeBuilder filterBuilder    = new ExportToExcelFilterTreeBuilder(tableStr(BudgetPlanAssetLookupEntity));
        FilterBinaryNode dataAreaIdFilter	            = filterBuilder.areEqual(fieldStr(BudgetPlanAssetLookupEntity, DataAreaId), dataAreaId);

        return BudgetPlanWorksheetEntity::getSerializedLookupForLookupEntity(
                fieldMap,
                fieldStr(BudgetPlanWorksheetEntity, AssetId),
                tableStr(BudgetPlanAssetLookupEntity),
                fieldStr(BudgetPlanAssetLookupEntity, AssetId),
                dataAreaIdFilter.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>ProjectId</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityProjectIdCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('ProjectId')]
    public static str projectIdLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        DataAreaId dataAreaId = BudgetPlan::getDataAreaId(BudgetPlanHeader::findByDocumentNumber(fieldMap.lookup(fieldStr(BudgetPlanWorksheetEntity, DocumentNumber))).RecId);

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(tableStr(BudgetPlanProjectLookupEntity));

        FilterBinaryNode dataAreaIdFilter	= filterBuilder.areEqual(fieldStr(BudgetPlanProjectLookupEntity, DataAreaId), dataAreaId);
        FilterBinaryNode statusFilters		= filterBuilder.areEqual(fieldStr(BudgetPlanProjectLookupEntity, ProjectStatusRule), ProjStatusRule::CreateForecast);
        FilterCollectionNode projectFilters	= filterBuilder.and(dataAreaIdFilter, statusFilters);

        return BudgetPlanWorksheetEntity::getSerializedLookupForLookupEntity(
            fieldMap,
            fieldStr(BudgetPlanWorksheetEntity, ProjectId),
            tableStr(BudgetPlanProjectLookupEntity),
            fieldStr(BudgetPlanProjectLookupEntity, ProjectId),
            projectFilters.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposedAssetNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>ProposedAssetName</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityProposedAssetNameCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('ProposedAssetName')]
    public static str proposedAssetNameLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);

        return BudgetPlanWorksheetEntity::getSerializedLookupForLookupEntity(
            fieldMap,
            fieldStr(BudgetPlanWorksheetEntity, ProposedAssetName),
            tableStr(BudgetPlanProposedAssetEntity),
            fieldStr(BudgetPlanProposedAssetEntity, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposedProjectNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>ProposedProjectName</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityProposedProjectNameCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('ProposedProjectName')]
    public static str proposedProjectNameLookup(Array _fields)
    {
        Map fieldMap = OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);

        return BudgetPlanWorksheetEntity::getSerializedLookupForLookupEntity(
            fieldMap,
            fieldStr(BudgetPlanWorksheetEntity, ProposedProjectName),
            tableStr(BudgetPlanProposedProjectEntity),
            fieldStr(BudgetPlanProposedProjectEntity, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> object used in a lookup for the <c>PositionId</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityPositionIdCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('PositionId')]
    public static str positionIdLookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(HcmPosition), fieldStr(HcmPosition, PositionId)).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyCodeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a serialized <c>str</c> value used in a lookup for the <c>TransactionCurrencyCode</c> field on the Excel spreadsheet.
    /// </summary>
    /// <param name = "_fields"> The <c>Array</c> object containing JSON object of the field information. </param>
    /// <returns> The <c>str</c> value of the lookup. </returns>
    [SysODataActionAttribute('BudgetPlanWorksheetEntityTransactionCurrencyCodeCustomLookup', false),
        SysODataCollectionAttribute('_fields', Types::String),
        SysODataFieldLookupAttribute('TransactionCurrencyCode')]
    public static str transactionCurrencyCodeLookup(Array _fields)
    {
        Map fieldValueMap =  OfficeAppCustomLookupHelper::getFieldMap(tableStr(BudgetPlanWorksheetEntity), _fields);
        BudgetPlanDocumentNumber documentNumber = fieldId2Name(tableNum(BudgetPlanWorksheetEntity), fieldNum(BudgetPlanWorksheetEntity, DocumentNumber));
        return BudgetPlanWorksheetEntity::fillRecordList(fieldValueMap.lookup(documentNumber), tableNum(Currency), fieldStr(Currency, CurrencyCode)).serialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Budget plan header is not inserted using this entity. Disable initvalue for that datasource.
        if (_dataSourceCtx.name() != dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanHeader))
        {
            super(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetName</Name>
				<Source><![CDATA[
    private static str getAssetName()
    {
        str assetIdField = SysComputedColumn::returnField(
                                tablestr(BudgetPlanWorksheetEntity),
                                dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanLineActiveView),
                                fieldstr(BudgetPlanLineActiveView, AssetId));

        str sourceDataAreaIdField = SysComputedColumn::returnField
                                        (tablestr(BudgetPlanWorksheetEntity),
                                        dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanLineActiveView),
                                        fieldstr(BudgetPlanLineActiveView, sourceDataAreaId));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(assetIdField),
            SysComputedColumn::returnLiteral(''),
            strFmt('(SELECT %1 FROM %2 WHERE %3 = %4 And %5 = %6)',
                new DictField(tableNum(AssetTable), fieldNum(AssetTable, Name)).name(DbBackend::Sql),
                new DictTable(tableNum(AssetTable)).name(DbBackend::Sql),
                new DictField(tableNum(AssetTable), fieldNum(AssetTable, AssetId)).name(DbBackend::Sql),
                assetIdField,
                new DictField(tableNum(AssetTable), fieldNum(AssetTable, DataAreaId)).name(DbBackend::Sql),
                sourceDataAreaIdField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectName</Name>
				<Source><![CDATA[
    private static str getProjectName()
    {
        str projIdField = SysComputedColumn::returnField(
                                tablestr(BudgetPlanWorksheetEntity),
                                dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanLineActiveView),
                                fieldstr(BudgetPlanLineActiveView, ProjectId));

        str sourceDataAreaIdField = SysComputedColumn::returnField
                                        (tablestr(BudgetPlanWorksheetEntity),
                                        dataEntityDataSourceStr(BudgetPlanWorksheetEntity, BudgetPlanLineActiveView),
                                        fieldstr(BudgetPlanLineActiveView, sourceDataAreaId));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(projIdField),
            SysComputedColumn::returnLiteral(''),
            strFmt('(SELECT %1 FROM %2 WHERE %3 = %4 And %5 = %6)',
                new DictField(tableNum(ProjTable), fieldNum(ProjTable, Name)).name(DbBackend::Sql),
                new DictTable(tableNum(ProjTable)).name(DbBackend::Sql),
                new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId)).name(DbBackend::Sql),
                projIdField,
                new DictField(tableNum(ProjTable), fieldNum(ProjTable, DataAreaId)).name(DbBackend::Sql),
                sourceDataAreaIdField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionDescription</Name>
				<Source><![CDATA[
    private static str getPositionDescription()
    {
        str positionField = SysComputedColumn::returnField(
                                tablestr(BudgetPlanWorksheetEntity),
                                dataEntityDataSourceStr(BudgetPlanWorksheetEntity, HcmPosition),
                                fieldstr(HcmPosition, RecId));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(positionField),
            SysComputedColumn::returnLiteral(BudgetPlanningConstants::emptyString),
            strFmt('(SELECT %1 FROM %2 WHERE %3 = %4 AND validFrom <= \'%5\' AND validTo >= \'%5\')',
                new DictField(tableNum(HcmPositionDetail), fieldNum(HcmPositionDetail, Description)).name(DbBackend::Sql),
                new DictTable(tableNum(HcmPositionDetail)).name(DbBackend::Sql),
                new DictField(tableNum(HcmPositionDetail), fieldNum(HcmPositionDetail, Position)).name(DbBackend::Sql),
                positionField,
                DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionWorkerName</Name>
				<Source><![CDATA[
    private static str getPositionWorkerName()
    {
        str partitionField = SysComputedColumn::returnField(
                                tablestr(BudgetPlanWorksheetEntity),
                                dataEntityDataSourceStr(BudgetPlanWorksheetEntity, HcmPosition),
                                fieldstr(HcmPosition, Partition));

        str positionField = SysComputedColumn::returnField(
                                tablestr(BudgetPlanWorksheetEntity),
                                dataEntityDataSourceStr(BudgetPlanWorksheetEntity, HcmPosition),
                                fieldstr(HcmPosition, RecId));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(positionField),
            SysComputedColumn::returnLiteral(BudgetPlanningConstants::emptyString),
            strFmt(@"(SELECT DPT.NAME FROM DIRPARTYTABLE DPT
						JOIN HCMWORKER W ON W.PARTITION = DPT.PARTITION AND W.PERSON = DPT.RECID
						JOIN HCMPOSITIONWORKERASSIGNMENT PWA ON PWA.PARTITION = DPT.PARTITION AND PWA.WORKER = W.RECID
						WHERE PWA.PARTITION=%1
							AND PWA.POSITION=%2
                            AND PWA.VALIDFROM<='%3'
							AND PWA.VALIDTO>='%3')",
                partitionField,
                positionField,
                DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        DMFDefinitionGroupExecution currentExecution;

        ttsbegin;

        // Add a lock here so the multiple threads will run in sequence.
        select pessimisticlock currentExecution
            where currentExecution.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && currentExecution.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && currentExecution.Entity == _dmfDefinitionGroupExecution.Entity;

        // Check if import job is finished.
        if (currentExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            BudgetPlanWorksheetStaging budgetPlanWorksheetStaging;
            while select DocumentNumber from budgetPlanWorksheetStaging
                group by DocumentNumber
                    where budgetPlanWorksheetStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && budgetPlanWorksheetStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            {
                BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::findByDocumentNumber(budgetPlanWorksheetStaging.DocumentNumber);
                
                if (budgetPlanHeader.NeedsUpdate)
                {
                    BudgetPlanActiveView activeView = BudgetPlanActiveView::newFromBudgetPlanHeader(budgetPlanHeader.RecId);

                    activeView.updateForBudgetHeaderSetBased();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<Label>@Budget:BudgetPlanLineActiveViewDisplayName</Label>
	<Tags>Budget planning</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetPlanWorksheetStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetPlanWorksheets</PublicCollectionName>
	<PublicEntityName>BudgetPlanWorksheet</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanHeader</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>BudgetPlanHeader</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetClass</Name>
			<DataField>BudgetClass</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Comment</Name>
			<DataField>Comment</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsNewRequest</Name>
			<DataField>IsNewRequest</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsRecurring</Name>
			<DataField>IsRecurring</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssetId</Name>
			<DataField>AssetId</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectId</Name>
			<DataField>ProjectId</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SourceDataAreaId</Name>
			<DataField>SourceDataAreaId</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedAsset</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ProposedAsset</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedProject</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ProposedProject</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Position</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Position</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNumber</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>DocumentNumber</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedAssetName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanProposedAsset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedAssetDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>Description</DataField>
			<DataSource>BudgetPlanProposedAsset</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedProjectName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanProposedProject</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProposedProjectDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>Description</DataField>
			<DataSource>BudgetPlanProposedProject</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ForecastPosition</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>Position</DataField>
			<DataSource>HcmPositionForecast</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PositionId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PositionId</DataField>
			<DataSource>HcmPosition</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyCode</Name>
			<DataField>TransactionCurrencyCode</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue1</Name>
			<DataField>DimensionValue1</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue2</Name>
			<DataField>DimensionValue2</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue3</Name>
			<DataField>DimensionValue3</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue4</Name>
			<DataField>DimensionValue4</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue5</Name>
			<DataField>DimensionValue5</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue6</Name>
			<DataField>DimensionValue6</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue7</Name>
			<DataField>DimensionValue7</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue8</Name>
			<DataField>DimensionValue8</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue9</Name>
			<DataField>DimensionValue9</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue10</Name>
			<DataField>DimensionValue10</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionValue11</Name>
			<DataField>DimensionValue11</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount1</Name>
			<DataField>TransactionCurrencyAmount1</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount2</Name>
			<DataField>TransactionCurrencyAmount2</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount3</Name>
			<DataField>TransactionCurrencyAmount3</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount4</Name>
			<DataField>TransactionCurrencyAmount4</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount5</Name>
			<DataField>TransactionCurrencyAmount5</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount6</Name>
			<DataField>TransactionCurrencyAmount6</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount7</Name>
			<DataField>TransactionCurrencyAmount7</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount8</Name>
			<DataField>TransactionCurrencyAmount8</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount9</Name>
			<DataField>TransactionCurrencyAmount9</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount10</Name>
			<DataField>TransactionCurrencyAmount10</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount11</Name>
			<DataField>TransactionCurrencyAmount11</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount12</Name>
			<DataField>TransactionCurrencyAmount12</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount13</Name>
			<DataField>TransactionCurrencyAmount13</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount14</Name>
			<DataField>TransactionCurrencyAmount14</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount15</Name>
			<DataField>TransactionCurrencyAmount15</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount16</Name>
			<DataField>TransactionCurrencyAmount16</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount17</Name>
			<DataField>TransactionCurrencyAmount17</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount18</Name>
			<DataField>TransactionCurrencyAmount18</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount19</Name>
			<DataField>TransactionCurrencyAmount19</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount20</Name>
			<DataField>TransactionCurrencyAmount20</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount21</Name>
			<DataField>TransactionCurrencyAmount21</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount22</Name>
			<DataField>TransactionCurrencyAmount22</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount23</Name>
			<DataField>TransactionCurrencyAmount23</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount24</Name>
			<DataField>TransactionCurrencyAmount24</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount25</Name>
			<DataField>TransactionCurrencyAmount25</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount26</Name>
			<DataField>TransactionCurrencyAmount26</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount27</Name>
			<DataField>TransactionCurrencyAmount27</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount28</Name>
			<DataField>TransactionCurrencyAmount28</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount29</Name>
			<DataField>TransactionCurrencyAmount29</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount30</Name>
			<DataField>TransactionCurrencyAmount30</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount31</Name>
			<DataField>TransactionCurrencyAmount31</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount32</Name>
			<DataField>TransactionCurrencyAmount32</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount33</Name>
			<DataField>TransactionCurrencyAmount33</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount34</Name>
			<DataField>TransactionCurrencyAmount34</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount35</Name>
			<DataField>TransactionCurrencyAmount35</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionCurrencyAmount36</Name>
			<DataField>TransactionCurrencyAmount36</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity1</Name>
			<DataField>Quantity1</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity2</Name>
			<DataField>Quantity2</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity3</Name>
			<DataField>Quantity3</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity4</Name>
			<DataField>Quantity4</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity5</Name>
			<DataField>Quantity5</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity6</Name>
			<DataField>Quantity6</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity7</Name>
			<DataField>Quantity7</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity8</Name>
			<DataField>Quantity8</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity9</Name>
			<DataField>Quantity9</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity10</Name>
			<DataField>Quantity10</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity11</Name>
			<DataField>Quantity11</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity12</Name>
			<DataField>Quantity12</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity13</Name>
			<DataField>Quantity13</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity14</Name>
			<DataField>Quantity14</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity15</Name>
			<DataField>Quantity15</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity16</Name>
			<DataField>Quantity16</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity17</Name>
			<DataField>Quantity17</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity18</Name>
			<DataField>Quantity18</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity19</Name>
			<DataField>Quantity19</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity20</Name>
			<DataField>Quantity20</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity21</Name>
			<DataField>Quantity21</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity22</Name>
			<DataField>Quantity22</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity23</Name>
			<DataField>Quantity23</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity24</Name>
			<DataField>Quantity24</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity25</Name>
			<DataField>Quantity25</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity26</Name>
			<DataField>Quantity26</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity27</Name>
			<DataField>Quantity27</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity28</Name>
			<DataField>Quantity28</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity29</Name>
			<DataField>Quantity29</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity30</Name>
			<DataField>Quantity30</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity31</Name>
			<DataField>Quantity31</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity32</Name>
			<DataField>Quantity32</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity33</Name>
			<DataField>Quantity33</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity34</Name>
			<DataField>Quantity34</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity35</Name>
			<DataField>Quantity35</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity36</Name>
			<DataField>Quantity36</DataField>
			<DataSource>BudgetPlanLineActiveView</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetPlanLayout</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Layout</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Layout</Name>
			<Label>@Budget:LayoutDisplayNameSingular</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanLayout</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>AssetIdDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getAssetName</ComputedFieldMethod>
			<ExtendedDataType>AssetName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ProjectIdDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getProjectName</ComputedFieldMethod>
			<ExtendedDataType>ProjName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PositionDescription</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getPositionDescription</ComputedFieldMethod>
			<ExtendedDataType>HrmDescription</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PositionWorkerName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS305602</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>getPositionWorkerName</ComputedFieldMethod>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName1</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName2</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName3</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName4</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName5</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName6</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName7</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName8</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName9</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName10</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DimensionName11</Name>
			<IsComputedField>No</IsComputedField>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DocumentNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>Layout</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetPlanLineActiveView</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetPlanLineActiveView</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanHeader</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanHeader</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanHeader</Name>
								<JoinRelationName>BudgetPlanHeader</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanProposedAsset</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanProposedAsset</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanProposedAsset</Name>
								<JoinRelationName>BudgetPlanProposedAsset</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanProposedProject</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanProposedProject</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanProposedProject</Name>
								<JoinRelationName>BudgetPlanProposedProject</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HcmPositionForecast</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmPositionForecast</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>HcmPosition</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>HcmPosition</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>HcmPosition</Name>
										<JoinRelationName>HcmPosition</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>HcmPositionForecast</Name>
								<JoinRelationName>HcmPositionForecast</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanLayout</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>BudgetPlanLayout</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BudgetPlanHeaderLayout</Name>
								<Field>Layout</Field>
								<JoinDataSource>BudgetPlanHeader</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>