<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDiscountLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes entity data source for sub types.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    public void initializeEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);
        if (!discount)
        {
            // One possiblity for RetailDiscountEntity not found is that it is RetailShippingThresholdDiscountsEntity.
            RetailShippingThresholdDiscountsEntity shippingDiscount = RetailShippingThresholdDiscountsEntity::find(this.OfferId);
            if (!shippingDiscount)
            {
                throw error(strFmt("@Retail:CannotFindOffer", this.OfferId));
            }

            // RetailShippingThresholdDiscounts table guarantees PeriodicDiscountType to be RetailDiscountOfferTypeBase::Shipping, so no need to process the types as the case of RetailDiscountEntity below.
        }
        else
        {
            RetailPeriodicDiscountLine discountLine;
            RetailDiscountLineOffer offerLine;
            RetailDiscountLineMixAndMatch mixAndMatchLine;
            RetailDiscountLineMultibuy multibuyLine;
            RetailDiscountLineThresholdApplying thresholdApplyingLine;

            if (dataSourceCtx.name() == tablestr(RetailPeriodicDiscountLine))
            {
                if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    discountLine = dataSourceCtx.getBuffer();
                    switch (discount.PeriodicDiscountType)
                    {
                        case RetailDiscountOfferTypeBase::DiscountOffer:
                        case RetailDiscountOfferTypeBase::Promotion:
                        case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                            offerLine = discountLine as RetailDiscountLineOffer;
                            dataSourceCtx.setBuffer(offerLine);
                            break;
                        case RetailDiscountOfferTypeBase::Multibuy:
                            multibuyLine = discountLine as RetailDiscountLineMultibuy;
                            dataSourceCtx.setBuffer(multibuyLine);
                            break;
                        case RetailDiscountOfferTypeBase::MixAndMatch:
                        case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                            mixAndMatchLine = discountLine as RetailDiscountLineMixAndMatch;
                            dataSourceCtx.setBuffer(mixAndMatchLine);
                            break;
                        case RetailDiscountOfferTypeBase::Threshold:
                            if (discountLine.IsDiscountApplyingLine == NoYes::Yes)
                            {
	                            thresholdApplyingLine = discountLine as RetailDiscountLineThresholdApplying;
	                            dataSourceCtx.setBuffer(thresholdApplyingLine);
                            }
                            break;
                    }
                }
                else if (dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    switch (discount.PeriodicDiscountType)
                    {
                        case RetailDiscountOfferTypeBase::DiscountOffer:
                        case RetailDiscountOfferTypeBase::Promotion:
                        case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineOffer)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::Multibuy:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineMultibuy)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::MixAndMatch:
                        case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                            dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineMixAndMatch)).makeRecord());
                            break;
                        case RetailDiscountOfferTypeBase::Threshold:
                            if (this.IsDiscountApplyingLine == NoYes::Yes)
                            {
                                dataSourceCtx.setBuffer(new DictTable(tablenum(RetailDiscountLineThresholdApplying)).makeRecord());
                            }
                            break;
                    }
                }
            }
        }

        super(entityCtx, dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map entity to data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Discount line group isn't ready for validation yet, as it may not exist yet. We'll validate it and may populate it later in insert and update.
        this.skipDataSourceValidateField(fieldNum(RetailDiscountLineEntity, MixAndMatchLineGroup), true);

        switch(_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(RetailDiscountLineEntity, RetailDiscountThresholdTiers):
                if (this.IsDiscountApplyingLine == NoYes::No)
                {
                    _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                }
                else
                {
                    RetailDiscountThresholdTiers tier = _dataSourceCtx.getBuffer();
                    tier.RecId = this.ThresholdTierRecId;
                    tier.OfferId = this.OfferId;
                    tier.AmountThreshold = this.ThresholdTierAmount;
                    _dataSourceCtx.setBuffer(tier);
                }
                break;

            case dataEntityDataSourceStr(RetailDiscountLineEntity, RetailPeriodicDiscountLine):
                if (this.IsDiscountApplyingLine == NoYes::Yes)
                {
                    RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);
                    if (discount && discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::Threshold)
                    {
                        RetailPeriodicDiscountLine discountLine = _dataSourceCtx.getBuffer();

                        RetailDiscountThresholdTiers tier;
                        select firstonly RecId from tier where tier.OfferId == this.OfferId && tier.AmountThreshold == this.ThresholdTierAmount;

                        if (tier.RecId)
                        {
                            RetailDiscountLineThresholdApplying thresholdApplyingLine = discountLine;
                            thresholdApplyingLine.Tier = tier.RecId;
                            thresholdApplyingLine.QuantityLimit = this.ThresholdLineQuantityLimit;
                            thresholdApplyingLine.ThresholdLineDiscountMethod = this.ThresholdApplyingLineDiscountMethod;

                            _dataSourceCtx.setBuffer(thresholdApplyingLine);

                            this.ThresholdTierRecId = tier.RecId;
                        }
                    }
                }

                break;

            default:
                break;
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean insertEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        ret = this.validateDiscountLineAndFixGroupMemberLine(entityCtx,dataSourceCtx);

        if (dataSourceCtx.name() == tablestr(RetailPeriodicDiscountLine))
        {
            // Skip overriding LineNum in the data method as parallel import is likely to produce duplicate value.
            // We can directly consume LineNum from the import file as the entity key OfferId+LineNum guarantees no duplicate.
            dataSourceCtx.skipDataMethods(true);
        }

        ret = ret && super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the entity data source.
    /// </summary>
    /// <param name = "entityCtx">Entity runtime context.</param>
    /// <param name = "dataSourceCtx">Data source runtime context.</param>
    /// <returns>true if saved successfully,; otherwise, false.</returns>
    public boolean updateEntityDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        boolean ret;

        ret = this.validateDiscountLineAndFixGroupMemberLine(entityCtx,dataSourceCtx);

        ret = ret && super(entityCtx, dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post load.
    /// </summary>
    public void postLoad()
    {
        RetailPeriodicDiscountLine periodicDiscountLine;
        RetailGroupMemberLine groupMemberLine;

        changecompany(this.DataAreaId)
        {
            select RetailGroupMemberLine from periodicDiscountLine
                where periodicDiscountLine.RecId == this.RecId
            join Product, Variant, Category, InventDimId from groupMemberLine
                where groupMemberLine.RecId == periodicDiscountLine.RetailGroupMemberLine;

            if (groupMemberLine.Variant)
            {
                InventDimCombination inventDimCombination;
                InventDim inventDim;

                select firstonly ItemId, InventDimId from inventDimCombination
                    where inventDimCombination.DistinctProductVariant == groupMemberLine.Variant
                join InventColorId, InventSizeId, InventStyleId, configId from inventDim
                    where inventDim.inventDimId == inventDimCombination.InventDimId;

                this.ItemId = inventDimCombination.ItemId;
                this.Color = inventDim.InventColorId;
                this.Size = inventDim.InventSizeId;
                this.Style = inventDim.InventStyleId;
                this.ConfigId = inventDim.configId;
            }
            else if (groupMemberLine.Product)
            {
                InventTable inventTable = InventTable::findByProduct(groupMemberLine.Product);

                this.ItemId = inventTable.ItemId;
                
                if (groupMemberLine.InventDimId)
                {
                    InventDim inventDim;

                    select InventColorId, InventSizeId, InventStyleId, configId from inventDim
                        where inventDim.inventDimId == groupMemberLine.InventDimId;

                    this.Color = inventDim.InventColorId;
                    this.Size = inventDim.InventSizeId;
                    this.Style = inventDim.InventStyleId;
                    this.ConfigId = inventDim.configId;
                }
            }
			//showing CategoryName and Hierarchy for all Discount lines if provided
            if (groupMemberLine.Category)
            {
                EcoResCategory category = EcoResCategory::find(groupMemberLine.Category);
                EcoResCategoryHierarchy categoryHierarchy = EcoResCategoryHierarchy::find(category.CategoryHierarchy);

                this.CategoryName = category.Name;
                this.CategoryHierarchyName = categoryHierarchy.Name;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountLineAndFixGroupMemberLine</Name>
				<Source><![CDATA[
    private boolean validateDiscountLineAndFixGroupMemberLine(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        if (dataSourceCtx.name() == tablestr(RetailPeriodicDiscountLine))
        {
            // selects linked RetailGroupMemberLine created by previous operations to avoid let orphan records
            RetailGroupMemberLine groupMemberLine;
            RetailPeriodicDiscountLine existingDiscountLine;
            select forupdate groupMemberLine
                exists join RecId from existingDiscountLine
                    where existingDiscountLine.OfferId == this.OfferId
                        && existingDiscountLine.LineNum == this.LineNum
                        && existingDiscountLine.RetailGroupMemberLine == groupMemberLine.RecId;

            this.createOrUpdateRetailGroupMemberLine(groupMemberLine);
			
            RetailPeriodicDiscountLine periodicDiscountLine = dataSourceCtx.getBuffer();
   
            if (!this.Name)
            {
                periodicDiscountLine.Name = groupMemberLine.getDescription();
            }

            if (entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                periodicDiscountLine.RetailGroupMemberLine = groupMemberLine.RecId;
                dataSourceCtx.setBuffer(periodicDiscountLine);
            }

            if (!periodicDiscountLine.checkDiscountLine(groupMemberLine))
            {
                return false;
            }

            RetailDiscountEntity discount = RetailDiscountEntity::find(this.OfferId);
            if (discount)
            {
                this.validateDiscountLine(discount);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountLine</Name>
				<Source><![CDATA[
    private void validateDiscountLine(RetailDiscountEntity discount)
    {
        if (discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::MixAndMatch
            || discount.PeriodicDiscountType == RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer)
        {
            if (!this.MixAndMatchLineGroup)
            {
                throw error(strFmt("@Retail:MixAndMatchLineGroupRequired", this.LineNum));
            }
            else
            {
                RetailMixAndMatchLineGroupSetup lineGroupSetup = RetailMixAndMatchLineGroupSetup::find(this.MixAndMatchLineGroup);
                if (!lineGroupSetup)
                {
                    throw error(strFmt("@Retail:BadMixAndMatchLineGroup", this.MixAndMatchLineGroup));
                }
            }

            if (this.MixAndMatchNumberOfItemsNeeded < 1)
            {
                throw error(strFmt("@Retail:BadMixAndMatchNumberOfItemsNeeded", this.MixAndMatchNumberOfItemsNeeded));
            }

            RetailMixAndMatchLineGroups mixMatchLineGroup;
            select forupdate mixMatchLineGroup where mixMatchLineGroup.mixAndMatchId == this.OfferId && mixMatchLineGroup.mixAndMatchLineGroup == this.MixAndMatchLineGroup;
            if (mixMatchLineGroup)
            {
                if (mixMatchLineGroup.numberOfItemsNeeded != this.MixAndMatchNumberOfItemsNeeded)
                {
                    mixMatchLineGroup.numberOfItemsNeeded = this.MixAndMatchNumberOfItemsNeeded;
                    mixMatchLineGroup.update();
                }
            }
            else
            {
                mixMatchLineGroup.mixAndMatchId = this.OfferId;
                mixMatchLineGroup.mixAndMatchLineGroup = this.MixAndMatchLineGroup;
                mixMatchLineGroup.numberOfItemsNeeded = this.MixAndMatchNumberOfItemsNeeded;
                mixMatchLineGroup.insert();
            }

            if (discount.MixAndMatchDiscountType == RetailMixAndMatchDiscountType::LineSpec)
            {
                switch (this.MixAndMatchDiscountType)
                {
                    case RetailDealPriceDiscountPctBase::DealPrice:
                        if (!RetailPricingConfigurationValidator::isValidDiscountDealPriceAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@Retail:IncorrectMixAndMatchLineDealPrice", this.DiscountPercentOrValue));
                        }
                        break;
                    case RetailDealPriceDiscountPctBase::DiscountPct:
                        if (!RetailPricingConfigurationValidator::isValidDiscountPercentageAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@Retail:IncorrectMixAndMatchLinePercentOff", this.DiscountPercentOrValue));
                        }
                        break;
                    case RetailDealPriceDiscountPctBase::DiscountAmount:
                        if (!RetailPricingConfigurationValidator::isValidDiscountAmountAllowZero(this.DiscountPercentOrValue))
                        {
                            throw error(strFmt("@RetailDiscount:IncorrectMixAndMatchLineAmountOff", this.DiscountPercentOrValue));
                        }
                        break;
                    default:
                        throw error(strFmt("@Retail:IncorrectMixAndMatchLineDiscountType", this.MixAndMatchDiscountType));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (!RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled())
        {
            return ;
        }

        // Check if import job is finished.
        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            container offerIds;

            RetailDiscountLineStaging retailDiscountLineStaging;
            while select OfferId from retailDiscountLineStaging
                        group by OfferId
                        where retailDiscountLineStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && retailDiscountLineStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            {
                offerIds += retailDiscountLineStaging.OfferId;
            }

            RetailPeriodicDiscountPublisher::publishDiscountsChanges(offerIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRetailGroupMemberLine</Name>
				<Source><![CDATA[
    private void createOrUpdateRetailGroupMemberLine(RetailGroupMemberLine _groupMemberLine)
    {
        RetailGroupMemberLineHelper::createOrUpdateRetailGroupMemberLine(
            _groupMemberLine,
            this.ItemId,
            this.Color,
            this.Size,
            this.Style,
            this.ConfigId,
            this.CategoryName,
            this.CategoryHierarchyName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@RET2913</Label>
	<Tags>Merchandising - Assortment</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>RetailDiscountLineStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<IsPublic>Yes</IsPublic>
	<Modules>Merchandising</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>RetailDiscountLines</PublicCollectionName>
	<PublicEntityName>RetailDiscountLine</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OfferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Color</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Size</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Style</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasureSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountPercentOrValue</Name>
			<DataField>DiscountPercentOrValue</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNum</Name>
			<DataField>LineNum</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferId</Name>
			<DataField>OfferId</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitOfMeasure</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>UnitOfMeasure</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UnitOfMeasureSymbol</Name>
			<Mandatory>No</Mandatory>
			<DataField>Symbol</DataField>
			<DataSource>UnitOfMeasure</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchDiscountType</Name>
			<DataField>discountType</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchLineGroup</Name>
			<DataField>lineGroup</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MixAndMatchNumberOfItemsNeeded</Name>
			<DataField>numberOfItemsNeeded</DataField>
			<DataSource>RetailDiscountLineMixAndMatch</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountAmount</Name>
			<DataField>discAmount</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountMethod</Name>
			<DataField>discountMethod</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountPercentage</Name>
			<DataField>discPct</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPrice</Name>
			<DataField>offerPrice</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ItemId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Color</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResColorName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Size</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResSizeName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>Style</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResStyleName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ConfigId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResConfigurationName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryHierarchyName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResCategoryHierarchyName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>CategoryName</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ExtendedDataType>EcoResCategoryName</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RetailGroupMemberLine</Name>
			<AccessModifier>Internal</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>RetailGroupMemberLine</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineType</Name>
			<DataField>LineType</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferDiscountMethodN1</Name>
			<DataField>discountMethodN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPriceInclTaxN1</Name>
			<DataField>offerPriceInclTaxN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OfferPriceN1</Name>
			<DataField>offerPriceN1</DataField>
			<DataSource>RetailDiscountLineOffer</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdApplyingLineDiscountMethod</Name>
			<DataField>ThresholdLineDiscountMethod</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdTierAmount</Name>
			<DataField>AmountThreshold</DataField>
			<DataSource>RetailDiscountThresholdTiers</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdTierRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Tier</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsDiscountApplyingLine</Name>
			<DataField>IsDiscountApplyingLine</DataField>
			<DataSource>RetailPeriodicDiscountLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ThresholdLineQuantityLimit</Name>
			<DataField>QuantityLimit</DataField>
			<DataSource>RetailDiscountLineThresholdApplying</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>OfferId</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNum</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>RetailPeriodicDiscount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>RetailDiscountEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OfferId</Field>
					<RelatedField>OfferId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>RetailShippingThresholdDiscount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>RetailShippingThresholdDiscountsEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OfferId</Field>
					<RelatedField>OfferId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailPeriodicDiscountLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailPeriodicDiscountLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>UnitOfMeasure</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>UnitOfMeasure</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>UnitOfMeasure</Name>
								<Field>UnitOfMeasure</Field>
								<JoinDataSource>RetailPeriodicDiscountLine</JoinDataSource>
								<JoinRelationName>UnitOfMeasure</JoinRelationName>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailDiscountThresholdTiers</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>RetailDiscountThresholdTiers</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>RetailPeriodicDiscountLine</Name>
								<Field>Tier</Field>
								<JoinDataSource>RetailPeriodicDiscountLine</JoinDataSource>
								<JoinDerivedTable>RetailDiscountLineThresholdApplying</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountLineMixAndMatch</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountLineMixAndMatch</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountLineMultibuy</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountLineMultibuy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountLineOffer</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountLineOffer</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>RetailDiscountLineThresholdApplying</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailDiscountLineThresholdApplying</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>