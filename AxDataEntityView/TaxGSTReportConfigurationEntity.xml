<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTReportConfigurationEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxGSTReportConfigurationEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// Update TaxGSTReportConfigurationLine_MY with valid reporting code
    /// Insert TaxGSTReportConfigurationLineCode_MY according to TaxGSTReportConfigurationLine_MY
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// A table buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxGSTReportConfiguration_MY taxGSTReportConfiguration;
        TaxGSTReportConfigurationLine_MY taxGSTReportConfigurationLine;
        TaxGSTReportConfigurationLineCode_MY taxGSTReportConfigurationLineCode;
        TaxReportCollection reportCollection;
        TaxGSTReportConfigurationStaging taxGSTReportConfigurationStaging;

        int idx;
        container conTaxAmount, conValidTaxAmount, conTaxAmountRecId;
        container conTaxBaseAmount, conValidTaxBaseAmount, conTaxBaseAmountRecId;
        TaxReportField collectionTaxBaseAmount;
        TaxReportField collectionTaxAmount;
        RefRecId collectionTaxBaseAmountRecId;
        RefRecId collectionTaxAmountRecId;
        RecordInsertList configurationLineCodeInsertList = new RecordInsertList(tableNum(TaxGSTReportConfigurationLineCode_MY));

        while select ReportConfigurationName, TypeOfTransaction from taxGSTReportConfigurationStaging
            where taxGSTReportConfigurationStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
        {
            conTaxBaseAmount = conNull();
            conTaxAmount = conNull();
            conTaxAmountRecId = conNull();
            conTaxBaseAmountRecId = conNull();
            conValidTaxAmount = conNull();
            conValidTaxBaseAmount = conNull();

            select RecId from taxGSTReportConfiguration
                where taxGSTReportConfiguration.Name == taxGSTReportConfigurationStaging.ReportConfigurationName;

            ttsbegin;

            select forupdate RecId,TaxReportCollectionsTaxBaseAmount,TaxReportCollectionsTaxAmount from taxGSTReportConfigurationLine
                where taxGSTReportConfigurationLine.TypeOfTransaction == taxGSTReportConfigurationStaging.TypeOfTransaction
                && taxGSTReportConfigurationLine.taxGSTReportConfiguration == taxGSTReportConfiguration.RecId;

            delete_from taxGSTReportConfigurationLineCode
                where taxGSTReportConfigurationLineCode.TaxGSTReportConfigurationLine == taxGSTReportConfigurationLine.RecId;

            conTaxBaseAmount = str2con(taxGSTReportConfigurationLine.TaxReportCollectionsTaxBaseAmount, ';');
            conTaxAmount = str2con(taxGSTReportConfigurationLine.TaxReportCollectionsTaxAmount, ';');

            for (idx = 1; idx <= conLen(conTaxBaseAmount); idx++)
            {
                collectionTaxBaseAmount = conPeek(conTaxBaseAmount, idx);

                if (collectionTaxBaseAmount)
                {
                    reportCollection.clear();

                    select RecId from reportCollection
                    where reportCollection.TaxReportField == collectionTaxBaseAmount
                    && reportCollection.TaxReportLayout == TaxReportLayout::Default;

                    if (reportCollection)
                    {
                        conValidTaxBaseAmount += [collectionTaxBaseAmount];
                        conTaxBaseAmountRecId += [reportCollection.RecId];
                    }
                    else
                    {
                        checkFailed(strFmt("@SYS78854", collectionTaxBaseAmount, TaxReportLayout::Default));
                    }
                }
            }

            for (idx = 1; idx <= conLen(conTaxBaseAmountRecId); idx++)
            {
                collectionTaxBaseAmountRecId = conPeek(conTaxBaseAmountRecId, idx);

                if (collectionTaxBaseAmountRecId)
                {
                    taxGSTReportConfigurationLineCode.clear();
                    taxGSTReportConfigurationLineCode.TaxGSTReportConfigurationLine = taxGSTReportConfigurationLine.RecId;
                    taxGSTReportConfigurationLineCode.Usage = TaxGSTReportConfigurationUsage_MY::BaseAmount;
                    taxGSTReportConfigurationLineCode.TaxReportCollection = collectionTaxBaseAmountRecId;
                    configurationLineCodeInsertList.add(taxGSTReportConfigurationLineCode);
                }
            }

            for (idx = 1; idx <= conLen(conTaxAmount); idx++)
            {
                collectionTaxAmount = conPeek(conTaxAmount, idx);

                if (collectionTaxAmount)
                {
                    reportCollection.clear();

                    select RecId from reportCollection
                    where reportCollection.TaxReportField == collectionTaxAmount
                    && reportCollection.TaxReportLayout == TaxReportLayout::Default;

                    if (reportCollection)
                    {
                        conValidTaxAmount += [collectionTaxAmount];
                        conTaxAmountRecId += [reportCollection.RecId];
                    }
                    else
                    {
                        checkFailed(strFmt("@SYS78854", collectionTaxAmount, TaxReportLayout::Default));
                    }
                }
            }

            for (idx = 1; idx <= conLen(conTaxAmountRecId); idx++)
            {
                collectionTaxAmountRecId = conPeek(conTaxAmountRecId, idx);

                if (collectionTaxAmountRecId)
                {
                    taxGSTReportConfigurationLineCode.clear();
                    taxGSTReportConfigurationLineCode.TaxGSTReportConfigurationLine = taxGSTReportConfigurationLine.RecId;
                    taxGSTReportConfigurationLineCode.Usage = TaxGSTReportConfigurationUsage_MY::TaxAmount;
                    taxGSTReportConfigurationLineCode.TaxReportCollection = collectionTaxAmountRecId;
                    configurationLineCodeInsertList.add(taxGSTReportConfigurationLineCode);
                }
            }

            configurationLineCodeInsertList.insertDatabase();

            taxGSTReportConfigurationLine.TaxReportCollectionsTaxBaseAmount = con2Str(conValidTaxBaseAmount, ';');
            taxGSTReportConfigurationLine.TaxReportCollectionsTaxAmount = con2Str(conValidTaxAmount, ';');
            taxGSTReportConfigurationLine.TaxReportCollectionRecIdsTaxBaseAmount = con2Str(conTaxBaseAmountRecId, ';');
            taxGSTReportConfigurationLine.TaxReportCollectionRecIdsTaxAmount = con2Str(conTaxAmountRecId, ';');
            taxGSTReportConfigurationLine.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>MY</CountryRegionCodes>
	<FormRef>TaxGSTReportConfiguration_MY</FormRef>
	<Label>@SYP4882354</Label>
	<Tags>GST</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>TaxGSTReportConfigurationStaging</DataManagementStagingTable>
	<Modules>Tax</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportConfigurationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfTransaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportConfigurationDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCodesForTransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCodesForGSTAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCodesForGSTAmount</Name>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<DataField>TaxReportCollectionsTaxAmount</DataField>
			<DataSource>TaxGSTReportConfigurationLine_MY</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCodesForTransactionAmount</Name>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<DataField>TaxReportCollectionsTaxBaseAmount</DataField>
			<DataSource>TaxGSTReportConfigurationLine_MY</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TypeOfTransaction</Name>
			<CountryRegionCodes>MY</CountryRegionCodes>
			<DataField>TypeOfTransaction</DataField>
			<DataSource>TaxGSTReportConfigurationLine_MY</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportConfigurationName</Name>
			<DataField>Name</DataField>
			<DataSource>TaxGSTReportConfiguration_MY</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportConfigurationDescription</Name>
			<DataField>Description</DataField>
			<DataSource>TaxGSTReportConfiguration_MY</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TypeOfTransaction</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ReportConfigurationName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxGSTReportConfigurationLine_MY</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxGSTReportConfigurationLine_MY</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxGSTReportConfiguration_MY</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxGSTReportConfiguration_MY</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>TaxGSTReportConfiguration_MY</Name>
								<JoinRelationName>TaxGSTReportConfiguration_MY</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>