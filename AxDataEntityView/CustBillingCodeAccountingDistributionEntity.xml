<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingCodeAccountingDistributionEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillingCodeAccountingDistributionEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic to validate staging distributions before copy to target.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        CustBillingCodeAccountingDistributionStaging staging;
        CustBillingCodeLedgerAccount                 existingBillingCodeLedgerAccount;
        CustBillingCodeVersion                       custBillingCodeVersion;
        CustBillingCode                              existingBillingCodeTable;

        date asofdateDateForBillingCodeVersion;

        while select ValidFrom, ValidTo, BillingCode, sum(Percent) from staging
            group by ValidFrom, ValidTo, BillingCode
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
        {
            if (staging.Percent == 100)
            {
                asofdateDateForBillingCodeVersion = staging.ValidFrom;

                select  validtimestate(asofdateDateForBillingCodeVersion) count(RecId) from  existingBillingCodeLedgerAccount
                    join custBillingCodeVersion
                        where custBillingCodeVersion.RecId == existingBillingCodeLedgerAccount.CustBillingCodeVersion
                    join existingBillingCodeTable
                        where existingBillingCodeTable.RecId == custBillingCodeVersion.CustBillingCode
                           && existingBillingCodeTable.BillingCode == staging.BillingCode;

                if (existingBillingCodeLedgerAccount.RecId > 0)
                {
                    CustBillingCodeAccountingDistributionEntity::setStaggingRecordStatusToError(_dmfDefinitionGroupExecution, staging.BillingCode, staging.ValidFrom, staging.ValidTo);

                    error(strFmt("@PublicSector:BillingCodeDistribution_ErrorMessage_DistributionsExists", staging.BillingCode, staging.ValidFrom, staging.ValidTo));
                }
            }
            else
            {
                CustBillingCodeAccountingDistributionEntity::setStaggingRecordStatusToError(_dmfDefinitionGroupExecution, staging.BillingCode, staging.ValidFrom, staging.ValidTo);

                error(strFmt("@PublicSector:BillingCodeDistribution_ErrorMessage_DistributionsNot100", staging.BillingCode, staging.ValidFrom, staging.ValidTo));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStaggingRecordStatusToError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets records to error state if distributions contain errors.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    /// <param name = "_billingCodeName">
    /// The billing code name.
    /// </param>
    /// <param name = "_validFrom">
    /// The start date of the billing code version.
    /// </param>
    /// <param name = "_validToDate">
    /// The end date of the billing code version.
    /// </param>
    public static void setStaggingRecordStatusToError(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, BillingCode _billingCodeName, ValidFromDate _validFrom, ValidToDate _validToDate)
    {
        CustBillingCodeAccountingDistributionStaging stagingForUpdate;

        update_recordset stagingForUpdate
            setting TransferStatus = DMFTransferStatus::Error
                where stagingForUpdate.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && stagingForUpdate.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && (stagingForUpdate.TransferStatus == DMFTransferStatus::NotStarted || stagingForUpdate.TransferStatus == DMFTransferStatus::Validated)
                   && stagingForUpdate.validFrom == _validFrom
                   && stagingForUpdate.ValidTo == _validToDate
                   && stagingForUpdate.BillingCode == _billingCodeName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<FormRef>CustBillingCode</FormRef>
	<Label>@PublicSector:CustBillingCodeAccountingDistributionEntity_Label</Label>
	<Tags>Billing setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>CustBillingCodeAccountingDistributionStaging</DataManagementStagingTable>
	<EnableSetBasedSqlOperations>No</EnableSetBasedSqlOperations>
	<EntityCategory>Reference</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsReceivable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BillingCodeAccountingDistributions</PublicCollectionName>
	<PublicEntityName>BillingCodeAccountingDistribution</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillingCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingCodeVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustBillingCodeVersion</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CustBillingCodeVersion</DataField>
			<DataSource>CustBillingCodeLedgerAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>CustBillingCodeLedgerAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Percent</Name>
			<DataField>Percentage</DataField>
			<DataSource>CustBillingCodeLedgerAccount</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustBillingCode</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>CustBillingCode</DataField>
			<DataSource>CustBillingCodeVersion</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>CustBillingCodeVersion</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>CustBillingCodeVersion</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BillingCode</Name>
			<DataField>BillingCode</DataField>
			<DataSource>CustBillingCode</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>LedgerAccountDAVC</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ValidTo</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ValidFrom</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>BillingCode</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LedgerAccountDisplayValue</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerAccountCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerAccount</Name>
					<Field>LedgerAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustBillingCodeLedgerAccount</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustBillingCodeLedgerAccount</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustBillingCodeVersion</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustBillingCodeVersion</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustBillingCode</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CustBillingCode</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>CustBillingCode</Name>
										<JoinRelationName>CustBillingCode</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerAccountDAVC</Name>
								<AllowAdd>No</AllowAdd>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>LedgerAccountDAVC</Name>
										<Field>LedgerDimension</Field>
										<JoinDataSource>CustBillingCodeLedgerAccount</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CustBillingCodeVersion</Name>
								<JoinRelationName>CustBillingCodeVersion</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>