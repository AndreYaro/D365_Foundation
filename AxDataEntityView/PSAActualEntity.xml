<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAActualEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAActualEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>plLaborCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L labor cost
    /// </summary>
    /// <returns>
    /// An expression P&L labor cost
    /// </returns>
    public static str plLaborCost()
    {
        List            postingTypeList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        return PSAActualEntity::createQuery_PlLaborCost(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>plLaborCost_WithoutNoNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L labor cost excluding no/never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression P&L labor cost excluding no/never ledger transactions
    /// </returns>
    public static str plLaborCost_WithoutNoNeverLedger()
    {
        List            postingTypeList   = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        return PSAActualEntity::createQuery_PlLaborCost(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_PlLaborCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for P&L labor cost
    /// </summary>
    /// <returns>
    /// An expression P&L labor cost
    /// </returns>
    protected static str createQuery_PlLaborCost(List postingTypeList)
    {
        List            transTypeList   = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>plLaborQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L labor Qty
    /// </summary>
    /// <returns>
    /// An expression P&L labor Qty
    /// </returns>
    public static str plLaborQty()
    {
        List            postingTypeList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        return PSAActualEntity::createQuery_PlLaborQty(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>plLaborQty_WithoutNoNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L labor Qty excluding no/never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression P&L labor Qty excluding no/never ledger transactions
    /// </returns>
    public static str plLaborQty_WithoutNoNeverLedger()
    {
        List            postingTypeList   = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        return PSAActualEntity::createQuery_PlLaborQty(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_PlLaborQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for P&L labor Qty
    /// </summary>
    /// <returns>
    /// An expression P&L labor Qty
    /// </returns>
    protected static str createQuery_PlLaborQty(List postingTypeList)
    {
        List            transTypeList   = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, Qty)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>plExpenseCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L expense cost
    /// </summary>
    /// <returns>
    /// An expression P&L expense cost
    /// </returns>
    public static str plExpenseCost()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>plMaterialCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L material cost
    /// </summary>
    /// <returns>
    /// An expression P&L material cost
    /// </returns>
    public static str plMaterialCost()
    {
        List            postingTypeList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        return PSAActualEntity::createQuery_PlMaterialCost(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>plMaterialCost_WithoutNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L material cost excluding never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression P&L material cost excluding never ledger transactions
    /// </returns>
    public static str plMaterialCost_WithoutNeverLedger()
    {
        List            postingTypeList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        return PSAActualEntity::createQuery_PlMaterialCost(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_PlMaterialCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for P&L material cost
    /// </summary>
    /// <returns>
    /// An expression P&L material cost
    /// </returns>
    protected static str createQuery_PlMaterialCost(List postingTypeList)
    {
        List            transTypeList   = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>plCostAccruedLoss</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for P&L accrued cost
    /// </summary>
    /// <returns>
    /// An expression P&L accrued cost
    /// </returns>
    public static str plCostAccruedLoss()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedCost)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLTotalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for PL Total Cost
    /// </summary>
    /// <returns>
    /// An expression for PL Total Cost
    /// </returns>
    public static str PLTotalCost()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::PLLaborCost(), PSAActualEntity::plExpenseCost()),
                    SysComputedColumn::add(PSAActualEntity::plMaterialCost(), PSAActualEntity::plCostAccruedLoss())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipLaborCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP labor cost
    /// </summary>
    /// <returns>
    /// An expression WIP labor cost
    /// </returns>
    public static str wipLaborCost()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipExpenseCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP expense cost
    /// </summary>
    /// <returns>
    /// An expression WIP expense cost
    /// </returns>
    public static str wipExpenseCost()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipMaterialCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP material cost
    /// </summary>
    /// <returns>
    /// An expression WIP material cost
    /// </returns>
    public static str wipMaterialCost()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipCostAccruedLoss</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP accrued cost
    /// </summary>
    /// <returns>
    /// An expression WIP accrued cost
    /// </returns>
    public static str wipCostAccruedLoss()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCost)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPTotalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Total Cost
    /// </summary>
    /// <returns>
    /// An expression for WIP Total Cost
    /// </returns>
    public static str WIPTotalCost()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::WIPLaborCost(), PSAActualEntity::WIPExpenseCost()),
                    SysComputedColumn::add(PSAActualEntity::WIPMaterialCost(), PSAActualEntity::WIPCostAccruedLoss())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>laborConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for labor consumption
    /// </summary>
    /// <returns>
    /// An expression for labor consumption
    /// </returns>
    public static str laborConsumption()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        return PSAActualEntity::createQuery_LaborConsumption(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>laborConsumption_WithoutNoNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for labor consumption excluding no/never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression for labor consumption excluding no/never ledger transactions
    /// </returns>
    public static str laborConsumption_WithoutNoNeverLedger()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        return PSAActualEntity::createQuery_LaborConsumption(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_LaborConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for labor consumption
    /// </summary>
    /// <returns>
    /// An expression for labor consumption
    /// </returns>
    protected static str createQuery_LaborConsumption(List postingTypeList)
    {
        List          transTypeList             = new List(Types::String);
        List          projOriginTypeExcludeList = new List(Types::String);

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
        );

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(SysComputedColumn::and(projOriginTypeExcludeList));

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                            SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting), fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>laborConsumptionQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for labor consumption Qty/hours
    /// </summary>
    /// <returns>
    /// An expression for labor consumption Qty/hours
    /// </returns>
    public static str laborConsumptionQty()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        return PSAActualEntity::createQuery_LaborConsumptionQty(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>laborConsumptionQty_WithoutNoNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for labor consumption Qty/hours excluding no/never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression for labor consumption Qty/hours excluding no/never ledger transactions
    /// </returns>
    public static str laborConsumptionQty_WithoutNoNeverLedger()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        return PSAActualEntity::createQuery_LaborConsumptionQty(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_LaborConsumptionQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for labor consumption Qty/hours
    /// </summary>
    /// <returns>
    /// An expression for labor consumption Qty/hours
    /// </returns>
    protected static str createQuery_LaborConsumptionQty(List postingTypeList)
    {
        List          transTypeList             = new List(Types::String);
        List          projOriginTypeExcludeList = new List(Types::String);

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
        );

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(SysComputedColumn::and(projOriginTypeExcludeList));

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                            SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting), fieldStr(ProjTransPosting, Qty)),
                            SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>expenseConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for expense consumption
    /// </summary>
    /// <returns>
    /// An expression for expense consumption
    /// </returns>
    public static str expenseConsumption()
    {
        List          transTypeList             = new List(Types::String);
        List          postingTypeList           = new List(Types::String);
        List          projOriginTypeExcludeList = new List(Types::String);

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
        );

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        transTypeList.addEnd(SysComputedColumn::and(projOriginTypeExcludeList));

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                            SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting), fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for material consumption
    /// </summary>
    /// <returns>
    /// An expression for material consumption
    /// </returns>
    public static str materialConsumption()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        return PSAActualEntity::createQuery_MaterialConsumption(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>materialConsumption_WithoutNeverLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for material consumption excluding never ledger transactions
    /// </summary>
    /// <returns>
    /// An expression for material consumption excluding never ledger transactions
    /// </returns>
    public static str materialConsumption_WithoutNeverLedger()
    {
        List          postingTypeList           = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        return PSAActualEntity::createQuery_MaterialConsumption(postingTypeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery_MaterialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a list of posting types, creates a computed column for material consumption
    /// </summary>
    /// <returns>
    /// An expression for material consumption
    /// </returns>
    protected static str createQuery_MaterialConsumption(List postingTypeList)
    {
        List          transTypeList             = new List(Types::String);
        List          projOriginTypeExcludeList = new List(Types::String);

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
        );

        projOriginTypeExcludeList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        transTypeList.addEnd(SysComputedColumn::and(projOriginTypeExcludeList));

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                            SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting), fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for total consumption
    /// </summary>
    /// <returns>
    /// An expression for total consumption
    /// </returns>
    public static str totalConsumption()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::laborConsumption(), PSAActualEntity::expenseConsumption()),
                    PSAActualEntity::materialConsumption()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>payrollAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Payroll allocation
    /// </summary>
    /// <returns>
    /// An expression payroll allocation
    /// </returns>
    public static str payrollAllocation()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedLaborRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced labor revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced Labor Revenue
    /// </returns>
    public static str invoicedLaborRevenue()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnOver)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedLaborQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced labor Qty
    /// </summary>
    /// <returns>
    /// An expression invoiced Labor Qty
    /// </returns>
    public static str invoicedLaborQty()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnOver)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, Qty))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedExpenseRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced expense revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced expense revenue
    /// </returns>
    public static str invoicedExpenseRevenue()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnOver)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedMaterialRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced material revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced material revenue
    /// </returns>
    public static str invoicedMaterialRevenue()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnOver)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedFeeRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced fee revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced fee revenue
    /// </returns>
    public static str invoicedFeeRevenue()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnOver)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnAccPrePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account prepayment revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on account prepayment revenue
    /// </returns>
    public static str invoicedOnAccPrePayment()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            originList      = new List(Types::String);

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, TransactionOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Prepayment)))
        );

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Invoice)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(originList));

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnAccDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account deduction revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on account deduction revenue
    /// </returns>
    public static str invoicedOnAccDeduction()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            originList      = new List(Types::String);

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, TransactionOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Deduction)))
        );

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Invoice)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(originList));

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnAccMilestone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account milestone revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on account milestone revenue
    /// </returns>
    public static str invoicedOnAccMilestone()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            originList      = new List(Types::String);

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, TransactionOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Milestone)))
        );

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::Invoice)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(originList));

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnAccBegBal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account beginning balance revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on beginning balance revenue
    /// </returns>
    public static str invoicedOnAccBegBal()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            originList      = new List(Types::String);

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, TransactionOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::BeginningBalance)))
        );

        originList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, LedgerOrigin)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::BeginningBalance)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(originList));

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::or(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account total revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on account total revenue
    /// </returns>
    public static str invoicedOnAcc()
    {
        return SysComputedColumn::add(
                        SysComputedColumn::add(PSAActualEntity::invoicedOnAccPrePayment(), PSAActualEntity::invoicedOnAccDeduction()),
                        SysComputedColumn::add(PSAActualEntity::invoicedOnAccMilestone(), PSAActualEntity::invoicedOnAccBegBal())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLRevenueOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for PL revenue for On-Account
    /// </summary>
    /// <returns>
    /// An expression PL revenue for On-account
    /// </returns>
    public static str PLRevenueOnAccount()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedPLTotalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced PL total revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced PL total revenue
    /// </returns>
    public static str invoicedPLTotalRevenue()
    {
        return  SysComputedColumn::add(
                              SysComputedColumn::add(PSAActualEntity::invoicedLaborRevenue(), PSAActualEntity::invoicedExpenseRevenue()),
                              SysComputedColumn::add(PSAActualEntity::invoicedMaterialRevenue(), PSAActualEntity::invoicedFeeRevenue())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedTotalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for invoiced on account total revenue
    /// </summary>
    /// <returns>
    /// An expression invoiced on account total revenue
    /// </returns>
    public static str invoicedTotalRevenue()
    {
        return  SysComputedColumn::add(
                    SysComputedColumn::add(
                                SysComputedColumn::add(PSAActualEntity::invoicedLaborRevenue(), PSAActualEntity::invoicedExpenseRevenue()),
                                SysComputedColumn::add(PSAActualEntity::invoicedMaterialRevenue(), PSAActualEntity::invoicedFeeRevenue())),
                    PSAActualEntity::invoicedOnAcc()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueSalesValueLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue sales value for labor
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue sales value for labor
    /// </returns>
    public static str accruedRevenueSalesValueLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueSalesValueExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue sales value for expense
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue sales value for expense
    /// </returns>
    public static str accruedRevenueSalesValueExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::negative(SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueSalesValueMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue sales value for materials
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue sales value for materials
    /// </returns>
    public static str accruedRevenueSalesValueMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::negative(SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueSalesValueFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue sales value for Fee
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue sales value for Fee
    /// </returns>
    public static str accruedRevenueSalesValueFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesValue)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::negative(SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLTotalAccruedRevenueSalesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for PL Accrued Revenue Sales Value
    /// </summary>
    /// <returns>
    /// An expression for PL Accrued Revenue Sales Value
    /// </returns>
    public static str PLTotalAccruedRevenueSalesValue()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueSalesValueLabor(), PSAActualEntity::accruedRevenueSalesValueExpense()),
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueSalesValueMaterial(), PSAActualEntity::accruedRevenueSalesValueFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueSubscription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue for Fee subscription
    /// </summary>
    /// <returns>
    /// An expression for Accrued revenue for Fee subscription
    /// </returns>
    public static str accruedRevenueSubscription()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueSubscription)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue for On-Account
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue for On-account
    /// </returns>
    public static str accruedRevenueOnAccount()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProductionLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue production value for Labor
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue production value for Labor
    /// </returns>
    public static str accruedRevenueProductionLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProductionExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue production value for expense
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue production value for expense
    /// </returns>
    public static str accruedRevenueProductionExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProductionMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue production value for Material
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue production value for Material
    /// </returns>
    public static str accruedRevenueProductionMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProductionFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue production value for Fee
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue production value for Fee
    /// </returns>
    public static str accruedRevenueProductionFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProductionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued Revenue Production
    /// </summary>
    /// <returns>
    /// An expression for Accrued Revenue Production
    /// </returns>
    public static str accruedRevenueProductionTotal()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueProductionLabor(), PSAActualEntity::accruedRevenueProductionExpense()),
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueProductionMaterial(), PSAActualEntity::accruedRevenueProductionFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProfitLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue profit value for Labor
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue profit value for Labor
    /// </returns>
    public static str accruedRevenueProfitLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProfitExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue Profit value for expense
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue Profit value for expense
    /// </returns>
    public static str accruedRevenueProfitExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProfitMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue Profit value for Material
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue Profit value for Material
    /// </returns>
    public static str accruedRevenueProfitMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProfitFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued revenue Profit value for Fee
    /// </summary>
    /// <returns>
    /// An expression Accrued revenue Profit value for Fee
    /// </returns>
    public static str accruedRevenueProfitFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueProfitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued Revenue Profit
    /// </summary>
    /// <returns>
    /// An expression for Accrued Revenue Profit
    /// </returns>
    public static str accruedRevenueProfitTotal()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueProfitLabor(), PSAActualEntity::accruedRevenueProfitExpense()),
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueProfitMaterial(), PSAActualEntity::accruedRevenueProfitFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruedRevenueTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Accrued Revenue Sales Total - Salesvalue + Production + Profit + Subscription
    /// </summary>
    /// <returns>
    /// An expression for Accrued Revenue Sales Total - Salesvalue + Production + Profit + Subscription
    /// </returns>
    public static str accruedRevenueTotal()
    {
        return SysComputedColumn::add(
                SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::PLTotalAccruedRevenueSalesValue(), PSAActualEntity::accruedRevenueOnAccount()),
                    SysComputedColumn::add(PSAActualEntity::accruedRevenueProductionTotal(), PSAActualEntity::accruedRevenueProfitTotal())),
                PSAActualEntity::accruedRevenueSubscription()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueSalesValueLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP sales value for labor
    /// </summary>
    /// <returns>
    /// An expression WIP sales value for labor
    /// </returns>
    public static str wipRevenueSalesValueLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueSalesValueExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP sales value for expense
    /// </summary>
    /// <returns>
    /// An expression WIP sales value for expense
    /// </returns>
    public static str wipRevenueSalesValueExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueSalesValueMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP sales value for materials
    /// </summary>
    /// <returns>
    /// An expression WIP sales value for materials
    /// </returns>
    public static str wipRevenueSalesValueMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueSalesValueFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP sales value for Fee
    /// </summary>
    /// <returns>
    /// An expression WIP sales value for Fee
    /// </returns>
    public static str wipRevenueSalesValueFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPTotalSalesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Sales Value
    /// </summary>
    /// <returns>
    /// An expression for WIP Sales Value
    /// </returns>
    public static str WIPTotalSalesValue()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::wipRevenueSalesValueLabor(), PSAActualEntity::wipRevenueSalesValueExpense()),
                    SysComputedColumn::add(PSAActualEntity::wipRevenueSalesValueMaterial(), PSAActualEntity::wipRevenueSalesValueFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipSubscription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Fee Subsciption
    /// </summary>
    /// <returns>
    /// An expression WIP Fee Subsciption
    /// </returns>
    public static str wipSubscription()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPSubscription)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProductionLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP production value for Labor
    /// </summary>
    /// <returns>
    /// An expression WIP production value for Labor
    /// </returns>
    public static str wipRevenueProductionLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProductionExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP production value for expense
    /// </summary>
    /// <returns>
    /// An expression for ProjWIPProduction production value for expense
    /// </returns>
    public static str wipRevenueProductionExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProductionMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP production value for Material
    /// </summary>
    /// <returns>
    /// An expression for WIP production value for Material
    /// </returns>
    public static str wipRevenueProductionMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProductionFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP production value for Fee
    /// </summary>
    /// <returns>
    /// An expression for WIP production value for Fee
    /// </returns>
    public static str wipRevenueProductionFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProductionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Production
    /// </summary>
    /// <returns>
    /// An expression for WIP Production
    /// </returns>
    public static str wipRevenueProductionTotal()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::wipRevenueProductionLabor(), PSAActualEntity::wipRevenueProductionExpense()),
                    SysComputedColumn::add(PSAActualEntity::wipRevenueProductionMaterial(), PSAActualEntity::wipRevenueProductionFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProfitLabor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for wip profit value for Labor
    /// </summary>
    /// <returns>
    /// An expression wip profit value for Labor
    /// </returns>
    public static str wipRevenueProfitLabor()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProfitExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Profit value for expense
    /// </summary>
    /// <returns>
    /// An expression WIP Profit value for expense
    /// </returns>
    public static str wipRevenueProfitExpense()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProfitMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Profit value for Material
    /// </summary>
    /// <returns>
    /// An expression WIP Profit value for Material
    /// </returns>
    public static str wipRevenueProfitMaterial()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProfitFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Profit value for Fee
    /// </summary>
    /// <returns>
    /// An expression WIP Profit value for Fee
    /// </returns>
    public static str wipRevenueProfitFee()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipRevenueProfitTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Profit Total
    /// </summary>
    /// <returns>
    /// An expression for WIP Profit total
    /// </returns>
    public static str wipRevenueProfitTotal()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::wipRevenueProfitLabor(), PSAActualEntity::wipRevenueProfitExpense()),
                    SysComputedColumn::add(PSAActualEntity::wipRevenueProfitMaterial(), PSAActualEntity::wipRevenueProfitFee())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoicedOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Invoiced On-Account
    /// </summary>
    /// <returns>
    /// An expression for WIP invoiced On-account
    /// </returns>
    public static str wipInvoicedOnAccount()
    {
        List            transTypeList   = new List(Types::String);
        List            postingTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        transTypeList.addEnd(SysComputedColumn::and(postingTypeList));

        return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(tableStr(PSAActualEntity), identifierStr(ProjTransPosting) , fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPTotalSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Sales Total - Salesvalue + Production + Profit + Subscription
    /// </summary>
    /// <returns>
    /// An expression for Salesvalue + Production + Profit + Subscription
    /// </returns>
    public static str WIPTotalSales()
    {
        return SysComputedColumn::add(
                    SysComputedColumn::add(PSAActualEntity::WIPTotalSalesValue(), PSAActualEntity::wipSubscription()),
                    SysComputedColumn::add(PSAActualEntity::wipRevenueProductionTotal(), PSAActualEntity::wipRevenueProfitTotal())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossWIPTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for WIP Cost Total + WIP Sales Total
    /// </summary>
    /// <returns>
    /// An expression for WIP Cost Total + WIP Sales Total
    /// </returns>
    public static str grossWIPTotal()
    {
        return SysComputedColumn::add(
                    PSAActualEntity::WIPTotalSalesValue(),
                    PSAActualEntity::WIPTotalCost()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>netWIPTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computed column for Net WIP i.e. Gross WIP - WIP Invoiced On account
    /// </summary>
    /// <returns>
    /// An expression for Net WIP i.e. Gross WIP - WIP Invoiced On account
    /// </returns>
    public static str netWIPTotal()
    {
        return SysComputedColumn::subtract(
                    PSAActualEntity::grossWIPTotal(),
                    PSAActualEntity::wipInvoicedOnAccount()
        );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<Label>@SYS70093</Label>
	<Tags>Budget</Tags>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<IsReadOnly>Yes</IsReadOnly>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>PSAActuals</PublicCollectionName>
	<PublicEntityName>PSAActual</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportToExcel</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PLTotalCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PLTotalAccruedRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalInvoicedRevenue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActivityNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>ActivityNumber</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AmountMst</Name>
			<Mandatory>No</Mandatory>
			<DataField>AmountMst</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryId</Name>
			<Mandatory>No</Mandatory>
			<DataField>CategoryId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>costSales</Name>
			<Mandatory>No</Mandatory>
			<DataField>costSales</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmplItemId</Name>
			<Mandatory>No</Mandatory>
			<DataField>EmplItemId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InventTransId</Name>
			<Mandatory>No</Mandatory>
			<DataField>InventTransId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>LedgerDimension</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerOrigin</Name>
			<Mandatory>No</Mandatory>
			<DataField>LedgerOrigin</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerTransDate</Name>
			<Label>@SYS23410</Label>
			<Mandatory>No</Mandatory>
			<DataField>LedgerTransDate</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>PaymentDate</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentStatus</Name>
			<Mandatory>No</Mandatory>
			<DataField>PaymentStatus</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingType</Name>
			<Mandatory>No</Mandatory>
			<DataField>PostingType</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContractId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjAdjustRefId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjAdjustRefId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjFundingSource</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ProjFundingSource</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjTransDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>ProjTransDate</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjTransType</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjTransType</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjType</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjType</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Qty</Name>
			<Mandatory>No</Mandatory>
			<DataField>Qty</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubscriptionId</Name>
			<Mandatory>No</Mandatory>
			<DataField>SubscriptionId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionOrigin</Name>
			<Mandatory>No</Mandatory>
			<DataField>TransactionOrigin</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransId</Name>
			<Label>@SYS25395</Label>
			<Mandatory>No</Mandatory>
			<DataField>TransId</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<Mandatory>No</Mandatory>
			<DataField>Voucher</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceLegalEntity</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>ResourceLegalEntity</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS129012</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>LedgerDimension</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CompanyInfo_PartyNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CompanyInfo_DataArea</Name>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjFundingSource_ContractId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjFundingSource_FundingSourceId</Name>
			<Mandatory>No</Mandatory>
			<DataField>FundingSourceId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLLaborCost</Name>
			<Label>@SYS122248</Label>
			<ComputedFieldMethod>PLLaborCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLExpenseCost</Name>
			<Label>@SYS122250</Label>
			<ComputedFieldMethod>PLExpenseCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLMaterialCost</Name>
			<Label>@SYS122252</Label>
			<ComputedFieldMethod>PLMaterialCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLCostAccruedLoss</Name>
			<ComputedFieldMethod>plCostAccruedLoss</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLTotalCost</Name>
			<Label>@SYS180434</Label>
			<ComputedFieldMethod>PLTotalCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPLaborCost</Name>
			<Label>@SYS78746</Label>
			<ComputedFieldMethod>WIPLaborCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPExpenseCost</Name>
			<Label>@SYS78747</Label>
			<ComputedFieldMethod>WIPExpenseCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPMaterialCost</Name>
			<Label>@SYS58393</Label>
			<ComputedFieldMethod>WIPMaterialCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPCostAccruedLoss</Name>
			<ComputedFieldMethod>wipCostAccruedLoss</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPTotalCost</Name>
			<Label>@SYS180434</Label>
			<ComputedFieldMethod>WIPTotalCost</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedLaborCost</Name>
			<Label>@SYS55269</Label>
			<ComputedFieldMethod>laborConsumption</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedLaborQty</Name>
			<Label>@SYS105179</Label>
			<ComputedFieldMethod>laborConsumptionQty</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedExpenseCost</Name>
			<Label>@SYS78349</Label>
			<ComputedFieldMethod>expenseConsumption</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedMaterialCost</Name>
			<Label>@SYS14428</Label>
			<ComputedFieldMethod>materialConsumption</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>totalConsumption</Name>
			<Label>@SYS78919</Label>
			<ComputedFieldMethod>totalConsumption</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PayrollAllocation</Name>
			<Label>@SYS4179</Label>
			<ComputedFieldMethod>payrollAllocation</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>LaborInvoicedRevenue</Name>
			<Label>@SYS301915</Label>
			<ComputedFieldMethod>invoicedLaborRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>LaborInvoicedQty</Name>
			<Label>@SYS301915</Label>
			<ComputedFieldMethod>invoicedLaborQty</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ExpenseInvoicedRevenue</Name>
			<Label>@SYS301923</Label>
			<ComputedFieldMethod>invoicedExpenseRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>MaterialInvoicedRevenue</Name>
			<Label>@SYS301917</Label>
			<ComputedFieldMethod>invoicedMaterialRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>FeeInvoicedRevenue</Name>
			<Label>@SYS9154</Label>
			<ComputedFieldMethod>invoicedFeeRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OnAccPrePayment</Name>
			<Label>@SYS59473</Label>
			<ComputedFieldMethod>invoicedOnAccPrePayment</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OnAccDeduction</Name>
			<Label>@SYS32341</Label>
			<ComputedFieldMethod>invoicedOnAccDeduction</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OnAccMilestone</Name>
			<Label>@SYS26744</Label>
			<ComputedFieldMethod>invoicedOnAccMilestone</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OnAccBegBal</Name>
			<Label>@SYS302590</Label>
			<ComputedFieldMethod>invoicedOnAccBegBal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>OnAccTotal</Name>
			<Label>@SYS114499</Label>
			<ComputedFieldMethod>invoicedOnAcc</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLInvoicedRevenue</Name>
			<Label>@SYS180675</Label>
			<ComputedFieldMethod>invoicedPLTotalRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>totalInvoicedRevenue</Name>
			<Label>@SYS78852</Label>
			<ComputedFieldMethod>invoicedTotalRevenue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSalesValue</Name>
			<Label>@SYS55368</Label>
			<ComputedFieldMethod>PLTotalAccruedRevenueSalesValue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueProduction</Name>
			<Label>@SYS55370</Label>
			<ComputedFieldMethod>accruedRevenueProductionTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueProfit</Name>
			<Label>@SYS55372</Label>
			<ComputedFieldMethod>accruedRevenueProfitTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSubscription</Name>
			<Label>@SYS87727</Label>
			<ComputedFieldMethod>accruedRevenueSubscription</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueOnAcc</Name>
			<Label>@SYS78385</Label>
			<ComputedFieldMethod>accruedRevenueOnAccount</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLTotalAccruedRevenue</Name>
			<Label>@SYS78437</Label>
			<ComputedFieldMethod>accruedRevenueTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPSalesValue</Name>
			<Label>@SYS55369</Label>
			<ComputedFieldMethod>WIPTotalSalesValue</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPProduction</Name>
			<Label>@SYS55371</Label>
			<ComputedFieldMethod>wipRevenueProductionTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPProfit</Name>
			<Label>@SYS55373</Label>
			<ComputedFieldMethod>wipRevenueProfitTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPSubscription</Name>
			<Label>@SYS84266</Label>
			<ComputedFieldMethod>wipSubscription</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPSalesTotal</Name>
			<Label>@SYS78748</Label>
			<ComputedFieldMethod>WIPTotalSales</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>WIPInvoicedOnAccount</Name>
			<Label>@SYS78386</Label>
			<ComputedFieldMethod>wipInvoicedOnAccount</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSalesValueLabor</Name>
			<Label>@SYS55368</Label>
			<ComputedFieldMethod>accruedRevenueSalesValueLabor</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSalesValueExpense</Name>
			<Label>@SYS55368</Label>
			<ComputedFieldMethod>accruedRevenueSalesValueExpense</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSalesValueMaterial</Name>
			<Label>@SYS55368</Label>
			<ComputedFieldMethod>accruedRevenueSalesValueMaterial</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLAccruedRevenueSalesValueFee</Name>
			<Label>@SYS55368</Label>
			<ComputedFieldMethod>accruedRevenueSalesValueFee</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>GrossWIP</Name>
			<Label>@SYS78441</Label>
			<ComputedFieldMethod>grossWIPTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>NetWIP</Name>
			<Label>@SYS78442</Label>
			<ComputedFieldMethod>netWIPTotal</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLInvoicedRevenueOnAccount</Name>
			<Label>@SYS55367</Label>
			<ComputedFieldMethod>PLRevenueOnAccount</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLLaborQty</Name>
			<Label>@SYS105179</Label>
			<ComputedFieldMethod>PLLaborQty</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Resource</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Resource</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCategory</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjTransPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLLaborQtyWithoutNoNeverLedger</Name>
			<HelpText>@SYS105179</HelpText>
			<Label>@SYS105179</Label>
			<ComputedFieldMethod>PLLaborQty_WithoutNoNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLLaborCostWithoutNoNeverLedger</Name>
			<HelpText>@SYS122248</HelpText>
			<Label>@SYS122248</Label>
			<ComputedFieldMethod>PLLaborCost_WithoutNoNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedLaborCostWithoutNoNeverLedger</Name>
			<HelpText>@SYS55269</HelpText>
			<Label>@SYS55269</Label>
			<ComputedFieldMethod>laborConsumption_WithoutNoNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedLaborQtyWithoutNoNeverLedger</Name>
			<HelpText>@SYS105179</HelpText>
			<Label>@SYS105179</Label>
			<ComputedFieldMethod>laborConsumptionQty_WithoutNoNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>PLMaterialCostWithoutNeverLedger</Name>
			<HelpText>@SYS122252</HelpText>
			<Label>@SYS122252</Label>
			<ComputedFieldMethod>PLMaterialCost_WithoutNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ConsumedMaterialCostWithoutNeverLedger</Name>
			<HelpText>@SYS14428</HelpText>
			<Label>@SYS14428</Label>
			<ComputedFieldMethod>materialConsumption_WithoutNeverLedger</ComputedFieldMethod>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ResourceId</DataField>
			<DataSource>Resource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ResourceCompanyId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ResourceCompanyId</DataField>
			<DataSource>Resource</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>TransId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjStatementEntityMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerTransDate</MapField>
					<MapFieldTo>LedgerTransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransDate</MapField>
					<MapFieldTo>ProjTransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransType</MapField>
					<MapFieldTo>ProjTransType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjType</MapField>
					<MapFieldTo>ProjType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DefaultDimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTransPosting</Name>
				<DynamicFields>Yes</DynamicFields>
				<IsReadOnly>Yes</IsReadOnly>
				<Table>ProjTransPosting</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerDimension</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionCombinationEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionAttributeValueCombination</Name>
								<Field>LedgerDimension</Field>
								<JoinDataSource>ProjTransPosting</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjFundingSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjFundingSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProjFundingSource</Name>
								<JoinRelationName>ProjFundingSource</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>Resource</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ResourceView</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CompanyInfo</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>CompanyInfo</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ResourceCompanyID</Field>
										<JoinDataSource>Resource</JoinDataSource>
										<RelatedField>DataArea</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Resource</Field>
								<JoinDataSource>ProjTransPosting</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjTransPosting</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>ProjTable</Name>
								<JoinRelationName>ProjTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>