<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPeriodEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the TimeFrequency and TimesheetFrequency fields of the buffer based on the Frequency field of the entity.
    /// </summary>
    /// <param name = "_entityCtx">Entity context.</param>
    /// <param name = "_dataSourceCtx">Datasource context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjPeriodEntity, ProjPeriodTable))
        {
            ProjPeriodTable projPeriodTable = _dataSourceCtx.getBuffer();
            projPeriodTable.editPeriodFrequency(true, this.Frequency);
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the validation of TimesheetFrequency and TimeFrequency fields when persisting the entity into the database since
    /// those fields do not allow edit on create.
    /// </summary>
    /// <param name = "_entityCtx">Entity context</param>
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        this.skipDataSourceValidateField(fieldNum(ProjPeriodEntity, TimesheetFrequency), true);
        this.skipDataSourceValidateField(fieldNum(ProjPeriodEntity, PeriodFrequency), true);

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFrequencySqlQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL query to be used when generating the output for column Frequency.
    /// </summary>
    /// <returns>SQL query to be used when generating the output for column Frequency.</returns>
    /// <remarks>
    /// Example of the generated SQL:
    /// (CAST ((
    ///     CASE
    ///         WHEN T1.TIMESHEETFREQUENCY = 0 THEN -- Please, refer to getSwitchForFrequencyBasedOnTimeFrequency
    ///         ELSE -- Please, refer to getSwitchForFrequencyBasedOnTimesheetFrequency
    ///     END
    ///     ) AS INT))
    ///     AS FREQUENCY
    /// </remarks>
    private static str getFrequencySqlQuery()
    {
        var timesheetFrequencyField = SysComputedColumn::returnField(tablestr(ProjPeriodEntity), dataEntityDataSourceStr(ProjPeriodEntity, ProjPeriodTable), fieldstr(ProjPeriodTable, TimesheetFrequency));

        var timesheetFrequencyIsNone = SysComputedColumn::equalExpression(timesheetFrequencyField, SysComputedColumn::returnLiteral(TSPeriodFrequency::None));

        return SysComputedColumn::if(timesheetFrequencyIsNone,
                                 ProjPeriodEntity::getSwitchForFrequencyBasedOnTimeFrequency(),
                                 ProjPeriodEntity::getSwitchForFrequencyBasedOnTimesheetFrequency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSwitchForFrequencyBasedOnTimeFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the switch SQL statement to be executed when the TimesheetFrequency is None.
    /// </summary>
    /// <returns>SQL statement to be executed when TimesheetFrequency is different than none.</returns>
    /// <remarks>
    /// Example of the generated SQL:
    /// CASE T1.TIMEFREQUENCY
    ///     WHEN 1 THEN 5
    ///     WHEN 4 THEN 6
    ///     WHEN 5 THEN 7
    ///     WHEN 6 THEN 8
    ///     ELSE 8
    /// END
    /// </remarks>
    private static str getSwitchForFrequencyBasedOnTimeFrequency()
    {
        str timeFrequencyComparisonField = SysComputedColumn::comparisonField(tableStr(ProjPeriodEntity), tableStr(ProjPeriodTable), fieldStr(ProjPeriodTable, TimeFrequency));

        var timeFrequencyMap = ProjPeriodEntity::timeFrequencyMap();

        return SysComputedColumn::switch(timeFrequencyComparisonField, timeFrequencyMap, SysComputedColumn::returnLiteral(TSPerWeekMth::Unlimited));
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFrequencyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the time frequency comparison expression map.
    /// </summary>
    /// <returns>The time frequency comparison expression map.</returns>
    protected static Map timeFrequencyMap()
    {
        var timeFrequencyMap = SysComputedColumn::comparisionExpressionMap();
        
        timeFrequencyMap.insert(SysComputedColumn::comparisonLiteral(PerDayWeekMthQtYr::Unlimited), SysComputedColumn::returnLiteral(TSPerWeekMth::Unlimited));
        timeFrequencyMap.insert(SysComputedColumn::comparisonLiteral(PerDayWeekMthQtYr::Day), SysComputedColumn::returnLiteral(TSPerWeekMth::Day));
        timeFrequencyMap.insert(SysComputedColumn::comparisonLiteral(PerDayWeekMthQtYr::Quarter), SysComputedColumn::returnLiteral(TSPerWeekMth::Quarter));
        timeFrequencyMap.insert(SysComputedColumn::comparisonLiteral(PerDayWeekMthQtYr::Year), SysComputedColumn::returnLiteral(TSPerWeekMth::Year));
        
        return timeFrequencyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSwitchForFrequencyBasedOnTimesheetFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the switch SQL statement to be executed when the TimesheetFrequency is different than None.
    /// </summary>
    /// <returns>SQL statement to be executed when TimesheetFrequency is different than none.</returns>
    /// <remarks>
    /// Example of the generated SQL:
    /// CASE T1.TIMESHEETFREQUENCY
    ///     WHEN 1 THEN 0
    ///     WHEN 2 THEN 1
    ///     WHEN 3 THEN 2
    ///     WHEN 4 THEN 3
    ///     WHEN 5 THEN 4
    ///     ELSE 8
    ///  END
    /// </remarks>
    private static str getSwitchForFrequencyBasedOnTimesheetFrequency()
    {
        str timesheetFrequencyComparisonField = SysComputedColumn::comparisonField(tableStr(ProjPeriodEntity), tableStr(ProjPeriodTable), fieldStr(ProjPeriodTable, TimesheetFrequency));

        Map timesheetFrequencyMap = ProjPeriodEntity::createTimesheetFrequencyMap();

        return SysComputedColumn::switch(timesheetFrequencyComparisonField, timesheetFrequencyMap, SysComputedColumn::returnLiteral(TSPerWeekMth::Unlimited));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimesheetFrequencyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// create time sheet frequency map.
    /// </summary>
    /// <returns>
    /// created instance of time sheet frequency map.
    /// </returns>
    protected static Map createTimesheetFrequencyMap()
    {
        var timesheetFrequencyMap = SysComputedColumn::comparisionExpressionMap();
        timesheetFrequencyMap.insert(SysComputedColumn::comparisonLiteral(TSPeriodFrequency::Week), SysComputedColumn::returnLiteral(TSPerWeekMth::Week));
        timesheetFrequencyMap.insert(SysComputedColumn::comparisonLiteral(TSPeriodFrequency::BiWeekly), SysComputedColumn::returnLiteral(TSPerWeekMth::BiWeekly));
        timesheetFrequencyMap.insert(SysComputedColumn::comparisonLiteral(TSPeriodFrequency::SemiMonthly), SysComputedColumn::returnLiteral(TSPerWeekMth::SemiMonthly));
        timesheetFrequencyMap.insert(SysComputedColumn::comparisonLiteral(TSPeriodFrequency::Month), SysComputedColumn::returnLiteral(TSPerWeekMth::Month));
        timesheetFrequencyMap.insert(SysComputedColumn::comparisonLiteral(TSPeriodFrequency::Period), SysComputedColumn::returnLiteral(TSPerWeekMth::Period));

        return timesheetFrequencyMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<Label>@SYS50475</Label>
	<Tags>Timesheet periods</Tags>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjPeriodStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectPeriods</PublicCollectionName>
	<PublicEntityName>ProjectPeriod</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PeriodId</Name>
			<DataField>PeriodId</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WeekDayPeriodStart</Name>
			<DataField>WeekStart</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>Frequency</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>getFrequencySqlQuery</ComputedFieldMethod>
			<EnumType>TSPerWeekMth</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PeriodFrequency</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TimeFrequency</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TimesheetFrequency</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>TimesheetFrequency</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsWeekAutoSplit</Name>
			<DataField>AutoSplitWeek</DataField>
			<DataSource>ProjPeriodTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PeriodId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjPeriodTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjPeriodTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>