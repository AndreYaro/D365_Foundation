<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlStatisticsView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlStatisticsView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTotalRevisedBudgetAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>List</c> object containing the SQL statements used to determine the total revised budget.
    /// </summary>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total revised budget.
    /// </returns>
    private static List getTotalRevisedBudgetAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List additionValueStatements = new List(Types::String);
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetSourceTrackingDSName = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str budgetSourceTrackingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str budgetControlConfigurationDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str budgetSourceTrackingRelievingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);
        str isCarryForward = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, isCarryForward), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includeOriginalBudget;
        str includeAmendments;
        str includeDraftAmendments;
        str includeTransfers;
        str includeDraftTransfersIn;
        str includeDraftTransfersOut;
        str includeCarryForward;

        if (_doRestrictToConfiguration)
        {
            includeOriginalBudget = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumOriginalBudget));
            includeAmendments = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumAmendments));
            includeDraftAmendments = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumDraftAmendments));
            includeTransfers = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumTransfers));
            includeDraftTransfersIn = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumDraftTransfersIn));
            includeDraftTransfersOut = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SumDraftTransfersOut));
            includeCarryForward = budgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, IncludeCarryforwardAmounts));
        }
        else
        {
            includeOriginalBudget = SysComputedColumn::returnLiteral(true);
            includeAmendments = SysComputedColumn::returnLiteral(true);
            includeDraftAmendments = SysComputedColumn::returnLiteral(true);
            includeTransfers = SysComputedColumn::returnLiteral(true);
            includeDraftTransfersIn = SysComputedColumn::returnLiteral(true);
            includeDraftTransfersOut = SysComputedColumn::returnLiteral(true);
            includeCarryForward = SysComputedColumn::returnLiteral(true);
        }

        // If original budget is to be included according to the configuration, the category is original, and the status is confirmed, add in the amount.
        List andListForOriginalBudget = new List(Types::String);

        andListForOriginalBudget.addEnd(SysComputedColumn::equalExpression(includeOriginalBudget, SysComputedColumn::returnLiteral(true)));
        andListForOriginalBudget.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Original)));
        andListForOriginalBudget.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForOriginalBudget),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If amendments are to be included according to the configuration, the category is amendment, and the status is confirmed, add in the amount.
        List andListForAmendments = new List(Types::String);

        andListForAmendments.addEnd(SysComputedColumn::equalExpression(includeAmendments, SysComputedColumn::returnLiteral(true)));
        andListForAmendments.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Amendment)));
        andListForAmendments.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForAmendments),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft amendments are to be included according to the configuration, the category is amendment, and the status is draft, add in the amount.
        List andListForDraftAmendments = new List(Types::String);

        andListForDraftAmendments.addEnd(SysComputedColumn::equalExpression(includeDraftAmendments, SysComputedColumn::returnLiteral(true)));
        andListForDraftAmendments.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Amendment)));
        andListForDraftAmendments.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftAmendments),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If transfers are to be included according to the configuration, the category is transfer, and the status is confirmed, add in the amount.
        List andListForTransfers = new List(Types::String);

        andListForTransfers.addEnd(SysComputedColumn::equalExpression(includeTransfers, SysComputedColumn::returnLiteral(true)));
        andListForTransfers.addEnd(
            SysComputedColumn::or2(
                SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::TransferIn)),
                SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::TransferOut))));
        andListForTransfers.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForTransfers),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft transfers in are to be included according to the configuration, the category is transfer in, and the status is draft, add in the amount.
        List andListForDraftTransfersIn = new List(Types::String);

        andListForDraftTransfersIn.addEnd(SysComputedColumn::equalExpression(includeDraftTransfersIn, SysComputedColumn::returnLiteral(true)));
        andListForDraftTransfersIn.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::TransferIn)));
        andListForDraftTransfersIn.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftTransfersIn),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft transfers out are to be included according to the configuration, the category is transfer out, and the status is draft, add in the amount.
        List andListForDraftTransfersOut = new List(Types::String);

        andListForDraftTransfersOut.addEnd(SysComputedColumn::equalExpression(includeDraftTransfersOut, SysComputedColumn::returnLiteral(true)));
        andListForDraftTransfersOut.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::TransferOut)));
        andListForDraftTransfersOut.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftTransfersOut),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If carry forward amounts and original budget are to be included according to the configuration, the category is CarryForwardBudget,
        // this is a carry forward item, and the status is confirmed, add in the amount.
        List andListForIncludeCarryForward = new List(Types::String);

        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeOriginalBudget, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::CarryForwardBudget)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        if (_doRestrictToConfiguration)
        {
            andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        }

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForIncludeCarryForward),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRevisedBudgetAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the TotalRevisedBudget field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for view definition for the TotalRevisedBudget field.
    /// </returns>
    internal static str getTotalRevisedBudgetAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        // Sum together all of the amounts impacting this calculated column.
        return SysComputedColumn::addList(BudgetControlStatisticsView::getTotalRevisedBudgetAdditionValueStatements(_viewType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalEncumbrancesAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>List</c> object containing the SQL statements used to determine the total encumbrances.
    /// </summary>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total encumbrances.
    /// </returns>
    private static List getTotalEncumbrancesAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List additionValueStatements = new List(Types::String);
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetSourceTrackingDSName = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str budgetSourceTrackingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str budgetControlConfigurationDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str budgetSourceTrackingRelievingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);
        str isCarryForward = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, isCarryForward), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includeEncumbrances;
        str includeDraftEncumbrances;
        str includeDraftEncumbranceReductions;
        str includeCarryForward;

        if (_doRestrictToConfiguration)
        {
            includeEncumbrances = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractEncumbrances));
            includeDraftEncumbrances = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractDraftEncumbrances));
            includeDraftEncumbranceReductions = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractDraftEncumbranceReductions));
            includeCarryForward = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, IncludeCarryforwardAmounts));
        }
        else
        {
            includeEncumbrances = SysComputedColumn::returnLiteral(true);
            includeDraftEncumbrances = SysComputedColumn::returnLiteral(true);
            includeDraftEncumbranceReductions = SysComputedColumn::returnLiteral(true);
            includeCarryForward = SysComputedColumn::returnLiteral(true);
        }

        // BudgetSourceTrackingRelievingDetail fields
        str accountingCurrencyAmountRelieving = BudgetControlStatisticsView::getAggregateComputedColumnStringForAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        str relievedBudgetSourceTrackingDetail = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), FieldNameGenerationMode::WhereClause);

        // If encumbrances are to be included according to the configuration, the category is encumbrance,
        // the status is confirmed, and this is not a carry forward item, add in the amount.
        List andListForEncumbrances = new List(Types::String);

        andListForEncumbrances.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForEncumbrances.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForEncumbrances.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForEncumbrances.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForEncumbrances),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft encumbrances are to be included according to the configuration, the category is encumbrance,
        // the status is draft, and this is not a carry forward item, add in the amount.
        List andListForDraftEncumbrances = new List(Types::String);

        andListForDraftEncumbrances.addEnd(SysComputedColumn::equalExpression(includeDraftEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForDraftEncumbrances.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForDraftEncumbrances.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));
        andListForDraftEncumbrances.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftEncumbrances),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If carry forward amounts and encumbrances are to be included according to the configuration, the category is encumbrance,
        // and this is a carry forward item, add in the amount.
        // This list intentionally ignores tracking status; both confirmed and draft carry-forward encumbrance amounts should be included.
        List andListForIncludeCarryForward = new List(Types::String);

        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForIncludeCarryForward),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft encumbrance reductions are to be included according to the configuration, the category is encumbrance reduction,
        // the status is draft, and this is not a carry forward item, add in the amount.
        List andListForDraftEncumbranceReductions = new List(Types::String);

        andListForDraftEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(includeDraftEncumbranceReductions, SysComputedColumn::returnLiteral(true)));
        andListForDraftEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::EncumbranceReduction)));
        andListForDraftEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));
        andListForDraftEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftEncumbranceReductions),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If encumbrances are to be included according to the configuration, the category is encumbrance reduction,
        // the status is confirmed, and this is not a carry forward item, add in the amount.
        List andListForEncumbranceReductions = new List(Types::String);

        andListForEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::EncumbranceReduction)));
        andListForEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForEncumbranceReductions),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If encumbrances and carry forward amounts are to be included according to the configuration, the category is encumbrance reduction,
        // and this is a carry forward item, add in the amount.
        // This list intentionally ignores tracking status; both confirmed and draft carry-forward encumbrance reduction amounts should be included.
        List andListForCarryForwardEncumbranceReductions = new List(Types::String);

        andListForCarryForwardEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::EncumbranceReduction)));
        andListForCarryForwardEncumbranceReductions.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForCarryForwardEncumbranceReductions),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, encumbrances are to be included according to the configuration,
        // and the category is encumbrance reduction, add in the relieving amount.
        // This list intentionally ignores tracking status; both confirmed and draft relieving amounts should be included.
        List andListForConfirmedEncumbranceReductionsRelieving = new List(Types::String);

        andListForConfirmedEncumbranceReductionsRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForConfirmedEncumbranceReductionsRelieving.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForConfirmedEncumbranceReductionsRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::EncumbranceReduction)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForConfirmedEncumbranceReductionsRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, encumbrances and carry forward amounts are to be included according to the configuration,
        // the category is encumbrance, and this is a carry forward item, add in the relieving amount.
        // This list intentionally ignores tracking status; both confirmed and draft relieving carry-forward encumbrance reduction amounts should be included.
        List andListForCarryForwardEncumbrancesRelieving = new List(Types::String);

        andListForCarryForwardEncumbrancesRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForCarryForwardEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForCarryForwardEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForCarryForwardEncumbrancesRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, encumbrances are to be included according to the configuration,
        // the category is encumbrance, the status is confirmed, and this is not a carry forward item, add in the relieving amount.
        List andListForEncumbrancesRelieving = new List(Types::String);

        andListForEncumbrancesRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForEncumbrancesRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, encumbrances are to be included according to the configuration,
        // the category is encumbrance, the status is draft, and this is not a carry forward item, add in the relieving amount.
        List andListForDraftEncumbrancesRelieving = new List(Types::String);

        andListForDraftEncumbrancesRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForDraftEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includeEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForDraftEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Encumbrance)));
        andListForDraftEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));
        andListForDraftEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftEncumbrancesRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalEncumbrancesAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the TotalEncumbrances field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for view definition for the TotalEncumbrances field.
    /// </returns>
    internal static str getTotalEncumbrancesAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        // Sum together all of the amounts impacting this calculated column.
        return SysComputedColumn::addList(BudgetControlStatisticsView::getTotalEncumbrancesAdditionValueStatements(_viewType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPreEncumbranceAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>List</c> object containing the SQL statements used to determine the total pre-encumbrances.
    /// </summary>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total pre-encumbrances.
    /// </returns>
    private static List getTotalPreEncumbranceAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List additionValueStatements = new List(Types::String);
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetSourceTrackingDSName = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str budgetSourceTrackingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str budgetControlConfigurationDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str budgetSourceTrackingRelievingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includePreEncumbrances;
        str includeDraftPreEncumbrances;

        if (_doRestrictToConfiguration)
        {
            includePreEncumbrances = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractPreencumbrances));
            includeDraftPreEncumbrances = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractDraftPreencumbrances));
        }
        else
        {
            includePreEncumbrances = SysComputedColumn::returnLiteral(true);
            includeDraftPreEncumbrances = SysComputedColumn::returnLiteral(true);
        }

        // BudgetSourceTrackingRelievingDetail fields
        str accountingCurrencyAmountRelieving = BudgetControlStatisticsView::getAggregateComputedColumnStringForAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        str relievedBudgetSourceTrackingDetail = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), FieldNameGenerationMode::WhereClause);

        // If preencumbrances are to be included according to the configuration, the category is preencumbrance, and the status is confirmed, add in the amount.
        List andListForPreEncumbrances = new List(Types::String);

        andListForPreEncumbrances.addEnd(SysComputedColumn::equalExpression(includePreEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForPreEncumbrances.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreEncumbrance)));
        andListForPreEncumbrances.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForPreEncumbrances),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If draft pre encumbrances are to be included according to the configuration, the category is pre encumbrance, and the status is draft, add in the amount.
        List andListForDraftPreEncumbrances = new List(Types::String);

        andListForDraftPreEncumbrances.addEnd(SysComputedColumn::equalExpression(includeDraftPreEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForDraftPreEncumbrances.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreEncumbrance)));
        andListForDraftPreEncumbrances.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftPreEncumbrances),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, preencumbrances are to be included according to the configuration,
        // the category is preencumbrance, and the status is confirmed, add in the relieving amount.
        List andListForPreEncumbrancesRelieving = new List(Types::String);

        andListForPreEncumbrancesRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includePreEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreEncumbrance)));
        andListForPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForPreEncumbrancesRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, preencumbrances are to be included according to the configuration,
        // the category is preencumbrance, and the status is draft, add in the relieving amount.
        List andListForDraftPreEncumbrancesRelieving = new List(Types::String);

        andListForDraftPreEncumbrancesRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForDraftPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(includePreEncumbrances, SysComputedColumn::returnLiteral(true)));
        andListForDraftPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreEncumbrance)));
        andListForDraftPreEncumbrancesRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForDraftPreEncumbrancesRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPreEncumbranceAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the TotalPreEncumbrance field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for the view definition for the TotalPreEncumbrance field.
    /// </returns>
    internal static str getTotalPreEncumbranceAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        // Sum together all of the amounts impacting this calculated column.
        return SysComputedColumn::addList(BudgetControlStatisticsView::getTotalPreEncumbranceAdditionValueStatements(_viewType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalActualExpendituresAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>List</c> object containing the SQL statements used to determine the total actual expenditures.
    /// </summary>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total actual expenditures.
    /// </returns>
    private static List getTotalActualExpendituresAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List additionValueStatements = new List(Types::String);
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetSourceTrackingDSName = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str budgetSourceTrackingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str budgetControlConfigurationDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str budgetSourceTrackingRelievingDetailDSName = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);
        str isCarryForward = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, isCarryForward), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includeActualExpenditures;
        str includeUnpostedActualExpenditures;
        str includeCarryForward;

        if (_doRestrictToConfiguration)
        {
            includeActualExpenditures = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractActualExpenditures));
            includeUnpostedActualExpenditures = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, SubtractUnpostedActualExpenditures));
            includeCarryForward = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, IncludeCarryforwardAmounts));
        }
        else
        {
            includeActualExpenditures = SysComputedColumn::returnLiteral(true);
            includeUnpostedActualExpenditures = SysComputedColumn::returnLiteral(true);
            includeCarryForward = SysComputedColumn::returnLiteral(true);
        }

        // BudgetSourceTrackingRelievingDetail fields
        str accountingCurrencyAmountRelieving = BudgetControlStatisticsView::getAggregateComputedColumnStringForAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        str relievedBudgetSourceTrackingDetail = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), FieldNameGenerationMode::WhereClause);

        // If actual expenditures are to be included according to the configuration, the category is actual expenditure, and the status is confirmed, add in the amount.
        List andListForActualExpenditures = new List(Types::String);

        andListForActualExpenditures.addEnd(SysComputedColumn::equalExpression(includeActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForActualExpenditures.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForActualExpenditures.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForActualExpenditures.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForActualExpenditures),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If unposted actual expenditures are to be included according to the configuration, the category is actual expenditure, and the status is draft, add in the amount.
        List andListForUnpostedActualExpenditures = new List(Types::String);

        andListForUnpostedActualExpenditures.addEnd(SysComputedColumn::equalExpression(includeUnpostedActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForUnpostedActualExpenditures.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForUnpostedActualExpenditures.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));
        andListForUnpostedActualExpenditures.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForUnpostedActualExpenditures),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If carry forward amounts and actual expenditures are to be included according to the configuration, the category is actual expenditure,
        // this is a carry forward item, and the status is confirmed, add in the amount.
        List andListForIncludeCarryForward = new List(Types::String);

        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForIncludeCarryForward),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, actual expenditures are to be included according to the configuration, the category is actual expenditure,
        // this is not a carry forward item, and the status is confirmed, add in the relieving amount.
        List andListForActualExpendituresRelieving = new List(Types::String);

        andListForActualExpendituresRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(includeActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForActualExpendituresRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, actual expenditures and carry forward amounts are to be included according to the configuration,
        // the category is actual expenditures, this is a carry forward item, and the status is confirmed, add in the relieving amount.
        List andListForCarryForwardActualExpendituresRelieving = new List(Types::String);

        andListForCarryForwardActualExpendituresRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForCarryForwardActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(includeActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForCarryForwardActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForCarryForwardActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        if (_doRestrictToConfiguration)
        {
            andListForCarryForwardActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        }

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForCarryForwardActualExpendituresRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, actual expenditures are to be included according to the configuration,
        // the category is actual expenditures, this is not a carry forward item, and the status is draft, add in the relieving amount.
        List andListForUnpostedActualExpendituresRelieving = new List(Types::String);

        andListForUnpostedActualExpendituresRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListForUnpostedActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(includeActualExpenditures, SysComputedColumn::returnLiteral(true)));
        andListForUnpostedActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::ActualExpenditure)));
        andListForUnpostedActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Draft)));
        andListForUnpostedActualExpendituresRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForUnpostedActualExpendituresRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalActualExpendituresAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the TotalActualExpenditures field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for the view definition for the TotalActualExpenditures field.
    /// </returns>
    internal static str getTotalActualExpendituresAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        // Sum together all of the amounts impacting this calculated column.
        return SysComputedColumn::addList(BudgetControlStatisticsView::getTotalActualExpendituresAdditionValueStatements(_viewType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBudgetFundsAvailableAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the TotalBudgetFundsAvailable field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of SQL for the view definition for the TotalBudgetFundsAvailable field.
    /// </returns>
    internal static str getTotalBudgetFundsAvailableAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        List additionValueStatements = new List(Types::String);
        List subtractionValueStatements = new List(Types::String);

        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalRevisedBudgetAdditionValueStatements(_viewType, true));

        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalPreEncumbranceAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalEncumbrancesAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalActualExpendituresAdditionValueStatements(_viewType, true));

        str additionValueStatementsStr = SysComputedColumn::addList(additionValueStatements);
        str subtractionValueStatementsStr = SysComputedColumn::addList(subtractionValueStatements);

        return SysComputedColumn::subtract(additionValueStatementsStr, subtractionValueStatementsStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetGroupNameSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the BudgetGroupName field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for view definition for the BudgetGroupName field.
    /// </returns>
    internal static str getBudgetGroupNameSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetGroupMemberDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetGroupMember)).name();

        // BudgetGroupMember fields
        str budgetGroupName = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetGroupMemberDSName, fieldStr(BudgetGroupMember, Name));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(budgetGroupName),
            SysComputedColumn::returnLiteral(''),
            budgetGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetGroupBudgetCycleTimeSpanSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the <c>BudgetGroupBudgetCycleTimeSpan</c> field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for the view definition for the <c>BudgetGroupBudgetCycleTimeSpan</c> field.
    /// </returns>
    internal static str getBudgetGroupBudgetCycleTimeSpanSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetGroupDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetGroup)).name();

        // BudgetGroup fields
        str BudgetGroupBudgetCycleTimeSpan = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetGroupDSName, fieldStr(BudgetGroup, BudgetCycleTimeSpan));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(budgetGroupBudgetCycleTimeSpan),
            SysComputedColumn::returnLiteral(0),
            budgetGroupBudgetCycleTimeSpan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlRuleBudgetCycleTimeSpanSql</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the SQL for the view definition for the <c>BudgetControlRuleBudgetCycleTimeSpan</c> field.
    /// </summary>
    /// <param name = "_viewType">
    ///     The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    ///     String value of the SQL for the view definition for the <c>BudgetControlRuleBudgetCycleTimeSpan</c> field.
    /// </returns>
    internal static str getBudgetControlRuleBudgetCycleTimeSpanSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        DictView budgetControlStatisticsView = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str budgetControlRuleDSName = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlRule)).name();

        // BudgetControlRule fields
        str budgetControlRuleBudgetCycleTimeSpan = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlRuleDSName, fieldStr(BudgetControlRule, BudgetCycleTimeSpan));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(budgetControlRuleBudgetCycleTimeSpan),
            SysComputedColumn::returnLiteral(0),
            budgetControlRuleBudgetCycleTimeSpan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalApportionmentAmountAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list object containing the SQL statements used to determine the total apportionment amount.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total apportionment amount.
    /// </returns>
    private static List getTotalApportionmentAmountAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List        additionValueStatements                     = new List(Types::String);
        DictView    budgetControlStatisticsView                 = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str         budgetSourceTrackingDSName                  = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str         budgetSourceTrackingDetailDSName            = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str         budgetControlConfigurationDSName            = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str         budgetSourceTrackingRelievingDetailDSName   = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount    = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);
        str isCarryForward              = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, isCarryForward), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includeApportionments = SysComputedColumn::returnLiteral(true);
        str includeCarryForward;

        if (_doRestrictToConfiguration)
        {
            includeCarryForward = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, IncludeCarryforwardAmounts));
        }
        else
        {
            includeCarryForward = SysComputedColumn::returnLiteral(true);
        }

        // BudgetSourceTrackingRelievingDetail fields
        str accountingCurrencyAmountRelieving = BudgetControlStatisticsView::getAggregateComputedColumnStringForAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        str relievedBudgetSourceTrackingDetail = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), FieldNameGenerationMode::WhereClause);

        // If apportionments are to be included according to the configuration, the category is apportionment,
        // the status is confirmed, and this is not a carry forward item, add in the amount.
        List andListForApportionments = new List(Types::String);

        andListForApportionments.addEnd(SysComputedColumn::equalExpression(includeApportionments, SysComputedColumn::returnLiteral(true)));
        andListForApportionments.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Apportionment)));
        andListForApportionments.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForApportionments.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForApportionments),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If carry forward amounts and apportionments are to be included according to the configuration, the category is apportionment,
        // this is a carry forward item, and the status is confirmed, add in the amount.
        List andListForIncludeCarryForward = new List(Types::String);

        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeApportionments, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Apportionment)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        if (_doRestrictToConfiguration)
        {
            andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        }

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForIncludeCarryForward),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, apportionments are to be included according to the configuration,
        // the category is apportionment, the status is confirmed, and this is not a carry forward item, add in the relieving amount.
        List andListApportionmentsRelieving = new List(Types::String);

        andListApportionmentsRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListApportionmentsRelieving.addEnd(SysComputedColumn::equalExpression(includeApportionments, SysComputedColumn::returnLiteral(true)));
        andListApportionmentsRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::Apportionment)));
        andListApportionmentsRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListApportionmentsRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListApportionmentsRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalApportionmentAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for the view definition for the TotalApportionment field.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// String value of the SQL for the view definition for the TotalApportionment field.
    /// </returns>
    internal static str getTotalApportionmentAmountSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        return SysComputedColumn::addList(BudgetControlStatisticsView::getTotalApportionmentAmountAdditionValueStatements(_viewType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBudgetFundsAvailableAmountForApportionmentSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for the view definition for the TotalBudgetFundsAvailableForApportionment field.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// String value of SQL for the view definition for the TotalBudgetFundsAvailableForApportionment field.
    /// </returns>
    internal static str getTotalBudgetFundsAvailableAmountForApportionmentSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        List additionValueStatements    = new List(Types::String);
        List subtractionValueStatements = new List(Types::String);

        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalApportionmentAmountAdditionValueStatements(_viewType, true));

        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalPreEncumbranceAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalEncumbrancesAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalActualExpendituresAdditionValueStatements(_viewType, true));

        str additionValueStatementsStr = SysComputedColumn::addList(additionValueStatements);
        str subtractionValueStatementsStr = SysComputedColumn::addList(subtractionValueStatements);

        return SysComputedColumn::subtract(additionValueStatementsStr, subtractionValueStatementsStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalPreliminaryBudgetsAmountAdditionValueStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list object containing the SQL statements used to determine the total preliminary budget amount.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <param name = "_doRestrictToConfiguration">
    /// A Boolean value that specifies whether to restrict to the configuration's budget funds available settings.
    /// </param>
    /// <returns>
    /// The <c>List</c> object containing the SQL statements used to determine the total preliminary budget amount.
    /// </returns>
    private static List getTotalPreliminaryBudgetsAmountAdditionValueStatements(BudgetControlIStatisticsViewType _viewType, boolean _doRestrictToConfiguration = false)
    {
        List        additionValueStatements                     = new List(Types::String);
        DictView    budgetControlStatisticsView                 = new DictView(_viewType.getBudgetControlStatisticsViewId());

        str         budgetSourceTrackingDSName                  = budgetControlStatisticsView.query().dataSourceTable(tablenum(BudgetSourceTracking)).name();
        str         budgetSourceTrackingDetailDSName            = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetSourceTrackingDetail)).name();
        str         budgetControlConfigurationDSName            = budgetControlStatisticsView.query().dataSourceTable(tableNum(BudgetControlConfiguration)).name();
        str         budgetSourceTrackingRelievingDetailDSName   = budgetControlStatisticsView.query().dataSourceTable(_viewType.getBudgetSourceTrackingRelievingDetailId()).name();

        // BudgetSourceTracking fields
        str budgetCategory = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Category), FieldNameGenerationMode::WhereClause);
        str trackingStatus = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingDSName, fieldStr(BudgetSourceTracking, Status));

        // BudgetSourceTrackingDetail fields
        str accountingCurrencyAmount    = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount), FieldNameGenerationMode::WhereClause);
        str isCarryForward              = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingDetailDSName, fieldStr(BudgetSourceTrackingDetail, isCarryForward), FieldNameGenerationMode::WhereClause);

        // BudgetControlConfiguration fields
        str includePreliminaryBudgets = SysComputedColumn::returnLiteral(true);
        str includeCarryForward;

        if (_doRestrictToConfiguration)
        {
            includeCarryForward = BudgetControlStatisticsView::getAggregateComputedColumnStringForNonAmountSelectionField(budgetControlStatisticsView, budgetControlConfigurationDSName, fieldStr(BudgetControlConfiguration, IncludeCarryforwardAmounts));
        }
        else
        {
            includeCarryForward = SysComputedColumn::returnLiteral(true);
        }

        // BudgetSourceTrackingRelievingDetail fields
        str accountingCurrencyAmountRelieving = BudgetControlStatisticsView::getAggregateComputedColumnStringForAmountSelectionField(budgetControlStatisticsView, budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount));
        str relievedBudgetSourceTrackingDetail = budgetControlStatisticsView.computedColumnString(budgetSourceTrackingRelievingDetailDSName, fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail), FieldNameGenerationMode::WhereClause);

        // If preliminary budgets are to be included according to the configuration, the category is preliminary budget,
        // the status is confirmed, and this is not a carry forward item, add in the amount.
        List andListForPreliminaryBudgets = new List(Types::String);

        andListForPreliminaryBudgets.addEnd(SysComputedColumn::equalExpression(includePreliminaryBudgets, SysComputedColumn::returnLiteral(true)));
        andListForPreliminaryBudgets.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreliminaryBudget)));
        andListForPreliminaryBudgets.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListForPreliminaryBudgets.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForPreliminaryBudgets),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If carry forward amounts and preliminary budgets are to be included according to the configuration, the category is preliminary budgets,
        // this is a carry forward item, and the status is confirmed, add in the amount.
        List andListForIncludeCarryForward = new List(Types::String);

        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includePreliminaryBudgets, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(includeCarryForward, SysComputedColumn::returnLiteral(true)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreliminaryBudget)));
        andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(true)));

        if (_doRestrictToConfiguration)
        {
            andListForIncludeCarryForward.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        }

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListForIncludeCarryForward),
                accountingCurrencyAmount,
                SysComputedColumn::returnLiteral(0)));

        // If relieved budget source tracking detail exists, preliminary budgets are to be included according to the configuration,
        // the category is preliminary budget, the status is confirmed, and this is not a carry forward item, add in the relieving amount.
        List andListPreliminaryBudgetsRelieving = new List(Types::String);

        andListPreliminaryBudgetsRelieving.addEnd(BudgetControlStatisticsView::isNotNullExpression(relievedBudgetSourceTrackingDetail));
        andListPreliminaryBudgetsRelieving.addEnd(SysComputedColumn::equalExpression(includePreliminaryBudgets, SysComputedColumn::returnLiteral(true)));
        andListPreliminaryBudgetsRelieving.addEnd(SysComputedColumn::equalExpression(budgetCategory, SysComputedColumn::returnLiteral(BudgetControlCategory::PreliminaryBudget)));
        andListPreliminaryBudgetsRelieving.addEnd(SysComputedColumn::equalExpression(trackingStatus, SysComputedColumn::returnLiteral(BudgetSourceTrackingStatus::Confirmed)));
        andListPreliminaryBudgetsRelieving.addEnd(SysComputedColumn::equalExpression(isCarryForward, SysComputedColumn::returnLiteral(false)));

        additionValueStatements.addEnd(
            SysComputedColumn::if(
                SysComputedColumn::and(andListPreliminaryBudgetsRelieving),
                accountingCurrencyAmountRelieving,
                SysComputedColumn::returnLiteral(0)));

        return additionValueStatements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalBudgetFundsAvailableAmountForPreliminaryBudgetSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for the view definition for the TotalBudgetFundsAvailableForPreliminaryBudget field.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// String value of SQL for the view definition for the TotalBudgetFundsAvailableForPreliminaryBudget field.
    /// </returns>
    internal static str getTotalBudgetFundsAvailableAmountForPreliminaryBudgetSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        List additionValueStatements    = new List(Types::String);
        List subtractionValueStatements = new List(Types::String);

        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalRevisedBudgetAdditionValueStatements(_viewType, true));
        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalPreliminaryBudgetsAmountAdditionValueStatements(_viewType, true));

        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalPreEncumbranceAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalEncumbrancesAdditionValueStatements(_viewType, true));
        subtractionValueStatements.appendList(BudgetControlStatisticsView::getTotalActualExpendituresAdditionValueStatements(_viewType, true));

        str additionValueStatementsStr = SysComputedColumn::addList(additionValueStatements);
        str subtractionValueStatementsStr = SysComputedColumn::addList(subtractionValueStatements);

        return SysComputedColumn::subtract(additionValueStatementsStr, subtractionValueStatementsStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRevisedBudgetAmountForPreliminaryBudgetSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for the view definition for the TotalRevisedBudgetForPreliminaryBudget field.
    /// </summary>
    /// <param name = "_viewType">
    /// The <c>BudgetControlIStatisticsViewType</c> to create the statement for.
    /// </param>
    /// <returns>
    /// String value of SQL for the view definition for the TotalRevisedBudgetForPreliminaryBudget field.
    /// </returns>
    internal static str getTotalRevisedBudgetAmountForPreliminaryBudgetSql(BudgetControlIStatisticsViewType _viewType = new BudgetControlStatisticsViewType())
    {
        List additionValueStatements = new List(Types::String);

        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalRevisedBudgetAdditionValueStatements(_viewType));
        additionValueStatements.appendList(BudgetControlStatisticsView::getTotalPreliminaryBudgetsAmountAdditionValueStatements(_viewType, true));

        str additionValueStatementsStr = SysComputedColumn::addList(additionValueStatements);

        return additionValueStatementsStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotNullExpression</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an IS NOT NULL binary expression.
    /// </summary>
    /// <param name="_expression">
    ///    A string value that contains the expression to evaluate.
    /// </param>
    /// <returns>
    ///    A string expression formatted as an IS NOT NULL binary expression.
    /// </returns>
    private static str isNotNullExpression(str _expression)
    {
        return strFmt('%1 IS NOT NULL', _expression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregateComputedColumnStringForAmountSelectionField</Name>
				<Source><![CDATA[
    private static str getAggregateComputedColumnStringForAmountSelectionField(DictView _dictView, str _dataSourceName, str _fieldStr)
    {
        // Because the BudgetControlStatisticsQuery object has a 'group by' applied, selection fields
        // in computed column definitions in the BudgetControlStatisticsView need to use aggregation
        // functions.  Use the 'sum' function to aggregate amount values.
        return SysComputedColumn::sum(_dictView.computedColumnString(_dataSourceName, _fieldStr, FieldNameGenerationMode::WhereClause));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregateComputedColumnStringForNonAmountSelectionField</Name>
				<Source><![CDATA[
    private static str getAggregateComputedColumnStringForNonAmountSelectionField(DictView _dictView, str _dataSourceName, str _fieldStr)
    {
        // Because the BudgetControlStatisticsQuery object has a 'group by' applied, selection fields
        // in computed column definitions in the BudgetControlStatisticsView need to use aggregation
        // functions.  Use the 'min' function to aggregate non-amount values.
        return SysComputedColumn::min(_dictView.computedColumnString(_dataSourceName, _fieldStr, FieldNameGenerationMode::WhereClause));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Budget:BudgetControlStatisticsDeveloperDocumentation</DeveloperDocumentation>
	<Query>BudgetControlStatisticsQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetControlLedgerDimension</Name>
			<DataField>BudgetControlLedgerDimension</DataField>
			<DataSource>BudgetSourceTrackingDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TrackingDate</Name>
			<DataField>TrackingDate</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingCurrencyAmount</Name>
			<DataField>AccountingCurrencyAmount</DataField>
			<DataSource>BudgetSourceTrackingDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Category</Name>
			<DataField>Category</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalRevisedBudget</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>getTotalRevisedBudgetAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsCarryForward</Name>
			<DataField>IsCarryForward</DataField>
			<DataSource>BudgetSourceTrackingDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalEncumbrances</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>getTotalEncumbrancesAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalPreEncumbrances</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>getTotalPreEncumbranceAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalActualExpenditures</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>getTotalActualExpendituresAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalBudgetFundsAvailable</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>getTotalBudgetFundsAvailableAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetGroup</Name>
			<DataField>RecId</DataField>
			<DataSource>BudgetGroup</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PrimaryLedger</Name>
			<DataField>PrimaryLedger</DataField>
			<DataSource>BudgetSourceTrackingDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>BudgetControlRuleBudgetCycleTimeSpan</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<ViewMethod>getBudgetControlRuleBudgetCycleTimeSpanSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>BudgetGroupBudgetCycleTimeSpan</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<ViewMethod>getBudgetGroupBudgetCycleTimeSpanSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>BudgetGroupName</Name>
			<ExtendedDataType>BudgetGroupMemberName</ExtendedDataType>
			<ViewMethod>getBudgetGroupNameSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetSourceLedgerDimension</Name>
			<DataField>BudgetSourceLedgerDimension</DataField>
			<DataSource>BudgetSourceTrackingDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelId</Name>
			<DataField>BudgetModelId</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelSubModelId</Name>
			<DataField>BudgetModelSubModelId</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelType</Name>
			<DataField>BudgetModelType</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelDataAreaId</Name>
			<DataField>BudgetModelDataAreaId</DataField>
			<DataSource>BudgetSourceTracking</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalApportionment</Name>
			<ExtendedDataType>ApportionmentAmountMST</ExtendedDataType>
			<ViewMethod>getTotalApportionmentAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalBudgetFundsAvailableForApportionment</Name>
			<ExtendedDataType>ApportionmentAmountMST</ExtendedDataType>
			<ViewMethod>getTotalBudgetFundsAvailableAmountForApportionmentSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalBudgetFundsAvailableForPreliminaryBudget</Name>
			<ExtendedDataType>PreliminaryAmountMST</ExtendedDataType>
			<ViewMethod>getTotalBudgetFundsAvailableAmountForPreliminaryBudgetSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalRevisedBudgetForPreliminaryBudget</Name>
			<ExtendedDataType>PreliminaryAmountMST</ExtendedDataType>
			<ViewMethod>getTotalRevisedBudgetAmountForPreliminaryBudgetSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RelievedBudgetSourceTrackingDetail</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>RelievedBudgetSourceTrackingDetail</DataField>
			<DataSource>BudgetSourceTrackingRelievingDetail</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>