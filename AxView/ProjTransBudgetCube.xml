<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransBudgetCube</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTransBudgetCube extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projBudgetAccruedRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget accrued revenue expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget accrued revenue.
    /// </returns>
    public static str projBudgetAccruedRevenue()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Accrued Revenue]
        // AS Sum
        //(
        //    (
        //        {[Budget updates].[Transaction type].&[1], [Budget updates].[Transaction type].&[2],
        //        [Budget updates].[Transaction type].&[3], [Budget updates].[Transaction type].&[4]},
        //        [Budget updates].[Posting type].&[128]
        //    ),
        //    [Measures].[Budget updates Amount] *-1
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[1],
        //        {[Budget updates].[Posting type].&[130],[Budget updates].[Posting type].&[132],
        //        [Budget updates].[Posting type].&[137], [Budget updates].[Posting type].&[207]}
        //    ),
        //    [Measures].[Budget updates Amount] *-1
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            projBudgetAccruedRevenueList1 = new List(Types::String);
        List            projBudgetAccruedRevenueList2 = new List(Types::String);

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        projBudgetAccruedRevenueList1.addEnd(
            SysComputedColumn::or(transTypeList));

        projBudgetAccruedRevenueList1.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalue)))
        );

        postingTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
        );

        postingTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
        );

        postingTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount)))
        );

        postingTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueSubscription)))
        );

        projBudgetAccruedRevenueList2.addEnd(
            SysComputedColumn::or(postingTypeList));

        projBudgetAccruedRevenueList2.addEnd(
             SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        return SysComputedColumn::add(
            SysComputedColumn::if(
                SysComputedColumn::and(projBudgetAccruedRevenueList1),
                SysComputedColumn::negative(
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                SysComputedColumn::returnLiteral(0)),
            SysComputedColumn::if(
                SysComputedColumn::and(projBudgetAccruedRevenueList2),
                SysComputedColumn::negative(
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCashInflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cash inflow expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cash inflow.
    /// </returns>
    public static str projBudgetCashInflow()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cash Inflow]
        // AS (Sum
        //(
        //    (
        //        {[Budget updates].[Posting type].&[126], [Budget updates].[Posting type].&[127], [Budget updates].[Posting type].&[138]},
        //        {[Budget updates].[Payment status].&[1],[Budget updates].[Payment status].&[2]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //)) *-1,
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList = new List(Types::String);
        List            paymentStatusList = new List(Types::String);

        List            budgetCashInflowList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnover)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        budgetCashInflowList.addEnd(
                    SysComputedColumn::or(postingTypeList)
        );

        paymentStatusList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PaymentStatus)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::ExpectedPayment)))
        );

        paymentStatusList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PaymentStatus)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::Paid)))
        );

        budgetCashInflowList.addEnd(
            SysComputedColumn::or(paymentStatusList)
        );

        // Add elimination

        budgetCashInflowList.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))

        );

        return SysComputedColumn::if(
                    SysComputedColumn::and(budgetCashInflowList),
                        SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCashOutflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cash outflow expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cash outflow.
    /// </returns>
    public static str projBudgetCashOutflow()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cash Outflow]
        // AS Sum
        //(
        //    (
        //        {[Budget updates].[Posting type].&[121], [Budget updates].[Posting type].&[123], [Budget updates].[Posting type].&[134],
        //        [Budget updates].[Posting type].&[139]},
        //        {[Budget updates].[Payment status].&[1],[Budget updates].[Payment status].&[2]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList = new List(Types::String);
        List            paymentStatusList = new List(Types::String);

        List            budgetCashOutflowList = new List(Types::String);

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        budgetCashOutflowList.addEnd(
                    SysComputedColumn::or(postingTypeList)
        );

        paymentStatusList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PaymentStatus)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::ExpectedPayment)))
        );

        paymentStatusList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PaymentStatus)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::Paid)))
        );

        budgetCashOutflowList.addEnd(
            SysComputedColumn::or(paymentStatusList)
        );

        // Add elimination

        budgetCashOutflowList.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))

        );

        return SysComputedColumn::if(
                    SysComputedColumn::and(budgetCashOutflowList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget consumption expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget consumption.
    /// </returns>
    public static str projBudgetConsumption()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Consumption]
        // AS [Budget Consumption Cost - Hours] + [Budget Consumption Cost - Expense] + [Budget Consumption Cost - Item],
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetConsumptionCostHours(),
                SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetConsumptionCostExpense(),
                    ProjTransBudgetCube::projBudgetConsumptionCostItem())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetConsumptionCostExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget consumption cost expense expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget hours.
    /// </returns>
    public static str projBudgetConsumptionCostExpense()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Consumption Cost - Expense]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[3],
        //        {[Budget updates].[Posting type].&[121], [Budget updates].[Posting type].&[123]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList = new List(Types::String);

        List            budgetConsumptionCostExpenseList = new List(Types::String);

        budgetConsumptionCostExpenseList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        budgetConsumptionCostExpenseList.addEnd(
            SysComputedColumn::or(postingTypeList)
        );

        // Add elimination

        budgetConsumptionCostExpenseList.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::if(
                    SysComputedColumn::and(budgetConsumptionCostExpenseList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetConsumptionCostHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget consumption cost hours expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget consumption cost hours.
    /// </returns>
    public static str projBudgetConsumptionCostHours()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Consumption Cost - Hours]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[2],
        //        {[Budget updates].[Posting type].&[121], [Budget updates].[Posting type].&[123]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[2],
        //        [Project parameters].[StatementConsumpHourCost].&[1],
        //        {[Budget updates].[Posting type].&[134], [Budget updates].[Posting type].&[139]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList1 = new List(Types::String);
        List            postingTypeList2 = new List(Types::String);

        List            budgetConsumptionCostHoursList1 = new List(Types::String);
        List            budgetConsumptionCostHoursList2 = new List(Types::String);

        budgetConsumptionCostHoursList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        budgetConsumptionCostHoursList1.addEnd(
            SysComputedColumn::or(postingTypeList1)
        );

        // Add elimination

        budgetConsumptionCostHoursList1.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        budgetConsumptionCostHoursList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        budgetConsumptionCostHoursList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementConsumpHourCost)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        postingTypeList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        budgetConsumptionCostHoursList2.addEnd(
            SysComputedColumn::or(postingTypeList2)
        );

        // Add elimination

        budgetConsumptionCostHoursList2.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetConsumptionCostHoursList1),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                            SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetConsumptionCostHoursList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetConsumptionCostItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget consumption cost item expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget consumption cost item.
    /// </returns>
    public static str projBudgetConsumptionCostItem()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Consumption Cost - Item]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[4],
        //        {[Budget updates].[Posting type].&[121], [Budget updates].[Posting type].&[134], [Budget updates].[Posting type].&[123]
        //        [Budget updates].[Posting type].&[124], [Budget updates].[Posting type].&[125]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[4],
        //        [Budget updates].[Posting type].&[134], [Budget updates].[Posting type].&[124], [Project parameters].[ItemNeverLedgerConsum].&[1]
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList = new List(Types::String);
        List            postingTypeList2 = new List(Types::String);

        List            budgetConsumptionCostItemList1 = new List(Types::String);
        List            budgetConsumptionCostItemList2 = new List(Types::String);

        budgetConsumptionCostItemList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        budgetConsumptionCostItemList1.addEnd(
            SysComputedColumn::or(postingTypeList)
        );

        // Add elimination

        budgetConsumptionCostItemList1.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        budgetConsumptionCostItemList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        budgetConsumptionCostItemList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        budgetConsumptionCostItemList2.addEnd(
                SysComputedColumn::or(postingTypeList2)
        );

        budgetConsumptionCostItemList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, ItemNeverLedgerConsum)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        // Add elimination

        budgetConsumptionCostItemList2.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetConsumptionCostItemList1),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                            SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetConsumptionCostItemList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cost.
    /// </returns>
    public static str projBudgetCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cost]
        // AS [Budget Cost-Hour] + [Budget Cost-Expense] + [Budget Cost-Item],
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetCostHour(),
                SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetCostExpense(),
                    ProjTransBudgetCube::projBudgetCostItem())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCostExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cost expense expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cost expense.
    /// </returns>
    public static str projBudgetCostExpense()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cost-Expense]
        // AS ([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[121], [Budget updates].[Transaction type].&[3])),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            projBudgetCostExpenseList = new List(Types::String);

        projBudgetCostExpenseList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
         );

        projBudgetCostExpenseList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        return SysComputedColumn::if(
                        SysComputedColumn::and(projBudgetCostExpenseList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCostHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cost hour expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cost hour.
    /// </returns>
    public static str projBudgetCostHour()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cost-Hour]
        // AS (([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[121], [Budget updates].[Transaction type].&[2]))
        //+
        //([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[134], [Budget updates].[Transaction type].&[2], [Project parameters].[No Never Ledger Hour Cost].&[1]))
        //+
        //([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[139], [Budget updates].[Transaction type].&[2], [Project parameters].[No Never Ledger Hour Cost].&[1]))),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            projBudgetCostHourList1 = new List(Types::String);
        List            projBudgetCostHourList2 = new List(Types::String);
        List            projBudgetCostHourList3 = new List(Types::String);

        projBudgetCostHourList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        projBudgetCostHourList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        projBudgetCostHourList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        projBudgetCostHourList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        projBudgetCostHourList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementPLHourCost)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        projBudgetCostHourList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        projBudgetCostHourList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        projBudgetCostHourList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementPLHourCost)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(projBudgetCostHourList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::add(
                            SysComputedColumn::if(
                                SysComputedColumn::and(projBudgetCostHourList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)),
                            SysComputedColumn::if(
                                SysComputedColumn::and(projBudgetCostHourList3),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetCostItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget cost-item expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget cost-item.
    /// </returns>
    public static str projBudgetCostItem()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Cost-Item]
        // AS (([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[121], [Budget updates].[Transaction type].&[4]))
        //+
        //([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[124], [Budget updates].[Transaction type].&[4]))
        //+
        //([Measures].[Budget updates Amount], ([Budget updates].[Posting type].&[134], [Budget updates].[Transaction type].&[4], [Project parameters].[ItemNeverLedgerPL].&[1]))),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            projBudgetCostItemList1 = new List(Types::String);
        List            projBudgetCostItemList2 = new List(Types::String);
        List            projBudgetCostItemList3 = new List(Types::String);

        projBudgetCostItemList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        projBudgetCostItemList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        projBudgetCostItemList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
        );

        projBudgetCostItemList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        projBudgetCostItemList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        projBudgetCostItemList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        projBudgetCostItemList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, ItemNeverLedgerPL)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(projBudgetCostItemList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::add(
                            SysComputedColumn::if(
                                SysComputedColumn::and(projBudgetCostItemList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)),
                            SysComputedColumn::if(
                                SysComputedColumn::and(projBudgetCostItemList3),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetGrossMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget gross margin expression.
    /// </summary>
    /// <returns>
    /// An expression for the original budget gross margin.
    /// </returns>
    public static str projBudgetGrossMargin()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Gross Margin]
        // AS ([Measures].[Budget Revenue] - [Measures].[Budget Cost]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetRevenue(),
            SysComputedColumn::negative(
                ProjTransBudgetCube::projBudgetCost())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetGrossWIPCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget gross WIP cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the original budget gross WIP cost.
    /// </returns>
    public static str projBudgetGrossWIPCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Gross WIP Cost]
        // AS ([Measures].[Budget WIP Cost] + [Measures].[Budget WIP Sales]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetWIPCost(),
                    ProjTransBudgetCube::projBudgetWIPSales()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget hours expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget hours.
    /// </returns>
    public static str projBudgetHours()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Hours]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[2],
        //        {[Budget updates].[Posting type].&[121], [Budget updates].[Posting type].&[123]}
        //    ),
        //    [Measures].[Budget updates Quantity]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[2], [Project parameters].[StatementConsumpHourCost].&[1],
        //        {[Budget updates].[Posting type].&[134], [Budget updates].[Posting type].&[139]}
        //    ),
        //    [Measures].[Budget updates Quantity]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList1 = new List(Types::String);
        List            postingTypeList2 = new List(Types::String);

        List            budgetHoursList1 = new List(Types::String);
        List            budgetHoursList2 = new List(Types::String);

        budgetHoursList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        postingTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
        );

        postingTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        budgetHoursList1.addEnd(
            SysComputedColumn::or(postingTypeList1)
        );

        // Add elimination

        budgetHoursList1.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        budgetHoursList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        budgetHoursList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementConsumpHourCost)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        postingTypeList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
        );

        postingTypeList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
        );

        budgetHoursList2.addEnd(
            SysComputedColumn::or(postingTypeList2)
        );

        // Add elimination

        budgetHoursList2.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetHoursList1),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, Qty)),
                            SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(budgetHoursList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, Qty)),
                                SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetInvoicedOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget invoiced on-account expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget invoiced on-account.
    /// </returns>
    public static str projBudgetInvoicedOnAccount()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Invoiced On-account]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[5],
        //        {[Budget updates].[Posting type].&[122], [Budget updates].[Posting type].&[138],
        //        [Budget updates].[Posting type].&[137], [Budget updates].[Posting type].&[127]}
        //    ),
        //    [Measures].[Budget updates Amount] * -1
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            postingTypeList = new List(Types::String);

        List            budgetInvoicedOnAccountList = new List(Types::String);

        budgetInvoicedOnAccountList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        budgetInvoicedOnAccountList.addEnd(
            SysComputedColumn::or(postingTypeList)
        );

        // Add elimination

        budgetInvoicedOnAccountList.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, Elimination)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::if(
                    SysComputedColumn::and(budgetInvoicedOnAccountList),
                    SysComputedColumn::negative(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1), fieldStr(ProjTransBudget, AmountMst))),
                    SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetInvoicedRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget invoiced revenue expression.
    /// </summary>
    /// <returns>
    /// An expression for budget invoiced revenue.
    /// </returns>
    public static str projBudgetInvoicedRevenue()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Invoiced Revenue]
        // AS Sum
        //(
        //    (
        //        {[Budget updates].[Transaction type].&[1], [Budget updates].[Transaction type].&[2],
        //        [Budget updates].[Transaction type].&[3], [Budget updates].[Transaction type].&[4]},
        //        [Budget updates].[Posting type].&[126]
        //    ),
        //    [Measures].[Budget updates Amount] *-1
        //)
        //+
        //Sum
        //(
        //    (
        //        {[Budget updates].[Transaction type].&[5]},
        //        [Budget updates].[Posting type].&[127]
        //    ),
        //    [Measures].[Budget updates Amount] *-1
        //),
        //VISIBLE = 1  ;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList = new List(Types::String);
        List            projBudgetInvoicedRevenueList1 = new List(Types::String);
        List            projBudgetInvoicedRevenueList2 = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        projBudgetInvoicedRevenueList1.addEnd(
            SysComputedColumn::or(transTypeList));

        projBudgetInvoicedRevenueList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnover)))
        );

        projBudgetInvoicedRevenueList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransPosting, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        projBudgetInvoicedRevenueList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(projBudgetInvoicedRevenueList1),
                        SysComputedColumn::negative(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(projBudgetInvoicedRevenueList2),
                        SysComputedColumn::negative(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                        SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetNetCashflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget net cash flow expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget net cash flow.
    /// </returns>
    public static str projBudgetNetCashflow()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Net Cash Flow]
        // AS ([Measures].[Budget Cash Inflow] - [Measures].[Budget Cash Outflow]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetCashInflow(),
                SysComputedColumn::negative(
                    ProjTransBudgetCube::projBudgetCashOutflow())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetNetWIP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget net WIP expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget net WIP.
    /// </returns>
    public static str projBudgetNetWIP()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Net WIP]
        // AS ([Measures].[Budget Gross WIP Cost] - [Measures].[Budget WIP Invoiced On-account]),
        //VISIBLE = 1;

        return SysComputedColumn::subtract(
            ProjTransBudgetCube::projBudgetGrossWIPCost(),
            ProjTransBudgetCube::projBudgetWIPInvoicedOnAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetPayrollAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget payroll allocation expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget payroll allocation.
    /// </returns>
    public static str projBudgetPayrollAllocation()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Payroll Allocation]
        // AS SUM(([Budget updates].[Posting type].&[122], [Budget updates].[Transaction type].&[2]), ABS([Measures].[Budget updates Amount])),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        return SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::abs(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetPayrollAllocationCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget payroll allocation cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget payroll allocation cost.
    /// </returns>
    public static str projBudgetPayrollAllocationCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Payroll Allocation Cost]
        // AS ([Measures].[Budget updates Amount], [Budget updates].[Posting type].&[122]),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        return SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                            SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget revenue expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget revenue.
    /// </returns>
    public static str projBudgetRevenue()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget Revenue]
        // AS ([MEASURES].[Budget invoiced revenue] + [MEASURES].[Budget accrued revenue]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetAccruedRevenue(),
                    ProjTransBudgetCube::projBudgetInvoicedRevenue()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetWIPCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget WIP cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget WIP cost.
    /// </returns>
    public static str projBudgetWIPCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget WIP Cost]
        // AS Sum
        //(
        //    (
        //        {[Budget updates].[Transaction type].&[2], [Budget updates].[Transaction type].&[3]},
        //        [Budget updates].[Posting type].&[123]
        //    ),
        //    [Measures].[Budget updates Amount]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[4], [Budget updates].[Posting type].&[125]
        //    ),
        //    [Measures].[Budget updates Amount]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[3], [Budget updates].[Posting type].&[136]
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList1 = new List(Types::String);

        List            wipList1 = new List(Types::String);
        List            wipList2 = new List(Types::String);
        List            wipList3 = new List(Types::String);

        transTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        wipList1.addEnd(
                    SysComputedColumn::or(transTypeList1)
        );

        wipList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
        );

        wipList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        wipList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
        );

        wipList3.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        wipList3.addEnd(
            SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCost)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(wipList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::add(
                            SysComputedColumn::if(
                                SysComputedColumn::and(wipList2),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)),
                            SysComputedColumn::if(
                                SysComputedColumn::and(wipList3),
                                SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                                SysComputedColumn::returnLiteral(0)))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetWIPInvoicedOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget WIP invoiced on-account expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget WIP invoiced on-account.
    /// </returns>
    public static str projBudgetWIPInvoicedOnAccount()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget WIP Invoiced On-account]
        // AS Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[5],
        //        [Budget updates].[Posting type].&[138]
        //    ),
        //    [Measures].[Budget updates Amount] * -1
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
        );

        return SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::negative(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetWIPSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget WIP sales expression.
    /// </summary>
    /// <returns>
    /// An expression for the budget WIP sales.
    /// </returns>
    public static str projBudgetWIPSales()
    {
        //CREATE MEMBER CURRENTCUBE.[Budget WIP Sales]
        // AS Sum
        //(
        //    (
        //        {[Budget updates].[Transaction type].&[1], [Budget updates].[Transaction type].&[2],
        //        [Budget updates].[Transaction type].&[3], [Budget updates].[Transaction type].&[4]},
        //        [Budget updates].[Posting type].&[129]
        //    ),
        //    [Measures].[Budget updates Amount]
        //)
        //+
        //Sum
        //(
        //    (
        //        [Budget updates].[Transaction type].&[1],
        //        {[Budget updates].[Posting type].&[131], [Budget updates].[Posting type].&[133],
        //        [Budget updates].[Posting type].&[208]}
        //    ),
        //    [Measures].[Budget updates Amount]
        //),
        //VISIBLE = 1;

        TableName       viewName = tableStr(ProjTransBudgetCube);

        List            transTypeList = new List(Types::String);
        List            postingTypeList = new List(Types::String);
        List            wipList1 = new List(Types::String);
        List            wipList2 = new List(Types::String);

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
        );

        wipList1.addEnd(
                    SysComputedColumn::or(transTypeList)
        );

        wipList1.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
        );

        postingTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, PostingType)),
                        SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPSubscription)))
        );

        wipList2.addEnd(
                    SysComputedColumn::or(postingTypeList)
        );

        wipList2.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, ProjTransType)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::and(wipList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(wipList2),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransBudget_1) , fieldStr(ProjTransBudget, AmountMst)),
                        SysComputedColumn::returnLiteral(0))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOriginalBudgetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original budget cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the original budget cost.
    /// </returns>
    public static str projOriginalBudgetCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Original Budget Cost]
        // AS [Budget Consumption Cost - Hours] + [Budget Consumption Cost - Expense] + [Budget Consumption Cost - Item],
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetConsumptionCostHours(),
                SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetConsumptionCostExpense(),
                    ProjTransBudgetCube::projBudgetConsumptionCostItem())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRemainingBudgetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining budget cost expression.
    /// </summary>
    /// <returns>
    /// An expression for the remaining budget cost.
    /// </returns>
    public static str projRemainingBudgetCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Remaining budget Cost]
        // AS ([Measures].[Total budget cost] - [Measures].[Actual cost] - [Measures].[Committed cost]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetConsumptionCostHours(),
                SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetConsumptionCostExpense(),
                    ProjTransBudgetCube::projBudgetConsumptionCostItem())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projRemainingBudgetDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Return the remaining budget deviation expression.
    /// </summary>
    /// <returns>
    /// An expression for the remaining budget deviation.
    /// </returns>
    public static str projRemainingBudgetDeviation()
    {
        //CREATE MEMBER CURRENTCUBE.[Remaining budget Deviation]
        // AS ([Measures].[Original Budget Cost] - [Measures].[Total Budget Cost]),
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projOriginalBudgetCost(),
                SysComputedColumn::negative(
                    ProjTransBudgetCube::projTotalBudgetCost())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTotalBudgetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total budget cost expression.2
    /// </summary>
    /// <returns>
    /// An expression for the  total budget cost.
    /// </returns>
    public static str projTotalBudgetCost()
    {
        //CREATE MEMBER CURRENTCUBE.[Total Budget Cost]
        // AS [Budget Consumption Cost - Hours] + [Budget Consumption Cost - Expense] + [Budget Consumption Cost - Item],
        //VISIBLE = 1;

        return SysComputedColumn::add(
            ProjTransBudgetCube::projBudgetConsumptionCostHours(),
                SysComputedColumn::add(
                    ProjTransBudgetCube::projBudgetConsumptionCostExpense(),
                    ProjTransBudgetCube::projBudgetConsumptionCostItem())
        );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjTransBudgetCubeDevDoc</DeveloperDocumentation>
	<Label>@SYS82760</Label>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<Query>ProjTransBudgetCube</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMst</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AmountMst</Name>
			<DataField>AmountMst</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CategoryId</Name>
			<DataField>CategoryId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>costSales</Name>
			<DataField>costSales</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>dataAreaId1</Name>
			<Label>@SYS135125</Label>
			<DataField>dataAreaId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DefaultDimension</Name>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Elimination</Name>
			<DataField>Elimination</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EmplItemId</Name>
			<DataField>EmplItemId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerTransDate</Name>
			<DataField>LedgerTransDate</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ModelId</Name>
			<DataField>ModelId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PaymentDate</Name>
			<DataField>PaymentDate</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PaymentStatus</Name>
			<DataField>PaymentStatus</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PostingType</Name>
			<DataField>PostingType</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjFundingSource</Name>
			<DataField>ProjFundingSource</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransDate</Name>
			<DataField>ProjTransDate</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransType</Name>
			<DataField>ProjTransType</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjType</Name>
			<DataField>ProjType</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RecId1</Name>
			<Label>@SYS3676</Label>
			<DataField>RecId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>recVersion1</Name>
			<Label>@SYS40796</Label>
			<DataField>recVersion</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransId</Name>
			<DataField>TransId</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetInvoicedRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122242</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetInvoicedRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetAccruedRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122244</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetAccruedRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122245</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementConsumpHourCost</Name>
			<DataField>StatementConsumpHourCost</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementConsumpHourQty</Name>
			<DataField>StatementConsumpHourQty</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementPLHourCost</Name>
			<DataField>StatementPLHourCost</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementPLHourQty</Name>
			<DataField>StatementPLHourQty</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemNeverLedgerConsum</Name>
			<DataField>ItemNeverLedgerConsum</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemNeverLedgerPL</Name>
			<DataField>ItemNeverLedgerPL</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCostHour</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324724</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCostHour</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCostExpense</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324725</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCostExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCostItem</Name>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS324726</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCostItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCost</Name>
			<Label>@SYS122247</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetWipCost</Name>
			<Label>@SYS122257</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetWIPCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetWIPSales</Name>
			<Label>@SYS122259</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetWIPSales</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetHours</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122263</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetConsumptionCostHours</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324731</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetConsumptionCostHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetConsumptionCostExpense</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324732</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetConsumptionCostExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetConsumptionCostItem</Name>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS324733</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetConsumptionCostItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetConsumption</Name>
			<Label>@SYS122265</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetConsumption</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetPayrollAllocation</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122273</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetPayrollAllocation</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetPayrollAllocationCost</Name>
			<Label>@SYS122275</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetPayrollAllocationCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetInvoicedOnAccount</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324737</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetInvoicedOnAccount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalBudgetCost</Name>
			<Label>@SYS122283</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projTotalBudgetCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>RemainingBudgetCost</Name>
			<Label>@SYS122284</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projRemainingBudgetCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>OriginalBudgetCost</Name>
			<Label>@SYS122285</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projOriginalBudgetCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetGrossWipCost</Name>
			<Label>@SYS122306</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetGrossWIPCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetGrossMargin</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122301</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetGrossMargin</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetNetWip</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122310</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetNetWIP</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>RemainingBudgetDeviation</Name>
			<Label>@SYS324744</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projRemainingBudgetDeviation</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCashInflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122289</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCashInflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetCashOutflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122291</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetCashOutflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetNetCashflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122327</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetNetCashflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BudgetWIPInvoicedOnAccount</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS324981</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projBudgetWIPInvoicedOnAccount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjInvoiceProjId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CustAccount</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupId</Name>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupName</Name>
			<DataField>Name</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceCategory</Name>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjTransBudget_1</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>