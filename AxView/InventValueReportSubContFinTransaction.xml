<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportSubContFinTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueReportSubContFinTransaction extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the formula to use when calculating the <c>Amount</c> field of the
    /// <c>InventValueReportSubContFinTransaction</c> view.
    /// </summary>
    /// <returns>
    /// A string that contains the amount.
    /// </returns>
    /// <remarks>
    /// The calculated amount is the sum of amounts from the records in the <c>ProdRouteTable</c> table
    /// that are associated to the current record with a negative sign.
    /// </remarks>
    public static str amount()
    {
        return SysComputedColumn::negative(SysComputedColumn::sum(SysComputedColumn::returnField(tableStr(InventValueReportSubContFinTransaction), identifierStr(ProdRouteTrans), fieldStr(ProdRouteTrans, Amount))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line type that corresponds to this view line.
    /// </summary>
    /// <returns>
    /// A string that contains the literal for a member of the <c>InventValueReportLineType</c> enumeration
    /// value.
    /// </returns>
    /// <remarks>
    /// This method always returns the <c>Transaction</c> enumeration value.
    /// </remarks>
    public static str lineType()
    {
        return SysComputedColumn::returnLiteral(InventValueReportLineType::Transaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the formula to use when calculating the <c>Qty</c> field of the
    /// <c>InventValueReportSubContFinTransaction</c> view.
    /// </summary>
    /// <returns>
    /// A string that contains the quantity.
    /// </returns>
    /// <remarks>
    /// The calculated quantity will be the sum of quantities that are reported as good from records in the
    /// <c>ProdRouteTable</c> table, which are associated to the current record with negative sign.The
    /// quantities that are reported with error are ignored because the field is not used in the lean
    /// subcontracting scenario.
    /// </remarks>
    public static str qty()
    {
        return SysComputedColumn::negative(SysComputedColumn::sum(SysComputedColumn::returnField(tableStr(InventValueReportSubContFinTransaction), identifierStr(ProdRouteTrans), fieldStr(ProdRouteTrans, QtyGood))));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS333368</DeveloperDocumentation>
	<Label>@SYS60318</Label>
	<TitleField1>ServiceItemId</TitleField1>
	<TitleField2>Reference</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SessionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Amount</Name>
			<ExtendedDataType>CostAmountPhysical</ExtendedDataType>
			<ViewMethod>amount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ServiceItemId</Name>
			<DataField>ServiceItemId</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SessionId</Name>
			<DataField>SessionId</DataField>
			<DataSource>InventValueReportParm</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>LineType</Name>
			<ViewMethod>lineType</ViewMethod>
			<EnumType>InventValueReportLineType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>VoucherCalc</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>DateCalc</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Reference</Name>
			<DataField>TransRefId</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DEL_SumOfAmount</Name>
			<Aggregation>Sum</Aggregation>
			<DataField>Amount</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceGroup</Name>
			<DataField>ResourceGroup</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DefaultDimension</Name>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProdRouteTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Qty</Name>
			<ExtendedDataType>ProdQty</ExtendedDataType>
			<ViewMethod>qty</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProdRouteTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProdRouteTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventValueReportParm</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventValueReportParm</Table>
						<DataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>RecId</Name>
								<Field>RecId</Field>
								<Value>(ProdRouteTrans.DateCalc&gt;=InventValueReportParm.FromDate)</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<FetchMode>OneToN</FetchMode>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<Fields />
				<Ranges />
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>ServiceItemId</Name>
						<DataSource>ProdRouteTrans</DataSource>
						<Field>ServiceItemId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>DateCalc</Name>
						<DataSource>ProdRouteTrans</DataSource>
						<Field>DateCalc</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>VoucherCalc</Name>
						<DataSource>ProdRouteTrans</DataSource>
						<Field>VoucherCalc</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>TransRefId</Name>
						<DataSource>ProdRouteTrans</DataSource>
						<Field>TransRefId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>SessionId</Name>
						<DataSource>InventValueReportParm</DataSource>
						<Field>SessionId</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>