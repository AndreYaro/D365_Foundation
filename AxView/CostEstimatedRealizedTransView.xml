<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEstimatedRealizedTransView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEstimatedRealizedTransView</c> view shows all cost calculations from <c>ProdCalcTrans</c> table
/// in a manner suitable for comparing them with costs from other sources.
/// </summary>
public class CostEstimatedRealizedTransView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costRealized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the realized cost amount.
    /// </summary>
    /// <returns>
    /// A string to compute the realized cost.
    /// </returns>
    /// <remarks>
    /// Calculation follows the logic from <c>ProdCalcTrans.realCostAmountTotal()</c>
    /// </remarks>
    public static str costRealized()
    {
        TableName       viewName = tableStr(CostEstimatedRealizedTransView);

        return SysComputedColumn::add(
                SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAmount)),
                SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAdjustment)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the estimated cost amount.
    /// </summary>
    /// <returns>
    /// A string to compute the estimated cost.
    /// </returns>
    /// <remarks>
    /// Calculation follows the logic from <c>ProdCalcTrans.costPriceSum()</c>
    /// </remarks>
    public static str costEstimated()
    {
        TableName       viewName = tableStr(CostEstimatedRealizedTransView);

        if (CostEstimatedRealizedTransView::isCostMarkupEnabled())
        {
            return SysComputedColumn::add(
                SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, CostAmount)),
                SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, CostMarkup)));
        }
        return SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, CostAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the difference between estimated and realized cost amounts.
    /// </summary>
    /// <returns>
    /// A string to compute the difference between estimated and realized cost.
    /// </returns>
    public static str costDifference()
    {
        TableName       viewName = tableStr(CostEstimatedRealizedTransView);

        return SysComputedColumn::subtract(
                    SysComputedColumn::add(
                            SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAmount)),
                            SysComputedColumn::returnField(viewName, tableStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAdjustment))),
                    CostEstimatedRealizedTransView::costEstimated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostMarkupEnabled</Name>
				<Source><![CDATA[
    private static boolean isCostMarkupEnabled()
    {
        return isConfigurationkeyEnabled(new SysDictField(tableNum(ProdCalcTrans), fieldNum(ProdCalcTrans, CostMarkup)).configurationKeyId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRollupSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the cost rollup source Id.
    /// </summary>
    /// <returns>
    /// A string to compute the cost rollup source Id.
    /// </returns>
    /// <remarks>This field is empty for union purposes.</remarks>
    public static str costRollupSourceId()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the inventory transaction Id.
    /// </summary>
    /// <returns>
    /// A string to compute the inventory transaction Id.
    /// </returns>
    /// <remarks>This field is empty for union purposes.</remarks>
    public static str inventTransId()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Query>CostEstimatedRealizedTransQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostGroupId</Name>
			<DataField>CostGroupId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostEstimated</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<ViewMethod>costEstimated</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostRealized</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<ViewMethod>costRealized</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Level</Name>
			<DataField>CollectRefLevel</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsSplit</Name>
			<DataField>BOM</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostDifference</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<ViewMethod>costDifference</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProcessOccurrence</Name>
			<DataField>CollectRefProdId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CostRollupSourceId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<ViewMethod>costRollupSourceId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>InventTransId</Name>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<ViewMethod>inventTransId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CalcType</Name>
			<DataField>CalcType</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LotSizeRealized</Name>
			<DataField>RealQty</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LotSizeEstimated</Name>
			<DataField>Qty</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostRollupId</Name>
			<DataField>TransRefId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>