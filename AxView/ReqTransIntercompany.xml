<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransIntercompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransIntercompany extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pdsCWReqQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the current quantity to a catch weight quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity equivalent of the current record's quantity.
    /// </returns>
    public display PdsCWReqQty pdsCWReqQty()
    {
        return PdsCatchWeight::cwQty(this.ItemId, this.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The catch weight units, if applicable, of the current record.
    /// </summary>
    /// <returns>
    /// The catch weight unit. If not applicable, an empty string is returned.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeightItem::find(this.ItemId).PdsCWUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ReqTrans</c> record for the current record.
    /// </summary>
    /// <returns>
    /// The <c>ReqTrans</c> record for the current record.
    /// </returns>
    public ReqTrans reqTrans()
    {
        return ReqTrans::findRecId(this.ReqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedColumnString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that is based on a source name and source field name.
    /// </summary>
    /// <param name="_sourcetableName">
    /// The source data source in the union.
    /// </param>
    /// <param name="_sourceFieldName">
    /// The source field name in the view.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedColumnString(tableName _sourcetableName, fieldName _sourceFieldName)
    {
        DictView dictView;

        dictView = new DictView(tablenum(ReqTransIntercompany));
        return dictView.computedColumnString(
            _sourcetableName,
            _sourceFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedCustomerCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves the company for customer references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedCustomerCompany(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanySales):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanySales, Company));

            case tablestr(ReqTransIntercompanyPlannedICDemand):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPlannedICDemand, Company));

            default:
                return SysComputedColumn::returnLiteral('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedCustomerReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves customer references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedCustomerReference(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanySales):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanySales, Reference));

            case tablestr(ReqTransIntercompanyPlannedICDemand):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPlannedICDemand, Reference));

            default:
                return SysComputedColumn::returnLiteral('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedCustomerReferenceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves the status for customer references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedCustomerReferenceStatus(int _branchNum)
    {
        tableName                           tableName   = ReqTransIntercompany::getTableNameForBranch(_branchNum);
        ReqTransIntercompanyCustomerStatus  firstValueOffset;
        str                                 computedSourceField;

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanySales):
                firstValueOffset = ReqTransIntercompanyCustomerStatus::None;
                computedSourceField = ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanySales, Status));
                break;

            case tablestr(ReqTransIntercompanyPlannedICDemand):
                firstValueOffset = ReqTransIntercompanyCustomerStatus::Unadministered;
                computedSourceField = ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPlannedICDemand, Status));
                break;

            default:
                return SysComputedColumn::returnLiteral(ReqTransIntercompanyCustomerStatus::None);
        }

        return SysComputedColumn::add(int2str(enum2int(firstValueOffset)), computedSourceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedCustomerReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves the customer reference type.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedCustomerReferenceType(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanySales):
                return SysComputedColumn::returnLiteral(ReqRefType::Purch);

            case tablestr(ReqTransIntercompanyPlannedICDemand):
                return SysComputedColumn::returnLiteral(ReqRefType::ItemPlannedOrder);

            default:
                return SysComputedColumn::returnLiteral(ReqRefType::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedVendorCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves the company for vendor references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedVendorCompany(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanyPurch):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPurch, Company));

            case tablestr(ReqTransIntercompanyItemPlannedOrder):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyItemPlannedOrder, Company));

            default:
                return SysComputedColumn::returnLiteral('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedVendorReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string which retrieves vendor references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedVendorReference(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanyPurch):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPurch, Reference));

            case tablestr(ReqTransIntercompanyItemPlannedOrder):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyItemPlannedOrder, Reference));

            default:
                return SysComputedColumn::returnLiteral('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedVendorReferenceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string that retrieves the status for vendor references.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string which retrieves the status for vendor references.
    /// </returns>
    private static str computedVendorReferenceStatus(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanyPurch):
                return ReqTransIntercompany::computedColumnString(tableName, fieldstr(ReqTransIntercompanyPurch, Status));

            default:
                return SysComputedColumn::returnLiteral(SalesStatus::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computedVendorReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a computed column string which retrieves the customer reference type.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// A computed column string.
    /// </returns>
    private static str computedVendorReferenceType(int _branchNum)
    {
        tableName  tableName = ReqTransIntercompany::getTableNameForBranch(_branchNum);

        switch (tableName)
        {
            case tablestr(ReqTransIntercompanyPurch):
                return SysComputedColumn::returnLiteral(ReqRefType::Sales);

            case tablestr(ReqTransIntercompanyItemPlannedOrder):
                return SysComputedColumn::returnLiteral(ReqRefType::PlannedIntercompanyDemand);

            default:
                return SysComputedColumn::returnLiteral(ReqRefType::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableNameForBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table name for the specified union branch in the query.
    /// </summary>
    /// <param name="_branchNum">
    /// The number of the branch in the union.
    /// </param>
    /// <returns>
    /// The table name for the specified union branch in the query.
    /// </returns>
    private static tableName getTableNameForBranch(int _branchNum)
    {
        Query query = new Query(querystr(ReqTransIntercompany));
        QueryBuildDataSource qbds = query.dataSourceNo(_branchNum);
        if (qbds)
        {
            return qbds.name();
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeInterCompany</ConfigurationKey>
	<DeveloperDocumentation>@SYS333284</DeveloperDocumentation>
	<Label>@SYS333312</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ReqDate</TitleField2>
	<Query>ReqTransIntercompany</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReferenceStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReferenceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS333291</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomerCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReferenceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReqTrans</Name>
			<Label>@SYS5803</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWReqQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS333289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReferenceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorReferenceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CovInventDimId</Name>
			<DataField>CovInventDimId</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReqDate</Name>
			<DataField>ReqDate</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RefType</Name>
			<DataField>RefType</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RefId</Name>
			<DataField>RefId</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>VendorCompany</Name>
			<ExtendedDataType>ReqTransIntercompanyVendorCompany</ExtendedDataType>
			<ViewMethod>computedVendorCompany</ViewMethod>
			<StringSize>4</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>VendorReferenceType</Name>
			<ExtendedDataType>ReqTransIntercompanyVendorType</ExtendedDataType>
			<ViewMethod>computedVendorReferenceType</ViewMethod>
			<EnumType>ReqRefType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>VendorReference</Name>
			<ExtendedDataType>ReqTransIntercompanyVendorReference</ExtendedDataType>
			<ViewMethod>computedVendorReference</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>VendorReferenceStatus</Name>
			<ExtendedDataType>ReqTransIntercompanyVendorStatus</ExtendedDataType>
			<ViewMethod>computedVendorReferenceStatus</ViewMethod>
			<EnumType>SalesStatus</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CustomerCompany</Name>
			<ExtendedDataType>ReqTransIntercompanyCustomerCompany</ExtendedDataType>
			<ViewMethod>computedCustomerCompany</ViewMethod>
			<StringSize>4</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>CustomerReferenceType</Name>
			<ExtendedDataType>ReqTransIntercompanyCustomerType</ExtendedDataType>
			<ViewMethod>computedCustomerReferenceType</ViewMethod>
			<EnumType>ReqRefType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CustomerReference</Name>
			<ExtendedDataType>ReqTransIntercompanyCustomerReference</ExtendedDataType>
			<ViewMethod>computedCustomerReference</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>CustomerReferenceStatus</Name>
			<ViewMethod>computedCustomerReferenceStatus</ViewMethod>
			<EnumType>ReqTransIntercompanyCustomerStatus</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PlanVersion</Name>
			<DataField>PlanVersion</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReqTransDataAreaId</Name>
			<DataField>dataAreaId</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReqTrans</Name>
			<DataField>ReqTrans</DataField>
			<DataSource>ReqTransIntercompanySales</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<AllowCrossCompany>Yes</AllowCrossCompany>
		<QueryType>Union</QueryType>
		<DataSources />
	</ViewMetadata>
</AxView>