<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDetail_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxTransDetail_BE extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>AmountInclTax</c> value.
    /// </summary>
    /// <returns>
    /// The <c>AmountInclTax</c> value.
    /// </returns>
    display TaxBase amountInclTax()
    {
        TaxBase   taxBase;

        if (this.taxGroupData().UseTax)
        {
            taxBase = this.taxBaseAmount();
        }
        else
        {
            taxBase = this.taxBaseAmount() + this.TaxInCostPriceMST + this.netTaxAmount();
        }
        return taxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>BaseAmount</c> value.
    /// </summary>
    /// <returns>
    /// The <c>BaseAmount</c> value.
    /// </returns>
    display AmountMST baseAmount()
    {
        AmountMST       baseAmount;

        if (this.taxGroupData().UseTax)
        {
            baseAmount = this.taxBaseAmount();
        }
        else
        {
            baseAmount = this.taxBaseAmount() + this.TaxInCostPriceMST;
        }
        return baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records of the <c>CustTrans</c> table.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher for the records.
    /// </param>
    /// <param name="_transDate">
    /// A <c>transDate</c> value for the records.
    /// </param>
    /// <returns>
    /// The first record of the <c>CustTrans</c> table.
    /// </returns>
    public CustTrans custTrans(Voucher _voucher,TransDate _transDate)
    {
        CustTrans custTrans;

        select firstonly custTrans
            index VoucherDateIdx
            where custTrans.Voucher    == _voucher
                && custTrans.TransDate  == _transDate;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterpriseNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>EnterpriseNumber</c> value.
    /// </summary>
    /// <returns>
    /// The <c>EnterpriseNumber</c> value.
    /// </returns>
    display TaxEnterpriseNumber enterpriseNumber()
    {
        VATNum      ret;
        CustTrans   custTrans;
        VendTrans   vendTrans;

        custTrans = this.custTrans(this.Voucher,this.TransDate);
        vendTrans = this.vendTrans(this.Voucher,this.TransDate);

        switch (this.Source)
        {
            case TaxModuleType::Sales,
                TaxModuleType::SalesInvoice,
                TaxModuleType::FreeTxtInvoice,
                TaxModuleType::CustCollectionLetter :
                    ret = CustTable::find(custTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                break;

            case TaxModuleType::PurchInvoice,
                TaxModuleType::Purch :
                ret = VendTable::find(vendTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                break;

            case TaxModuleType::Voucher :
                if (custTrans)
                {
                    ret = CustTable::find(custTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                }
                if (vendTrans)
                {
                    ret = VendTable::find(vendTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                }
                break;

            default :
                return '';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalACType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the<c> JournalACType</c> value.
    /// </summary>
    /// <returns>
    /// The <c>JournalACType</c> value.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>TaxModuleType</c> enumeration.
    /// </remarks>
    display Str60 journalACType()
    {
        CustTrans           custTrans;
        VendTrans           vendTrans;
        LedgerJournalACType ledgerJournalACType;

        custTrans.clear();
        vendTrans.clear();

        switch (this.Source)
        {
            case TaxModuleType::Sales,
                 TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::CustCollectionLetter,
                 TaxModuleType::CustInterestNote,
                 TaxModuleType::ProjectInvoice :
                 this.custTrans(this.Voucher,this.TransDate);

                ledgerJournalACType = LedgerJournalACType::Cust;
                break;

            case TaxModuleType::PurchInvoice,
                TaxModuleType::Purch :
                this.vendTrans(this.Voucher,this.TransDate);

                ledgerJournalACType = LedgerJournalACType::Vend;
                break;

            case TaxModuleType::Voucher :
                vendTrans = this.vendTrans(this.Voucher,this.TransDate);

                if (vendTrans)
                {
                    ledgerJournalACType = LedgerJournalACType::Vend;
                }
                else
                {
                    custTrans = this.custTrans(this.Voucher,this.TransDate);

                    if (custTrans)
                    {
                        ledgerJournalACType = LedgerJournalACType::Cust;
                    }
                    else
                    {
                        ledgerJournalACType = LedgerJournalACType::Ledger;
                    }
                }
                break;
        }
        return enum2str(ledgerJournalACType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>NetTaxAmount</c> value.
    /// </summary>
    /// <returns>
    /// A <c>NetTaxAmount</c> value.
    /// </returns>
    display public TaxAmount netTaxAmount()
    {
        TaxAmount   taxAmount;

        if (this.taxGroupData().UseTax)
        {
           taxAmount = 0;
        }
        else
        {
           taxAmount = this.TaxAmount - this.TaxInCostPriceMST;
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceNetTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceNetTaxAmount</c> value.
    /// </summary>
    /// <returns>
    /// A <c>SourceNetTaxAmount</c> value.
    /// </returns>
    display AmountMST sourceNetTaxAmount()
    {
        AmountMST           sourceNetTaxAmount;

        if (TaxGroupData::find(this.TaxGroup,this.TaxCode).UseTax)
        {
            sourceNetTaxAmount = 0;
        }
        else
        {
            sourceNetTaxAmount = this.SourceTaxAmountCur - CurrencyExchangeHelper::curAmount(this.TaxInCostPriceMST, this.SourceCurrencyCode);
        }
        return sourceNetTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxGroupData</c> record of the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    /// A <c>TaxGroupData</c> record.
    /// </returns>
    private TaxGroupData taxGroupData()
    {
        TaxGroupData taxGroupData;

        TaxGroupData::find(this.TaxGroup, this.TaxCode);
        return taxGroupData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a text value.
    /// </summary>
    /// <returns>
    /// The value of the text.
    /// </returns>
    display Str60 text()
    {
        str             ret;
        CustTrans       custTrans;
        VendTrans       vendTrans;

        custTrans   = this.custTrans(this.Voucher,this.TransDate);
        vendTrans   = this.vendTrans(this.Voucher,this.TransDate);

        switch (this.Source)
        {
            case TaxModuleType::SalesInvoice,
                TaxModuleType::FreeTxtInvoice,
                TaxModuleType::CustCollectionLetter,
                TaxModuleType::CustInterestNote,
                TaxModuleType::ProjectInvoice :

                ret = CustTable::find(custTrans.AccountNum).name();
                break;

            case TaxModuleType::PurchInvoice :
                ret = VendTable::find(vendTrans.AccountNum).name();
                break;

            case TaxModuleType::Voucher :
                if (vendTrans)
                {
                    ret = VendTable::find(vendTrans.AccountNum).name();
                }
                else
                {
                    if (custTrans)
                    {
                        ret = CustTable::find(custTrans.AccountNum).name();
                    }
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>VATNum</c> value.
    /// </summary>
    /// <returns>
    /// A <c>VATNum</c> value.
    /// </returns>
    display VATNum vatNum()
    {
        VATNum      ret;
        CustTrans   custTrans;
        VendTrans   vendTrans;

        custTrans   = this.custTrans(this.Voucher,this.TransDate);
        vendTrans   = this.vendTrans(this.Voucher,this.TransDate);
        switch (this.Source)
        {
            case TaxModuleType::Sales,
                TaxModuleType::SalesInvoice,
                TaxModuleType::FreeTxtInvoice,
                TaxModuleType::CustCollectionLetter :
                ret = CustTable::find(custTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                break;

            case TaxModuleType::PurchInvoice,
                TaxModuleType::Purch :
                ret = VendTable::find(vendTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                break;

            case TaxModuleType::Voucher :
                if (custTrans)
                {
                    ret = CustTable::find(custTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                }
                if (vendTrans)
                {
                    ret = VendTable::find(vendTrans.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.TransDate);
                }
                break;

            default :
                return '';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records of the <c>VendTrans</c> table.
    /// </summary>
    /// <param name="_voucher">
    /// A voucher for the records.
    /// </param>
    /// <param name="_transDate">
    /// A <c>TransDate</c> value for the records.
    /// </param>
    /// <returns>
    /// The first record of the <c>vendTrans</c> table.
    /// </returns>
    public VendTrans vendTrans(Voucher _voucher,TransDate _transDate)
    {
        VendTrans vendTrans;

        select firstonly vendTrans
            index VoucherDateIdx
            where vendTrans.Voucher    == _voucher
                && vendTrans.TransDate  == _transDate;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    private TaxBase taxBaseAmount()
    {
        TaxBase taxBaseAmount = this.TaxBaseAmount;

        if (this.ReverseCharge_W == NoYes::Yes
            && this.TaxDirection == TaxDirection::OutgoingTax)
        {
            taxBaseAmount = -taxBaseAmount;
        }

        return taxBaseAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS317456</DeveloperDocumentation>
	<Label>@SYS58100</Label>
	<TitleField1>TaxDirection</TitleField1>
	<TitleField2>TaxCode</TitleField2>
	<Query>TaxTransDetailQuery_BE</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>OperationAccount</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionAttributeValueCombination</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceCurrencyCode</Name>
			<DataField>SourceCurrencyCode</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxDirection</Name>
			<DataField>TaxDirection</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Source</Name>
			<DataField>Source</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxBaseAmount</Name>
			<DataField>TaxBaseAmount</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxAmount</Name>
			<DataField>TaxAmount</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxInCostPriceMST</Name>
			<DataField>TaxInCostPriceMST</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceTaxAmountCur</Name>
			<DataField>SourceTaxAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MainAccountId</Name>
			<DataField>MainAccountId</DataField>
			<DataSource>MainAccount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>GeneralJournalAccountEntry</Name>
			<DataField>GeneralJournalAccountEntry</DataField>
			<DataSource>TaxTransGeneralJournalAccountEntry</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReverseCharge_W</Name>
			<DataField>ReverseCharge_W</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>