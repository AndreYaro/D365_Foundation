<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandByWarehouse</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventOnHandByWarehouse extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>orderedSumDefinition</Name>
				<Source><![CDATA[
    private static str orderedSumDefinition()
    {
        return SysComputedColumn::add(
                SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, Ordered)),
                SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, Arrived))
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>availOrderedDefinition</Name>
				<Source><![CDATA[
    private static str availOrderedDefinition()
    {
        return SysComputedColumn::subtract(
            SysComputedColumn::subtract(
                SysComputedColumn::add(
                    SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, Ordered)),
                    SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, Arrived))
                    ),
                SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, ReservOrdered))
                ),
            SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, OnOrder))
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotalDefinition</Name>
				<Source><![CDATA[
    private static str availTotalDefinition()
    {
        return SysComputedColumn::add(
            SysComputedColumn::returnField(tableStr(InventOnHandByWarehouse),  identifierStr(InventSumByWarehouse), fieldStr(InventSumByWarehouse, AvailPhysical)),
            InventOnHandByWarehouse::availOrderedDefinition()
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHSItemDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a field expression that defines whether an item is a WHS enabled item by querying the 
    /// <c>WHSInventEnabled</c> table to see if there's a record with the same item Id.
    /// Based on the existence of the record, the field value is either 1 or 0.
    /// </summary>
    /// <returns>The calculated field expression.</returns>
    /// <remarks>
    /// Generates the following SQL expression:
    /// CASE
    ///     WHEN (
    ///         SELECT TOP 1 WHSINVENTENABLED.ITEMID
    ///         FROM WHSINVENTENABLED
    ///         WHERE (WHSINVENTENABLED.ITEMID = T1.ITEMID)
    ///             AND (WHSINVENTENABLED.DATAAREAID = T1.DATAAREAID)
    ///             AND (WHSINVENTENABLED.PARTITION = T1.PARTITION)
    ///         ) IS NOT NULL
    ///     THEN 1
    ///     ELSE 0
    /// END
    /// </remarks>
    static private str isWHSItemDefinition()
    {
        return InventOnHandByWarehouse::buildCheckIfRecordExistComputedColumnExpression(
            tableNum(WHSInventEnabled),
            fieldNum(WHSInventEnabled, ItemId),
            fieldNum(WHSInventEnabled, DataAreaId),
            fieldNum(WHSInventEnabled, Partition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItemDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a field expression that defines whether an item is a CW enabled item by querying the 
    /// <c>PdsCatchWeightItem</c> table to see if there's a record with the same item Id.
    /// Based on the existence of the record, the field value is either 1 or 0.
    /// </summary>
    /// <returns>The calculated field expression.</returns>
    /// <remarks>
    /// Generates the following SQL expression:
    /// CASE
    ///     WHEN (
    ///         SELECT TOP 1 PDSCATCHWEIGHTITEM.ITEMID
    ///         FROM PDSCATCHWEIGHTITEM
    ///         WHERE (PDSCATCHWEIGHTITEM.ITEMID = T1.ITEMID)
    ///             AND (PDSCATCHWEIGHTITEM.DATAAREAID = T1.DATAAREAID)
    ///             AND (PDSCATCHWEIGHTITEM.PARTITION = T1.PARTITION)
    ///         ) IS NOT NULL
    ///     THEN 1
    ///     ELSE 0
    /// END
    /// </remarks>
    static private str isCWItemDefinition()
    {
        return InventOnHandByWarehouse::buildCheckIfRecordExistComputedColumnExpression(
            tableNum(PdsCatchWeightItem),
            fieldNum(PdsCatchWeightItem, ItemId),
            fieldNum(PdsCatchWeightItem, DataAreaId),
            fieldNum(PdsCatchWeightItem, Partition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckIfRecordExistComputedColumnExpression</Name>
				<Source><![CDATA[
    static private str buildCheckIfRecordExistComputedColumnExpression(
        TableId _tableToCheckAgainst,
        FieldId _fieldIdToCheckAgainst,
        FieldId _dataAreaFieldId,
        FieldId _partitionFieldId)
    {
        SysDictTable dictTableToCheckAgainst = new SysDictTable(_tableToCheckAgainst);
        FieldName fieldNameToCheckAgainst = InventOnHandByWarehouse::buildFieldName(dictTableToCheckAgainst, _fieldIdToCheckAgainst);
        List andEqualExpressions = new List(Types::String);
        TableName inventOnHandByWarehouseViewName = viewStr(InventOnHandByWarehouse);
        TableName inventSumByWarehouseViewName = viewStr(InventSumByWarehouse);

        // add item Id criterion
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            fieldNameToCheckAgainst,
            SysComputedColumn::comparisonField(
                inventOnHandByWarehouseViewName,
                inventSumByWarehouseViewName,
                fieldStr(InventSumByWarehouse, ItemId))));

        // add data area Id criterion
        FieldName pdsCatchWeightItemDataAreaIdFieldName = InventOnHandByWarehouse::buildFieldName(dictTableToCheckAgainst, _dataAreaFieldId);
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            pdsCatchWeightItemDataAreaIdFieldName,
            SysComputedColumn::comparisonField(
                inventOnHandByWarehouseViewName,
                inventSumByWarehouseViewName,
                fieldStr(InventSumByWarehouse, DataAreaId))));

        // add partition criterion
        FieldName pdsCatchWeightItemPartitionFieldName = InventOnHandByWarehouse::buildFieldName(dictTableToCheckAgainst, _partitionFieldId);
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            pdsCatchWeightItemPartitionFieldName,
            SysComputedColumn::comparisonField(
                inventOnHandByWarehouseViewName,
                inventSumByWarehouseViewName,
                fieldStr(InventSumByWarehouse, Partition))));

        // Subquery is added due to the platform issue with building a view that has disabled non-root data sources.
        return InventOnHandByWarehouse::buildCheckIfRecordExistSubQuery(
            fieldNameToCheckAgainst,
            dictTableToCheckAgainst.name(DbBackend::Sql),
            andEqualExpressions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckIfRecordExistSubQuery</Name>
				<Source><![CDATA[
    static private str buildCheckIfRecordExistSubQuery(FieldName _fieldNameToProbe, TableName _flagTableName, List _andEqualExpressions)
    {
        return SysComputedColumn::if(
            SysComputedColumn::isNotNullExpression(
            strFmt(
                '(SELECT TOP 1 %1 FROM %2 WHERE %3)',
                _fieldNameToProbe,
                _flagTableName,
                SysComputedColumn::and(_andEqualExpressions))),
            SysComputedColumn::returnLiteral(NoYes::Yes),
            SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldName</Name>
				<Source><![CDATA[
    static private FieldName buildFieldName(SysDictTable _table, FieldId _fieldId)
    {
        return _table.name(DbBackend::Sql) + '.' + _table.fieldObject(_fieldId).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventOnHandByWarehouseDevDoc</DeveloperDocumentation>
	<FormRef>InventOnhandItem</FormRef>
	<Label>@SCM:InventOnHandByWarehouseLabel</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventLocationId</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>configId</Name>
			<DataField>configId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventColorId</Name>
			<DataField>InventColorId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventVersionId</Name>
			<DataField>InventVersionId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventSiteId</Name>
			<DataField>InventSiteId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventLocationId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PhysicalInvent</Name>
			<DataField>PhysicalInvent</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReservPhysical</Name>
			<DataField>ReservPhysical</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AvailPhysical</Name>
			<DataField>AvailPhysical</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>OrderedSum</Name>
			<ExtendedDataType>inventQtyOrderedSum</ExtendedDataType>
			<ViewMethod>orderedSumDefinition</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>OnOrder</Name>
			<DataField>OnOrder</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReservOrdered</Name>
			<DataField>ReservOrdered</DataField>
			<DataSource>InventSumByWarehouse</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AvailOrdered</Name>
			<ExtendedDataType>InventQtyAvailOrdered</ExtendedDataType>
			<ViewMethod>availOrderedDefinition</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalAvailable</Name>
			<ExtendedDataType>InventQtyTotal</ExtendedDataType>
			<ViewMethod>availTotalDefinition</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>IsWHSItem</Name>
			<ExtendedDataType>WHSIsItemWHSEnabled</ExtendedDataType>
			<ViewMethod>isWHSItemDefinition</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>IsCWItem</Name>
			<ExtendedDataType>PdsCWProduct</ExtendedDataType>
			<ViewMethod>isCWItemDefinition</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventSumByWarehouse</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventSumByWarehouse</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>