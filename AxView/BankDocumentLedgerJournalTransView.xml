<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentLedgerJournalTransView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentLedgerJournalTransView extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account id.
    /// </summary>
    /// <returns>
    /// The bank account id.
    /// </returns>
    public static str accountId()
    {
        TableName   viewName = tableStr(BankDocumentLedgerJournalTransView);
        str computedColumn;

        computedColumn = SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(LedgerJournalTrans), fieldStr(LedgerJournalTrans, AccountType)),
                SysComputedColumn::comparisonLiteral(LedgerJournalACType::Bank)),
            SysComputedColumn::returnField(viewName, identifierStr(DimensionAttributeValueCombination), fieldStr(DimensionAttributeValueCombination, DisplayValue)),
            SysComputedColumn::if(
                SysComputedColumn::compareExpressions(
                    SysComputedColumn::comparisonField(viewName, identifierStr(LedgerJournalTrans), fieldStr(LedgerJournalTrans, BridgingBankAccount)),
                        '!=',
                        SysComputedColumn::comparisonLiteral('')),
                SysComputedColumn::returnField(viewName, identifierStr(LedgerJournalTrans), fieldStr(LedgerJournalTrans, BridgingBankAccount)),
                SysComputedColumn::returnField(viewName, identifierStr(DimensionAttributeValueCombinationOffset), fieldStr(DimensionAttributeValueCombination, DisplayValue))));

        return computedColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endToEndIdSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the end to end Id.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str endToEndIdSQL()
    { 
        str dash = SysComputedColumn::returnLiteral('-');
        str underscore = SysComputedColumn::returnLiteral('_');
        str sql;

        //The maximum length is 35.  First, we want to use the voucher plus the separator.  Second, we want to use the remaining
        //available characters for the RecId.  We want to use the last characters of the RecId.
        //
        //  Example:    RECID   68719583793
        //              If we only have 3 characters left for the RECID, we want to use 793. 
        //
        //The computed column does not allow the 'WITH' keyword, so the logical pieces of the dynamic view PaymentLedgerJournalTrans
        //could not be used.  It better describes how the input variables are determined and how they are used.  The final code injects
        //these variables into the REVERSE formula making it harder to understand.
        /*
        WITH PaymentLedgerJournalTrans AS
        (
            SELECT VOUCHER, 
                LEN(VOUCHER) AS LENVOUCHER,
                LTRIM(STR(RECID, 25)) as STRRECID, 
                LEN(LTRIM(STR(RECID, 25))) AS LENSTRRECID,
                '-' AS SEPARATOR, LEN('-') AS LENSEPARATOR,
                35 - LEN(VOUCHER) - LEN('-') AS LENRECIDSUBSTR
            FROM LEDGERJOURNALTRANS 
            WHERE LEDGERJOURNALTRANS.RECID = T2.RECID
        )
        SELECT VOUCHER + SEPARATOR +  REVERSE(SUBSTRING(REVERSE(STRRECID), 1, LENRECIDSUBSTR)) FROM PaymentLedgerJournalTrans
        */

        //After bug 397734 fix, the EndToEndId is now 35 characters with the concantenation of a 2-digit sequence number
        //based on CUSTVENDPROCESSEDPAYMENT to align with the EndToEndId of payment electronic reporting format.

        sql = @" 
                SELECT VOUCHER + " + dash + @" + REVERSE(SUBSTRING(REVERSE(LTRIM(STR(LJT.RECID, 25))), 1, 35 - LEN(VOUCHER) - 1)) + NUMBSEQCOUNTER.NUMBSEQ
                FROM LEDGERJOURNALTRANS LJT
                JOIN
                (
                    SELECT LEDGERJOURNALTRANS.RECID, " + underscore + @" + RIGHT('00' + CAST(COUNT(CUSTVENDPROCESSEDPAYMENT.RECID) AS VARCHAR), 2) AS NUMBSEQ
                    FROM LEDGERJOURNALTRANS
                    LEFT JOIN CUSTVENDPROCESSEDPAYMENT
                        ON CUSTVENDPROCESSEDPAYMENT.REFRECID = LEDGERJOURNALTRANS.RECID
                        GROUP BY LEDGERJOURNALTRANS.RECID
                ) AS NUMBSEQCOUNTER
                ON LJT.RECID = NUMBSEQCOUNTER.RECID
                WHERE LJT.RECID = T2.RECID
            ";

        return sql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction currency amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str transactionCurrencyAmountSQL()
    {
        return SysComputedColumn::if(
            SysComputedColumn::compareExpressions(
                SysComputedColumn::comparisonField(
                    tableStr(BankDocumentLedgerJournalTransView),
                    identifierStr(LedgerJournalTrans),
                    fieldStr(LedgerJournalTrans, AccountType)),
                '=',
                SysComputedColumn::returnLiteral(LedgerJournalACType::Bank)),

                    SysComputedColumn::if(
                        SysComputedColumn::compareExpressions(
                        SysComputedColumn::comparisonField(
                            tableStr(BankDocumentLedgerJournalTransView),
                            identifierStr(LedgerJournalTrans),
                            fieldStr(LedgerJournalTrans, AmountCurDebit)),
                            '>',
                            SysComputedColumn::returnLiteral(0.00)),

                            SysComputedColumn::multiply(
                                SysComputedColumn::returnField(
                                    tableStr(BankDocumentLedgerJournalTransView),
                                    identifierStr(LedgerJournalTrans),
                                    fieldStr(LedgerJournalTrans, AmountCurDebit)),
                                    '1'),
                            SysComputedColumn::multiply(
                                SysComputedColumn::returnField(
                                    tableStr(BankDocumentLedgerJournalTransView),
                                    identifierStr(LedgerJournalTrans),
                                    fieldStr(LedgerJournalTrans, AmountCurCredit)),
                                    '-1')),

                    SysComputedColumn::if(
                        SysComputedColumn::compareExpressions(
                            SysComputedColumn::comparisonField(
                                tableStr(BankDocumentLedgerJournalTransView),
                                identifierStr(LedgerJournalTrans),
                                fieldStr(LedgerJournalTrans, OffsetAccountType)),
                    '=',
                    SysComputedColumn::returnLiteral(LedgerJournalACType::Bank)),

                        SysComputedColumn::if(
                            SysComputedColumn::compareExpressions(
                            SysComputedColumn::comparisonField(
                                tableStr(BankDocumentLedgerJournalTransView),
                                identifierStr(LedgerJournalTrans),
                                fieldStr(LedgerJournalTrans, AmountCurDebit)),
                                '>',
                                SysComputedColumn::returnLiteral(0.00)),

                                SysComputedColumn::multiply(
                                    SysComputedColumn::returnField(
                                        tableStr(BankDocumentLedgerJournalTransView),
                                        identifierStr(LedgerJournalTrans),
                                        fieldStr(LedgerJournalTrans, AmountCurDebit)),
                                        '-1'),
                                SysComputedColumn::multiply(
                                    SysComputedColumn::returnField(
                                        tableStr(BankDocumentLedgerJournalTransView),
                                        identifierStr(LedgerJournalTrans),
                                        fieldStr(LedgerJournalTrans, AmountCurCredit)),
                                        '1')),
                        SysComputedColumn::if(
                            SysComputedColumn::isNotNullExpression(fieldStr(LedgerJournalTrans, BridgingBankAccount)),

                            SysComputedColumn::if(
                                SysComputedColumn::compareExpressions(
                                SysComputedColumn::comparisonField(
                                    tableStr(BankDocumentLedgerJournalTransView),
                                    identifierStr(LedgerJournalTrans),
                                    fieldStr(LedgerJournalTrans, AmountCurDebit)),
                                    '>',
                                    SysComputedColumn::returnLiteral(0.00)),

                                    SysComputedColumn::multiply(
                                        SysComputedColumn::returnField(
                                            tableStr(BankDocumentLedgerJournalTransView),
                                            identifierStr(LedgerJournalTrans),
                                            fieldStr(LedgerJournalTrans, AmountCurDebit)),
                                            '-1'),
                                    SysComputedColumn::multiply(
                                        SysComputedColumn::returnField(
                                            tableStr(BankDocumentLedgerJournalTransView),
                                            identifierStr(LedgerJournalTrans),
                                            fieldStr(LedgerJournalTrans, AmountCurCredit)),
                                            '1')),
                             SysComputedColumn::returnLiteral(0.00)))
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the debit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str debitAmountSQL()
    {
        return SysComputedColumn::if(
            SysComputedColumn::compareExpressions(
                SysComputedColumn::comparisonField(
                    tableStr(BankDocumentLedgerJournalTransView),
                    identifierStr(LedgerJournalTrans),
                    fieldStr(LedgerJournalTrans, BankCurrencyAmount)),
                '>',
                SysComputedColumn::returnLiteral(0.00)),
                SysComputedColumn::multiply(
                    SysComputedColumn::returnField(
                        tableStr(BankDocumentLedgerJournalTransView),
                        identifierStr(LedgerJournalTrans),
                        fieldStr(LedgerJournalTrans, BankCurrencyAmount)),
                        '1'),
            SysComputedColumn::returnLiteral(0.00));
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the credit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str creditAmountSQL()
    {
        return SysComputedColumn::if(
            SysComputedColumn::compareExpressions(
                SysComputedColumn::comparisonField(
                    tableStr(BankDocumentLedgerJournalTransView),
                    identifierStr(LedgerJournalTrans),
                    fieldStr(LedgerJournalTrans, BankCurrencyAmount)),
                '<',
                SysComputedColumn::returnLiteral(0.00)),
                SysComputedColumn::multiply(
                    SysComputedColumn::returnField(
                        tableStr(BankDocumentLedgerJournalTransView),
                        identifierStr(LedgerJournalTrans),
                        fieldStr(LedgerJournalTrans, BankCurrencyAmount)),
                        '-1'),
            SysComputedColumn::returnLiteral(0.00));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221744</DeveloperDocumentation>
	<Label>@GLS221743</Label>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>DocumentDate</TitleField2>
	<Query>BankDocumentLedgerJournalTrans</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReconciled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>AccountId</Name>
			<ViewMethod>accountId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankCurrencyAmount</Name>
			<DataField>BankCurrencyAmount</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankTransType</Name>
			<DataField>BankTransType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Cancelled</Name>
			<DataField>IsCancelled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CorrectionBankCurrencyAmount</Name>
			<DataField>CorrectionBankCurrencyAmount</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CreditAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>creditAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DebitAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>debitAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Description</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentNum</Name>
			<DataField>DocumentNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentType</Name>
			<DataField>BankDocumentBookType</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EndToEndId</Name>
			<ExtendedDataType>PaymentEndToEndId</ExtendedDataType>
			<ViewMethod>endToEndIdSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsReconciled</Name>
			<DataField>IsReconciled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PaymId</Name>
			<DataField>PaymId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Posted</Name>
			<DataField>Posted</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Reference</Name>
			<DataField>PaymReference</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRecId</Name>
			<DataField>SourceRecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRelationType</Name>
			<DataField>SourceRelationType</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrency</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyAmount</Name>
			<ExtendedDataType>BankTransAmountCur</ExtendedDataType>
			<ViewMethod>transactionCurrencyAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankDocumentTableRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>