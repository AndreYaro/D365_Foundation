<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlConfigurationDraftCategoryView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetControlConfigurationDraftCategoryView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIsDraft</Name>
				<Source><![CDATA[
    private static str getIsDraft(int branchNum)
    {
        str isDraftSql;
        switch (branchNum)
        {
            case 1:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SumOriginalBudget
                break;
            case 2:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SumAmendments
                break;
            case 3:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SumDraftAmendments
                break;
            case 4:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SumTransfersIn
                break;
            case 5:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SumTransfersOut
                break;
            case 6:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SumDraftTransfersIn
                break;
            case 7:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SumDraftTransfersOut
                break;
            case 8:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // IncludeCarryForwardAmounts
                break;
            case 9:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SumPreliminaryBudget
                break;
            case 10:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // UseApportionedAmount
                break;
            case 11:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SubtractActualExpenditures
                break;
            case 12:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SubtractUnpostedActualExpenditures
                break;
            case 13:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SubtractEncumbrances
                break;
            case 14:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SubtractEncumbranceReductions
                break;
            case 15:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SubtractDraftEncumbrances
                break;
            case 16:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SubtractDraftEncumbranceReductions
                break;
            case 17:
                isDraftSql = SysComputedColumnBase::returnLiteral(false); // SubtractPreEncumbrances
                break;
            case 18:
                isDraftSql = SysComputedColumnBase::returnLiteral(true); // SubtractDraftPreEncumbrances
                break;
        }
        
        return isDraftSql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDraft</Name>
				<Source><![CDATA[
    private static boolean isDraft(BudgetSourceTrackingStatus _status)
    {
        return _status == BudgetSourceTrackingStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategory</Name>
				<Source><![CDATA[
    private static str getCategory(int branchNum)
    {
        str categorySql;
        switch (branchNum)
        {
            case 1:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Original); // SumOriginalBudget
                break;
            case 2:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Amendment); // SumAmendments
                break;
            case 3:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Amendment); // SumDraftAmendments
                break;
            case 4:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::TransferIn); // SumTransfersIn
                break;
            case 5:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::TransferOut); // SumTransfersOut
                break;
            case 6:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::TransferIn); // SumDraftTransfersIn
                break;
            case 7:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::TransferOut); // SumDraftTransfersOut
                break;
            case 8:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::CarryForwardBudget); // IncludeCarryForwardAmounts
                break;
            case 9:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::PreliminaryBudget); // SumPreliminaryBudget
                break;
            case 10:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Apportionment); // UseApportionedAmount
                break;
            case 11:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::ActualExpenditure); // SubtractActualExpenditures
                break;
            case 12:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::ActualExpenditure); // SubtractUnpostedActualExpenditures
                break;
            case 13:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Encumbrance); // SubtractEncumbrances
                break;
            case 14:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::EncumbranceReduction); // SubtractEncumbranceReductions
                break;
            case 15:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::Encumbrance); // SubtractDraftEncumbrances
                break;
            case 16:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::EncumbranceReduction); // SubtractDraftEncumbranceReductions
                break;
            case 17:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::PreEncumbrance); // SubtractPreEncumbrances
                break;
            case 18:
                categorySql = SysComputedColumnBase::returnLiteral(BudgetControlCategory::PreEncumbrance); // SubtractDraftPreEncumbrances
                break;
        }
        
        return categorySql;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Query>BudgetControlConfigurationDraftCategoryQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PrimaryLedger</Name>
			<DataField>PrimaryLedger</DataField>
			<DataSource>SumOriginalBudget</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>IsDraft</Name>
			<ViewMethod>getIsDraft</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>Category</Name>
			<ViewMethod>getCategory</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<QueryType>Union</QueryType>
		<DataSources />
	</ViewMetadata>
</AxView>