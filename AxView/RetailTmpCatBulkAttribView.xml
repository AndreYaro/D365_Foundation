<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTmpCatBulkAttribView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTmpCatBulkAttribView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Value</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge the attribute values into a single column based on data type.
    /// </summary>
    /// <returns>
    /// The casted value.
    /// </returns>
    /// <remarks>
    /// Helps in making a single call to merge different columns into a single text column.
    /// </remarks>
    public static str Value()
    {
        str expression, booleanCondition, decimalConversion;
        str targetDataType = 'NVARCHAR(1999)';
        str floatDataType =  'Decimal(10,2)';
        DictEnum dictEnum = new DictEnum(enumNum(AttributeDataType));
        Map comparisonExpressionMap = new Map(Types::String, Types::String);
        Map comparisonBooleanMap = new Map(Types::String, Types::String);

        comparisonbooleanMap.insert('0', SysComputedColumn::returnLiteral(enum2Str(NoYes::No)));
        comparisonbooleanMap.insert('1', SysComputedColumn::returnLiteral(enum2Str(NoYes::Yes)));

        // Currency
        decimalConversion = SysComputedColumn::cast(
                        SysComputedColumn::returnField(
                            tableStr(RetailTmpCatBulkAttribView),
                            identifierStr(RetailTmpCatBulkAttrib),
                            fieldStr(RetailTmpCatBulkAttrib, CurrencyValue)),
                            floatDataType);
        expression = SysComputedColumn::cast(decimalConversion, targetDataType);
        comparisonExpressionMap.insert(int2str(dictEnum.name2Value('Currency')), expression);

        // Datetime
        // Any date time format is fine which captures time in it, currecntly using 20
        expression = ' Convert (' + targetDataType + ' , ' + SysComputedColumn::returnField(tableStr(RetailTmpCatBulkAttribView),
                                                identifierStr(RetailTmpCatBulkAttrib),
                                                fieldStr(RetailTmpCatBulkAttrib, DateTimeValue)) + ' , 20) ';
        comparisonExpressionMap.insert(int2str(dictEnum.name2Value('DateTime')), expression);

        // Decimal
        decimalConversion = SysComputedColumn::cast(
                        SysComputedColumn::returnField(
                            tableStr(RetailTmpCatBulkAttribView),
                            identifierStr(RetailTmpCatBulkAttrib),
                            fieldStr(RetailTmpCatBulkAttrib, FloatValue)),
                            floatDataType);

        expression = SysComputedColumn::cast(decimalConversion, targetDataType);
        comparisonExpressionMap.insert(int2str(dictEnum.name2Value('Decimal')), expression);

        // Integer
        expression = SysComputedColumn::cast(
                        SysComputedColumn::returnField(
                            tableStr(RetailTmpCatBulkAttribView),
                            identifierStr(RetailTmpCatBulkAttrib),
                            fieldStr(RetailTmpCatBulkAttrib, IntValue)),
                        targetDataType);
        comparisonExpressionMap.insert(int2str(dictEnum.name2Value('Integer')), expression);

        // Boolean
        booleanCondition = SysComputedColumn::switch(
                              SysComputedColumn::returnField(
                                  tableStr(RetailTmpCatBulkAttribView),
                                  identifierStr(RetailTmpCatBulkAttrib),
                                  fieldStr(RetailTmpCatBulkAttrib, BooleanValue)),
                              comparisonbooleanMap,
                              SysComputedColumn::returnLiteral(''));
        expression = SysComputedColumn::cast(booleanCondition, targetDataType);
        comparisonExpressionMap.insert(int2str(dictEnum.name2Value('Boolean')), expression);

        return SysComputedColumn::switch(
                    SysComputedColumn::returnField(
                        tableStr(RetailTmpCatBulkAttribView),
                        identifierStr(EcoResAttributeType),
                        fieldStr(EcoResAttributeType, DataType)),
                    comparisonExpressionMap,
                    SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@REX4161238</DeveloperDocumentation>
	<Label>@REX4161239</Label>
	<TitleField1>TmpCatBulkAttrib</TitleField1>
	<TitleField2>Value</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TmpCatBulkAttrib</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TmpCatBulkAttrib</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Value</Name>
			<ExtendedDataType>AttributeValueText</ExtendedDataType>
			<ViewMethod>Value</ViewMethod>
			<StringSize>1999</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TmpCatBulkAttrib</Name>
			<DataField>RecId</DataField>
			<DataSource>RetailTmpCatBulkAttrib</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Catalog</Name>
			<DataField>Catalog</DataField>
			<DataSource>RetailTmpCatBulkAttrib</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InternalOrganization</Name>
			<DataField>InternalOrganization</DataField>
			<DataSource>RetailTmpCatBulkAttrib</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailTmpCatBulkAttrib</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailTmpCatBulkAttrib</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeType</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResAttributeType</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>DataType</Name>
								<Field>DataType</Field>
								<Value>!Text</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<FetchMode>OneToN</FetchMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>AttributeType</Name>
								<Field>AttributeType</Field>
								<JoinDataSource>RetailTmpCatBulkAttrib</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>