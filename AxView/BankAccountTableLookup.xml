<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountTableLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankAccountTableLookup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified bank account is active or in-active status.
    /// </summary>
    /// <param name="_bankAccount">
    /// The company bank account for which status should be checked.
    /// </param>
    /// <param name="_comparisonDate">
    /// The transaction date.
    /// </param>
    /// <param name="_company">
    /// The company for which transaction is performed.
    /// </param>
    /// <returns>
    /// true if the bank account is active; otherwise, false.
    /// </returns>
    public static boolean checkIsActive(
        CompanyBankAccount _bankAccount,
        TransDate _comparisonDate = DateTimeUtil::date(DateTimeUtil::utcNow()),
        CompanyId _company = curext())
    {
        BankAccountTableLookup bankAccountTableLookup;
        boolean isActive;

        bankAccountTableLookup = BankAccountTableLookup::findByCompany(_company, _bankAccount);

        if (bankAccountTableLookup)
        {
            switch (bankAccountTableLookup.BankAccountStatus)
            {
                case BankAccountHoldStatus::ActiveForAllTransactions:
                    isActive = BankAccountTableLookup::isActive(_bankAccount, _comparisonDate, _company);
                    break;

                case BankAccountHoldStatus::InactiveForAllTransactions:
                case BankAccountHoldStatus::InactiveForNewTransactions:
                    isActive = false;
                    break;
            }

            if (!isActive)
            {
                isActive = checkFailed(strFmt("@SYS300182", _bankAccount));
            }
        }
        else
        {
            isActive = checkFailed(strFmt("@SYS330367", _bankAccount));
        }

        return isActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankAccountTableLookup</c> view.
    /// </summary>
    /// <param name="_companyBankAccountId">
    ///    The account ID of the bank account.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankAccountTableLookup</c> view; otherwise, an empty record.
    /// </returns>
    public static BankAccountTableLookup find(CompanyBankAccountId _companyBankAccountId)
    {
        BankAccountTableLookup bankAccountTableLookup;

        select firstonly bankAccountTableLookup
            where bankAccountTableLookup.AccountID == _companyBankAccountId;

        return bankAccountTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankAccountTableLookup</c> view.
    /// </summary>
    /// <param name="_company">
    ///    The company of the bank account.
    /// </param>
    /// <param name="_accountId">
    ///    The account ID of the bank account.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankAccountTableLookup</c> view; otherwise, an empty record.
    /// </returns>
    public static BankAccountTableLookup findByCompany(DataAreaId _company, CompanyBankAccountId _accountId)
    {
        BankAccountTableLookup bankAccount;

        changecompany(_company)
        {
            bankAccount = BankAccountTableLookup::find(_accountId);
        }

        return bankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BankAccountTableLookup</c> view.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The <c>LedgerDimensionAccount</c> of the bank account.
    /// </param>
    /// <returns>
    /// A record in the <c>BankAccountTableLookup</c> view; otherwise, an empty record.
    /// </returns>
    public static BankAccountTableLookup findByLedgerDimension(LedgerDimensionAccount _ledgerDimension)
    {
        BankAccountTableLookup bankAccountTableLookup;
        DimensionAttributeValueCombination ledgerDimension;

        select firstonly bankAccountTableLookup
            join RecId from ledgerDimension
                where ledgerDimension.DisplayValue == bankAccountTableLookup.AccountID
                    && ledgerDimension.RecId == _ledgerDimension;

        return bankAccountTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified transaction date is in the period that is specified by the
    /// <c>ActiveFrom</c> and <c>ActiveTo</c> fields.
    /// </summary>
    /// <param name="_bankAccount">
    /// The company bank account for which dates should be checked.
    /// </param>
    /// <param name="_comparisonDate">
    /// The transaction date.
    /// </param>
    /// <param name="_company">
    /// The company for which transaction is performed.
    /// </param>
    /// <returns>
    /// true if the transaction date falls in between the <c>ActiveFrom</c> and the <c>ActiveTo</c> dates
    /// field; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Dates in the <c>ActiveFrom</c> and the <c>ActiveTo</c> fields are inclusive.
    /// </remarks>
    public static boolean isActive(
        CompanyBankAccount _bankAccount,
        TransDate _comparisonDate = DateTimeUtil::date(DateTimeUtil::utcNow()),
        CompanyId _company = curext())
    {
        TransDate activeFromDate;
        TransDate activeToDate;
        TransDate dateNull;
        BankAccountTableLookup bankAccountTableLookup;
        boolean isActive;

        bankAccountTableLookup = BankAccountTableLookup::findByCompany(_company, _bankAccount);
        dateNull = DateTimeUtil::date(Global::utcDateTimeNull());
        activeFromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(bankAccountTableLookup.ActiveFrom, DateTimeUtil::getUserPreferredTimeZone()));
        activeToDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(bankAccountTableLookup.ActiveTo, DateTimeUtil::getUserPreferredTimeZone()));

        if (bankAccountTableLookup.BankAccountStatus == BankAccountHoldStatus::ActiveForAllTransactions)
        {
            if (activeFromDate == dateNull
                && activeToDate ==  dateNull)
            {
                isActive = true;
            }

            else if (activeFromDate == dateNull
                && _comparisonDate <= activeToDate)
            {
                isActive = true;
            }

            else if (activeToDate == dateNull
                && _comparisonDate >= activeFromDate)
            {
                isActive = true;
            }

            else if (_comparisonDate >= activeFromDate
                && _comparisonDate <= activeToDate)
            {
                isActive = true;
            }
        }

        return isActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveForAllTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BankAccountHoldStatus</c> status has the <c>InactiveForAllTransactions</c> enumeration value.
    /// </summary>
    /// <param name="_bankAccount">
    /// The company bank account.
    /// </param>
    /// <param name="_dataAreaId">
    /// The <c>DataAreaId</c> of the company.
    /// </param>
    /// <returns>
    /// true if the <c>BankAccountHoldStatus</c> status has the <c>ActiveForAllTransactions</c> or <c>InactiveForNewTransactions</c> enumeration value; otherwise, false.
    /// </returns>
    public static boolean isActiveForAllTransactions(CompanyBankAccount _bankAccount, DataAreaId _dataAreaId = curext())
    {
        BankAccountTableLookup bankAccountTableLookup;
        boolean isActive = true;

        bankAccountTableLookup = BankAccountTableLookup::findByCompany(_dataAreaId, _bankAccount);

        if (bankAccountTableLookup)
        {
            if (bankAccountTableLookup.BankAccountStatus == BankAccountHoldStatus::InactiveForAllTransactions)
            {
                isActive = false;
            }
        }

        return isActive;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@SYS329109</DeveloperDocumentation>
	<Label>@SYS21829</Label>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>Name</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountID</Name>
			<DataField>AccountID</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankAccountStatus</Name>
			<DataField>BankAccountStatus</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankAccountTableRecId</Name>
			<Label>@SYS330374</Label>
			<DataField>RecId</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActiveFrom</Name>
			<DataField>ActiveFrom</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActiveTo</Name>
			<DataField>ActiveTo</DataField>
			<DataSource>BankAccountTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankAccountTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankAccountTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>