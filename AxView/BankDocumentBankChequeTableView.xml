<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentBankChequeTableView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentBankChequeTableView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankCurrencyAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the bank currency amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str bankCurrencyAmountSQL()
    {
        return SysComputedColumn::negative(
            SysComputedColumn::returnField(
                tableStr(BankDocumentBankChequeTableView),
                identifierStr(BankChequeTable),
                fieldStr(BankChequeTable, BankCurrencyAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymIdSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the paym Id.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str paymIdSQL()
    {
        str paymId = SysComputedColumn::returnField(
            tableStr(BankDocumentBankChequeTableView),
            identifierStr(LedgerJournalTrans),
            fieldStr(LedgerJournalTrans, PaymId));
        return SysComputedColumn::if(
            SysComputedColumn::isNotNullExpression(paymId),
            paymId,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNumSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the document number.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str documentNumSQL()
    {
        str sql;

        sql = @'
                SELECT LTRIM(BCT.CHEQUENUM)
                FROM BANKCHEQUETABLE BCT
                WHERE T2.PARTITION = BCT.PARTITION
                    AND T2.DATAAREAID = BCT.DATAAREAID
                    AND T2.RECID = BCT.RECID 
            ';

        return sql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endToEndIdSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the end to end Id.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str endToEndIdSQL()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCurrencyAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction currency amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str transactionCurrencyAmountSQL()
    {
        return SysComputedColumn::negative(
            SysComputedColumn::returnField(
                tableStr(BankDocumentBankChequeTableView),
                identifierStr(BankChequeTable),
                fieldStr(BankChequeTable, AmountCur)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the debit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str debitAmountSQL()
    {
        return SysComputedColumn::if(
            SysComputedColumn::compareExpressions(
                SysComputedColumn::comparisonField(
                    tableStr(BankDocumentBankChequeTableView),
                    identifierStr(BankChequeTable),
                    fieldStr(BankChequeTable, BankCurrencyAmount)),
                '<',
                SysComputedColumn::returnLiteral(0.00)),
                SysComputedColumn::multiply(
                    SysComputedColumn::returnField(
                        tableStr(BankDocumentBankChequeTableView),
                        identifierStr(BankChequeTable),
                        fieldStr(BankChequeTable, BankCurrencyAmount)),
                        '-1'),
            SysComputedColumn::returnLiteral(0.00));
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the credit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str creditAmountSQL()
    {
        return SysComputedColumn::if(
            SysComputedColumn::compareExpressions(
                SysComputedColumn::comparisonField(
                    tableStr(BankDocumentBankChequeTableView),
                    identifierStr(BankChequeTable),
                    fieldStr(BankChequeTable, BankCurrencyAmount)),
                '>',
                SysComputedColumn::returnLiteral(0.00)),
                SysComputedColumn::multiply(
                    SysComputedColumn::returnField(
                        tableStr(BankDocumentBankChequeTableView),
                        identifierStr(BankChequeTable),
                        fieldStr(BankChequeTable, BankCurrencyAmount)),
                        '1'),
            SysComputedColumn::returnLiteral(0.00));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeBankTransactionType</Name>
				<Source><![CDATA[
    private static str computeBankTransactionType()
    {
        str bankTransTypeField = SysComputedColumn::returnField(
            tablestr(BankDocumentBankChequeTableView),
            identifierStr(LedgerJournalTrans),
            fieldStr(LedgerJournalTrans, BankTransType));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(bankTransTypeField),
            SysComputedColumn::returnLiteral(''),
            bankTransTypeField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeDescription</Name>
				<Source><![CDATA[
    private static str computeDescription()
    {
        str descriptionField = SysComputedColumn::returnField(
            tablestr(BankDocumentBankChequeTableView),
            identifierStr(LedgerJournalTrans),
            fieldStr(LedgerJournalTrans, Txt));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(descriptionField),
            SysComputedColumn::returnLiteral(''),
            descriptionField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeReference</Name>
				<Source><![CDATA[
    private static str computeReference()
    {
        str referenceField = SysComputedColumn::returnField(
            tablestr(BankDocumentBankChequeTableView),
            identifierStr(LedgerJournalTrans),
            fieldStr(LedgerJournalTrans, PaymReference));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(referenceField),
            SysComputedColumn::returnLiteral(''),
            referenceField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computePosted</Name>
				<Source><![CDATA[
    private static str computePosted()
    {
        str postedField = SysComputedColumn::returnField(
            tablestr(BankDocumentBankChequeTableView),
            identifierStr(LedgerJournalTable),
            fieldStr(LedgerJournalTable, Posted));

        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(postedField),
            SysComputedColumn::returnLiteral(NoYes::No),
            postedField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeDocumentDate</Name>
				<Source><![CDATA[
    private static str computeDocumentDate()
    {
        return SysComputedColumn::returnField(
            tablestr(BankDocumentBankChequeTableView),
            identifierStr(BankChequeTable),
            fieldStr(BankChequeTable, TransDate));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221754</DeveloperDocumentation>
	<Label>@GLS221753</Label>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>DocumentDate</TitleField2>
	<Query>BankDocumentCheque</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReconciled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountID</Name>
			<DataField>AccountID</DataField>
			<DataSource>BankChequeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentType</Name>
			<DataField>BankDocumentBookType</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>DocumentNum</Name>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
			<ViewMethod>documentNumSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>DocumentDate</Name>
			<ViewMethod>computeDocumentDate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Description</Name>
			<ExtendedDataType>LedgerJournalTransTxt</ExtendedDataType>
			<ViewMethod>computeDescription</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Reference</Name>
			<ExtendedDataType>PaymReference</ExtendedDataType>
			<ViewMethod>computeReference</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>Posted</Name>
			<ExtendedDataType>JournalPosted</ExtendedDataType>
			<ViewMethod>computePosted</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Cancelled</Name>
			<DataField>IsCancelled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsReconciled</Name>
			<DataField>IsReconciled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRecId</Name>
			<DataField>SourceRecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRelationType</Name>
			<DataField>SourceRelationType</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>BankTransType</Name>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
			<ViewMethod>computeBankTransactionType</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BankCurrencyAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>bankCurrencyAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>PaymId</Name>
			<ExtendedDataType>PaymId</ExtendedDataType>
			<ViewMethod>paymIdSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EndToEndId</Name>
			<ExtendedDataType>PaymentEndToEndId</ExtendedDataType>
			<ViewMethod>endToEndIdSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>BankChequeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CorrectionBankCurrencyAmount</Name>
			<DataField>CorrectionBankCurrencyAmount</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrency</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>BankChequeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>transactionCurrencyAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DebitAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>debitAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CreditAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>creditAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankDocumentTableRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>