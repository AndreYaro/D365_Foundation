<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransactionSummaryView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetTransactionSummaryView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computeColumnAcquisitionAmount</Name>
				<Source><![CDATA[
    private static str computeColumnAcquisitionAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getAcquisitionTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountMST)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnAcquisitionReportingAmount</Name>
				<Source><![CDATA[
    private static str computeColumnAcquisitionReportingAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getAcquisitionTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, ReportingCurrencyAmount)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnAcquisitionSystemAmount</Name>
				<Source><![CDATA[
    private static str computeColumnAcquisitionSystemAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getAcquisitionTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                LedgerBIHelpers::calculateAnalysisCurrencyAmount(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountCur),
                    fieldStr(AssetTrans, CurrencyCode)),
                SysComputedColumn::returnLiteral(0)
        );

    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDepreciationAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDepreciationAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDepreciationTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountMST)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDepreciationReportingAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDepreciationReportingAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDepreciationTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, ReportingCurrencyAmount)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDepreciationSystemAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDepreciationSystemAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDepreciationTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                LedgerBIHelpers::calculateAnalysisCurrencyAmount(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountCur),
                    fieldStr(AssetTrans, CurrencyCode)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDisposalAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDisposalAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDisposalTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountMST)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDisposalReportingAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDisposalReportingAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDisposalTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, ReportingCurrencyAmount)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnDisposalSystemAmount</Name>
				<Source><![CDATA[
    private static str computeColumnDisposalSystemAmount()
    {
        TableName viewName = tableStr(AssetTransactionSummaryView);
        List transTypeList = new List(Types::String);

        transTypeList = AssetTransactionSummaryView::getDisposalTransactionMatchTypes(
            viewName, tableStr(AssetTrans), fieldStr(AssetTrans, TransType));

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                LedgerBIHelpers::calculateAnalysisCurrencyAmount(
                    viewName,
                    tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountCur),
                    fieldStr(AssetTrans, CurrencyCode)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnSystemCurrencyAmount</Name>
				<Source><![CDATA[
    private static str computeColumnSystemCurrencyAmount()
    {
        return LedgerBIHelpers::calculateAnalysisCurrencyAmount(
            tableStr(AssetTransactionSummaryView),
            tableStr(AssetTrans),
                    fieldStr(AssetTrans, AmountCur),
                    fieldStr(AssetTrans, CurrencyCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionMatchSystemCurrency</Name>
				<Source><![CDATA[
    private static List getTransactionMatchSystemCurrency(
        Name _viewName,
        Name _dataSourceName,
        Name _transactionCurrencyCodeFieldName)
    {
        List transactionMatchSystemCurrency = new List(Types::String);

        transactionMatchSystemCurrency.addEnd(SysComputedColumn::equalExpression(
            SysComputedColumn::comparisonField(
                _viewName,
                _dataSourceName,
                _transactionCurrencyCodeFieldName
            ),
            SysComputedColumn::comparisonField(
                _viewName,
                tablestr(SystemParameters),
                fieldStr(SystemParameters, SystemCurrencyCode)))
        );

        return transactionMatchSystemCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionTransactionMatchTypes</Name>
				<Source><![CDATA[
    private static List getAcquisitionTransactionMatchTypes(
        Name _viewName,
        Name _dataSourceName,
        Name _transactionTypeFieldName)
    {
        List transTypeList = new List(Types::String);

        str compareClause = SysComputedColumn::comparisonField(
            _viewName,
            _dataSourceName,
            _transactionTypeFieldName);

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::Acquisition)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::AcquisitionAdj)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::CapitalReserve)))
        );

        return transTypeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationTransactionMatchTypes</Name>
				<Source><![CDATA[
    private static List getDepreciationTransactionMatchTypes(
        Name _viewName,
        Name _dataSourceName,
        Name _transactionTypeFieldName)
    {
        List transTypeList = new List(Types::String);

        str compareClause = SysComputedColumn::comparisonField(
            _viewName,
            _dataSourceName,
            _transactionTypeFieldName);

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::Depreciation)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::DepreciationAdj)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::ExtraordinaryDepreciation)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::BonusDepreciation)))
        );

        return transTypeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisposalTransactionMatchTypes</Name>
				<Source><![CDATA[
    private static List getDisposalTransactionMatchTypes(
        Name _viewName,
        Name _dataSourceName,
        Name _transactionTypeFieldName)
    {
        List transTypeList = new List(Types::String);

        str compareClause = SysComputedColumn::comparisonField(
            _viewName,
            _dataSourceName,
            _transactionTypeFieldName);

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::DisposalSale)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(AssetTransType::DisposalScrap)))
        );

        return transTypeList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AssetGroup</Name>
			<DataField>AssetGroup</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AssetId</Name>
			<DataField>AssetId</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BookId</Name>
			<DataField>BookId</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransType</Name>
			<DataField>TransType</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrencyAmount</Name>
			<DataField>AmountCur</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>SystemCurrencyAmount</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnSystemCurrencyAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingCurrencyAmount</Name>
			<DataField>AmountMST</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReportingCurrencyAmount</Name>
			<DataField>ReportingCurrencyAmount</DataField>
			<DataSource>AssetTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AcquisitionAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnAcquisitionAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AcquisitionSystemAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnAcquisitionSystemAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AcquisitionReportingAmounts</Name>
			<ExtendedDataType>AssetAmountReportingCurrency</ExtendedDataType>
			<ViewMethod>computeColumnAcquisitionReportingAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DepreciationAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnDepreciationAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DepreciationSystemAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnDepreciationSystemAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DepreciationReportingAmounts</Name>
			<ExtendedDataType>AssetAmountReportingCurrency</ExtendedDataType>
			<ViewMethod>computeColumnDepreciationReportingAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DisposalAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnDisposalAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DisposalSystemAmounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnDisposalSystemAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DisposalReportingAmounts</Name>
			<ExtendedDataType>AssetAmountReportingCurrency</ExtendedDataType>
			<ViewMethod>computeColumnDisposalReportingAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingCurrency</Name>
			<DataField>AccountingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReportingCurrency</Name>
			<DataField>ReportingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>AssetTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>AssetTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SystemParameters</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>SystemParameters</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ExchangeRateEffectiveView</Name>
								<DynamicFields>Yes</DynamicFields>
								<FirstOnly>Yes</FirstOnly>
								<Table>ExchangeRateEffectiveView</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>ValidFrom</Name>
										<Field>ValidFrom</Field>
										<Status>Locked</Status>
										<Value>(AssetTrans.TransDate &gt;= ExchangeRateEffectiveView.ValidFrom)</Value>
									</AxQuerySimpleDataSourceRange>
									<AxQuerySimpleDataSourceRange>
										<Name>ValidTo</Name>
										<Field>ValidTo</Field>
										<Status>Locked</Status>
										<Value>(AssetTrans.TransDate &lt;= ExchangeRateEffectiveView.ValidTo)</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>CurrencyCode</Name>
										<Field>CurrencyCode</Field>
										<JoinDataSource>AssetTrans</JoinDataSource>
										<RelatedField>FromCurrencyCode</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>AccountingCurrency</Name>
										<Field>SystemCurrencyCode</Field>
										<JoinDataSource>SystemParameters</JoinDataSource>
										<RelatedField>ToCurrencyCode</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>DefaultExchangeRateType</Name>
										<Field>SystemExchangeRateType</Field>
										<JoinDataSource>SystemParameters</JoinDataSource>
										<RelatedField>ExchangeRateType</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LedgerPartition</Name>
								<Field>Partition</Field>
								<JoinDataSource>AssetTrans</JoinDataSource>
								<RelatedField>Partition</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CompanyInfo</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Ledger</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>Ledger</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CompanyInfo</JoinDataSource>
										<RelatedField>PrimaryForLegalEntity</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>AssetTrans</JoinDataSource>
								<RelatedField>DataArea</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>