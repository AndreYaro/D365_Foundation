<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostRealizedWithLeanView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostRealizedWithLeanView</c> view shows all estimated cost calculations from <c>ProdCalcTrans</c> table
/// in a manner suitable for comparing them with costs from other sources.
/// </summary>
public class CostRealizedWithLeanView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the cost amount.
    /// </summary>
    /// <returns>
    /// A string to compute the cost.
    /// </returns>
    /// <remarks>
    /// Calculation follows the logic from <c>ProdCalcTrans.realCostAmountTotal()</c>
    /// </remarks>
    public static str cost()
    {
        TableName       viewName = tableStr(CostRealizedWithLeanView);

        return SysComputedColumn::add(
                SysComputedColumn::returnField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAmount)),
                SysComputedColumn::returnField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealCostAdjustment)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costRollupSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the cost rollup source Id.
    /// </summary>
    /// <returns>
    /// A string to compute the cost rollup source Id.
    /// </returns>
    public static str costRollupSourceId()
    {
        TableName viewName = tableStr(CostRealizedWithLeanView);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, TransRefType)),
                        SysComputedColumn::comparisonliteral(ProdTransRefType::BackflushCosting)),
                    SysComputedColumn::cast(SysComputedColumn::returnField(viewName, identifierStr(LeanProductionFlowCosting), fieldStr(LeanProductionFlowCosting, LeanProductionFlowReference)), 'nvarchar'),
                    SysComputedColumn::returnField(viewName, identifierStr(ProdTable), fieldStr(ProdTable, ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>date</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the date.
    /// </summary>
    /// <returns>
    /// A string to compute the date.
    /// </returns>
    public static str date()
    {
        TableName viewName = tableStr(CostRealizedWithLeanView);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, TransRefType)),
                        SysComputedColumn::comparisonliteral(ProdTransRefType::BackflushCosting)),
                    SysComputedColumn::returnField(viewName, identifierStr(LeanProductionFlowCosting), fieldStr(LeanCostingView, ToDate)),
                    SysComputedColumn::returnField(viewName, identifierStr(ProdTable), fieldStr(ProdTable, RealDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the process Id.
    /// </summary>
    /// <returns>
    /// A string to compute the process Id.
    /// </returns>
    public static str processId()
    {
        TableName viewName = tableStr(CostRealizedWithLeanView);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, TransRefType)),
                        SysComputedColumn::comparisonliteral(ProdTransRefType::BackflushCosting)),
                    SysComputedColumn::cast(SysComputedColumn::returnField(viewName, identifierStr(LeanProductionFlowCosting), fieldStr(LeanProductionFlowCosting, LeanProductionFlowReference)), 'nvarchar'),
                    SysComputedColumn::returnField(viewName, identifierStr(ProdTable), fieldStr(ProdTable, ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the quantity.
    /// </summary>
    /// <returns>
    /// A string to compute the quantity.
    /// </returns>
    /// <remarks>
    /// Calculation is similar to the method ProdCalcTrans.realConsumptionTotal()
    /// </remarks>
    public static str quantity()
    {
        TableName       viewName = tableStr(CostRealizedWithLeanView);

        return SysComputedColumn::add(SysComputedColumn::returnField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealConsump)),
                                      SysComputedColumn::returnField(viewName, identifierStr(ProdCalcTrans), fieldStr(ProdCalcTrans, RealQty)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>role</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the role.
    /// </summary>
    /// <returns>
    /// A string to compute the role.
    /// </returns>
    public static str role()
    {
        return SysComputedColumn::returnLiteral(CostCalculationRole::RealizedCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>state</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the state.
    /// </summary>
    /// <returns>
    /// A string to compute the state.
    /// </returns>
    public static str state()
    {
        return SysComputedColumn::returnLiteral(CostCalculationState::Realized);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Query>CostRealizedWithLeanQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostGroupType</Name>
			<DataField>CostGroupType</DataField>
			<DataSource>BomCostGroup</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostGroupId</Name>
			<DataField>CostGroupId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>UnitId</Name>
			<DataField>UnitId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Cost</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<ViewMethod>cost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Quantity</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<ViewMethod>quantity</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Role</Name>
			<ViewMethod>role</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>ProcessId</Name>
			<ConfigurationKey>LeanManufacturing</ConfigurationKey>
			<ViewMethod>processId</ViewMethod>
			<StringSize>35</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Level</Name>
			<DataField>CollectRefLevel</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>State</Name>
			<ViewMethod>state</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CostRollupSourceId</Name>
			<ConfigurationKey>LeanManufacturing</ConfigurationKey>
			<ViewMethod>costRollupSourceId</ViewMethod>
			<StringSize>35</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceInventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>date</Name>
			<ConfigurationKey>LeanManufacturing</ConfigurationKey>
			<ViewMethod>date</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsSplit</Name>
			<DataField>BOM</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Type</Name>
			<DataField>CalcType</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProcessType</Name>
			<DataField>TransRefType</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LotSize</Name>
			<DataField>RealQty</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostRollupId</Name>
			<DataField>TransRefId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProcessOccurrence</Name>
			<DataField>CollectRefProdId</DataField>
			<DataSource>ProdCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>