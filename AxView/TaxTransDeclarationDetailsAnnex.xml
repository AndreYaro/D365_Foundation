<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDeclarationDetailsAnnex</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxTransDeclarationDetailsAnnex extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>invoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invoice number found in cust/vend/ledger transaction.
    /// </summary>
    /// <returns>A calculated field expression; the invoice number.</returns>
    private static str invoice()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        //cust or proj invoice
        str custInvoiceNumField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, InvoiceId));
        str custTransInvoiceNumField_Tax = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Invoice));
        str custTransInvoiceNumField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceNumField, Types::String), custInvoiceNumField]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceNumField_Tax, Types::String), custTransInvoiceNumField_Tax]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceNumField_LedgerJournalTrans, Types::String), custTransInvoiceNumField_LedgerJournalTrans]);

        //vend invoice
        str vendInvoiceNumField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, InvoiceId));
        str vendTransInvoiceNumField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceNumField, Types::String), vendInvoiceNumField]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceNumField, Types::String), vendTransInvoiceNumField]);

        //ledger invoice
        str ledgerTransInvoiceNumField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, Invoice));
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(ledgerTransInvoiceNumField, Types::String), ledgerTransInvoiceNumField]);

        //tax trans
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            str taxTransInvoiceNumField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, InvoiceId));
            comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(taxTransInvoiceNumField, Types::String), taxTransInvoiceNumField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, TaxTransDeclarationViewHelper::settledInvoice(viewName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceConditionalTax</Name>
				<Source><![CDATA[
    private static str settledInvoiceConditionalTax()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        str taxTransTaxOriginField = SysComputedColumn::comparisonField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxOrigin));
        str sourceTableIdField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, SourceTableId));

        List expListAND = SysComputedColumn::comparisionExpressionList();
        expListAND.addEnd(SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(TaxOrigin::Payment)));
        expListAND.addEnd(SysComputedColumn::or2(
            SysComputedColumn::equalExpression(sourceTableIdField, SysComputedColumn::comparisonLiteral(tableNum(CustTrans))),
            SysComputedColumn::equalExpression(sourceTableIdField, SysComputedColumn::comparisonLiteral(tableNum(VendTrans)))));

        return SysComputedColumn::if(SysComputedColumn::and(expListAND), TaxTransDeclarationViewHelper::settledInvoice(viewName), SysComputedColumn::comparisonLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the invoice date.
    /// </summary>
    /// <returns>A calculated field expression; the invoice date.</returns>
    private static str invoiceDate()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        //cust invoice
        str custInvoiceDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, InvoiceDate));
        str custTransDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, TransDate));
        str custInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Invoice));
        str custTransDateField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, TransDate));
        str custInvoiceField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDateField, Types::Date), custInvoiceDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custTransDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceField, Types::String)),
            custTransDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custTransDateField_LedgerJournalTrans, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceField_LedgerJournalTrans, Types::String)),
            custTransDateField_LedgerJournalTrans]);

        //vend invoice
        str vendInvoiceDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, InvoiceDate));
        str vendTransDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, TransDate));
        str vendInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDateField, Types::Date), vendInvoiceDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceField, Types::String)),
            vendTransDateField]);

        //ledger invoice
        str ledgerJourTransDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, TransDate));
        str ledgerJourInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, Invoice));
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourInvoiceField, Types::String)),
            ledgerJourTransDateField]);

        //proj invoice
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSProjInvoiceJour, fieldStr(ProjInvoiceJour, InvoiceDate));
            comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField, Types::Date), projInvoiceDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, TaxTransDeclarationViewHelper::settledInvoiceInvoiceDate(viewName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the document number found in cust/vend/ledger transaction or in a linked document.
    /// </summary>
    /// <returns>A calculated field expression; the document number.</returns>
    private static str documentNum()
    {
        return TaxTransDeclarationViewHelper::documentNum(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the document date.
    /// </summary>
    /// <returns>A calculated field expression; the document date.</returns>
    private static str documentDate()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, DocumentDate));
        str vendInvoiceDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, DocumentDate));
        str custTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, DocumentDate));
        str vendTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, DocumentDate));
        str custTransDocDateField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, DocumentDate));
        str ledgerJourTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, DocumentDate));
        str emptyDateLiteral = SysComputedColumn::comparisonLiteral(dateNull());

        //cust or proj invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField, Types::Date),
            custTransDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocDateField, Types::Date),
            custInvoiceDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField_LedgerJournalTrans, Types::Date),
            custTransDocDateField_LedgerJournalTrans]);

        //vend invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocDateField, Types::Date),
            vendTransDocDateField]);
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDocDateField, Types::Date),
            vendInvoiceDocDateField]);

        //ledger invoice
        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField, Types::Date),
            ledgerJourTransDocDateField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderDateField = SysComputedColumn::returnField(viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, TransDate));
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField, Types::Date),
                transferOrderDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, emptyDateLiteral);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the Document date if the invoice number is not blank.
    /// </summary>
    /// <returns>A calculated field expression; the Document date, if the invoice number is not empty, otherwise, settled invoice Document date.</returns>
    private static str invoiceDocumentDate()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        //cust or proj invoice
        str custInvoiceDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, DocumentDate));
        str custTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, DocumentDate));
        str custTransInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Invoice));
        str custTransDocDateField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, DocumentDate));
        str custTransInvoiceField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDocDateField, Types::Date), custInvoiceDocDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField, Types::String)),
            custTransDocDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custTransDocDateField_LedgerJournalTrans, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(custTransInvoiceField_LedgerJournalTrans, Types::String)),
            custTransDocDateField_LedgerJournalTrans]);

        //vend invoice
        str vendInvoiceDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, DocumentDate));
        str vendTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, DocumentDate));
        str vendTransInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDocDateField, Types::Date), vendInvoiceDocDateField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(vendTransDocDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(vendTransInvoiceField, Types::String)),
            vendTransDocDateField]);

        //ledger invoice
        str ledgerJourTransDocDateField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, DocumentDate));
        str ledgerJourTransInvoiceField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, Invoice));
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransDocDateField, Types::Date), ViewComputedColumnUtil::isNotEmptyOrNull(ledgerJourTransInvoiceField, Types::String)),
            ledgerJourTransDocDateField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders)))
        {
            str transferOrderDateField = SysComputedColumn::returnField(viewName, identifierStr(InventTransferJour), fieldStr(InventTransferJour, TransDate));
            comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(transferOrderDateField, Types::Date), transferOrderDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, TaxTransDeclarationViewHelper::settledInvoiceDocumentDate(viewName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterpartyParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates counterparty record id from DirParty table.
    /// </summary>
    /// <returns>A calculated field expression; party record id</returns>
    private static str counterpartyParty()
    {
        return TaxTransDeclarationViewHelper::counterpartyParty(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>counterpartyVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes VAT number from customer or vendor card.
    /// </summary>
    /// <returns>A calculated field expression; the VAT number.</returns>
    private static str counterpartyVATNum()
    {
        return TaxTransDeclarationViewHelper::counterpartyVATNum(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTaxRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches registration num from document.
    /// </summary>
    /// <returns>A calculated field expression; the tax registration number.</returns>
    private static str documentTaxRegistrationNum()
    {
        return TaxTransDeclarationViewHelper::documentTaxRegistrationNum(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingClassifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the reporting classifier.
    /// </summary>
    /// <returns>A calculated field expression; the reporting classifier.</returns>
    private static str reportingClassifier()
    {
        return TaxTransDeclarationViewHelper::reportingClassifier(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the tax amounts sign due to the tax direction.
    /// </summary>
    /// <returns>A calculated field expression; the tax amounts sign.</returns>
    private static str taxAmountSign()
    {
        return TaxTransDeclarationViewHelper::taxAmountSign(tableStr(TaxTransDeclarationDetailsAnnex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurch</Name>
				<Source><![CDATA[
    private static str salesPurch()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        str vendRecIdField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, RecId));
        str custRecIdField_Source = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Source, fieldStr(CustTrans, RecId));
        str custRecIdField_Tax = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, RecId));
        str custRecIdField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, RecId));
        str custRecIdField_CustInvoiceJour = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, RecId));
        str vendRecIdField_VendInvoiceJour = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, RecId));

        List comparisonExpressionList = new List(Types::Container);

        // Purch
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendRecIdField_VendInvoiceJour, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Purch))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendRecIdField, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Purch))]);

        // Sales
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custRecIdField_CustInvoiceJour, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Sales))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custRecIdField_Source, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Sales))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custRecIdField_Tax, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Sales))]);
        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custRecIdField_LedgerJournalTrans, Types::Int64), SysComputedColumn::returnLiteral(enum2int(SalesPurch::Sales))]);

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::returnLiteral(enum2int(SalesPurch::None)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMST</Name>
				<Source><![CDATA[
    private static str invoiceAmountMST()
    {
        const str DSCustTrans_ProjInvoiceJour = 'CustTrans_ProjInvoiceJour';

        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        // cust
        str custInvoiceAmountField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, InvoiceAmountMST));
        str custInvoiceSumTaxField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, SumTaxMST));
        str custInvoiceAmountField_Source = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Source, fieldStr(CustTrans, AmountMST));
        str custInvoiceField_Source = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Source, fieldStr(CustTrans, Invoice));
        str custInvoiceAmountField_Tax = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, AmountMST));
        str custInvoiceField_Tax = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Invoice));
        str custInvoiceAmountField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, AmountMST));
        str custInvoiceField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField, Types::Real), SysComputedColumn::subtract(custInvoiceAmountField, custInvoiceSumTaxField)]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField_Source, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceField_Source, Types::String)),
            custInvoiceAmountField_Source]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField_Tax, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceField_Tax, Types::String)),
            custInvoiceAmountField_Tax]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField_LedgerJournalTrans, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceField_LedgerJournalTrans, Types::String)),
            custInvoiceAmountField_LedgerJournalTrans]);

        // vend
        str vendInvoiceAmountField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, InvoiceAmountMST));
        str vendInvoiceAmountField_VendTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, AmountMST));
        str vendInvoiceField_VendTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Invoice));

        comparisonExpressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceAmountField, Types::Real), vendInvoiceAmountField]);
        comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceAmountField_VendTrans, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceField_VendTrans, Types::String)),
            SysComputedColumn::negative(vendInvoiceAmountField_VendTrans)]);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str custTransProjInvoiceAmountField = SysComputedColumn::returnField(viewName, DSCustTrans_ProjInvoiceJour, fieldStr(CustTrans, AmountMST));
            str custTransProjInvoiceField = SysComputedColumn::returnField(viewName, DSCustTrans_ProjInvoiceJour, fieldStr(CustTrans, Invoice));
            comparisonExpressionList.addEnd([SysComputedColumn::and2(ViewComputedColumnUtil::isNotEmptyOrNull(custTransProjInvoiceAmountField, Types::Real), ViewComputedColumnUtil::isNotEmptyOrNull(custTransProjInvoiceField, Types::String)),
                custTransProjInvoiceAmountField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, TaxTransDeclarationDetailsAnnex::settledInvoiceAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledInvoiceAmountMST</Name>
				<Source><![CDATA[
    private static str settledInvoiceAmountMST()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List comparisonExpressionList = new List(Types::Container);

        str custInvoiceAmountField_SettledCustTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceAmountMST));
        str custInvoiceSumTaxField_SettledCustTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, CustSumTaxMST));

        str custInvoiceAmountField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustInvoiceAmountMST));
        str custInvoiceSumTaxField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, CustSumTaxMST));

        str vendInvoiceAmountField_SettledVendTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, VendInvoiceAmountMST));
        str vendInvoiceAmountField_SettledVendTransPrepayment = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTransPrepayment, fieldStr(TaxTransVoucherDatesView, VendInvoiceAmountMST));

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField_SettledCustTrans, Types::Real),
            SysComputedColumn::subtract(custInvoiceAmountField_SettledCustTrans, custInvoiceSumTaxField_SettledCustTrans)]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceAmountField_SettledCustTrans_LedgerJournalTrans, Types::Real),
            SysComputedColumn::subtract(custInvoiceAmountField_SettledCustTrans_LedgerJournalTrans, custInvoiceSumTaxField_SettledCustTrans_LedgerJournalTrans)]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceAmountField_SettledVendTrans, Types::Real),
            vendInvoiceAmountField_SettledVendTrans]);

        comparisonExpressionList.addEnd([
            ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceAmountField_SettledVendTransPrepayment, Types::Real),
            vendInvoiceAmountField_SettledVendTransPrepayment]);

        //proj invoice
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceAmountField_SettledCustTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceAmountMST));
            str projInvoiceAmountField_SettledCustTrans_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledCustTrans_LedgerJournalTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceAmountMST));
            str projInvoiceAmountField_SettledVendTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_SettledVendTrans, fieldStr(TaxTransVoucherDatesView, ProjInvoiceAmountMST));
                    
            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceAmountField_SettledCustTrans, Types::Real),
                projInvoiceAmountField_SettledCustTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceAmountField_SettledCustTrans_LedgerJournalTrans, Types::Real),
                projInvoiceAmountField_SettledCustTrans_LedgerJournalTrans]);

            comparisonExpressionList.addEnd([
                ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceAmountField_SettledVendTrans, Types::Real),
                projInvoiceAmountField_SettledVendTrans]);
            
        }

        return ViewComputedColumnUtil::switchStrictOrder('', comparisonExpressionList, SysComputedColumn::comparisonLiteral(0.00));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMSTNonCreditNote</Name>
				<Source><![CDATA[
    private static str invoiceAmountMSTNonCreditNote()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(tableStr(TaxTransDeclarationDetailsAnnex), TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote)),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes))),
            SysComputedColumn::comparisonLiteral(0.00),
            TaxTransDeclarationDetailsAnnex::invoiceAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMSTCreditNote</Name>
				<Source><![CDATA[
    private static str invoiceAmountMSTCreditNote()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(tableStr(TaxTransDeclarationDetailsAnnex), TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote)),
                SysComputedColumn::comparisonLiteral(SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes))),
            TaxTransDeclarationDetailsAnnex::invoiceAmountMST(),
            SysComputedColumn::comparisonLiteral(0.00));
    }

]]></Source>
			</Method>
			<Method>
				<Name>justificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the justification type.
    /// </summary>
    /// <returns>A calculated field expression; the justification type.</returns>
    private static str justificationType()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List expressionList = new List(Types::Container);

        str taxTransTaxOriginField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans, fieldStr(TaxTrans, TaxOrigin));
        str documentCreditNoteField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote));
        str custInvoiceJourPrepaymentField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustInvoiceJour, fieldStr(CustInvoiceJour, Prepayment));
        str custTransPrepaymentField_Tax = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Tax, fieldStr(CustTrans, Prepayment));
        str custTransPrepaymentField_Source = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_Source, fieldStr(CustTrans, Prepayment));
        str custTransPrepaymentField_LedgerJournalTrans = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSCustTrans_LedgerJournalTrans, fieldStr(CustTrans, Prepayment));
        str vendInvoicePrepaymentField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendInvoiceJour, fieldStr(VendInvoiceJour, Prepayment));
        str vendTransPrepaymentField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSVendTrans, fieldStr(VendTrans, Prepayment));
        str ledgerJourTransPrepaymentField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSLedgerJournalTrans, fieldStr(LedgerJournalTrans, Prepayment));

        // '6' - Prepayment
        expressionList.addEnd([SysComputedColumn::equalExpression(custInvoiceJourPrepaymentField, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(custTransPrepaymentField_Tax, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(custTransPrepaymentField_Source, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(custTransPrepaymentField_LedgerJournalTrans, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(vendInvoicePrepaymentField, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(vendTransPrepaymentField, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);
        expressionList.addEnd([SysComputedColumn::equalExpression(ledgerJourTransPrepaymentField, SysComputedColumn::comparisonLiteral(NoYes::Yes)), SysComputedColumn::returnLiteral('6')]);

        // '3' - Payment
        expressionList.addEnd([SysComputedColumn::equalExpression(taxTransTaxOriginField, SysComputedColumn::comparisonLiteral(TaxOrigin::Payment)), SysComputedColumn::returnLiteral('3')]);

        // '4' - Credit-note
        expressionList.addEnd([SysComputedColumn::equalExpression(documentCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Yes)), SysComputedColumn::returnLiteral('4')]);

        // '1' - VATInvoice
        return ViewComputedColumnUtil::switchStrictOrder('', expressionList, SysComputedColumn::returnLiteral('1'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceId</Name>
				<Source><![CDATA[
    private static str origInvoiceId()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List expressionList = new List(Types::Container);

        str custInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(OrigCustInvoiceTrans), fieldStr(CustInvoiceTrans, InvoiceId));
        str vendInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(OrigVendInvoiceTrans), fieldStr(VendInvoiceTrans, InvoiceId));

        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceNumField, Types::String), custInvoiceNumField]);
        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceNumField, Types::String), vendInvoiceNumField]);
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(OrigProjInvoiceItem), fieldStr(ProjInvoiceItem, ProjInvoiceId));
            expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceNumField, Types::String), projInvoiceNumField]);
        }

        str isCreditNoteField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote));
        str custCorrectedInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(CustCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceId));
        str vendCorrectedInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(VendCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceId));

        expressionList.addEnd([SysComputedColumn::or2(SysComputedColumn::equalExpression(isCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Unknown)), 
                                                      SysComputedColumn::equalExpression(isCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No))),
                              SysComputedColumn::comparisonLiteral('')]);

        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custCorrectedInvoiceNumField, Types::String), custCorrectedInvoiceNumField]);
        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendCorrectedInvoiceNumField, Types::String), vendCorrectedInvoiceNumField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projCorrectedInvoiceNumField = SysComputedColumn::returnField(viewName, identifierStr(ProjCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceId));
            expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projCorrectedInvoiceNumField, Types::String), projCorrectedInvoiceNumField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', expressionList, SysComputedColumn::comparisonLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceDate</Name>
				<Source><![CDATA[
    private static str origInvoiceDate()
    {
        TableName viewName = tableStr(TaxTransDeclarationDetailsAnnex);
        List expressionList = new List(Types::Container);

        str custInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(OrigCustInvoiceTrans), fieldStr(CustInvoiceTrans, InvoiceDate));
        str vendInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(OrigVendInvoiceTrans), fieldStr(VendInvoiceTrans, InvoiceDate));

        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custInvoiceDateField, Types::Date), custInvoiceDateField]);
        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendInvoiceDateField, Types::Date), vendInvoiceDateField]);
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(OrigProjInvoiceItem), fieldStr(ProjInvoiceItem, InvoiceDate));
            expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projInvoiceDateField, Types::Date), projInvoiceDateField]);
        }

        str isCreditNoteField = SysComputedColumn::returnField(viewName, TaxTransDeclarationDetailsViewConstants::DSTaxTrans_Reporting, fieldStr(TaxTrans_Reporting, IsOriginalDocumentCreditNote));
        str custCorrectedInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(CustCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceDate));
        str vendCorrectedInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(VendCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceDate));

        expressionList.addEnd([SysComputedColumn::or2(SysComputedColumn::equalExpression(isCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::Unknown)),
                                                      SysComputedColumn::equalExpression(isCreditNoteField, SysComputedColumn::comparisonLiteral(UnknownNoYes::No))),
                              SysComputedColumn::comparisonLiteral('')]);

        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(custCorrectedInvoiceDateField, Types::Date), custCorrectedInvoiceDateField]);
        expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(vendCorrectedInvoiceDateField, Types::Date), vendCorrectedInvoiceDateField]);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            str projCorrectedInvoiceDateField = SysComputedColumn::returnField(viewName, identifierStr(ProjCreditInvoicingJour), fieldStr(CustVendCreditInvoicingJour, CustVendCorrectedInvoiceDate));
            expressionList.addEnd([ViewComputedColumnUtil::isNotEmptyOrNull(projCorrectedInvoiceDateField, Types::Date), projCorrectedInvoiceDateField]);
        }

        return ViewComputedColumnUtil::switchStrictOrder('', expressionList, SysComputedColumn::comparisonLiteral(''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@TaxDeclarationDetails:TaxTransDeclarationDetailsDevDoc</DeveloperDocumentation>
	<Label>@TaxDeclarationDetails:TaxDeclarationDetails</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxTransRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxPeriod</Name>
			<DataField>TaxPeriod</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxRepCounter</Name>
			<DataField>TaxRepCounter</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxItemGroup</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>ReportingClassifier</Name>
			<ViewMethod>reportingClassifier</ViewMethod>
			<EnumType>TaxTransReportingClassifier</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VatDueDate_W</Name>
			<DataField>VatDueDate_W</DataField>
			<DataSource>TaxTrans_W</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxDirection</Name>
			<DataField>TaxDirection</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReverseCharge_W</Name>
			<DataField>ReverseCharge_W</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxAmount</Name>
			<DataField>TaxAmount</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxAmountCur</Name>
			<Label>@TaxDeclarationDetails:SalesTaxAmountCurrency</Label>
			<DataField>TaxAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxAmountRep</Name>
			<DataField>TaxAmountRep</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxInCostPrice</Name>
			<DataField>TaxInCostPrice</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxInCostPriceCur</Name>
			<DataField>TaxInCostPriceCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxInCostPriceRep</Name>
			<DataField>TaxInCostPriceRep</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxBaseAmount</Name>
			<Label>@SYS323805</Label>
			<DataField>TaxBaseAmount</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxBaseAmountCur</Name>
			<Label>@TaxDeclarationDetails:TaxBaseCurrency</Label>
			<DataField>TaxBaseAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxBaseAmountRep</Name>
			<DataField>TaxBaseAmountRep</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxRate</Name>
			<DataField>TaxValue</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxExemptPct</Name>
			<DataField>VATExemptPct</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Invoice</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<ViewMethod>invoice</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
			<ViewMethod>invoiceDate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>DocumentTaxRegistrationNum</Name>
			<Label>@TaxDeclarationDetails:TaxRegistrationNumberOnDocument</Label>
			<ExtendedDataType>TaxRegistrationNumber</ExtendedDataType>
			<ViewMethod>documentTaxRegistrationNum</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>CounterpartyParty</Name>
			<Label>@TaxDeclarationDetails:CounterpartyPartyRecordID</Label>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<ViewMethod>counterpartyParty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CounterpartyVATNum</Name>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<ViewMethod>counterpartyVATNum</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxExemptCode</Name>
			<DataField>ExemptCode</DataField>
			<DataSource>TaxExemptCodeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxExemptCodeDescription</Name>
			<Label>@TaxDeclarationDetails:ExemptCodeDescription</Label>
			<DataField>Description</DataField>
			<DataSource>TaxExemptCodeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ExemptTax</Name>
			<DataField>ExemptTax</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRecId</Name>
			<DataField>SourceRecId</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceTableId</Name>
			<DataField>SourceTableId</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceCurrencyCode</Name>
			<DataField>SourceCurrencyCode</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceBaseAmountCur</Name>
			<DataField>SourceBaseAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceBaseAmountCurRegulated</Name>
			<DataField>SourceBaseAmountCurRegulated</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRegulateAmountCur</Name>
			<DataField>SourceRegulateAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceTaxAmountCur</Name>
			<DataField>SourceTaxAmountCur</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxInCostPriceMST</Name>
			<DataField>TaxInCostPriceMST</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Source</Name>
			<DataField>Source</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxOrigin</Name>
			<DataField>TaxOrigin</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>TaxAmountSign</Name>
			<ExtendedDataType>Sign</ExtendedDataType>
			<ViewMethod>taxAmountSign</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>SalesPurch</Name>
			<ViewMethod>salesPurch</ViewMethod>
			<EnumType>SalesPurch</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>InvoiceAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>invoiceAmountMST</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>SettledInvoiceConditionalTax</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<ViewMethod>settledInvoiceConditionalTax</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxID</Name>
			<DataField>TaxID</DataField>
			<DataSource>TaxTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>InvoiceAmountMSTNonCreditNote</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>invoiceAmountMSTNonCreditNote</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>InvoiceAmountMSTCreditNote</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>invoiceAmountMSTCreditNote</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>InvoiceDocumentDate</Name>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<ViewMethod>invoiceDocumentDate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>DocumentNum</Name>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<ViewMethod>documentNum</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<ViewMethod>documentDate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>JustificationType</Name>
			<ViewMethod>justificationType</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>OrigInvoiceId</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<ViewMethod>origInvoiceId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>OrigInvoiceDate</Name>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
			<ViewMethod>origInvoiceDate</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<AllowCrossCompany>Yes</AllowCrossCompany>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>TaxTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>TaxTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxTrans_Reporting</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxTrans_Reporting</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>VendTrans</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>VendTrans</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>VendTable</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>VendTable</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations />
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>VendSettlement</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>VendSettlement</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>VendTrans_SettledInvoice</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>VendTrans</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>TaxTrans_SettledVendTrans</Name>
														<DynamicFields>Yes</DynamicFields>
														<FirstOnly>Yes</FirstOnly>
														<Table>TaxTransVoucherDatesView</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<JoinMode>OuterJoin</JoinMode>
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<Field>Voucher</Field>
																<JoinDataSource>VendTrans_SettledInvoice</JoinDataSource>
																<JoinDerivedTable>VendTrans</JoinDerivedTable>
																<RelatedField>Voucher</RelatedField>
															</AxQuerySimpleDataSourceRelation>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation2</Name>
																<Field>TransDate</Field>
																<JoinDataSource>VendTrans_SettledInvoice</JoinDataSource>
																<JoinDerivedTable>VendTrans</JoinDerivedTable>
																<RelatedField>TransDate</RelatedField>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<DerivedTable>VendTrans</DerivedTable>
														<Field>OffsetRecId</Field>
														<JoinDataSource>VendSettlement</JoinDataSource>
														<JoinDerivedTable>VendSettlement</JoinDerivedTable>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<DerivedTable>VendSettlement</DerivedTable>
												<Field>RecId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<JoinDerivedTable>VendTrans</JoinDerivedTable>
												<RelatedField>TransRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy1</Name>
												<DerivedTable>VendSettlement</DerivedTable>
												<Field>TransDate</Field>
												<JoinDataSource>TaxTrans</JoinDataSource>
												<JoinDerivedTable>TaxTrans</JoinDerivedTable>
												<RelatedField>TransDate</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy2</Name>
												<DerivedTable>VendSettlement</DerivedTable>
												<Field>DataAreaId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<JoinDerivedTable>VendTrans</JoinDerivedTable>
												<RelatedField>TransCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy3</Name>
												<DerivedTable>VendSettlement</DerivedTable>
												<Field>DataAreaId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<JoinDerivedTable>VendTrans</JoinDerivedTable>
												<RelatedField>OffsetCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy3Copy1</Name>
												<DerivedTable>VendSettlement</DerivedTable>
												<Field>Voucher</Field>
												<JoinDataSource>TaxTrans</JoinDataSource>
												<JoinDerivedTable>TaxTrans</JoinDerivedTable>
												<RelatedField>SettlementVoucher</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>VendSettlement_Prepayment</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>VendSettlement</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>VendTrans_Prepayment</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>VendTrans</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>TaxTrans_SettledPrepayment</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>TaxTransVoucherDatesView</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<JoinMode>OuterJoin</JoinMode>
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<Field>Voucher</Field>
																<JoinDataSource>VendTrans_Prepayment</JoinDataSource>
																<RelatedField>Voucher</RelatedField>
															</AxQuerySimpleDataSourceRelation>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation2</Name>
																<Field>TransDate</Field>
																<JoinDataSource>VendTrans_Prepayment</JoinDataSource>
																<RelatedField>TransDate</RelatedField>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>OffsetRecId</Field>
														<JoinDataSource>VendSettlement_Prepayment</JoinDataSource>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges>
											<AxQuerySimpleDataSourceRange>
												<Name>TransType</Name>
												<Field>TransType</Field>
												<Value>33</Value>
											</AxQuerySimpleDataSourceRange>
										</Ranges>
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<RelatedField>TransRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation2</Name>
												<Field>TransDate</Field>
												<JoinDataSource>TaxTrans</JoinDataSource>
												<RelatedField>TransDate</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation3</Name>
												<Field>DataAreaId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<RelatedField>TransCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation4</Name>
												<Field>DataAreaId</Field>
												<JoinDataSource>VendTrans</JoinDataSource>
												<RelatedField>OffsetCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations />
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxTrans_W</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxTrans_W</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>TaxGroupData</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>TaxGroupData</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>TaxExemptCodeTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>TaxExemptCodeTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations />
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>TaxGroupData</DerivedTable>
								<Field>TaxCode</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TaxCode</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>TaxGroupData</DerivedTable>
								<Field>TaxGroup</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TaxGroup</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTrans_LedgerJournalTrans</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustTrans</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>CustSettlement_LedgerJournalTrans</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CustSettlement</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>CustTrans_SettledInvoice_LedgerJournalTrans</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>CustTrans</Table>
												<DataSources>
													<AxQuerySimpleEmbeddedDataSource>
														<Name>TaxTrans_SettledCustTrans_LedgerJournalTrans</Name>
														<DynamicFields>Yes</DynamicFields>
														<FirstOnly>Yes</FirstOnly>
														<Table>TaxTransVoucherDatesView</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
														<JoinMode>OuterJoin</JoinMode>
														<Relations>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation1</Name>
																<Field>Voucher</Field>
																<JoinDataSource>CustTrans_SettledInvoice_LedgerJournalTrans</JoinDataSource>
																<JoinDerivedTable>CustTrans</JoinDerivedTable>
																<RelatedField>Voucher</RelatedField>
															</AxQuerySimpleDataSourceRelation>
															<AxQuerySimpleDataSourceRelation>
																<Name>QueryDataSourceRelation2</Name>
																<Field>TransDate</Field>
																<JoinDataSource>CustTrans_SettledInvoice_LedgerJournalTrans</JoinDataSource>
																<JoinDerivedTable>CustTrans</JoinDerivedTable>
																<RelatedField>TransDate</RelatedField>
															</AxQuerySimpleDataSourceRelation>
														</Relations>
													</AxQuerySimpleEmbeddedDataSource>
												</DataSources>
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<DerivedTable>CustTrans</DerivedTable>
														<Field>OffsetRecId</Field>
														<JoinDataSource>CustSettlement_LedgerJournalTrans</JoinDataSource>
														<JoinDerivedTable>CustSettlement</JoinDerivedTable>
														<RelatedField>RecId</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<DerivedTable>CustSettlement</DerivedTable>
												<Field>RecId</Field>
												<JoinDataSource>CustTrans_LedgerJournalTrans</JoinDataSource>
												<JoinDerivedTable>CustTrans</JoinDerivedTable>
												<RelatedField>TransRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy1</Name>
												<DerivedTable>CustSettlement</DerivedTable>
												<Field>TransDate</Field>
												<JoinDataSource>TaxTrans</JoinDataSource>
												<JoinDerivedTable>TaxTrans</JoinDerivedTable>
												<RelatedField>TransDate</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy2</Name>
												<DerivedTable>CustSettlement</DerivedTable>
												<Field>DataAreaId</Field>
												<JoinDataSource>CustTrans_LedgerJournalTrans</JoinDataSource>
												<JoinDerivedTable>CustTrans</JoinDerivedTable>
												<RelatedField>TransCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy3</Name>
												<DerivedTable>CustSettlement</DerivedTable>
												<Field>DataAreaId</Field>
												<JoinDataSource>CustTrans_LedgerJournalTrans</JoinDataSource>
												<JoinDerivedTable>CustTrans</JoinDerivedTable>
												<RelatedField>OffsetCompany</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1Copy3Copy1</Name>
												<DerivedTable>CustSettlement</DerivedTable>
												<Field>Voucher</Field>
												<JoinDataSource>TaxTrans</JoinDataSource>
												<JoinDerivedTable>TaxTrans</JoinDerivedTable>
												<RelatedField>SettlementVoucher</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>CustTable_LedgerJournalTrans</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CustTable</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations />
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>Voucher</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<JoinDerivedTable>LedgerJournalTrans</JoinDerivedTable>
										<RelatedField>Voucher</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>TransDate</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<JoinDerivedTable>LedgerJournalTrans</JoinDerivedTable>
										<RelatedField>TransDate</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>LedgerJournalTrans</DerivedTable>
								<Field>SourceRecId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>LedgerJournalTrans</DerivedTable>
								<Field>SourceTableId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustTrans_Source</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustSettlement</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustSettlement</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>CustTrans_SettledInvoice</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CustTrans</Table>
										<DataSources>
											<AxQuerySimpleEmbeddedDataSource>
												<Name>TaxTrans_SettledCustTrans</Name>
												<DynamicFields>Yes</DynamicFields>
												<FirstOnly>Yes</FirstOnly>
												<Table>TaxTransVoucherDatesView</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
												<JoinMode>OuterJoin</JoinMode>
												<Relations>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation1</Name>
														<Field>Voucher</Field>
														<JoinDataSource>CustTrans_SettledInvoice</JoinDataSource>
														<JoinDerivedTable>CustTrans</JoinDerivedTable>
														<RelatedField>Voucher</RelatedField>
													</AxQuerySimpleDataSourceRelation>
													<AxQuerySimpleDataSourceRelation>
														<Name>QueryDataSourceRelation2</Name>
														<Field>TransDate</Field>
														<JoinDataSource>CustTrans_SettledInvoice</JoinDataSource>
														<JoinDerivedTable>CustTrans</JoinDerivedTable>
														<RelatedField>TransDate</RelatedField>
													</AxQuerySimpleDataSourceRelation>
												</Relations>
											</AxQuerySimpleEmbeddedDataSource>
										</DataSources>
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<DerivedTable>CustTrans</DerivedTable>
												<Field>OffsetRecId</Field>
												<JoinDataSource>CustSettlement</JoinDataSource>
												<JoinDerivedTable>CustSettlement</JoinDerivedTable>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<DerivedTable>CustSettlement</DerivedTable>
										<Field>RecId</Field>
										<JoinDataSource>CustTrans_Source</JoinDataSource>
										<JoinDerivedTable>CustTrans</JoinDerivedTable>
										<RelatedField>TransRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy1</Name>
										<DerivedTable>CustSettlement</DerivedTable>
										<Field>TransDate</Field>
										<JoinDataSource>TaxTrans</JoinDataSource>
										<JoinDerivedTable>TaxTrans</JoinDerivedTable>
										<RelatedField>TransDate</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy2</Name>
										<DerivedTable>CustSettlement</DerivedTable>
										<Field>DataAreaId</Field>
										<JoinDataSource>CustTrans_Source</JoinDataSource>
										<JoinDerivedTable>CustTrans</JoinDerivedTable>
										<RelatedField>TransCompany</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy3</Name>
										<DerivedTable>CustSettlement</DerivedTable>
										<Field>DataAreaId</Field>
										<JoinDataSource>CustTrans_Source</JoinDataSource>
										<JoinDerivedTable>CustTrans</JoinDerivedTable>
										<RelatedField>OffsetCompany</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1Copy3Copy1</Name>
										<DerivedTable>CustSettlement</DerivedTable>
										<Field>Voucher</Field>
										<JoinDataSource>TaxTrans</JoinDataSource>
										<JoinDerivedTable>TaxTrans</JoinDerivedTable>
										<RelatedField>SettlementVoucher</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTable_Source</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations />
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>CustTrans</DerivedTable>
								<Field>SourceRecId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>CustTrans</DerivedTable>
								<Field>SourceTableId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustInvoiceTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustInvoiceTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustInvoiceTrans_W</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustInvoiceTrans_W</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>OrigCustInvoiceTrans</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CustInvoiceTrans</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RefReturnInvoiceTrans_W</Field>
												<JoinDataSource>CustInvoiceTrans_W</JoinDataSource>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CustInvoiceTrans</JoinDataSource>
										<RelatedField>CustInvoiceTrans</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>CustInvoiceTrans</DerivedTable>
								<Field>SourceRecId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>CustInvoiceTrans</DerivedTable>
								<Field>SourceTableId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjInvoiceItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjInvoiceItem</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OrigProjInvoiceItem</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>ProjInvoiceItem</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RefReturnInvoiceTrans_W</Field>
										<JoinDataSource>ProjInvoiceItem</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>ProjInvoiceItem</DerivedTable>
								<Field>SourceRecId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>ProjInvoiceItem</DerivedTable>
								<Field>SourceTableId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OrigVendInvoiceTrans</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>VendInvoiceTrans</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RefReturnInvoiceTrans_W</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>VendInvoiceTrans</DerivedTable>
								<Field>SourceRecId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>VendInvoiceTrans</DerivedTable>
								<Field>SourceTableId</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustInvoiceJour</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustInvoiceJour</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustCreditInvoicingJour</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustVendCreditInvoicingJour</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CustInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>TableId</Field>
										<JoinDataSource>CustInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceTableId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjInvoiceJour</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjInvoiceJour</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTrans_ProjInvoiceJour</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustTrans</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>LedgerVoucher</Field>
										<JoinDataSource>ProjInvoiceJour</JoinDataSource>
										<JoinDerivedTable>ProjInvoiceJour</JoinDerivedTable>
										<RelatedField>Voucher</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>InvoiceDate</Field>
										<JoinDataSource>ProjInvoiceJour</JoinDataSource>
										<JoinDerivedTable>ProjInvoiceJour</JoinDerivedTable>
										<RelatedField>TransDate</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ProjCreditInvoicingJour</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustVendCreditInvoicingJour</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>ProjInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>TableId</Field>
										<JoinDataSource>ProjInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceTableId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceJour</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceJour</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>VendCreditInvoicingJour</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustVendCreditInvoicingJour</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>VendInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>TableId</Field>
										<JoinDataSource>VendInvoiceJour</JoinDataSource>
										<RelatedField>InvoiceTableId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>TaxOriginAndLedgerJournalType</Name>
								<DerivedTable>VendInvoiceJour</DerivedTable>
								<Field>RecId</Field>
								<Value>((TaxTrans.TaxOrigin == TaxOrigin::Tax) &amp;&amp; ((TaxTrans_Reporting.LedgerJournalType != LedgerJournalType::PurchaseLedger) &amp;&amp; (TaxTrans_Reporting.LedgerJournalType != LedgerJournalType::Approval) || (TaxTrans.SourceTableId != (TaxTransDeclarationDetailsUtil::ledgerJournalTransTableId()))))</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTransferJour</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventTransferJour</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>TaxRegistration</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>TaxRegistration</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DirPartyLocation</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirPartyLocation</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations />
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<DerivedTable>TaxRegistration</DerivedTable>
										<Field>PartyTaxID</Field>
										<JoinDataSource>InventTransferJour</JoinDataSource>
										<JoinDerivedTable>InventTransferJour</JoinDerivedTable>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>Shipment</Name>
								<Field>UpdateType</Field>
								<Value>InventTransferUpdateType::Shipment</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>Receive</Name>
								<Field>UpdateType</Field>
								<Value>InventTransferUpdateType::Receive</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<DerivedTable>InventTransferJour</DerivedTable>
								<Field>TransDate</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TransDate</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<DerivedTable>InventTransferJour</DerivedTable>
								<Field>Voucher</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>VoucherId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustTransView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustTransView</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTrans_Tax</Name>
								<DynamicFields>Yes</DynamicFields>
								<FirstOnly>Yes</FirstOnly>
								<Table>CustTrans</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>CustTable_Tax</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CustTable</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<UseRelations>Yes</UseRelations>
										<Relations />
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>TaxOrigin</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>RecId</Field>
										<Value>(TaxTrans.TaxOrigin == TaxOrigin::Tax) || (TaxTrans.TaxOrigin == TaxOrigin::TaxReversed)</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<DerivedTable>CustTrans</DerivedTable>
										<Field>MaxRecId</Field>
										<JoinDataSource>CustTransView</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>TransDate</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>TransDate</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>Voucher</Field>
								<JoinDataSource>TaxTrans</JoinDataSource>
								<JoinDerivedTable>TaxTrans</JoinDerivedTable>
								<RelatedField>Voucher</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>Source</Name>
						<Field>Source</Field>
						<Value>!TaxModuleType::Tax</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>