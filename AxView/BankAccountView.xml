<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankAccountView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankAccountBalanceCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the bank account balance in currency of the bank account.
    /// </summary>
    /// <returns>
    ///    The bank account balance.
    /// </returns>
    public display AmountCur getBankAccountBalanceCur()
    {
        AmountCur           balanceCur;
        BankAccountTrans    bankAccountTrans;

        if (HasFieldAccess(tablenum(bankAccountTrans),fieldnum(bankAccountTrans,AmountCur),AccessType::View) &&
           HasFieldAccess(tablenum(bankAccountTrans),fieldnum(bankAccountTrans,AmountCorrect),AccessType::View))
        {
            bankAccountTrans.recordLevelSecurity(true);
            // Group by currencyCode so sum is will perform better
            while select sum(AmountCur), sum(AmountCorrect) from bankAccountTrans
                group by CurrencyCode
                where bankAccountTrans.AccountId == this.AccountID
            {
                balanceCur = balanceCur + bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;
            }
        }
        return balanceCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns bank account balance in the currency of the company.
    /// </summary>
    /// <returns>
    ///    The bank account balance.
    /// </returns>
    public display AmountMST getBankAccountBalanceMST()
    {
        AmountMST balanceMST = 0;

        if (HasFieldAccess(tablenum(BankAccountTrans), fieldnum(BankAccountTrans, AmountMST), AccessType::View))
        {
            BankAccountTrans bankAccountTrans;

            bankAccountTrans.recordLevelSecurity(true);

            select sum(AmountMST) from bankAccountTrans
                where bankAccountTrans.AccountId == this.AccountID;

            balanceMST = bankAccountTrans.AmountMST;
        }

        return balanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountBalanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns bank account balance in the reporting currency of the company.
    /// </summary>
    /// <returns>
    ///    The bank account balance in reporting currency.
    /// </returns>
    public display AmountMSTSecondary getBankAccountBalanceReportingCurrency()
    {
        AmountMSTSecondary balanceReportingCurrency = 0;

        if (HasFieldAccess(tablenum(BankAccountTrans), fieldnum(BankAccountTrans, AmountReportingCurrency), AccessType::View))
        {
            BankAccountTrans bankAccountTrans;

            bankAccountTrans.recordLevelSecurity(true);

            select sum(AmountReportingCurrency) from bankAccountTrans
                where bankAccountTrans.AccountId == this.AccountID;

            balanceReportingCurrency = bankAccountTrans.AmountReportingCurrency;
        }

        return balanceReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to control the visibility of reporting currency amount column in BankAccountBalance report.
    /// </summary>
    /// <returns>
    /// Returns true, if the current ledger's reporting currency is not same as accounting currency else false.
    /// </returns>
    public display boolean showReportingCurrency()
    {
        boolean showReportingCurrency = false;

        if (Ledger::reportingCurrency() && Ledger::reportingCurrency() != Ledger::accountingCurrency())
        {
            showReportingCurrency = true;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@sys329948</DeveloperDocumentation>
	<Label>@SYS24585</Label>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>Name</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountID</Name>
			<DataField>AccountID</DataField>
			<DataSource>BankAccountTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>BankAccountTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>BankAccountTable_1</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankAccountTable_1</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankAccountTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>