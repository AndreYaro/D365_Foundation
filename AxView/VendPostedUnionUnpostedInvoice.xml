<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPostedUnionUnpostedInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPostedUnionUnpostedInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayInvoiceName</Name>
				<Source><![CDATA[
    public display DirPartyName displayInvoiceName()
    {
        return VendTable::find(this.InvoiceAccount).customerAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the selected record is a posted or an unposted invoice and then returns the
    /// status of the selected invoice.
    /// </summary>
    /// <param name="_vendPostedUnionUnpostedInvoice">
    /// The current <c>VendPostedUnionUnpostedInvoice</c> record for which to check.
    /// </param>
    /// <returns>
    /// The invoice status.
    /// </returns>
    public display InvoiceStatus displayInvoiceStatus(VendPostedUnionUnpostedInvoice _vendPostedUnionUnpostedInvoice)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour localVendInvoiceJour;

        // if the invoice is unposted then call the VendInvoiceInfoTable table displayInvoiceStatus() method. Otherwise
        // the invoice is posted so call the displayInvoiceStatus() method on VendInvoiceJour.
        if (_vendPostedUnionUnpostedInvoice.origTableId() == tablenum(VendInvoiceInfoTable))
        {
            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return vendInvoiceInfoTable.displayInvoiceStatus();
        }
        else
        {
            select firstonly localVendInvoiceJour
                where localVendInvoiceJour.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return localVendInvoiceJour.displayInvoiceStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsInvoiceOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current Invoice is on hold.
    /// </summary>
    /// <param name="_vendPostedUnionUnpostedInvoice">
    /// The current <c>VendPostedUnionUnpostedInvoice</c> record for which to check.
    /// </param>
    /// <returns>
    /// Yes if the invoice is marked as on hold; otherwise, No.
    /// </returns>
    public display NoYes displayIsInvoiceOnHold(VendPostedUnionUnpostedInvoice _vendPostedUnionUnpostedInvoice)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // if the invoice is unposted then return the value of VendInvoiceInfoTable.Hold. Otherwise
        // the invoice is posted so return No.
        //
        if (_vendPostedUnionUnpostedInvoice.origTableId() == tablenum(VendInvoiceInfoTable))
        {
            select firstonly RecId from vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return vendInvoiceInfoTable.Hold;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsVendorAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current invoice is a vendor advance invoice.
    /// </summary>
    /// <param name="_vendPostedUnionUnpostedInvoice">
    /// The current <c>VendPostedUnionUnpostedInvoice</c> record.
    /// </param>
    /// <returns>
    /// The <c>Yes</c> enumeration value if the invoice is marked as the vendor advance; otherwise, the
    /// <c>No</c> enumeration value.
    /// </returns>
    public display NoYes displayIsVendorAdvance(VendPostedUnionUnpostedInvoice _vendPostedUnionUnpostedInvoice)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour localVendInvoiceJour;
        NoYes isVendorAdvance;

        // if the invoice is unposted then call the VendInvoiceInfoTable table editIsVendorAdvance() method. Otherwise
        // the invoice is posted so call the displayIsVendorAdvance() method on VendInvoiceJour.
        if (_vendPostedUnionUnpostedInvoice.origTableId() == tablenum(VendInvoiceInfoTable))
        {
            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return vendInvoiceInfoTable.editIsVendorAdvance(false, isVendorAdvance);
        }
        else
        {
            select firstonly localVendInvoiceJour
                where localVendInvoiceJour.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return localVendInvoiceJour.displayIsVendorAdvance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPackingSlipId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the packing slip ID of the current invoice.
    /// </summary>
    /// <param name="_vendPostedUnionUnpostedInvoice">
    /// The current <c>VendPostedUnionUnpostedInvoice</c> record.
    /// </param>
    /// <returns>
    /// The <c>PackingSlipId</c> value of the current invoice.
    /// </returns>
    public display PackingSlipId displayPackingSlipId(VendPostedUnionUnpostedInvoice _vendPostedUnionUnpostedInvoice)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour localVendInvoiceJour;

        //
        // if the invoice is unposted then call the VendInvoiceInfoTable table displayInvoiceStatus() method. Otherwise
        // the invoice is posted so call the displayInvoiceStatus() method on VendInvoiceJour.
        //
        if (_vendPostedUnionUnpostedInvoice.origTableId() == tablenum(VendInvoiceInfoTable))
        {
            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return vendInvoiceInfoTable.packingSlipId(vendInvoiceInfoTable);
        }
        else
        {
            select firstonly localVendInvoiceJour
                where localVendInvoiceJour.RecId == _vendPostedUnionUnpostedInvoice.RecId;

            return localVendInvoiceJour.displayPackingSlipId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines whether the selected record is a posted or unposted invoice and returns the record from <c>VendInvoiceInfoTable</c> or <c>VendInvoiceJour</c>.
    /// </summary>
    /// <returns>
    /// Record from <c>VendInvoiceInfoTable</c> or <c>VendInvoiceJour</c>.
    /// </returns>
    public Common getTableRecord()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceJour localVendInvoiceJour;

        if (this.origTableId() == tablenum(VendInvoiceInfoTable))
        {
            select firstonly vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == this.RecId;

            return vendInvoiceInfoTable;
        }
        else
        {
            select firstonly localVendInvoiceJour
                where localVendInvoiceJour.RecId == this.RecId;

            return localVendInvoiceJour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>origTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original table ID of the current <c>VendPostedUnionUnpostedInvoice</c> record based
    /// on the value of the <c>unionAllBranchId</c> field in the <c>VendPostedUnionUnpostedInvoice</c> view.
    /// </summary>
    /// <returns>
    /// The original table ID of the <c>VendPostedUnionUnpostedInvoice</c> view record.
    /// </returns>
    public tableId origTableId()
    {
        #define.VendInvoiceInfoTable (1)
        #define.VendInvoiceJour (2)

        tableId origTableId;

        switch (this.UnionAllBranchId)
        {
            case 0 :
                //this case is reached when a table not in the view is given due to EP record context being passed back. Do nothing.
            break;
            case #VendInvoiceInfoTable :
                origTableId = tablenum(VendInvoiceInfoTable);
            break;

            case #VendInvoiceJour :
                origTableId = tablenum(VendInvoiceJour);
            break;

            default :
                throw error("@SYS191473");
        }
        return origTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table number of a selected record in the <c>VendPostedUnionUnpostedInvoice</c> view.
    /// </summary>
    /// <param name="_branchId">
    /// The branch ID of a <c>VendPostedUnionUnpostedInvoice</c> record.
    /// </param>
    /// <returns>
    /// The table number of the selected record.
    /// </returns>
    private static str getTableNumber(int _branchId)
    {
        switch (_branchId)
        {
            case 1:
                return SysComputedColumn::returnLiteral(tablenum(VendInvoiceInfoTable));
            case 2:
                return SysComputedColumn::returnLiteral(tablenum(VendInvoiceJour));
            default:
                return SysComputedColumn::returnLiteral(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines expression for the invoice status.
    /// </summary>
    /// <param name="_branchId">
    /// The branch ID of a <c>VendPostedUnionUnpostedInvoice</c> record.
    /// </param>
    /// <returns>
    /// An expression to determine the invoice status.
    /// </returns>
    public static str invoiceStatus(int _branchId)
    {
        if (_branchId == 1)
        {
            // Records from VendInvoiceInfoTable always have an unposted status
            return SysComputedColumn::returnLiteral(InvoiceStatus::Unposted);
        }

        TableName viewName = tablestr(VendPostedUnionUnpostedInvoice);

        // if VendTrans.Closed has a value, then the invoice is fully paid
        // else if VendTrans.LastSettleVoucher has a value, then the invoice is partially paid
        // else (if VendTrans.Closed and LastSettleVoucher are both empty) we simply show a status of Posted
        return strfmt('CASE WHEN %1 THEN %2 WHEN %3 THEN %4 ELSE %5 END',
            strFmt('%1 != %2',
                SysComputedColumn::returnField(viewName, identifierStr(VendInvoiceJourJoinVendtrans_1), fieldStr(VendTrans, Closed)),
                SysComputedColumn::returnLiteral(dateNull())),
            SysComputedColumn::returnLiteral(InvoiceStatus::Paid),
            strFmt('%1 != %2',
                SysComputedColumn::returnField(viewName, identifierStr(VendInvoiceJourJoinVendtrans_1), fieldStr(VendTrans, LastSettleVoucher)),
                SysComputedColumn::returnLiteral('')),
            SysComputedColumn::returnLiteral(InvoiceStatus::PartiallyPaid),
            SysComputedColumn::returnLiteral(InvoiceStatus::Posted));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS321106</DeveloperDocumentation>
	<Label>@SYS152786</Label>
	<TitleField1>Num</TitleField1>
	<TitleField2>PurchId</TitleField2>
	<Query>VendPostedUnionUnpostedInvoice</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Num</Name>
			<DataField>Num</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PurchId</Name>
			<DataField>PurchId</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentDate</Name>
			<DataField>DocumentDate</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VATNum</Name>
			<DataField>VATNum</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EnterpriseNumber</Name>
			<DataField>EnterpriseNumber</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Approver</Name>
			<DataField>Approver</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ParmId</Name>
			<DataField>ParmId</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InvoiceAccount</Name>
			<DataField>InvoiceAccount</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>FixedDueDate</Name>
			<DataField>FixedDueDate</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ClosedDate</Name>
			<DataField>ClosedDate</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LastSettleVoucher</Name>
			<DataField>LastSettleVoucher</DataField>
			<DataSource>VendInvoiceInfoTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>OrigTableId</Name>
			<ViewMethod>getTableNumber</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>InvoiceStatus</Name>
			<ViewMethod>invoiceStatus</ViewMethod>
			<EnumType>InvoiceStatus</EnumType>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>