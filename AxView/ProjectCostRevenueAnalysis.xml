<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectCostRevenueAnalysis</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjectCostRevenueAnalysis extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalCost</Name>
				<Source><![CDATA[
    public static str calcTotalCost()
    {
        str viewName = tableStr(ProjectCostRevenueAnalysis);
        List listProjTransType = new List(Types::String);
        List listPostingType = new List(Types::String);

        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item))));

        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedCost))));

        return SysComputedColumn::if(SysComputedColumn::and2(SysComputedColumn::or(listProjTransType), SysComputedColumn::or(listPostingType)),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMST)),
                            SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalRevenue</Name>
				<Source><![CDATA[
    public static str calcTotalRevenue()
    {
        str viewName = tableStr(ProjectCostRevenueAnalysis);
        List listProjTransType = new List(Types::String);
        List listPostingType = new List(Types::String);

        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item))));
        listProjTransType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                                SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount))));

        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnover))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalue))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount))));
        listPostingType.addEnd(SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                                SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueSubscription))));

        return SysComputedColumn::if(SysComputedColumn::and2(SysComputedColumn::or(listProjTransType), SysComputedColumn::or(listPostingType)),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMST)),
                            SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransDate</Name>
			<DataField>ProjTransDate</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransType</Name>
			<DataField>ProjTransType</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalCost</Name>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<ViewMethod>calcTotalCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalRevenue</Name>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<ViewMethod>calcTotalRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Customer</Name>
			<DataField>AccountNum</DataField>
			<DataSource>CustTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTransPosting_1</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTransPosting</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjTable</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTable_1</Name>
								<AllowAdd>No</AllowAdd>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<FetchMode>OneToN</FetchMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>CustAccount</Field>
										<JoinDataSource>ProjTable</JoinDataSource>
										<RelatedField>AccountNum</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>