<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentStatementLineView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentStatementLineView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description field.
    /// </summary>
    /// <returns>
    /// The description field.
    /// </returns>
    public static str description()
    {
        return SysComputedColumn::returnField(tableStr(BankDocumentStatementLineView), identifierStr(BankStmtISOReportEntry), fieldStr(BankStmtISOReportEntry, AdditionalEntryInformation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bank document number.
    /// </summary>
    /// <returns>
    /// The bank document number.
    /// </returns>
    public static str documentNum()
    {
        return SysComputedColumn::returnField(tableStr(BankDocumentStatementLineView), identifierStr(BankStmtISOAccountStatement), fieldStr(BankStmtISOAccountStatement, Identification));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document type.
    /// </summary>
    /// <returns>
    /// The bank document type.
    /// </returns>
    public static str documentType()
    {
        return SysComputedColumn::returnLiteral(BankDocumentBookType::BankStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment reference.
    /// </summary>
    /// <returns>
    /// The payment reference.
    /// </returns>
    public static str reference()
    {
        return SysComputedColumn::returnField(tableStr(BankDocumentStatementLineView), identifierStr(BankStmtISOReportEntry), fieldStr(BankStmtISOReportEntry, ReferenceNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankTransTypeSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the bank transaction type.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str bankTransTypeSQL()
    {
        str sql;

        sql = @'
                    SELECT TOP 1 COALESCE(M.BANKTRANSTYPE, RE.PROPRIETARYBANKTRANSACTIONCODE)
                    FROM BANKSTMTISOREPORTENTRY RE
                    LEFT OUTER JOIN BANKSTATEMENTTRANSACTIONTYPEMAPPING M
                        ON M.PARTITION = T1.PARTITION
                        AND M.DATAAREAID = T1.DATAAREAID
                        AND M.STATEMENTTRANSACTIONCODE = T2.PROPRIETARYBANKTRANSACTIONCODE
                        LEFT OUTER JOIN BANKSTATEMENTTRANSACTIONTYPEHEADER H
                            ON H.PARTITION = M.PARTITION
                            AND H.DATAAREAID = M.DATAAREAID
                            AND H.BANKACCOUNTTABLE = T3.BANKACCOUNTTABLE
                            AND H.RECID = M.BANKSTATEMENTTRANSACTIONTYPEHEADER
                    WHERE RE.RECID = T2.RECID
                ';


        return sql;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCurrencyAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the bank currency amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str bankCurrencyAmountSQL()
    {
        str creditDebitField = SysComputedColumn::returnField(
            tablestr(BankDocumentStatementLineView),
            identifierStr(BankStmtISOReportEntry),
            fieldstr(BankStmtISOReportEntry, AmountCreditDebitIndicator));

        str bankCurrencyAmount = SysComputedColumn::returnField(
                tableStr(BankDocumentStatementLineView),
                identifierStr(BankStmtISOReportEntry),
                fieldStr(BankStmtISOReportEntry, Amount));

        str negativeBankCurrencyAmount = SysComputedColumn::negative(
            SysComputedColumn::returnField(
                tableStr(BankDocumentStatementLineView),
                identifierStr(BankStmtISOReportEntry),
                fieldStr(BankStmtISOReportEntry, Amount)));

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(creditDebitField, SysComputedColumn::returnLiteral(1)),
            bankCurrencyAmount,
            negativeBankCurrencyAmount);

    }

]]></Source>
			</Method>
			<Method>
				<Name>paymIdSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the paym Id.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str paymIdSQL()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endToEndIdSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the end to end Id.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str endToEndIdSQL()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDateSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the transaction date.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str transactionDateSQL()
    {
        return SysComputedColumn::fromUtcDateToDate(
            SysComputedColumn::returnField(
                tableStr(BankDocumentStatementLineView),
                identifierStr(BankStmtISOReportEntry),
                fieldStr(BankStmtISOReportEntry, BookingDateTime)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the debit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str debitAmountSQL()
    {
        str creditDebitField = SysComputedColumn::returnField(
            tablestr(BankDocumentStatementLineView),
            identifierStr(BankStmtISOReportEntry),
            fieldstr(BankStmtISOReportEntry, AmountCreditDebitIndicator));

        str bankCurrencyAmount = SysComputedColumn::returnField(
                tableStr(BankDocumentStatementLineView),
                identifierStr(BankStmtISOReportEntry),
                fieldStr(BankStmtISOReportEntry, Amount));

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(creditDebitField, SysComputedColumn::returnLiteral(1)),
            bankCurrencyAmount,
            SysComputedColumn::returnLiteral(0.00));

    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAmountSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the computed column for the credit amount.
    /// </summary>
    /// <returns>The computed column.</returns>
    public static str creditAmountSQL()
    {
        str creditDebitField = SysComputedColumn::returnField(
            tablestr(BankDocumentStatementLineView),
            identifierStr(BankStmtISOReportEntry),
            fieldstr(BankStmtISOReportEntry, AmountCreditDebitIndicator));

        str bankCurrencyAmount = SysComputedColumn::returnField(
                tableStr(BankDocumentStatementLineView),
                identifierStr(BankStmtISOReportEntry),
                fieldStr(BankStmtISOReportEntry, Amount));

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(creditDebitField, SysComputedColumn::returnLiteral(0)),
            bankCurrencyAmount,
            SysComputedColumn::returnLiteral(0.00));

    }

]]></Source>
			</Method>
			<Method>
				<Name>combinedPosted</Name>
				<Source><![CDATA[
    public static str combinedPosted()
    {
        str headerVoucher = SysComputedColumn::returnField(
            tableStr(BankDocumentStatementLineView),
            identifierStr(BankStmtISOAccountStatement),
            fieldStr(BankStmtISOAccountStatement, Voucher));

        str lineVoucher = SysComputedColumn::returnField(
            tablestr(BankDocumentStatementLineView),
            identifierStr(BankStmtISOReportEntry),
            fieldstr(BankStmtISOReportEntry, Voucher));

        str anyVoucher = SysComputedColumn::or2(
            SysComputedColumn::notEqualExpression(headerVoucher, SysComputedColumn::returnLiteral('')),
            SysComputedColumn::notEqualExpression(lineVoucher, SysComputedColumn::returnLiteral('')));

        return SysComputedColumn::if(
            anyVoucher,
            SysComputedColumn::returnLiteral(NoYes::Yes),
            SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221752</DeveloperDocumentation>
	<Label>@GLS221751</Label>
	<TitleField1>AccountId</TitleField1>
	<TitleField2>DocumentDate</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReconciled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountId</Name>
			<DataField>BankAccountTable</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>DocumentType</Name>
			<ViewMethod>documentType</ViewMethod>
			<EnumType>BankDocumentBookType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Cancelled</Name>
			<DataField>IsCancelled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsReconciled</Name>
			<DataField>IsReconciled</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRecId</Name>
			<DataField>SourceRecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRelationType</Name>
			<DataField>SourceRelationType</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Description</Name>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<ViewMethod>description</ViewMethod>
			<StringSize>60</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>DocumentNum</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<ViewMethod>documentNum</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Reference</Name>
			<ExtendedDataType>PaymReference</ExtendedDataType>
			<ViewMethod>reference</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>Posted</Name>
			<ExtendedDataType>Posted</ExtendedDataType>
			<ViewMethod>combinedPosted</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentDate</Name>
			<DataField>AccountingDate</DataField>
			<DataSource>BankStmtISOAccountStatement</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>BankTransType</Name>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
			<ViewMethod>bankTransTypeSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>BankCurrencyAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>bankCurrencyAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>PaymId</Name>
			<ExtendedDataType>PaymId</ExtendedDataType>
			<ViewMethod>paymIdSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EndToEndId</Name>
			<ExtendedDataType>PaymentEndToEndId</ExtendedDataType>
			<ViewMethod>endToEndIdSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>TransactionDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<ViewMethod>transactionDateSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CorrectionBankCurrencyAmount</Name>
			<DataField>CorrectionBankCurrencyAmount</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrency</Name>
			<DataField>BankStatementCounterCurrency</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrencyAmount</Name>
			<DataField>BankStatementCounterCurrencyAmount</DataField>
			<DataSource>BankStmtISOReportEntry</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>DebitAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>debitAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CreditAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>creditAmountSQL</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BankDocumentTableRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>BankDocumentTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BankDocumentTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BankDocumentTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BankStmtISOReportEntry</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BankStmtISOReportEntry</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BankStmtISOAccountStatement</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>BankStmtISOAccountStatement</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<FetchMode>OneToN</FetchMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>Relation</Name>
										<JoinDataSource>BankStmtISOReportEntry</JoinDataSource>
										<JoinRelationName>BankStmtISOAccountStatement</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<FetchMode>OneToN</FetchMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>SourceRecId</Name>
								<Field>SourceRecId</Field>
								<JoinDataSource>BankDocumentTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceRelationType</Field>
								<JoinDataSource>BankDocumentTable</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>SourceRelationType</Name>
						<Field>SourceRelationType</Field>
						<Status>Hidden</Status>
						<Value>tablenum(BankStmtISOReportEntry)</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>