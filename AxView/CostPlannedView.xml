<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostPlannedView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostPlannedView</c> view shows all cost calculations from <c>BomCalcTrans</c> table
/// in a manner suitable for comparing them with costs from other sources.
/// </summary>
public class CostPlannedView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the cost amount.
    /// </summary>
    /// <returns>
    /// A string to compute the cost.
    /// </returns>
    /// <remarks>
    /// Calculation follows the logic from <c>BOMCalcTrans.costPriceSum()</c>
    /// </remarks>
    public static str cost()
    {
        TableName       viewName = tableStr(CostPlannedView);

        return SysComputedColumn::add(SysComputedColumn::returnField(viewName, tableStr(BOMCalcTrans), fieldStr(BOMCalcTrans, CostMarkupQty)),
                                      SysComputedColumn::multiply(
                                            SysComputedColumn::returnField(viewName, tableStr(BOMCalcTrans), fieldStr(BOMCalcTrans, CostPriceQty)),
                                            SysComputedColumn::returnField(viewName, tableStr(BOMCalcTrans), fieldStr(BOMCalcTrans, Qty))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the process Id.
    /// </summary>
    /// <returns>
    /// A string to compute the process Id.
    /// </returns>
    public static str processId()
    {
        TableName viewName = tableStr(CostPlannedView);

        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, LeanProductionFlowReference)),
                SysComputedColumn::comparisonLiteral('')),
            SysComputedColumn::returnField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, ItemId)),
            SysComputedColumn::cast(SysComputedColumn::returnField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, LeanProductionFlowReference)), 'nvarchar'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the process occurrence.
    /// </summary>
    /// <returns>
    /// A string to compute the process occurrence.
    /// </returns>
    public static str processOccurrence()
    {
        TableName viewName = tableStr(CostPlannedView);

        if (CostPlannedView::isPmfParentCalcIdEnabled())
        {
            return SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, PmfParentCalcId)),
                    SysComputedColumn::comparisonLiteral('')),
                SysComputedColumn::returnField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, PriceCalcId)),
                SysComputedColumn::returnField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, PmfParentCalcId)));
        }

        return SysComputedColumn::returnField(viewName, tableStr(BOMCalcTable), fieldStr(BOMCalcTable, PriceCalcId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPmfParentCalcIdEnabled</Name>
				<Source><![CDATA[
    private static boolean isPmfParentCalcIdEnabled()
    {
        return isConfigurationkeyEnabled(new SysDictField(tableNum(BOMCalcTable), fieldNum(BOMCalcTable, PmfParentCalcId)).configurationKeyId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the quantity.
    /// </summary>
    /// <returns>
    /// A string to compute the quantity.
    /// </returns>
    /// <remarks>
    /// Calculation is similar to the method BOMCalcTrans.consumptionSum()
    /// </remarks>
    public static str quantity()
    {
        TableName       viewName = tableStr(CostPlannedView);

        return SysComputedColumn::add(SysComputedColumn::returnField(viewName, tableStr(BOMCalcTrans), fieldStr(BOMCalcTrans, ConsumptionVariable)),
                                      SysComputedColumn::returnField(viewName, tableStr(BOMCalcTrans), fieldStr(BOMCalcTrans, ConsumptionConstant)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>role</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the role.
    /// </summary>
    /// <returns>
    /// A string to compute the role.
    /// </returns>
    public static str role()
    {
        return SysComputedColumn::returnLiteral(CostCalculationRole::ActiveCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>state</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the state.
    /// </summary>
    /// <returns>
    /// A string to compute the state.
    /// </returns>
    public static str state()
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(tableStr(CostPlannedView), tableStr(InventItemPrices), fieldStr(InventItemPrices, TableSourceId)),
                SysComputedColumn::comparisonLiteral(tableNum(InventItemPriceSim))),
            SysComputedColumn::returnLiteral(CostCalculationState::Pending),
            SysComputedColumn::returnLiteral(CostCalculationState::Active));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to compute the inventory transaction Id.
    /// </summary>
    /// <returns>
    /// A string to compute the inventory transaction Id.
    /// </returns>
    /// <remarks>This field is empty for union purposes.</remarks>
    public static str inventTransId()
    {
        return SysComputedColumn::returnLiteral('');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Query>CostPlannedQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostGroupType</Name>
			<DataField>CostGroupType</DataField>
			<DataSource>BomCostGroup</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostGroupId</Name>
			<DataField>CostGroupId</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>UnitId</Name>
			<DataField>UnitId</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Cost</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
			<ViewMethod>cost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Quantity</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<ViewMethod>quantity</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Role</Name>
			<ViewMethod>role</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>ProcessOccurrence</Name>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<ViewMethod>processOccurrence</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>ProcessId</Name>
			<ViewMethod>processId</ViewMethod>
			<StringSize>35</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Level</Name>
			<DataField>Level</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>State</Name>
			<ViewMethod>state</ViewMethod>
			<StringSize>20</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceInventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsSplit</Name>
			<DataField>BOM</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LineNumber</Name>
			<DataField>LineNum</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Type</Name>
			<DataField>CalcType</DataField>
			<DataSource>BomCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProcessType</Name>
			<DataField>CostCalculationMethod</DataField>
			<DataSource>BomCalcTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>InventTransId</Name>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<ViewMethod>inventTransId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LotSize</Name>
			<DataField>Qty</DataField>
			<DataSource>BOMCalcTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>date</Name>
			<DataField>ActivationDate</DataField>
			<DataSource>InventItemPrices</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostRollupId</Name>
			<DataField>PriceCalcId</DataField>
			<DataSource>BOMCalcTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostRollupSourceId</Name>
			<DataField>ItemId</DataField>
			<DataSource>BOMCalcTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>