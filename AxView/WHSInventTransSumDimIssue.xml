<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransSumDimIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventTransSumDimIssue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayInventUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the inventory unit of measure associated with the current item.
    /// </summary>
    /// <returns>
    /// The inventory unit of measure for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display InventUnitId displayInventUOM()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHandlingUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the handling unit of measure associated with the current item.
    /// </summary>
    /// <returns>
    /// The handling unit of measure for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display UnitOfMeasureSymbol displayHandlingUOM()
    {
        return WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayQtyLeftToLoadOutbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the quantity remained to load for outbound demand lines.
    /// </summary>
    /// <returns>
    /// The <c>WHSQtyLeftToLoad</c> to display.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSQtyLeftToLoad displayQtyLeftToLoadOutbound()
    {
        WHSQtyOnLoadView    qtyOnLoadView;

        select SumOfInventQty, SumOfPickedQty from qtyOnLoadView
            where qtyOnLoadView.InventDimId     == this.InventDimId
            &&    qtyOnLoadView.InventTransId   == this.InventTransId;

        if (PdsGlobal::pdsIsCWItem(this.itemid))
        {
            // Quantity fields on the QtyOnLoadView will be in CW unit for CW items.
            return (abs(this.SumOfPdsCWQty) - (qtyOnLoadView.SumOfInventQty - qtyOnLoadView.SumOfPickedQty));
        }

        return (abs(this.SumOfQty) - (qtyOnLoadView.SumOfInventQty - qtyOnLoadView.SumOfPickedQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayQtyLeftToLoadPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the quantity remained to load for purchase order lines
    /// </summary>
    /// <returns>
    /// The <c>WHSQtyLeftToLoad</c> to display
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSQtyLeftToLoad displayQtyLeftToLoadPurch()
    {
        return WHSPurchLine::find(this.InventTransId).handlingQtyLeftToLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVolumeOutbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Volume required by the outbound demand line
    /// </summary>
    /// <returns>
    /// The <c>Volume</c> to display
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Volume displayVolumeOutbound()
    {
        InventTable inventTable;
        Volume      unitVolume;

        inventTable = InventTable::find(this.ItemId);
        unitVolume  = inventTable.UnitVolume;

        return unitVolume == 0 ? 0 : unitVolume * this.displayQtyLeftToLoadOutbound();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVolumePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the volume required by the purchase line
    /// </summary>
    /// <returns>
    /// The <c>Volume</c> to display
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Volume displayVolumePurch()
    {
        PurchLine   purchLine;
        Volume      unitVolume;

        purchLine   = PurchLine::findInventTransId(this.InventTransId);
        unitVolume  = purchLine.whsItemUnitVolume();

        return unitVolume == 0 ? 0 : unitVolume * this.displayQtyLeftToLoadPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWeightOutbound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Weight required by the outbound demand line
    /// </summary>
    /// <returns>
    /// The <c>Weight</c> to display
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Weight displayWeightOutbound()
    {
        InventTable     inventTable;
        ItemGrossWeight grossWeight;

        inventTable = InventTable::find(this.ItemId);
        grossWeight = inventTable.grossWeight();

        return grossWeight == 0 ? 0 : grossWeight * this.displayQtyLeftToLoadOutbound();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWeightPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the weight required by the purchase line
    /// </summary>
    /// <returns>
    /// The <c>Volume</c> to display
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Weight displayWeightPurch()
    {
        PurchLine       purchLine;
        ItemGrossWeight grossWeight;

        purchLine   = PurchLine::findInventTransId(this.InventTransId);
        grossWeight = purchLine.whsItemGrossWeight();

        return grossWeight == 0 ? 0 : grossWeight * this.displayQtyLeftToLoadPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compReverseSumOfQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the opposite signed value of summed quantity.
    /// </summary>
    /// <returns>
    /// The <c>ReverseSumOfQty</c> to display
    /// </returns>
    private static str compReverseSumOfQty()
    {
        return SysComputedColumn::multiply(
            SysComputedColumn::sum(
                SysComputedColumn::returnField(
                    tableStr(WHSInventTransSumDimIssue),
                    identifierStr(InventTrans),
                    fieldStr(InventTrans, Qty))),
            int2str(-1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>compReverseSumOfPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the opposite signed value of summed catch weight quantity.
    /// </summary>
    /// <returns>
    /// The <c>ReverseSumOfPdsCWQty</c> to display
    /// </returns>
    private static str compReverseSumOfPdsCWQty()
    {
        if (!isConfigurationkeyEnabled(configurationkeynum(PdsCatchWeight)))
        {
            return SysComputedColumn::returnLiteral(0);
        }
        
        return SysComputedColumn::multiply(
                   SysComputedColumn::sum(
                       SysComputedColumn::returnField(
                           tableStr(WHSInventTransSumDimIssue),
                           identifierStr(InventTrans),
                           fieldStr(InventTrans, PdsCWQty))),
                   int2str(-1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCatchWeightUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catch weight unit of measure associated with the current item.
    /// </summary>
    /// <returns>
    /// The catch weight unit of measure for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsCWUnitId displayCatchWeightUOM()
    {
        return PdsCatchWeightItem::pdsCWUnitId(this.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@WAX4660</DeveloperDocumentation>
	<Label>@WAX4645</Label>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>InventTransOrigin</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SumOfQty</Name>
			<Aggregation>Sum</Aggregation>
			<DataField>Qty</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ReverseSumOfQty</Name>
			<Label>@WAX:WHSInventTransSumDimIssue_ReverseSumOfQty_Label</Label>
			<ViewMethod>compReverseSumOfQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SumOfPdsCWQty</Name>
			<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
			<Aggregation>Sum</Aggregation>
			<DataField>PdsCWQty</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ReverseSumOfPdsCWQty</Name>
			<ConfigurationKey>WHSCatchWeight</ConfigurationKey>
			<Label>@WAX:WHSInventTransSumDimIssue_ReverseSumOfPdsCWQty_Label</Label>
			<ViewMethod>compReverseSumOfPdsCWQty</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTransOrigin</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventTransOrigin</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>InventTrans</JoinDataSource>
								<JoinRelationName>InventTransOrigin</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>StatusIssue</Name>
						<Field>StatusIssue</Field>
						<Status>Hidden</Status>
						<Value>&gt;Picked</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>StatusReceipt</Name>
						<Field>StatusReceipt</Field>
						<Status>Hidden</Status>
						<Value>None</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField1</Name>
						<DataSource>InventTransOrigin</DataSource>
						<Field>InventTransId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField2</Name>
						<DataSource>InventTrans</DataSource>
						<Field>InventDimId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField3</Name>
						<DataSource>InventTrans</DataSource>
						<Field>ItemId</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>