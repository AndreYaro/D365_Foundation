<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostItemsMissingCostingData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostItemsMissingCostingData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>IsItemMissingConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>IsItemMissingConfiguration</c> computed column definition.
    /// </summary>
    /// <returns>
    /// The computed column definition.
    /// </returns>
    public static str IsItemMissingConfiguration()
    {
        var inventItemGroupItemField              = CostItemsMissingCostingData::constructComparisonField(tableStr(InventItemGroupItem), fieldStr(InventItemGroupItem, ItemGroupId));
        var inventModelGroupItemField             = CostItemsMissingCostingData::constructComparisonField(tableStr(InventModelGroupItem), fieldStr(InventModelGroupItem, ModelGroupId));
        var ecoResStorageDimensionGroupItemField  = CostItemsMissingCostingData::constructComparisonField(tableStr(EcoResStorageDimensionGroupItem), fieldStr(EcoResStorageDimensionGroupItem, StorageDimensionGroup));
        var ecoResTrackingDimensionGroupItemField = CostItemsMissingCostingData::constructComparisonField(tableStr(EcoResTrackingDimensionGroupItem), fieldStr(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup));
        var costGroupIdField                      = CostItemsMissingCostingData::constructComparisonField(tableStr(InventTable), fieldStr(InventTable, CostGroupId));

        var list = new List(Types::String);

        CostItemsMissingCostingData::addIsNullExpression(list, inventItemGroupItemField);
        CostItemsMissingCostingData::addIsNullExpression(list, inventModelGroupItemField);
        CostItemsMissingCostingData::addIsNullExpression(list, ecoResStorageDimensionGroupItemField);
        CostItemsMissingCostingData::addIsNullExpression(list, ecoResTrackingDimensionGroupItemField);
        CostItemsMissingCostingData::addEqualExpression(list, inventItemGroupItemField, '\'\'');
        CostItemsMissingCostingData::addEqualExpression(list, inventModelGroupItemField, '\'\'');
        CostItemsMissingCostingData::addEqualExpression(list, ecoResStorageDimensionGroupItemField, '0');
        CostItemsMissingCostingData::addEqualExpression(list, ecoResTrackingDimensionGroupItemField, '0');
        CostItemsMissingCostingData::addEqualExpression(list, costGroupIdField, '\'\'');

        return SysComputedColumn::if(SysComputedColumn::or(list), '1', '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIsNullExpression</Name>
				<Source><![CDATA[
    private static void addIsNullExpression(List _list, str _expression)
    {
        if (_expression)
        {
            _list.addEnd(SysComputedColumn::isNullExpression(_expression));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEqualExpression</Name>
				<Source><![CDATA[
    private static void addEqualExpression(List _list, str _leftExpression, str _rightExpression)
    {
        if (_leftExpression)
        {
            _list.addEnd(SysComputedColumn::equalExpression(_leftExpression, _rightExpression));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabled</Name>
				<Source><![CDATA[
    private static boolean isFieldEnabled(TableName _tableName, FieldName _fieldName)
    {
        SysDictField dictField = SysDictField::newName(_tableName, _fieldName);

        if (!dictField ||
            (dictField.configurationKeyId() && !isConfigurationkeyEnabled(dictField.configurationKeyId())))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructComparisonField</Name>
				<Source><![CDATA[
    private static str constructComparisonField(TableName _tableName, FieldName _fieldName)
    {
        if (CostItemsMissingCostingData::isFieldEnabled(_tableName, _fieldName))
        {
            return SysComputedColumn::comparisonField(tableStr(CostItemsMissingCostingData), _tableName, _fieldName);
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4006566</DeveloperDocumentation>
	<Label>@SYS4006563</Label>
	<TitleField1>ItemId</TitleField1>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>InventTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>IsItemMissingConfiguration</Name>
			<ViewMethod>IsItemMissingConfiguration</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventItemGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventItemGroupItem</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventModelGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventModelGroupItem</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResStorageDimensionGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResStorageDimensionGroupItem</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResTrackingDimensionGroupItem</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResTrackingDimensionGroupItem</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>