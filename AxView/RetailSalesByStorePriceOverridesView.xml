<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByStorePriceOverridesView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailSalesByStorePriceOverridesView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>priceOverridePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a numeric expression for price override percentage.
    /// </summary>
    /// <returns>
    /// A string expression that gives a numeric expression for price override percentage.
    /// </returns>
    public static str priceOverridePercentage()
    {
        str productPrice = SysComputedColumn::returnField(
            tableStr(RetailSalesByStorePriceOverridesView),
            identifierStr(RetailTransactionSalesTrans),
            fieldStr(RetailTransactionSalesTrans, price));
        str productOriginalPrice = SysComputedColumn::returnField(
            tableStr(RetailSalesByStorePriceOverridesView),
            identifierStr(RetailTransactionSalesTrans),
            fieldStr(RetailTransactionSalesTrans, originalPrice));

        // Override Total per unit is defined as price - originalPrice.
        str overrideTotalPerUnit = SysComputedColumn::subtract(productPrice, productOriginalPrice);

        // Override percent is defined as Override Total per unit / original price per unit.
        return SysComputedColumn::divide(overrideTotalPerUnit, productOriginalPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceOverrideAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a numeric expression for price override amount.
    /// </summary>
    /// <returns>
    /// A string expression that gives a numeric expression for price override amount.
    /// </returns>
    public static str priceOverrideAmount()
    {
        str productPrice = SysComputedColumn::returnField(
            tableStr(RetailSalesByStorePriceOverridesView),
            identifierStr(RetailTransactionSalesTrans),
            fieldStr(RetailTransactionSalesTrans, price));
        str productOriginalPrice = SysComputedColumn::returnField(
            tableStr(RetailSalesByStorePriceOverridesView),
            identifierStr(RetailTransactionSalesTrans),
            fieldStr(RetailTransactionSalesTrans, originalPrice));
        str lineQuantity = SysComputedColumn::returnField(
            tableStr(RetailSalesByStorePriceOverridesView),
            identifierStr(RetailTransactionSalesTrans),
            fieldStr(RetailTransactionSalesTrans, qty));
        str lineQuantityAbsolute = SysComputedColumn::abs(lineQuantity);

        // Override Total per unit is defined as price - originalPrice.
        str overrideTotalPerUnit = SysComputedColumn::subtract(productPrice, productOriginalPrice);

        // Override Total is defined as (price - originalPrice) * abs(qty).
        return SysComputedColumn::multiply(overrideTotalPerUnit, lineQuantityAbsolute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceBeforeOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a numeric expression for line price before applying override.
    /// </summary>
    /// <returns>
    /// A string expression that gives a numeric expression for line price before applying override.
    /// </returns>
    public static str priceBeforeOverride()
    {
        str productOriginalPrice = SysComputedColumn::returnField(
                    tableStr(RetailSalesByStorePriceOverridesView),
                    identifierStr(RetailTransactionSalesTrans),
                    fieldStr(RetailTransactionSalesTrans, originalPrice));
        str lineQuantity = SysComputedColumn::multiply(SysComputedColumn::returnField(
                    tableStr(RetailSalesByStorePriceOverridesView),
                    identifierStr(RetailTransactionSalesTrans),
                    fieldStr(RetailTransactionSalesTrans, qty)), "-1");

        // Price before override id defined as originalPrice * qty.
        return SysComputedColumn::multiply(productOriginalPrice, lineQuantity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>priceBeforeOverride</Name>
			<ExtendedDataType>Price</ExtendedDataType>
			<ViewMethod>priceBeforeOverride</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>PriceOverrideAmount</Name>
			<ExtendedDataType>Price</ExtendedDataType>
			<ViewMethod>priceOverrideAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>MinPriceOverridePercentage</Name>
			<ExtendedDataType>Percent</ExtendedDataType>
			<ViewMethod>priceOverridePercentage</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>MaxPriceOverridePercentage</Name>
			<ExtendedDataType>Percent</ExtendedDataType>
			<ViewMethod>priceOverridePercentage</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>transDate</Name>
			<DataField>transDate</DataField>
			<DataSource>RetailTransactionSalesTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>RetailTransactionSalesTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Channel</Name>
			<DataField>Channel</DataField>
			<DataSource>RetailTransactionSalesTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionType</Name>
			<DataField>type</DataField>
			<DataSource>RetailTransactionTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SalesOrderSalesStatus</Name>
			<DataField>SalesStatus</DataField>
			<DataSource>SalesTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>RetailTransactionSalesTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>RetailTransactionSalesTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>RetailTransactionTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>RetailTransactionTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>SalesTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>SalesTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>salesOrderId</Field>
										<JoinDataSource>RetailTransactionTable</JoinDataSource>
										<RelatedField>SalesId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>type</Name>
								<Field>type</Field>
								<Value>Sales</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>entryStatus</Name>
								<Field>entryStatus</Field>
								<Value>!1</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>transactionId</Field>
								<JoinDataSource>RetailTransactionSalesTrans</JoinDataSource>
								<RelatedField>transactionId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>store</Field>
								<JoinDataSource>RetailTransactionSalesTrans</JoinDataSource>
								<RelatedField>store</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation3</Name>
								<Field>terminalId</Field>
								<JoinDataSource>RetailTransactionSalesTrans</JoinDataSource>
								<RelatedField>terminal</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>priceChange</Name>
						<Field>priceChange</Field>
						<Value>1</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>transactionStatus</Name>
						<Field>transactionStatus</Field>
						<Value>!1</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>