<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventoryAvailabilityBufferInventUnitView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInventoryAvailabilityBufferInventUnitView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventoryUnitBufferColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// The product availability buffer in inventory unit.
    /// </summary>
    /// <returns>
    /// Returns calculated buffer in inventory unit.
    /// </returns>
    private static str inventoryUnitBufferColumn()
    {
        DictView dictView = new DictView(tableNum(RetailInventoryAvailabilityBufferInventUnitView));

        str conversionRecId = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, RecId), FieldNameGenerationMode::FieldList, true);

        str bufferSalesUnit = dictView.computedColumnString('InventTableModuleSales', fieldStr(InventTableModule, RetailInventoryAvailabilityBuffer), FieldNameGenerationMode::FieldList, true);
        
        str factor = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, Factor), FieldNameGenerationMode::FieldList, true);
        str outerOffset = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, OuterOffset), FieldNameGenerationMode::FieldList, true);
        str numerator = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, Numerator), FieldNameGenerationMode::FieldList, true);
        str denominator = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, Denominator), FieldNameGenerationMode::FieldList, true);
        str innerOffset = dictView.computedColumnString(tableStr(UnitOfMeasureConversion), fieldStr(UnitOfMeasureConversion, InnerOffset), FieldNameGenerationMode::FieldList, true);

        str formula = strFmt('(((%1 * %2) * (%3 + %4)) / %5) + %6', factor, numerator, bufferSalesUnit, innerOffset, denominator, outerOffset);

        return SysComputedColumn::if(SysComputedColumn::isNullExpression(conversionRecId), bufferSalesUnit, 
            SysComputedColumn::if(SysComputedColumn::compareExpressions(denominator, '=', SysComputedColumn::comparisonLiteral(0)), bufferSalesUnit, formula));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>InventTableModuleSales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LevelProfile</Name>
			<DataField>RetailInventoryAvailabilityLevelProfile</DataField>
			<DataSource>InventTableModuleSales</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>InventUnitBuffer</Name>
			<ViewMethod>inventoryUnitBufferColumn</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SalesUnitBuffer</Name>
			<DataField>RetailInventoryAvailabilityBuffer</DataField>
			<DataSource>InventTableModuleSales</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventTableModuleSales</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventTableModule</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTableModuleInvent</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventTableModule</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>UnitOfMeasureInvent</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>UnitOfMeasure</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>UnitOfMeasureConversion</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>UnitOfMeasureConversion</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>UnitOfMeasureSales</JoinDataSource>
												<RelatedField>FromUnitOfMeasure</RelatedField>
											</AxQuerySimpleDataSourceRelation>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation2</Name>
												<Field>RecId</Field>
												<JoinDataSource>UnitOfMeasureInvent</JoinDataSource>
												<RelatedField>ToUnitOfMeasure</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>UnitId</Field>
										<JoinDataSource>InventTableModuleInvent</JoinDataSource>
										<RelatedField>Symbol</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>ModuleType</Name>
								<Field>ModuleType</Field>
								<Value>ModuleInventPurchSales::Invent</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ItemId</Field>
								<JoinDataSource>InventTableModuleSales</JoinDataSource>
								<RelatedField>ItemId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>UnitOfMeasureSales</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>UnitOfMeasure</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>UnitId</Field>
								<JoinDataSource>InventTableModuleSales</JoinDataSource>
								<RelatedField>Symbol</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>ModuleType</Name>
						<Field>ModuleType</Field>
						<Value>ModuleInventPurchSales::Sales</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>