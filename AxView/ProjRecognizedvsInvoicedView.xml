<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjRecognizedvsInvoicedView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjRecognizedvsInvoicedView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compContractValue</Name>
				<Source><![CDATA[
    public static str compContractValue()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjControlPeriodTableChart("ProjControlPeriodTableChart")
        #define.ProjectControlPeriodTableColumnChart("ProjectControlPeriodTableColumnAccumulatedChart")
        #define.FieldPLTotalRevenue("PLTotalRevenue")
        #define.FieldCompletePct("CompletePct")
        #define.FieldContractValue("ContractValue")

            str sReturn,
        sCompletePct,
            compCompletePct,
        sPLTotalRevenue,
        sContractValue,
        compContractValue;
            DictView dictView2;

            // Construct a DictView object for the present view.
            dictView2 = new DictView(tableNum(#ViewName));

            // Get a string that has the target field name
            // propertly qualified with an alias (such
            // as "A." or "B.").

            sCompletePct = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldCompletePct));

        compCompletePct = SysComputedColumn::comparisonField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldCompletePct));

        sPLTotalRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        sContractValue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldContractValue));

        compContractValue = SysComputedColumn::comparisonField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldContractValue));

        sReturn =SysComputedColumn::if(SysComputedColumn::compareExpressions(compContractValue,">",SysComputedColumn::comparisonLiteral(0)),sContractValue,SysComputedColumn::if(SysComputedColumn::compareExpressions(compCompletePct,">",SysComputedColumn::comparisonLiteral(0)),SysComputedColumn::multiply(SysComputedColumn::divide(sPLTotalRevenue,sCompletePct),SysComputedColumn::returnLiteral(100)),SysComputedColumn::returnLiteral(0)));

            return sReturn;
        }

]]></Source>
			</Method>
			<Method>
				<Name>compPeriodMiddle</Name>
				<Source><![CDATA[
    public static str compPeriodMiddle()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjControlPeriodTableChart("ProjControlPeriodTableChart")
        #define.FieldPeriodFrom("PeriodFrom")
        #define.FieldPeriodTo("PeriodTo")

        str sReturn,
        sPeriodFrom,
        sPeriodTo;
        DictView dictView;

        // Construct a DictView object for the present view.
        dictView = new DictView(tableNum(#ViewName));

        // Get a string that has the target field name
        // propertly qualified with an alias (such
        // as "A." or "B.").

        sPeriodFrom = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldPeriodFrom));

        sPeriodTo = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldPeriodTo));

        sReturn = SysComputedColumn::add(sPeriodFrom,SysComputedColumn::divide(SysComputedColumn::getDateDiff(sPeriodFrom,sPeriodTo),SysComputedColumn::returnLiteral(2)));

        return sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compAccumOffsetValue</Name>
				<Source><![CDATA[
    public static str compAccumOffsetValue()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjControlPeriodTableChart("ProjControlPeriodTableChart")
        #define.ProjectControlPeriodTableColumnChart("ProjectControlPeriodTableColumnAccumulatedChart")
        #define.FieldPLTotalRevenue("PLTotalRevenue")
        #define.FieldInvoicedRevenue("ActualContract")

        str sReturn,
        sInvoicedRevenue,
        sPLTotalRevenue;
        DictView dictView2;

        // Construct a DictView object for the present view.
        dictView2 = new DictView(tableNum(#ViewName));

        // Get a string that has the target field name
        // propertly qualified with an alias (such
        // as "A." or "B.").

        sInvoicedRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjControlPeriodTableChart),
            fieldStr(ProjControlPeriodTable, #FieldInvoicedRevenue));

        sPLTotalRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        sReturn = SysComputedColumn::subtract(sInvoicedRevenue,sPLTotalRevenue);
        return sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compPeriodOffsetValue</Name>
				<Source><![CDATA[
    public static str compPeriodOffsetValue()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjectControlPeriodTableColumnChart("ProjControlPeriodTablePeriodColumn")
        #define.FieldPLTotalRevenue("PLTotalRevenue")
        #define.FieldInvoicedRevenue("WIPInvoiceOnAcc")

        str sReturn,
        sInvoicedRevenue,
        sPLTotalRevenue;
        DictView dictView2;

        // Construct a DictView object for the present view.
        dictView2 = new DictView(tableNum(#ViewName));

        // Get a string that has the target field name
        // propertly qualified with an alias (such
        // as "A." or "B.").

        sInvoicedRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldInvoicedRevenue));

        sPLTotalRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        sReturn = SysComputedColumn::subtract(sInvoicedRevenue,sPLTotalRevenue);
        return sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compPeriodMarginPct</Name>
				<Source><![CDATA[
    public static str compPeriodMarginPct()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjectControlPeriodTableColumnChart("ProjControlPeriodTablePeriodColumn")
        #define.FieldPLTotalRevenue("PLTotalRevenue")
        #define.FieldGrossMargin("PLTotalGrossMargin")

        str sReturn,
        sPLTotalGrossMargin,
        sPLTotalRevenue,
        compPLTotalRevenue;
        DictView dictView2;

        // Construct a DictView object for the present view.
        dictView2 = new DictView(tableNum(#ViewName));

        // Get a string that has the target field name
        // propertly qualified with an alias (such
        // as "A." or "B.").

        sPLTotalGrossMargin = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldGrossMargin));

        sPLTotalRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        compPLTotalRevenue = SysComputedColumn::comparisonField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        sReturn = SysComputedColumn::if(SysComputedColumn::compareExpressions(compPLTotalRevenue,">",SysComputedColumn::comparisonLiteral(0)),SysComputedColumn::multiply(SysComputedColumn::divide(sPLTotalGrossMargin,sPLTotalRevenue),SysComputedColumn::returnLiteral(100)),SysComputedColumn::returnLiteral(0));
        return sReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compAccumMarginPct</Name>
				<Source><![CDATA[
    public static str compAccumMarginPct()
    {
        #define.ViewName(ProjRecognizedvsInvoicedView)
        #define.ProjectControlPeriodTableColumnChart("ProjectControlPeriodTableColumnAccumulatedChart")
        #define.FieldPLTotalRevenue("PLTotalRevenue")
        #define.FieldGrossMargin("PLTotalGrossMargin")

        str sReturn,
        sPLTotalGrossMargin,
        sPLTotalRevenue,
        compPLTotalRevenue;
        DictView dictView2;

        // Construct a DictView object for the present view.
        dictView2 = new DictView(tableNum(#ViewName));

        // Get a string that has the target field name
        // propertly qualified with an alias (such
        // as "A." or "B.").

        sPLTotalGrossMargin = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldGrossMargin));

        sPLTotalRevenue = SysComputedColumn::returnField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        compPLTotalRevenue = SysComputedColumn::comparisonField(
            tableStr(#ViewName),
            identifierStr(#ProjectControlPeriodTableColumnChart),
            fieldStr(ProjControlPeriodTableColumn, #FieldPLTotalRevenue));

        sReturn = SysComputedColumn::if(SysComputedColumn::compareExpressions(compPLTotalRevenue,">",SysComputedColumn::comparisonLiteral(0)),SysComputedColumn::multiply(SysComputedColumn::divide(sPLTotalGrossMargin,sPLTotalRevenue),SysComputedColumn::returnLiteral(100)),SysComputedColumn::returnLiteral(0));
        return sReturn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<TitleField1>ProjId</TitleField1>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActualContract</Name>
			<DataField>ActualContract</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLTotalAccumulatedRevenue</Name>
			<DataField>PLTotalRevenue</DataField>
			<DataSource>ProjectControlPeriodTableColumnAccumulatedChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PeriodTo</Name>
			<DataField>PeriodTo</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PeriodFrom</Name>
			<DataField>PeriodFrom</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PeriodStatus</Name>
			<DataField>PeriodStatus</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLCostTotalAccumulatedCost</Name>
			<DataField>PLCostTotalCost</DataField>
			<DataSource>ProjectControlPeriodTableColumnAccumulatedChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ComputedContractValue</Name>
			<Label>@SYS78749</Label>
			<ViewMethod>compContractValue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CompletePct</Name>
			<DataField>CompletePct</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ComputedAccumulatedRevenueOffset</Name>
			<ViewMethod>compAccumOffsetValue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedDate">
			<Name>PeriodMiddle</Name>
			<Label>@GEE4610</Label>
			<ViewMethod>compPeriodMiddle</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLTotalGrossMarginAccumulated</Name>
			<DataField>PLTotalGrossMargin</DataField>
			<DataSource>ProjectControlPeriodTableColumnAccumulatedChart</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLCostTotalCostPeriod</Name>
			<DataField>PLCostTotalCost</DataField>
			<DataSource>ProjControlPeriodTablePeriodColumn</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLTotalGrossMarginPeriod</Name>
			<DataField>PLTotalGrossMargin</DataField>
			<DataSource>ProjControlPeriodTablePeriodColumn</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLTotalRevenuePeriod</Name>
			<DataField>PLTotalRevenue</DataField>
			<DataSource>ProjControlPeriodTablePeriodColumn</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PLInvRevInvoiceOnAccPeriod</Name>
			<DataField>WIPInvoiceOnAcc</DataField>
			<DataSource>ProjControlPeriodTablePeriodColumn</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ComputedPeriodRevenueOffset</Name>
			<ViewMethod>compPeriodOffsetValue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccumulatedGrossMarginPct</Name>
			<Label>@MCR36320</Label>
			<ExtendedDataType>CostProfitPct</ExtendedDataType>
			<ViewMethod>compAccumMarginPct</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>PeriodGrossMarginPct</Name>
			<Label>@MCR36320</Label>
			<ExtendedDataType>CostProfitPct</ExtendedDataType>
			<ViewMethod>compPeriodMarginPct</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Version</Name>
			<DataField>Version</DataField>
			<DataSource>ProjControlPeriodTableChart</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjControlPeriodTableChart</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjControlPeriodTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjectControlPeriodTableColumnAccumulatedChart</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjControlPeriodTableColumn</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ProjControlPeriodTablePeriodColumn</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>ProjControlPeriodTableColumn</Table>
								<DataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>EstimateColumnPeriod</Name>
										<Field>EstimateColumn</Field>
										<Value>Estimate</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ProjId</Field>
										<JoinDataSource>ProjectControlPeriodTableColumnAccumulatedChart</JoinDataSource>
										<RelatedField>ProjId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>ControlId</Field>
										<JoinDataSource>ProjectControlPeriodTableColumnAccumulatedChart</JoinDataSource>
										<RelatedField>ControlId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation3</Name>
										<Field>Version</Field>
										<JoinDataSource>ProjectControlPeriodTableColumnAccumulatedChart</JoinDataSource>
										<RelatedField>Version</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation4</Name>
										<Field>PeriodFrom</Field>
										<JoinDataSource>ProjectControlPeriodTableColumnAccumulatedChart</JoinDataSource>
										<RelatedField>PeriodFrom</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>EstimateColumn</Name>
								<Field>EstimateColumn</Field>
								<Value>Accumulated</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjControlPeriodTableChart</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>PeriodFrom</Field>
								<JoinDataSource>ProjControlPeriodTableChart</JoinDataSource>
								<RelatedField>PeriodFrom</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation3</Name>
								<Field>ControlId</Field>
								<JoinDataSource>ProjControlPeriodTableChart</JoinDataSource>
								<RelatedField>ControlId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation4</Name>
								<Field>Version</Field>
								<JoinDataSource>ProjControlPeriodTableChart</JoinDataSource>
								<RelatedField>Version</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy>
					<AxQuerySimpleOrderByField>
						<Name>ProjId</Name>
						<DataSource>ProjControlPeriodTableChart</DataSource>
						<Field>ProjId</Field>
					</AxQuerySimpleOrderByField>
					<AxQuerySimpleOrderByField>
						<Name>PeriodFrom</Name>
						<DataSource>ProjControlPeriodTableChart</DataSource>
						<Direction>Descending</Direction>
						<Field>PeriodFrom</Field>
					</AxQuerySimpleOrderByField>
					<AxQuerySimpleOrderByField>
						<Name>Version</Name>
						<DataSource>ProjControlPeriodTableChart</DataSource>
						<Direction>Descending</Direction>
						<Field>Version</Field>
					</AxQuerySimpleOrderByField>
				</OrderBy>
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>