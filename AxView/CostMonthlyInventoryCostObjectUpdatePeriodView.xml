<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMonthlyInventoryCostObjectUpdatePeriodView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostMonthlyInventoryCostObjectUpdatePeriodView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computeStatementLineCategoryLevel2Amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes amount for at statement line category level 2.
    /// </summary>
    private static str computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2 _category)
    {
        TableName       viewName = tableStr(CostMonthlyInventoryCostObjectUpdatePeriodView);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(CostObjectStatementCache),fieldStr(CostObjectStatementCache, StatementLineCategoryLevel2)),
                        SysComputedColumn::comparisonLiteral(_category)),
                    SysComputedColumn::returnField(viewName, identifierStr(CostObjectStatementCache),fieldStr(CostObjectStatementCache, Amount)),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeStatementLineCategoryLevel3Amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the amount for at statement line category level 2.
    /// </summary>
    private static str computeStatementLineCategoryLevel3Amount(CostStatementLineCategoryLevel3 _category)
    {
        TableName       viewName = tableStr(CostMonthlyInventoryCostObjectUpdatePeriodView);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(CostObjectStatementCache),fieldStr(CostObjectStatementCache, StatementLineCategoryLevel3)),
                        SysComputedColumn::comparisonLiteral(_category)),
                    SysComputedColumn::returnField(viewName, identifierStr(CostObjectStatementCache),fieldStr(CostObjectStatementCache, Amount)),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfProcuredMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of procured materials.
    /// </summary>
    public static str costOfProcuredMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::Procured);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfManufacturedMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of manufactured materials.
    /// </summary>
    public static str costOfManufacturedMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::ManufacturedCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfDisposedMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of disposed materials.
    /// </summary>
    public static str costOfDisposedMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::Disposed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfConsumedMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of consumed materials..
    /// </summary>
    public static str costOfConsumedMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::ConsumedMaterialsCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfTransferedMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of consumed materials..
    /// </summary>
    public static str costOfTransferedMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::Transferred);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfSoldMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of consumed materials..
    /// </summary>
    public static str costOfSoldMaterials()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel2Amount(CostStatementLineCategoryLevel2::Sold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costOfDisposedMaterialsInCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the cost of disposed materials in counting.
    /// </summary>
    public static str costOfDisposedMaterialsInCounting()
    {
        return CostMonthlyInventoryCostObjectUpdatePeriodView::computeStatementLineCategoryLevel3Amount(CostStatementLineCategoryLevel3::Counting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the ItemId.
    /// </summary>
    private static str itemId()
    {
        TableName       viewName = tableStr(CostMonthlyInventoryCostObjectUpdatePeriodView);

        return SysComputedColumn::returnField(viewName, identifierStr(CostObjectStatementCache),fieldStr(CostObjectStatementCache, ResourceId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a literal expression that computes the source table id.
    /// </summary>
    public static str sourceTableId()
    {
        return SysComputedColumn::returnLiteral(tableNum(CostMonthlyInventoryCostObjectUpdatePeriodView));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@CostManagement:Developer_CostMonthlyInventoryCostObjectUpdatePeriodView</DeveloperDocumentation>
	<Label>@CostManagement:View_CostMonthlyInventoryCostObjectUpdatePeriodView</Label>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<ViewMethod>itemId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ConfigId</Name>
			<DataField>ConfigId</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ColorId</Name>
			<DataField>ColorId</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SizeId</Name>
			<DataField>SizeId</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StyleId</Name>
			<DataField>StyleId</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SiteId</Name>
			<DataField>SiteId</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Amount</Name>
			<DataField>Amount</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfProcuredMaterials</Name>
			<ViewMethod>costOfProcuredMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfManufacturedMaterials</Name>
			<ViewMethod>costOfManufacturedMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfDisposedMaterials</Name>
			<ViewMethod>costOfDisposedMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfDisposedMaterialsInCounting</Name>
			<ViewMethod>costOfDisposedMaterialsInCounting</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfConsumedMaterials</Name>
			<ViewMethod>costOfConsumedMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfTransferedMaterials</Name>
			<ViewMethod>costOfTransferedMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfSoldMaterials</Name>
			<ViewMethod>costOfSoldMaterials</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>NetChange</Name>
			<DataField>Amount</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EndingBalance</Name>
			<DataField>Amount</DataField>
			<DataSource>CostObjectStatementCache</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>SourceTableId</Name>
			<ExtendedDataType>TableId</ExtendedDataType>
			<ViewMethod>sourceTableId</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CostObjectStatementCache</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CostObjectStatementCache</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>StatementType</Name>
						<Field>StatementType</Field>
						<Value>Inventory</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>