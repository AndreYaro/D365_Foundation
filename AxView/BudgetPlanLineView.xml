<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanLineView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionCurrencyExpenseAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>TransactionCurrencyExpenseAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>TransactionCurrencyExpenseAmount</c> field.
    /// </returns>
    private static str getTransactionCurrencyExpenseAmountSql()
    {
        DictView budgetPlanLineView = new DictView(tableNum(BudgetPlanLineView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanLineView.query().dataSourceTable(tableNum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanLineView.computedColumnString(
                                budgetPlanLineDataSourceName,
                                fieldStr(BudgetPlanLine, BudgetClass),
                                FieldNameGenerationMode::WhereClause);

        str transactionCurrencyAmount = budgetPlanLineView.computedColumnString(
                                            budgetPlanLineDataSourceName,
                                            fieldStr(BudgetPlanLine, TransactionCurrencyAmount),
                                            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Expense)),
                    transactionCurrencyAmount,
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyRevenueAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>TransactionCurrencyRevenueAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>TransactionCurrencyRevenueAmount</c> field.
    /// </returns>
    private static str getTransactionCurrencyRevenueAmountSql()
    {
        DictView budgetPlanLineView = new DictView(tableNum(BudgetPlanLineView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanLineView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanLineView.computedColumnString(
                                budgetPlanLineDataSourceName,
                                fieldStr(BudgetPlanLine, BudgetClass),
                                FieldNameGenerationMode::WhereClause);

        str transactionCurrencyAmount = budgetPlanLineView.computedColumnString(
                                            budgetPlanLineDataSourceName,
                                            fieldStr(BudgetPlanLine, TransactionCurrencyAmount),
                                            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Revenue)),
                    SysComputedColumn::negative(transactionCurrencyAmount),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExpenseAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>AccountingCurrencyExpenseAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>AccountingCurrencyExpenseAmount</c> field.
    /// </returns>
    private static str getAccountingCurrencyExpenseAmountSql()
    {
        DictView budgetPlanLineView = new DictView(tableNum(BudgetPlanLineView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanLineView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanLineView.computedColumnString(
                                budgetPlanLineDataSourceName,
                                fieldStr(BudgetPlanLine, BudgetClass),
                                FieldNameGenerationMode::WhereClause);

        str accountingCurrencyAmount = budgetPlanLineView.computedColumnString(
                                            budgetPlanLineDataSourceName,
                                            fieldStr(BudgetPlanLine, AccountingCurrencyAmount),
                                            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Expense)),
                    accountingCurrencyAmount,
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyRevenueAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>AccountingCurrencyRevenueAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>AccountingCurrencyRevenueAmount</c> field.
    /// </returns>
    private static str getAccountingCurrencyRevenueAmountSql()
    {
        DictView budgetPlanLineView = new DictView(tableNum(BudgetPlanLineView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanLineView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanLineView.computedColumnString(
                            budgetPlanLineDataSourceName,
                            fieldStr(BudgetPlanLine, BudgetClass),
                            FieldNameGenerationMode::WhereClause);

        str accountingCurrencyAmount = budgetPlanLineView.computedColumnString(
                                            budgetPlanLineDataSourceName,
                                            fieldStr(BudgetPlanLine, AccountingCurrencyAmount),
                                            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Revenue)),
                    SysComputedColumn::negative(accountingCurrencyAmount),
                    SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantitySql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>Quantity</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>Quantity</c> field.
    /// </returns>
    private static str getQuantitySql()
    {
        DictView budgetPlanLineView = new DictView(tableNum(BudgetPlanLineView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanLineView.query().dataSourceTable(tableNum(BudgetPlanLine)).name();

        return budgetPlanLineView.computedColumnString(
                    budgetPlanLineDataSourceName,
                    fieldStr(BudgetPlanLine, Quantity),
                    FieldNameGenerationMode::WhereClause);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetPlanHeader</Name>
			<DataField>BudgetPlanHeader</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetPlanScenario</Name>
			<DataField>BudgetPlanScenario</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EffectiveDate</Name>
			<DataField>EffectiveDate</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrencyCode</Name>
			<DataField>TransactionCurrencyCode</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyExpenseAmount</Name>
			<Label>@SYS305529</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getTransactionCurrencyExpenseAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyRevenueAmount</Name>
			<Label>@SYS305530</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getTransactionCurrencyRevenueAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountingCurrencyExpenseAmount</Name>
			<Label>@SYS305531</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getAccountingCurrencyExpenseAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountingCurrencyRevenueAmount</Name>
			<Label>@SYS305532</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getAccountingCurrencyRevenueAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Position</Name>
			<DataField>Position</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AssetId</Name>
			<DataField>AssetId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjectId</Name>
			<DataField>ProjectId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProposedAsset</Name>
			<DataField>ProposedAsset</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProposedProject</Name>
			<DataField>ProposedProject</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Comment</Name>
			<DataField>Comment</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Quantity</Name>
			<ExtendedDataType>BudgetPlanQuantity</ExtendedDataType>
			<ViewMethod>getQuantitySql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ForecastModelId</Name>
			<DataField>ForecastModelId</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetPlanLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetPlanLine</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>