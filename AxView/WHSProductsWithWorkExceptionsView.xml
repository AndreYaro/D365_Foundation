<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSProductsWithWorkExceptionsView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSProductsWithWorkExceptionsView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayTotalItemQtyPhysicalInventInThisLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the item inventory available physically at this location as registered in the system.
    /// </summary>
    /// <returns>
    /// Inventory quantity available physically.
    /// </returns>
    /// <remarks>
    /// This number is most probably not accurate, as there is an open work exception of type 'Short pick' or 'Override location',
    /// and is shown for awareness purpose only.
    /// </remarks>
    [SysClientCacheDataMethod]
    public display InventQtyAvailPhysical displayTotalItemQtyPhysicalInventInThisLocation()
    {
        InventDim inventDimCriteriaThisLocation;

        // InventDimId here is from the work line, meaning it only contains dimensions above location.
        inventDimCriteriaThisLocation = InventDim::find(this.InventDimId);
        inventDimCriteriaThisLocation.wMSLocationId = this.WMSLocationId;
        inventDimCriteriaThisLocation = InventDim::findOrCreate(inventDimCriteriaThisLocation);

        return whsInventOnHand::getWorkPhysicalInventHandlingQty(this.ItemId, inventDimCriteriaThisLocation.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalItemAvailPhysicalInOtherLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the total item inventory available physically for moving from other locations.
    /// </summary>
    /// <returns>Inventory quantity available physically.</returns>
    [SysClientCacheDataMethod]
    public display InventQtyAvailPhysical displayTotalItemAvailPhysicalInOtherLocations()
    {
        InventDim           inventDimCriteriaThisLocation;
        InventHandlingQty   availOrdered;
        InventHandlingQty   availPhysicalWHLevel;
        InventHandlingQty   availPhysicalThisLocation;

        var locationLevel = WHSReservationHierarchyProvider::construct().getLocationHierarchyLevel(this.inventTable());

        // InventDimId here is from the work line, meaning it only contains dimensions above location.
        var inventDimCriteriaWithoutLocation = InventDim::find(this.InventDimId);
        [availPhysicalWHLevel, availOrdered] = WHSInventOnHand::getAvailHandlingQuantityForLevel(this.ItemId, inventDimCriteriaWithoutLocation, locationLevel, false);

        inventDimCriteriaThisLocation.data(inventDimCriteriaWithoutLocation);
        inventDimCriteriaThisLocation.wMSLocationId = this.WMSLocationId;
        inventDimCriteriaThisLocation = InventDim::findOrCreate(inventDimCriteriaThisLocation);
        [availPhysicalThisLocation, availOrdered] = WHSInventOnHand::getAvailHandlingQuantityForLevel(this.ItemId, inventDimCriteriaThisLocation, locationLevel, false);

        return availPhysicalWHLevel - availPhysicalThisLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalIncomingWorkInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the total work inventory quantity for all incoming puts to this location for this product/dimensions.
    /// </summary>
    /// <returns>Inventory quantity in all incoming work puts.</returns>
    [SysClientCacheDataMethod]
    public display WHSInventQtyWork displayTotalIncomingWorkInventQty()
    {
        WHSWorkLineView workLinePut;

        select sum(InventQtyWork) from workLinePut
            where workLinePut.InventLocationId == this.InventLocationId
                && workLinePut.WMSLocationId == this.WMSLocationId
                && workLinePut.WorkType == WHSWorkType::Put
                && workLinePut.ItemId == this.ItemId
                && workLinePut.InventDimId == this.InventDimId
                && (workLinePut.WorkStatus == WHSWorkStatus::Open
                || workLinePut.WorkStatus == WHSWorkStatus::InProcess);

        return workLinePut.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the related <c>InventTable</c> record.
    /// </summary>
    /// <returns>An <c>InventTable</c> record.</returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<Label>@WAX:ProductsWithWorkExceptions</Label>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventLocationId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>WHSWorkLineView</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>WMSLocationId</Name>
			<DataField>WMSLocationId</DataField>
			<DataSource>WHSWorkExceptionLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>WHSWorkLineView</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>WHSWorkLineView</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProductsWithWorkExceptionsCount</Name>
			<Aggregation>Count</Aggregation>
			<DataField>WorkLineRecId</DataField>
			<DataSource>WHSWorkLineView</DataSource>
		</AxViewField>
	</Fields>
	<Indexes>
		<AxViewIndex>
			<Name>LocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxViewIndexField>
					<DataField>InventLocationId</DataField>
				</AxViewIndexField>
				<AxViewIndexField>
					<DataField>WMSLocationId</DataField>
				</AxViewIndexField>
			</Fields>
		</AxViewIndex>
		<AxViewIndex>
			<Name>ReleasedProductIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxViewIndexField>
					<DataField>ItemId</DataField>
				</AxViewIndexField>
				<AxViewIndexField>
					<DataField>InventDimId</DataField>
				</AxViewIndexField>
			</Fields>
		</AxViewIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSWorkLineView</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSWorkLineView</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WHSWorkExceptionLog</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>WHSWorkExceptionLog</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>Status</Name>
								<Field>Status</Field>
								<Status>Locked</Status>
								<Value>Open</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkId</Field>
								<JoinDataSource>WHSWorkLineView</JoinDataSource>
								<RelatedField>WorkId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>LineNum</Field>
								<JoinDataSource>WHSWorkLineView</JoinDataSource>
								<RelatedField>LineNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>WorkType</Name>
						<Field>WorkType</Field>
						<Status>Locked</Status>
						<Value>Pick</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>LoadLineRefRecId</Name>
						<Field>LoadLineRefRecId</Field>
						<Status>Hidden</Status>
						<Value>!0</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>WorkTransType</Name>
						<Field>WorkTransType</Field>
						<Status>Locked</Status>
						<Value>Sales,TransferIssue</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField1</Name>
						<DataSource>WHSWorkLineView</DataSource>
						<Field>InventLocationId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField2</Name>
						<DataSource>WHSWorkExceptionLog</DataSource>
						<Field>WMSLocationId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField3</Name>
						<DataSource>WHSWorkLineView</DataSource>
						<Field>ItemId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>QueryGroupByField4</Name>
						<DataSource>WHSWorkLineView</DataSource>
						<Field>InventDimId</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>