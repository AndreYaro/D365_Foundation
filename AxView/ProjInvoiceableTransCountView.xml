<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceableTransCountView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceableTransCountView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHourCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced hour transactions.
    /// </summary>
    /// <returns>Count of hour transactions in string.</returns>
    private static str getHourCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjEmplInvoiceableTransCountByProjIdView),
            fieldstr(ProjEmplInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeeCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced fee transactions.
    /// </summary>
    /// <returns>Count of fee transactions in string.</returns>
    private static str getFeeCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjRevenueInvoiceableTransCountByProjIdView),
            fieldstr(ProjRevenueInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubscriptionCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced subscription transactions.
    /// </summary>
    /// <returns>Count of invoiced subscription transactions in string.</returns>
    private static str getSubscriptionCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjSubscriptionInvoiceableTransCountByProjIdView),
            fieldstr(ProjSubscriptionInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced expense transactions.
    /// </summary>
    /// <returns>Count of expense transactions in string.</returns>
    private static str getExpenseCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjExpenseInvoiceableTransCountByProjIdView),
            fieldstr(ProjExpenseInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced item transactions.
    /// </summary>
    /// <returns>Count of item transactions in string.</returns>
    private static str getItemCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjItemInvoiceableTransCountByProjIdView),
            fieldstr(ProjItemInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnAccountCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced on-account transactions.
    /// </summary>
    /// <returns>Count of on account transactions in string.</returns>
    private static str getOnAccountCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjOnAccountInvoiceableTransCountByProjIdView),
            fieldstr(ProjOnAccountInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineCanBeInvoicedCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of can be invoiced sales line transactions.
    /// </summary>
    /// <returns>Count of on sales line transactions in string.</returns>
    private static str getSalesLineCanBeInvoicedCount()
    {
        str zeroCount = SysComputedColumn::returnLiteral(0);

        str canBeInvoicedCount = SysComputedColumn::returnField(
            tableStr(ProjInvoiceableTransCountView),
            identifierStr(ProjSalesLineInvoiceableTransCountByProjIdView),
            fieldstr(ProjSalesLineInvoiceableTransCountByProjIdView, CanBeInvoicedCount));
        
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(canBeInvoicedCount), zeroCount, canBeInvoicedCount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ContractId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>HourCanBeInvoiceCount</Name>
			<ViewMethod>getHourCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>FeeCanBeInvoiceCount</Name>
			<ViewMethod>getFeeCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>SubscriptionCanBeInvoiceCount</Name>
			<ViewMethod>getSubscriptionCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>ExpenseCanBeInvoiceCount</Name>
			<ViewMethod>getExpenseCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>ItemCanBeInvoiceCount</Name>
			<ViewMethod>getItemCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>OnAccountCanBeInvoiceCount</Name>
			<ViewMethod>getOnAccountCanBeInvoicedCount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>SalesLineCanBeInvoiceCount</Name>
			<ViewMethod>getSalesLineCanBeInvoicedCount</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjEmplInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjEmplInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjRevenueInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjRevenueInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjSubscriptionInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjSubscriptionInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjExpenseInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjExpenseInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjItemInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjItemInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjOnAccountInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjOnAccountInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjSalesLineInvoiceableTransCountByProjIdView</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjSalesLineInvoiceableTransCountByProjIdView</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>