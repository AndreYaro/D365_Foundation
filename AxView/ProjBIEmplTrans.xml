<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBIEmplTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBIEmplTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projActualBurdenBillableRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual burden billable rate expression.
/// </summary>
/// <returns>
/// An expression for the actual burden billable rate.
/// </returns>
public static str projActualBurdenBillableRate()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Burden (Billable Rate)]
    // AS ([Measures].[Hours Quantity], [Project type utilization settings].[Billable type].&[1])
    //+
    //([Measures].[Hours Quantity], ([Project type utilization settings].[Billable type].&[3], [Line property].[Chargeable].&[0])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            transTypeList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,ToBeInvoiced)).configurationKeyId()))
    {
        return SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Burden))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0));
    }
    else
    {
        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::AccToLineProperty)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, ToBeInvoiced)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Burden))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0))
        );
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualBurdenEfficiencyRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual burden efficiency rate expression.
/// </summary>
/// <returns>
/// An expression for the actual burden efficiency rate.
/// </returns>
public static str projActualBurdenEfficiencyRate()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Burden (Efficiency Rate)]
    // AS ([Measures].[Hours Quantity], [Project type utilization settings].[Efficiency type].&[1])
    //+
    //([Measures].[Hours Quantity], ([Project type utilization settings].[Efficiency type].&[3], [Line property].[Efficient hours].&[0])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            transTypeList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,IsEfficiency)).configurationKeyId()))
    {
        return SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Burden))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0));
    }
    else
    {
        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::AccToLineProperty)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, IsEfficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::No)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Burden))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0))
        );
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualOvertimeHoursBillableRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual overtime hours billable rate expression.
/// </summary>
/// <returns>
/// An expression for the actual overtime hours billable rate.
/// </returns>
public static str projActualOvertimeHoursBillableRate()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Overtime Hours (Billable Rate)]
    // AS SUM(
    //(EXCEPT([Project type utilization settings].[Billable type].CHILDREN
    //     , [Project type utilization settings].[Billable type].&[2]),
    //  [Line property].[Add to norm hours - Billable rate].&[1]),
    //  [Measures].[Hours Quantity]),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            rateList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,NormBillable)).configurationKeyId()))
    {
        return SysComputedColumn::returnLiteral(0);
    }
    else
    {
        rateList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::NotIncluded)))
        );

        rateList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, NormBillable)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::if(
                        SysComputedColumn::and(rateList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)
         );
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualOvertimeHoursEfficiencyRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual overtime hours efficiency rate expression.
/// </summary>
/// <returns>
/// An expression for the actual overtime hours efficiency rate.
/// </returns>
public static str projActualOvertimeHoursEfficiencyRate()
{
    //CREATE MEMBER CURRENTCUBE.[Budget Overtime Hours (Efficiency Rate)]
    // AS SUM(
    //(EXCEPT([Project type utilization settings].[Efficiency type].CHILDREN, [Project type utilization settings].[Efficiency type].&[2]),
    //[Line property].[Add to norm hours - Efficient rate].&[1]),
    //[Measures].[Hour forecast Quantity]),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            rateList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,NormEfficiency)).configurationKeyId()))
    {
        return SysComputedColumn::returnLiteral(0);
    }
    else
    {
        rateList.addEnd(
                    SysComputedColumn::notEqualExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::NotIncluded)))
        );

        rateList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, NormEfficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::if(
                        SysComputedColumn::and(rateList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)
         );
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualUtilizationBillableRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual utilization billable rate expression.
/// </summary>
/// <returns>
/// An expression for the actual utilization billable rate.
/// </returns>
public static str projActualUtilizationBillableRate()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Utilization (Billable Rate)]
    // AS ([Measures].[Hours Quantity], [Project type utilization settings].[Billable type].&[0])
    //+
    //([Measures].[Hours Quantity], ([Project type utilization settings].[Billable type].&[3], [Line property].[Chargeable].&[1])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            transTypeList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,ToBeInvoiced)).configurationKeyId()))
    {
        return SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Utilization))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0));
    }
    else
    {
        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::AccToLineProperty)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, ToBeInvoiced)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Billable)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Utilization))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0))
        );
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualUtilizationEfficiencyRate</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual utilization efficiency rate expression.
/// </summary>
/// <returns>
/// An expression for the actual utilization efficiency rate.
/// </returns>
public static str projActualUtilizationEfficiencyRate()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Utilization (Efficiency Rate)]
    // AS ([Measures].[Hours Quantity], [Project type utilization settings].[Efficiency type].&[0])
    //+
    //([Measures].[Hours Quantity], ([Project type utilization settings].[Efficiency type].&[3], [Line property].[Efficient hours].&[1])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjBIEmplTrans);

    List            transTypeList = new List(Types::String);

    if (!isConfigurationkeyEnabled(new SysDictField(tableNum(ProjLineProperty), fieldNum(ProjLineProperty,IsEfficiency)).configurationKeyId()))
    {
        return SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Utilization))),
                SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                SysComputedColumn::returnLiteral(0));
    }
    else
    {
        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::AccToLineProperty)))
        );

        transTypeList.addEnd(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(viewName, identifierStr(ProjLineProperty_1) , fieldStr(ProjLineProperty, IsEfficiency)),
                        SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
        );

        return SysComputedColumn::add(
                    SysComputedColumn::if(
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(viewName, identifierStr(ProjUtilTypes_1) , fieldStr(ProjUtilTypes, Efficiency)),
                            SysComputedColumn::comparisonLiteral(enum2int(ProjUtilOption::Utilization))),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::if(
                        SysComputedColumn::and(transTypeList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjEmplTrans) , fieldStr(ProjBIEmplTrans, Qty)),
                        SysComputedColumn::returnLiteral(0))
        );
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124894</DeveloperDocumentation>
	<Label>@SYS68523</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<Query>ProjBIEmplTrans</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CategoryId</Name>
			<DataField>CategoryId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LinePropertyId</Name>
			<DataField>LinePropertyId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Txt</Name>
			<DataField>Txt</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransId</Name>
			<DataField>TransId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyId</Name>
			<DataField>CurrencyId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxItemGroupId</Name>
			<DataField>TaxItemGroupId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VoucherJournal</Name>
			<DataField>VoucherJournal</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransIdRef</Name>
			<DataField>TransIdRef</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionOrigin</Name>
			<DataField>TransactionOrigin</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AdjRefTransId</Name>
			<DataField>AdjRefTransId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>dataAreaId1</Name>
			<DataField>dataAreaId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxGroupId</Name>
			<DataField>TaxGroupId</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>FromTime</Name>
			<DataField>FromTime</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ToTime</Name>
			<DataField>ToTime</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Type</Name>
			<DataField>Type</DataField>
			<DataSource>ProjTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DefaultDimension</Name>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Efficiency</Name>
			<DataField>Efficiency</DataField>
			<DataSource>ProjUtilTypes_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Billable</Name>
			<DataField>Billable</DataField>
			<DataSource>ProjUtilTypes_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjType</Name>
			<DataField>ProjType</DataField>
			<DataSource>ProjUtilTypes_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>isEfficiency</Name>
			<DataField>isEfficiency</DataField>
			<DataSource>ProjLineProperty_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualBurdenEfficiencyRate</Name>
			<Label>@SYS324734</Label>
			<ViewMethod>projActualBurdenEfficiencyRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualUtilizationEfficiencyRate</Name>
			<Label>@SYS324749</Label>
			<ViewMethod>projActualUtilizationEfficiencyRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ToBeInvoiced</Name>
			<DataField>ToBeInvoiced</DataField>
			<DataSource>ProjLineProperty_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualUtilizationBillableRate</Name>
			<Label>@SYS324750</Label>
			<ViewMethod>projActualUtilizationBillableRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualBurdenBillableRate</Name>
			<Label>@SYS324745</Label>
			<ViewMethod>projActualBurdenBillableRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>NormEfficiency</Name>
			<DataField>NormEfficiency</DataField>
			<DataSource>ProjLineProperty_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>NormBillable</Name>
			<DataField>NormBillable</DataField>
			<DataSource>ProjLineProperty_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualOvertimeHoursEfficiencyRate</Name>
			<Label>@SYS324682</Label>
			<ViewMethod>projActualOvertimeHoursEfficiencyRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualOvertimeHoursBillableRate</Name>
			<Label>@SYS324683</Label>
			<ViewMethod>projActualOvertimeHoursBillableRate</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjInvoiceProjId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CustAccount</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceCategory</Name>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjEmplTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupId</Name>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupName</Name>
			<DataField>Name</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>