<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceTransExpanded</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceTransExpanded extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>basedOnPurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a derived column to identify if the transaction is originating from a purchase order.
    /// </summary>
    /// <returns>
    /// If it is based on a purchase order it returns 1, otherwise 0.
    /// </returns>
    public static str basedOnPurchOrder()
    {
        Map         switchMap       = new Map(Types::String, Types::String);
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         comparisonField = fieldStr(VendInvoiceTrans, PurchID);

        str         comparisonExp   = SysComputedColumn::compareExpressions(
                                        SysComputedColumn::comparisonField(viewName,
                                                                           dataSourceName,
                                                                           comparisonField),
                                        '=',
                                        SysComputedColumn::comparisonLiteral(''));

        switchMap.insert(comparisonExp,
                            SysComputedColumn::returnLiteral(NoYes::No));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProductExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an expression that checks if the current row is for a stocked product.
    /// </summary>
    /// <returns>
    /// true if the record is for a stocked product, otherwise false.
    /// </returns>
    private static str isStockedProductExpression()
    {
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         comparisonField = fieldStr(VendInvoiceTrans, StockedProduct);

        return SysComputedColumn::compareExpressions(
                    SysComputedColumn::comparisonField(viewName,
                                                        dataSourceName,
                                                        comparisonField),
                    ' = ',
                    SysComputedColumn::comparisonLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategoryCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines a derived column for the universal transaction line category.
    /// </summary>
    /// <returns>
    /// If it is an item transaction - it returns the item transaction if the product
    /// is currently assigned to a category; otherwise it returns the procurement category
    /// stored on the transaction line.
    /// </returns>
    public static str procurementCategoryCurrent()
    {
        return SysComputedColumn::currentItemProductCategory(tableStr(VendInvoiceTransExpanded),
                                                             identifierStr(VendInvoiceTrans),
                                                             fieldStr(VendInvoiceTrans, ItemId),
                                                             fieldStr(VendInvoiceTrans, ProcurementCategory),
                                                             identifierStr(EcoResProductCategoryExpanded),
                                                             fieldStr(EcoResProductCategoryExpanded, RecIdCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the derived column for the purchaseAmountMst field.
    /// </summary>
    /// <returns>
    /// A string containing the derived column expression.
    /// </returns>
    public static str purchaseAmountMst()
    {
        Map switchMap = new Map(Types::String, Types::String);

        switchMap.insert(VendInvoiceTransExpanded::isStockedProductExpression(),
                         VendInvoiceTransExpanded::purchaseAmountMstParameterized(fieldStr(VendInvoiceTrans, InventQty)));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         VendInvoiceTransExpanded::purchaseAmountMstParameterized(fieldStr(VendInvoiceTrans, Qty)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseAmountMstParameterized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the derived column for the purchaseAmountMst field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field holding the quantity value.
    /// </param>
    /// <returns>
    /// A string containing the derived column expression.
    /// </returns>
    /// <remarks>
    /// The returned string is similar to:
    ///         CASE
    ///            WHEN t1._fieldName greater than 0
    ///            THEN t1.lineamountmst
    ///            ELSE 0
    ///         END
    /// </remarks>
    private static str purchaseAmountMstParameterized(str _fieldName)
    {
        Map         switchMap       = new Map(Types::String, Types::String);
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         returnField     = fieldStr(VendInvoiceTrans, LineAmountMST);

        str         comparisonExp   = SysComputedColumn::compareExpressions(
                                        SysComputedColumn::comparisonField(viewName,
                                                                           dataSourceName,
                                                                           _fieldName),
                                        ' > ',
                                        SysComputedColumn::comparisonLiteral(0));

        switchMap.insert(comparisonExp,
                         SysComputedColumn::returnField(viewName,
                                                       dataSourceName,
                                                       returnField));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the purchaseQty column for a particular quantity field.
    /// </summary>
    /// <returns>
    /// A string containing the derived column expression.
    /// </returns>
    /// <remarks>
    /// The returned string is similar to:
    ///         CASE
    ///               WHEN t1.INVENTQTY > 0
    ///               THEN t1.INVENTQTY
    ///               ELSE 0
    ///         END
    /// </remarks>
    public static str purchaseQty()
    {
        Map         switchMap       = new Map(Types::String, Types::String);
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         comparisonField = fieldStr(VendInvoiceTrans, InventQty);
        str         comparisonExp   = SysComputedColumn::compareExpressions(
                                        SysComputedColumn::comparisonField(viewName,
                                                                           dataSourceName,
                                                                           comparisonField),
                                        ' > ',
                                        SysComputedColumn::comparisonLiteral(0));

        switchMap.insert(comparisonExp,
                         SysComputedColumn::returnField(viewName,
                                                       dataSourceName,
                                                       comparisonField));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the derived column for the <c>returnAmountMst</c> field.
    /// </summary>
    /// <returns>
    /// A string that contains the derived column expression.
    /// </returns>
    public static str returnAmountMst()
    {
        Map switchMap = new Map(Types::String, Types::String);

        switchMap.insert(VendInvoiceTransExpanded::isStockedProductExpression(),
                         VendInvoiceTransExpanded::returnAmountMstParameterized(fieldStr(VendInvoiceTrans, InventQty)));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         VendInvoiceTransExpanded::returnAmountMstParameterized(fieldStr(VendInvoiceTrans, Qty)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnAmountMstParameterized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the derived column for the <c>returnAmountMst</c> field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field holding the quantity value.
    /// </param>
    /// <returns>
    /// A string that contains the derived column expression.
    /// </returns>
    /// <remarks>
    /// The returned string resembles:
    ///     CASE
    ///         WHEN t1._fieldName less than 0
    ///         THEN Abs(t1.lineamountmst)
    ///         ELSE 0
    ///     END.
    /// </remarks>
    private static str returnAmountMstParameterized(str _fieldName)
    {
        Map         switchMap       = new Map(Types::String, Types::String);
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         returnField     = fieldStr(VendInvoiceTrans, LineAmountMST);

        str         comparisonExp   = SysComputedColumn::compareExpressions(
                                        SysComputedColumn::comparisonField(viewName,
                                                                           dataSourceName,
                                                                           _fieldName),
                                        ' < ',
                                        SysComputedColumn::comparisonLiteral(0));

        switchMap.insert(comparisonExp,
                            SysComputedColumn::abs(
                                SysComputedColumn::returnField(viewName,
                                                               dataSourceName,
                                                               returnField)));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the derived column for the <c>returnQty</c> field.
    /// </summary>
    /// <returns>
    /// A string that contains the derived column expression.
    /// </returns>
    /// <remarks>
    /// The returned string resembles:
    ///     CASE
    ///         WHEN t1.INVENTQTY less than 0
    ///         THEN Abs(t1.INVENTQTY)
    ///         ELSE 0
    ///     END.
    /// </remarks>
    public static str returnQty()
    {
        Map         switchMap       = new Map(Types::String, Types::String);
        TableName   viewName        = tableStr(VendInvoiceTransExpanded);
        str         dataSourceName  = identifierStr(VendInvoiceTrans);
        str         comparisonField = fieldStr(VendInvoiceTrans, InventQty);
        str         comparisonExp   = SysComputedColumn::compareExpressions(
                                        SysComputedColumn::comparisonField(viewName,
                                                                           dataSourceName,
                                                                           comparisonField),
                                        ' < ',
                                        SysComputedColumn::comparisonLiteral(0));

        switchMap.insert(comparisonExp,
                            SysComputedColumn::abs(
                                SysComputedColumn::returnField(viewName,
                                                               dataSourceName,
                                                               comparisonField)));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS323779</DeveloperDocumentation>
	<Label>@SYS108836</Label>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<Query>VendInvoiceTransExpanded</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryCurrent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>QtyPhysical</Name>
			<DataField>QtyPhysical</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LineAmountMST</Name>
			<DataField>LineAmountMST</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProcurementCategory</Name>
			<DataField>ProcurementCategory</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InvoiceAccount</Name>
			<DataField>InvoiceAccount</DataField>
			<DataSource>VendInvoiceJour</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemBuyerGroupId</Name>
			<DataField>ItemBuyerGroupId</DataField>
			<DataSource>VendInvoiceJour</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>OrderAccount</Name>
			<DataField>OrderAccount</DataField>
			<DataSource>VendInvoiceJour</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RemittanceAddress</Name>
			<DataField>RemittanceAddress</DataField>
			<DataSource>VendInvoiceJour</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>configId</Name>
			<DataField>configId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventSizeId</Name>
			<DataField>InventSizeId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventColorId</Name>
			<DataField>InventColorId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventLocationId</Name>
			<DataField>InventLocationId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProductCategory</Name>
			<DataField>RecIdCategory</DataField>
			<DataSource>EcoResProductCategoryExpanded</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PurchUnit</Name>
			<DataField>PurchUnit</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>ProcurementCategoryCurrent</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<ViewMethod>ProcurementCategoryCurrent</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>PurchaseQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<ViewMethod>purchaseQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>PurchaseAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>purchaseAmountMst</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ReturnQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<ViewMethod>returnQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ReturnAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>returnAmountMst</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PartDelivery</Name>
			<DataField>PartDelivery</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InvoiceDate</Name>
			<DataField>InvoiceDate</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StockedProduct</Name>
			<DataField>StockedProduct</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>BasedOnPurchaseOrder</Name>
			<Label>@SYS313763</Label>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<ViewMethod>BasedOnPurchOrder</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>VendInvoiceTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VendorType</Name>
			<DataField>VendorCategoryStatus</DataField>
			<DataSource>VendCategoryInvoiceJournal</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventoryUnitId</Name>
			<DataField>UnitId</DataField>
			<DataSource>InventTableModule</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventStyleId</Name>
			<DataField>InventStyleId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventVersionId</Name>
			<DataField>InventVersionId</DataField>
			<DataSource>InventDim</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>