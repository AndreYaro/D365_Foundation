<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerAccrualAdjustmentView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkerAccrualAdjustmentView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAccruedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the accrued hours value if the value of <c>PayrollAccrualAdjustmentType</c> enum is Accrued.
    /// </summary>
    /// <returns>
    /// The accrued hours.
    /// </returns>
    public static str displayAccruedHours()
    {
        return  SysComputedColumn::if(
                                        SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment,AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::Accrued)),

                                        SysComputedColumn::returnField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, AdjustedHours)),

                                        SysComputedColumn::returnLiteral(0)

                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCarryOverHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the carried over hours value if the value of <c>PayrollAccrualAdjustmentType</c> enum is CarryForward.
    /// </summary>
    /// <returns>
    /// The carried over hours.
    /// </returns>
    public static str displayCarryOverHours()
    {
        return  SysComputedColumn::if(
                                        SysComputedColumn::or2(
                                            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment,AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::CarryForward)),
                                            SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment,AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::CarryForwardBalance))),

                                        SysComputedColumn::returnField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, AdjustedHours)),

                                        SysComputedColumn::returnLiteral(0)

                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayComments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description field value.
    /// </summary>
    /// <returns>
    /// The value of description field.
    /// </returns>
    public static str displayComments()
    {
        return SysComputedColumn::returnField(tableStr(PayrollWorkerAccrualAdjustmentView), tableStr(PayrollWorkerAccrualAdjustment), fieldStr(PayrollWorkerAccrualAdjustment, Description));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCreatedByUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the user id who created the record.
    /// </summary>
    /// <returns>
    /// The user Id.
    /// </returns>
    public static str displayCreatedByUserId()
    {
        return  SysComputedColumn::if(
                                        SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::CarryForwardBalance)),

                                        SysComputedColumn::returnLiteral(''),

                                        SysComputedColumn::returnField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, CreatedBy))

                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the null value for earning code.
    /// </summary>
    /// <returns>
    /// The null earning code.
    /// </returns>
    /// <remarks>
    /// As this view is used to get the worker accrual adjustment data and is being used to create a union query to get the accrual transactions data,
    /// the value for the earning code is always null.
    /// </remarks>
    public static str displayEarningCode()
    {
        return SysComputedColumn::returnLiteral(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsPendingUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the false value always.
    /// </summary>
    /// <returns>
    /// The false value.
    /// </returns>
    /// <remarks>
    /// As this view is used to get the worker accrual adjustment data and is being used to create a union query to get the accrual transactions data,
    /// the value for this is always going to be false.
    /// </remarks>
    public static str displayIsPendingUsage()
    {
        return  SysComputedColumn::returnLiteral(enum2int(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPendingUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the pending usage hours.
    /// </summary>
    /// <returns>
    /// The pending usage hours.
    /// </returns>
    /// <remarks>
    /// As this view is used to get the worker accrual adjustment data and is being used to create a union query to get the accrual transactions data,
    /// the value for the pending usage hours is always zero.
    /// </remarks>
    public static str displayPendingUsage()
    {
        return SysComputedColumn::returnLiteral(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>PayrollAccrualTransSource</c> enum value based on value of <c>PayrollAccrualAdjustmentType</c> enum.
    /// </summary>
    /// <returns>
    /// The enum value for <c>PayrollAccrualTransSource</c> enum.
    /// </returns>
    public static str displayTransSource()
    {
        return  SysComputedColumn::if(
                                        SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::CarryForwardBalance)),

                                        SysComputedColumn::returnLiteral(enum2Value(PayrollAccrualTransSource::System)),

                                        SysComputedColumn::returnLiteral(enum2Value(PayrollAccrualTransSource::Manual))

                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUsedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the used hours value if the value of <c>PayrollAccrualAdjustmentType</c> enum is Used.
    /// </summary>
    /// <returns>
    /// The used hours.
    /// </returns>
    public static str displayUsedHours()
    {
        return  SysComputedColumn::if(
                                        SysComputedColumn::equalExpression(SysComputedColumn::comparisonField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment,AdjustmentType))
                                            , SysComputedColumn::comparisonLiteral(PayrollAccrualAdjustmentType::Used)),

                                        SysComputedColumn::returnField(tableStr(PayrollWorkerAccrualAdjustmentView), tablestr(PayrollWorkerAccrualAdjustment), fieldstr(PayrollWorkerAccrualAdjustment, AdjustedHours)),

                                        SysComputedColumn::returnLiteral(0)

                                    );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkerbenefitaccrualadjustmentTableStoresTheInform</DeveloperDocumentation>
	<Label>@Payroll:WorkerAccrualAdjustmentView</Label>
	<TitleField1>AccrualId</TitleField1>
	<TitleField2>WorkerName</TitleField2>
	<Query>PayrollWorkerAccrualAdjustmentQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Accrued</Name>
			<Label>@Payroll:Accrued</Label>
			<ExtendedDataType>PayrollAccrualAccruedHours</ExtendedDataType>
			<ViewMethod>displayAccruedHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Used</Name>
			<Label>@Payroll:Used</Label>
			<ExtendedDataType>PayrollAccrualUsedHours</ExtendedDataType>
			<ViewMethod>displayUsedHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CarryOver</Name>
			<Label>@Payroll:CarryForward</Label>
			<ExtendedDataType>PayrollAccrualCarriedOverHours</ExtendedDataType>
			<ViewMethod>displayCarryOverHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransactionDate</DataField>
			<DataSource>PayrollWorkerAccrualAdjustment</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Worker</Name>
			<DataField>Worker</DataField>
			<DataSource>PayrollWorkerEnrolledAccrual</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Accrual</Name>
			<DataField>Accrual</DataField>
			<DataSource>PayrollWorkerEnrolledAccrual</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>WorkerEnrolledAccrual</Name>
			<DataField>RecId</DataField>
			<DataSource>PayrollWorkerEnrolledAccrual</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>TransSource</Name>
			<ViewMethod>displayTransSource</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>CreatedByUserId</Name>
			<ExtendedDataType>SysUserId</ExtendedDataType>
			<ViewMethod>displayCreatedByUserId</ViewMethod>
			<StringSize>8</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccrualId</Name>
			<DataField>AccrualId</DataField>
			<DataSource>PayrollAccrual</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>WorkerName</Name>
			<DataField>Name</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>ManualTransComments</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<ViewMethod>displayComments</ViewMethod>
			<StringSize>60</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>PendingUsage</Name>
			<ExtendedDataType>PayrollAccrualUsedHours</ExtendedDataType>
			<ViewMethod>displayPendingUsage</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>IsPendingUsage</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<ViewMethod>displayIsPendingUsage</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>EarningCode</Name>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<ViewMethod>displayEarningCode</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CreateDateTime</Name>
			<DataField>createdDateTime</DataField>
			<DataSource>PayrollWorkerAccrualAdjustment</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>