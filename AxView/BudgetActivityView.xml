<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetActivityView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetActivityView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computeColumnOriginalBudgetAmount</Name>
				<Source><![CDATA[
    private static str computeColumnOriginalBudgetAmount()
    {
        TableName viewName = tableStr(BudgetActivityView);
        List transTypeList = new List(Types::String);

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(
                    viewName,
                    tableStr(BudgetActivityAnalysisCurrencyAmount),
                    fieldStr(BudgetActivityAnalysisCurrencyAmount, BudgetTransactionType)),
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::OriginalBudget)))
        );

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
            SysComputedColumn::returnField(
                viewName,
                tableStr(BudgetActivityAnalysisCurrencyAmount),
                fieldStr(BudgetActivityAnalysisCurrencyAmount, AccountingCurrencyAmount)),
            SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnRevisedBudgetAmount</Name>
				<Source><![CDATA[
    private static str computeColumnRevisedBudgetAmount()
    {
        TableName viewName = tableStr(BudgetActivityView);
        List transTypeList = new List(Types::String);

        str compareClause = SysComputedColumn::comparisonField(
            viewName,
            tableStr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, BudgetTransactionType));

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::OriginalBudget)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::Transfer)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::Amendment)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::Project)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::FixedAsset)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::SalesForecast)))
        );

        transTypeList.addEnd(
            SysComputedColumn::equalExpression(
                compareClause,
                SysComputedColumn::comparisonLiteral(enum2int(BudgetTransactionType::PurchForecast)))
        );

        return SysComputedColumn::if(
            SysComputedColumn::or(transTypeList),
                SysComputedColumn::returnField(
                    viewName,
                    tableStr(BudgetActivityAnalysisCurrencyAmount),
                    fieldStr(BudgetActivityAnalysisCurrencyAmount, AccountingCurrencyAmount)),
                SysComputedColumn::returnLiteral(0)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnCostOfGoodsSold</Name>
				<Source><![CDATA[
    private static str computeColumnCostOfGoodsSold()
    {
        return LedgerBIHelpers::computeColumnCostOfGoodsSold(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnTotalRevenue</Name>
				<Source><![CDATA[
    private static str computeColumnTotalRevenue()
    {
        return LedgerBIHelpers::computeColumnTotalRevenue(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnCash</Name>
				<Source><![CDATA[
    private static str computeColumnCash()
    {
        return LedgerBIHelpers::computeColumnCash(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnQuickRatioAssets</Name>
				<Source><![CDATA[
    private static str computeColumnQuickRatioAssets()
    {
        return LedgerBIHelpers::computeColumnQuickRatioAssets(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnLiabilities</Name>
				<Source><![CDATA[
    private static str computeColumnLiabilities()
    {
        return LedgerBIHelpers::computeColumnLiabilities(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnCurrentRatioAssets</Name>
				<Source><![CDATA[
    private static str computeColumnCurrentRatioAssets()
    {
        return LedgerBIHelpers::computeColumnCurrentRatioAssets(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnEquity</Name>
				<Source><![CDATA[
    private static str computeColumnEquity()
    {
        return LedgerBIHelpers::computeColumnEquity(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnCurrentLiabilities</Name>
				<Source><![CDATA[
    private static str computeColumnCurrentLiabilities()
    {
        return LedgerBIHelpers::computeColumnCurrentLiabilities(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnIncome</Name>
				<Source><![CDATA[
    private static str computeColumnIncome()
    {
        return LedgerBIHelpers::computeColumnIncome(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnExpenses</Name>
				<Source><![CDATA[
    private static str computeColumnExpenses()
    {
        return LedgerBIHelpers::computeColumnExpenses(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnTotalAssets</Name>
				<Source><![CDATA[
    private static str computeColumnTotalAssets()
    {
        return LedgerBIHelpers::computeColumnTotalAssets(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnSales</Name>
				<Source><![CDATA[
    private static str computeColumnSales()
    {
        return LedgerBIHelpers::computeColumnSales(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnProfitMarginTaxes</Name>
				<Source><![CDATA[
    private static str computeColumnProfitMarginTaxes()
    {
        return LedgerBIHelpers::computeColumnProfitMarginTaxes(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnSalesReturnAndDiscounts</Name>
				<Source><![CDATA[
    private static str computeColumnSalesReturnAndDiscounts()
    {
        return LedgerBIHelpers::computeColumnSalesReturnAndDiscounts(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnAccountsReceivable</Name>
				<Source><![CDATA[
    private static str computeColumnAccountsReceivable()
    {
        return LedgerBIHelpers::computeColumnAccountsReceivable(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnAccountsPayable</Name>
				<Source><![CDATA[
    private static str computeColumnAccountsPayable()
    {
        return LedgerBIHelpers::computeColumnAccountsPayable(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnReturnOnTotalAssetsExpenses</Name>
				<Source><![CDATA[
    private static str computeColumnReturnOnTotalAssetsExpenses()
    {
        return LedgerBIHelpers::computeColumnReturnOnTotalAssetsExpenses(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnOperatingExpenses</Name>
				<Source><![CDATA[
    private static str computeColumnOperatingExpenses()
    {
        return LedgerBIHelpers::computeColumnOperatingExpenses(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnAdditionalEarnings</Name>
				<Source><![CDATA[
    private static str computeColumnAdditionalEarnings()
    {
        return LedgerBIHelpers::computeColumnAdditionalEarnings(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeColumnSalesPlusReturnsAndDiscounts</Name>
				<Source><![CDATA[
    private static str computeColumnSalesPlusReturnsAndDiscounts()
    {
        return LedgerBIHelpers::computeColumnSalesPlusReturnsAndDiscounts(
            tableStr(BudgetActivityView),
            tablestr(BudgetActivityAnalysisCurrencyAmount),
            fieldStr(BudgetActivityAnalysisCurrencyAmount, AnalysisCurrencyAmount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AnalysisCurrencyAmount</Name>
			<DataField>AnalysisCurrencyAmount</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrencyAmount</Name>
			<DataField>TransactionCurrencyAmount</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingCurrencyAmount</Name>
			<DataField>AccountingCurrencyAmount</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionCurrency</Name>
			<DataField>TransactionCurrency</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetTransactionType</Name>
			<DataField>BudgetTransactionType</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetTransactionCode</Name>
			<DataField>BudgetTransactionCode</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelDataAreaId</Name>
			<DataField>BudgetModelDataAreaId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelId</Name>
			<DataField>BudgetModelId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransactionDate</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetSubModelId</Name>
			<DataField>BudgetSubModelId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetModelType</Name>
			<DataField>BudgetModelType</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerRecId</Name>
			<DataField>LedgerRecId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>FiscalCalendarPeriod</Name>
			<DataField>FiscalCalendarPeriod</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MainAccountRecId</Name>
			<DataField>MainAccountRecId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MainAccountCategory</Name>
			<DataField>MainAccountCategoryReference</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>OriginalBudgetAmount</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnOriginalBudgetAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>RevisedBudgetAmount</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnRevisedBudgetAmount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CostOfGoodsSold</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnCostOfGoodsSold</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalRevenue</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnTotalRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Cash</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnCash</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>QuickRatioAssets</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnQuickRatioAssets</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Liabilities</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnLiabilities</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CurrentRatioAssets</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnCurrentRatioAssets</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Equity</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnEquity</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CurrentLiabilities</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnCurrentLiabilities</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Income</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnIncome</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Expenses</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnExpenses</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TotalAssets</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnTotalAssets</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Sales</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnSales</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ProfitMarginTaxes</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnProfitMarginTaxes</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>SalesReturnAndDiscounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnSalesReturnAndDiscounts</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ReturnOnTotalAssetsExpenses</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnReturnOnTotalAssetsExpenses</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>OperatingExpenses</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnOperatingExpenses</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AdditionalEarnings</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnAdditionalEarnings</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountsReceivable</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnAccountsReceivable</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountsPayable</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnAccountsPayable</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>SalesPlusReturnsAndDiscounts</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>computeColumnSalesPlusReturnsAndDiscounts</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerGregorianDateId</Name>
			<DataField>LedgerGregorianDateId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LegalEntity</Name>
			<DataField>LegalEntity</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MainAccountLegalEntityId</Name>
			<DataField>MainAccountLegalEntityId</DataField>
			<DataSource>BudgetActivityAnalysisCurrencyAmount</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetActivityAnalysisCurrencyAmount</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetActivityAnalysisCurrencyAmount</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>