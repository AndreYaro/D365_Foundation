<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostTransView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjPostTransView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    display smmActivityNumber activityNumber(ProjPostTransView  _projPostTransView)
    {
        smmActivityNumber   smmActivityNumber;

        switch (this.ProjTransType)
        {
            case ProjTransType::Item:
                smmActivityNumber = ProjItemTrans::find(this.TransId).ActivityNumber;
                break;

            case ProjTransType::Hour:
                smmActivityNumber = ProjEmplTrans::find(this.TransId).ActivityNumber;
                break;

            case ProjTransType::Cost:
                smmActivityNumber = ProjCostTrans::find(this.TransId).ActivityNumber;
                break;

            case ProjTransType::OnAccount:
            case ProjTransType::Revenue:
                smmActivityNumber = '';
                break;
        }

        return smmActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    display CostPrice costPrice(ProjPostTransView  _projPostTransView)
    {
        CostPrice       costPrice;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                costPrice = ProjItemTrans::find(this.TransId).costPrice();
                break;

            case ProjTransType::Hour:
                costPrice = ProjEmplTrans::find(this.TransId).costPrice();
                break;

            case ProjTransType::Cost:
                costPrice = ProjCostTrans::find(this.TransId).costPrice();
                break;
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceGrantID</Name>
				<Source><![CDATA[
    public display ProjGrantId fundingSourceGrantID(ProjPostTransView  _projPostTransView)
    {
        ProjGrantId             grantId = '';
        ProjPostTransSaleView   projPostTransSaleView;
        ProjFundingSource       projFundingSource;
        ProjInvoiceProjId       projInvoiceProjId;

        projInvoiceProjId = ProjTable::find(_projPostTransView.ProjId).ProjInvoiceProjId;

        select firstOnly FundingSourceId from projFundingSource
            where projFundingSource.ContractId == projInvoiceProjId &&
                projFundingSource.FundingType == ProjFundingType::Grant
            exists join projPostTransSaleView
                where projPostTransSaleView.TransId == _projPostTransView.TransId &&
                    projPostTransSaleView.FundingSource == projFundingSource.RecId;

        if (projFundingSource.FundingSourceId)
		{
            if (ProjPostTransView::numberofTransGrants(_projPostTransView.TransId) == 1)
			{
                grantId = projFundingSource.FundingSourceId;
			}
            else
			{
                grantId = strfmt("@Proj:MultipleGrantIds", projFundingSource.FundingSourceId);
			}
		}
        return grantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceGrantName</Name>
				<Source><![CDATA[
    public display ProjGrantName fundingSourceGrantName(ProjPostTransView  _projPostTransView)
    {
        ProjGrantName           grantName = '';
        ProjPostTransSaleView   projPostTransSaleView;
        ProjFundingSource       projFundingSource;
        ProjInvoiceProjId       projInvoiceProjId;

        projInvoiceProjId = ProjTable::find(_projPostTransView.ProjId).ProjInvoiceProjId;

        if (ProjPostTransView::numberofTransGrants(_projPostTransView.TransId) == 1)
        {
            select firstOnly projFundingSource
                where projFundingSource.ContractId == projInvoiceProjId &&
                    projFundingSource.FundingType == ProjFundingType::Grant
                exists join projPostTransSaleView
                    where projPostTransSaleView.TransId == _projPostTransView.TransId &&
                        projPostTransSaleView.FundingSource == projFundingSource.RecId;

            if (projFundingSource.RecId)
            {
                grantName = projFundingSource.name();
            }
        }
        else
        {
            grantName = "@Proj:MultipleGrants";
        }
        return grantName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplItemID</Name>
				<Source><![CDATA[
    public display ItemId emplItemID(ProjPostTransView  _projPostTransView)
    {
        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                return _projPostTransView.ItemId;

            default :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>grantTransCostAmount</Name>
				<Source><![CDATA[
    public display AmountMST grantTransCostAmount(ProjPostTransView  _projPostTransView)
    {
        AmountMST               costAmount;

        ProjItemTransCost       projItemTransCost;
        ProjEmplTransCost       projEmpTransCost;
        ProjCostTransCost       projCostTransCost;

        ProjTrans               projTransCost;
        ProjFundingSource       projFundingSource;

        ProjItemTrans           projItemTrans;
        ProjEmplTrans           projEmplTrans;
        ProjCostTrans           projCostTrans;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                projItemTrans = ProjItemTrans::find(_projPostTransView.TransId);

                while select projItemTransCost
                                where projItemTrans.InventTransId == projItemTransCost.InventTransId &&
                                      projItemTrans.ProjAdjustRefId == projItemTransCost.ProjAdjustRefId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projItemTransCost.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransCost = ProjTrans::newProjItemTransCost(projItemTransCost);
                    costAmount += projTransCost.transCostMST();
                }

                break;

            case ProjTransType::Hour:
                projEmplTrans = ProjEmplTrans::find(_projPostTransView.TransId);

                while select projEmpTransCost
                                where projEmpTransCost.TransId == projEmplTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projEmpTransCost.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransCost = ProjTrans::newProjEmplTransCost(projEmplTrans ,projEmpTransCost);
                    costAmount += projTransCost.transCostMST();
                }
                break;

            case ProjTransType::Cost:
                projCostTrans = ProjCostTrans::find(_projPostTransView.TransId);

                while select projCostTransCost
                                where projCostTransCost.TransId == projCostTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projCostTransCost.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransCost = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                    costAmount += projTransCost.transCostMST();
                }
                break;
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grantTransSalesAmount</Name>
				<Source><![CDATA[
    public display AmountMST grantTransSalesAmount(ProjPostTransView  _projPostTransView)
    {
        AmountMST   salesAmount;

        ProjItemTransSale       projItemTransSale;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTransSale      projOnAccTransSale;

        ProjTrans               projTransSale;
        ProjFundingSource       projFundingSource;

        ProjItemTrans           projItemTrans;
        ProjEmplTrans           projEmplTrans;
        ProjCostTrans           projCostTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjOnAccTrans          projOnAccTrans;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                projItemTrans = ProjItemTrans::find(_projPostTransView.TransId);

                while select projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projItemTransSale.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransSale = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
                    salesAmount += projTransSale.transTurnoverMST();
                }
                break;

            case ProjTransType::Hour:
                projEmplTrans = ProjEmplTrans::find(_projPostTransView.TransId);

                while select projEmplTransSale
                                where projEmplTransSale.TransId == projEmplTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projEmplTransSale.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                    salesAmount += projTransSale.transTurnoverMST();
                }
                break;

            case ProjTransType::Cost:
                projCostTrans = ProjCostTrans::find(_projPostTransView.TransId);

                while select projCostTransSale
                                where projCostTransSale.TransId == projCostTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projCostTransSale.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransSale = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                    salesAmount += projTransSale.transTurnoverMST();
                }

                break;

            case ProjTransType::Revenue:
                projRevenueTrans = ProjRevenueTrans::find(_projPostTransView.TransId);

                while select projRevenueTransSale
                                where projRevenueTransSale.TransId == projRevenueTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projRevenueTransSale.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransSale = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                    salesAmount += projTransSale.transTurnoverMST();
                }
                break;

            case ProjTransType::OnAccount:
                projOnAccTrans = ProjOnAccTrans::find(_projPostTransView.TransId);

                while select projOnAccTransSale
                                where projOnAccTransSale.TransId == projOnAccTrans.TransId
                                join RecId from projFundingSource
                                    where projFundingSource.RecId == projOnAccTransSale.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::Grant
                {
                    projTransSale = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale);
                    salesAmount += projTransSale.transTurnoverMST();
                }

                break;
        }

        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectComponentGroup</Name>
				<Source><![CDATA[
    public display PSAIndirectComponentGroupId  indirectComponentGroup(ProjPostTransView  _projPostTransView)
    {
        ProjEmplTrans   projEmplTrans;

        projEmplTrans = ProjEmplTrans::find(_projPostTransView.TransId);
        return projEmplTrans.psaIndirectComponentGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineProperty</Name>
				<Source><![CDATA[
    public display ProjLinePropertyId lineProperty(ProjPostTransView  _projPostTransView)
    {
        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
            case ProjTransType::Hour:
            case ProjTransType::Cost:
            case ProjTransType::Revenue:
                return _projPostTransView.LinePropertyID;

            default :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberofTransGrants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of grant funding source(s) on a posted transaction.
    /// </summary>
    /// <param name="_transId">
    /// The posted transaction being processed.
    /// </param>
    /// <returns>
    /// The number of grant funding sources on a posted transaction.
    /// </returns>
    public static int64 numberofTransGrants(ProjTransIdBase _transId)
    {
        ProjPostTransSaleView   projPostTransSaleView = null;
        ProjFundingSource       projFundingSource;

        if (_transId)
        {
            select count(RecId) from projPostTransSaleView
                where projPostTransSaleView.TransId == _transId
                exists join projFundingSource
                    where projFundingSource.RecId == projPostTransSaleView.FundingSource &&
                        projFundingSource.FundingType == ProjFundingType::Grant;
        }

        return projPostTransSaleView.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategory</Name>
				<Source><![CDATA[
    public display ProjCategoryId  projCategory(ProjPostTransView  _projPostTransView)
    {
        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
            case ProjTransType::Hour:
            case ProjTransType::Cost:
            case ProjTransType::Revenue:
                return _projPostTransView.CategoryId;

            default :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    public display ProjInvoiceStatus projInvoiceStatus(ProjPostTransView  _projPostTransView)
    {
        ProjInvoiceStatus   projInvoiceStatus;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                projInvoiceStatus = ProjItemTrans::find(this.TransId).projInvoiceStatus();
                break;

            case ProjTransType::Hour:
                projInvoiceStatus = ProjEmplTrans::find(this.TransId).projInvoiceStatus();
                break;

            case ProjTransType::Cost:
                projInvoiceStatus = ProjCostTrans::find(this.TransId).projInvoiceStatus();
                break;

            case ProjTransType::Revenue:
                projInvoiceStatus = ProjRevenueTrans::find(this.TransId).projInvoiceStatus();
                break;

            case ProjTransType::OnAccount:
                projInvoiceStatus = ProjOnAccTrans::find(this.TransId).projInvoiceStatus();
                break;
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQty</Name>
				<Source><![CDATA[
    public display ProjQty projQty(ProjPostTransView  _projPostTransView)
    {
        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
            case ProjTransType::Hour:
            case ProjTransType::Cost:            
                return _projPostTransView.Qty;

            default :
                return 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransType</Name>
				<Source><![CDATA[
    public display ProjId  projTransType(ProjPostTransView  _projPostTransView)
    {
        DictEnum        dictEnum = new DictEnum(enumNum(ProjTransType));

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                return dictEnum.value2Label(enum2int(ProjTransType::Item));

            case ProjTransType::Hour:
                return dictEnum.value2Label(enum2int(ProjTransType::Hour));

            case ProjTransType::Cost:
                return dictEnum.value2Label(enum2int(ProjTransType::Cost));

            case ProjTransType::Revenue:
                return dictEnum.value2Label(enum2int(ProjTransType::Revenue));

            case ProjTransType::OnAccount:
                return dictEnum.value2Label(enum2int(ProjTransType::OnAccount));
        }

        return dictEnum.value2Label(enum2int(ProjTransType::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaTotalSales</Name>
				<Source><![CDATA[
    public display ProjTotalSalesAmount psaTotalSales(ProjPostTransView  _projPostTransView)
    {
        ProjTotalSalesAmount totalSalesAmount;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))
            && _projPostTransView.ProjTransType == ProjTransType::Hour)
        {
            totalSalesAmount = ProjEmplTrans::find(_projPostTransView.TransId).psaIndirectSalesTotal();
        }
        else
        {
            totalSalesAmount = this.TotalSalesAmountCur;
        }

        return totalSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    public display SalesPrice salesPrice(ProjPostTransView  _projPostTransView)
    {
        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                return ProjItemTrans::find(_projPostTransView.TransId).salesPrice();

            case ProjTransType::Hour:
                return ProjEmplTrans::find(_projPostTransView.TransId).salesPrice();

            case ProjTransType::Cost:
                return ProjCostTrans::find(_projPostTransView.TransId).salesPrice();

            case ProjTransType::Revenue:
                return ProjRevenueTrans::find(_projPostTransView.TransId).salesPrice();

            case ProjTransType::OnAccount:
                return ProjOnAccTrans::find(_projPostTransView.TransId).salesPrice();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>titleFieldText</Name>
				<Source><![CDATA[
    display TransTxt titleFieldText()
    {
        return strFmt('%1:%2',
                              this.TransId,
                              this.projTransType(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostAmount</Name>
				<Source><![CDATA[
    public display ProjTotalCostAmount totalCostAmount(ProjPostTransView  _projPostTransView)
    {
        ProjTotalCostAmount totalCostAmount;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                totalCostAmount = ProjItemTrans::find(_projPostTransView.TransId).costAmountTotal();
                break;

            case ProjTransType::Hour:
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    totalCostAmount = ProjEmplTrans::find(_projPostTransView.TransId).psaIndirectCostTotal();
                }
                else
                {
                    totalCostAmount = ProjEmplTrans::find(_projPostTransView.TransId).TotalCostAmountCur;
                }
                break;

            case ProjTransType::Cost:
                totalCostAmount = ProjCostTrans::find(_projPostTransView.TransId).costAmountLedger();
                break;

            case ProjTransType::Revenue:
            case ProjTransType::OnAccount:
                totalCostAmount = 0;
                break;
        }

        return totalCostAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTxt</Name>
				<Source><![CDATA[
    display TransTxt transactionTxt(ProjPostTransView  _projPostTransView)
    {
        ProjJournalTrans    projJournalTrans;
        ProjCostTrans       projCostTrans;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
            case ProjTransType::Hour:
            case ProjTransType::Revenue:
            case ProjTransType::OnAccount:
                select  Txt
                from    projJournalTrans
                where   projJournalTrans.TransId == _projPostTransView.TransId;

                return  projJournalTrans.Txt;

            case ProjTransType::Cost:
                select  Txt
                from    projCostTrans
                where   projCostTrans.TransId == _projPostTransView.TransId;

                return  projCostTrans.Txt;

            default :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the resource name for the transactions.
    /// </summary>
    display ResourceName resourceName()
    {
        return ResourceView::find(this.Resource).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the accounting currency for the transactions.
    /// </summary>
    public display CurrencyCode displayAccountingCurrency()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS323824</DeveloperDocumentation>
	<Label>@SYS954</Label>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Txt</Name>
			<DataField>Txt</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransIdRef</Name>
			<DataField>TransIdRef</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransId</Name>
			<DataField>TransId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionOrigin</Name>
			<DataField>TransactionOrigin</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TotalSalesAmountCur</Name>
			<DataField>TotalSalesAmountCur</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TotalCostAmountCur</Name>
			<DataField>TotalCostAmountCur</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxItemGroupId</Name>
			<DataField>TaxItemGroupId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TaxGroupId</Name>
			<DataField>TaxGroupId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceCategory</Name>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PSAIndirectComponentGroup</Name>
			<DataField>PSAIndirectComponentGroup</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PSAContractLineNum</Name>
			<DataField>PSAContractLineNum</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransType</Name>
			<DataField>ProjTransType</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Price</Name>
			<DataField>Price</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LinePropertyId</Name>
			<DataField>LinePropertyId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsCorrection</Name>
			<DataField>IsCorrection</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DefaultDimension</Name>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyIdCost</Name>
			<DataField>CurrencyIdCost</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CurrencyId</Name>
			<DataField>CurrencyId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CategoryId</Name>
			<DataField>CategoryId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AdjRefTransId</Name>
			<DataField>AdjRefTransId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceName</Name>
			<DataField>ResourceName</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>IsSplitTransaction</Name>
			<DataField>IsSplitTransaction</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VendorName</Name>
			<DataField>VendorName</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>VendorAccount</Name>
			<DataField>VendorAccount</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SubcontractLine</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
			<DataField>SubcontractLine</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionGroupId</Name>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<DataField>TransactionGroupId</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransIdPackSlip</Name>
			<DataField>TransIdPackSlip</DataField>
			<DataSource>ProjPostedTransTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjPostedTransTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjPostedTransTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>