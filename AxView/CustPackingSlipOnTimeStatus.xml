<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPackingSlipOnTimeStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPackingSlipOnTimeStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datesConditionTSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a case statement that determines whether a sales line is delivered on time, delayed or both.
    /// </summary>
    /// <param name="_dataSource">
    /// A data source that is used for comparison and holds a comparison field.
    /// </param>
    /// <param name="_comparisonField">
    /// A field that is used for comparison.
    /// </param>
    /// <returns>
    /// A string that represents the computed column.
    /// </returns>
    private static str datesConditionTSql(str _dataSource, str _comparisonField)
    {
        str         viewName = new SysDictTable(tableNum(CustPackingSlipOnTimeStatus)).name(DbBackend::Sql);
        str         dataSourceMinMax = identifierstr(CustPackingSlipMinMaxDates);
        str         fieldMinDate = SysDictTable::fieldnameSQL(tableNum(CustPackingSlipMinMaxDates), fieldNum(CustPackingSlipMinMaxDates, MinDeliveryDate), FieldNameGenerationMode::FieldList);
        str         fieldMaxDate = SysDictTable::fieldnameSQL(tableNum(CustPackingSlipMinMaxDates), fieldNum(CustPackingSlipMinMaxDates, MaxDeliveryDate), FieldNameGenerationMode::FieldList);

        Map         switchMap = new Map(Types::String, Types::String);

        // local function to return a comparison combination for the min and max
        // dates against the required comparison field
        str getComparisonString(str predicateMinDate, str predicateMaxDate)
        {
            str comparisonExp1 = SysComputedColumn::compareExpressions(
                                    SysComputedColumn::comparisonField(viewName,
                                                                        dataSourceMinMax,
                                                                        fieldMinDate),
                                    predicateMinDate,
                                    SysComputedColumn::comparisonField(viewName,
                                                                        _dataSource,
                                                                        _comparisonField));

            str comparisonExp2 = SysComputedColumn::compareExpressions(
                                    SysComputedColumn::comparisonField(viewName,
                                                                        dataSourceMinMax,
                                                                        fieldMaxDate),
                                    predicateMaxDate,
                                    SysComputedColumn::comparisonField(viewName,
                                                                        _dataSource,
                                                                        _comparisonField));

            return SysComputedColumn::and2(comparisonExp1, comparisonExp2);
        }

        switchMap.insert(getComparisonString(' < ', ' <= '),
                         SysComputedColumn::returnLiteral(SalesDeliveryTimeState::Early));

        switchMap.insert(getComparisonString(' = ', ' = '),
                         SysComputedColumn::returnLiteral(SalesDeliveryTimeState::OnTime));

        switchMap.insert(getComparisonString(' >= ', ' > '),
                         SysComputedColumn::returnLiteral(SalesDeliveryTimeState::Late));

        switchMap.insert(getComparisonString(' < ', ' > '),
                         SysComputedColumn::returnLiteral(SalesDeliveryTimeState::EarlyAndLate));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(SalesDeliveryTimeState::Late));
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusConfirmedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a computed column that indicates the delivered status of a sales line with regard to the
    /// confirmed date.
    /// </summary>
    /// <returns>
    /// A computed column definition.
    /// </returns>
    public static str statusConfirmedDate()
    {
        str viewName = new SysDictTable(tableNum(CustPackingSlipOnTimeStatus)).name(DbBackend::Sql);
        str dataSource = identifierstr(CustPackingSlipTransFirstEntries);
        str comparisonField = SysDictTable::fieldnameSQL(tableNum(CustPackingSlipTransFirstEntries), fieldNum(CustPackingSlipTransFirstEntries, SalesLineShippingDateConfirmed), FieldNameGenerationMode::FieldList);
        Map switchMap = new Map(Types::String, Types::String);

        switchMap.insert(
            SysComputedColumn::compareExpressions(comparisonField, '=', SysComputedColumn::returnLiteral(dateNull())),
            SysComputedColumn::returnLiteral(SalesDeliveryTimeState::Undefined));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         CustPackingSlipOnTimeStatus::datesConditionTSql(
                                                    dataSource,
                                                    comparisonField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusRequestedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a computed column that indicates the delivered status of a sales line with regard to
    /// requested date.
    /// </summary>
    /// <returns>
    /// A computed column definition.
    /// </returns>
    public static str statusRequestedDate()
    {
        str viewName = new SysDictTable(tableNum(CustPackingSlipOnTimeStatus)).name(DbBackend::Sql);
        str dataSource = identifierstr(CustPackingSlipTransFirstEntries);
        str comparisonField = SysDictTable::fieldnameSQL(tableNum(CustPackingSlipTransFirstEntries), fieldNum(CustPackingSlipTransFirstEntries, SalesLineShippingDateRequested), FieldNameGenerationMode::FieldList);
        Map switchMap = new Map(Types::String, Types::String);

        switchMap.insert(
            SysComputedColumn::compareExpressions(comparisonField, '=', SysComputedColumn::returnLiteral(dateNull())),
            SysComputedColumn::returnLiteral(SalesDeliveryTimeState::Undefined));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         CustPackingSlipOnTimeStatus::datesConditionTSql(
                                                    dataSource,
                                                    comparisonField));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@GLS180072</DeveloperDocumentation>
	<Label>@GLS180071</Label>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>StatusConfirmedDate</TitleField2>
	<Query>CustPackingSlipOnTimeStatus</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusConfirmedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusRequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinSalesLineShippingDateRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinSalesLineShippingDateConfirmed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>StatusConfirmedDate</Name>
			<ViewMethod>statusConfirmedDate</ViewMethod>
			<EnumType>SalesDeliveryTimeState</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>StatusRequestedDate</Name>
			<ViewMethod>statusRequestedDate</ViewMethod>
			<EnumType>SalesDeliveryTimeState</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MinSalesLineShippingDateRequested</Name>
			<DataField>SalesLineShippingDateRequested</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MinSalesLineShippingDateConfirmed</Name>
			<DataField>SalesLineShippingDateConfirmed</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MaxDeliveryDate</Name>
			<DataField>MaxDeliveryDate</DataField>
			<DataSource>CustPackingSlipMinMaxDates</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MinDeliveryDate</Name>
			<DataField>MinDeliveryDate</DataField>
			<DataSource>CustPackingSlipMinMaxDates</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DeliveryDate</Name>
			<DataField>DeliveryDate</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Delivered</Name>
			<DataField>Delivered</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Ordered</Name>
			<DataField>Ordered</DataField>
			<DataSource>CustPackingSlipTransFirstEntries</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>