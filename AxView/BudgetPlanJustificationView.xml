<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanJustificationView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanJustificationView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionCurrencyExpenseAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>TransactionCurrencyExpenseAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>TransactionCurrencyExpenseAmount</c> field.
    /// </returns>
    private static str getTransactionCurrencyExpenseAmountSql()
    {
        DictView budgetPlanJustificationView = new DictView(tableNum(BudgetPlanJustificationView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanJustificationView.query().dataSourceTable(tableNum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, BudgetClass),
            FieldNameGenerationMode::WhereClause);

        str transactionCurrencyAmount = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, TransactionCurrencyAmount),
            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::sum(SysComputedColumn::if(
            SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Expense)),
            transactionCurrencyAmount,
            SysComputedColumn::returnLiteral(0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyRevenueAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>TransactionCurrencyRevenueAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>TransactionCurrencyRevenueAmount</c> field.
    /// </returns>
    private static str getTransactionCurrencyRevenueAmountSql()
    {
        DictView budgetPlanJustificationView = new DictView(tableNum(BudgetPlanJustificationView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanJustificationView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, BudgetClass),
            FieldNameGenerationMode::WhereClause);

        str transactionCurrencyAmount = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, TransactionCurrencyAmount),
            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::sum(SysComputedColumn::if(
            SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Revenue)),
            SysComputedColumn::negative(transactionCurrencyAmount),
            SysComputedColumn::returnLiteral(0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyExpenseAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>AccountingCurrencyExpenseAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>AccountingCurrencyExpenseAmount</c> field.
    /// </returns>
    private static str getAccountingCurrencyExpenseAmountSql()
    {
        DictView budgetPlanJustificationView = new DictView(tableNum(BudgetPlanJustificationView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanJustificationView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, BudgetClass),
            FieldNameGenerationMode::WhereClause);

        str accountingCurrencyAmount = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, AccountingCurrencyAmount),
            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::sum(SysComputedColumn::if(
            SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Expense)),
            accountingCurrencyAmount,
            SysComputedColumn::returnLiteral(0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyRevenueAmountSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>AccountingCurrencyRevenueAmount</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>AccountingCurrencyRevenueAmount</c> field.
    /// </returns>
    private static str getAccountingCurrencyRevenueAmountSql()
    {
        DictView budgetPlanJustificationView = new DictView(tableNum(BudgetPlanJustificationView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanJustificationView.query().dataSourceTable(tablenum(BudgetPlanLine)).name();

        str budgetClass = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, BudgetClass),
            FieldNameGenerationMode::WhereClause);

        str accountingCurrencyAmount = budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, AccountingCurrencyAmount),
            FieldNameGenerationMode::WhereClause);

        return SysComputedColumn::sum(SysComputedColumn::if(
            SysComputedColumn::equalExpression(budgetClass, SysComputedColumn::returnLiteral(BudgetClass::Revenue)),
            SysComputedColumn::negative(accountingCurrencyAmount),
            SysComputedColumn::returnLiteral(0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantitySql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SQL for view definition for <c>Quantity</c> field.
    /// </summary>
    /// <returns>
    /// String value of SQL for view definition for <c>Quantity</c> field.
    /// </returns>
    private static str getQuantitySql()
    {
        DictView budgetPlanJustificationView = new DictView(tableNum(BudgetPlanJustificationView));

        DataSourceName budgetPlanLineDataSourceName = budgetPlanJustificationView.query().dataSourceTable(tableNum(BudgetPlanLine)).name();

        return SysComputedColumn::sum(budgetPlanJustificationView.computedColumnString(
            budgetPlanLineDataSourceName,
            fieldStr(BudgetPlanLine, Quantity),
            FieldNameGenerationMode::WhereClause));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EffectiveDate</Name>
			<DataField>EffectiveDate</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyExpenseAmount</Name>
			<Label>@SYS305529</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getTransactionCurrencyExpenseAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>TransactionCurrencyRevenueAmount</Name>
			<Label>@SYS305530</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getTransactionCurrencyRevenueAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountingCurrencyExpenseAmount</Name>
			<Label>@SYS305531</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getAccountingCurrencyExpenseAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>AccountingCurrencyRevenueAmount</Name>
			<Label>@SYS305532</Label>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<ViewMethod>getAccountingCurrencyRevenueAmountSql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>Quantity</Name>
			<Label>@Budget:BudgetPlan_JustificationView_Quantity</Label>
			<ExtendedDataType>BudgetPlanQuantity</ExtendedDataType>
			<ViewMethod>getQuantitySql</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ScenarioName</Name>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanScenario</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DocumentNumber</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>DocumentNumber</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetPlanName</Name>
			<DataField>Name</DataField>
			<DataSource>BudgetPlanHeader</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResponsibilityCenter</Name>
			<DataField>Name</DataField>
			<DataSource>ResponsibilityCenter</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>BudgetPlanPreparer</Name>
			<DataField>Name</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Comment</Name>
			<DataField>Comment</DataField>
			<DataSource>BudgetPlanLine</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetPlanLine</Name>
				<AllowAdd>No</AllowAdd>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetPlanLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanScenario</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BudgetPlanScenario</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>BudgetPlanHeader</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>BudgetPlanHeader</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ResponsibilityCenter</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>OMInternalOrganization</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations />
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>BudgetPlanPreparer</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>HcmWorker</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DirPartyTable</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>DirPartyTable</Table>
										<DataSources />
										<DerivedDataSources>
											<AxQuerySimpleDerivedDataSource>
												<Name>DirPartyTable_DirOrganizationBase</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DirOrganizationBase</Table>
												<DataSources />
												<DerivedDataSources>
													<AxQuerySimpleDerivedDataSource>
														<Name>DirPartyTable_DirOrganization</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>DirOrganization</Table>
														<DataSources />
														<DerivedDataSources />
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
													<AxQuerySimpleDerivedDataSource>
														<Name>DirPartyTable_OMInternalOrganization</Name>
														<DynamicFields>Yes</DynamicFields>
														<Table>OMInternalOrganization</Table>
														<DataSources />
														<DerivedDataSources>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_OMOperatingUnit</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>OMOperatingUnit</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_OMTeam</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>OMTeam</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
															<AxQuerySimpleDerivedDataSource>
																<Name>DirPartyTable_CompanyInfo</Name>
																<DynamicFields>Yes</DynamicFields>
																<Table>CompanyInfo</Table>
																<DataSources />
																<DerivedDataSources />
																<Fields />
																<Ranges />
															</AxQuerySimpleDerivedDataSource>
														</DerivedDataSources>
														<Fields />
														<Ranges />
													</AxQuerySimpleDerivedDataSource>
												</DerivedDataSources>
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
											<AxQuerySimpleDerivedDataSource>
												<Name>DirPartyTable_DirPerson</Name>
												<DynamicFields>Yes</DynamicFields>
												<Table>DirPerson</Table>
												<DataSources />
												<DerivedDataSources />
												<Fields />
												<Ranges />
											</AxQuerySimpleDerivedDataSource>
										</DerivedDataSources>
										<Fields />
										<Ranges />
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>WorkerPerson</Name>
												<DerivedTable>DirPerson</DerivedTable>
												<Field>Person</Field>
												<JoinDataSource>BudgetPlanPreparer</JoinDataSource>
												<JoinRelationName>DirPerson</JoinRelationName>
												<RelatedField>RecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<UseRelations>Yes</UseRelations>
								<Relations />
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>EffectiveDateGroupBy</Name>
						<DataSource>BudgetPlanLine</DataSource>
						<Field>EffectiveDate</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>ScenarioGroupBy</Name>
						<DataSource>BudgetPlanScenario</DataSource>
						<Field>Name</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>DocumentNumberGroupBy</Name>
						<DataSource>BudgetPlanHeader</DataSource>
						<Field>DocumentNumber</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>