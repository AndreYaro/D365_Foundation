<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DirPartyView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>relType</Name>
				<Source><![CDATA[
    display Description relType()
    {
        str typeStr;

        switch (this.UnionAllBranchId)
        {
            case 1:
                typeStr = "@SYS24704";
                break;

            case 2:
                typeStr = "@SYS9455";
                break;

            case 3:
                typeStr = "@SYS80084";
                break;

            case 4:
                typeStr = "@SYS60248";
                break;

            case 5:
                typeStr = "@SYS79821";
                break;

            case 6:
                typeStr = "@SYS95216";
                break;

            case 7:
                typeStr = "@SYS30003";
                break;

            case 8:
                typeStr = "@SYS311040";
                break;

            case 9:
                typeStr = "@SYS335602";
                break;
        }

        return typeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uaBranchId2RecId</Name>
				<Source><![CDATA[
    recId uaBranchId2RecId()
    {
        recId recId;

        switch (this.UnionAllBranchId)
        {
            case 1:
                recId = CustTable::findByPartyRecId(this.Party).RecId;
                break;

            case 2:
                recId = VendTable::findByPartyRecId(this.Party).RecId;
                break;

            case 3:
                recId = smmBusRelTable::findByParty(this.Party).RecId;
                break;

            case 4:
                recId = ContactPerson::findByPartyRecId(this.Party).RecId;
                break;

            case 6:
                recId = HcmWorker::findByPerson(this.Party).RecId;
                break;

            case 7:
                recId = HcmApplicant::findByPerson(this.Party).RecId;
                break;
        }

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uaBranchId2TableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table from the branchId of the union
    /// </summary>
    /// <returns>
    /// The table from the branchId of the union
    /// </returns>
    tableId uaBranchId2TableId()
    {
        tableId tableId;

        switch (this.UnionAllBranchId)
        {
            case 1:
                tableId = tableNum(CustTable);
                break;

            case 2:
                tableId = tableNum(VendTable);
                break;

            case 3:
                tableId = tableNum(smmBusRelTable);
                break;

            case 4:
                tableId = tableNum(ContactPerson);
                break;

            case 5:
                tableId = tableNum(smmQuotationCompetitorGroup);
                break;

            case 6:
                tableId = tableNum(HcmWorkerLegalEntityView);
                break;

            case 7:
                tableId = tableNum(HcmApplicantLegalEntityView);
                break;

            case 8:
                tableId = tableNum(VendRequest);
                break;

            case 9:
                tableId = tableNum(VendRequestDisallowedVendorView);
                break;

            default :
                tableId = this.TableId;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu item name associated with the specified branch Id.
    /// </summary>
    /// <param name = "_unionAllBranchId">The branch Id to get the menu item name from.</param>
    /// <returns>The menu item name associated with the specified branch Id.</returns>
    public static MenuItemName getMenuItemName(UnionAllBranchId _unionAllBranchId)
    {
        MenuItemName menuItemName;

        switch (_unionAllBranchId)
        {
            case 1:
                menuItemName = menuitemdisplaystr(CustTable);
                break;

            case 2:
                menuItemName = menuitemdisplaystr(VendTable);
                break;

            case 3:
                menuItemName = menuitemdisplaystr(smmBusRelTable);
                break;

            case 4:
                menuItemName = menuitemdisplaystr(ContactPerson);
                break;

            case 5:
                menuItemName = menuitemdisplaystr(smmQuotationCompetitorGroup);
                break;

            case 6:
                menuItemName = menuitemdisplaystr(HcmWorker);
                break;

            case 7:
                menuItemName = menuitemdisplaystr(HcmApplicant);
                break;

            case 8:
                menuItemName = menuitemdisplaystr(VendRequestNVAForm);
                break;

            case 9:
                menuItemName = menuitemdisplaystr(VendRequestDisallowedVendor);
                break;

            default:
                menuItemName = '';
        }
        
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a positioned table buffer of the appropriate type for the specified party view.
    /// </summary>
    /// <param name = "_dirPartyView">The party view to use to get the positioned record.</param>
    /// <returns>A positioned table buffer of the appropriate type for the specified party view.</returns>
    public static Common getPositionedRecord(DirPartyView _dirPartyView)
    {
        Common record;

        switch (_dirPartyView.UnionAllBranchId)
        {
            case 1:
                record = CustTable::findByCompany(_dirPartyView.DataArea, _dirPartyView.Accountnum);
                break;

            case 2:
                record = VendTable::findByCompany(_dirPartyView.DataArea, _dirPartyView.Accountnum);
                break;

            case 3:
                changeCompany(_dirPartyView.DataArea)
                {
                    record = smmBusRelTable::findByParty(_dirPartyView.Party);
                }
                break;

            case 4:
                changeCompany(_dirPartyView.DataArea)
                {
                    record = ContactPerson::find(_dirPartyView.Accountnum);
                }
                break;

            case 5:
                changeCompany(_dirPartyView.DataArea)
                {
                    record = smmQuotationCompetitorGroup::find(_dirPartyView.Party);
                }
                break;

            case 6:
                record = HCMWorker::findByPerson(_dirPartyView.Party);
                break;

            case 7:
                record = HcmApplicant::findByPerson(_dirPartyView.Party);
                break;

            case 8:
                changeCompany(_dirPartyView.DataArea)
                {
                    record = VendRequest::findByVendorParty(_dirPartyView.Party);
                }
                break;

            case 9:
                record = VendRequestDisallowedVendor::findByParty(_dirPartyView.Party);
                break;
        }
        
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJumpRefArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of an <c>Args</c> initilized with the specified table buffer.
    /// </summary>
    /// <param name = "_record">A positioned table buffer of the appropriate type for the current party view.</param>
    /// <returns>An instance of an <c>Args</c> initilized with the specified table buffer.</returns>
    public static Args initializeJumpRefArgs(Common _record)
    {
        Args args = new Args();
        args.record(_record);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the related form for the specified account/party in the specific data area, if applicable.
    /// </summary>
    public void jumpRef()
    {
        MenuItemName menuItemName = DirPartyView::getMenuItemName(this.UnionAllBranchId);

        if (menuItemName)
        {
            Common record = DirPartyView::getPositionedRecord(this);
            Args args = DirPartyView::initializeJumpRefArgs(record);

            new MenuFunction(menuItemName, MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the account number for each entity, depending on the entity type.
    /// </summary>
    /// <param name="_branchNum">
    /// The branch that defines the entity type.
    /// </param>
    /// <returns>
    /// The account number for that entity.
    /// </returns>
    public static str accountNumber(int _branchNum)
    {
        tableName viewName = tableStr(DirPartyView);
        str accountNum;

        switch (_branchNum)
        {
            case 1 :
                accountNum = SysComputedColumn::returnField(viewName, tableStr(CustTable), fieldStr(CustTable,AccountNum));
                break;

            case 2:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(VendTable), fieldStr(VendTable,AccountNum));
                break;

            case 3:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(smmBusRelTable), fieldStr(smmBusRelTable,BusRelAccount));
                break;

            case 4:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(ContactPerson), fieldStr(ContactPerson,ContactPersonId));
                break;

            case 5:
                accountNum = SysComputedColumn::returnLiteral('');
                break;

            case 6:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(HcmWorkerLegalEntityView), fieldStr(HcmWorkerLegalEntityView,PersonnelNumber));
                break;

            case 7:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(HcmApplicantLegalEntityView), fieldStr(HcmApplicantLegalEntityView,ApplicantId));
                break;

            case 8:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(VendRequest), fieldStr(VendRequest,VendRequestNumber));
                break;

            case 9:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(VendRequestDisallowedVendorView), fieldStr(VendRequestDisallowedVendorView, DisallowedVendorNumber));
                break;

            case 10:
                accountNum = SysComputedColumn::returnField(viewName, tableStr(CompanyInfo), fieldStr(CompanyInfo, DataArea));
                break;
        }

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the party role from the branch of the union.
    /// </summary>
    /// <param name="_branchNum">
    /// The branch number.
    /// </param>
    /// <returns>
    /// The role.
    /// </returns>
    public static str roleType(int _branchNum)
    {
        str roleTypeValue;

        if (_branchNum == 10)
        {
            roleTypeValue = SysComputedColumn::returnLiteral(enum2int(DirPartyRoleType::LegalEntity));
        }
        else
        {
            roleTypeValue = SysComputedColumn::returnLiteral(_branchNum);
        }

        return roleTypeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPartyRoleOnlyExistInOtherComapnay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate if a party as a role only exists in companies other than specified company.
    /// </summary>
    /// <param name="_partyId"> The party recid. </param>
    /// <param name="_roleType"> The role type. </param>
    /// <param name="_dataAreaId"> The specified company data area id, default to current company. </param>
    /// <returns>
    /// True, if the party is already exists in the specified company as the role; false, otherwise.
    /// </returns>
    public static boolean IsPartyRoleOnlyExistInOtherComapnay(DirPartyRecId _partyId, DirPartyRoleType _roleType, DataAreaId _dataAreaId = curExt())
    {
        DirPartyView partyViewForCurCompany, partyViewForOtherCompany;

        str da = curExt();
  
        select firstonly AccountNum from partyViewForCurCompany
            where partyViewForCurCompany.party == _partyId && partyViewForCurCompany.roleType == _roleType && partyViewForCurCompany.DataArea == _dataAreaId;

        select firstonly AccountNum from partyViewForOtherCompany
            where partyViewForOtherCompany.party == _partyId && partyViewForOtherCompany.roleType == _roleType && partyViewForOtherCompany.DataArea != _dataAreaId;

        if (!partyViewForCurCompany.AccountNum && partyViewForOtherCompany.Accountnum)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPartyRoleExistInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate if a party as a role already exists in specified company.
    /// </summary>
    /// <param name="_partyId"> The party recid. </param>
    /// <param name="_roleType"> The role type. </param>
    /// <param name="_dataAreaId"> The specified company data area id, default to current company. </param>
    /// <returns>
    /// True, if the party is already exists in the specified company as the role; false, otherwise.
    /// </returns>
    public static boolean IsPartyRoleExistInCompany(DirPartyRecId _partyId, DirPartyRoleType _roleType, DataAreaId _dataAreaId = curExt())
    {
        DirPartyView partyView;

        select firstonly AccountNum from partyView 
            where partyView.Party == _partyId && partyView.RoleType == _roleType && partyView.DataArea == _dataAreaId;

        return (partyView.AccountNum != null);      
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS124711</DeveloperDocumentation>
	<Label>@SYS122475</Label>
	<TitleField1>Party</TitleField1>
	<TitleField2>Accountnum</TitleField2>
	<Query>DirQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accountnum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accountnum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataArea</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Party</Name>
			<DataField>Party</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>RoleType</Name>
			<ViewMethod>roleType</ViewMethod>
			<EnumType>DirPartyRoleType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>Accountnum</Name>
			<Label>@SYS36303</Label>
			<ExtendedDataType>AccountNumber</ExtendedDataType>
			<ViewMethod>accountNumber</ViewMethod>
			<StringSize>30</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DataArea</Name>
			<Label>@SYS113179</Label>
			<DataField>dataAreaId</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<AllowCrossCompany>Yes</AllowCrossCompany>
		<QueryType>Union</QueryType>
		<DataSources />
	</ViewMetadata>
</AxView>