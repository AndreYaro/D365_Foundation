<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundQtyLeftToLoadV2View</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInboundQtyLeftToLoadV2View extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>QtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Definition of the QtyLeftToLoad for an inbound order line. 
    ///
    /// QtyLeftToLoad = max(0, TotalQtyOnInventTrans - QtyOnLoads - UpdatedQtyWithoutLoad)
    ///
    /// Total quantity per inventory transactions is simply a sum over all inventory transactions; HandlingQty is a field that depends whether the item is CW enabled or not (PdsCWQty vs. Qty)
    /// TotalQtyOnInventTrans = Sum_InboundOrderLineInventTrans(HandlingQty)
    ///
    /// Quantity on loads is the load line quantity -OR- the registered quantity against that load line, if larger than the load line quantity. Takes care of overdelivery, since this is currently not visible from load line directly.
    /// QtyOnLoads = Sum_InboundOrderLoadLines(max(InventQty, UpdatedQtyOnLoadLine))
    ///
    /// UpdatedQtyOnLoadLine = Sum_InboundOrderLineInventTrans(HandlingQty) where InventTrans.LoadId == 'some load id' and StatusReceipt above Ordered; only for WHS items, for TMS only items this is 0 by definition
    /// UpdatedQtyWithoutLoad = Sum_InboundOrderLineInventTrans(HandlingQty) where InventTrans.LoadId == '' and StatusReceipt above Ordered; only for WHS items, for TMS only items this is 0 by definition
    ///
    /// This view depends on several other views, which implement the above definition. In reverse order of appearance:
    ///     WHSInboundInventTransLoadQtyV2View - a view over InventTrans which, for each InventTrans, determines the HandlingQty (based on CW item status), WHSLoadMarkedReceiptUpdatedHandlingQty (HandlingQty if the item is WHS enabled, has a load marked and status above Ordered) and WHSNonLoadMarkedReceiptUpdatedHandlingQty
    ///     WHSInboundInventTransSumLoadQtyV2View - a sum of above grouped by InventTransId and LoadId (a row with LoadId = '' is expected; this is the only row that should have WHSNonLoadMarkedReceiptUpdatedHandlingQty, if the item is WHS enabled)
    ///     WHSInboundInventQtyOnLoadsView - provides a sum of InventQty (SumInventQty) over load lines, grouped by LoadId and InventTransId.
    ///
    ///     WHSInboundQtyLeftToLoadPerLoadV2View - WHSInboundInventQtyOnLoadsView outer joined to WHSInboundInventTransSumLoadQtyV2View on InventTransId and LoadId.
    ///         For each combination of InventTransId and LoadId, it provides one contribution to QtyLeftToLoad, based on inventory transactions: HandlingQty - larger of InventQty or WHSLoadMarkedReceiptUpdatedHandlingQty - WHSNonLoadMarkedReceiptUpdatedHandlingQty
    ///             Contribution of the line with LoadId = '' will be: HandlingQty - WHSNonLoadMarkedReceiptUpdatedHandlingQty, which is a part of the TotalQtyOnInventTrans - the whole of UpdatedQtyWithoutLoad 
    ///             Contribution of lines with LoadId != '' will be: HandlingQty - (larger of InventQty or WHSLoadMarkedReceiptUpdatedHandlingQty), which provides the rest of the TotalQtyOnInventTrans as well as QtyOnLoads for any load that is at least partially registered (so that it has some inventtrans footprint)
    ///             
    ///     Left are the loads that have no registrations yet, being invisible to WHSInboundInventTransSumLoadQtyV2View. For this we have:
    ///     WHSInboundQtyLeftToLoadPerUnreceivedLoadView - WHSInboundInventTransSumLoadQtyV2View notexist joined to WHSInboundInventQtyOnLoadsView on InventTransId and LoadId
    ///         Provides a contribution to the total QtyLeftToLoad: -InventQty , provides the rest of QtyOnLoads not covered by the previous view.
    ///
    ///     WHSInboundQtyLeftToLoadUnionV2View is a union of the above and this view then sums over all of the QtyLeftToLoad contributions grouped by InventTransId and provides the max(0, ...) function.
    ///
    /// Note that for TMS only items, the WHS*Qty fields are by definition 0, which means that WHSInboundQtyLeftToLoadPerLoadV2View provides the TotalQtyOnInventTrans and WHSInboundQtyLeftToLoadPerUnreceivedLoadView provides the total QtyOnLoads.
    ///
    /// </summary>
    /// <returns>The definition of the field.</returns>
    public static str QtyLeftToLoad()
    {
        str sumQtyLeftToLoad = SysComputedColumn::sum(SysComputedColumn::comparisonField(tableStr(WHSInboundQtyLeftToLoadV2View), tableStr(WHSInboundQtyLeftToLoadUnionV2View), fieldStr(WHSInboundQtyLeftToLoadUnionV2View, QtyLeftToLoad)));
                
        return SysComputedColumn::if(
                    SysComputedColumn::compareExpressions(sumQtyLeftToLoad, '>', SysComputedColumn::comparisonLiteral(0)),
                    sumQtyLeftToLoad,
                    SysComputedColumn::returnLiteral(0));        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>QtyLeftToLoad</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>WHSInboundQtyLeftToLoadUnionV2View</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>QtyLeftToLoad</Name>
			<ExtendedDataType>WHSQtyLeftToLoad</ExtendedDataType>
			<ViewMethod>QtyLeftToLoad</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>WHSInboundQtyLeftToLoadUnionV2View</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>WHSInboundQtyLeftToLoadUnionV2View</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>InventTransId</Name>
						<DataSource>WHSInboundQtyLeftToLoadUnionV2View</DataSource>
						<Field>InventTransId</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>