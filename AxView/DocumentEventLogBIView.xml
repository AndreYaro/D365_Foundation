<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocumentEventLogBIView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocumentEventLogBIView extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRetention</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of months difference from DateTimeUTC and current query execution time
    /// </summary>
    /// <returns>The SQL computed column.</returns>
    private static str getRetention()
    {
        return SysComputedColumn::getDateDiff(
            SysComputedColumn::returnField(tableStr(DocumentEventLogBIView), identifierStr(DocumentEventLog),
                                            fieldId2name(tableNum(DocumentEventLog),fieldNum(DocumentEventLog, DateTimeUtc))),
            SysComputedColumn::getCurrentUtcDate(),
            SysComputedColumnDatePart::Month);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentEventEnumIds</Name>
				<Source><![CDATA[
    private static Set getDocumentEventEnumIds()
    {
        Set documentEventEnumIds = new Set(Types::Integer);

        // Get Accounts Payable automation enums
        Set documentEventEnums = AccountsPayableSetup::getDocumentEventEnums();
        SetEnumerator enumEnumerator = documentEventEnums.getEnumerator();
        while (enumEnumerator.moveNext())
        {
            DocumentEventEnumsInfo enumInfo = enumEnumerator.current();
            documentEventEnumIds.add(enumInfo.parmEventEnumId());
        }

        return documentEventEnumIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValueAsName</Name>
				<Source><![CDATA[
    private static str getEnumValueAsName()
    {
        str enumValueField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEventLog), fieldStr(DocumentEventLog, EventEnumValue));
        str enumIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEvent), fieldStr(DocumentEvent, EventEnumId));

        Map enumMap = new Map(Types::String, Types::String);

        Set documentEventEnumIds = DocumentEventLogBIView::getDocumentEventEnumIds();
        SetEnumerator documentEventEnumerator = documentEventEnumIds.getEnumerator();

        while (documentEventEnumerator.moveNext())
        {
            enumMap.insert(int2Str(documentEventEnumerator.current()), 
                DocumentEventLogBIView::getEnumValueNameSwitchStatement(documentEventEnumerator.current(), enumValueField));
        }

        return SysComputedColumn::switch(enumIdField, enumMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValueAsLabel</Name>
				<Source><![CDATA[
    private static str getEnumValueAsLabel()
    {
        //Produces SQL like:
        //     (CAST((CASE T2.EVENTENUMID
        //               WHEN 123
        //               THEN CASE T1.EVENTENUMVALUE
        //                        WHEN 0
        //                        THEN N'Value 1'
        //                        WHEN 1
        //                        THEN N'Value 2'
        //                        ELSE ''
        //                    END
        //               WHEN 456
        //               THEN CASE T1.EVENTENUMVALUE
        //                        WHEN 0
        //                        THEN N'Value 3'
        //                        WHEN 1
        //                        THEN N'Value 4'
        //                        ELSE ''
        //                    END
        //               ELSE ''
        //           END) AS NVARCHAR(81))) AS EVENTENUMVALUELABEL,

        str enumValueField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEventLog), fieldStr(DocumentEventLog, EventEnumValue));
        str enumIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEvent), fieldStr(DocumentEvent, EventEnumId));
        Map enumMap = new Map(Types::String, Types::String);
        Set documentEventEnumIds = DocumentEventLogBIView::getDocumentEventEnumIds();
        SetEnumerator documentEventEnumerator = documentEventEnumIds.getEnumerator();

        while (documentEventEnumerator.moveNext())
        {
            enumMap.insert(int2Str(documentEventEnumerator.current()), 
                DocumentEventLogBIView::getEnumValueLabelSwitchStatement(documentEventEnumerator.current(), enumValueField));
        }

        return SysComputedColumn::switch(enumIdField, enumMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValueLabelSwitchStatement</Name>
				<Source><![CDATA[
    private static str getEnumValueLabelSwitchStatement(EnumId _enumID, str _enumValueField)
    {
        Map valueMap = new Map(Types::String, Types::String);

        DictEnum dictEnum = new DictEnum(_enumID);
        for (Counter i = 0; i < dictEnum.values(); i++)
        {
            LabelString labelText = dictEnum.index2Label(i) ? dictEnum.index2Label(i) : any2Str(dictEnum.index2Symbol(i));
            valueMap.insert(int2Str(dictEnum.index2Value(i)), SysComputedColumn::returnLiteral(labelText));
        }

        return SysComputedColumn::switch(_enumValueField, valueMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValueNameSwitchStatement</Name>
				<Source><![CDATA[
    private static str getEnumValueNameSwitchStatement(EnumId _enumID, str _enumValueField)
    {
        Map valueMap = new Map(Types::String, Types::String);

        DictEnum dictEnum = new DictEnum(_enumID);
        for (Counter i = 0; i < dictEnum.values(); i++)
        {
            EnumName enumValueName = any2Str(dictEnum.index2Symbol(i)) ? any2Str(dictEnum.index2Symbol(i)) : dictEnum.index2Name(i);
            valueMap.insert(int2Str(dictEnum.index2Value(i)), SysComputedColumn::returnLiteral(enumValueName));
        }

        return SysComputedColumn::switch(_enumValueField, valueMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumLabel</Name>
				<Source><![CDATA[
    private static str getEnumLabel()
    {
        //Produces SQL like
        //    (CAST((CASE T2.EVENTENUMID
        //               WHEN 123
        //               THEN N'Enum Label 1'
        //               WHEN 456
        //               THEN N'Enum Label 2'
        //               ELSE ''
        //           END) AS NVARCHAR(81))) AS EVENTENUMLABEL

        str enumIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEvent), fieldStr(DocumentEvent, EventEnumId));
        Map enumMap = new Map(Types::String, Types::String);

        Set documentEventEnumIds = DocumentEventLogBIView::getDocumentEventEnumIds();
        SetEnumerator documentEventEnumerator = documentEventEnumIds.getEnumerator();

        while (documentEventEnumerator.moveNext())
        {
            SysDictEnum sysDictEnum = new SysDictEnum(documentEventEnumerator.current());
            str labelText = sysDictEnum.labelDefined() ? sysDictEnum.label() : sysDictEnum.name();
            enumMap.insert(int2Str(documentEventEnumerator.current()), SysComputedColumn::returnLiteral(labelText));
        }

        return SysComputedColumn::switch(enumIdField, enumMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumName</Name>
				<Source><![CDATA[
    private static str getEnumName()
    {
        //Produces SQL like
        //    (CAST((CASE T2.EVENTENUMID
        //               WHEN 123
        //               THEN N'Enum Label 1'
        //               WHEN 456
        //               THEN N'Enum Label 2'
        //               ELSE ''
        //           END) AS NVARCHAR(81))) AS EVENTENUMLABEL

        str enumIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEvent), fieldStr(DocumentEvent, EventEnumId));
        Map enumMap = new Map(Types::String, Types::String);

        Set documentEventEnumIds = DocumentEventLogBIView::getDocumentEventEnumIds();
        SetEnumerator documentEventEnumerator = documentEventEnumIds.getEnumerator();

        while (documentEventEnumerator.moveNext())
        {
            SysDictEnum sysDictEnum = new SysDictEnum(documentEventEnumerator.current());
            enumMap.insert(int2Str(documentEventEnumerator.current()), SysComputedColumn::returnLiteral(sysDictEnum.name()));
        }

        return SysComputedColumn::switch(enumIdField, enumMap, SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTouchedStatus</Name>
				<Source><![CDATA[
    private static str getTouchedStatus()
    {
        List comparisonExpressionList = new List(Types::String);
        const str EqualsOperator = '=';
        const str NotEqualsOperator = '<>';

        comparisonExpressionList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationPausedByUserEvent),
                                        VendInvoiceAutomationPausedByUserEvent::NotSpecified, EqualsOperator));
        comparisonExpressionList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationPausedByRecallEvent),
                                        VendInvoiceAutomationPausedByRecallEvent::NotSpecified, EqualsOperator));
        comparisonExpressionList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceManualSubmissionToWorkflow),
                                        VendInvoiceManualSubmissionToWorkflow::NotSpecified, EqualsOperator));
        comparisonExpressionList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationLineWorkflowManualAction),
                                        VendInvoiceAutomationLineWorkflowManualAction::None, NotEqualsOperator));
        comparisonExpressionList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationHeaderWorkflowManualAction),
                                        VendInvoiceAutomationHeaderWorkflowManualAction::None, NotEqualsOperator));

        return SysComputedColumn::if(
            SysComputedColumn::or(comparisonExpressionList),
            SysComputedColumn::returnLiteral(1),
            Syscomputedcolumn::returnLiteral(0));

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailedReason</Name>
				<Source><![CDATA[
    private static str getFailedReason()
    {
        Map switchMap = new Map(Types::String, Types::String);
        List orExpressionsList = new List(Types::String);
        List manualEditOrExpressionsList = new List(Types::String);

        const str EqualsOperator = '=';
        const str NotEqualsOperator = '<>';

        switchMap.insert(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceImportEvent),
            VendInvoiceImportEvent::Failed, EqualsOperator), SysComputedColumn::returnLiteral('Failed import'));
        switchMap.insert(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceMatchProductReceiptToInvoiceLineEvent),
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed, EqualsOperator), SysComputedColumn::returnLiteral('Failed matching'));
        switchMap.insert(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationPrepaymentApplicationEvent),
            VendInvoiceAutomationPrepaymentApplicationEvent::Failed, EqualsOperator), SysComputedColumn::returnLiteral('Failed prepayment application'));
        switchMap.insert(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationSubmitToWorkflow),
            VendInvoiceAutomationSubmitToWorkflow::Failed, EqualsOperator), SysComputedColumn::returnLiteral('Failed submit to workflow'));
        switchMap.insert(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceWorkflowStatusEvent),
            VendInvoiceWorkflowStatusEvent::Failed, EqualsOperator), SysComputedColumn::returnLiteral('Failed posting'));

        manualEditOrExpressionsList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationPausedByUserEvent),
            VendInvoiceAutomationPausedByUserEvent::NotSpecified, EqualsOperator));
        manualEditOrExpressionsList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationPausedByRecallEvent),
            VendInvoiceAutomationPausedByRecallEvent::NotSpecified, EqualsOperator));

        switchMap.insert(SysComputedColumn::or(manualEditOrExpressionsList), SysComputedColumn::returnLiteral('Manually edited'));

        orExpressionsList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceManualSubmissionToWorkflow),
            VendInvoiceManualSubmissionToWorkflow::NotSpecified, EqualsOperator));
        orExpressionsList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationLineWorkflowManualAction),
            VendInvoiceAutomationLineWorkflowManualAction::None, NotEqualsOperator));
        orExpressionsList.addEnd(DocumentEventLogBIView::getCompareExpressions(enumStr(VendInvoiceAutomationHeaderWorkflowManualAction),
            VendInvoiceAutomationHeaderWorkflowManualAction::None, NotEqualsOperator));

        switchMap.insert(SysComputedColumn::or(orExpressionsList), SysComputedColumn::returnLiteral('Manual edit in workflow'));

        return SysComputedColumn::switch('',
                                         switchMap,
                                         SysComputedColumn::returnLiteral(''));

    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeaderTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table number based on the source table number in <c>DocumentEventLog</c> table.
    /// </summary>
    /// <returns>The computed column based on the source table number.</returns>
    private static str getSourceHeaderTableId()
    {
        Map tableIdSwitchMap = new Map(Types::String, Types::String);
        str tableIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEventLog), fieldStr(DocumentEventLog, SourceTableId));
        
        tableIdSwitchMap.insert(int2Str(tableNum(VendInvoiceInfoLine)), int2Str(tableNum(VendInvoiceInfoTable)));
        tableIdSwitchMap.insert(int2Str(tableNum(VendInvoiceTrans)), int2Str(tableNum(VendInvoiceJour)));

        return SysComputedColumn::switch(tableIdField, tableIdSwitchMap, tableIdField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header record identifier based on the source record identifier in <c>DocumentEventLog</c> table.
    /// </summary>
    /// <returns>The computed column based on the source record identifier.</returns>
    private static str getSourceHeaderRecId()
    {
        str sourceRecIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEventLog), fieldStr(DocumentEventLog, SourceRecId));
        str infoTableRecIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(VendInvoiceInfoTable), fieldStr(VendInvoiceInfoTable, RecId));
        str invoiceJourRecIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(VendInvoiceJour), fieldStr(VendInvoiceJour, RecId));
        
        return SysComputedColumn::if(
                SysComputedColumn::isNotNullExpression(infoTableRecIdField),
                infoTableRecIdField,
                (SysComputedColumn::if(SysComputedColumn::isNotNullExpression(invoiceJourRecIdField),
                                invoiceJourRecIdField,
                                sourceRecIdField)
                ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareExpressions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the 'and' compare expression for the base enum name and value combination.
    /// </summary>
    /// <param name = "_enumName">Name of the base enum.</param>
    /// <param name = "_enumValue">Base enum value.</param>
    /// <param name = "_predicateEnumValue">Comparison operator</param>
    /// <returns>Compare expression for the base enum name and value combination.</returns>
    private static str getCompareExpressions(str _enumName, int _enumValue, str _predicateEnumValue)
    {
        str enumValueField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEventLog), fieldStr(DocumentEventLog, EventEnumValue));
        str enumIdField = SysComputedColumn::comparisonField(tableStr(DocumentEventLogBIView), tableStr(DocumentEvent), fieldStr(DocumentEvent, EventEnumId));

        return SysComputedColumn::and2(
            SysComputedColumn::compareExpressions(
                enumIdField,
                '=',
                int2Str(enumName2Id(_enumName))),
            SysComputedColumn::compareExpressions(
                enumValueField,
                _predicateEnumValue,
                int2Str(_enumValue)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EventEnumId</Name>
			<DataField>EventEnumId</DataField>
			<DataSource>DocumentEvent</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EventEnumValue</Name>
			<DataField>EventEnumValue</DataField>
			<DataSource>DocumentEventLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceTableId</Name>
			<DataField>SourceTableId</DataField>
			<DataSource>DocumentEventLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceRecId</Name>
			<DataField>SourceRecId</DataField>
			<DataSource>DocumentEventLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Sequence</Name>
			<DataField>Sequence</DataField>
			<DataSource>DocumentEventLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DateTimeUtc</Name>
			<DataField>DateTimeUtc</DataField>
			<DataSource>DocumentEventLog</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SourceTableName</Name>
			<DataField>name</DataField>
			<DataSource>SqlDictionary</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>Retention</Name>
			<ViewMethod>getRetention</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EventEnumName</Name>
			<ExtendedDataType>EnumName</ExtendedDataType>
			<ViewMethod>getEnumName</ViewMethod>
			<StringSize>80</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EventEnumLabel</Name>
			<ExtendedDataType>EnumName</ExtendedDataType>
			<ViewMethod>getEnumLabel</ViewMethod>
			<StringSize>256</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EventEnumValueName</Name>
			<ExtendedDataType>EnumName</ExtendedDataType>
			<ViewMethod>getEnumValueAsName</ViewMethod>
			<StringSize>80</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>EventEnumValueLabel</Name>
			<ExtendedDataType>EnumName</ExtendedDataType>
			<ViewMethod>getEnumValueAsLabel</ViewMethod>
			<StringSize>256</StringSize>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>TouchedStatus</Name>
			<ViewMethod>getTouchedStatus</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>FailedReason</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<ViewMethod>getFailedReason</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>SourceHeaderTableId</Name>
			<ViewMethod>getSourceHeaderTableId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt64">
			<Name>SourceHeaderRecId</Name>
			<ViewMethod>getSourceHeaderRecId</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>DocumentEventLog</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>DocumentEventLog</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DocumentEvent</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DocumentEvent</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<UseRelations>Yes</UseRelations>
						<Relations />
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SqlDictionary</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>SqlDictionary</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>fieldId</Name>
								<Field>fieldId</Field>
								<Value>0</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<FetchMode>OneToN</FetchMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceTableId</Field>
								<JoinDataSource>DocumentEventLog</JoinDataSource>
								<RelatedField>tabId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceInfoLine</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceInfoLine</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>VendInvoiceInfoTable</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>VendInvoiceInfoTable</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>TableRefId</Field>
										<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
										<RelatedField>TableRefId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>ParmId</Field>
										<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
										<RelatedField>ParmId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation3</Name>
										<Field>DataAreaId</Field>
										<JoinDataSource>VendInvoiceInfoLine</JoinDataSource>
										<RelatedField>DataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceTableId</Field>
								<JoinDataSource>DocumentEventLog</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SourceRecId</Field>
								<JoinDataSource>DocumentEventLog</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>VendInvoiceTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>VendInvoiceTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>VendInvoiceJour</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>VendInvoiceJour</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>InvoiceDate</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>InvoiceDate</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>PurchId</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>PurchId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation3</Name>
										<Field>InvoiceId</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>InvoiceId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation4</Name>
										<Field>numberSequenceGroup</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>numberSequenceGroup</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation5</Name>
										<Field>InternalInvoiceId</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>InternalInvoiceId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation6</Name>
										<Field>DataAreaId</Field>
										<JoinDataSource>VendInvoiceTrans</JoinDataSource>
										<RelatedField>DataAreaId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SourceTableId</Field>
								<JoinDataSource>DocumentEventLog</JoinDataSource>
								<RelatedField>TableId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SourceRecId</Field>
								<JoinDataSource>DocumentEventLog</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>