<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowCosting4_Balance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanProductionFlowCosting4_Balance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRealizedCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the realized cost amount.
    /// </summary>
    /// <returns>
    /// The realized cost amount.
    /// </returns>
    public display CostAmount displayRealizedCostAmount()
    {
        if (this.CostClassification == CostClassification::Indirect ||
            this.CostClassification == CostClassification::Labor ||
            this.CostClassification == CostClassification::Material ||
            this.CostClassification == CostClassification::Outsourcing)
        {
            return -this.RealizedAmount;
        }
        else
        {
            return this.RealizedAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToComparisonMap</Name>
				<Source><![CDATA[
    private static void addToComparisonMap(
        Map                 _comparisonExpressionMap,
        CostClassification  _costClassification,
        LedgerPostingType   _postingType
        )
    {
        _comparisonExpressionMap.insert(
            SysComputedColumn::equalExpression(
                SysComputedColumn::comparisonField(tableStr(LeanProductionFlowCosting4_Balance), tableStr(LeanProductionFlowCosting3_BalanceDetail), fieldStr(LeanProductionFlowCosting3_BalanceDetail, CostClassification)),
                SysComputedColumn::comparisonLiteral(enum2int(_costClassification))),
            SysComputedColumn::returnLiteral(enum2int(_postingType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posting type.
    /// </summary>
    /// <returns>
    /// The string holding the <c>LedgerPostingType</c> enum value.
    /// </returns>
    public static str postingType()
    {
        Map             comparisonExpressionMap          = SysComputedColumn::comparisionExpressionMap();

        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::COGM, LedgerPostingType::ProdReceipt);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::Material, LedgerPostingType::ProdIssue);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::Indirect, LedgerPostingType::IndirectAbsorption);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::Labor, LedgerPostingType::ProdWrkCtrIssue);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::Outsourcing, LedgerPostingType::ProdLeanWIPServiceReceipt);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::PriceVariance, LedgerPostingType::ProdStdCostProductionVariance);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::QuantityVariance, LedgerPostingType::ProdStdCostQuantityVariance);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::SubstitutionVariance, LedgerPostingType::ProdStdCostSubstitutionVariance);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::RoundingVariance, LedgerPostingType::InventStdCostRoundingVariance);
        LeanProductionFlowCosting4_Balance::addToComparisonMap(comparisonExpressionMap, CostClassification::LotSizeVariance, LedgerPostingType::ProdStdCostLotSizeVariance);

        return SysComputedColumn::switch(
            '',
            comparisonExpressionMap,
            SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>realizedPostedDifference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a difference between realized and posted amount.
    /// </summary>
    public display CostAmount realizedPostedDifference()
    {
        return this.displayRealizedCostAmount() - this.AccountedAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS4009359</DeveloperDocumentation>
	<Label>@SYS190008</Label>
	<TitleField1>TransRefId</TitleField1>
	<TitleField2>CostClassification</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransRefId</Name>
			<DataField>TransRefId</DataField>
			<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CostClassification</Name>
			<DataField>CostClassification</DataField>
			<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountedAmount</Name>
			<Aggregation>Sum</Aggregation>
			<DataField>AccountedAmount</DataField>
			<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RealizedAmount</Name>
			<Aggregation>Sum</Aggregation>
			<DataField>RealizedAmount</DataField>
			<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>PostingType</Name>
			<ViewMethod>PostingType</ViewMethod>
			<EnumType>LedgerPostingType</EnumType>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LeanProductionFlowCosting3_BalanceDetail</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LeanProductionFlowCosting3_BalanceDetail</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>TransRefId</Name>
						<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
						<Field>TransRefId</Field>
					</AxQuerySimpleGroupByField>
					<AxQuerySimpleGroupByField>
						<Name>CostClassification</Name>
						<DataSource>LeanProductionFlowCosting3_BalanceDetail</DataSource>
						<Field>CostClassification</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>