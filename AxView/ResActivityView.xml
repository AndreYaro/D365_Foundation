<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResActivityView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ResActivityView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity type.
    /// </summary>
    /// <returns>Return project type by default or return quotation type if Project quotation configuration key is turned on and this is a quotation record.</returns>
    public static str getActivityType()
    {
        str projectId = SysComputedColumn::returnField(
            tableStr(ResActivityView),
            identifierStr(Projects),
            fieldStr(ProjTable, ProjId));

        str quoteId = '';
        str nullExpression = SysComputedColumn::nullExpression();

        Map conditionsMap = SysComputedColumn::comparisionExpressionMap();
       
        conditionsMap.insert(
            strFmt("%1 is not %2", projectId, nullExpression),
            SysComputedColumn::returnLiteral(PSARSEntityType::Project));
             
        if (isConfigurationkeyEnabled(configurationKeyNum(ProjQuotation)))
        {
            quoteId = strFmt("EXISTS (SELECT %1 FROM %2 WHERE (EXISTS (SELECT %4 FROM %3 WHERE %4 = %5 AND %10 = '%2') AND %6 = %7) AND %1 is not %8 AND Partition = %9)",
                            fieldStr(SalesQuotationTable, QuotationId),
                            tableStr(SalesQuotationTable),
                            tableStr(SqlDictionary),
                            fieldStr(SqlDictionary, Tableid),
                            SysComputedColumn::returnField(
                                tableStr(ResActivityView),
                                identifierStr(Activities),
                                fieldStr(HierarchyLinkTable, RefTableId)),
                            fieldStr(SalesQuotationTable, RecId),
                            SysComputedColumn::returnField(
                                tableStr(ResActivityView),
                                identifierStr(Activities),
                                fieldStr(HierarchyLinkTable, RefRecId)),
                            nullExpression,
                            SysComputedColumn::returnField(
								tableStr(ResActivityView),
								identifierStr(Activities),
								fieldStr(ResActivityView, Partition)),
                            fieldStr(SqlDictionary, Name));
        }
       
        if (quoteId)
        {
            conditionsMap.insert(quoteId, SysComputedColumn::returnLiteral(PSARSEntityType::Quotation));
        }

        return SysComputedColumn::switch('',
            conditionsMap,
            SysComputedColumn::returnLiteral(PSARSEntityType::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>quoteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quotation ID query or empty value.
    /// </summary>
    /// <returns>Return the quotation ID query if project quotation configuration key is turned on, else return empty string.</returns>
    public static str quoteId()
    {
        str quoteId;

        if (isConfigurationkeyEnabled(configurationKeyNum(ProjQuotation)))
        {
            quoteId = strFmt("SELECT %1 FROM %2 WHERE EXISTS (SELECT %4 FROM %3 WHERE %4 = %5 AND %9 = '%2') AND %6 = %7 AND Partition = %8",
                            fieldStr(SalesQuotationTable, QuotationId),
                            tableStr(SalesQuotationTable),
                            tableStr(SqlDictionary),
                            fieldStr(SqlDictionary, Tableid),
                            SysComputedColumn::returnField(
                                tableStr(ResActivityView),
                                identifierStr(Activities),
                                fieldStr(HierarchyLinkTable, RefTableId)),
                            fieldStr(SalesQuotationTable, RecId),
                            SysComputedColumn::returnField(
                                tableStr(ResActivityView),
                                identifierStr(Activities),
                                fieldStr(HierarchyLinkTable, RefRecId)),
                            SysComputedColumn::returnField(
                                tableStr(ResActivityView),
                                identifierStr(Activities),
                                fieldStr(ResActivityView, Partition)),
                            fieldStr(SqlDictionary, Name));
        }
        else
        {
            quoteId = SysComputedColumn::returnLiteral('');
        }

        return quoteId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<TableGroup>Transaction</TableGroup>
	<Query>ResActivityQuery</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Activity</Name>
			<DataField>RefRecId</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Id</Name>
			<DataField>PSALevelName</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Name</Name>
			<DataField>PSALevelDescription</DataField>
			<DataSource>HierarchyTreeTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjectId</Name>
			<DataField>ProjId</DataField>
			<DataSource>Projects</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>ActivityType</Name>
			<ViewMethod>getActivityType</ViewMethod>
			<EnumType>PSARSEntityType</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>QuoteID</Name>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
			<ViewMethod>quoteId</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>