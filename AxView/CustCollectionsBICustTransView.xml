<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsBICustTransView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionsBICustTransView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert ledger currency to system currency.
    /// </summary>
    /// <returns>
    /// The computed column for system currency translation.
    /// </returns>
    public static str convertCurrency()
    {
        return CollectionsBIHelper::calculateSystemCurrencyAmount(
            tableStr(CustCollectionsBICustTransView),
            tableStr(CustTransOpen),
            fieldStr(CustTransOpen, AmountMst),
            tableStr(Ledger),
            fieldStr(Ledger, AccountingCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert ledger currency to system currency.
    /// </summary>
    /// <returns>
    /// The computed column for system currency translation.
    /// </returns>
    public static str convertCurrencyCustTrans()
    {
        return CollectionsBIHelper::calculateSystemCurrencyAmount(
            tableStr(CustCollectionsBICustTransView),
            tableStr(CustTrans),
            fieldStr(CustTrans, AmountMst),
            tableStr(Ledger),
            fieldStr(Ledger, AccountingCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the table id for <c>CustTrans</c> to store on the view.
    /// </summary>
    /// <returns>
    /// The computed column for <c>CustTrans</c> table id.
    /// </returns>
    public static str custTransTableId()
    {
        return SysComputedColumn::returnLiteral(tableNum(CustTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCreditMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert credit limit ledger currency to system currency.
    /// </summary>
    /// <returns>
    /// The computed column for system currency translation for credit limit.
    /// </returns>
    public static str convertCreditMax()
    {
        return CollectionsBIHelper::calculateSystemCurrencyAmount(
            tableStr(CustCollectionsBICustTransView),
            tableStr(CustTable),
            fieldStr(CustTable, CreditMax),
            tableStr(Ledger),
            fieldStr(Ledger, AccountingCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDSO30</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if transaction should be included for DSO30 calculation.
    /// </summary>
    /// <returns>
    /// Yes if the transaction should be included for DSO30 calculation.
    /// </returns>
    public static str isDSO30()
    {
        return CollectionsBIHelper::isDSOForNDays(
            -30, 
            tableStr(CustCollectionsBICustTransView),
            tableStr(CustTrans),
            fieldStr(CustTrans, TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateDisputeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create computed column for transaction status.
    /// </summary>
    /// <returns>The computed column.</returns>
    private static str translateDisputeStatus()
    {
        return SysComputedColumn::switch(
            SysComputedColumn::returnField(
                tableStr(CustCollectionsBICustTransView),
                identifierStr(CustDispute),
                fieldStr(CustDispute, Status)),
            CustCollectionsBICustTransView::getDisputeStatusMap(),
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisputeStatusMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the dispute status map from the <c>CustVendDisputeStatus</c> enumeration.
    /// </summary>
    /// <returns>The computed column map.</returns>
    /// <remarks>
    /// This method will be removed once PowerBI integration fully supports label translations.
    /// </remarks>
    private static Map getDisputeStatusMap()
    {
        var disputeStatusEnum = new DictEnum(enumNum(CustVendDisputeStatus));
        var statusMap = SysComputedColumn::comparisionExpressionMap();

        for (int i = 0; i < disputeStatusEnum.values(); i++)
        {
            var disputeStatus = any2Enum(disputeStatusEnum.index2Value(i));

            if (CustCollectionsBICustTransView::shouldAddStatusToMap(disputeStatus))
            {
                statusMap.insert(SysComputedColumn::comparisonLiteral(disputeStatusEnum.index2Value(i)), SysComputedColumn::comparisonLiteral(disputeStatusEnum.index2Label(i)));
            }
        }

        return statusMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddStatusToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the <c>CustVendDisputeStatus</c> enumeration value should be added to the map.
    /// </summary>
    /// <param name = "_disputeStatus">The <c>CustVendDisputeStatus</c> enumeration value.</param>
    /// <returns>true if the value should be added to the map; otherwise, false.</returns>
    private static boolean shouldAddStatusToMap(CustVendDisputeStatus _disputeStatus)
    {
        return (_disputeStatus == CustVendDisputeStatus::Disputed
            || _disputeStatus == CustVendDisputeStatus::PromiseToPay
            || _disputeStatus == CustVendDisputeStatus::PromiseToPayBroken);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Collections</ConfigurationKey>
	<Label>@AccountsReceivable:AR_Collections_BI_CustTransView</Label>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>OpenAmountMST</Name>
			<DataField>AmountMST</DataField>
			<DataSource>CustTransOpen</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountNum</Name>
			<DataField>AccountNum</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>OpenSystemCurrencyAmount</Name>
			<ViewMethod>convertCurrency</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>SystemCurrencyCode</Name>
			<DataField>SystemCurrencyCode</DataField>
			<DataSource>SystemParameters</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AccountingCurrency</Name>
			<DataField>AccountingCurrency</DataField>
			<DataSource>Ledger</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DueDate</Name>
			<DataField>DueDate</DataField>
			<DataSource>CustTransOpen</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Company</Name>
			<DataField>DataAreaId</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Invoice</Name>
			<DataField>Invoice</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CustTransRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedInt">
			<Name>CustTransTableId</Name>
			<ViewMethod>custTransTableId</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CreditMax</Name>
			<DataField>CreditMax</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CreditRating</Name>
			<DataField>CreditRating</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>SystemCurrencyCreditMax</Name>
			<ViewMethod>convertCreditMax</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CollectionLetter</Name>
			<DataField>CollectionLetter</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CollectionLetterCode</Name>
			<DataField>CollectionLetterCode</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransType</Name>
			<DataField>TransType</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReasonRefRecId</Name>
			<DataField>ReasonRefRecId</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Party</Name>
			<DataField>Party</DataField>
			<DataSource>CustTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CrossRate</Name>
			<DataField>CrossRate</DataField>
			<DataSource>ExchangeRateEffectiveViewToday</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>GregorianDate</Name>
			<DataField>GregorianDate</DataField>
			<DataSource>ExchangeRateEffectiveViewToday</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CustTransOpenRecId</Name>
			<DataField>RecId</DataField>
			<DataSource>CustTransOpen</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>CustTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>CustTransSystemCurrencyAmount</Name>
			<ViewMethod>convertCurrencyCustTrans</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>isDSO30</Name>
			<ViewMethod>isDSO30</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>CustDispute</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>FollowUpDate</Name>
			<DataField>FollowUpDate</DataField>
			<DataSource>CustDispute</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedString">
			<Name>DisputeStatusTranslated</Name>
			<ViewMethod>translateDisputeStatus</ViewMethod>
			<StringSize>50</StringSize>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyInfo</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CompanyInfo</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>Ledger</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>Ledger</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CompanyInfo</JoinDataSource>
										<RelatedField>PrimaryForLegalEntity</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>DataArea</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SystemParameters</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>SystemParameters</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>ExchangeRateEffectiveViewToday</Name>
								<DynamicFields>Yes</DynamicFields>
								<FirstOnly>Yes</FirstOnly>
								<Table>ExchangeRateEffectiveViewToday</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>CurrencyCode</Name>
										<Field>AccountingCurrency</Field>
										<JoinDataSource>Ledger</JoinDataSource>
										<RelatedField>FromCurrencyCode</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>AccountingCurrency</Name>
										<Field>SystemCurrencyCode</Field>
										<JoinDataSource>SystemParameters</JoinDataSource>
										<RelatedField>ToCurrencyCode</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>SystemExchangeRateType</Field>
										<JoinDataSource>SystemParameters</JoinDataSource>
										<RelatedField>ExchangeRateType</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Partition</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>Partition</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DirPartyTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DirPartyTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>DirPartyTable_FK</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustTransOpen</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustTransOpen</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>AccountNum</Field>
										<JoinDataSource>CustTrans</JoinDataSource>
										<RelatedField>AccountNum</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>RecId</Field>
										<JoinDataSource>CustTrans</JoinDataSource>
										<RelatedField>RefRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>CustDispute</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustDispute</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>Status</Name>
										<Field>Status</Field>
										<Value>Disputed, PromiseToPay, PromiseToPayBroken</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>CustTrans</JoinDataSource>
										<RelatedField>CustTrans</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>AccountNum</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>AccountNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>DataAreaId</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>DataAreaId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>