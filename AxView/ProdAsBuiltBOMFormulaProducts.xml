<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMFormulaProducts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdAsBuiltBOMFormulaProducts extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productionOrder</Name>
				<Source><![CDATA[
    /// <summary>Retrieves a production order.</summary>
    /// <returns>A production order.</returns>
    internal ProdTable productionOrder()
    {
        return ProdTable::findTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>coByProduct</Name>
				<Source><![CDATA[
    /// <summary>Retrieves a batch co/by product.</summary>
    /// <returns>A batch co/by product.</returns>
    internal PmfProdCoBy coByProduct()
    {
        return PmfProdCoBy::findTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the name of a product that the item represents.</summary>
    /// <returns>A name of a product in the company language.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display EcoResProductName productName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryUnitId</Name>
				<Source><![CDATA[
    /// <summary>Retrieves a default inventory unit of the related product.</summary>
    /// <returns>An unit of measure symbol.</returns>
    internal UnitOfMeasureSymbol inventoryUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productType</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the production type of the related product.</summary>
    /// <returns>A production type.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display PmfProductType productType()
    {
        return InventTable::find(this.ItemId).PmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBomOrFormula</Name>
				<Source><![CDATA[
    /// <summary>Is BOM or formula product type.</summary>
    /// <returns>A boolean predicate.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display boolean isBomOrFormula()
    {
        var productType = InventTable::find(this.ItemId).PmfProductType;

        return productType == PmfProductType::BOM || productType == PmfProductType::Formula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCoByProduct</Name>
				<Source><![CDATA[
    /// <summary>Is Coproduct or Byproduct type.</summary>
    /// <returns>A boolean predicate.</returns>
    [SysClientCacheDataMethodAttribute(true)]
    internal display boolean isCoByProduct()
    {
        var productType = InventTable::find(this.ItemId).PmfProductType;

        return productType == PmfProductType::Co_Product || productType == PmfProductType::By_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalRemainder</Name>
				<Source><![CDATA[
    /// <summary>Get a physical remainder inventory quantity for a discrete or batchable product.</summary>
    /// <returns>A physical remainder inventory quantity.</returns>
    internal InventQty physicalRemainder()
    {
        InventQty remainder;
        if (this.isBomOrFormula())
        {
            remainder = this.productionOrder().RemainInventPhysical;
            return remainder;
        }

        if (this.isCoByProduct())
        {
            remainder = this.coByProduct().RemainCoByPhysical;
            return remainder;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the production LOT.</summary>
    /// <param name = "_inventTransId">A LOT ID.</param>
    /// <returns>A production LOT.</returns>
    internal static ProdAsBuiltBOMFormulaProducts find(InventTransId _inventTransId)
    {
        ProdAsBuiltBOMFormulaProducts prodAsBuiltBOMFormulaProducts;
        
        select firstonly prodAsBuiltBOMFormulaProducts
            where prodAsBuiltBOMFormulaProducts.InventTransId == _inventTransId;

        return prodAsBuiltBOMFormulaProducts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromGTIN</Name>
				<Source><![CDATA[
    /// <summary>Retrieves the production LOT from GTIN.</summary>
    /// <param name = "_productionOrderId">A production order ID.</param>
    /// <param name = "_gtin">A GTIN.</param>
    /// <returns>A production LOT.</returns>
    internal static ProdAsBuiltBOMFormulaProducts findFromGTIN(ProdId _productionOrderId, InventItemGTIN _gtin)
    {
        ProdAsBuiltBOMFormulaProducts   productLot;
        InventDimParm                   inventDimParm;
        InventDim                       inventDimCriteria = inventDim::find(_gtin.InventDimId);
        InventDim                       inventDim;

        inventDimParm.initFromInventDim(inventDimCriteria);
        select firstonly productLot
            where productLot.ProdId == _productionOrderId
               && productLot.ItemId == _gtin.ItemId
            #inventDimExistsJoin(productLot.InventDimId, inventDim, inventDimCriteria, inventDimParm);

        return productLot;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Query>ProdAsBuiltBOMFormulaProducts</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProdId</Name>
			<DataField>ProdId</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventDimId</Name>
			<DataField>InventDimId</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>QtyStUp</Name>
			<DataField>QtyStUp</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RemainInventPhysical</Name>
			<DataField>RemainInventPhysical</DataField>
			<DataSource>ProdTable</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>