<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransNeutralBase</c> view adds computed columns on top of the <c>ReqTrans</c> table 
/// which are used as group fields and ranges in the <c>ReqTransNeutral</c> view. 
/// </summary>
public class ReqTransNeutralBase extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refTypeGroupColumnDefinition</Name>
				<Source><![CDATA[
    public static str refTypeGroupColumnDefinition()
    {
        str refTypeColumn = SysComputedColumn::comparisonField(tablestr(ReqTransNeutralBase), tablestr(ReqTrans), fieldstr(ReqTrans, RefType));

        Map comparisonExpressionMap = new Map(Types::String, Types::String);

        SetEnumerator transferRefTypeEnumerator = ReqRefTypeDescriptor::transferTypes().getEnumerator();

        while (transferRefTypeEnumerator.moveNext())
        {
            ReqRefType transferRefType = transferRefTypeEnumerator.current();
            ReqTransNeutralRefTypeGroup neutralRefTypeGroup = ReqRefTypeDescriptor::neutralGroupForTransferRefType(transferRefType);
            comparisonExpressionMap.insert(SysComputedColumn::returnLiteral(transferRefType), SysComputedColumn::returnLiteral(neutralRefTypeGroup));
        }

        str defaultResultExpression = SysComputedColumn::returnLiteral(ReqTransNeutralRefTypeGroup::None);

        return SysComputedColumn::switch(refTypeColumn, comparisonExpressionMap, defaultResultExpression);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedExternallyColumnDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the definition of the column which determines whether the <c>ReqTrans</c> record
    /// is marked with a transaction from a different originator. Transactions that are externally marked cannot be neutralized. 
    /// </summary>
    /// <returns>
    /// The definition of the column which determines whether the <c>ReqTrans</c> record
    /// is marked with a transaction within the same inventory transaction originator.
    /// </returns>
    /// <remarks>
    /// There is only one scenario when self marking is relevant for neutral transaction deletion. 
    /// 
    /// If a quarantine order is started then the inventory transactions will look the following way (example below):
    /// 1. OriginId: o1, MarkedOriginId: none, Qty: -1, Site: s1, Warehouse: MainWarehouse, StatusIssue: Deducted
    /// 2. OriginId: o1, MarkedOriginId: o1, Qty: +1, Site: s1, Warehouse: QuarantineWarehouse, StatusReceipt: Received
    /// 3. OriginId: 01, MarkedOriginId: o1, Qty: -1, Site: s1, Warehouse: QuarantineWarehouse, StatusIssue: Reserved physically
    /// 4. OriginId: 01, MarkedOriginId: none, Qty: +1, Site: s1, Warehouse: MainWarehouse, StatusIssue: Ordered
    /// 
    /// In this case we will have the following <c>ReqTrans</c> records generated (physically updated ones will be included in on hand):
    /// 1. OriginId: 01, MarkedOriginId: o1, Qty: -1, Site: S1
    /// 2. OriginId: 01, MarkedOriginId: none, Qty: +1, Site: S1
    /// 
    /// In this case we are allowed delete both <c>ReqTrans</c> records as neutral despite the fact that one of them is marked because 
    /// we know for sure that the marked transaction has already been received at the warehouse.
    /// </remarks>
    private static str isMarkedExternallyColumnDefinition()
    {
        str markedOriginColumn = SysComputedColumn::returnField(tablestr(ReqTransNeutralBase), tablestr(ReqTrans), fieldstr(ReqTrans, MarkingRefInventTransOrigin));
        str originColumn = SysComputedColumn::returnField(tablestr(ReqTransNeutralBase), tablestr(ReqTrans), fieldstr(ReqTrans, InventTransOrigin));
        
        str zeroExpression = SysComputedColumn::returnLiteral(0);

        str isMarkedExpression = SysComputedColumn::compareExpressions(markedOriginColumn, '!=', zeroExpression);
        str isNotSelfMarkedExpression = SysComputedColumn::compareExpressions(markedOriginColumn, '!=', originColumn);
        str isMarkedExternallyExpression = SysComputedColumn::and2(isMarkedExpression, isNotSelfMarkedExpression);

        return SysComputedColumn::if(isMarkedExternallyExpression, SysComputedColumn::returnLiteral(NoYes::Yes), SysComputedColumn::returnLiteral(NoYes::No));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SCMPlanning:ReqTransNeutralBase_DevDocumentation</DeveloperDocumentation>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Visible>No</Visible>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PlanVersion</Name>
			<DataField>PlanVersion</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CovInventDimId</Name>
			<DataField>CovInventDimId</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>RefTypeGroup</Name>
			<ViewMethod>refTypeGroupColumnDefinition</ViewMethod>
			<EnumType>ReqTransNeutralRefTypeGroup</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RefType</Name>
			<DataField>RefType</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RefId</Name>
			<DataField>RefId</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ReqDateDlvOrig</Name>
			<DataField>ReqDateDlvOrig</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Level</Name>
			<DataField>Level</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ReqTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>IsMarkedExternally</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<ViewMethod>isMarkedExternallyColumnDefinition</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ReqTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ReqTrans</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>CovQtyZero</Name>
						<Field>CovQty</Field>
						<Value>0</Value>
					</AxQuerySimpleDataSourceRange>
					<AxQuerySimpleDataSourceRange>
						<Name>PmfPlanGroupIdBlank</Name>
						<Field>PmfPlanGroupId</Field>
						<Value>""</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>