<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostListParmView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCostListParmView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasMarking</c> column in the view.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>HasMarking</c> column in the view.
    /// </returns>
    public static str hasMarking()
    {
        TableName       viewName = tableStr(InventCostListParmView);
        FieldName       fieldName = fieldStr(InventCostListParmView, HasMarking);

        return InventCostListParmView::hasMarkingStr(viewName, fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMarkingStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasMarking</c> column in the view.
    /// </summary>
    /// <param name="_viewName">
    /// The name of the view.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the field in the view.
    /// </param>
    /// <returns>
    /// A string to compute the <c>HasMarking</c> column in the view.
    /// </returns>
    public static str hasMarkingStr(
        TableName   _viewName,
        FieldName   _fieldName)
    {
        return SysComputedColumn::adjustString(_viewName, _fieldName,
                    SysComputedColumn::max(
                        SysComputedColumn::if(
                            SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(_viewName, tableStr(InventTrans), fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                                SysComputedColumn::comparisonLiteral('0')),
                            SysComputedColumn::returnLiteral('0'),
                            SysComputedColumn::returnLiteral('1'))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasReturn</c> column in the view.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>HasReturn</c> column in the view.
    /// </returns>
    public static str hasReturn()
    {
        TableName       viewName = tableStr(InventCostListParmView);
        FieldName       fieldName = fieldStr(InventCostListParmView, HasReturn);

        return InventCostListParmView::hasReturnStr(viewName, fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReturnStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasReturn</c> column in the view.
    /// </summary>
    /// <param name="_viewName">
    /// The name of the view.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the field in the view.
    /// </param>
    /// <returns>
    /// A string to compute the <c>HasReturn</c> column in the view.
    /// </returns>
    public static str hasReturnStr(
        TableName   _viewName,
        FieldName   _fieldName)
    {
        return SysComputedColumn::adjustString(_viewName, _fieldName,
                    SysComputedColumn::max(
                        SysComputedColumn::if(
                            SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(_viewName, tableStr(InventTrans), fieldStr(InventTrans, ReturnInventTransOrigin)),
                                SysComputedColumn::comparisonLiteral('0')),
                            SysComputedColumn::returnLiteral('0'),
                            SysComputedColumn::returnLiteral('1'))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIssues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasIssues</c> column in the view.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>HasIssues</c> column in the view.
    /// </returns>
    public static str hasIssues()
    {
        TableName       viewName = tableStr(InventCostListParmView);
        FieldName       fieldName = fieldStr(InventCostListParmView, HasIssues);

        return InventCostListParmView::hasIssuesStr(viewName, fieldName);
    }
]]></Source>
			</Method>
			<Method>
				<Name>hasIssuesStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasReceipts</c> column in the view.
    /// </summary>
    /// <param name="_viewName">
    /// The name of the view.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the field in the view.
    /// </param>
    /// <returns>
    /// A string to compute the <c>HasReceipts</c> column in the view.
    /// </returns>
    public static str hasIssuesStr(
        TableName   _viewName,
        FieldName   _fieldName)
    {
        return SysComputedColumn::adjustString(_viewName, _fieldName,
                    SysComputedColumn::max(
                        SysComputedColumn::if(
                            SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(_viewName, tableStr(InventTrans), fieldStr(InventTrans, StatusIssue)),
                                SysComputedColumn::comparisonLiteral('0')),
                            SysComputedColumn::returnLiteral('0'),
                            SysComputedColumn::returnLiteral('1'))));
    }
]]></Source>
			</Method>
			<Method>
				<Name>hasReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasReceipts</c> column in the view.
    /// </summary>
    /// <returns>
    /// A string to compute the <c>HasReceipts</c> column in the view.
    /// </returns>
    public static str hasReceipts()
    {
        TableName       viewName = tableStr(InventCostListParmView);
        FieldName       fieldName = fieldStr(InventCostListParmView, HasReceipts);

        return InventCostListParmView::hasReceiptsStr(viewName, fieldName);
    }
]]></Source>
			</Method>
			<Method>
				<Name>hasReceiptsStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the string to compute the <c>HasReceipts</c> column in the view.
    /// </summary>
    /// <param name="_viewName">
    /// The name of the view.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the field in the view.
    /// </param>
    /// <returns>
    /// A string to compute the <c>HasReceipts</c> column in the view.
    /// </returns>
    public static str hasReceiptsStr(
        TableName   _viewName,
        FieldName   _fieldName)
    {
        return SysComputedColumn::adjustString(_viewName, _fieldName,
                    SysComputedColumn::max(
                        SysComputedColumn::if(
                            SysComputedColumn::equalExpression(
                                SysComputedColumn::comparisonField(_viewName, tableStr(InventTrans), fieldStr(InventTrans, StatusReceipt)),
                                SysComputedColumn::comparisonLiteral('0')),
                            SysComputedColumn::returnLiteral('0'),
                            SysComputedColumn::returnLiteral('1'))));
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001025</DeveloperDocumentation>
	<Label>@SYS4001024</Label>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>MinOfDateStatus</TitleField2>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasMarking</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinOfDateStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemId</Name>
			<DataField>ItemId</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>HasReturn</Name>
			<ExtendedDataType>InventCostHasReturn</ExtendedDataType>
			<ViewMethod>hasReturn</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>HasMarking</Name>
			<ExtendedDataType>InventCostHasMarking</ExtendedDataType>
			<ViewMethod>hasMarking</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>MinOfDateStatus</Name>
			<Aggregation>Min</Aggregation>
			<DataField>DateStatus</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>HasReceipts</Name>
			<ExtendedDataType>InventCostHasReceipts</ExtendedDataType>
			<ViewMethod>hasReceipts</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedEnum">
			<Name>HasIssues</Name>
			<ExtendedDataType>InventCostHasIssues</ExtendedDataType>
			<ViewMethod>hasIssues</ViewMethod>
			<EnumType>NoYes</EnumType>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventTrans</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>ValueOpen</Name>
						<Field>ValueOpen</Field>
						<Value>Yes</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy>
					<AxQuerySimpleGroupByField>
						<Name>ItemId</Name>
						<DataSource>InventTrans</DataSource>
						<Field>ItemId</Field>
					</AxQuerySimpleGroupByField>
				</GroupBy>
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>