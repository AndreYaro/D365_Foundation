<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransLoadQtyView</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventTransLoadQtyView extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>notReceivedNorPurchased</Name>
				<Source><![CDATA[
    private static str notReceivedNorPurchased(str _statusField = "")
    {
        str statusField = _statusField ? _statusField : SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusReceipt));
                                                        
        List andCondition = new List(Types::String);
        andCondition.addEnd(SysComputedColumn::compareExpressions(statusField, '!=', SysComputedColumn::comparisonLiteral(StatusReceipt::Received)));
        andCondition.addEnd(SysComputedColumn::compareExpressions(statusField, '!=', SysComputedColumn::comparisonLiteral(StatusReceipt::Purchased)));
        andCondition.addEnd(SysComputedColumn::compareExpressions(statusField, '!=', SysComputedColumn::comparisonLiteral(StatusReceipt::None)));
        
        return SysComputedColumn::and(andCondition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Definition of the HandlingQty computed field - if the item is CW enabled, returns the PdsCWQty from InventTrans, otherwise Qty.
    /// </summary>
    /// <returns>The definition of the field.</returns>
    public static str handlingQty()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PdsCatchWeight)))
        {
            return WHSInventTransLoadQtyView::handlingQtyCWEnabled();
        }
        else
        {          
            return WHSInventTransLoadQtyView::handlingQtyNotCW();          
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyNotCW</Name>
				<Source><![CDATA[
    private static str handlingQtyNotCW()
    {
        str qtyField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, Qty));
        str whsEnabledItem = SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(WHSInventEnabled), fieldStr(WHSInventEnabled, RecId)));
                
        return SysComputedColumn::if(whsEnabledItem, 
            SysComputedColumn::if(WHSInventTransLoadQtyView::notReceivedNorPurchased(), qtyField, SysComputedColumn::returnLiteral(0)),
            qtyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyCWEnabled</Name>
				<Source><![CDATA[
    private static str handlingQtyCWEnabled()
    {
        str isCWItem = WHSInventTransLoadQtyView::isCWItemDefinition();            
        str pdsQtyField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, PdsCWQty));

        str qtyField;
        
        qtyField = WHSInventTransLoadQtyView::handlingQtyNotCW();

        return SysComputedColumn::if(isCWItem, pdsQtyField, qtyField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItemDefinition</Name>
				<Source><![CDATA[
    private static str isCWItemDefinition()
    {
        return WHSInventTransLoadQtyView::buildCheckIfRecordExistComputedColumnExpression(
            tableNum(PdsCatchWeightItem),
            fieldNum(PdsCatchWeightItem, ItemId),
            fieldNum(PdsCatchWeightItem, DataAreaId),
            fieldNum(PdsCatchWeightItem, Partition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckIfRecordExistComputedColumnExpression</Name>
				<Source><![CDATA[
    private static str buildCheckIfRecordExistComputedColumnExpression(
        TableId _tableToCheckAgainst,
        FieldId _fieldIdToCheckAgainst,
        FieldId _dataAreaFieldId,
        FieldId _partitionFieldId)
    {
        SysDictTable dictTableToCheckAgainst = new SysDictTable(_tableToCheckAgainst);
        FieldName fieldNameToCheckAgainst = WHSInventTransLoadQtyView::buildFieldName(dictTableToCheckAgainst, _fieldIdToCheckAgainst);
        List andEqualExpressions = new List(Types::String);
        TableName whsInventTransLoadQtyViewName = viewStr(WHSInventTransLoadQtyView);
        TableName inventTransTableName = tableStr(InventTrans);

        // add item Id criterion
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            fieldNameToCheckAgainst,
            SysComputedColumn::comparisonField(
                whsInventTransLoadQtyViewName,
                inventTransTableName,
                fieldStr(InventTrans, ItemId))));

        // add data area Id criterion
        FieldName pdsCatchWeightItemDataAreaIdFieldName = WHSInventTransLoadQtyView::buildFieldName(dictTableToCheckAgainst, _dataAreaFieldId);
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            pdsCatchWeightItemDataAreaIdFieldName,
            SysComputedColumn::comparisonField(
                whsInventTransLoadQtyViewName,
                inventTransTableName,
                fieldStr(InventTrans, DataAreaId))));

        // add partition criterion
        FieldName pdsCatchWeightItemPartitionFieldName = WHSInventTransLoadQtyView::buildFieldName(dictTableToCheckAgainst, _partitionFieldId);
        andEqualExpressions.addEnd(SysComputedColumn::equalExpression(
            pdsCatchWeightItemPartitionFieldName,
            SysComputedColumn::comparisonField(
                whsInventTransLoadQtyViewName,
                inventTransTableName,
                fieldStr(InventTrans, Partition))));

        // Subquery is added due to the platform issue with building a view that has disabled non-root data sources.
        return WHSInventTransLoadQtyView::buildCheckIfRecordExistSubQuery(
            fieldNameToCheckAgainst,
            dictTableToCheckAgainst.name(DbBackend::Sql),
            andEqualExpressions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCheckIfRecordExistSubQuery</Name>
				<Source><![CDATA[
    private static str buildCheckIfRecordExistSubQuery(FieldName _fieldNameToProbe, TableName _flagTableName, List _andEqualExpressions)
    {
        return SysComputedColumn::isNotNullExpression(
            strFmt(
                '(SELECT TOP 1 %1 FROM %2 WHERE %3)',
                _fieldNameToProbe,
                _flagTableName,
                SysComputedColumn::and(_andEqualExpressions)));            
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldName</Name>
				<Source><![CDATA[
    private static FieldName buildFieldName(SysDictTable _table, FieldId _fieldId)
    {
        return _table.name(DbBackend::Sql) + '.' + _table.fieldObject(_fieldId).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSNonLoadMarkedReceiptUpdatedHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Definition of the WHSNonLoadMarkedReceiptUpdatedHandlingQty - if the inventory transaction is not marked with a load and in any receipt status
    /// above Ordered (therefore, in statuses Arrived, Registered, Received, Purchased), then return HandlingQty.
    /// 
    /// This is only relevant for WHS enabled items; if the item is not WHS enabled, then return zero. 
    /// </summary>
    /// <returns>The definition of the field.</returns>
    public static str WHSNonLoadMarkedReceiptUpdatedHandlingQty()
    {
        str whsEnabledItem = SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(WHSInventEnabled), fieldStr(WHSInventEnabled, RecId)));
                
        str statusReceiptField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusReceipt));
        str statusReceiptBelowOrdered = SysComputedColumn::compareExpressions(statusReceiptField, '<', SysComputedColumn::comparisonLiteral(StatusReceipt::Ordered));

        str statusIssueField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusIssue));
        str statusIssueNone = SysComputedColumn::equalExpression(statusIssueField, SysComputedColumn::comparisonLiteral(StatusIssue::None));
        
        str packingSlipReturnedField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, PackingSlipReturned));
        str packingSlipReturnedFalse = SysComputedColumn::equalExpression(packingSlipReturnedField, SysComputedColumn::comparisonLiteral(false));

        str loadIdField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, LoadId));
        str loadIdNotMarked = SysComputedColumn::equalExpression(loadIdFIeld, SysComputedColumn::comparisonLiteral(''));

        str nonLoadMarkedReceiptUpdatedHandlingQty = SysComputedColumn::if(
                                                        SysComputedColumn::and2(loadIdNotMarked, SysComputedColumn::and2(packingSlipReturnedFalse, SysComputedColumn::and2(statusReceiptBelowOrdered, statusIssueNone))),
                                                        WHSInventTransLoadQtyView::HandlingQty(),
                                                        SysComputedColumn::comparisonLiteral(0));

        return SysComputedColumn::if(whsEnabledItem, nonLoadMarkedReceiptUpdatedHandlingQty, SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSLoadMarkedReceiptUpdatedHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Definition of the WHSLoadMarkedReceiptUpdatedHandlingQty - if the inventory transaction is marked with a load and in any receipt status
    /// above Ordered (therefore, in statuses Arrived, Registered, Received, Purchased), then return HandlingQty.
    ///
    /// This is only relevant for WHS enabled items; if the item is not WHS enabled, then return zero.
    /// </summary>
    /// <returns>The definition of the field.</returns>
    public static str WHSLoadMarkedReceiptUpdatedHandlingQty()
    {
        str whsEnabledItem = SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(WHSInventEnabled), fieldStr(WHSInventEnabled, RecId)));
                
        str statusReceiptField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusReceipt));
        str statusReceiptBelowOrdered = SysComputedColumn::compareExpressions(statusReceiptField, '<', SysComputedColumn::comparisonLiteral(StatusReceipt::Ordered));

        str statusIssueField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusIssue));
        str statusIssueNone = SysComputedColumn::equalExpression(statusIssueField, SysComputedColumn::comparisonLiteral(StatusIssue::None));
        
        str packingSlipReturnedField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, PackingSlipReturned));
        str packingSlipReturnedFalse = SysComputedColumn::equalExpression(packingSlipReturnedField, SysComputedColumn::comparisonLiteral(false));

        str loadIdField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, LoadId));
        str loadIdMarked = SysComputedColumn::notEqualExpression(loadIdFIeld, SysComputedColumn::comparisonLiteral(''));

        str nonLoadMarkedReceiptUpdatedHandlingQty = SysComputedColumn::if(
                                                        SysComputedColumn::and2(loadIdMarked, SysComputedColumn::and2(packingSlipReturnedFalse, SysComputedColumn::and2(statusReceiptBelowOrdered, statusIssueNone))),
                                                        WHSInventTransLoadQtyView::HandlingQty(),
                                                        SysComputedColumn::comparisonLiteral(0));

        return SysComputedColumn::if(whsEnabledItem, nonLoadMarkedReceiptUpdatedHandlingQty, SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSLoadMarkedPhysicalUpdatedHandlingQty</Name>
				<Source><![CDATA[
    public static str WHSLoadMarkedPhysicalUpdatedHandlingQty()
    {
        str whsEnabledItem = SysComputedColumn::isNotNullExpression(SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(WHSInventEnabled), fieldStr(WHSInventEnabled, RecId)));
                
        str statusIssueField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusIssue));
        str statusIssueNone = SysComputedColumn::equalExpression(statusIssueField, SysComputedColumn::comparisonLiteral(StatusIssue::None));
        
        str packingSlipReturnedField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, PackingSlipReturned));
        str packingSlipReturnedFalse = SysComputedColumn::equalExpression(packingSlipReturnedField, SysComputedColumn::comparisonLiteral(false));

        str loadIdField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, LoadId));
        str loadIdMarked = SysComputedColumn::notEqualExpression(loadIdFIeld, SysComputedColumn::comparisonLiteral(''));

        str statusReceiptField = SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, StatusReceipt));
        str ReceivedExpr = SysComputedColumn::compareExpressions(statusReceiptField, '=', SysComputedColumn::comparisonLiteral(StatusReceipt::Received));
        str PurchasedExpr = SysComputedColumn::compareExpressions(statusReceiptField, '=', SysComputedColumn::comparisonLiteral(StatusReceipt::Purchased));

        List andCondition = new List(Types::String);
        andCondition.addEnd(loadIdMarked);
        andCondition.addEnd(packingSlipReturnedFalse);
        andCondition.addEnd(statusIssueNone);
        andCondition.addEnd(SysComputedColumn::or2(ReceivedExpr, PurchasedExpr));
            
        str loadMarkedPhysicalUpdatedHandlingQty = SysComputedColumn::if(SysComputedColumn::and(andCondition),
            SysComputedColumn::comparisonField(tableStr(WHSInventTransLoadQtyView), tableStr(InventTrans), fieldStr(InventTrans, Qty)),
            SysComputedColumn::comparisonLiteral(0));

        return SysComputedColumn::if(whsEnabledItem, loadMarkedPhysicalUpdatedHandlingQty, SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>InventTransOrigin</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LoadId</Name>
			<DataField>LoadId</DataField>
			<DataSource>InventTrans</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>HandlingQty</Name>
			<ExtendedDataType>InventHandlingQty</ExtendedDataType>
			<ViewMethod>HandlingQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>WHSNonLoadMarkedReceiptUpdatedHandlingQty</Name>
			<ViewMethod>WHSNonLoadMarkedReceiptUpdatedHandlingQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>WHSLoadMarkedReceiptUpdatedHandlingQty</Name>
			<ViewMethod>WHSLoadMarkedReceiptUpdatedHandlingQty</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>WHSLoadMarkedPhysicalUpdatedHandlingQty</Name>
			<ViewMethod>WHSLoadMarkedPhysicalUpdatedHandlingQty</ViewMethod>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventTrans</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventTrans</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>InventTransOrigin</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>InventTransOrigin</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>WHSInventEnabled</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>WHSInventEnabled</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>ItemId</Field>
										<JoinDataSource>InventTransOrigin</JoinDataSource>
										<RelatedField>ItemId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>InventTransOrigin</Field>
								<JoinDataSource>InventTrans</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxView>