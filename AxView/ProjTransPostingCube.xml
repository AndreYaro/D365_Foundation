<?xml version="1.0" encoding="utf-8"?>
<AxView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransPostingCube</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTransPostingCube extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projActualAccruedLoss</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual accrued loss expression.
/// </summary>
/// <returns>
/// An expression for the the actual accrued loss.
/// </returns>
public static str projActualAccruedLoss()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Accrued Loss]
    // AS ([Measures].[Amount], ([Ledger updates].[Posting type].&[135], [Ledger updates].[Transaction type].&[3])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedCost)))
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualAccruedRevenue</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual accrued revenue expression.
/// </summary>
/// <returns>
/// An expression for the actual accrued revenue.
/// </returns>
public static str projActualAccruedRevenue()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Accrued Revenue]
    // AS Sum
    //(
    //    (
    //        {[Ledger updates].[Transaction type].&[1], [Ledger updates].[Transaction type].&[2],
    //        [Ledger updates].[Transaction type].&[3], [Ledger updates].[Transaction type].&[4]},
    //        [Ledger updates].[Posting type].&[128]
    //    ),
    //    [Measures].[Amount] *-1
    //)
    //+
    //Sum
    //(
    //    (
    //        [Ledger updates].[Transaction type].&[1],
    //        {[Ledger updates].[Posting type].&[130],[Ledger updates].[Posting type].&[132],
    //        [Ledger updates].[Posting type].&[137], [Ledger updates].[Posting type].&[207]}
    //    ),
    //    [Measures].[Amount] *-1
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);
    List            projAccuredRevenueList = new List(Types::String);

    List            projAccuredList = new List(Types::String);
    List            projAccuredTransPostingList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    projAccuredRevenueList.addEnd(
        SysComputedColumn::or(transTypeList));

    projAccuredRevenueList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalue)))
    );

    projAccuredList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedTurnoverProd)))
    );

    projAccuredList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProJAccruedTurnoverProfit)))
    );

    projAccuredList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount)))
    );

    projAccuredList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueSubscription)))
    );

    projAccuredTransPostingList.addEnd(
        SysComputedColumn::or(projAccuredList)
    );

    projAccuredTransPostingList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(projAccuredRevenueList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(projAccuredTransPostingList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCashInflow</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cash inflow expression
/// </summary>
/// <returns>
/// An expression for the actual cash inflow
/// </returns>
public static str projActualCashInflow()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cash Inflow]
    // AS (Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        {[Ledger updates].[Posting type].&[126], [Ledger updates].[Posting type].&[127], [Ledger updates].[Posting type].&[138]},
    //        {[Ledger updates].[Payment status].&[1],[Ledger updates].[Payment status].&[2]}
    //    ),
    //    [Measures].[Amount]
    //))*-1,
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList = new List(Types::String);
    List            paymentStatusList = new List(Types::String);

    List            actualCashInflowList = new List(Types::String);

    actualCashInflowList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualCashInflowList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnover)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
    );
    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
    {
        postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::PSAProjRetain))));
    }

    actualCashInflowList.addEnd(
        SysComputedColumn::or(postingTypeList)
    );

    paymentStatusList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PaymentStatus)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::ExpectedPayment)))
    );

    paymentStatusList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PaymentStatus)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::Paid)))
    );

    actualCashInflowList.addEnd(
        SysComputedColumn::or(paymentStatusList)
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(actualCashInflowList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst))),
                        SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCashOutflow</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cash outflow expression.
/// </summary>
/// <returns>
/// An expression for the actual cash outflow.
/// </returns>
public static str projActualCashOutflow()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cash Outflow]
    // AS (Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        {[Ledger updates].[Posting type].&[121], [Ledger updates].[Posting type].&[123], [Ledger updates].[Posting type].&[134],
    //          [Ledger updates].[Posting type].&[139]},
    //        {[Ledger updates].[Payment status].&[1],[Ledger updates].[Payment status].&[2]}
    //    ),
    //    [Measures].[Amount]
    //)),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList = new List(Types::String);
    List            paymentStatusList = new List(Types::String);

    List            actualCashOutflowList = new List(Types::String);

    actualCashOutflowList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualCashOutflowList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
    );

    actualCashOutflowList.addEnd(
        SysComputedColumn::or(postingTypeList)
    );

    paymentStatusList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PaymentStatus)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::ExpectedPayment)))
    );

    paymentStatusList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PaymentStatus)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjPaymentStatus::Paid)))
    );

    actualCashOutflowList.addEnd(
        SysComputedColumn::or(paymentStatusList)
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(actualCashOutflowList),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualConsumption</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual consumption expression.
/// </summary>
/// <returns>
/// An expression for the actual consumption.
/// </returns>
public static str projActualConsumption()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Consumption]
    // AS [Actual Consumption Cost - Hours] + [Actual Consumption Cost - Expense] + [Actual Consumption Cost - Item],
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualConsumptionCostHours(),
            SysComputedColumn::add(
                ProjTransPostingCube::projActualConsumptionCostExpense(),
                ProjTransPostingCube::projActualConsumptionCostItem())
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualConsumptionCostExpense</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual consumption cost expense expression.
/// </summary>
/// <returns>
/// An expression for the actual consumption cost expense.
/// </returns>
public static str projActualConsumptionCostExpense()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Consumption Cost - Expense]
    // AS Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[3],
    //        {[Ledger updates].[Posting type].&[121], [Ledger updates].[Posting type].&[123]}
    //    ),
    //    [Measures].[Amount]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList = new List(Types::String);

    List            actualConsumptionCostExpenseList = new List(Types::String);

    actualConsumptionCostExpenseList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualConsumptionCostExpenseList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualConsumptionCostExpenseList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
    );

    actualConsumptionCostExpenseList.addEnd(
        SysComputedColumn::or(postingTypeList)
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(actualConsumptionCostExpenseList),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualConsumptionCostHours</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual consumption cost hours expression.
/// </summary>
/// <returns>
/// An expression for the actual consumption cost hours.
/// </returns>
public static str projActualConsumptionCostHours()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Consumption Cost - Hours]
    // AS Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[2],
    //        {[Ledger updates].[Posting type].&[121], [Ledger updates].[Posting type].&[123]}
    //    ),
    //    [Measures].[Amount]
    //)
    //+
    //Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[2], [Project parameters].[StatementConsumpHourCost].&[1],
    //        {[Ledger updates].[Posting type].&[134], [Ledger updates].[Posting type].&[139]}
    //    ),
    //    [Measures].[Amount]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList1 = new List(Types::String);
    List            postingTypeList2 = new List(Types::String);

    List            actualConsumptionCostHoursList1 = new List(Types::String);
    List            actualConsumptionCostHoursList2 = new List(Types::String);

    actualConsumptionCostHoursList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualConsumptionCostHoursList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualConsumptionCostHoursList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
    );

    actualConsumptionCostHoursList1.addEnd(
        SysComputedColumn::or(postingTypeList1)
    );

    actualConsumptionCostHoursList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualConsumptionCostHoursList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualConsumptionCostHoursList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    actualConsumptionCostHoursList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementConsumpHourCost)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
    );

    actualConsumptionCostHoursList2.addEnd(
        SysComputedColumn::or(postingTypeList2)
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(actualConsumptionCostHoursList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(actualConsumptionCostHoursList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualConsumptionCostItem</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual consumption cost item expression.
/// </summary>
/// <returns>
/// An expression for the actual consumption cost item.
/// </returns>
public static str projActualConsumptionCostItem()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Consumption Cost - Item]
    // AS Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[4],
    //        {[Ledger updates].[Posting type].&[121], [Ledger updates].[Posting type].&[124],
    //        [Ledger updates].[Posting type].&[125]}
    //    ),
    //    [Measures].[Amount]
    //)
    //+
    //Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[4],
    //        [Ledger updates].[Posting type].&[134], [Project parameters].[ItemNeverLedgerConsum].&[1]
    //    ),
    //    [Measures].[Amount]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList1 = new List(Types::String);
    List            postingTypeList2 = new List(Types::String);

    List            actualConsumptionCostItemList1 = new List(Types::String);
    List            actualConsumptionCostItemList2 = new List(Types::String);

    actualConsumptionCostItemList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualConsumptionCostItemList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualConsumptionCostItemList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
    );

    actualConsumptionCostItemList1.addEnd(
        SysComputedColumn::or(postingTypeList1)
    );

    actualConsumptionCostItemList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualConsumptionCostItemList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualConsumptionCostItemList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    actualConsumptionCostItemList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, ItemNeverLedgerConsum)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
    );
    
    actualConsumptionCostItemList2.addEnd(
        SysComputedColumn::or(postingTypeList2)
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(actualConsumptionCostItemList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                        SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(actualConsumptionCostItemList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCost</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cost expression.
/// </summary>
/// <returns>
/// An expression for the actual cost.
/// </returns>
public static str projActualCost()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cost]
    // AS [Actual Cost-Hour] + [Actual Cost-Expense] + [Actual Cost-Item] + [Actual Accrued Loss],
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualCostHour(),
            SysComputedColumn::add(
                ProjTransPostingCube::projActualCostExpense(),
                SysComputedColumn::add(
                    ProjTransPostingCube::projActualCostItem(),
                    ProjTransPostingCube::projActualAccruedLoss()))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCostCommitted</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cost committed expression.
/// </summary>
/// <returns>
/// An expression for the actual cost committed.
/// </returns>
public static str projActualCostCommitted()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cost Committed]
    // AS [Actual Consumption Cost - Hours] + [Actual Consumption Cost - Expense] + [Actual Consumption Cost - Item],
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualConsumptionCostHours(),
        SysComputedColumn::add(
            ProjTransPostingCube::projActualConsumptionCostExpense(),
            ProjTransPostingCube::projActualConsumptionCostItem())
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCostExpense</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cost-expense expression.
/// </summary>
/// <returns>
/// An expression for the actual cost-expense.
/// </returns>
public static str projActualCostExpense()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cost-Expense]
    // AS ([Measures].[Amount], ([Ledger updates].[Posting type].&[121], [Ledger updates].[Transaction type].&[3])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCostHour</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cost-hour expression.
/// </summary>
/// <returns>
/// An expression for the actual cost-hour.
/// </returns>
public static str projActualCostHour()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cost-Hour]
    // AS (([Measures].[Amount], ([Ledger updates].[Posting type].&[121], [Ledger updates].[Transaction type].&[2]))
    //+
    //([Measures].[Amount], ([Ledger updates].[Posting type].&[134], [Ledger updates].[Transaction type].&[2], [Project parameters].[No Never Ledger Hour Cost].&[1]))
    //+
    //([Measures].[Amount], ([Ledger updates].[Posting type].&[139], [Ledger updates].[Transaction type].&[2], [Project parameters].[No Never Ledger Hour Cost].&[1]))),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList1 = new List(Types::String);
    List            transTypeList2 = new List(Types::String);
    List            transTypeList3 = new List(Types::String);

    transTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    transTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    transTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementPLHourCost)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    transTypeList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
    );

    transTypeList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementPLHourCost)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList1),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::add(
                        SysComputedColumn::if(
                            SysComputedColumn::and(transTypeList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::if(
                            SysComputedColumn::and(transTypeList3),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualCostItem</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual cost-item expression.
/// </summary>
/// <returns>
/// An expression for the actual cost-item.
/// </returns>
public static str projActualCostItem()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Cost-Item]
    // AS (([Measures].[Amount], ([Ledger updates].[Posting type].&[121], [Ledger updates].[Transaction type].&[4]))
    //+
    //([Measures].[Amount], ([Ledger updates].[Posting type].&[124], [Ledger updates].[Transaction type].&[4]))
    //+
    //([Measures].[Amount], ([Ledger updates].[Posting type].&[134], [Ledger updates].[Transaction type].&[4], [Project parameters].[ItemNeverLedgerPL].&[1]))),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            projActualCostItemList1 = new List(Types::String);
    List            projActualCostItemList2 = new List(Types::String);
    List            projActualCostItemList3 = new List(Types::String);

    projActualCostItemList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    projActualCostItemList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    projActualCostItemList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOffsetAccountItem)))
    );

    projActualCostItemList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    projActualCostItemList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    projActualCostItemList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    projActualCostItemList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, ItemNeverLedgerPL)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(projActualCostItemList1),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::add(
                        SysComputedColumn::if(
                            SysComputedColumn::and(projActualCostItemList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::if(
                            SysComputedColumn::and(projActualCostItemList3),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualGrossMargin</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual gross margin expression.
/// </summary>
/// <returns>
/// An expression for the actual gross margin.
/// </returns>
public static str projActualGrossMargin()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Gross Margin]
    // AS ([Measures].[Actual Revenue] - [Measures].[Actual Cost]),
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualRevenue(),
            SysComputedColumn::negative(
                ProjTransPostingCube::projActualCost())
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualGrossWIPCost</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual gross WIP cost expression.
/// </summary>
/// <returns>
/// An expression for the actual gross WIP cost.
/// </returns>
public static str projActualGrossWIPCost()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Gross WIP Cost]
    // AS ([Measures].[Actual WIP cost] + [Measures].[Actual WIP sales]),
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualWIPCost(),
        ProjTransPostingCube::projActualWIPSales()
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualHours</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual hours expression.
/// </summary>
/// <returns>
/// An expression for the actual hours.
/// </returns>
public static str projActualHours()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Hours]
    // AS Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[2],
    //        {[Ledger updates].[Posting type].&[121], [Ledger updates].[Posting type].&[123]}
    //    ),
    //    [Measures].[Ledger updates Quantity]
    //)
    //+
    //Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[2], [Project parameters].[StatementConsumpHourCost].&[1],
    //        {[Ledger updates].[Posting type].&[134], [Ledger updates].[Posting type].&[139]}
    //    ),
    //    [Measures].[Ledger updates Quantity]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList1 = new List(Types::String);
    List            postingTypeList2 = new List(Types::String);

    List            actualHoursList1 = new List(Types::String);
    List            actualHoursList2 = new List(Types::String);

    actualHoursList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualHoursList1.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualHoursList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjCost)))
    );

    postingTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
    );

    actualHoursList1.addEnd(
        SysComputedColumn::or(postingTypeList1)
    );

    actualHoursList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualHoursList2.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualHoursList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    actualHoursList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjParameters_1) , fieldStr(ProjParameters, StatementConsumpHourCost)),
                    SysComputedColumn::comparisonLiteral(enum2int(NoYes::Yes)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNeverLedger)))
    );

    postingTypeList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjNoLedger)))
    );

    actualHoursList2.addEnd(
        SysComputedColumn::or(postingTypeList2)
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(actualHoursList1),
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, Qty)),
                        SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(actualHoursList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, Qty)),
                            SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualInvoicedOnAccount</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual invoiced on-account expression.
/// </summary>
/// <returns>
/// An expression for the actual invoiced on-account.
/// </returns>
public static str projActualInvoicedOnAccount()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Invoiced On-account]
    // AS Sum
    //(
    //    (
    //        Except
    //        (
    //            [Ledger updates].[Ledger origin].children, {[Ledger updates].[Ledger origin].&[57],
    //            [Ledger updates].[Ledger origin].&[58]}
    //        ),
    //        [Ledger updates].[Transaction type].&[5],
    //        {[Ledger updates].[Posting type].&[122], [Ledger updates].[Posting type].&[138],
    //        [Ledger updates].[Posting type].&[137], [Ledger updates].[Posting type].&[127]}
    //    ),
    //    [Measures].[Amount] * -1
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            postingTypeList = new List(Types::String);

    List            actualInvoicedOnAccountList = new List(Types::String);

    actualInvoicedOnAccountList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::EliminateEstimate)))
    );

    actualInvoicedOnAccountList.addEnd(
                SysComputedColumn::notEqualExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, LedgerOrigin)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjOrigin::ReverseElimination)))
    );

    actualInvoicedOnAccountList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjAccruedRevenueOnAccount)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
    );

    actualInvoicedOnAccountList.addEnd(
        SysComputedColumn::or(postingTypeList)
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(actualInvoicedOnAccountList),
                    SysComputedColumn::negative(
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1), fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualInvoicedRevenue</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual invoiced revenue expression.
/// </summary>
/// <returns>
/// An expression for the actual invoiced revenue.
/// </returns>
public static str projActualInvoicedRevenue()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Invoiced Revenue]
    // AS Sum
    //(
    //    (
    //        {[Ledger updates].[Transaction type].&[1], [Ledger updates].[Transaction type].&[2],
    //        [Ledger updates].[Transaction type].&[3], [Ledger updates].[Transaction type].&[4]},
    //        [Ledger updates].[Posting type].&[126]
    //    ),
    //    [Measures].[Amount] *-1
    //)
    //+
    //Sum
    //(
    //    (
    //        {[Ledger updates].[Transaction type].&[5]},
    //        [Ledger updates].[Posting type].&[127]
    //    ),
    //    [Measures].[Amount] *-1
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);
    List            projInvoicedRevenueList = new List(Types::String);

    List            projOnAccountList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    projInvoicedRevenueList.addEnd(
        SysComputedColumn::or(transTypeList));

    projInvoicedRevenueList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjTurnover)))
    );

    projOnAccountList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
    );

    projOnAccountList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjOnAccount)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(projInvoicedRevenueList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(projOnAccountList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualNetCashflow</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual net cash flow expression.
/// </summary>
/// <returns>
/// An expression for the actual net cash flow.
/// </returns>
public static str projActualNetCashflow()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Net Cash Flow]
    // AS ([Measures].[Actual Cash Inflow] - [Measures].[Actual Cash Outflow]),
    //VISIBLE = 1;

    return SysComputedColumn::add(
        ProjTransPostingCube::projActualCashInflow(),
            SysComputedColumn::negative(
                ProjTransPostingCube::projActualCashOutflow())
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualNetWIP</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual net WIP expression.
/// </summary>
/// <returns>
/// An expression for the actual net WIP.
/// </returns>
public static str projActualNetWIP()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Net WIP]
    // AS ([Measures].[Actual Gross WIP Cost] - [Measures].[Actual WIP Invoiced On-account]),
    //VISIBLE = 1;

    return SysComputedColumn::subtract(
        ProjTransPostingCube::projActualGrossWIPCost(),
        ProjTransPostingCube::projActualWIPInvoicedOnAccount());
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualPayrollAllocation</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual payroll allocation expression.
/// </summary>
/// <returns>
/// An expression for the actual payroll allocation.
/// </returns>
public static str projActualPayrollAllocation()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Payroll Allocation]
    // AS SUM(([Ledger updates].[Posting type].&[122], [Ledger updates].[Transaction type].&[2]), ABS([Measures].[Amount])),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjPayrollAllocation)))
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::abs(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualRevenue</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual revenue expression.
/// </summary>
/// <returns>
/// An expression for the actual revenue.
/// </returns>
public static str projActualRevenue()
{
    //CREATE MEMBER CURRENTCUBE.[Actual Revenue]
    // AS ([MEASURES].[Actual Invoiced Revenue] + [MEASURES].[Actual Accrued Revenue]),
    //VISIBLE = 1;

    return SysComputedColumn::add(
                ProjTransPostingCube::projActualInvoicedRevenue(),
                ProjTransPostingCube::projActualAccruedRevenue()
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualWIPCost</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual WIP cost expression.
/// </summary>
/// <returns>
/// An expression for the actual WIP cost.
/// </returns>
public static str projActualWIPCost()
{
    //CREATE MEMBER CURRENTCUBE.[Actual WIP Cost]
    // AS Sum
    //(
    //    (
    //        {[Ledger updates].[Transaction type].&[2], [Ledger updates].[Transaction type].&[3]},
    //        [Ledger updates].[Posting type].&[123]
    //    ),
    //    [Measures].[Amount]
    //)
    //+
    //Sum
    //(
    //    (
    //        [Ledger updates].[Transaction type].&[4], [Ledger updates].[Posting type].&[125]
    //    ),
    //    [Measures].[Amount]
    //)
    //+
    //Sum
    //(
    //    (
    //        [Ledger updates].[Transaction type].&[3], [Ledger updates].[Posting type].&[136]
    //    ),
    //    [Measures].[Amount]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList1 = new List(Types::String);

    List            wipList1 = new List(Types::String);
    List            wipList2 = new List(Types::String);
    List            wipList3 = new List(Types::String);

    transTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    wipList1.addEnd(
                SysComputedColumn::or(transTypeList1)
    );

    wipList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCostvalue)))
    );

    wipList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    wipList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjStatusAccountItem)))
    );

    wipList3.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    wipList3.addEnd(
        SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPCost)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(wipList1),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)),
                    SysComputedColumn::add(
                        SysComputedColumn::if(
                            SysComputedColumn::and(wipList2),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)),
                        SysComputedColumn::if(
                            SysComputedColumn::and(wipList3),
                            SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                            SysComputedColumn::returnLiteral(0)))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualWIPInvoicedOnAccount</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual WIP invoiced on-account expression.
/// </summary>
/// <returns>
/// An expression for the actual WIP invoiced on-account.
/// </returns>
public static str projActualWIPInvoicedOnAccount()
{
    //CREATE MEMBER CURRENTCUBE.[Actual WIP Invoiced On-account]
    // AS Sum
    //(
    //    (
    //        [Ledger updates].[Transaction type].&[5],
    //        [Ledger updates].[Posting type].&[138]
    //    ),
    //    [Measures].[Amount] * -1
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::OnAccount)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPInvoicedOnAccount)))
    );

    return SysComputedColumn::if(
                    SysComputedColumn::and(transTypeList),
                    SysComputedColumn::negative(
                        SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst))),
                    SysComputedColumn::returnLiteral(0)
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>projActualWIPSales</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual WIP sales expression.
/// </summary>
/// <returns>
/// An expression for the actual WIP sales.
/// </returns>
public static str projActualWIPSales()
{
    //CREATE MEMBER CURRENTCUBE.[Actual WIP Sales]
    // AS Sum
    //(
    //    (
    //        {[Ledger updates].[Transaction type].&[1], [Ledger updates].[Transaction type].&[2], [Ledger updates].[Transaction type].&[3], [Ledger updates].[Transaction type].&[4]},
    //        [Ledger updates].[Posting type].&[129]
    //    ),
    //    [Measures].[Amount]
    //)
    //+
    //Sum
    //(
    //    (
    //        [Ledger updates].[Transaction type].&[1],
    //        {[Ledger updates].[Posting type].&[131], [Ledger updates].[Posting type].&[133], [Ledger updates].[Posting type].&[208]}
    //    ),
    //    [Measures].[Amount]
    //),
    //VISIBLE = 1;

    TableName       viewName = tableStr(ProjTransPostingCube);

    List            transTypeList = new List(Types::String);
    List            postingTypeList = new List(Types::String);
    List            wipList1 = new List(Types::String);
    List            wipList2 = new List(Types::String);

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Hour)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Cost)))
    );

    transTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Item)))
    );

    wipList1.addEnd(
                SysComputedColumn::or(transTypeList)
    );

    wipList1.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjSalesvalueOffset)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProduction)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPProfit)))
    );

    postingTypeList.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, PostingType)),
                    SysComputedColumn::comparisonLiteral(enum2int(LedgerPostingType::ProjWIPSubscription)))
    );

    wipList2.addEnd(
                SysComputedColumn::or(postingTypeList)
    );

    wipList2.addEnd(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, ProjTransType)),
                    SysComputedColumn::comparisonLiteral(enum2int(ProjTransType::Revenue)))
    );

    return SysComputedColumn::add(
                SysComputedColumn::if(
                    SysComputedColumn::and(wipList1),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0)),
                SysComputedColumn::if(
                    SysComputedColumn::and(wipList2),
                    SysComputedColumn::returnField(viewName, identifierStr(ProjTransPosting_1) , fieldStr(ProjTransPosting, AmountMst)),
                    SysComputedColumn::returnLiteral(0))
    );
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralCostHour</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral cost expression for hour.
/// </summary>
/// <returns>
/// An expression for the actual deferral cost hour.
/// </returns>
public static str subBillDeferralCostHour()
{
    return ProjTransPostingCube::getSubBillDeferralCost(ProjTransType::Hour);
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralCostExpense</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral cost expression for expense.
/// </summary>
/// <returns>
/// An expression for the actual deferral cost expense.
/// </returns>
public static str subBillDeferralCostExpense()
{
    return ProjTransPostingCube::getSubBillDeferralCost(ProjTransType::Cost);
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralCostItem</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral cost expression for item.
/// </summary>
/// <returns>
/// An expression for the actual deferral cost item.
/// </returns>
public static str subBillDeferralCostItem()
{
    return ProjTransPostingCube::getSubBillDeferralCost(ProjTransType::Item);
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralSalesHour</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral sales expression for hour.
/// </summary>
/// <returns>
/// An expression for the actual deferral sales hour.
/// </returns>
public static str subBillDeferralSalesHour()
{
    return ProjTransPostingCube::getSubBillDeferralSales(ProjTransType::Hour);
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralSalesExpense</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral sales expression for expense.
/// </summary>
/// <returns>
/// An expression for the actual deferral sales expense.
/// </returns>
public static str subBillDeferralSalesExpense()
{
    return ProjTransPostingCube::getSubBillDeferralSales(ProjTransType::Cost);
}

]]></Source>
			</Method>
			<Method>
				<Name>subBillDeferralSalesItem</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral sales expression for item.
/// </summary>
/// <returns>
/// An expression for the actual deferral cost item.
/// </returns>
public static str subBillDeferralSalesItem()
{
    return ProjTransPostingCube::getSubBillDeferralSales(ProjTransType::Item);
}

]]></Source>
			</Method>
			<Method>
				<Name>getSubBillDeferralCost</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral cost based on ProjTransType.
/// </summary>
/// <param name = "_projTransType">Project transaction type.</param>
/// <returns>
/// By default, it will return expression for 0 amount
/// </returns>
public static str getSubBillDeferralCost(ProjTransType _projTransType)
{
    // Actual implementation will be done in ProjTransPostingCubeSubBillDeferral_Extension
    return _projTransType ? SysComputedColumn::returnLiteral(0) : SysComputedColumn::returnLiteral(''); 
}

]]></Source>
			</Method>
			<Method>
				<Name>getSubBillDeferralSales</Name>
				<Source><![CDATA[
/// <summary>
/// Retrieves the actual deferral sales based on ProjTransType.
/// </summary>
/// <param name = "_projTransType">Project transaction type.</param>
/// <returns>
/// By default, it will return expression for 0 amount
/// </returns>
public static str getSubBillDeferralSales(ProjTransType _projTransType)
{
    // Actual implementation will be done in ProjTransPostingCubeSubBillDeferral_Extension
    return _projTransType ? SysComputedColumn::returnLiteral(0) : SysComputedColumn::returnLiteral('');
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124927</DeveloperDocumentation>
	<Label>@SYS70093</Label>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<Query>ProjTransPostingCube</Query>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMst</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ActivityNumber</Name>
			<DataField>ActivityNumber</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>AmountMst</Name>
			<DataField>AmountMst</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CategoryId</Name>
			<DataField>CategoryId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>costSales</Name>
			<DataField>costSales</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>dataAreaId1</Name>
			<Label>@SYS135125</Label>
			<DataField>dataAreaId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>DefaultDimension</Name>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>EmplItemId</Name>
			<DataField>EmplItemId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>InventTransId</Name>
			<DataField>InventTransId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerDimension</Name>
			<DataField>LedgerDimension</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerOrigin</Name>
			<DataField>LedgerOrigin</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>LedgerTransDate</Name>
			<DataField>LedgerTransDate</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PaymentDate</Name>
			<DataField>PaymentDate</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PaymentStatus</Name>
			<DataField>PaymentStatus</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>PostingType</Name>
			<DataField>PostingType</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjAdjustRefId</Name>
			<DataField>ProjAdjustRefId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjFundingSource</Name>
			<DataField>ProjFundingSource</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjId</Name>
			<DataField>ProjId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransDate</Name>
			<DataField>ProjTransDate</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjTransType</Name>
			<DataField>ProjTransType</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjType</Name>
			<DataField>ProjType</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Qty</Name>
			<DataField>Qty</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>RecId1</Name>
			<Label>@SYS3676</Label>
			<DataField>RecId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>recVersion1</Name>
			<Label>@SYS40796</Label>
			<DataField>recVersion</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransactionOrigin</Name>
			<DataField>TransactionOrigin</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>TransId</Name>
			<DataField>TransId</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemNeverLedgerConsum</Name>
			<DataField>ItemNeverLedgerConsum</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ItemNeverLedgerPL</Name>
			<DataField>ItemNeverLedgerPL</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementConsumpHourCost</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<DataField>StatementConsumpHourCost</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementConsumpHourQty</Name>
			<DataField>StatementConsumpHourQty</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementPLHourCost</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<DataField>StatementPLHourCost</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>StatementPLHourQty</Name>
			<DataField>StatementPLHourQty</DataField>
			<DataSource>ProjParameters_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualAccruedLoss</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122254</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualAccruedLoss</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualAccruedRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122243</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualAccruedRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCashInflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122288</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCashInflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCashOutflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122290</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCashOutflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualConsumption</Name>
			<Label>@SYS122264</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualConsumption</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualConsumptionCostExpense</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122268</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualConsumptionCostExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualConsumptionCostHours</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122266</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualConsumptionCostHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualConsumptionCostItem</Name>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS122270</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualConsumptionCostItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCost</Name>
			<Label>@SYS122246</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCostCommitted</Name>
			<Label>@SYS324716</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCostCommitted</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCostExpense</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122250</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCostExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCostHour</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122248</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCostHour</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualCostItem</Name>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS122252</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualCostItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualGrossMargin</Name>
			<Label>@SYS122300</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualGrossMargin</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualGrossWIPCost</Name>
			<Label>@SYS122305</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualGrossWIPCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualHours</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122262</Label>
			<ViewMethod>projActualHours</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualInvoicedOnAccount</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122276</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualInvoicedOnAccount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualInvoicedRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122241</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualInvoicedRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualNetCashflow</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122326</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualNetCashflow</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualNetWIP</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122309</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualNetWIP</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualPayrollAllocation</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122272</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualPayrollAllocation</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualRevenue</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122161</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualRevenue</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualWIPCost</Name>
			<Label>@SYS122256</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualWIPCost</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualWIPInvoicedOnAccount</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@SYS122260</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualWIPInvoicedOnAccount</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualWIPSales</Name>
			<Label>@SYS122258</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>projActualWIPSales</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralCostHour</Name>
			<Label>@Proj:SubBillDeferralBiCostHour</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralCostHour</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralCostExpense</Name>
			<Label>@Proj:SubBillDeferralBiCostExpense</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralCostExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralCostItem</Name>
			<Label>@Proj:SubBillDeferralBiCostItem</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralCostItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralSalesHour</Name>
			<Label>@Proj:SubBillDeferralBiSalesHour</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralSalesHour</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralSalesExpense</Name>
			<Label>@Proj:SubBillDeferralBiSalesExpense</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralSalesExpense</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldComputedReal">
			<Name>ActualSubBillDeferralSalesItem</Name>
			<Label>@Proj:SubBillDeferralBiSalesItem</Label>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<ViewMethod>subBillDeferralSalesItem</ViewMethod>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjInvoiceProjId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>CustAccount</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Name</Name>
			<DataField>Name</DataField>
			<DataSource>ProjTable_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupId</Name>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ProjGroupName</Name>
			<DataField>Name</DataField>
			<DataSource>ProjGroup_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>Resource</Name>
			<DataField>Resource</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
		<AxViewField xmlns=""
			i:type="AxViewFieldBound">
			<Name>ResourceCategory</Name>
			<DataField>ResourceCategory</DataField>
			<DataSource>ProjTransPosting_1</DataSource>
		</AxViewField>
	</Fields>
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods />
		</SourceCode>
		<DataSources />
	</ViewMetadata>
</AxView>