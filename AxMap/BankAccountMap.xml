<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankAccountMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressing</Name>
				<Source><![CDATA[
    public display LogisticsAddressing addressing()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountOpenedIn_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns where corr. account is opened.
    /// </summary>
    /// <returns>
    /// Where corr. account is opened.
    /// </returns>
    public BankAccountOpenedIn_RU bankAccountOpenedIn_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId).BankAccountOpenedIn_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountValidation</Name>
				<Source><![CDATA[
    public Bank bankAccountValidation()
    {
        return Bank::construct(SysCountryRegionCode::locationCountryInfo(this.Location));
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankBIC_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Bank identification code.
    /// </summary>
    /// <returns>
    /// Bank identification code.
    /// </returns>
    public BankBIC_RU bankBIC_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId).BankBIC_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroup_W</Name>
				<Source><![CDATA[
    public BankGroup bankGroup_W()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankIsBranch_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the bank is branch.
    /// </summary>
    /// <returns>
    /// true if the bank is branch; false otherwise.
    /// </returns>
    public boolean bankIsBranch_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId).BankType_RU == BankType_RU::Branch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns bank name.
    /// </summary>
    /// <returns>
    /// Bank name.
    /// </returns>
    public BankName_RU bankName_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankShortAddressing_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Bank location (in abbreviated form).
    /// </summary>
    /// <returns>
    /// Bank location (in abbriviated form).
    /// </returns>
    public BankShortAddressing_RU bankShortAddressing_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.BankGroupId).shortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base bank name.
    /// </summary>
    /// <returns>
    /// Base bank name.
    /// </returns>
    public Description baseBankName_RU()
    {
        BankGroupId baseBankGroupId = BankGroup::findByCompany_W(this.company(), this.BankGroupId).BaseBankId_RU;
        return BankGroup::findByCompany_W(this.company(), baseBankGroupId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankShortAddressing_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base bank location (in abbreviated form).
    /// </summary>
    /// <returns>
    /// Base bank location (in abbreviated form).
    /// </returns>
    public BankShortAddressing_RU baseBankShortAddressing_RU()
    {
        BankGroupId baseBankGroupId = BankGroup::findByCompany_W(this.company(), this.BankGroupId).BaseBankId_RU;
        return BankGroup::findByCompany_W(this.company(), baseBankGroupId).shortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignBankName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign bank name.
    /// </summary>
    /// <returns>
    /// The name of the foreign bank.
    /// </returns>
    public BankName_RU foreignBankName_RU()
    {
        return BankGroup::findByCompany_W(this.company(), this.ForeignBank_RU).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDomestic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current bank is domestic.
    /// </summary>
    /// <returns>
    /// true if current bank is domestic; otherwise, false.
    /// </returns>
    public boolean isDomestic()
    {
        boolean domestic = true;

        if (this.Location)
        {
            domestic = LogisticsLocationEntity::location2PostalAddress(this.Location).CountryRegionId == CompanyInfo::find().postalAddress().CountryRegionId;
        }

        return domestic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize values from the <c>BankGroup</c>
    /// </summary>
    /// <param name = "_bankGroup"><c>BankGroup</c> to initialize the values from</param>
    public void initFromBankGroup(BankGroup _bankGroup)
    {
        this.BankAccountMap::setLocationFromBankGroup(_bankGroup);
        this.BankAccountMap::setEmailFromBankGroup(_bankGroup);
        this.BankAccountMap::setSMSFromBankGroup(_bankGroup);
        this.BankAccountMap::setTeleFaxFromBankGroup(_bankGroup);
        this.BankAccountMap::setPhoneFromBankGroup(_bankGroup);
        this.BankAccountMap::setTelexFromBankGroup(_bankGroup);
        this.BankAccountMap::setUrlFromBankGroup(_bankGroup);
        this.BankAccountMap::setCellularPhoneFromBankGroup(_bankGroup);
        this.BankAccountMap::setPagerFromBankGroup(_bankGroup);
        this.BankAccountMap::setPhoneLocalFromBankGroup(_bankGroup);
        this.BankAccountMap::setContactPersonFromBankGroup(_bankGroup);
        this.BankAccountMap::setBankCodeTypeFromBankGroup(_bankGroup);
        this.BankAccountMap::setRegistrationNumFromBankGroup(_bankGroup);
        this.BankAccountMap::setNameFromBankGroup(_bankGroup);
        this.BankAccountMap::setCorrAccountFromBankGroup(_bankGroup);
        this.BankAccountMap::setSwiftNoFromBankGroup(_bankGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(this.TableId, _fieldId);
        #ISOCountryRegionCodes
        super(_fieldId);

        switch (dictField.typeId())
        {
            case extendedTypeNum(BankAccount):
                if (SysCountryRegionCode::isLocationInCountryRegion(this.Location, [#isoFI]))
                {
                    this.AccountNum = Bank_FI::convertBankAccountNum(this.AccountNum);
                }
                this.BankAccountMap::deleteExistingBankPrenotes(dictField.label());
                break;

            case extendedTypeNum(Name), extendedTypeNum(BankRegNum):
                this.BankAccountMap::deleteExistingBankPrenotes(dictField.label());
                break;

            case extendedTypeNum(BankGroupId):
                if (this.orig().BankGroupId
                    && this.orig().Location == BankGroup::find(this.orig().BankGroupId).Location
                    && VendCustBankAccountGroupChangedLocationAlsoChangedFlight::instance().isEnabled())
                {
                    this.Location = 0;

                    if (this.BankGroupId)
                    {
                        this.BankAccountMap::updateLocationFromBankGroup(BankGroup::find(this.BankGroupId));
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingBankPrenotes</Name>
				<Source><![CDATA[
    private void deleteExistingBankPrenotes(str _label)
    {
        if (this.TableId == tableNum(BankAccountTable)
            && (VendPrenote::existCompanyBankPrenotes(this.AccountID)
                || CustPrenote::existCompanyBankPrenotes(this.AccountID)))
        {
            VendPrenote::deleteBankPrenotes(this.AccountID);
            CustPrenote::deleteBankPrenotes(this.AccountID);
            warning(strFmt("@CashManagement:MustRecreateNewPreNotes", strLwr(_label)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizedAccountNum</Name>
				<Source><![CDATA[
    public BankAccount normalizedAccountNum()
    {
        #define.AccoutNumLen(12)
        #define.Zero('0')
        #ISOCountryRegionCodes
        BankAccount  normalizedAccountNum = this.AccountNum;

        if (SysCountryRegionCode::isLocationInCountryRegion(this.Location, [#isoIT]))
        {
            normalizedAccountNum = strRFix(this.AccountNum, #AccoutNumLen, #Zero);
        }

        return normalizedAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.bankAccountValidation().validateWrite(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMappedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ID of the field that the specified map field has been mapped to on the specified table.
    /// </summary>
    /// <param name="_tableMapFieldId">
    /// The field to test.
    /// </param>
    /// <returns>
    /// The field id of the mapped field, if the field is mapped; otherwise 0.
    /// </returns>
    public FieldId findMappedFieldId(FieldId _tableMapFieldId)
    {
        return SysDictField::findMappedFieldId(
            tableNum(BankAccountMap),
            _tableMapFieldId,
            this.tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocationFromBankGroup</Name>
				<Source><![CDATA[
    private void setLocationFromBankGroup(BankGroup _bankGroup)
    {
        if (!this.Location)
        {
            this.Location = _bankGroup.Location;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmailFromBankGroup</Name>
				<Source><![CDATA[
    private void setEmailFromBankGroup(BankGroup _bankGroup)
    {
        this.Email = _bankGroup.Email;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSMSFromBankGroup</Name>
				<Source><![CDATA[
    private void setSMSFromBankGroup(BankGroup _bankGroup)
    {
        this.SMS = _bankGroup.SMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTelefaxFromBankGroup</Name>
				<Source><![CDATA[
    private void setTelefaxFromBankGroup(BankGroup _bankGroup)
    {
        this.TeleFax = _bankGroup.Telefax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPhoneFromBankGroup</Name>
				<Source><![CDATA[
    private void setPhoneFromBankGroup(BankGroup _bankGroup)
    {
        this.Phone = _bankGroup.Phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTelexFromBankGroup</Name>
				<Source><![CDATA[
    private void setTelexFromBankGroup(BankGroup _bankGroup)
    {
        this.Telex = _bankGroup.Telex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUrlFromBankGroup</Name>
				<Source><![CDATA[
    private void setUrlFromBankGroup(BankGroup _bankGroup)
    {
        this.url = _bankGroup.url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCellularPhoneFromBankGroup</Name>
				<Source><![CDATA[
    private void setCellularPhoneFromBankGroup(BankGroup _bankGroup)
    {
        this.CellularPhone = _bankGroup.CellularPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPhoneLocalFromBankGroup</Name>
				<Source><![CDATA[
    private void setPhoneLocalFromBankGroup(BankGroup _bankGroup)
    {
        this.PhoneLocal = _bankGroup.PhoneLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContactPersonFromBankGroup</Name>
				<Source><![CDATA[
    private void setContactPersonFromBankGroup(BankGroup _bankGroup)
    {
        this.ContactPerson = _bankGroup.ContactPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankCodeTypeFromBankGroup</Name>
				<Source><![CDATA[
    private void setBankCodeTypeFromBankGroup(BankGroup _bankGroup)
    {
        this.BankCodeType = _bankGroup.BankCodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegistrationNumFromBankGroup</Name>
				<Source><![CDATA[
    private void setRegistrationNumFromBankGroup(BankGroup _bankGroup)
    {
        this.RegistrationNum = _bankGroup.RegistrationNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameFromBankGroup</Name>
				<Source><![CDATA[
    private void setNameFromBankGroup(BankGroup _bankGroup)
    {
        if (!this.Name)
        {
            this.Name = _bankGroup.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCorrAccountFromBankGroup</Name>
				<Source><![CDATA[
    private void setCorrAccountFromBankGroup(BankGroup _bankGroup)
    {
        this.CorrAccount_W = _bankGroup.BankCorrAccount_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSwiftNoFromBankGroup</Name>
				<Source><![CDATA[
    private void setSwiftNoFromBankGroup(BankGroup _bankGroup)
    {
        this.SWIFTNo = _bankGroup.SWIFTNo_EE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPagerFromBankGroup</Name>
				<Source><![CDATA[
    private void setPagerFromBankGroup(BankGroup _bankGroup)
    {
        this.Pager = _bankGroup.Pager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountMappingDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates defaulting dependencies for the fields in the map.
    /// </summary>
    /// <returns>
    /// Container containing defaulting dependencies
    /// </returns>
    public container bankAccountMappingDefaultingDependencies()
    {
        return
        [
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Location)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Email)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, SMS)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, TeleFax)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Phone)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Telex)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, URL)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, CellularPhone)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Pager)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, PhoneLocal)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, ContactPerson)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankCodeType)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, RegistrationNum)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Name)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, CorrAccount_W)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]],
            [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, SWIFTNo)),
                [this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankGroupId))]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldOnMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaulting logic implemented at Map level. Needs to be manually called from the Table level.
    /// </summary>
    /// <param name = "_fieldId">
    /// Id of the field that needs to be defaulted
    /// </param>
    public void defaultFieldOnMap(FieldId _fieldId)
    {
        BankGroup bankGroup = BankGroup::find(this.BankGroupId);

        switch (_fieldId)
        {
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Location)):
                this.BankAccountMap::updateLocationFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Email)):
                this.BankAccountMap::updateEmailFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, SMS)):
                this.BankAccountMap::updateSMSFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, TeleFax)):
                this.BankAccountMap::updateTeleFaxFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Phone)):
                this.BankAccountMap::updatePhoneFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Telex)):
                this.BankAccountMap::updateTelexFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Url)):
                this.BankAccountMap::updateUrlFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, CellularPhone)):
                this.BankAccountMap::updateCellularPhoneFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Pager)):
                this.BankAccountMap::updatePagerFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, PhoneLocal)):
                this.BankAccountMap::updatePhoneLocalFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, ContactPerson)):
                this.BankAccountMap::updateContactPersonFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, BankCodeType)):
                this.BankAccountMap::updateBankCodeTypeFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, RegistrationNum)):
                this.BankAccountMap::updateRegistrationNumFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, Name)):
                this.BankAccountMap::updateNameFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, CorrAccount_W)):
                this.BankAccountMap::updateCorrAccountFromBankGroup(bankGroup);
                break;
            case this.BankAccountMap::findMappedFieldId(fieldNum(BankAccountMap, SWIFTNo)):
                this.BankAccountMap::updateSwiftNoFromBankGroup(bankGroup);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroupIdIsSet</Name>
				<Source><![CDATA[
    private boolean bankGroupIdIsSet()
    {
        return this.isFieldSet(fieldNum(BankAccountTable, BankGroupId)) 
            || this.isFieldSet(fieldNum(CustBankAccount, BankGroupId)) 
            || this.isFieldSet(fieldNum(VendBankAccount, BankGroupId)) 
            || this.isFieldSet(fieldNum(RHRMPersonBankAccount, BankGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationFromBankGroup</Name>
				<Source><![CDATA[
    private void updateLocationFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet() && !this.Location)
        {
            this.Location = _bankGroup.Location;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmailFromBankGroup</Name>
				<Source><![CDATA[
    private void updateEmailFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.Email = _bankGroup.Email;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSMSFromBankGroup</Name>
				<Source><![CDATA[
    private void updateSMSFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.SMS = _bankGroup.SMS;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelefaxFromBankGroup</Name>
				<Source><![CDATA[
    private void updateTelefaxFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.TeleFax = _bankGroup.Telefax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhoneFromBankGroup</Name>
				<Source><![CDATA[
    private void updatePhoneFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.Phone = _bankGroup.Phone;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelexFromBankGroup</Name>
				<Source><![CDATA[
    private void updateTelexFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.Telex = _bankGroup.Telex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUrlFromBankGroup</Name>
				<Source><![CDATA[
    private void updateUrlFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.URL = _bankGroup.url;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellularPhoneFromBankGroup</Name>
				<Source><![CDATA[
    private void updateCellularPhoneFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.CellularPhone = _bankGroup.CellularPhone;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhoneLocalFromBankGroup</Name>
				<Source><![CDATA[
    private void updatePhoneLocalFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.PhoneLocal = _bankGroup.PhoneLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContactPersonFromBankGroup</Name>
				<Source><![CDATA[
    private void updateContactPersonFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.ContactPerson = _bankGroup.ContactPerson;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodeTypeFromBankGroup</Name>
				<Source><![CDATA[
    private void updateBankCodeTypeFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.BankCodeType = _bankGroup.BankCodeType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRegistrationNumFromBankGroup</Name>
				<Source><![CDATA[
    private void updateRegistrationNumFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.RegistrationNum = _bankGroup.RegistrationNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNameFromBankGroup</Name>
				<Source><![CDATA[
    private void updateNameFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet() && !this.Name)
        {
            this.Name = _bankGroup.Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrAccountFromBankGroup</Name>
				<Source><![CDATA[
    private void updateCorrAccountFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.CorrAccount_W = _bankGroup.BankCorrAccount_W;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSwiftNoFromBankGroup</Name>
				<Source><![CDATA[
    private void updateSwiftNoFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.SWIFTNo = _bankGroup.SWIFTNo_EE;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePagerFromBankGroup</Name>
				<Source><![CDATA[
    private void updatePagerFromBankGroup(BankGroup _bankGroup)
    {
        if (this.BankAccountMap::bankGroupIdIsSet())
        {
            this.Pager = _bankGroup.Pager;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318592</DeveloperDocumentation>
	<Label>@SYS83351</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountID</Name>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountNum</Name>
			<ExtendedDataType>BankAccount</ExtendedDataType>
			<StringSize>35</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankCIN</Name>
			<ExtendedDataType>BankCIN</ExtendedDataType>
			<StringSize>1</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BankCodeType</Name>
			<EnumType>BankCodeType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankContractAccount</Name>
			<ExtendedDataType>GiroContractAccount</ExtendedDataType>
			<StringSize>11</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankGroupId</Name>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankIBAN</Name>
			<ExtendedDataType>BankIBAN</ExtendedDataType>
			<StringSize>35</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CellularPhone</Name>
			<ExtendedDataType>PhoneMobile</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ContactPerson</Name>
			<ExtendedDataType>PersonName</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CorrAccount_W</Name>
			<ExtendedDataType>BankCorrAccount_W</ExtendedDataType>
			<StringSize>35</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CustVendAccount</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CustVendPaymTextCode</Name>
			<ExtendedDataType>CustVendPaymTextCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Email</Name>
			<ExtendedDataType>Email</ExtendedDataType>
			<StringSize>80</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExchRateRef</Name>
			<ExtendedDataType>ExchRateRef</ExtendedDataType>
			<StringSize>11</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ForeignAccount_RU</Name>
			<ExtendedDataType>BankAccount</ExtendedDataType>
			<StringSize>35</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ForeignBank_RU</Name>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ForeignSWIFT_RU</Name>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>GiroContractAccount</Name>
			<ExtendedDataType>GiroContractAccount</ExtendedDataType>
			<StringSize>11</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>isBankPrenote</Name>
			<ExtendedDataType>BankPrenote</ExtendedDataType>
			<Label>@SYS128571</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Location</Name>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MsgToBank</Name>
			<ExtendedDataType>FreeText</ExtendedDataType>
			<Label>@sys67175</Label>
			<StringSize>255</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Pager</Name>
			<ExtendedDataType>Pager</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Phone</Name>
			<ExtendedDataType>Phone</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PhoneLocal</Name>
			<ExtendedDataType>PhoneLocal</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>PrenoteResponseDays</Name>
			<ExtendedDataType>PrenoteResponseDays</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>RegistrationNum</Name>
			<ExtendedDataType>BankRegNum</ExtendedDataType>
			<StringSize>12</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SMS</Name>
			<ExtendedDataType>SMS</ExtendedDataType>
			<StringSize>80</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SWIFTNo</Name>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TeleFax</Name>
			<ExtendedDataType>TeleFax</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Telex</Name>
			<ExtendedDataType>Telex</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>URL</Name>
			<ExtendedDataType>URL</ExtendedDataType>
			<StringSize>255</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>