<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDimensionDynamicAccountSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Threading.Tasks;

public class LedgerDimensionDynamicAccountSetBasedResolver extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createServiceJob</Name>
				<Source><![CDATA[
    private static Task createServiceJob(
        SysInstrumentationLogger _logger,
        FinancialDimensionServiceResolutionClient _resolutionClient,
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FieldName _columnName,
        FieldName _offsetColumnName,
        TableName _stagingTableName,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        System.Exception exception;
        Task jobTask;

        using (var activityContext = _logger.activityContext(tableStaticMethodStr(LedgerDimensionDynamicAccountSetBasedResolver, createServiceJob), LedgerDimensionInstrumentationConstants::InstrumentationNamespace))
        {
            try
            {
                // Prep the job contract
                FinancialDimensionServiceCreateMultiSegmentJobContract jobContract = FinancialDimensionServiceCreateMultiSegmentJobContract::construct();
                jobContract.parmStagingTableName(_stagingTableName);
                jobContract.parmDisplayValueColumnName1(_columnName);
                jobContract.parmDisplayValueColumnName2(_offsetColumnName);
                jobContract.parmDMFDefinitionGroupExecution(_dmfDefinitionGroupExecution.RecId);

                // The kernel provides the temp table name as: tempdb.\"DBO\"._________ ; thus the quotes (with escapes) must be removed from the string for it to compile in T-SQL
                str charToRemove = '"';
                str tmpTableName = strRem(_dimCacheTmp.getPhysicalTableName(), charToRemove);
                jobContract.parmDimensionDataEntitySFKCacheTmpTableName(tmpTableName);

                // Initialize the multi segment job
                _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceCreatingMultiSegmentJob);
                jobTask = _resolutionClient.createMultiSegmentJobAsync(jobContract);

                _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceWaitingCreateMultiSegmentJob);
                jobTask.Wait();
                _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceCreatedMultiSegmentJob);
            }
            catch (exception)
            {
                // This is only information because if the service cannot be used, it falls back to classic resolution
                _logger.logInformation(LedgerDimensionInstrumentationConstants::ServiceStatusJobCreateFailed);

                // Explicitly add an error (not an exception) to the import job indicating fallback to classic resolution occured
                error("@Dimension:DimensionResolutionServiceJobCreationFailed");

                // The jobTask may have been created but is in an error state, so reset it so then the caller knows it failed
                jobTask = null;
            }

            return jobTask;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWithService</Name>
				<Source><![CDATA[
    private static void resolveWithService(
        SysInstrumentationLogger _logger,
        FinancialDimensionServiceResolutionClient _resolutionClient,
        Task _jobTask,
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FieldName _columnName,
        FieldName _offsetColumnName,
        TableName _stagingTableName,
        LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver)
    {
        using (var activityContext = _logger.activityContext(tableStaticMethodStr(LedgerDimensionDynamicAccountSetBasedResolver, resolveWithService), LedgerDimensionInstrumentationConstants::InstrumentationNamespace))
        {
            // Process the multi segment resolution job
            _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceProcessingStart);
            FinancialDimensionServiceResolutionJobContract resolutionJobContract = _resolutionClient.getResolutionJobFromTask(_jobTask);
            
            //Queueing the FDR job
            FinancialDimensionServiceProcessContract processContract = FinancialDimensionServiceProcessContract::construct();
            System.Threading.Tasks.Task queueJobResponseTask = _resolutionClient.processAsync(processContract, resolutionJobContract.parmJobId());
            queueJobResponseTask.Wait();

            LedgerDimensionDynamicAccountSetBasedResolver::waitForResolutionJobCompletion(
                    resolutionJobContract,
                    _stagingTableName,
                    _logger,
                    _resolutionClient,
                    _ledDimDynamicAccountSetBasedResolver,
                    _dmfDefinitionGroupExecution
                );
            
            _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceCompletedProcessing);

            // Now that the resolution job has completed, have the service transfer the messages produced by the resolution job into a local table
            _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceTransferMessagesFromJobStart);

            LedgerDimensionDynamicAccountSetBasedResolver::getMessages(
                _logger,
                _resolutionClient,
                resolutionJobContract.parmJobId(),
                _dmfDefinitionGroupExecution,
                _stagingTableName);

            _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceTransferMessagesFromJobEnd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessages</Name>
				<Source><![CDATA[
    private static void getMessages(
        SysInstrumentationLogger _logger,
        FinancialDimensionServiceResolutionClient _resolutionClient,
        str _resolutionJobId,
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        TableName _stagingTableName)
    {
        using (var activityContext = _logger.activityContext(tableStaticMethodStr(LedgerDimensionDynamicAccountSetBasedResolver, isResolutionServiceInstalledAndEnabled), LedgerDimensionInstrumentationConstants::InstrumentationNamespace))
        {
            System.Exception exception;

            try
            {
                _resolutionClient.copyDimensionResolutionMessagesToDMFStagingLog(
                    _resolutionJobId,
                    _dmfDefinitionGroupExecution,
                    _stagingTableName);
            }
            catch (exception)
            {
                _logger.logError(
                    strFmt(LedgerDimensionInstrumentationConstants::ServiceStatusMessageTransferFailed,
                    exception.Message));
                error("@Dimension:DimensionResolutionServiceUnhandledException");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResolutionServiceInstalledAndEnabled</Name>
				<Source><![CDATA[
    private static boolean isResolutionServiceInstalledAndEnabled(SysInstrumentationLogger _logger)
    {
        using (var activityContext = _logger.activityContext(tableStaticMethodStr(LedgerDimensionDynamicAccountSetBasedResolver, isResolutionServiceInstalledAndEnabled), LedgerDimensionInstrumentationConstants::InstrumentationNamespace))
        {
            FinancialDimensionServiceIntegrationParameters parameters;
            select firstonly IsDimensionResolutionServiceSetup, IsDimensionResolutionServiceIntegrationEnabled from parameters;

            boolean status = true;

            if (!parameters.IsDimensionResolutionServiceSetup)
            {
                _logger.logInformation(LedgerDimensionInstrumentationConstants::ServiceStatusNotInstalled);
                status = false;
            }

            if (!parameters.IsDimensionResolutionServiceIntegrationEnabled)
            {
                _logger.logInformation(LedgerDimensionInstrumentationConstants::ServiceStatusNotEnabled);
                status = false;
            }

            return status;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveWithService</Name>
				<Source><![CDATA[
    private static boolean tryResolveWithService(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver,
        FieldName _columnName,
        FieldName _offsetColumnName,
        TableName _stagingTableName,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        boolean result;

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(identifierStr(LedgerDimensionDynamicAccountSetBasedResolver));
        using (var activityContext = logger.activityContext(tableStaticMethodStr(LedgerDimensionDynamicAccountSetBasedResolver, tryResolveWithService), LedgerDimensionInstrumentationConstants::InstrumentationNamespace))
        {
            activityContext.addCustomProperty(LedgerDimensionInstrumentationConstants::PropertyExecutionId, _dmfDefinitionGroupExecution.ExecutionId);
            activityContext.addCustomProperty(LedgerDimensionInstrumentationConstants::PropertyStagingTableName, _stagingTableName);
            activityContext.addCustomProperty(LedgerDimensionInstrumentationConstants::PropertyColumnName, _columnName);
            activityContext.addCustomProperty(LedgerDimensionInstrumentationConstants::PropertyOffsetColumnName, _offsetColumnName);

            if (LedgerDimensionDynamicAccountSetBasedResolver::isResolutionServiceInstalledAndEnabled(logger))
            {
                FinancialDimensionServiceResolutionClient resolutionClient = FinancialDimensionServiceResolutionClient::construct();

                Task jobTask = LedgerDimensionDynamicAccountSetBasedResolver::createServiceJob(
                    logger,
                    resolutionClient,
                    _dmfDefinitionGroupExecution,
                    _columnName,
                    _offsetColumnName,
                    _stagingTableName,
                    _dimCacheTmp);

                if (jobTask != null)
                {
                    // When job creation succeeds, the service will be used to resolve. If resolution fails, it will not fall back to classic by always returning true regardless of any additional exceptions
                    result = true;
                    System.Exception exception;

                    try
                    {
                        LedgerDimensionDynamicAccountSetBasedResolver::resolveWithService(
                            logger,
                            resolutionClient,
                            jobTask,
                            _dmfDefinitionGroupExecution,
                            _columnName,
                            _offsetColumnName,
                            _stagingTableName,
                            _ledDimDynamicAccountSetBasedResolver);
                    }
                    catch (exception)
                    {
                        logger.logError(
                            strFmt(LedgerDimensionInstrumentationConstants::ServiceStatusResolutionFailed,
                            exception.Message));

                        // Update the SFKCacheTmp table marking all unresolved dimensions as Error instead of Completed for parity with classic resolution messaging
                        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
                        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
                        const ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

                        dimCacheTmpRef.linkPhysicalTableInstance(_dimCacheTmp);

                        LedgerDimensionDynamicAccountSetBasedResolver::insertMissingResolutionsToSFKCacheTmpMarkingAsNotFound(
                            _dmfDefinitionGroupExecution,
                            _ledDimDynamicAccountSetBasedResolver,
                            _dimCacheTmp,
                            dimCacheTmpRef,
                            hierarchyType,
                            dataType);

                        error("@Dimension:DimensionResolutionServiceUnhandledException");
                    }
                    finally
                    {
                        logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceComplete);
                    }
                }

                resolutionClient.dispose();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set-based resolution of ledger dimension dynamic accounts.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <param name = "_ledDimDynamicAccountSetBasedResolver">A staging table which contains dynamic dimension record ids.</param>
    /// <param name = "_columnName">The column name in the staging table representing the primary side account string.</param>
    /// <param name = "_offsetColumnName">The column name in the staging table representing the offset side account string.</param>
    /// <param name = "_stagingTableName">The name of the staging table.</param>
    /// <param name = "_entityName">The name of the entity.</param>
    /// <returns>The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.</returns>
    public static DimensionDataEntitySFKCacheTmp Resolve(
            DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
            LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver,
            FieldName _columnName,
            FieldName _offsetColumnName,
            TableName _stagingTableName,
            TableName _entityName)
    {
        DimensionDataEntitySFKCacheTmp dimCacheTmp;

        // Attempt to first use the service, if the job cannot be created; fallback to classic resolution. If resolution fails, do not fall back to classic.
        if (!LedgerDimensionDynamicAccountSetBasedResolver::tryResolveWithService(
            _dmfDefinitionGroupExecution,
            _ledDimDynamicAccountSetBasedResolver,
            _columnName,
            _offsetColumnName,
            _stagingTableName,
            dimCacheTmp))
        {
            LedgerDimensionDynamicAccountSetBasedResolver::resolveWithClassic(
                _dmfDefinitionGroupExecution,
                _ledDimDynamicAccountSetBasedResolver,
                _columnName,
                _offsetColumnName,
                _stagingTableName,
                _entityName,
                dimCacheTmp);
        }

        return dimCacheTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMissingResolutionsToSFKCacheTmpMarkingAsNotFound</Name>
				<Source><![CDATA[
    private static void insertMissingResolutionsToSFKCacheTmpMarkingAsNotFound(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionHierarchyType _hierarchyType,
        ExtendedDataTypeName _dataType)
    {
        const DimensionCombinationBase zero = 0;
        const NoYes notFound = NoYes::No;

        // Primary accounts
        insert_recordset _dimCacheTmp (
                IntegrationString, EnumValue,
                HierarchyType, ExtendedDataType, Found,
                ResolvedReference)
            select AccountDisplayValue, AccountType, _hierarchyType, _dataType, notFound, zero from _ledDimDynamicAccountSetBasedResolver
                group by AccountDisplayValue, AccountType
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && _ledDimDynamicAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            notexists join _dimCacheTmpRef
                group by ResolvedReference
                where _dimCacheTmpRef.IntegrationString == _ledDimDynamicAccountSetBasedResolver.AccountDisplayValue
                    && _dimCacheTmpRef.EnumValue == _ledDimDynamicAccountSetBasedResolver.AccountType
                    && _dimCacheTmpRef.HierarchyType == _hierarchyType
                    && _dimCacheTmpRef.ExtendedDataType == _dataType;

        // Offset accounts.
        insert_recordset _dimCacheTmp (
                IntegrationString, EnumValue,
                HierarchyType, ExtendedDataType, Found,
                ResolvedReference)
            select OffsetAccountDisplayValue, OffsetAccountType, _hierarchyType, _dataType, notFound, zero from _ledDimDynamicAccountSetBasedResolver
                group by OffsetAccountDisplayValue, OffsetAccountType
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && _ledDimDynamicAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            notexists join _dimCacheTmpRef
                group by ResolvedReference
                where _dimCacheTmpRef.IntegrationString == _ledDimDynamicAccountSetBasedResolver.OffsetAccountDisplayValue
                    && _dimCacheTmpRef.EnumValue == _ledDimDynamicAccountSetBasedResolver.OffsetAccountType
                    && _dimCacheTmpRef.HierarchyType == _hierarchyType
                    && _dimCacheTmpRef.ExtendedDataType == _dataType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveWithClassic</Name>
				<Source><![CDATA[
    private static void resolveWithClassic(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver,
        FieldName _columnName,
        FieldName _offsetColumnName,
        TableName _stagingTableName,
        TableName _entityName,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp)
    {
        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
        DimensionDataEntitySFKCache dimCache;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        const ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);
        const NoYes found = NoYes::Yes;

        dimCacheTmpRef.linkPhysicalTableInstance(_dimCacheTmp);

        // Resolve dimension SFK's from cache when possible.
        // Primary accounts
        insert_recordset _dimCacheTmp (
                IntegrationString, EnumValue,
                HierarchyType, ExtendedDataType, Found,
                ResolvedReference)
            select AccountDisplayValue, AccountType, hierarchyType, dataType, found from _ledDimDynamicAccountSetBasedResolver
                group by AccountDisplayValue, AccountType
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && _ledDimDynamicAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            join ResolvedReference from dimCache
                group by ResolvedReference
                where dimCache.IntegrationString == _ledDimDynamicAccountSetBasedResolver.AccountDisplayValue
                    && dimCache.EnumValue == _ledDimDynamicAccountSetBasedResolver.AccountType
                    && dimCache.HierarchyType == hierarchyType
                    && dimCache.ExtendedDataType == dataType;

        // Offset accounts
        insert_recordset _dimCacheTmp (
                IntegrationString, EnumValue,
                HierarchyType, ExtendedDataType, Found,
                ResolvedReference)
            select OffsetAccountDisplayValue, OffsetAccountType, hierarchyType, dataType, found from _ledDimDynamicAccountSetBasedResolver
                group by OffsetAccountDisplayValue, OffsetAccountType
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && _ledDimDynamicAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            join ResolvedReference from dimCache
                group by ResolvedReference
                where dimCache.IntegrationString == _ledDimDynamicAccountSetBasedResolver.OffsetAccountDisplayValue
                    && dimCache.EnumValue == _ledDimDynamicAccountSetBasedResolver.OffsetAccountType
                    && dimCache.HierarchyType == hierarchyType
                    && dimCache.ExtendedDataType == dataType
            notexists join dimCacheTmpRef
                where dimCacheTmpRef.IntegrationString == dimCache.IntegrationString
                    && dimCacheTmpRef.EnumValue == dimCache.EnumValue
                    && dimCacheTmpRef.HierarchyType == hierarchyType
                    && dimCacheTmpRef.ExtendedDataType == dataType;

        // Remove calling the below method and change the dimCache join above to an outer join when workaround
        // is no longer needed. Right now outer joins are not initializing fields to default values
        // so the above join throws an exception instead of inserting zero for dimension
        // combinations that are not yet cached. The temporary workaround is a seperate notexists insert.
        LedgerDimensionDynamicAccountSetBasedResolver::insertMissingResolutionsToSFKCacheTmpMarkingAsNotFound(
            _dmfDefinitionGroupExecution,
            _ledDimDynamicAccountSetBasedResolver,
            dimCacheTmpRef,
            dimCacheTmpRef,
            hierarchyType,
            dataType);

        int initialLineCount;
            
        // For the values not found in cache, look them up individually.
        DimensionDataEntitySFKErrorTmp errorTmp;

        while select forupdate _dimCacheTmp
            where _dimCacheTmp.Found == NoYes::No
        {
            initialLineCount = Global::infologLine();

            try
            {
                _dimCacheTmp.ResolvedReference = DimensionDynamicAccountResolver::newResolver(_dimCacheTmp.IntegrationString, _dimCacheTmp.EnumValue).resolve();
                _dimCacheTmp.HierarchyName = DimensionHierarchy::find(DimensionAttributeValueCombination::find(_dimCacheTmp.ResolvedReference).AccountStructure).Name;
                _dimCacheTmp.Found = NoYes::Yes;

                // Update the temp table with the newly resolved value.
                ttsbegin;
                _dimCacheTmp.doUpdate();
                ttscommit;
            }
            catch
            {
                // Invalid accounts will raise an exception, but should
                // not cause the full import process to fail. Instead those
                // rows need to be marked as error, which is done below.
                errorTmp.IntegrationString = _dimCacheTmp.IntegrationString;
                errorTmp.HierarchyType = _dimCacheTmp.HierarchyType;
                errorTmp.ResolvedReference = _dimCacheTmp.ResolvedReference;
                errorTmp.ExtendedDataType = _dimCacheTmp.ExtendedDataType;
                errorTmp.EnumValue = _dimCacheTmp.EnumValue;
                errorTmp.HierarchyName = _dimCacheTmp.HierarchyName;

                for (int infoLogLine = initialLineCount + 1; infoLogLine <= Global::infologLine();infoLogLine++)
                {
                    errorTmp.Error += infolog.text(infoLogLine);
                }

                errorTmp.insert();
                errorTmp.clear();
            }
        }

        //  write errors to DMF validation log.
        DMFStagingValidationLog log;
        log.skipDataMethods(true);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, Staging, _stagingTableName, _columnName, sourceTarget, _entityName from _ledDimDynamicAccountSetBasedResolver
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                join Error from errorTmp
                where errorTmp.IntegrationString == _ledDimDynamicAccountSetBasedResolver.AccountDisplayValue
                    && errorTmp.HierarchyType == DimensionHierarchyType::DataEntityLedgerDimensionFormat
                    && errorTmp.ExtendedDataType == dataType;

        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, Staging, _stagingTableName, _offsetColumnName, sourceTarget, _entityName from _ledDimDynamicAccountSetBasedResolver
                where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                join Error from errorTmp
                where errorTmp.IntegrationString == _ledDimDynamicAccountSetBasedResolver.OffsetAccountDisplayValue
                    && errorTmp.HierarchyType == DimensionHierarchyType::DataEntityLedgerDimensionFormat
                    && errorTmp.ExtendedDataType == dataType;

    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForResolutionJobCompletion</Name>
				<Source><![CDATA[
    private static void waitForResolutionJobCompletion(
        FinancialDimensionServiceResolutionJobContract resolutionJobContract,
        TableName _stagingTableName,
        SysInstrumentationLogger _logger,
        FinancialDimensionServiceResolutionClient _resolutionClient,
        LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver, 
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        //Setting up the MicroserviceJobStateContract and the MicroserviceJobPollingBackoffConfigurationContract
        MicroserviceJobStateContract microserviceJobStateContract = MicroserviceJobStateContract::newForJobStateContract(
            resolutionJobContract.parmJobId(),
            'FinancialDimensionResolutionService',
            MicroserviceJobStatus::Failed);

        MicroserviceJobPollingBackoffConfigurationContract microserviceIncrementalBackoffList = MicroserviceJobPollingBackoffConfigurationContract::newForJobPollingBackoffConfiguration();

        int initialBackoff = LedgerDimensionDynamicAccountSetBasedResolver::determineInitialBackoff(_ledDimDynamicAccountSetBasedResolver, _dmfDefinitionGroupExecution);
        microserviceIncrementalBackoffList.parmInitialBackoffTimeInMilliseconds(initialBackoff);

        _logger.logInformation(LedgerDimensionInstrumentationConstants::ResolutionServiceWaitingProcessing);

        //Waiting for service job completetion via a while loop
        MicroserviceJobPolling::waitForServiceJobCompletion(microserviceIncrementalBackoffList, microserviceJobStateContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineCount</Name>
				<Source><![CDATA[
    private static int getLineCount(LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver, DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        select count(RecId) from _ledDimDynamicAccountSetBasedResolver
            where _ledDimDynamicAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup 
            && _ledDimDynamicAccountSetBasedResolver.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;
        return _ledDimDynamicAccountSetBasedResolver.recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInitialBackoff</Name>
				<Source><![CDATA[
    private static int determineInitialBackoff(LedgerDimensionDynamicAccountSetBasedResolver _ledDimDynamicAccountSetBasedResolver, DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        int lineCount = LedgerDimensionDynamicAccountSetBasedResolver::getLineCount(_ledDimDynamicAccountSetBasedResolver, _dmfDefinitionGroupExecution);

        return LedgerDimensionDynamicAccountSetBasedResolver::getIntelligentBackoff(lineCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntelligentBackoff</Name>
				<Source><![CDATA[
    private static int getIntelligentBackoff(int _numRows)
    {
        int sleepTime = 0;

        if (_numRows == 0)
        {
            sleepTime = 0;
        }
        else if (_numRows <= 500)
        {
            sleepTime = 10000;
        }
        else if (_numRows <= 2000)
        {
            sleepTime = 12000;
        }
        else if (_numRows <= 5000)
        {
            sleepTime = 15000;
        }
        else if (_numRows <= 10000)
        {
            sleepTime = 25000;
        }
        else if (_numRows <= 20000)
        {
            sleepTime = 29000;
        }
        else if (_numRows <= 50000)
        {
            sleepTime = 63000;
        }
        else
        {
            sleepTime = 90000;
        }

        return sleepTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Dimension:LedgerDImensionDynamicAccountSetBasedResolverDevDoc</DeveloperDocumentation>
	<Label>@Dimension:LedgerDimensionDynamicAccountSetBasedResolver</Label>
	<TableGroup>Staging</TableGroup>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AccountType</Name>
			<EnumType>LedgerJournalACType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OffsetAccountDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>OffsetAccountType</Name>
			<EnumType>LedgerJournalACType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransferStatus</Name>
			<EnumType>DMFTransferStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Staging</Name>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>