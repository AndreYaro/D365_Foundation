<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepBookTableMap_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset depreciation book tablbe map.
/// </summary>
public class AssetDepBookTableMap_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyCalendarScheduleTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy calendar scheduale.
    /// </summary>
    /// <param name = "_bookId">Asset book merge id.</param>
	public void copyCalendarScheduleTo(AssetBookMergeId _bookId)
	{
	    AssetDepBookTableMap_JP             bookTo;
	    AssetDepBookCalendarSchedule_JP     bookCalendarScheduleFrom;
	    AssetDepBookCalendarSchedule_JP     bookCalendarScheduleTo;

	    RefTableId                          sourceTableIdTo;
	    RefRecId                            sourceRecIdTo;

	    if (_bookId)
	    {
	        ttsBegin;

	        bookTo = AssetDepBookTableMap_JP::find(
                AssetBookType::ValueModel,
	            _bookId,
	            true);

	        if (bookTo)
	        {
	            if (this.FiscalCalendar != bookTo.FiscalCalendar)
	            {
	                bookTo.FiscalCalendar = this.FiscalCalendar;
	                bookTo.update();
	            }

	            sourceTableIdTo = bookTo.TableId;
	            sourceRecIdTo   = bookTo.RecId;

	            delete_from bookCalendarScheduleTo
	                where bookCalendarScheduleTo.SourceTableId    == sourceTableIdTo
	                    && bookCalendarScheduleTo.SourceRecId     == sourceRecIdTo;

	            insert_recordset bookCalendarScheduleTo(FiscalCalendar, SourceRecId, SourceTableId, ValidFrom, ValidTo)
	                select FiscalCalendar,  sourceRecIdTo, sourceTableIdTo, ValidFrom, ValidTo
	                    from bookCalendarScheduleFrom
	                    where bookCalendarScheduleFrom.SourceTableId    == this.TableId
	                        && bookCalendarScheduleFrom.SourceRecId     == this.RecId;
	        }

	        ttsCommit;
	    }
	}

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
	/// Determines the value of the Fiscal Calendar that is associated on the value model or depreciation book.
	/// If the value is not specified on the table, the value specified on the <c>Ledger</c> table is retrieved.
	/// </summary>
	/// <returns>
	/// Returns the <c>RecId</c> of the fiscal calendar.
	/// </returns>
	public RefRecId getFiscalCalendar()
	{
	    throw error(Error::missingOverload(funcName()));
	}

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendar_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value of the Fiscal Calendar that is associated on the value model.
    /// If the value is not specified on the table, the value specified on the <c>Ledger</c> table is retrieved.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// Returns the <c>RecId</c> of the fiscal calendar.
    /// </returns>
    public RefRecId getFiscalCalendar_JP(AssetTransDate _date)
    {
        RefRecId fiscalCalendar;

        fiscalCalendar = AssetDepBookCalendarSchedule_JP::find(
            this.TableId,
            this.RecId,
            _date).FiscalCalendar;

        // If there is no schedule for the calendar, use the default setting.
        if (!fiscalCalendar)
        {
            fiscalCalendar = this.FiscalCalendar;

            // If there is no calendar setup on the value model, find the ledger calendar.
            if (!fiscalCalendar)
            {
                fiscalCalendar = Ledger::fiscalCalendar();
            }
        }

        return fiscalCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an record of <C>AssetDepBookTableMap_JP</C>.
    /// </summary>
    /// <param name="_assetBookType">
    /// Asset book type.
    /// </param>
    /// <param name="_assetBookId">
    /// Aseet book ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An record of <C>AssetDepBookTableMap_JP</C>.
    /// </returns>
    public static AssetDepBookTableMap_JP find(
        AssetBookType   _assetBookType,
        AssetBookId     _assetBookId,
        boolean         _forUpdate = false)
    {
        AssetDepBookTableMap_JP     assetDepBookTableMap;

        assetDepBookTableMap = AssetDepBookTableMap_JP::getEmptyTableBuffer(_assetBookType);

        if (_assetBookId)
        {
            assetDepBookTableMap.selectForUpdate(_forUpdate);

            select firstOnly assetDepBookTableMap
                where assetDepBookTableMap.AssetBookId == _assetBookId;
        }

        return assetDepBookTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an record of <C>AssetDepBookTableMap_JP</C>.
    /// </summary>
    /// <param name="_assetBookType">
    /// Asset book type.
    /// </param>
    /// <param name="_recId">
    /// Record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An record of <C>AssetDepBookTableMap_JP</C>.
    /// </returns>
    public static AssetDepBookTableMap_JP findByRecId(
        AssetBookType   _assetBookType,
        RecId           _recId,
        boolean         _forUpdate = false)
    {
        AssetDepBookTableMap_JP     assetDepBookTableMap;

        assetDepBookTableMap = AssetDepBookTableMap_JP::getEmptyTableBuffer(_assetBookType);

        if (_recId)
        {
            assetDepBookTableMap.selectForUpdate(_forUpdate);

            select firstOnly assetDepBookTableMap
                where assetDepBookTableMap.RecId == _recId;
        }

        return assetDepBookTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_assetBookType">
    ///    The book type of transaction table that consuming the map.
    /// </param>
    /// <returns>
    ///     An empty table buffer for the concrete table represented by the map.
    /// </returns>
    public static AssetDepBookTableMap_JP getEmptyTableBuffer(AssetBookType _assetBookType)
    {
        AssetDepBookTableMap_JP ret;
        AssetBookTable          assetBookTable;
        ret = assetBookTable;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetDepBookTableMap_JP</DeveloperDocumentation>
	<Label>@FixedAssets:FA_EntityTitle_AssetDepBookTableMap_JP</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetBookId</Name>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DepreciationAcceleratedProfile</Name>
			<ExtendedDataType>AssetDepreciationAcceleratedProfileId_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DepreciationAltProfile</Name>
			<ExtendedDataType>AssetDepreciationAltProfileId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DepreciationProfile</Name>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>FiscalCalendar</Name>
			<ExtendedDataType>FiscalCalendarRecId</ExtendedDataType>
			<Label>@sys11839</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>NetBookValueRest</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RoundOffDepreciation</Name>
			<ExtendedDataType>RoundOff</ExtendedDataType>
			<Label>@SYS71186</Label>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>