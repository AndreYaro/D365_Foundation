<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendInvoiceJour extends common
{
    #ISOCountryRegionCodes
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendInvoiceJourInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>The <c>CustVendTransInterface</c> object.</returns>
    public CustVendInvoiceJourInterface custVendInvoiceJourInterface()
    {
        return CustVendInvoiceJourInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    void calcCashDiscDate()
    {
        if (this.CashDiscCode)
        {
            if (!this.CashDiscDate)
            {
                if (this.TableId == tableNum(CustInvoiceJour) && this.CashDiscBaseDate)
                {
                    this.CashDiscDate = this.CashDiscBaseDate;
                }
                else
                {
                    this.CashDiscDate = this.DocumentDate ? this.DocumentDate : this.InvoiceDate;
                }

                this.CashDiscDate = CashDisc::cashDiscDate(this.CashDiscCode, this.CashDiscDate);
            }
        }
        else
        {
            this.CashDiscDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    void calcDue()
    {
        CustVendInvoiceJourDueDateCalculator custVendInvoiceJourDueDateCalculator = CustVendInvoiceJourDueDateCalculator::construct(this);
        this.DueDate = custVendInvoiceJourDueDateCalculator.calcDueDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    public PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        PaymDueDateLimit_ES dueDateLimit;
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;

        switch (this.TableId)
        {
            case tableNum(CustInvoiceJour):
                custInvoiceJour = this;
                dueDateLimit = PaymDueDateLimit_ES::getDueDateLimitSalesParm(
                    _paymTerm.DueDateLimitGroupId_ES,
                    _transDate,
                    custInvoiceJour.SalesId,
                    custInvoiceJour.ParmId);
                break;

            case tableNum(VendInvoiceJour):
                vendInvoiceJour = this;
                dueDateLimit = PaymDueDateLimit_ES::getDueDateLimitPurchParm(
                    _paymTerm.DueDateLimitGroupId_ES,
                    _transDate,
                    vendInvoiceJour.PurchId,
                    vendInvoiceJour.ParmId);
                break;

            default:
                dueDateLimit = PaymDueDateLimit_ES::getCurrentValues(_paymTerm.DueDateLimitGroupId_ES);
                break;
        }

        return dueDateLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    void createPaymentSched(SalesTotals _salesTotals = NULL, boolean _skipVersionChangeCheck = false)
    {
        CustVendPaymSched custVendPaymSched = CustVendPaymSched::construct(this.module(),this);
        PaymSched paymentSched = PaymSched::find(this.PaymentSched);
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        // If Flexible plan is enabled, should use flexible number of payments
        if (paymentSched.MCRFlexiblePlan && this.TableId == tableNum(CustInvoiceJour))
        {
            mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(this.Num);
            if (mcrInstallmentPlanSalesTable && mcrInstallmentPlanSalesTable.FlexNumInstallments)
            {
                paymentSched.NumOfPayment = mcrInstallmentPlanSalesTable.FlexNumInstallments;
            }
        }

        custVendPaymSched.parmSkipVersionChangeCheck(_skipVersionChangeCheck);
        if (_salesTotals)
        {
            custVendPaymSched.setSalesTotals(_salesTotals);
        }

        custVendPaymSched.createPaymSched(paymentSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    public EInvoiceCFDIUUID_MX getCFDIUUID_MX()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFC_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice RFC number
    /// </summary>
    /// <returns>
    /// The RFC number
    /// </returns>
    public RFC_MX getRFC_MX()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    public boolean creditNote()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    CustVendTrans custVendTrans(CustVendTrans custVendTrans)
    {
        select firstonly custVendTrans
            where custVendTrans.AccountNum == this.InvoiceAccount
               && custVendTrans.TransDate == this.InvoiceDate
               && custVendTrans.Invoice == this.InvoiceId
               && custVendTrans.Voucher == this.LedgerVoucher;

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressing deliveryAddress_RU()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourSortedList_RU</Name>
				<Source><![CDATA[
    public RecordSortedList factureJourSortedList_RU()
    {
        RecordSortedList ret = new RecordSortedList(tableNum(FactureJour_RU));
        ret.sortOrder(fieldNum(FactureJour_RU, FactureDate),
                      fieldNum(FactureJour_RU, FactureExternalId),
                      fieldNum(FactureJour_RU, ModifiedDateTime),
                      fieldNum(FactureJour_RU, RecId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttorneyDate_RU</Name>
				<Source><![CDATA[
    public AttorneyDate_RU getAttorneyDate_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().AttorneyDate_RU;
        }
        else
        {
            return this.AttorneyDate_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttorneyId_RU</Name>
				<Source><![CDATA[
    public AttorneyId_RU getAttorneyId_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().AttorneyId_RU;
        }
        else
        {
            return this.AttorneyId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttorneyIssuedName_RU</Name>
				<Source><![CDATA[
    public AttorneyIssuedName_RU getAttorneyIssuedName_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().AttorneyIssuedName_RU;
        }
        else
        {
            return this.AttorneyIssuedName_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalcDueDate</Name>
				<Source><![CDATA[
    public TransDate getCalcDueDate(TransDate fixedDueDate)
    {
        #isoCountryRegionCodes

        PaymTerm paymTerm;
        PaymDueDateLimit_ES dueDateLimit;

        if (!this.DueDate)
        {
            if (this.TableId == tableNum(CustInvoiceJour) || this.TableId == tableNum(VendInvoiceJour))
            {
                this.DueDate = fixedDueDate;
            }
        }

        if (! this.DueDate)
        {
            if (this.TableId == tableNum(CustInvoiceJour) && this.CashDiscBaseDate)
            {
                this.DueDate = PaymTerm::find(this.Payment).due(this.CashDiscBaseDate, this.PaymDayId);
            }
            else if (paymTerm.UseDeliveryDateForDueDate_ES &&
                (this.TableId == tableNum(CustInvoiceJour) ||
                    this.TableId == tableNum(VendInvoiceJour)))
            {
                this.DueDate = this.DeliveryDate_ES;
            }
            else
            {
                this.DueDate = PaymTerm::find(this.Payment).due(this.DocumentDate ? this.DocumentDate : this.InvoiceDate,
                                                                this.PaymDayId);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
            {
                dueDateLimit = this.calcDueDateLimit_ES(paymTerm, this.DueDate);
                this.DueDate = paymTerm.due(this.DueDate, this.PaymDayId, false, dueDateLimit);
            }
        }

        return this.DueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsigneeAccount_RU</Name>
				<Source><![CDATA[
    public CustAccountConsignee_RU getConsigneeAccount_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().ConsigneeAccount_RU;
        }
        else
        {
            return this.ConsigneeAccount_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsignorAccount_RU</Name>
				<Source><![CDATA[
    public VendAccountConsignor_RU getConsignorAccount_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().ConsignorAccount_RU;
        }
        else
        {
            return this.ConsignorAccount_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cons invoice of the cust invoice jour.
    /// </summary>
    /// <returns>
    /// The cust vend cons reference record id.
    /// </returns>
    public CustVendConsRefRecId_JP getConsInvoice_JP()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_W().CustConsInvoice_JP;
        }
        else
        {
            return this.ConsInvoice_JP;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrect_RU</Name>
				<Source><![CDATA[
    public Correct_RU getCorrect_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().Correct_RU;
        }
        else
        {
            return this.Correct_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    public CorrectedInvoiceDate_RU getCorrectedInvoiceDate_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().CorrectedInvoiceDate_RU;
        }
        else
        {
            return this.CorrectedInvoiceDate_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public CorrectedInvoiceId_RU getCorrectedInvoiceId_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().CorrectedInvoiceId_RU;
        }
        else
        {
            return this.CorrectedInvoiceId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFacturedFully_RU</Name>
				<Source><![CDATA[
    public Correct_RU getFacturedFully_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().FacturedFully_RU;
        }
        else
        {
            return this.FacturedFully_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventOwnerId_RU</Name>
				<Source><![CDATA[
    public InventProfileId_RU getInventOwnerId_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().InventOwnerId_RU;
        }
        else
        {
            return this.InventOwnerId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU getInventProfileType_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU;
        }
        else if (this.CustVendInvoiceJour::isInventProfileTypeMapped_RU())
        {
            return this.InventProfileType_RU;
        }
        else
        {
            return InventProfileType_RU::NotSpecified;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNonRealRevenue_RU</Name>
				<Source><![CDATA[
    public NonRealRevenue_RU getNonRealRevenue_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().NonRealRevenue_RU;
        }
        else
        {
            return this.NonRealRevenue_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceCode_W</Name>
				<Source><![CDATA[
    public NumberSequenceCode getNumberSequenceCode_W()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_W().NumberSequenceCode_W;
        }
        else
        {
            return this.NumberSequenceCode_LT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId_RU</Name>
				<Source><![CDATA[
    public OffSessionId_RU getOffSessionId_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_Officials().OffSessionId;
        }
        else
        {
            return this.OffSessionId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintStandardCurrency_RU</Name>
				<Source><![CDATA[
    public PrintInMST_RU getPrintStandardCurrency_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().PrintStandardCurrency_RU;
        }
        else
        {
            return this.PrintStandardCurrency_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public SalesInvoicePostingType_RU getSalesInvoicePostingType_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().InvoicePostingType_RU;
        }
        else
        {
            return this.SalesInvoicePostingType_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitedVATInvoice_LT</Name>
				<Source><![CDATA[
    public UnitedVATInvoice_LT getUnitedVATInvoice_LT()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_W().UnitedVATInvoice_LT;
        }
        else
        {
            return this.UnitedVATInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOnPayment_RU</Name>
				<Source><![CDATA[
    public VATOnPayment_RU getVATOnPayment_RU()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_RU().vatOnPayment_RU;
        }
        else
        {
            return this.vatOnPayment_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWhoIsAuthor_LT</Name>
				<Source><![CDATA[
    public LtDocOriginator getWhoIsAuthor_LT()
    {
        CustInvoiceJour custInvoiceJour;

        if (this.TableId == tableNum(CustInvoiceJour))
        {
            custInvoiceJour = this;
            return custInvoiceJour.custInvoiceJour_W().WhoIsAuthor_LT;
        }
        else
        {
            return this.WhoIsAuthor_LT;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTrans</Name>
				<Source><![CDATA[
    void initFromCustVendTrans(CustVendTrans _custVendTrans)
    {
        this.OrderAccount = _custVendTrans.AccountNum;
        this.InvoiceAccount = _custVendTrans.AccountNum;
        this.GroupId = this.groupId();
        this.InvoiceNum = _custVendTrans.Invoice;
        this.InvoiceDate = _custVendTrans.TransDate;
        this.DocumentNum = _custVendTrans.DocumentNum;
        this.DocumentDate = _custVendTrans.DocumentDate;
        this.CurrencyCode = _custVendTrans.CurrencyCode;
        this.LedgerVoucher = _custVendTrans.Voucher;
        this.InvoiceAmount = _custVendTrans.AmountCur;
        this.DefaultDimension = _custVendTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.custVendInvoiceJourInterface().initFromLedgerJournalTrans(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProfileTypeMapped_RU</Name>
				<Source><![CDATA[
    public boolean isInventProfileTypeMapped_RU()
    {
        if (this.TableId == tableNum(CustInvoiceJour))
        {
            return false;
        }
        else
        {
            return mappingExists(tableNum(CustVendInvoiceJour), this.TableId, fieldNum(CustVendInvoiceJour, InventProfileType_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    SysModule module()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFacturedFully_RU</Name>
				<Source><![CDATA[
    public void setFacturedFully_RU(FacturedFully_RU _factured)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaltaxAmountRetained_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>SourceRegulateAmountCur</c> fields from Tax trans related to the customer/vendor journal.
    /// </summary>
    /// <returns>
    /// A real value with the total retained tax amount.
    /// </returns>
    /// <remarks>
    /// The original amount from the tax trans records has its sign inverted in case it is a customer journal.
    /// </remarks>
    TaxAmountCur totaltaxAmountRetained_BR()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        taxTrans.selectLocked(false);

        select sum(SourceRegulateAmountCur)
            from taxTrans
            join RetainedTax_BR from taxTable
            where taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                && taxTrans.TaxCode == taxTable.TaxCode
                && taxTrans.Voucher == this.LedgerVoucher
                && taxTrans.TransDate == this.InvoiceDate
                && taxTable.RetainedTax_BR == NoYes::Yes;

        switch (this.TableId)
        {
            case tableNum(CustInvoiceJour):
                taxTrans.SourceRegulateAmountCur = taxTrans.SourceRegulateAmountCur * -1;
                break;
            case tableNum(VendInvoiceJour):
                taxTrans.SourceRegulateAmountCur = taxTrans.SourceRegulateAmountCur;
                break;
        }
        return taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates due date and updates related trans and open trans accordingly.
    /// </summary>
    public void updateDue_JP()
    {
        CustVendTrans custVendTrans;

        ttsbegin;
        this.DueDate = dateNull();
        this.CustVendInvoiceJour::calcDue();
        custVendTrans = this.CustVendInvoiceJour::updateTransDue_JP();
        this.CustVendInvoiceJour::updateTransOpenDue_JP(custVendTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendXML</Name>
				<Source><![CDATA[
    public static void sendXML(FormDataSource _formDataSource, PrintCopyOriginal _printCopyOriginal)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            using (EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::instance())
            {
                eInvoiceContext.parmCheckERDestinationExists(true);
                for (Common common = getFirstSelection(_formDataSource); common; common = _formDataSource.getNext())
                {
                    EInvoice_IT::exportXMLToSharePoint(common.RecId, _formDataSource.table());
                }
            }
        }
        else
        {
            switch (_formDataSource.table())
            {
                case tableNum(CustInvoiceJour):
                    CustInvoiceJour custInvoiceJour;
                    for (custInvoiceJour = getFirstSelection(_formDataSource); custInvoiceJour; custInvoiceJour = _formDataSource.getNext())
                    {
                        if(!CustVendInvoiceJour::isInvoiceDocumentHasDestination(tableNum(CustInvoiceTable), custInvoiceJour.RecId))
                        {
                            custInvoiceJour.sendElectronically(_printCopyOriginal);
                        }
                    }
                    break;

                case tableNum(ProjInvoiceJour):
                    ProjInvoiceJour projInvoiceJour;
                    for (projInvoiceJour = getFirstSelection(_formDataSource); projInvoiceJour; projInvoiceJour = _formDataSource.getNext())
                    {
                        if(!CustVendInvoiceJour::isInvoiceDocumentHasDestination(tableNum(ProjInvoiceTable), projInvoiceJour.RecId))
                        {
                            projInvoiceJour.sendElectronically(_printCopyOriginal);
                        }
                    }
                    break;

                default:
                    throw error(Error::missingOverload(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canXMLBeSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document can be sent electronically or not.
    /// </summary>
    /// <returns>
    /// true if document can be sent electronically otherwise false.
    /// </returns>
    public boolean canXMLBeSent()
    {
        boolean ret = !BusinessDocumentParameters::isFeatureEnabled(EInvoicingFeaturesConstants::ExportInvoicesFeaturesEUR);

        if (ret && CustTable::isCustDKPublic(this.InvoiceAccount))
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK]))
            {
                str tableName;

                switch (this.TableId)
                {
                    case tableNum(CustInvoiceJour):
                        tableName = tablepname(CustInvoiceJour);
                        break;

                    case tableNum(ProjInvoiceJour):
                        tableName = tablepname(ProjInvoiceTable);
                        break;
                }

                ret = EInvoiceValidationHelper::checkCompanyInfo();

                ret = EInvoiceValidationHelper::checkCustTableInfo(this.InvoiceAccount) && ret;

                ret = EInvoiceValidationHelper::checkCurrencyInfo(this.CurrencyCode) && ret;

                ret = EInvoiceValidationHelper::checkAddressInfo(tableName, this.DeliveryPostalAddress_RU) && ret;

                ret = EInvoiceValidationHelper::checkCustTableInfo(this.InvoiceAccount) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates due date of related customer/vendor transaction.
    /// </summary>
    /// <returns>
    /// Returns related customer/vendor transaction.
    /// </returns>
    private CustVendTrans updateTransDue_JP()
    {
        CustVendTrans custVendTrans;
        CustTrans custTrans;
        VendTrans vendTrans;

        switch (this.TableId)
        {
            case tableNum(CustInvoiceJour) :
                custVendTrans = custTrans;
                break;

            case tableNum(VendInvoiceJour) :
                custVendTrans = vendTrans;
                break;
        }

        this.CustVendInvoiceJour::custVendTrans(custVendTrans);
        if (custVendTrans)
        {
            ttsbegin;
            custVendTrans.selectForUpdate(true);
            custVendTrans.DueDate = this.DueDate;
            custVendTrans.update();
            ttscommit;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransOpenDue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates due date of related open transactions.
    /// </summary>
    /// <param name="_custVendTrans">
    /// customer/vendor transaction.
    /// </param>
    private void updateTransOpenDue_JP(CustVendTrans _custVendTrans)
    {
        CustVendTransOpen custVendTransOpen;

        switch (this.module())
        {
            case SysModule::Cust :
                custVendTransOpen = CustTransOpen::findRefId(_custVendTrans.RecId, true);
                break;

            case SysModule::Vend :
                custVendTransOpen = VendTransOpen::findRefId(_custVendTrans.RecId, true);
                break;
        }

        if (custVendTransOpen)
        {
            ttsbegin;
            custVendTransOpen.DueDate = this.DueDate;
            custVendTransOpen.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatDueDate_W</Name>
				<Source><![CDATA[
    display VatDueDate_W vatDueDate_W()
    {
        TaxTrans taxTrans;
        TaxTrans_W taxTrans_W;

        if (this.LedgerVoucher && this.InvoiceDate)
        {
            select maxof(VatDueDate_W) from taxTrans_W
                exists join taxTrans
                where taxTrans.RecId == taxTrans_W.TaxTrans &&
                      taxTrans.Voucher == this.LedgerVoucher &&
                      taxTrans.TransDate == this.InvoiceDate;
        }

        return taxTrans_W.VatDueDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCorrectionParameters_RU</Name>
				<Source><![CDATA[
    public static boolean checkCorrectionParameters_RU(InvoiceId _correctedInvoiceId,
                                                       InvoiceDate _correctedInvoiceDate,
                                                       Correct_RU _correct)
    {
        boolean ret = true;
        container checkCon;
        #define.Value2(2)

        if (_correctedInvoiceDate)
        {
            checkCon += _correctedInvoiceDate;
        }
        if (_correctedInvoiceId)
        {
            checkCon += _correctedInvoiceId;
        }

        if ((_correct && ! conLen(checkCon)) || (conLen(checkCon) && conLen(checkCon) != #Value2))
        {
            ret = checkFailed("@GLS112061");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCorrFacture_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for last correction factures.
    /// </summary>
    /// <param name="_correctedInvoices">
    /// Container with <c>CustVendInvoiceJour</c> records.
    /// </param>
    /// <param name="_correctionType">
    /// <c>FactureCorrectionType_RU</c> value.
    /// </param>
    /// <returns>
    /// The FactureJour_RU table containing last corrective facture.
    /// </returns>
    /// <remarks>
    /// In Microsoft Dynamics AX 2012 R2 the return type of this method was changed from a container
    /// to the <c>FactureJour_RU</c> table. See <see cref="http://support.microsoft.com/kb/2869495" /> for
    /// more information.
    /// </remarks>
    static FactureJour_RU findLastCorrFacture_RU(container _correctedInvoices, FactureCorrectionType_RU _correctionType)
    {
        int idx;
        CustVendInvoiceJour custVendInvoiceJour;
        RecordSortedList factureJourList;
        FactureJour_RU factureJour, factureJourCur;

        factureJour.setTmp();

        for (idx = 1; idx <= conLen(_correctedInvoices); idx++)
        {
            custVendInvoiceJour = conPeek(_correctedInvoices, idx);
            factureJourList = custVendInvoiceJour.factureJourSortedList_RU();

            switch (factureJourList.len())
            {
                case 0: continue;
                case 1:
                    factureJourList.next(factureJourCur);
                    factureJourCur = conpeek(FactureJour_RU::findLastFacture(factureJourCur, _correctionType), 3);
                    if (factureJourCur)
                    {
                        select firstonly factureJour
                            where factureJour.FactureId == factureJourCur.FactureId &&
                                  factureJour.Module == factureJourCur.Module;

                        if (! factureJour)
                        {
                            buf2buf(factureJourCur, factureJour);
                            factureJour.RefLastCorrFacture = factureJourCur.RecId;
                            factureJour.doInsert();
                        }
                    }
                    break;
                default :
                    return null;
            }
        }

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginalInvoice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for original invoice in chain of corrections.
    /// </summary>
    /// <param name="_invoiceAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_correctedInvoiceId">
    /// Invoice id.
    /// </param>
    /// <param name="_correctedInvoiceDate">
    /// Invoice date.
    /// </param>
    /// <param name="_custVendInvoiceJour">
    /// <c>CustVendInvoiceJour</c> which used for initialization.
    /// </param>
    /// <returns>
    /// <c>CustVendInvoiceJour</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Circular reference detected.
    /// </exception>
    static private CustVendInvoiceJour findOriginalInvoice_RU(CustVendAC _invoiceAccount,
        CorrectedInvoiceId_RU _correctedInvoiceId,
        CorrectedInvoiceDate_RU _correctedInvoiceDate,
        CustVendInvoiceJour _custVendInvoiceJour)
    {
        CustVendInvoiceJour correctedInvoiceJour = _custVendInvoiceJour.data();
        CorrectedInvoiceDate_RU correctedInvoiceDate = _correctedInvoiceDate;
        correctedInvoiceId_RU correctedInvoiceId = _correctedInvoiceId;

        Set invoiceSet = new Set(Types::Container);

        while (correctedInvoiceId && correctedInvoiceDate)
        {
            select firstonly correctedInvoiceJour
                where correctedInvoiceJour.InvoiceAccount == _invoiceAccount &&
                    correctedInvoiceJour.InvoiceId == correctedInvoiceId &&
                      correctedInvoiceJour.InvoiceDate == correctedInvoiceDate;

            if (!correctedInvoiceJour)
                break;

            correctedInvoiceDate = correctedInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceDate_RU();
            correctedInvoiceId = correctedInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceId_RU();

            if (correctedInvoiceId && correctedInvoiceDate)
            {
                if (invoiceSet.in([correctedInvoiceId, correctedInvoiceDate]))
                {
                    error("@SYS132865");

                    throw error(CustVendInvoiceJour::getCorrectionInvoiceErrorText(correctedInvoiceId,
                        correctedInvoiceDate));
                }

                invoiceSet.add([correctedInvoiceId, correctedInvoiceDate]);
            }
        }

        return correctedInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRefOriginalInvoice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between invoice and corrected invoice.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// <c>CustVendInvoiceJour</c> record for which link should be created.
    /// </param>
    /// <remarks>
    /// If original invoice record not found, self link created.
    /// </remarks>
    static void initRefOriginalInvoice_RU(CustVendInvoiceJour _custVendInvoiceJour)
    {
        CustVendInvoiceJour origInvoiceJour = _custVendInvoiceJour.data();

        if (_custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceId_RU() && _custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceDate_RU())
        {
            origInvoiceJour = CustVendInvoiceJour::findOriginalInvoice_RU(_custVendInvoiceJour.InvoiceAccount,
                                                                          _custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceId_RU(),
                                                                          _custVendInvoiceJour.CustVendInvoiceJour::getCorrectedInvoiceDate_RU(),
                                                                          _custVendInvoiceJour);
        }

        if (origInvoiceJour.RecId)
        {
            switch (origInvoiceJour.TableId)
            {
                case tableNum(CustInvoiceJour):
                    CustInvoiceJourCorrLink_RU::createLink(_custVendInvoiceJour.RecId, origInvoiceJour.RecId);
                    break;
                case tableNum(VendInvoiceJour):
                    VendInvoiceJourCorrLink_RU::createLink(_custVendInvoiceJour.RecId, origInvoiceJour.RecId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns invoice journal record for correction.
    /// </summary>
    /// <param name = "_module">
    /// Enum value thats defines invoice's module.
    /// </param>
    /// <param name = "_custVendAccount">
    /// Value of invoice account.
    /// </param>
    /// <param name = "_vendInvoiceJournal">
    /// Value restricts to use only invoices with empty purch identifier.
    /// </param>
    /// <returns>Invoice journal record for correction.</returns>
    public static CustVendInvoiceJour lookupCorrectedInvoiceId_RU(FormStringControl _ctrl,
        ModuleCustVend _module,
        CustVendAC _custVendAccount,
        boolean _vendInvoiceJournal = false)
    {
        TableId tableId = _module == ModuleCustVend::Cust ? tableNum(CustInvoiceJour): tableNum(VendInvoiceJour);

        FieldId fieldIdInvoice = _module == ModuleCustVend::Cust ? fieldNum(CustInvoiceJour, InvoiceId): fieldNum(VendInvoiceJour, InvoiceId);
        FieldId fieldIdInvoiceDate = _module == ModuleCustVend::Cust ? fieldNum(CustInvoiceJour, InvoiceDate): fieldNum(VendInvoiceJour, InvoiceDate);

        TableLookup_RU sysTableLookup = TableLookup_RU::newParameters(tableId, _ctrl);

        sysTableLookup.addLookupfield(fieldIdInvoice, true);
        sysTableLookup.addLookupfield(fieldIdInvoiceDate);
        if (_module == ModuleCustVend::Vend)
        {
            sysTableLookup.addLookupMethod(tableMethodStr(VendInvoiceJour, getLatestRelatedCorrectionFacture));
        }

        sysTableLookup.parmQuery(custVendInvoiceJour::getInvoiceCorrectionQuery(_module,
            _custVendAccount,
            _vendInvoiceJournal));

        sysTableLookup.performFormLookup();

        CustVendInvoiceJour custVendInvoiceJour;

        if (sysTableLookup.getFoundCursor())
        {
            custVendInvoiceJour = sysTableLookup.getFoundCursor();
        }

        return custVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxInvoiceNumFromJournal_MX</Name>
				<Source><![CDATA[
    static InvoiceId findTaxInvoiceNumFromJournal_MX(CustVendInvoiceJour _custVendInvoiceJour)
    {
        CustInvoiceJour custInvoiceJour;
        VendInvoiceJour vendInvoiceJour;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            if (_custVendInvoiceJour.TableId == tableNum(CustInvoiceJour))
            {
                custInvoiceJour = CustInvoiceJour::findRecId(_custVendInvoiceJour.RecId);
                return custInvoiceJour.TaxInvoiceSalesId;
            }
            else if (_custVendInvoiceJour.TableId == tableNum(VendInvoiceJour))
            {
                vendInvoiceJour = VendInvoiceJour::findRecId(_custVendInvoiceJour.RecId, true);
                return vendInvoiceJour.TaxInvoicePurchId;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds one <c>LedgerJournalTrans</c> that current <c>CustVendInvoiceJour</c> is initalized from.
    /// There may be multiple <c>LedgerJournalTrans</c>. This method only return one.
    /// </summary>
    /// <returns>The original <c>LedgerJournalTrans</c></returns>
    internal LedgerJournalTrans getOrigLedgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (!this.InvoiceId)
        {
            return ledgerJournalTrans;
        }

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.voucher == this.LedgerVoucher
                && ledgerJournalTrans.TransDate == this.InvoiceDate
                && ledgerJournalTrans.Invoice == this.InvoiceId;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateERParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates invoice electronic reporting parameters.
    /// </summary>
    /// <param name = "_amountMST">Invoice amount.</param>
    /// <param name = "_showWarning">Indicates whether warning message should be shown if eInvoice param of customer is set to No.</param>
    /// <returns>True if electronic reporting parameters are setup; otherwise false</returns>
    public boolean validateERParameters(Amount _amount, boolean _showWarning = true)
    {
        boolean ret = true;

        //Retrieve customer and vendor for validating EInvoice checkbox.
        CustTable custTable;
        VendTable vendTable;

        if (this.TableId == tableNum(VendInvoiceJour))
        {
            vendTable = VendTable::find(this.InvoiceAccount);
        }
        else
        {
            custTable = CustTable::find(this.invoiceAccount);
        }

        if (custTable.eInvoice || vendTable.EInvoiceRegister_IT)
        {
            ERFormatMappingId eRFormatMappingId;
            SalesParameters salesParameters;
            PurchParameters purchParameters;

            if (this.TableId == tableNum(VendInvoiceJour))
            {
                purchParameters = PurchParameters::find();
            }
            else
            {
                salesParameters = SalesParameters::find();
            }

            switch (this.TableId)
            {
                case tableNum(CustInvoiceJour):
                    if (_amount < 0)
                    {
                        eRFormatMappingId = salesParameters.ERFormatMappingSalesCreditNote;
                    }
                    else
                    {
                        eRFormatMappingId = salesParameters.ERFormatMappingSalesInvoice;
                    }
                    break;

                case tableNum(ProjInvoiceJour):
                    if (_amount < 0)
                    {
                        eRFormatMappingId = salesParameters.ERFormatMappingProjectCreditNote;
                    }
                    else
                    {
                        eRFormatMappingId = salesParameters.ERFormatMappingProjectInvoice;
                    }
                    break;

                case tableNum(VendInvoiceJour):
                    eRFormatMappingId = purchParameters.ERFormatMappingVendorInvoice;
                    break;

                default:
                    break;
            }

            if (!eRFormatMappingId && !BusinessDocumentParameters::isFeatureEnabled(EInvoicingFeaturesConstants::ExportInvoicesFeaturesEUR))
            {
                ret = false;

                if (this.TableId == tableNum(VendInvoiceJour))
                {
                    //Error on function run. Format mapping is not specified in Accounts payable parameters
                    warning(strfmt("@GLS110288" + "@SYS35672" + ' ' + "@SYS93945", "@ElectronicReporting:FormatMapping", "@SYS336057", ''));
                }
                else
                {
                    //Error on function run. Format mapping is not specified in Accounts receivable parameters
                    warning(strfmt("@GLS110288" + "@SYS35672" + ' ' + "@SYS93945", "@ElectronicReporting:FormatMapping", "@SYS76213", ''));
                }
            }
        }
        else
        {
            ret = false;

            if(_showWarning)
            {
                if (this.TableId == tableNum(VendInvoiceJour))
                {
                    //EInvoices is not specified in Vendor parameters.
                    warning(strFmt("@SYS93945", "@AccountsReceivable:eInvoices", "@SYS24220", ''));
                }
                else
                {
                    //EInvoices is not specified in Customer parameters.
                    warning(strFmt("@SYS93945", "@AccountsReceivable:eInvoices", "@SYS24210", ''));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST_EE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amountMST for journal of each type.
    /// </summary>
    /// <returns>The AmountMST of the journal.</returns>
    // Used in GER configuration.
    AmountMST amountMST_EE()
    {
        AmountMST amountMST;

        switch (this.module())
        {
            case SysModule::Cust :
                if (isFlightEnabled(LocalizationFlights::EEVATDeclaration_UseSalesBalanceForSalesInvoiceInvoiceAmount))
                {
                    amountMST = this.amountMST(this.SalesOrderbalance);
                }
                else
                {
                    amountMST = this.amountMST(this.InvoiceAmount - this.SumTax);
                }
                break;

            case SysModule::Vend :
                amountMST = this.amountMST(this.InvoiceAmount);
                break;

            default :
                amountMST = 0;
                break;
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryRegistrationNumber_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get registration number for primary address.
    /// </summary>
    /// <returns>The registration number</returns>
    // Used in GER configuration.
    public TaxRegistrationNumber getPrimaryRegistrationNumber_W()
    {
        CustVendTable custVendTable;
        TaxRegistrationNumber taxRegistrationNumber;

        switch (this.module())
        {
            case SysModule::Cust :
                custVendTable = CustTable::find(this.InvoiceAccount);
                break;

            case SysModule::Vend :
                custVendTable = VendTable::find(this.InvoiceAccount);
                break;

            default :
                break;
        }

        if (custVendTable)
        {
            taxRegistrationNumber = custVendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
        }

        return taxRegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToPrintInCompanyLanguage_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks if the invoice needs to be printed in the company language as well, aside from printing in the invoice language.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// A table buffer containing the invoice header.
    /// </param>
    /// <returns>
    /// A <c>Boolean</c> value indicating if the invoice needs to be printed in the company language as well, aside from printing in the invoice language.
    /// </returns>
    public static boolean needToPrintInCompanyLanguage_SA(CustVendInvoiceJour _custVendInvoiceJour)
    {
        #ISOCountryRegionCodes
        boolean ret;
        
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            return false;
        }
        
        if (_custVendInvoiceJour.TableId != tableNum(CustInvoiceJour)
            && _custVendInvoiceJour.TableId != tableNum(VendInvoiceJour)
            && _custVendInvoiceJour.TableId != tableNum(ProjInvoiceJour))
        {
            return false;
        }
        
        if (_custVendInvoiceJour.LanguageId != CompanyInfo::languageId())
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguage_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method sets a new language ID on the invoice header.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// A table buffer containing the invoice header.
    /// </param>
    /// <param name="_languageId">
    /// A new language ID of the invoice.
    /// </param>
    public static void setLanguage_SA(CustVendInvoiceJour _custVendInvoiceJour, LanguageId _languageId)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00008, funcName());

        ttsBegin;
        
        _custVendInvoiceJour.reread();
        _custVendInvoiceJour.selectForUpdate(true);
        _custVendInvoiceJour.LanguageId = _languageId;
        _custVendInvoiceJour.doUpdate();
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToPrintInCompanyLanguage_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method checks if the invoice needs to be printed in the company language as well, aside from printing in the invoice language.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// A table buffer containing the invoice header.
    /// </param>
    /// <returns>
    /// A <c>Boolean</c> value indicating if the invoice needs to be printed in the company language as well, aside from printing in the invoice language.
    /// </returns>
    public static boolean needToPrintInCompanyLanguage_AE(CustVendInvoiceJour _custVendInvoiceJour)
    {
        boolean ret;
        container conTable= [tableNum(CustInvoiceJour), tableNum(VendInvoiceJour), tableNum(ProjInvoiceJour)];
        LanguageId companyLanguageId = CompanyInfo::languageId();
    
        if (SalesInvoiceToPrintInCompanyLanguageFlight_AE::instance().isEnabled())
        {
            if ((_custVendInvoiceJour.LanguageId == 'AR' || CompanyInfo::languageId() == 'AR')
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE])
            && companyLanguageId
            && _custVendInvoiceJour.LanguageId
            && conFind(conTable, _custVendInvoiceJour.TableId)
            && _custVendInvoiceJour.LanguageId != CompanyInfo::languageId())
            {
                ret = true;
            }
        }
        else
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE])
            && companyLanguageId
            && _custVendInvoiceJour.LanguageId
            && conFind(conTable, _custVendInvoiceJour.TableId)
        && _custVendInvoiceJour.LanguageId != CompanyInfo::languageId())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLanguage_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method sets a new language ID on the invoice header.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// A table buffer containing the invoice header.
    /// </param>
    /// <param name="_languageId">
    /// A new language ID of the invoice.
    /// </param>
    public static void setLanguage_AE(CustVendInvoiceJour _custVendInvoiceJour, LanguageId _languageId)
    {
        ttsBegin;

        _custVendInvoiceJour.reread();
        _custVendInvoiceJour.selectForUpdate(true);
        _custVendInvoiceJour.LanguageId = _languageId;
        _custVendInvoiceJour.doUpdate();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCorrectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns invoice query for correction.
    /// </summary>
    /// <param name = "_module">
    /// Enum value thats defines invoice's module.
    /// </param>
    /// <param name = "_custVendAccount">
    /// Value of invoice account.
    /// </param>
    /// <param name = "_onlyEmptyPurchId">
    /// Value restricts the query to use only invoices with empty purch identifier.
    /// </param>
    /// <returns>Invoice query for correction lookup.</returns>
    public static Query getInvoiceCorrectionQuery(ModuleCustVend _module,
        CustVendAC _custVendAccount,
        boolean _nonPO)
    {
        Query query = new Query();

        TableId tableId = _module == ModuleCustVend::Cust ? tableNum(CustInvoiceJour): tableNum(VendInvoiceJour);

        FieldId fieldIdAccount = _module == ModuleCustVend::Cust ? fieldNum(CustInvoiceJour, InvoiceAccount): fieldNum(VendInvoiceJour, InvoiceAccount);

        QueryBuildDataSource qbds = query.addDataSource(tableId);
        QueryBuildRange qbrAccount = qbds.addRange(fieldIdAccount);

        qbrAccount.value(_custVendAccount);

        if (_nonPO)
        {
            findOrCreateRange_W(qbds, fieldNum(VendInvoiceJour, PurchId), SysQuery::valueEmptyString());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectionInvoiceErrorText</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns correction invoice information text about validation error.
    /// </summary>
    /// <param name = "_invoiceId">Correction invoice number.</param>
    /// <param name = "_invoiceDate">Correction invoice date.</param>
    /// <returns>Return correction invoice information text about validation error.</returns>
    internal static str getCorrectionInvoiceErrorText(CorrectedInvoiceId_RU _invoiceId,
        CorrectedInvoiceDate_RU _invoiceDate)
    {
        return strFmt("@SYS120870",
            strFmt("@GEE31460", "@SYS14204"),
            strFmt("@GEE7465", _invoiceId, _invoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceDocumentHasDestination</Name>
				<Source><![CDATA[
    public static boolean isInvoiceDocumentHasDestination(TableId tableId, RecId recId)
    {
        PrintMgmtReportFormat printMgmtReportFormat;
        PrintMgmtDocumentType printDocumentType;

        switch(tableId)
        {
            case tableNum(CustInvoiceTable):
                CustInvoiceTable custInvoiceTable;
                CustInvoiceJour custInvoiceJour;
                custInvoiceJour = CustInvoiceJour::findRecId(recId);
                select custInvoiceTable
                    where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                            custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                            custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;

                printDocumentType = (!custInvoiceJour.SalesId) ? PrintMgmtDocumentType::SalesFreeTextInvoice
                                            : PrintMgmtDocumentType::SalesOrderInvoice;

                printMgmtReportFormat = PrintMgmtReportFormat::findByHierarchy(
                                            printDocumentType,
                                            PrintMgmtHierarchyType::Sales,
                                            PrintMgmtNodeType::CustInvoiceTable,
                                            custInvoiceTable);

                break;
            case tableNum(ProjInvoiceTable):
                ProjInvoiceTable projInvoiceTable;
                ProjInvoiceJour projInvoiceJour;
                projInvoiceJour = ProjInvoiceJour::findRecId(recId);
                select projInvoiceTable
                    where projInvoiceTable.ProjInvoiceProjId == projInvoiceJour.ProjInvoiceId &&
                            projInvoiceTable.NumberSequenceGroupId == projInvoiceJour.NumberSequenceGroupId;

                printMgmtReportFormat = PrintMgmtReportFormat::findByHierarchy(
                                            PrintMgmtDocumentType::SIProjInvoice,
                                            PrintMgmtHierarchyType::Project,
                                            PrintMgmtNodeType::Project,
                                            projInvoiceTable);
                break;
            default:
                return false;
        }

        
        ERTextFormatTable textFormat;
        ERFormatDestinationTable formatDestination;
        ERFormatFileDestinationTable formatFileDestination;
                
        if (printMgmtReportFormat)
        {
            select textFormat
                    where textFormat.Name == printMgmtReportFormat.Description
                    join formatDestination
                        where formatDestination.Format == textFormat.RecId
                    join formatFileDestination
                        where formatFileDestination.FormatDestination == formatDestination.RecId;
        }

        boolean isInvoiceDocumentHasDestination = formatFileDestination != null;

        isInvoiceDocumentHasDestination = isInvoiceDocumentHasDestination && CustVendInvoiceJour::isDestinationActionSend(formatFileDestination);

        return isInvoiceDocumentHasDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDestinationActionSend</Name>
				<Source><![CDATA[
    private static boolean isDestinationActionSend(ERFormatFileDestinationTable _formatFileDestination)
    {
        boolean isDestinationActionSend;
        if (_formatFileDestination.ExecuteActions)
        {
            List actions = strSplit(_formatFileDestination.ExecuteActions, ',');
            if (!actions.empty())
            {
                var actionsIterator = actions.getEnumerator();
                while(actionsIterator.moveNext())
                {
                    if (any2Enum(actionsIterator.current()) == ERDestinationAction::Send)
                    {
                        isDestinationActionSend = true;
                        break;
                    }
                }
            }
        }

        return isDestinationActionSend;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328629</DeveloperDocumentation>
	<Label>@SYS15721</Label>
	<TitleField1>DocumentNum</TitleField1>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>AttorneyDate_RU</Name>
			<ExtendedDataType>AttorneyDate_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AttorneyId_RU</Name>
			<ExtendedDataType>AttorneyId_RU</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AttorneyIssuedName_RU</Name>
			<ExtendedDataType>AttorneyIssuedName_RU</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CashDisc</Name>
			<ExtendedDataType>CashDiscAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CashDiscBaseDate</Name>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CashDiscCode</Name>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CashDiscDate</Name>
			<ExtendedDataType>DiscDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ConsigneeAccount_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ConsignorAccount_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ConsInvoice_JP</Name>
			<ExtendedDataType>CustVendConsRefRecId_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Correct_RU</Name>
			<ExtendedDataType>Correct_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CorrectedInvoiceDate_RU</Name>
			<ExtendedDataType>CorrectedInvoiceDate_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CorrectedInvoiceId_RU</Name>
			<ExtendedDataType>CorrectedInvoiceId_RU</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DeliveryDate_ES</Name>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS16056</Label>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryName_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>Name</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DeliveryPostalAddress_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DocumentNum</Name>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DueDate</Name>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>EndDisc_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchRateSecondary</Name>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>FacturedFully_RU</Name>
			<ExtendedDataType>FacturedFully_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>FactureId</Name>
			<ExtendedDataType>FactureId_RU</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>FactureModule_RU</Name>
			<EnumType>FactureModule_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>FixedDueDate</Name>
			<ExtendedDataType>FixedDueDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>GroupId</Name>
			<ExtendedDataType>CustVendGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InclTax</Name>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventOwnerId_RU</Name>
			<ExtendedDataType>InventOwnerId_RU</ExtendedDataType>
			<StringSize>40</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InventProfileType_RU</Name>
			<EnumType>InventProfileType_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceAccount</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS25420</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InvoiceAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79829</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InvoiceAmountMST_JP</Name>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS71013</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InvoiceAmountMST_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS71013</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceId</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYS4081970</Label>
			<StringSize>50</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceNum</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYS129064</Label>
			<StringSize>50</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InvoiceRegister_LT</Name>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtDocRegister</ExtendedDataType>
			<Label>@GLS113460</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InvoiceStatus_LT</Name>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<EnumType>LtDocStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LanguageId</Name>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<StringSize>7</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LedgerVoucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MCRPaymOrderID</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@MCR30675</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>NonRealRevenue_RU</Name>
			<ExtendedDataType>NonRealRevenue_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Num</Name>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>NumberSequenceCode_LT</Name>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<Label>@SYS68453</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>NumberSequenceGroupId</Name>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OffSessionId_RU</Name>
			<ExtendedDataType>OffSessionId_RU</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>OneTimeAccount</Name>
			<Label>@SYS87041</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderAccount</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS22016</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymDayId</Name>
			<ExtendedDataType>PaymDayId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Payment</Name>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymentSched</Name>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymId</Name>
			<ExtendedDataType>PaymId</ExtendedDataType>
			<StringSize>200</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PostingProfile</Name>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Prepayment</Name>
			<ExtendedDataType>CustVendPrepayment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>PrintCopies_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PrintCopiesCopies</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>PrintOriginals_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PrintCopiesOriginals</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PrintStandardCurrency_RU</Name>
			<ExtendedDataType>PrintInMST_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Proforma</Name>
			<ExtendedDataType>CustVendProforma</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchInternalInvoiceId_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PurchInternalInvoiceId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RoundOff_W</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SalesInvoicePostingType_RU</Name>
			<EnumType>SalesInvoicePostingType_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SalesOrderbalance</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceDocumentHeader_RU</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SumTax</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Triangulation</Name>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>UnitedVATInvoice</Name>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Updated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SYS439</Label>
			<SaveContents>No</SaveContents>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VATNum</Name>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>VATOnPayment_RU</Name>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VendPaymentGroup</Name>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>WhoIsAuthor_LT</Name>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<EnumType>LtDocOriginator</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>EndDisc</Name>
			<ExtendedDataType>SalesEndDiscAmount</ExtendedDataType>
			<HelpText>@SYS12931</HelpText>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SentElectronically</Name>
			<Label>@SYS4004070</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>TaxId</Name>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PartyTaxId</Name>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>VendorVATDate</Name>
			<ExtendedDataType>VendorVATDate_W</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>