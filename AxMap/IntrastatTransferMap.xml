<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class IntrastatTransferMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>itemMarkup</Name>
				<Source><![CDATA[
    public IntrastatMarkupAmount itemMarkup(AmountMST _amountMST)
    {
        return CurrencyExchangeHelper::amount(_amountMST * this.IntrastatTransferMap::inventTable().StatisticsFactor / 100, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNetWeightKgByUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts NetWeightByUnit from the specified unit of measure to intrastat unit of measure
    /// </summary>
    /// <returns>
    /// NetWeightByUnit in Kilograms
    /// </returns>
    public Weight itemNetWeightKgByUnit()
    {
        return IntrastatUnitUtil::calcWeightKg(this.IntrastatTransferMap::inventTable().NetWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemWeight</Name>
				<Source><![CDATA[
    public Weight itemWeight(Qty _qty)
    {
        return IntrastatUnitUtil::calcWeightKg(this.IntrastatTransferMap::inventTable().NetWeight  * _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of in the specified unit of measure to inventory quantity
    /// or to an additional unit provided by the <c>AdditionalUnits</c> field of the <c>EcoRecCategoryIntrastat</c> table.
    /// </summary>
    /// <param name="_qty">
    /// The quantity to calculate.
    /// </param>
    /// <param name="_unit">
    /// The unit of measure for the input quantity; optional. The default value '' stands for inventory unit.
    /// </param>
    /// <param name="_outputInAdditionalUnit">
    /// A Boolean value that determines whether to output the quantity in an additional unit
    /// provided by the <c>AdditionalQtyUnit</c> field of the <c>IntrastatItemCode</c> table.
    /// </param>
    /// <returns>
    /// Quantity
    /// </returns>
    public Qty qty(Qty _qty,
                   UnitOfMeasureSymbol _unit = '',
                   boolean _outputInAdditionalUnit = false)
    {
        Qty qty;

        if (_outputInAdditionalUnit)
        {
            qty = IntrastatUnitUtil::calculateAdditionalUnitQuantity(this.ItemId,
                                                                     _qty, 
                                                                     this.IntrastatCommodity,
                                                                     InventTransOrigin::findByInventTransId(this.InventTransId).ItemInventDimId, 
                                                                     _unit);
        }
        else
        {
            qty = IntrastatUnitUtil::calculateItemUnitQuantity(this.ItemId,
                                                               InventTransOrigin::findByInventTransId(this.InventTransId).ItemInventDimId,
                                                               _qty,
                                                               _unit);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weightKg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of inventory weight from the specified unit of measure to intrastat unit of measure
    /// </summary>
    /// <returns>
    /// weight in Kilograms
    /// </returns>
    public Weight weightKg()
    {
        return IntrastatUnitUtil::calcWeightKg(this.Weight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventTable</c> record that is related to the current item.
    /// </summary>
    /// <param name = "_itemId">The item id; optional.</param>
    /// <param name="_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventTable</c> record; otherwise, an empty buffer.</returns>
    public InventTable inventTable(
        ItemId  _itemId = this.ItemId,
        boolean _forUpdate = false)
    {
        InventTable inventTable;

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId, _forUpdate);
        }

        return inventTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS323835</DeveloperDocumentation>
	<Label>@SYS313969</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceId</Name>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<HelpText>@SYS4726</HelpText>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>IntrastatCommodity</Name>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<HelpText>@SYS17914</HelpText>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>NGPCodesTable_FR</Name>
			<ExtendedDataType>NGPCodesTableFRId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrigCountryRegionId</Name>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<Label>@SYS27196</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrigState</Name>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<Label>@SYS73785</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Port</Name>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>StatProcId</Name>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TransactionCode</Name>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Transport</Name>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Weight</Name>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IntrastatTransferMap</Name>
			<HelpText>@GLS107670</HelpText>
			<Label>@SYS23992</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>IntraUnit</Name>
			<ExtendedDataType>IntrastatConvert</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IntrastatExclude</Name>
			<HelpText>@GLS107670</HelpText>
			<Label>@SYS23992</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ItemType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>ItemType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MarkupPct</Name>
			<ExtendedDataType>IntrastatMarkupPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>NetWeightByUnit</Name>
			<ExtendedDataType>Weight</ExtendedDataType>
			<HelpText>@SYS17908</HelpText>
			<Label>@SYS17907</Label>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>