<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscResultFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscResultFields extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canLineAmountBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>runpriceDiscPolicyDialog</c> method of the <c>PriceDiscResultFields</c> table map.
    /// </summary>
    /// <returns>
    ///    The <c>runpriceDiscPolicyDialog</c> method of the <c>PriceDiscResultFields</c> table map.
    /// </returns>
    public boolean canLineAmountBeUpdated()
    {
        boolean ret = PriceDiscPolicyCheckPolicy::newFromParm(this).mustUpdatePolicyField(PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, LineAmount)));

        if (!ret)
        {
            ret = PriceDiscPolicyRule::createInstance(this).launchPolicyDialogForSinglePolicyField(PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, LineAmount)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLineAmountBeUpdatedWithNonInteractiveSession</Name>
				<Source><![CDATA[
    public boolean canLineAmountBeUpdatedWithNonInteractiveSession()
    {
        boolean ret = PriceDiscPolicyCheckPolicy::newFromParm(this).mustUpdatePolicyField(PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, LineAmount)));

        if (!ret)
        {
            ret = PriceDiscPolicyRule::createInstance(this).forceUpdateLineAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets price discount policy for the calling record.
    /// </summary>
    /// <param name="_module">
    /// An outcome the ModuleSalesPurch enumeration specifying the module in question.
    /// </param>
    /// <param name="_policySource">
    /// An outcome of the PriceDiscSystemSource enumeration specifying the origin of the policy.
    /// </param>
    /// <param name="_fieldId">
    /// The field id in question.
    /// </param>
    public void createPriceDiscChangePolicy(
        ModuleSalesPurch      _module,
        PriceDiscSystemSource _policySource,
        RefFieldId            _fieldId)
    {
        if (this.PriceDiscResultFields::validatePolicyCreation(_fieldId))
        {
            if (_policySource != PriceDiscSystemSource::ManualEntry && _policySource != PriceDiscSystemSource::Agreement)
            {
                switch (this.TableId)
                {
                    case tableNum(SalesLine):
                    case tableNum(PurchLine):
                    case tableNum(SalesQuotationLine):
                        _fieldId = this.Price ? _fieldId : PriceDiscResultFields::tableFieldMapping().policyField2TableField(this.TableId, PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, LineAmount)));
                        break;

                    default : break;
                }
            }

            PriceDiscPolicyMakePolicy::makePolicy(this, _policySource, _module, _fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Maps the header or line relation between the tables in the table map.
    /// </summary>
    /// <returns>
    ///    The buffer that is related to the specified table ID.
    /// </returns>
    public RefTableId headerToLineMapping()
    {
        return this.lineMapping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergerPriceDiscPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Mergers system and manually created price discount change policies by removing redundant field id's from the system policy.
    /// </summary>
    /// <param name="_module">
    ///     An outcome of the PriceDiscSystemSource enumeration specifying the source of the policy.
    /// </param>
    public void mergerPriceDiscPolicies(ModuleSalesPurch _module)
    {
        container   manPolicyFieldIds;
        int         i;
        RefFieldId  fieldId;

        if (this.ManualEntryChangePolicy == this.SystemEntryChangePolicy)
        {
            this.SystemEntryChangePolicy = 0;
            this.SystemEntrySource       = PriceDiscSystemSource::None;
        }
        else
        {
            manPolicyFieldIds            = PriceDiscPolicyFields::retrieveTablePolicyFields(this.TableId, this.ManualEntryChangePolicy);
            this.ManualEntryChangePolicy = 0;

            for (i=1; i<=conLen(manPolicyFieldIds); i++)
            {
                fieldId = conPeek(manPolicyFieldIds, i);
                this.PriceDiscResultFields::createPriceDiscChangePolicy(_module, PriceDiscSystemSource::ManualEntry, fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiLineDiscPolicyExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a multi line discount related price discont change policy exists for the record in scope.
    /// </summary>
    /// <returns>
    /// true if a multi line discount related price discont change policy exists; otherwise, false.
    /// </returns>
    public boolean multiLineDiscPolicyExist()
    {
        boolean ret;

        if (this.ManualEntryChangePolicy
            || this.SystemEntryChangePolicy)
        {
            ret = PriceDiscPolicyFields::isPolicyFieldInPolicy(this.ManualEntryChangePolicy, PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, MultiLineDiscCode)))
                || PriceDiscPolicyFields::isPolicyFieldInPolicy(this.SystemEntryChangePolicy, PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, MultiLineDiscCode)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscResultFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current instance of the table map <c>PriceDiscResultFields</c>.
    /// </summary>
    /// <returns>
    /// An instance of the table map <c>PriceDiscResultFields</c>.
    /// </returns>
    [SysObsolete("Method is not needed anymore.", false, 31\03\2018), Hookable(false)]
    public PriceDiscResultFields parmPriceDiscResultFields()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes a single field from system generated and/or manual entry Price discount change policies.
    /// </summary>
    /// <param name="_fieldId">
    ///     The field id in question.
    /// </param>
    /// <param name="removeManualEntry">
    ///     A boolean specifying if the passed field id should be removed from a manual entry Price discount change policy, optional.
    /// </param>
    /// <param name="removeSystemEntry">
    ///     A boolean specifying if the passed field id should be removed from a system generated Price discount change policy, optional.
    /// </param>
    [SysObsolete("Use removePolicyFieldFromPolicy method instead.", false, 31\03\2018), Hookable(false)]
    public void removeFieldFromPolicy(
        FieldId _fieldId,
        boolean removeManualEntry = true,
        boolean removeSystemEntry = true)
    {
        this.PriceDiscResultFields::removePolicyFieldFromPolicy(PriceDiscPolicyField::newPriceDiscResultsField(_fieldId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePolicyFieldFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a single policy field from system generated and/or manual entry Price discount change policies.
    /// </summary>
    /// <param name="_policyField">
    /// A <c>PriceDiscPolicyField</c> object to remove.
    /// </param>
    [Hookable(false)]
    public void removePolicyFieldFromPolicy(PriceDiscPolicyField _policyField)
    {
        if (PriceDiscPolicyFields::isPolicyFieldInPolicy(this.ManualEntryChangePolicy, _policyField))
        {
            this.ManualEntryChangePolicy = this.PriceDiscResultFields::findCreateNewPolicy(this.ManualEntryChangePolicy, _policyField);
        }

        if (PriceDiscPolicyFields::isPolicyFieldInPolicy(this.SystemEntryChangePolicy, _policyField))
        {
            this.SystemEntryChangePolicy = this.PriceDiscResultFields::findCreateNewPolicy(this.SystemEntryChangePolicy, _policyField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCreateNewPolicy</Name>
				<Source><![CDATA[
    private PriceDiscChangePolicyRefRecId findCreateNewPolicy(PriceDiscChangePolicyRefRecId _changePolicy, PriceDiscPolicyField _policyField)
    {
        PriceDiscPolicyFieldList policyFieldList = PriceDiscPolicyFields::retrievePolicyFieldList(_changePolicy);

        policyFieldList.removePolicyField(_policyField);

        return PriceDiscPolicyFindOrCreate::newFromPriceDiscResultFields(this).findOrCreateChangePolicyFromPolicyFieldList(policyFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMultiLineDiscCodeFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the MultiLineDiscCode field from both system generated and manual entry Price discount change policy.
    /// </summary>
    public void removeMultiLineDiscCodeFromPolicy()
    {
        PriceDiscResultFields localResultFields = SysDictTable::newTableId(this.TableId).makeRecord();

        ttsbegin;
        select forupdate firstonly localResultFields where localResultFields.RecId == this.RecId;
        localResultFields.PriceDiscResultFields::removePolicyFieldFromPolicy(PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, MultiLineDiscCode)));
        localResultFields.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>deleteLinePolicies</c> method on the mapped tables.
    /// </summary>
    public void resetLinePolicies()
    {
        this.resetLinePolicies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPriceDiscPolicyDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches the price discount user dialog.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field in question.
    /// </param>
    /// <param name="_showLineItem">
    /// An optional boolean controlling if item and line number should be displayed in the dialog. Default value is false.
    /// </param>
    /// <param name="_skipTriggerFieldCheck">
    /// A boolean specifying whether changes to price discout trigger fields should be verified; optional.
    /// </param>
    /// <returns>
    /// true if the user press OK or no policy exists; otherwise, false.
    /// </returns>   
    public boolean runPriceDiscPolicyDialog(
        RefFieldId _fieldId            = 0,
        boolean _showLineItem          = false,
        boolean _skipTriggerFieldCheck = false)
    {
        boolean                 ret = true;

        if (PriceDiscResultFields::isPriceDiscPolicyEnabled(this.TableId))
        {
            if (this.ManualEntryChangePolicy
                || this.SystemEntryChangePolicy)
            {
                //External clients needs special handling as the runbase dialog only works for the rich client.
                if (clientKind() == ClientType::COMObject)
                {
                    if (this.ManualEntryChangePolicy
                            || this.SystemEntryChangePolicy)
                    {
                        warning("@SYS138345");
                        if (this.ManualEntryChangePolicy)
                        {
                            this.ManualEntryChangePolicy = 0;
                        }

                        if (this.SystemEntryChangePolicy)
                        {
                            this.SystemEntryChangePolicy = 0;
                        }
                    }
                }
                else
                    if (appl.ttsLevel() == 0
                        && (_skipTriggerFieldCheck
                            || PriceDiscPolicyRule::createInstance(this).isPriceCalcTriggerFieldChanged()))
                {
                    PriceDiscPolicyDialog priceDiscPolicyDialog = PriceDiscPolicyDialog::construct();
                    priceDiscPolicyDialog.initializeSinglePolicyField(_fieldId ? PriceDiscPolicyField::newPriceDiscResultsField(_fieldId) : null);
                    priceDiscPolicyDialog.parmPriceDiscResultFields(this);
                    priceDiscPolicyDialog.setShowLineItem(_showLineItem);
                    
                    ret = priceDiscPolicyDialog.runPolicyDialog();
                    if (ret)
                    {
                        PriceDiscResultFields localPriceDiscResultFields = priceDiscPolicyDialog.parmPriceDiscResultFields();
                        this.SystemEntryChangePolicy = localPriceDiscResultFields.SystemEntryChangePolicy;
                        this.SystemEntrySource       = localPriceDiscResultFields.SystemEntrySource;
                        this.ManualEntryChangePolicy = localPriceDiscResultFields.ManualEntryChangePolicy;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the price discount policy dialog box and updates the policies for one or more lines that
    ///    are related to a header record.
    /// </summary>
    /// <returns>
    ///    true if the price discount policy dialog box was accepted by the user; otherwise, false.
    /// </returns>
    public boolean updateLinePolicies()
    {
        RefTableId                  lineTableId = this.lineMapping();
        PriceDiscChangePoliciesTmp  priceDiscChangePoliciesTmp;
        PriceDiscResultFields       lineBuffer = SysDictTable::newTableId(lineTableId).makeRecord();
        Query                       q = new Query();
        QueryBuildDataSource        qbds;
        QueryBuildRange             qbr;
        QueryRun                    qr;
        boolean                     updatePolicies;

        qbds = q.addDataSource(lineTableId);
        qbr  = qbds.addRange(PriceDiscResultFields::tableFieldMapping().policyField2TableField(lineTableId, PriceDiscPolicyField::newPriceDiscResultsField(fieldNum(PriceDiscResultFields, SalesPurchId))));
        qbr.value(SysQuery::value(this.SalesPurchId));

        delete_from priceDiscChangePoliciesTmp;
        qr = new QueryRun(q);
        while (qr.next())
        {
            lineBuffer = qr.get(lineTableId);

            if (!PriceDiscPolicyRule::createInstance(lineBuffer).launchPolicyDialogForAllPolicyFields(true, true))
            {
                return false;
            }

            if (lineBuffer.ManualEntryChangePolicy      != lineBuffer.orig().ManualEntryChangePolicy
                || lineBuffer.SystemEntryChangePolicy   != lineBuffer.orig().SystemEntryChangePolicy)
            {
                priceDiscChangePoliciesTmp.RefRecId                = lineBuffer.RecId;
                priceDiscChangePoliciesTmp.RefRecVersion           = lineBuffer.RecVersion;
                priceDiscChangePoliciesTmp.ManualEntryChangepolicy = lineBuffer.ManualEntryChangePolicy;
                priceDiscChangePoliciesTmp.SystemEntryChangePolicy = lineBuffer.SystemEntryChangePolicy;
                priceDiscChangePoliciesTmp.SystemEntrySource       = lineBuffer.SystemEntrySource;
                priceDiscChangePoliciesTmp.insert();
                updatePolicies = true;
            }
        }

        if (updatePolicies)
        {
            select firstonly lineBuffer
            join priceDiscChangePoliciesTmp
                where priceDiscChangePoliciesTmp.RefRecId       == lineBuffer.RecId
                   && priceDiscChangePoliciesTmp.RefRecVersion  != lineBuffer.RecVersion;

            if (lineBuffer)
            {
                throw error("@SYS309575");
            }
            else
            {
                ttsbegin;
                this.priceDiscChangePolicyUpdateLine(priceDiscChangePoliciesTmp);
                ttscommit;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePolicyCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a price discount policy can be created.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id in question.
    /// </param>
    /// <returns>
    /// true if the price discount policy can be created, otherwise; false.
    /// </returns>
    public boolean validatePolicyCreation(RefFieldId _fieldId)
    {
        boolean ret = true;
        PriceDiscPolicyField policyField = PriceDiscResultFields::tableFieldMapping().tableField2PolicyField(this.TableId, _fieldId);

        ret = PriceDiscPolicyRule::createInstance(this).canCreatePolicy(policyField);

        if (this.ManualEntryChangePolicy)
        {
            ret = ret && !PriceDiscPolicyFields::isPolicyFieldInPolicy(this.ManualEntryChangePolicy, policyField);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDiscPolicyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether price discount change policy is enabled for a table.
    /// </summary>
    /// <param name="_tableId">
    ///     A <c>RefTableId</c> type holding the id of the table to check.
    /// </param>
    /// <returns>
    ///     true if price discount change policy is enabled for the table; otherwise, false.
    /// </returns>
    public static boolean isPriceDiscPolicyEnabled(RefTableId _tableId)
    {
        return SysDictTable::isTableMapped(tablenum(PriceDiscResultFields), _tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptPriceDiscPolicyUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a field of the price discount policy dialog box that is used in header-to-line update
    ///    scenarios.
    /// </summary>
    /// <param name="_dialogGroup">
    ///    A <c>DialogGroup</c> object.
    /// </param>
    /// <param name="_dialog">
    ///    A <c>Dialog</c> object.
    /// </param>
    /// <param name="_updatePriceDiscMode">
    ///    A <c>PriceDiscUpdatePriceDisc</c> enumeration value.
    /// </param>
    /// <param name="_refreshable">
    ///    A Boolean value that indicates whether the field can be refreshed; optional.
    /// </param>
    /// <returns>
    ///    An initialized and <c>DialogField</c> object.
    /// </returns>
    public static DialogField promptPriceDiscPolicyUpdate(
        DialogGroup              _dialogGroup,
        Dialog                   _dialog,
        PriceDiscUpdatePriceDisc _updatePriceDiscMode,
        boolean                  _refreshable = true)
    {
        DialogField updatePriceDiscDialogField;

        if (_refreshable)
        {
            _dialog.addInfoImage();
            _dialog.addText("@SYS139118");
        }

        _dialogGroup = _dialog.addGroup("@SYS139023", _dialogGroup);
        updatePriceDiscDialogField = _dialog.addField(enumStr(PriceDiscUpdatePriceDisc));
        updatePriceDiscDialogField.value(_updatePriceDiscMode);

        return updatePriceDiscDialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or retrieves an instance of the <c>PriceDiscPolicyFieldMappingCache</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PriceDiscPolicyFieldMappingCache</c> class.
    /// </returns>
    static PriceDiscPolicyFieldMappingCache tableFieldMapping()
    {
        return PriceDiscPolicyFieldMappingCache::newInitialized();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PriceDisc</ConfigurationKey>
	<DeveloperDocumentation>@SYS345198</DeveloperDocumentation>
	<Label>@SYS132999</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DiscPercent</Name>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LinePercent</Name>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ManualEntryChangePolicy</Name>
			<ExtendedDataType>PriceDiscPolicyManual</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>PriceMarkup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MultiLineDiscCode</Name>
			<ExtendedDataType>CustMultiLineDiscCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MultiLnDisc</Name>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MultiLnPercent</Name>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>PriceCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>RecieptDeliveryDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SalesPurchId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SalesPurchQty</Name>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SalesPurchUnit</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ShippingDateRequested</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SystemEntryChangePolicy</Name>
			<ExtendedDataType>PriceDiscPolicySystem</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SystemEntrySource</Name>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ShippingDateConfirmed</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWQty</Name>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>