<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdProductionJournalEntryStagingMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdProductionJournalEntryStagingMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalType</Name>
				<Source><![CDATA[
    private  ProdJournalType getJournalType(TableId _tableId)
    {
        ProdJournalType journalType;
        switch(_tableId)
        {
            case tableNum(ProdProductionPickingListJournalEntryStaging):
                journalType = ProdJournalType::Picklist;
                break;
            case tableNum(ProdJobCardProductionJournalEntryStaging):
                journalType = ProdJournalType::JobCard;
                break;
            case tableNum(ProdReportAsFinishedProductionJournalEntryStaging):
                journalType = ProdJournalType::ReportFinished;
                break;
            case tableNum(ProdRouteCardProductionJournalEntryStaging):
                journalType = ProdJournalType::RouteCard;
                break;            
            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic for optimizing staging data before copy to target.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    /// <param name="_stagingTable">
    /// The table ID of the journal staging table that should be processed.
    /// </param>
    /// <param name="_approxNumberOfLines">
    /// Approx number of lines included in the same production journal; optional.
    /// </param>
    /// <remarks>
    /// The staging data will be updated with journal number and line number for the lines imported that only includes journal name id.
    /// </remarks>
    public static void postGetStagingData(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        TableId                     _stagingTable,
        int64                       _approxNumberOfLines = 1000)
    {
        DictTable 				                dictTable = new DictTable(_stagingTable);
        ProdProductionJournalEntryStagingMap 	journalStaging = dictTable.makeRecord();
        ProdJournalType 			            journalType;

        journalType = journalStaging.ProdProductionJournalEntryStagingMap::getJournalType(_stagingTable);
        ttsbegin;
        while select JournalNameId, ProductionOrderNumber, count(RecId) from journalStaging
            group by JournalNameId, ProductionOrderNumber
            where journalStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && journalStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && journalStaging.JournalNumber == ''
                && journalStaging.ProductionOrderNumber != ''
                && journalStaging.JournalNameId != ''
        {
            if (journalStaging.RecId > 0)
            {
                ProdProductionJournalEntryStagingMap minStagingRecord = dictTable.makeRecord();

                minStagingRecord.readPast(true);
                select firstonly RecId from minStagingRecord order by RecId
                    where minStagingRecord.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && minStagingRecord.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && minStagingRecord.JournalNameId == journalStaging.JournalNameId
                        && minStagingRecord.ProductionOrderNumber == journalStaging.ProductionOrderNumber
                        && minStagingRecord.JournalNumber == '';

                int64 minRecId = minStagingRecord.RecId;
                if (minRecId)
                {
                    ProdProductionJournalEntryStagingMap maxStagingRecord = dictTable.makeRecord();

                    maxStagingRecord.readPast(true);
                    select firstonly RecId from maxStagingRecord order by RecId desc
                        where maxStagingRecord.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                            && maxStagingRecord.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                            && maxStagingRecord.JournalNameId == journalStaging.JournalNameId
                            && maxStagingRecord.ProductionOrderNumber == journalStaging.ProductionOrderNumber
                            && maxStagingRecord.JournalNumber == '';

                    int64 maxRecId = maxStagingRecord.RecId;

                    int64 maxApproxNumberOfLines = max(1,_approxNumberOfLines);
                    int64 journals = (journalStaging.RecId div maxApproxNumberOfLines);
                    journals = journalStaging.RecId mod maxApproxNumberOfLines > 0 ? journals + 1 : journals;

                    if (journals > 0)
                    {
                        int64 recIdInclusiveRange = maxRecId - minRecId + 1;  // +1 because this is an inclusive range from min to max (i.e. difference of 5 means 6 records to process)
                        int64 recIdRangePerJournal = recIdInclusiveRange div journals - 1; // -1 because the range per journal is inclusive (i.e. range of 0 means 1 records to process)
                        int64 recIdRangeLeftOver = recIdInclusiveRange mod journals;

                        while (journals > 0)
                        {
                            maxRecId = journals == 1 ? minRecId + recIdRangePerJournal + recIdRangeLeftOver : minRecId + recIdRangePerJournal;                          
                            ProdJournalTable prodJournalTable = ProdProductionJournalEntryMap::createJournalHeader(journalStaging.JournalNameId, journalStaging.ProductionOrderNumber, journalType);
                            journalStaging.ProdProductionJournalEntryStagingMap::updateJournalWithJournalNumberAndLineNumber(_dmfDefinitionGroupExecution, prodJournalTable.JournalId, minRecId, maxRecId, journalType);
                            minRecId = maxRecId + 1;
                            journals--;
                        }
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic for updating journal headers.
    /// </summary>
    /// <param name="_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    /// <param name="_stagingTable">
    /// The table ID of the journal staging table that should be processed.
    /// </param>
    /// <remarks>
    /// The number of journal lines gets updated on the journal header.
    /// </remarks>
    public static void postTargetProcess(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        TableId                     _stagingTable)
    {
        #OCCRetryCount
        DictTable dictTable = new DictTable(_stagingTable);
        ProdProductionJournalEntryStagingMap journalStaging = dictTable.makeRecord();
        ProdJournalTable journalTable;
 
        // Update number of lines on journal headers
        while select JournalNumber from journalStaging
            group by JournalNumber
            where journalStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && journalStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
        {
            try
            {
                ttsbegin;
                journalTable = ProdJournalTable::find(journalStaging.JournalNumber, true);
                ProdJournalTable::initTotal(journalTable);
                journalTable.doUpdate();
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalWithJournalNumberAndLineNumber</Name>
				<Source><![CDATA[
    private void updateJournalWithJournalNumberAndLineNumber(DMFDefinitionGroupExecution    _dmfDefinitionGroupExecution,
                                                            ProdJournalId                   _journalId,
                                                            Refrecid                        _minRecId,
                                                            Refrecid                        _maxRecId,
                                                            ProdJournalType                 _journalType)
    {
        switch (_journalType)
        {
            case ProdJournalType::Picklist:
                ProdProductionPickingListJournalEntryEntity::updateJournalWithJournalNumberAndLineNumber(_dmfDefinitionGroupExecution, this.JournalNameId, _journalId, _minRecId, _maxRecId);
                break;
            case ProdJournalType::ReportFinished:
                ProdReportAsFinishedProductionJournalEntryEntity::updateJournalWithJournalNumberAndLineNumber(_dmfDefinitionGroupExecution, this.JournalNameId, _journalId, _minRecId, _maxRecId);
                break;
            case ProdJournalType::RouteCard:
                ProdRouteCardProductionJournalEntryEntity::updateJournalWithJournalNumberAndLineNumber(_dmfDefinitionGroupExecution, this.JournalNameId, _journalId, _minRecId, _maxRecId);
                break;
            case ProdJournalType::JobCard:
                ProdJobCardProductionJournalEntryEntity::updateJournalWithJournalNumberAndLineNumber(_dmfDefinitionGroupExecution, this.JournalNameId, _journalId, _minRecId, _maxRecId);
                break;
            default:
                throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNumber</Name>
			<ExtendedDataType>ProdJournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNameId</Name>
			<ExtendedDataType>ProdJournalNameId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductionOrderNumber</Name>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>