<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLedgerDimensionAccountSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanLedgerDimensionAccountSetBasedResolver extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set-based resolution of budget plan ledger dimension accounts.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <param name = "_budgetPlanLedgerDimensionAccountSetBasedResolver">A staging table which contains dimension record ids.</param>
    /// <param name = "_storeErrors">A boolean, if true will store all the error messages; optional.</param>
    /// <param name = "_errorTmp">A table which stores the detailed error message for unresolved dimensions; optional.</param>
    /// <returns>The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.</returns>
    public static DimensionDataEntitySFKCacheTmp resolve(
        DMFDefinitionGroupExecution                      _dmfDefinitionGroupExecution,
        BudgetPlanLedgerDimensionAccountSetBasedResolver _budgetPlanLedgerDimensionAccountSetBasedResolver,
        boolean                                          _storeErrors = false,
        DimensionDataEntitySFKErrorTmp                   _errorTmp = null)
    {
        DimensionDataEntitySFKCacheTmp  dimCacheTmp;
        DimensionDataEntitySFKCacheTmp  dimCacheTmpRef;
        DimensionDataEntitySFKCache     dimCache;
        const DimensionHierarchyType    HierarchyType = DimensionHierarchyType::DataEntityBudgetPlanningDimensionFormat;
        const ExtendedDataTypeName      DataType = identifierstr(LedgerDimensionBudgetPlanning);
        const NoYes                     Found = NoYes::Yes;

        dimCacheTmpRef.linkPhysicalTableInstance(dimCacheTmp);

        // Copy existing resolved references
        insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found, ResolvedReference)
            select AccountDisplayValue, HierarchyType, DataType, Found
                from _budgetPlanLedgerDimensionAccountSetBasedResolver
                group by AccountDisplayValue, AccountStructure
                where _budgetPlanLedgerDimensionAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _budgetPlanLedgerDimensionAccountSetBasedResolver.ExecutionId    == _dmfDefinitionGroupExecution.ExecutionId
                    && _budgetPlanLedgerDimensionAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            join ResolvedReference from dimCache
                group by ResolvedReference
                where dimCache.IntegrationString == _budgetPlanLedgerDimensionAccountSetBasedResolver.AccountDisplayValue
                    && dimCache.HierarchyType    == HierarchyType
                    && dimCache.ExtendedDataType == DataType
                    && dimCache.HierarchyName    == _budgetPlanLedgerDimensionAccountSetBasedResolver.AccountStructure;

        const DimensionCombinationBase  ZeroReference = 0;
        const NoYes                     NotFound = NoYes::No;
        DimensionHierarchy              dimensionHierarchy;

        // Insert placeholders for new combinations that need to be resolved
        insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found, ResolvedReference, HierarchyName)
            select AccountDisplayValue, HierarchyType, DataType, NotFound, ZeroReference, AccountStructure
                from _budgetPlanLedgerDimensionAccountSetBasedResolver
                group by AccountDisplayValue, AccountStructure
                where _budgetPlanLedgerDimensionAccountSetBasedResolver.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && _budgetPlanLedgerDimensionAccountSetBasedResolver.ExecutionId    == _dmfDefinitionGroupExecution.ExecutionId
                    && _budgetPlanLedgerDimensionAccountSetBasedResolver.TransferStatus == DMFTransferStatus::NotStarted
            notexists join dimCacheTmpRef
                group by ResolvedReference
                where dimCacheTmpRef.IntegrationString == _budgetPlanLedgerDimensionAccountSetBasedResolver.AccountDisplayValue
                    && dimCacheTmpRef.HierarchyType    == HierarchyType
                    && dimCacheTmpRef.ExtendedDataType == DataType
                    && dimCacheTmpRef.HierarchyName    == _budgetPlanLedgerDimensionAccountSetBasedResolver.AccountStructure;

        int initialLineCount;

        // For the values not found in cache, look them up individually.
        while select forupdate dimCacheTmp where dimCacheTmp.Found == NoYes::No
        {
            try
            {
                dimCacheTmp.ResolvedReference = BudgetPlanningAccountDimensionResolver::newResolver(
                                                    dimCacheTmp.IntegrationString,
                                                    dimCacheTmp.HierarchyName).resolve();
                dimCacheTmp.Found = NoYes::Yes;

                // Update the temp table with the newly resolved value.
                ttsbegin;
                dimCacheTmp.update();
                ttscommit;
            }
            catch
            {
                // Invalid accounts will raise an exception, but should
                // not cause the full import process to fail. Instead those
                // rows need to be marked as error, which is done in the caller.
                if (_storeErrors)
                {
                    _errorTmp.IntegrationString = dimCacheTmp.IntegrationString;
                    _errorTmp.HierarchyType     = dimCacheTmp.HierarchyType;
                    _errorTmp.ResolvedReference = dimCacheTmp.ResolvedReference;
                    _errorTmp.ExtendedDataType  = dimCacheTmp.ExtendedDataType;
                    _errorTmp.EnumValue         = dimCacheTmp.EnumValue;
                    _errorTmp.HierarchyName     = dimCacheTmp.HierarchyName;

                    for (int infoLogLine = initialLineCount + 1; infoLogLine <= Global::infologLine(); infoLogLine++)
                    {
                        _errorTmp.Error += infolog.text(infoLogLine);
                    }

                    _errorTmp.insert();
                    _errorTmp.clear();
                }
            }
        }

        return dimCacheTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<TableGroup>Staging</TableGroup>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransferStatus</Name>
			<EnumType>DMFTransferStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountStructure</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>