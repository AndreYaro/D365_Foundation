<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimFieldsMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimFieldsMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldIdForDimensionOnMappedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a mapped table for a given <c>InventDimension</c> class.
    /// </summary>
    /// <param name = "_dimensionClassName">The name of the <c>InventDimension</c> class.</param>
    /// <param name = "_mappedTableName">The name of the mapped table.</param>
    /// <returns>The field Id.</returns>
    static public FieldId fieldIdForDimensionOnMappedTable(ClassName _dimensionClassName, TableName _mappedTableName)
    {
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + _dimensionClassName + ';' + _mappedTableName);

        FieldId mappedFieldId = cache.lookup();
        if (mappedFieldId == InventDimFieldIdCache::NotCached)
        {
            FieldId fieldIdOnInventDim = InventDim::fieldIdForDimension(_dimensionClassName);
            mappedFieldId = InventDimFieldsMap::mappedFieldId(fieldIdOnInventDim, _mappedTableName);
            cache.insert(mappedFieldId);
        }
 
        return mappedFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a mapped table for a given field Id on <c>InventDim</c> table.
    /// </summary>
    /// <param name = "_fieldIdOnInventDim">The Id of the field on <c>InventDim</c> table.</param>
    /// <param name = "_mappedTableName">The name of the mapped table.</param>
    /// <returns>The field Id.</returns>
    static public FieldId mappedFieldId(FieldId _fieldIdOnInventDim, TableName _mappedTableName)
    {
        str fieldIdStrValue = int2str(_fieldIdOnInventDim);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + fieldIdStrValue + ';' + _mappedTableName);
        
        FieldId mappedFieldId = cache.lookup();

        if (mappedFieldId == InventDimFieldIdCache::NotCached)
        {
            FieldId fieldIdOnMap = SysDictField::findMappingFieldId(tableNum(InventDim), _fieldIdOnInventDim, tableNum(InventDimFieldsMap));
            mappedFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFieldsMap), fieldIdOnMap, tableName2id(_mappedTableName));

            if (!mappedFieldId)
            {
                mappedFieldId = InventDimFieldsMap::fieldIdBasedOnEDTOnTable(_mappedTableName, _fieldIdOnInventDim);
            }

            cache.insert(mappedFieldId);
        }

        return mappedFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdOnInventDimFromEDT</Name>
				<Source><![CDATA[
    static private FieldId fieldIdOnInventDimFromEDT(FieldId _fieldIdOnTable, TableName _mappedTableName)
    {
        Enumerator enum = InventDim::dimFieldListEnumerator();
        while (enum.moveNext())
        {
            InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(enum.current());
            if (inventDimension &&
                inventDimension.fieldIdInTable(_mappedTableName) == _fieldIdOnTable)
            {
                return inventDimension.parmInventDimFieldId();
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the InventDim field Id for a given field Id on a mapped table.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field on mapped table.</param>
    /// <param name = "_mappedTableName">The name of the mapped table.</param>
    /// <returns>The field Id on <c>InventDim</c>.</returns>
    static public FieldId mappedInventDimFieldId(FieldId _fieldIdOnTable, TableName _mappedTableName)
    {
        str fieldIdStrValue = int2str(_fieldIdOnTable);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + fieldIdStrValue + ';' + _mappedTableName);
        
        FieldId inventDimFieldId = cache.lookup();

        if (inventDimFieldId == InventDimFieldIdCache::NotCached)
        {
            FieldId fieldIdOnMap = SysDictField::findMappingFieldId(tableName2id(_mappedTableName), _fieldIdOnTable, tableNum(InventDimFieldsMap));
            inventDimFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFieldsMap), fieldIdOnMap, tableNum(InventDim));

            if (!inventDimFieldId)
            {
                inventDimFieldId = InventDimFieldsMap::fieldIdOnInventDimFromEDT(_fieldIdOnTable, _mappedTableName);
            }

            cache.insert(inventDimFieldId);
        }

        return inventDimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldMapped</Name>
				<Source><![CDATA[
    static private boolean isFieldMapped(FieldId _fieldIdOnMap, TableId _tableId)
    {
        str fieldIdStrValue = int2str(_fieldIdOnMap);
        str tableIdStrValue = int2str(_tableId);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + fieldIdStrValue + ';' + tableIdStrValue);

        FieldId mappedFieldId = cache.lookup();

        if (mappedFieldId == InventDimFieldIdCache::NotCached)
        {
            mappedFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFieldsMap), _fieldIdOnMap, _tableId);
            cache.insert(mappedFieldId);
        }
  
        return mappedFieldId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFieldBeCopied</Name>
				<Source><![CDATA[
    static private boolean canFieldBeCopied(FieldId _fieldIdOnMap, TableId _sourceTableId, TableId _targetTableId)
    {
        if (!InventDimFieldsMap::isFieldMapped(_fieldIdOnMap, _sourceTableId))
        {
            return false;
        }

        if (_sourceTableId != _targetTableId &&
            !InventDimFieldsMap::isFieldMapped(_fieldIdOnMap, _targetTableId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdBasedOnEDTOnTable</Name>
				<Source><![CDATA[
    static private FieldId fieldIdBasedOnEDTOnTable(TableName _tableName, FieldId _fieldIdOnInventDim)
    {
        InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(_fieldIdOnInventDim);
        if (inventDimension)
        {
            return inventDimension.fieldIdInTable(_tableName);
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFieldValueBasedOnEDTOnTable</Name>
				<Source><![CDATA[
    static private void copyFieldValueBasedOnEDTOnTable(
        Common _sourceAsCommon,
        Common _targetAsCommon,
        FieldId _fieldIdOnInventDim,
        FieldId _fieldIdOnMap)
    {
        FieldId fieldIdOnTargetTable = InventDimFieldsMap::fieldIdBasedOnEDTOnTable(tableId2Name(_targetAsCommon.TableId), _fieldIdOnInventDim);
        if (fieldIdOnTargetTable)
        {
            FieldId fieldIdOnSourcetTable = InventDimFieldsMap::fieldIdBasedOnEDTOnTable(tableId2Name(_sourceAsCommon.TableId), _fieldIdOnInventDim);

            if (fieldIdOnSourcetTable)
            {
                _targetAsCommon.(fieldIdOnTargetTable) = _sourceAsCommon.(fieldIdOnSourcetTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFieldValue</Name>
				<Source><![CDATA[
    static private void copyFieldValue(InventDimFieldsMap _source, InventDimFieldsMap _target, FieldId _fieldIdOnInventDim)
    {
        str fieldIdStrValue = int2str(_fieldIdOnInventDim);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + fieldIdStrValue);

        FieldId fieldIdOnMap = cache.lookup();
        if (fieldIdOnMap == InventDimFieldIdCache::NotCached)
        {
            fieldIdOnMap = SysDictField::findMappingFieldId(tableNum(InventDim), _fieldIdOnInventDim, tableNum(InventDimFieldsMap));
            cache.insert(fieldIdOnMap);
        }

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _source.checkInvalidFieldAccess(false);

        Debug::assert(fieldIdOnMap != 0); //All fields must be mapped on InventDim
 
        if (InventDimFieldsMap::canFieldBeCopied(fieldIdOnMap, _source.TableId, _target.TableId))
        {
            _target.(fieldIdOnMap) = _source.(fieldIdOnMap);
        }
        else
        {
            InventDimFieldsMap::copyFieldValueBasedOnEDTOnTable(_source, _target, _fieldIdOnInventDim, fieldIdOnMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllDimensionsFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this buffer with values from the specified buffer.
    /// </summary>
    /// <param name="_inventDimFieldsMap">
    ///    The buffer to initialize from.
    /// </param>
    public void initAllDimensionsFrom(InventDimFieldsMap _inventDimFieldsMap)
    {
        Enumerator enum = InventDim::dimEnabledFieldListEnumerator();

        while (enum.moveNext())
        {
            InventDimFieldsMap::copyFieldValue(_inventDimFieldsMap, this, enum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this buffer with product dimension values from the specified buffer.
    /// </summary>
    /// <param name="_inventDimFieldsMap">
    ///    The buffer to initialize from.
    /// </param>
    public void initProductDimensionsFrom(InventDimFieldsMap   _inventDimFieldsMap)
    {
        Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();

        while (enum.moveNext())
        {
            InventDimFieldsMap::copyFieldValue(_inventDimFieldsMap, this, enum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this buffer with storage dimension values from the specified buffer.
    /// </summary>
    /// <param name="_inventDimFieldsMap">
    ///    The buffer to initialize from.
    /// </param>
    public void initStorageDimensionsFrom(InventDimFieldsMap   _inventDimFieldsMap)
    {
        Enumerator enum = InventDim::dimStorageDimFieldList().getEnumerator();

        while (enum.moveNext())
        {
            InventDimFieldsMap::copyFieldValue(_inventDimFieldsMap, this, enum.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrackingDimensionsFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this buffer with tracking dimension values from the specified buffer.
    /// </summary>
    /// <param name="_inventDimFieldsMap">
    ///    The buffer to initialize from.
    /// </param>
    public void initTrackingDimensionsFrom(InventDimFieldsMap   _inventDimFieldsMap)
    {
        Enumerator enum = InventDim::dimTrackingDimFieldList().getEnumerator();

        while (enum.moveNext())
        {
            FieldId fieldId = enum.current();

            // <GEERU>
            // <GEEPL>
            if (this.TableId == tableNum(SalesInvoiceLocalizationTmp) &&
                (fieldId == fieldNum(InventDim, InventGTDId_RU) ||
                 fieldId == fieldNum(InventDim, InventOwnerId_RU) ||
                 fieldId == fieldNum(InventDim, InventProfileId_RU))
                )
            {
                continue;
            }
            // </GEEPL>
            // </GEERU>

            InventDimFieldsMap::copyFieldValue(_inventDimFieldsMap, this, fieldId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@FPK270012</DeveloperDocumentation>
	<Label>@FPK270025</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>configId</Name>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>inventBatchId</Name>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventColorId</Name>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventGTDId_RU</Name>
			<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventOwnerId_RU</Name>
			<ExtendedDataType>InventOwnerId</ExtendedDataType>
			<StringSize>40</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventProfileId_RU</Name>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>inventSerialId</Name>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventSiteId</Name>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventSizeId</Name>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventStatusId</Name>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventStyleId</Name>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventVersionId</Name>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LicensePlateId</Name>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<StringSize>25</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>wMSLocationId</Name>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>wMSPalletId</Name>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>18</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension1</Name>
			<ExtendedDataType>InventDimension1</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension2</Name>
			<ExtendedDataType>InventDimension2</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension3</Name>
			<ExtendedDataType>InventDimension3</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension4</Name>
			<ExtendedDataType>InventDimension4</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension5</Name>
			<ExtendedDataType>InventDimension5</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension6</Name>
			<ExtendedDataType>InventDimension6</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension7</Name>
			<ExtendedDataType>InventDimension7</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension8</Name>
			<ExtendedDataType>InventDimension8</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldUtcDateTime">
			<Name>InventDimension9</Name>
			<ExtendedDataType>InventDimension9</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InventDimension10</Name>
			<ExtendedDataType>InventDimension10</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension11</Name>
			<ExtendedDataType>InventDimension11</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension12</Name>
			<ExtendedDataType>InventDimension12</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>