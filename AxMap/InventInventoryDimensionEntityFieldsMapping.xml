<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDimensionEntityFieldsMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDimensionEntityFieldsMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapFieldIdFromInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a field ID from the <c>InventInventoryDimensionEntityFieldsMapping</c> table that corresponds to a field ID on the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDimFieldId">
    ///    A field ID from the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    A field ID from the <c>InventInventoryDimensionEntityFieldsMapping</c> table.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_dimFieldId" /> parameter can be a ordinary field ID or an extended field ID.
    /// </remarks>
    static protected FieldId mapFieldIdFromInventDimFieldId(FieldId _inventDimFieldId)
    {
        str inventDimFieldIdStrValue = int2Str(_inventDimFieldId);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + inventDimFieldIdStrValue);

        FieldId fieldIdOnMap = cache.lookup();
        if (fieldIdOnMap != InventDimFieldIdCache::NotCached)
        {
            return fieldIdOnMap;
        }
            
        fieldIdOnMap = SysDictField::findMappingFieldId(tableNum(InventDim), _inventDimFieldId, tableNum(InventInventoryDimensionEntityFieldsMapping));

        if (!fieldIdOnMap)
        {
            throw error(strFmt("@SYS54431", funcName()));
        }

        cache.insert(fieldIdOnMap);

        return fieldIdOnMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an InventDimId for the currently set fields in the map.
    /// </summary>
    public InventDimId resolveInventDimId()
    {
        return this.InventInventoryDimensionEntityFieldsMapping::resolveInventDim().inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldMapped</Name>
				<Source><![CDATA[
    protected final boolean isFieldMapped(FieldId _fieldIdOnMap)
    {
        return this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(_fieldIdOnMap) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id on the mapping table for a field on the map.
    /// </summary>
    /// <param name = "_fieldIdOnMap">The field id for the field on the map.</param>
    /// <returns>The mapping field id.</returns>
    protected FieldId mappedFieldId(FieldId _fieldIdOnMap)
    {
        str fieldIdOnMapStrValue = int2Str(_fieldIdOnMap);
        str tableIdStrValue = int2Str(this.TableId);
        InventDimFieldIdCache cache = new InventDimFieldIdCache(funcName() + ';' + fieldIdOnMapStrValue +';'+ tableIdStrValue);

        FieldId mappedFieldId = cache.lookup();
        if (mappedFieldId != InventDimFieldIdCache::NotCached)
        {
            return mappedFieldId;
        }

        mappedFieldId = SysDictField::findMappedFieldId(tableNum(InventInventoryDimensionEntityFieldsMapping), _fieldIdOnMap, this.TableId);

        if (!mappedFieldId)
        {
            FieldId fieldIdOnInventDim = SysDictField::findMappedFieldId(tableNum(InventInventoryDimensionEntityFieldsMapping), _fieldIdOnMap, tableNum(InventDim));
            Debug::assert(fieldIdOnInventDim != 0); //All dimensions must be mapped.

            InventDimension inventDimension = InventDimension::singletonFromInventDimFieldId(fieldIdOnInventDim);
            if (inventDimension)
            {
                mappedFieldId = inventDimension.fieldIdInTable(tableId2Name(this.TableId));
            }
        }

        cache.insert(mappedFieldId);
        return mappedFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an InventDim record for the currently set fields in the map.
    /// </summary>
    /// <param name="_callFindOrCreateInventDim">
    /// Parameter indicating if the <c>findOrCreate</c> method on <c>InventDim</c> table should be called; optional.
    /// </param>
    /// <returns>The resolved inventory dimension.</returns>
    public InventDim resolveInventDim(boolean _callFindOrCreateInventDim = true)
    {
        InventDim inventDim;

        Common thisAsCommon = this;

        Enumerator enum = InventDim::dimFieldsList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);

            if (this.InventInventoryDimensionEntityFieldsMapping::isFieldMapped(fieldIdOnMap))
            {
                FieldId fieldIdOnCommon = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(fieldIdOnMap);
                inventDim.(fieldIdOnInventDim) = thisAsCommon.(fieldIdOnCommon);
            }
        }
                
        if (_callFindOrCreateInventDim)
        {
            return InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMapFieldSet</Name>
				<Source><![CDATA[
    protected boolean isMapFieldSet(FieldId _fieldIdOnMap)
    {
        FieldId mappedFieldId = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(_fieldIdOnMap);

        return mappedFieldId ? this.isFieldSet(mappedFieldId) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>InventDim</c> record with the dimension values that were explicitly set on the current record.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record.</param>
    public void updateInventDim(InventDim _inventDim)
    {
        Common thisAsCommon = this;

        Enumerator enum = InventDim::dimFieldsList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);

            if (this.InventInventoryDimensionEntityFieldsMapping::isMapFieldSet(fieldIdOnMap))
            {
                FieldId fieldIdOnCommon = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(fieldIdOnMap);
                _inventDim.(fieldIdOnInventDim) = thisAsCommon.(fieldIdOnCommon);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyInventDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any of the inventory dimension values was set explicitly on the current record.
    /// </summary>
    /// <returns>true, if any of the inventory dimension values was set explicitly on the current record; otherwise, false.</returns>
    public boolean isAnyInventDimFieldSet()
    {
        return this.InventInventoryDimensionEntityFieldsMapping::inventDimFieldIdsWithFieldStateSet().elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFieldIdsWithFieldStateSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of inventory dimension field IDs was set explicitly on the current record.
    /// </summary>
    /// <returns>A collection of field IDs for fields that were explicitly set on the current record.</returns>
    public Set inventDimFieldIdsWithFieldStateSet()
    {
        Set fieldIds = new Set(Types::Integer);

        Enumerator enum = InventDim::dimFieldsList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);
            FieldId mappedFieldId = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(fieldIdOnMap);

            if (mappedFieldId && this.isFieldSet(mappedFieldId))
            {
                fieldIds.add(mappedFieldId);
            }
        }

        return fieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// If defaulting logic on mapped data entity data sources can change an inventDimId on a data source buffer during an insert/update, and any of the related
    /// inventDim fields participate in an entity key, then it will be necessary to re-initialize those entity fields based on the new inventDimId, otherwise
    /// re-reading the entity after the operation completed will result in the record not being found, because the key values will have changed.
    /// </summary>
    public void initFromInventDim(InventDim _inventDim)
    {       
        Common thisAsCommon = this;

        Enumerator enum = InventDim::dimFieldsList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();

            if (InventDim::isFieldIdProductDimension(fieldIdOnInventDim))
            {
                // It is not expected that product dimensions will be defaulted, so those are skipped.
                continue;
            }

            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);

            if (this.InventInventoryDimensionEntityFieldsMapping::isFieldMapped(fieldIdOnMap))
            {
                FieldId fieldIdOnCommon = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(fieldIdOnMap);

                thisAsCommon.(fieldIdOnCommon) = _inventDim.(fieldIdOnInventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsFromInventDim</Name>
				<Source><![CDATA[
    internal void initProductDimensionsFromInventDim(InventDim _inventDim)
    {
        Common thisAsCommon = this;

        Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);

            if (this.InventInventoryDimensionEntityFieldsMapping::isFieldMapped(fieldIdOnMap))
            {
                FieldId fieldIdOnCommon = this.InventInventoryDimensionEntityFieldsMapping::mappedFieldId(fieldIdOnMap);

                thisAsCommon.(fieldIdOnCommon) = _inventDim.(fieldIdOnInventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified <c>InventDim</c> record with the dimension values that were explicitly set on the entity.
    /// Returns the merged record <c>InventDimId</c>.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record.</param>
    /// <returns><c>InventDimId</c> of the merged <c>InventDim</c> record.</returns>
    public InventDimId getMergedInventDimId(InventDim _inventDim)
    {
        InventDim inventDim = _inventDim;

        this.InventInventoryDimensionEntityFieldsMapping::updateInventDim(inventDim);
        inventDim = inventDim::findOrCreate(inventDim);

        return inventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearUnmappedInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears those fields on the provided table buffer where the same field is not mapped on this map instance.
    /// </summary>
    public void clearUnmappedInventDimFields(InventDim _inventDim)
    {
        Enumerator enum = InventDim::dimFieldsList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnMap = InventInventoryDimensionEntityFieldsMapping::mapFieldIdFromInventDimFieldId(fieldIdOnInventDim);

            if (!this.InventInventoryDimensionEntityFieldsMapping::isFieldMapped(fieldIdOnMap))
            {
                _inventDim.(fieldIdOnInventDim) = InventDim::emptyDimField(fieldIdOnInventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyProductDimensionSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any product dimension fields have non-default values.
    /// </summary>
    /// <returns>
    /// true if any product dimension is specified; otherwise, false.
    /// </returns>
    public boolean anyProductDimensionSpecified()
    {
        InventDim inventDim = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDim(false);

        return inventdim.anyProductDimensionSpecified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInactiveDimensionsAreNotSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that any inactive dimensions for item are not specified.
    /// </summary>
    /// <param name = "_itemId">The item number</param>
    /// <returns>true, if no inactive dimensions are specified; otherwise, false.</returns>
    public boolean validateInactiveDimensionsAreNotSpecified(ItemId _itemId)
    {
        boolean                                 ret = true;
        FieldId                                 inventDimFieldId;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        InventDim                               inventDim = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDim(false);
        InventDimGroupSetup                     inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        InventDimGroupFieldSetupEnumerator      enumerator  = inventDimGroupSetup.getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();
            if (!inventDimGroupFieldSetup.isActive() && inventDim.(inventDimFieldId))
            {
                ret = checkFailed(strFmt("@SYS54773",fieldId2pname(inventDim.TableId, inventDimFieldId)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified inventory dimensions are valid.
    /// </summary>
    /// <param name = "_itemId">The item number; optional.</param>
    /// <returns>true, if the dimensions are valid; otherwise, false.</returns>
    public boolean validate(ItemId _itemId = '')
    {
        InventDim userSpecifiedDimensions = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDim();
        Set allowEmptyFiels = new Set(Types::Integer);
        allowEmptyFiels.add(-1); // checkDimFieldsValid should allow empty values for all fields since we haven't done defaulting yet.
        return userSpecifiedDimensions.checkDimFieldsValid(_itemId, userSpecifiedDimensions, true, allowEmptyFiels);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>configId</Name>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>inventBatchId</Name>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventColorId</Name>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventGTDId_RU</Name>
			<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventOwnerId_RU</Name>
			<ExtendedDataType>InventOwnerId</ExtendedDataType>
			<StringSize>40</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventProfileId_RU</Name>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>inventSerialId</Name>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventSiteId</Name>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventSizeId</Name>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventStatusId</Name>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventStyleId</Name>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventVersionId</Name>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LicensePlateId</Name>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<StringSize>25</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>wMSLocationId</Name>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>wMSPalletId</Name>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>18</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension1</Name>
			<ExtendedDataType>InventDimension1</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension2</Name>
			<ExtendedDataType>InventDimension2</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension3</Name>
			<ExtendedDataType>InventDimension3</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension4</Name>
			<ExtendedDataType>InventDimension4</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension5</Name>
			<ExtendedDataType>InventDimension5</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension6</Name>
			<ExtendedDataType>InventDimension6</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension7</Name>
			<ExtendedDataType>InventDimension7</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension8</Name>
			<ExtendedDataType>InventDimension8</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldUtcDateTime">
			<Name>InventDimension9</Name>
			<ExtendedDataType>InventDimension9</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InventDimension10</Name>
			<ExtendedDataType>InventDimension10</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension11</Name>
			<ExtendedDataType>InventDimension11</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimension12</Name>
			<ExtendedDataType>InventDimension12</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>