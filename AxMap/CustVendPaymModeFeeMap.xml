<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymModeFeeMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPaymModeFeeMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFeeValue</Name>
				<Source><![CDATA[
    public PaymFeeValue calcFeeValue(CurrencyCode _feeCurrencyCode,
        CurrencyCode _baseCurrencyCode,
        AmountCur _baseAmount,
        TransDate _transDate,
        DueDate _dueDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PaymFeeValue paymFeeValue;
        CustVendPaymModeFeeIntervalMap paymModeFeeInterval;
        CustPaymModeFeeInterval custPaymModeFeeInterval;
        VendPaymModeFeeInterval vendPaymModeFeeInterval;

        switch (this.PercentAmount)
        {
            case PercentAmountInterval::Percent :
                paymFeeValue = abs(_baseAmount) * this.FeeValue / 100;

                if (_feeCurrencyCode != _baseCurrencyCode)
                {
                    paymFeeValue = CurrencyExchangeHelper::curAmount2CurAmount(paymFeeValue, _baseCurrencyCode, _feeCurrencyCode, _transDate);
                }
                else
                {
                    paymFeeValue = CurrencyExchangeHelper::amount(paymFeeValue, _feeCurrencyCode);
                }
                break;

            case PercentAmountInterval::Amount :
                paymFeeValue = CurrencyExchangeHelper::amount(this.FeeValue, this.FeeCurrency);
                break;

            case PercentAmountInterval::Interval :

                if (this.TableId == tablenum(CustPaymModeFee))
                {
                    select firstonly custPaymModeFeeInterval
                        order by Days
                        where custPaymModeFeeInterval.RefRecId == this.RecId
                            && custPaymModeFeeInterval.Days >= (_transDate - _dueDate);

                    paymModeFeeInterval.data(custPaymModeFeeInterval);
                }
                else
                {
                    select firstonly vendPaymModeFeeInterval
                        order by Days
                        where vendPaymModeFeeInterval.RefRecId == this.RecId
                            && vendPaymModeFeeInterval.Days >= (_transDate - _dueDate);

                    paymModeFeeInterval.data(vendPaymModeFeeInterval);
                }

                if (paymModeFeeInterval.RefRecId)
                {
                    switch (paymModeFeeInterval.PercentAmount)
                    {
                        case PercentAmount::Percent :
                            paymFeeValue = abs(_baseamount) * paymModeFeeInterval.FeeValue / 100;

                            if (_feeCurrencyCode != _baseCurrencyCode)
                            {
                                paymFeeValue = CurrencyExchangeHelper::curAmount2CurAmount(paymFeeValue, _baseCurrencyCode, _feeCurrencyCode, _transDate);
                            }
                            else
                            {
                                paymFeeValue = CurrencyExchangeHelper::amount(paymFeeValue, _feeCurrencyCode);
                            }
                            break;

                        case PercentAmount::Amount :
                            paymFeeValue = CurrencyExchangeHelper::amount(paymModeFeeInterval.FeeValue, _feeCurrencyCode);
                            break;
                    }
                }
        }

        paymFeeValue = max(paymFeeValue, this.MinFeeValue);

        return paymFeeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromModule</Name>
				<Source><![CDATA[
    public void initFromModule(ModuleCustVend _module)
    {
        CustPaymModeFee cust;
        VendPaymModeFee vend;

        switch (_module)
        {
            case ModuleCustVend::Cust :
                this.data(cust);
                break;

            case ModuleCustVend::Vend :
                this.data(vend);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFeeValueFromPercentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a given Fee value to <c>AmountCur</c> if the <c>PercentAmount</c> value is Amount.
    /// </summary>
    /// <param name = "_percentAmount">The <c>PercentAmount</c> value.</param>
    /// <param name = "_feeValue">The fee value.</param>
    /// <param name = "_feeCurrencyCode">The currency code tied to the fee.</param>
    /// <returns>The converted fee value.</returns>
    public static PaymFeePercentAmountValue convertFeeValueFromPercentAmount(PercentAmountInterval _percentAmount, PaymFeePercentAmountValue _feeValue, CurrencyCode _feeCurrencyCode)
    {
        if (_percentAmount == PercentAmountInterval::Amount)
        {
            _feeValue = CurrencyExchangeHelper::amount(_feeValue, _feeCurrencyCode);
        }

        return _feeValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS330189</DeveloperDocumentation>
	<Label>@SYS86973</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankRelation</Name>
			<ExtendedDataType>BankRelation</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BankRemittanceType</Name>
			<EnumType>BankRemittanceType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BankTableGroupAll</Name>
			<ExtendedDataType>BankTableGroupAll</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>FeeCurrency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>FeeValue</Name>
			<ExtendedDataType>PaymFeePercentAmountValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MinFeeValue</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymCurrency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymFeeId</Name>
			<ExtendedDataType>CustVendPaymFeeId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PaymMax</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PaymMin</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymSpec</Name>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PercentAmount</Name>
			<EnumType>PercentAmountInterval</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TaxDirection_JP</Name>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<EnumType>VendPaymFeeTaxDirection_JP</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ToDate</Name>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>