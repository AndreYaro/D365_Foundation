<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEntityBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEntityBase extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreateLedgerJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a <c>LedgerJournalTable</c> record.
    /// </summary>
    /// <param name = "_journalEntityBase">The journal entity.</param>
    /// <returns>The <c>LedgerJournalTable</c> record.</returns>
    public static LedgerJournalTable findOrCreateLedgerJournalHeader(LedgerJournalEntityBase _journalEntityBase)
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_journalEntityBase.JournalBatchNumber);

        if (!ledgerJournalTable)
        {
            ledgerJournalTable.JournalName = _journalEntityBase.JournalName;

            ledgerJournalTable.inheritBankTransSummarizationConfigurationFromJournalName();

            if (_journalEntityBase.JournalBatchNumber)
            {
                // The table does not validate journal number since it is not settable unless
                // coming through the entity stack. So validate here that if the journal number
                // is set it has the right format. If the journal number is not specified, then
                // this will be handled by the underlying table's check of mandatory fields.
                if (!NumberSeq::numCheckFormat(_journalEntityBase.JournalBatchNumber, NumberSeqReference::findReference(extendedtypenum(LedgerJournalId)).numberSequenceTable()))
                {
                    // The numCheckFormat call will place the appropriate messages in the infolog
                    // for the format failure, this throw is necessary to stop the insert from completing
                    throw Exception::Error;
                }

                // If journal number is provided, necessary defaulting will not occur on insert so call it here
                ledgerJournalTable.initFromLedgerJournalName();

                ledgerJournalTable.JournalNum = _journalEntityBase.JournalBatchNumber;
            }

            ledgerJournalTable.Name = _journalEntityBase.Description;
            ledgerJournalTable.insert();
        }

        _journalEntityBase.JournalBatchNumber = ledgerJournalTable.JournalNum;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a journal is able to be modified through entity interfaces.
    /// </summary>
    /// <param name = "_journalEntity">The journal entity.</param>
    /// <remarks>A null <c>LedgerJournalTable</c> is valid because the entity framework handles that case.</remarks>
    public static boolean validateJournal(LedgerJournalEntityBase _journalEntity)
    {
        boolean isValid = true;

        LedgerJournalName ledgerJournalName = ledgerJournalName::find(_journalEntity.JournalName);

        if (ledgerJournalName.JournalType != LedgerJournalType::Daily)
        {
            isValid = checkFailed(strFmt("@SYS114718", _journalEntity.JournalName, LedgerJournalType::Daily));
        }

        isValid = isValid && LedgerJournalEntityBase::isWorkflowDocumentEditable(_journalEntity.JournalBatchNumber);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowDocumentEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the editable status of the document with consideration to the workflow state.
    /// </summary>
    /// <param name = "_ledgerJournalId">The document header id.</param>
    /// <returns>True if the document is not workflow eligible, or if document is in workflow editable state;
    /// otherwise, false.</returns>
    /// <remarks>
    /// If the document is in a workflow approval process, the valid editable states are:
    ///
    /// Not submitted - any user with the correct permissions can submit the workflow.
    /// Change requested - only the user assigned to the task is able to edit the document.
    /// </remarks>
    public static boolean isWorkflowDocumentEditable(LedgerJournalId _ledgerJournalId)
    {
        boolean isValid = true;

        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalId);

        if (ledgerJournalTable && ledgerJournalTable.isInWFApprovalProcess())
        {
            WorkflowWorkItemTable workflowWorkItemTable;

            select firstonly workflowWorkItemTable
                where workflowWorkItemTable.RefTableId == ledgerJournalTable.TableId
                    && workflowWorkItemTable.RefRecId == ledgerJournalTable.RecId
                    && workflowWorkItemTable.UserId == curUserId()
                    && workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;

            if (!ledgerJournalTable.isWFUserPermittedToEdit(workflowWorkItemTable))
            {
                isValid = checkFailed("@GeneralLedger:InvalidEntityUpdateForWorkflow");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateJournalNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the user-provided journal number with one generated from the proper number sequence.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <param name = "_staging">The staging table for the journal entity.</param>
    public static LedgerJournalEntityBaseTmp generateJournalNumbers(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, LedgerJournalEntityBase _staging)
    {
        ttsbegin;

        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedtypenum(LedgerJournalId));
        NumberSeq journalNumberSeq = NumberSeq::newGetNum(numberSequenceReference, false);

        LedgerJournalTable existingJournals;

        LedgerJournalEntityBaseTmp journalBatchNumberMap;
        RecordInsertList journalBatchNumberMapList = new RecordInsertList(tableNum(LedgerJournalEntityBaseTmp), true, true, true, false, false, journalBatchNumberMap);

        while select JournalBatchNumber from _staging
            group by JournalBatchNumber
        where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
            && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
            && _staging.TransferStatus == DMFTransferStatus::NotStarted
        notexists join existingJournals
            where _staging.JournalBatchNumber == existingJournals.JournalNum
        {
            journalBatchNumberMap.clear();

            journalBatchNumberMap.OldJournalBatchNumber = _staging.JournalBatchNumber;
            journalBatchNumberMap.NewJournalBatchNumber = journalNumberSeq.num();

            journalBatchNumberMapList.add(journalBatchNumberMap);
        }

        journalBatchNumberMapList.insertDatabase();

        ttscommit;

        return journalBatchNumberMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalBatchNumberSequenceManual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the manual property is true for the number sequence assigned to
    /// the <c>JournalBatchNumber</c> field on <c>LedgerJournalTable</c>.
    /// </summary>
    /// <returns>true if the number sequence field manual is set; otherwise, false.</returns>
    internal static boolean isJournalBatchNumberSequenceManual()
    {
        NumberSequenceReference reference = NumberSequenceReference::findByDatatypeAndScope(extendedTypeNum(LedgerJournalId));
        NumberSequenceTable numberSeq = reference.numberSequenceTable();

        return (numberSeq.Manual == NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalBatchNumber</Name>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalName</Name>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransferStatus</Name>
			<EnumType>DMFTransferStatus</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>