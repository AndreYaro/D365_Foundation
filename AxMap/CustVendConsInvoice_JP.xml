<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendConsInvoice_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendConsInvoice_JP extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAdjustAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates adjustment amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Adjustment amount of current consolidated invoice.
    /// </returns>
    public CustVendConsAdjustAmountMST_JP calcAdjustAmountMST()
    {
        CustVendTrans                   custVendTrans;
        CustVendTrans_W                 custVendTrans_W;
        CustVendSettlement              custVendSettlement;
        CustVendTrans                   custVendOffsetTrans;
        CustVendTrans_W                 custVendOffsetTrans_W;
        CustVendConsAdjustAmountMST_JP  amount;

        if (this.ConsInvoice_JP)
        {
            custVendTrans         = this.CustVendConsInvoice_JP::custVendTrans();
            custVendSettlement    = this.CustVendConsInvoice_JP::custVendSettlement();
            custVendOffsetTrans   = this.CustVendConsInvoice_JP::custVendTrans();
            custVendTrans_W       = this.CustVendConsInvoice_JP::custVendTrans_W();
            custVendOffsetTrans_W = this.CustVendConsInvoice_JP::custVendTrans_W();

            select sum(AmountMST) from custVendTrans
                    where custVendTrans.TransType      == LedgerTransType::CashDiscount
                exists join custVendTrans_W
                    where custVendTrans_W.ConsInvoice_JP  == this.ConsInvoice_JP &&
                          custVendTrans_W.BaseRecId       == custVendTrans.RecId
                exists join RecId from custVendSettlement
                    where custVendTrans.dataAreaId  == custVendSettlement.TransCompany
                       && custVendTrans.RecId       == custVendSettlement.TransRecId
                       && custVendTrans.AccountNum  == custVendSettlement.AccountNum
                exists join RecId from custVendOffsetTrans
                    where custVendSettlement.TransCompany    == custVendOffsetTrans.dataAreaId
                       && custVendSettlement.OffsetRecId     == custVendOffsetTrans.RecId
                       && custVendSettlement.AccountNum      == custVendOffsetTrans.AccountNum
                exists join custVendOffsetTrans_W
                    where custVendOffsetTrans_W.BaseRecId       == custVendOffsetTrans.RecId
                       && custVendOffsetTrans_W.ConsInvoice_JP != 0;

            amount = custVendTrans.AmountMST;
            if (this.TableId == tablenum(CustConsInvoice_JP))
            {
                amount = -1 * amount;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates due date according to consolidation date and payment term.
    /// </summary>
    /// <returns>
    /// Due date.
    /// </returns>
    public DueDate calcDueDate()
    {
        PaymTerm                                paymTerm;
        PaymCalendarProcessor                   paymCalendarProcessor;
        PaymCalendarSourceVendConsInvoice_JP    paymCalendarSourceVendConsInvoice;
        PaymCalendarSourceCustConsInvoice_JP    paymCalendarSourceCustConsInvoice;
        DueDate                                 dueDate;

        paymTerm = PaymTerm::find(this.PaymTerm);
        dueDate = paymTerm.due(this.ConsDate, paymTerm.PaymDayId);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
        {
            switch (this.TableId)
            {
                case tableNum(CustConsInvoice_JP):
                if (paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                    {
                        paymCalendarProcessor = PaymCalendarProcessor::construct();
                        paymCalendarSourceCustConsInvoice = PaymCalendarSourceCustConsInvoice_JP::newCalendarSource(this);
                        dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.CustomerUpdateDueDate, paymCalendarSourceCustConsInvoice);
                    }
                    break;

                case tableNum(VendConsInvoice_JP):
                if (paymTerm.VendorUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
                    {
                        paymCalendarProcessor = PaymCalendarProcessor::construct();
                        paymCalendarSourceVendConsInvoice = PaymCalendarSourceVendConsInvoice_JP::newCalendarSource(this);
                        dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.VendorUpdateDueDate, paymCalendarSourceVendConsInvoice);
                    }
                    break;
            }
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total amount of current consolidated invoice.
    /// </returns>
    public CustVendConsInvoiceAmountMST_JP calcInvoiceAmountMST()
    {
        CustVendConsInvoiceAmountMST_JP amount;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJourW;
        VendInvoiceJour vendInvoiceJour;

        switch (this.TableId)
        {
            case tableNum(CustConsInvoice_JP):
                select sum(InvoiceAmountMST) from custInvoiceJour
                    exists join custInvoiceJourW
                        where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId
                            && custInvoiceJourW.CustConsInvoice_JP == this.RecId;

                amount = custInvoiceJour.InvoiceAmountMST;
                break;

            case tableNum(VendConsInvoice_JP):
                select sum(InvoiceAmountMST) from vendInvoiceJour
                    where vendInvoiceJour.VendConsInvoice_JP == this.RecId;

                amount = vendInvoiceJour.InvoiceAmountMST;
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaidAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates paid amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Paid amount of current consolidated invoice.
    /// </returns>
    [SysObsolete('Please use calcPaidAmountMSTV2 for calculation of paid amount', false, 1\1\2024)]
    public CustVendConsPaidAmountMST_JP calcPaidAmountMST()
    {
        // Calculates paid amount by consolidated invoice recid.
        AmountMST calcPaidAmount(RefRecId _consInvoiceRecId, CustVendConsInvoice_JP _preConsInvoice)
        {
            CustVendConsPaidAmountMST_JP amountTmp = 0.0;

            CustVendTrans custVendTrans = this.CustVendConsInvoice_JP::custVendTrans();
            CustVendSettlement custVendSettlement = this.CustVendConsInvoice_JP::custVendSettlement();
            CustVendTrans custVendOffsetTrans = this.CustVendConsInvoice_JP::custVendTrans();
            CustVendTrans_W custVendTrans_W = this.CustVendConsInvoice_JP::custVendTrans_W();
            CustVendTrans_W custVendOffsetTrans_W = this.CustVendConsInvoice_JP::custVendTrans_W();

            // The following transactions will be calculated as paid amount:
            //     1. Payment without cancelled.
            //     2. Payment via BOE (Customer) or Promissory (Vendor).
            // In this select statement, CustVendTrans is for Payment Trans, CustVendOffsetTrans is for Transaction of sales / purchase orders.
            select sum(SettleAmountMST) from custVendSettlement
                exists join custVendTrans
                    where custVendTrans.dataAreaId  == custVendSettlement.TransCompany
                        && custVendTrans.RecId      == custVendSettlement.TransRecId
                        && custVendTrans.AccountNum == custVendSettlement.AccountNum
                    exists join custVendTrans_W
                        where custVendTrans_W.BaseRecId         == custVendTrans.RecId
                            && custVendTrans_W.ConsInvoice_JP   == _consInvoiceRecId
                exists join custVendOffsetTrans
                    where custVendOffsetTrans.dataAreaId    == custVendSettlement.TransCompany
                        && custVendOffsetTrans.RecId        == custVendSettlement.OffsetRecId
                        && custVendOffsetTrans.AccountNum   == custVendSettlement.AccountNum
                        && (custVendOffsetTrans.TransDate > _preConsInvoice.ConsDate
                            || (custVendOffsetTrans.TransDate == _preConsInvoice.ConsDate && _consInvoiceRecId == _preConsInvoice.RecId))
                        && (((custVendOffsetTrans.TransType             == LedgerTransType::Payment ||
                              custVendOffsetTrans.TransType             == LedgerTransType::GeneralJournal)
                           && custVendOffsetTrans.CancelledPayment_JP   == NoYes::No)
                           || (custVendOffsetTrans.TransType            == LedgerTransType::None
                           && custVendOffsetTrans.CustVendNegInstId_JP  != ''))
                    exists join custVendOffsetTrans_W
                        where custVendOffsetTrans_W.BaseRecId       == custVendOffsetTrans.RecId
                            && custVendOffsetTrans_W.ConsInvoice_JP != 0;

            if (this.TableId == tablenum(VendConsInvoice_JP))
            {
                amountTmp = -1 * custVendSettlement.SettleAmountMST;
            }
            else
            {
                amountTmp = custVendSettlement.SettleAmountMST;
            }

            return amountTmp;
        }

        // loops previous consolidated invoice, sum all previously paid amount.
        CustVendConsInvoice_JP custVendConsInvoice = this;
        CustVendConsInvoice_JP preCustVendConsInvoice = this.CustVendConsInvoice_JP::findPrevious();
        CustVendConsPaidAmountMST_JP amount = 0.0;
        while (custVendConsInvoice.ConsInvoice_JP)
        {
            amount += calcPaidAmount(custVendConsInvoice.ConsInvoice_JP, preCustVendConsInvoice);
            custVendConsInvoice = custVendConsInvoice.CustVendConsInvoice_JP::findPrevious();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrevious</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds previous consolidated invoice based on <c>ConsInvoice_JP</c> field value.
    /// </summary>
    /// <returns>Customer or vendor consolidated invoice.</returns>
    private CustVendConsInvoice_JP findPrevious()
    {
        CustVendConsInvoice_JP preCustVendConsInvoice;

        if (this.ConsInvoice_JP)
        {
            switch (this.TableId)
            {
                case tablenum(CustConsInvoice_JP):
                    preCustVendConsInvoice = CustConsInvoice_JP::find(this.ConsInvoice_JP);
                    break;

                case tableNum(VendConsInvoice_JP):
                    preCustVendConsInvoice = VendConsInvoice_JP::find(this.ConsInvoice_JP);
                    break;
            }
        }

        return preCustVendConsInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPreAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total amount of previous consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total amount of previous consolidated invoice.
    /// </returns>
    public CustVendConsPreAmountMST_JP calcPreAmountMST()
    {
        CustVendConsPreAmountMST_JP amount;
        VendConsInvoice_JP          preVendConsInvoice_JP;
        CustConsInvoice_JP          preCustConsInvoice_JP;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP) :
                preCustConsInvoice_JP = CustConsInvoice_JP::find(this.ConsInvoice_JP);
                if (preCustConsInvoice_JP.RecId != 0)
                {
                    amount = preCustConsInvoice_JP.CustVendConsInvoice_JP::getTotalAmountMST();
                }
                break;
            case tablenum(VendConsInvoice_JP) :
                preVendConsInvoice_JP = VendConsInvoice_JP::find(this.ConsInvoice_JP);
                if (preVendConsInvoice_JP.RecId != 0)
                {
                    amount = preVendConsInvoice_JP.CustVendConsInvoice_JP::getTotalAmountMST();
                }
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total tax amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total tax amount of current consolidated invoice.
    /// </returns>
    public CustVendConsInvoiceAmountMST_JP calcTaxAmountMST()
    {
        CustInvoiceJour                 custInvoiceJour;
        CustInvoiceJour_W               custInvoiceJourW;
        VendInvoiceJour                 vendInvoiceJour;
        CustVendConsInvoiceAmountMST_JP amount;

        switch (this.TableId)
        {
            case tableNum(CustConsInvoice_JP):
                while select sum(SumTax), CurrencyCode from custInvoiceJour
                    group by CurrencyCode
                exists join custInvoiceJourW
                    where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId
                        && custInvoiceJourW.CustConsInvoice_JP == this.RecId
                {
                    amount += CurrencyExchangeHelper::amountCur2MST(custInvoiceJour.SumTax, custInvoiceJour.CurrencyCode);
                }
                break;

            case tableNum(VendConsInvoice_JP):
                while select sum(SumTax), CurrencyCode from vendInvoiceJour
                    group by CurrencyCode
                    where vendInvoiceJour.VendConsInvoice_JP == this.RecId
                {
                    amount += CurrencyExchangeHelper::amountCur2MST(vendInvoiceJour.SumTax, vendInvoiceJour.CurrencyCode);
                }
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets settlement for customer or vendor according to <c>CustVendConsInvoice_JP</c> data.
    /// </summary>
    /// <returns>
    /// Settlement for customer or vendor.
    /// </returns>
    public CustVendSettlement custVendSettlement()
    {
        CustSettlement      custSettlement;
        VendSettlement      vendSettlement;
        CustVendSettlement  custVendSettlement;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                custVendSettlement = custSettlement;
                break;

            case tablenum(VendConsInvoice_JP)   :
                custVendSettlement = vendSettlement;
                break;
        }

        return custVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets transaction for customer or vendor according to <c>CustVendConsInvoice_JP</c> data.
    /// </summary>
    /// <returns>
    /// Transaction for customer or vendor.
    /// </returns>
    public CustVendTrans custVendTrans()
    {
        CustTrans           custTrans;
        VendTrans           vendTrans;
        CustVendTrans       custVendTrans;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                custVendTrans = custTrans;
                break;

            case tablenum(VendConsInvoice_JP)   :
                custVendTrans = vendTrans;
                break;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets transaction for customer or vendor according to <c>CustVendConsInvoice_JP</c> data.
    /// </summary>
    /// <returns>
    /// Transaction for customer or vendor.
    /// </returns>
    public CustVendTrans_W custVendTrans_W()
    {
        CustTrans_W           custTrans_W;
        VendTrans_W           vendTrans_W;
        CustVendTrans_W       custVendTrans_W;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                custVendTrans_W = custTrans_W;
                break;

            case tablenum(VendConsInvoice_JP)   :
                custVendTrans_W = vendTrans_W;
                break;
        }

        return custVendTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets adjustment amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Adjustment amount of current consolidated invoice.
    /// </returns>
    /// <remarks>
    /// It is called when displaying adjustment amount for a consolidated invoice.
    /// </remarks>
    public CustVendConsAdjustAmountMST_JP getAdjustAmountMST()
    {
        CustVendConsAdjustAmountMST_JP  amount;

        if (this.isConsConfirmed())
        {
            amount = this.AdjustAmountMST;
        }
        else
        {
            amount = this.CustVendConsInvoice_JP::calcAdjustAmountMST();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendInvoiceJourWithSmallestId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice journal related with consolidated invoice and with smallest sales/purchase Id.
    /// </summary>
    /// <returns>
    /// The invoice journal related with consolidated invoice and with smallest sales/purchase Id.
    /// </returns>
    public CustVendInvoiceJour getCustVendInvoiceJourWithSmallestId()
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJourW;
        VendInvoiceJour vendInvoiceJour;

        switch (this.TableId)
        {
            case tableNum(CustConsInvoice_JP):
                select firstOnly * from custInvoiceJour
                    order by RecId
                exists join custInvoiceJourW
                    where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId
                        && custInvoiceJourW.CustConsInvoice_JP == this.RecId;

                return custInvoiceJour;

            case tableNum(VendConsInvoice_JP):
                select firstOnly * from vendInvoiceJour
                    order by RecId
                where vendInvoiceJour.VendConsInvoice_JP == this.RecId;

                return vendInvoiceJour;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total amount of current consolidated invoice.
    /// </returns>
    /// <remarks>
    /// It is called when displaying current invoice amount for a consolidated invoice.
    /// </remarks>
    public CustVendConsInvoiceAmountMST_JP getInvoiceAmountMST()
    {
        CustVendConsInvoiceAmountMST_JP amount;

        if (this.isConsConfirmed() && this.Posted == NoYes::No)
        {
            amount = this.InvoiceAmountMST;
        }
        else if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false) && this.Posted == NoYes::Yes)
        {
            AmountCur postedSalesTaxDiff = this.CustVendConsInvoice_JP::getTotalTaxDifferenceAdjusted();
            amount = this.InvoiceAmountMST + postedSalesTaxDiff;
        }
        else
        {
            amount = this.CustVendConsInvoice_JP::calcInvoiceAmountMST();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutstandingAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets outstanding amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Outstanding amount of current consolidated invoice.
    /// </returns>
    public CustVendConsOutstandingAmountMST_JP getOutstandingAmountMST()
    {
        return this.CustVendConsInvoice_JP::getPreAmountMST() -
            this.CustVendConsInvoice_JP::getAdjustAmountMST() -
            this.CustVendConsInvoice_JP::getPaidAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaidAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets paid amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Paid amount of current consolidated invoice.
    /// </returns>
    /// <remarks>
    /// It is called when displaying paid amount for a consolidated invoice.
    /// </remarks>
    public CustVendConsPaidAmountMST_JP getPaidAmountMST()
    {
        CustVendConsPaidAmountMST_JP    amount;

        if (this.isConsConfirmed())
        {
            amount = this.PaidAmountMST;
        }
        else
        {
            if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false) && CustVendConsInvoiceAmountCalcFlight_JP::instance().isEnabled())
            {
                amount = this.CustVendConsInvoice_JP::calcPaidAmountMSTV2();
            }
            else
            {
                amount = this.CustVendConsInvoice_JP::calcPaidAmountMST();
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total amount of previous consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total amount of previous consolidated invoice.
    /// </returns>
    /// <remarks>
    /// It is called when displaying previous invoice amount for a consolidated invoice.
    /// </remarks>
    public CustVendConsPreAmountMST_JP getPreAmountMST()
    {
        CustVendConsPreAmountMST_JP amount;

        if (this.isConsConfirmed())
        {
            amount = this.PreAmountMST;
        }
        else
        {
            amount = this.CustVendConsInvoice_JP::calcPreAmountMST();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total tax amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total tax amount of current consolidated invoice.
    /// </returns>
    /// <remarks>
    /// It is called when displaying current tax amount for a consolidated invoice.
    /// </remarks>
    public CustVendConsInvoiceAmountMST_JP getTaxAmountMST()
    {
        CustVendConsInvoiceAmountMST_JP     amount;

        if (this.isConsConfirmed() && this.Posted == NoYes::No)
        {
            amount = this.TaxAmountMST;
        }
        else if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false) && this.Posted == NoYes::Yes)
        {
            AmountCur postedSalesTaxDiff = this.CustVendConsInvoice_JP::getTotalTaxDifferenceAdjusted();
            amount = this.TaxAmountMST + postedSalesTaxDiff;
        }
        else
        {
            amount = this.CustVendConsInvoice_JP::calcTaxAmountMST();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total amount of current consolidated invoice.
    /// </summary>
    /// <returns>
    /// Total amount of current consolidated invoice.
    /// </returns>
    public CustVendConsTotalAmountMST_JP getTotalAmountMST()
    {
        return this.CustVendConsInvoice_JP::getOutstandingAmountMST() + this.CustVendConsInvoice_JP::getInvoiceAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize consolidation date for consolidated invoice based on system date and consolidation day.
    /// </summary>
    /// <returns>
    /// Returns consolidation date.
    /// </returns>
    public CustVendConsDate_JP initConsDate(CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CustVendConsDate_JP     consDate;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                consDate = CustVendConsInvoiceType_JP::getCurrentConsPeriodEndDate(this.AccountNum, CustVendACType::Cust, _executionDate);
                break;

            case tablenum(VendConsInvoice_JP)   :
                consDate = CustVendConsInvoiceType_JP::getCurrentConsPeriodEndDate(this.AccountNum, CustVendACType::Vend, _executionDate);
                break;

            default                             :
                return datenull();
        }

        return consDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize consolidation number for consolidated invoice.
    /// </summary>
    /// <returns>
    /// Returns consolidation number.
    /// </returns>
    private CustVendConsId_JP initConsId()
    {
        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                return NumberSeq::newGetNum(CustParameters::numRefCustConsId_JP()).num();

            case tablenum(VendConsInvoice_JP)   :
                return NumberSeq::newGetNum(VendParameters::numRefVendConsId_JP()).num();

            default                             :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(
        CustVendExecutionDate_JP _executionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId _isConsDateSpecified = NoYes::No,
        CustVendConsDate_JP _consDateSpecified = dateNull())
    {
        this.ConsId         = this.CustVendConsInvoice_JP::initConsId();

        if (_isConsDateSpecified)
        {
            this.ConsDate = _consDateSpecified;
        }
        else
        {
            this.ConsDate = this.CustVendConsInvoice_JP::initConsDate(_executionDate);
        }

        this.ExecutionDate  = _executionDate;
        this.Status         = CustVendConsInvoiceStatus_JP::Unconfirmed;
        this.ConsInvoice_JP = this.CustVendConsInvoice_JP::lastConfirmedConsInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this consolidated invoice is confirmed.
    /// </summary>
    /// <returns>
    /// Returns false if the status is <c>CustVendConsInvoiceStatus_JP::Unconfirmed</c>. Otherwise, returns true.
    /// </returns>
    public boolean isConsConfirmed()
    {
        return this.Status != CustVendConsInvoiceStatus_JP::Unconfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastConfirmedConsInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds last confirmed consolidated invoice for this customer/vendor.
    /// </summary>
    /// <returns>
    /// Record id of last confirmed consolidated invoice.
    /// </returns>
    private CustVendConsRefRecId_JP lastConfirmedConsInvoice()
    {
        CustVendConsRefRecId_JP refRecId;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                refRecId = CustConsInvoice_JP::findLastConfirmedConsInvoice(this.AccountNum, this.RecId);
                break;

            case tablenum(VendConsInvoice_JP)   :
                refRecId = VendConsInvoice_JP::findLastConfirmedConsInvoice(this.AccountNum, this.RecId);
                break;
        }
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the customer/vendor name.
    /// </summary>
    /// <returns>
    /// Customer/vendor name.
    /// </returns>
    public Name name()
    {
        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                return CustTable::find(this.AccountNum).name();

            case tablenum(VendConsInvoice_JP)   :
                return VendTable::find(this.AccountNum).name();

            default                             :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseConsInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases number sequence, related invoice journals and transactions.
    /// </summary>
    /// <remarks>
    /// It is called when consolidated invoice is deleted.
    /// </remarks>
    public void releaseConsInvoice()
    {
        ttsbegin;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                NumberSeq::releaseNumber(CustParameters::numRefCustConsId_JP().NumberSequenceId, this.ConsId);
                break;

            case tablenum(VendConsInvoice_JP)   :
                NumberSeq::releaseNumber(VendParameters::numRefVendConsId_JP().NumberSequenceId, this.ConsId);
                break;

            default                 :
                ttsabort;
                return;
        }
        this.CustVendConsInvoice_JP::updateConsRefRecId_delete();
        this.CustVendConsInvoice_JP::releaseInvoiceJour();
        this.CustVendConsInvoice_JP::releaseTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all related invoice journal by setting reference id with 0 and recalculated due date based on invoice date.
    /// </summary>
    private void releaseInvoiceJour()
    {
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceJour_W   custInvoiceJourW;
        VendInvoiceJour     vendInvoiceJour;

        switch (this.TableId)
        {
            case tableNum(CustConsInvoice_JP):
                while select forUpdate * from custInvoiceJour
                    exists join custInvoiceJourW
                        where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId
                            && custInvoiceJourW.CustConsInvoice_JP == this.RecId
                {
                    custInvoiceJourW = custInvoiceJour.custInvoiceJour_W();
                    custInvoiceJourW.CustConsInvoice_JP = 0;
                    custInvoiceJour.packCustInvoiceJour_W(custInvoiceJourW);

                    custInvoiceJour.CustVendInvoiceJour::updateDue_JP();
                    custInvoiceJour.update();
                }
                break;

            case tableNum(VendConsInvoice_JP):
                while select forupdate vendInvoiceJour
                    where vendInvoiceJour.VendConsInvoice_JP == this.RecId
                {
                    vendInvoiceJour.VendConsInvoice_JP = 0;
                    vendInvoiceJour.updateDue_JP();
                    vendInvoiceJour.update();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all related transaction by setting reference id with 0.
    /// </summary>
    private void releaseTrans()
    {
        CustTrans_W custTrans_W;
        VendTrans_W vendTrans_W;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                update_recordset custTrans_W
                    setting CustConsInvoice_JP = 0
                    where custTrans_W.CustConsInvoice_JP == this.RecId;
                break;

            case tablenum(VendConsInvoice_JP)   :
                update_recordset vendTrans_W
                    setting VendConsInvoice_JP = 0
                    where vendTrans_W.VendConsInvoice_JP == this.RecId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all amounts for consolidated invoice according to whether it has been confirmed.
    /// </summary>
    public void setInvoiceAmount()
    {
        if (this.isConsConfirmed())
        {
            this.InvoiceAmountMST   = this.CustVendConsInvoice_JP::calcInvoiceAmountMST();

            if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false) && CustVendConsInvoiceAmountCalcFlight_JP::instance().isEnabled())
            {
                this.PaidAmountMST = this.CustVendConsInvoice_JP::calcPaidAmountMSTV2();
            }
            else
            {
                this.PaidAmountMST = this.CustVendConsInvoice_JP::calcPaidAmountMST();
            }

            this.PreAmountMST       = this.CustVendConsInvoice_JP::calcPreAmountMST();
            this.AdjustAmountMST    = this.CustVendConsInvoice_JP::calcAdjustAmountMST();
            this.TaxAmountMST       = this.CustVendConsInvoice_JP::calcTaxAmountMST();
        }
        else
        {
            this.InvoiceAmountMST   = 0;
            this.PaidAmountMST      = 0;
            this.PreAmountMST       = 0;
            this.AdjustAmountMST    = 0;
            this.TaxAmountMST       = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set consolidated invoice status according to whether it has been partially settled, settled or not.
    /// </summary>
    /// <remarks>
    /// Set status with <c>CustVendConsInvoiceStatus_JP::PartiallySettled</c> if it is partially settled.
    /// Set status with <c>CustVendConsInvoiceStatus_JP::Settled</c> if it is full settled.
    /// Otherwise, set status with <c>CustVendConsInvoiceStatus_JP::Confirmed</c>.
    /// </remarks>
    public void setInvoiceStatus()
    {
        CustVendTrans                   custVendTrans       = this.CustVendConsInvoice_JP::custVendTrans();
        CustVendTrans_W                 custVendTrans_W     = this.CustVendConsInvoice_JP::custVendTrans_W();
        CustVendConsInvoiceStatus_JP    status;
        AmountCur amountCur = 0;
        AmountCur settleAmountCur = 0;

        if(TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
        {
            switch (this.TableId)
            {
                case tablenum(CustConsInvoice_JP):

                    CustConsInvoice_JP custConsInvoice_JP;
                    select sum(AmountCur), sum(SettleAmountCur) from custVendTrans
                        where custVendTrans.AccountNum == this.AccountNum
                        join RecId, BaseRecId, ConsInvoice_JP from custVendTrans_W
                            where custVendTrans_W.BaseRecId == custVendTrans.RecId
                                && custVendTrans_W.ConsInvoice_JP == this.RecId
                        join RecId, PostedCustTrans from custConsInvoice_JP
                            where custConsInvoice_JP.PostedCustTrans == custVendTrans.RecId;
                    
                    break;

                case tableNum(VendConsInvoice_JP):

                    VendConsInvoice_JP vendConsInvoice_JP;
                    select sum(AmountCur), sum(SettleAmountCur) from custVendTrans
                        where custVendTrans.AccountNum == this.AccountNum
                        join RecId, BaseRecId, ConsInvoice_JP from custVendTrans_W
                            where custVendTrans_W.BaseRecId == custVendTrans.RecId
                                && custVendTrans_W.ConsInvoice_JP == this.RecId
                        join RecId, PostedVendTrans from vendConsInvoice_JP
                            where vendConsInvoice_JP.PostedVendTrans == custVendTrans.RecId;
 
                    break;
            }

            amountCur += custVendTrans.AmountCur;
            settleAmountCur += custVendTrans.SettleAmountCur;
        }

        select sum(AmountCur), sum(SettleAmountCur) from custVendTrans
                where custVendTrans.AccountNum      == this.AccountNum
                  && (custVendTrans.TransType       == LedgerTransType::Sales
                    || custVendTrans.TransType       == LedgerTransType::Purch)
            exists join custVendTrans_W
                where custVendTrans_W.BaseRecId      == custVendTrans.RecId
                   && custVendTrans_W.ConsInvoice_JP == this.RecId;

        amountCur += custVendTrans.AmountCur;
        settleAmountCur += custVendTrans.SettleAmountCur;

        if (settleAmountCur == 0)
        {
            status = CustVendConsInvoiceStatus_JP::Confirmed;
        }
        else if (amountCur == settleAmountCur)
        {
            status = CustVendConsInvoiceStatus_JP::Settled;
        }
        else
        {
            status = CustVendConsInvoiceStatus_JP::PartiallySettled;
        }

        this.Status = status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateConsRefRecId_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates previous confirmed reference with its prevoious one while this record will be deleted.
    /// </summary>
    /// <remarks>
    /// This methods is called when a record is deleted.
    /// </remarks>
    private void updateConsRefRecId_delete()
    {
        CustConsInvoice_JP      custConsInvoice;
        VendConsInvoice_JP      vendConsInvoice;
        CustVendConsRefRecId_JP refRecId;

        ttsbegin;
        refRecId = this.CustVendConsInvoice_JP::lastConfirmedConsInvoice();

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP)   :
                update_recordset custConsInvoice
                    setting CustConsInvoice_JP = refRecId
                    where custConsInvoice.CustConsInvoice_JP == this.RecId;
                break;

            case tablenum(VendConsInvoice_JP)   :
                update_recordset vendConsInvoice
                    setting VendConsInvoice_JP = refRecId
                    where vendConsInvoice.VendConsInvoice_JP == this.RecId;
                break;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustVendTrans</Name>
				<Source><![CDATA[
    internal static CustVendConsInvoice_JP findByCustVendTrans(CustVendTrans _custVendTrans,  boolean _forUpdate = false)
    {
        CustVendConsInvoice_JP custVendConsInvoice;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                CustInvoiceJour custInvoiceJour;
                CustInvoiceJour_W custInvoiceJourW;
                CustConsInvoice_JP custConsInvoice;
                custVendConsInvoice = custConsInvoice;

                select firstonly custVendConsInvoice
                    exists join custInvoiceJourW
                        where custInvoiceJourW.CustConsInvoice_JP == custVendConsInvoice.RecId
                    exists join custInvoiceJour
                        where custInvoiceJour.RecId == custInvoiceJourW.CustInvoiceJour
                            && custInvoiceJour.InvoiceId == _custVendTrans.Invoice
                            && custInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum
                            && custInvoiceJour.InvoiceDate == _custVendTrans.TransDate
                            && custInvoiceJour.LedgerVoucher == _custVendTrans.Voucher;
                break;

            case tableNum(VendTrans):
                VendInvoiceJour vendInvoiceJour;
                VendConsInvoice_JP vendConsInvoice;
                custVendConsInvoice = vendConsInvoice;

                select firstonly custVendConsInvoice
                    exists join vendInvoiceJour
                        where vendInvoiceJour.VendConsInvoice_JP == custVendConsInvoice.RecId
                            && vendInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum
                            && vendInvoiceJour.InvoiceDate == _custVendTrans.TransDate
                            && vendInvoiceJour.LedgerVoucher == _custVendTrans.Voucher;
                break;

            default:
                break;
        }

        custVendConsInvoice.selectForUpdate(_forUpdate);

        return custVendConsInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the posted status of the consolidated invoice
    /// </summary>
    public void setPosted()
    {
        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP):
                CustConsInvoice_JP custConsInvoice_JP;
                select firstonly custConsInvoice_JP
                    where custConsInvoice_JP.RecId == this.RecId;
                this.Posted = custConsInvoice_JP.Posted;
                break;

            case tablenum(VendConsInvoice_JP):
                VendConsInvoice_JP vendConsInvoice_JP;
                select firstonly vendConsInvoice_JP
                    where vendConsInvoice_JP.RecId == this.RecId;
                this.Posted = vendConsInvoice_JP.Posted;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTaxDifferenceAdjusted</Name>
				<Source><![CDATA[
    private AmountCur getTotalTaxDifferenceAdjusted()
    {
        LedgerJournalTrans ledgerJournalTrans;
        int transactionSign = 1;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP):
                select firstonly AmountCurDebit, AmountCurCredit from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == this.JournalNum
                        && ledgerJournalTrans.AccountType == LedgerJournalACType::Cust;
                
                transactionSign = 1;
                break;

            case tablenum(VendConsInvoice_JP):
                select firstonly AmountCurDebit, AmountCurCredit from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == this.JournalNum
                        && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend;
                
                transactionSign = -1;
                break;
        }

        return (ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit) * transactionSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaidAmountMSTV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates paid amount of current consolidated invoice.
    /// Considering only one previous consolidated invoice for amount calculation.
    /// </summary>
    /// <returns>
    /// Paid amount of current consolidated invoice.
    /// </returns>
    public CustVendConsPaidAmountMST_JP calcPaidAmountMSTV2()
    {
        
        CustVendConsInvoice_JP custVendConsInvoice = this;
        CustVendConsInvoice_JP preCustVendConsInvoice = this.CustVendConsInvoice_JP::findPrevious();
        CustVendConsPaidAmountMST_JP amount = 0;

        if (preCustVendConsInvoice.RecId)
        {
            CustVendTrans custVendTrans = this.CustVendConsInvoice_JP::custVendTrans();
            CustVendSettlement custVendSettlement = this.CustVendConsInvoice_JP::custVendSettlement();
            CustVendTrans custVendOffsetTrans = this.CustVendConsInvoice_JP::custVendTrans();
            CustVendTrans_W custVendTrans_W = this.CustVendConsInvoice_JP::custVendTrans_W();
            CustVendTrans_W custVendOffsetTrans_W = this.CustVendConsInvoice_JP::custVendTrans_W();
            RefRecId postedCustVendTransRecId = preCustVendConsInvoice.CustVendConsInvoice_JP::getPostedCustVendTrans();

            // The following transactions will be calculated as paid amount:
            //     1. Payment without cancelled.
            //     2. Payment via BOE (Customer) or Promissory (Vendor).
            // In this select statement, CustVendTrans is for Payment Trans, CustVendOffsetTrans is for Transaction of sales / purchase orders.
            select sum(SettleAmountMST) from custVendSettlement
                exists join custVendTrans
                    where custVendTrans.dataAreaId  == custVendSettlement.TransCompany
                        && custVendTrans.RecId      == custVendSettlement.TransRecId
                        && custVendTrans.AccountNum == custVendSettlement.AccountNum
                    exists join custVendTrans_W
                        where custVendTrans_W.BaseRecId         == custVendTrans.RecId
                            && custVendTrans_W.ConsInvoice_JP   == preCustVendConsInvoice.RecId
                exists join custVendOffsetTrans
                    where custVendOffsetTrans.dataAreaId    == custVendSettlement.TransCompany
                        && custVendOffsetTrans.RecId        == custVendSettlement.OffsetRecId
                        && custVendOffsetTrans.AccountNum   == custVendSettlement.AccountNum
                        && custVendOffsetTrans.RecId        != postedCustVendTransRecId
                        && (((custVendOffsetTrans.TransType             == LedgerTransType::Payment ||
                              custVendOffsetTrans.TransType             == LedgerTransType::GeneralJournal)
                           && custVendOffsetTrans.CancelledPayment_JP   == NoYes::No)
                           || (custVendOffsetTrans.TransType            == LedgerTransType::None
                           && custVendOffsetTrans.CustVendNegInstId_JP  != ''))
                    exists join custVendOffsetTrans_W
                        where custVendOffsetTrans_W.BaseRecId       == custVendOffsetTrans.RecId
                            && custVendOffsetTrans_W.ConsInvoice_JP != 0;

            if (this.TableId == tablenum(VendConsInvoice_JP))
            {
                amount = -1 * custVendSettlement.SettleAmountMST;
            }
            else
            {
                amount = custVendSettlement.SettleAmountMST;
            }
        }
        
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostedCustVendTrans</Name>
				<Source><![CDATA[
    private RefRecId getPostedCustVendTrans()
    {
        RefRecId postedCustVendTransRecId;

        switch (this.TableId)
        {
            case tablenum(CustConsInvoice_JP):
                CustConsInvoice_JP custConsInvoice_JP;
                select firstonly PostedCustTrans from custConsInvoice_JP
                    where custConsInvoice_JP.RecId == this.RecId;
                postedCustVendTransRecId = custConsInvoice_JP.PostedCustTrans;
                break;

            case tablenum(VendConsInvoice_JP):
                VendConsInvoice_JP vendConsInvoice_JP;
                select firstonly PostedVendTrans from vendConsInvoice_JP
                    where vendConsInvoice_JP.RecId == this.RecId;
                postedCustVendTransRecId = vendConsInvoice_JP.PostedVendTrans;
                break;
        }

        return postedCustVendTransRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63761</DeveloperDocumentation>
	<Label>@GLS60235</Label>
	<TitleField1>ConsId</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>AdjustAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsAdjustAmountMST_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ConsDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsDate_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ConsId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsId_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ConsInvoice_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsRefRecId_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ExecutionDate</Name>
			<ExtendedDataType>CustVendExecutionDate_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InvoiceAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsInvoiceAmountMST_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PaidAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsPaidAmountMST_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymTerm</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PreAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsPreAmountMST_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<EnumType>CustVendConsInvoiceStatus_JP</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>TaxAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendConsTaxAmountMST_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Posted</Name>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PostedCustTrans</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PostedVendTrans</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>