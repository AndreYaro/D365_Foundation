<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineExtensionIN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxModelDocLineExtensionIN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copys the data from source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source rec id.
    /// </param>
    public void copyFromSource(
        tableId     _sourceTableId,
        RefRecId    _sourceRecId)
    {
        TaxModelDocLineExtensionIN taxModelDocLineExtensionIN = TaxModelDocLineExtensionIN::findByBaseTable(_sourceTableId, _sourceRecId);
        if (_sourceRecId && _sourceTableId)
        {
            this.TaxInformation = taxModelDocLineExtensionIN.TaxInformation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the document line extension.
    /// </summary>
    /// <param name="_buffer">
    /// The sales purch journal line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _buffer)
    {
        this.TransactionRefRecId    = _buffer.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance from the base table.
    /// </summary>
    /// <param name="_baseTable">
    /// The base table id.
    /// </param>
    public void initFromBaseTable(SalesPurchJournalLine _baseTable)
    {
        this.TransactionRefRecId    = _baseTable.SourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance from the extension table.
    /// </summary>
    /// <param name="_extensionTable">
    /// The extension table id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromExtensionTable(TaxModelDocLineExtensionIN _extensionTable)
    {
        this.TaxInformation = _extensionTable.TaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBaseTable</Name>
				<Source><![CDATA[
/// <summary>
    /// Finds the records by base table id.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source rec id.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelDocLineExtensionIN</c> class.
    /// </returns>
    public static TaxModelDocLineExtensionIN findByBaseTable(
        TableId _sourceTableId,
        RecId   _sourceRecId)
    {
        TaxModelDocLineExtensionIN  taxExtensionMap;
        PurchLine_IN                purchLine_IN;
        MarkupTrans_IN              markupTransIN;

        switch (_sourceTableId)
        {
            case tableNum(PurchLine):
                purchLine_IN    = SysExtensionSerializerExtensionMap::findByBase(tableNum(purchLine_IN), _sourceRecId);
                taxExtensionMap = purchLine_IN;
                break;
            case tableNum(VendInvoiceInfoLine):
                taxExtensionMap = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(_sourceRecId);
                break;
            case tableNum(VendInvoiceInfoLineTaxExtension_IN):
                taxExtensionMap = VendInvoiceInfoLineTaxExtension_IN::findRecId(_sourceRecId);
                break;
            case tableNum(VendInvoiceTrans):
                taxExtensionMap = VendInvoiceTransTaxExtensionIN::findByVendInvoiceTrans(_sourceRecId);
                break;
            case tableNum(SalesLine):
                taxExtensionMap = SalesLine_IN::findBySalesLine(_sourceRecId);
                break;
            case tableNum(CustInvoiceTrans):
                taxExtensionMap = CustInvoiceTransTaxExtensionIN::findByCustInvoiceTrans(_sourceRecId);
                break;
            case tableNum(LedgerJournalTrans):
                taxExtensionMap = LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(_sourceRecId);
                break;
            case tableNum(CustInvoiceLine):
                taxExtensionMap = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(_sourceRecId);
                break;
            case tableNum(InventTransferLine):
                taxExtensionMap = InventTransferLine_IN::findByinventTransferLine(_sourceRecId);
                break;
            case tableNum(SalesQuotationLine):
                taxExtensionMap = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(_sourceRecId);
                break;
            case tableNum(PurchRFQLine):
                taxExtensionMap = PurchRFQLineTaxExtensionIN::findBypurchRFQLine(_sourceRecId);
                break;
            case tableNum(InventJournalTrans):
                taxExtensionMap = InventJournalTransTaxExtensionIN::findByinventJournalTrans(_sourceRecId);
                break;
            case tableNum(PurchReqLine):
                taxExtensionMap = PurchReqLineTaxExtensionIN::findByPurchReqLine(_sourceRecId);
                break;
            case tableNum(CustQuotationTrans):
                taxExtensionMap = CustQuotationTrans::findRecId(_sourceRecId);
                break;
            case tableNum(ProdJournalBOM):
                taxExtensionMap = ProdJournalBOM_IN::findByProdJournalBOM(_sourceRecId);
                break;
            case tableNum(ProdTable):
                taxExtensionMap = ProdTable_IN::findByProdTable(_sourceRecId);
                break;
            case tableNum(ProjJournalTrans):
                taxExtensionMap = ProjJournalTransTaxExtensionIN::findByProjJournalTrans(_sourceRecId);
                break;
            case tableNum(ProjOnAccTrans):
                taxExtensionMap = ProjOnAccTransTaxExtensionIN::findByProjOnAccTrans(_sourceRecId);
                break;
            case tableNum(ProjCostTrans):
                taxExtensionMap = ProjCostTransTaxExtensionIN::findByProjCostTrans(_sourceRecId);
                break;
            case tableNum(ProjRevenueTrans):
                taxExtensionMap = ProjRevenueTransTaxExtensionIN::findByProjRevenueTrans(_sourceRecId);
                break;
            case tableNum(ProjItemTrans):
                taxExtensionMap = ProjItemTransTaxExtensionIN::findByProjItemTrans(_sourceRecId);
                break;
            case tableNum(ProjEmplTrans):
                taxExtensionMap = ProjEmplTransTaxExtensionIN::findByProjEmplTrans(_sourceRecId);
                break;
            case tableNum(TSTimesheetLine):
                taxExtensionMap = TSTimesheetLineTaxExtensionIN::findByTSTimesheetLine(_sourceRecId);
                break;
            case tableNum(LedgerJournalTrans_Project):
                taxExtensionMap = LedgerJournalTrans_ProjectTaxExtensionIN::findByLedgerJournalTrans_Project(_sourceRecId);
                break;
            case tableNum(SMAServiceOrderLine):
                taxExtensionMap = SMAServiceOrderLineTaxExtension_IN::findBySMAServiceOrderLine(_sourceRecId);
                break;
            case tableNum(PSAContractLineItems):
                taxExtensionMap = PSAContractLineItemsTaxExtensionIN::findByPSAContractLineItems(_sourceRecId);
                break;
            case tableNum(MarkupTrans):
                markupTransIN    = SysExtensionSerializerExtensionMap::findByBase(tableNum(MarkupTrans_IN), _sourceRecId);
                taxExtensionMap = markupTransIN;
                break;
            default :
                break;
        }
        return taxExtensionMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS223077</DeveloperDocumentation>
	<Label>@GLS223076</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>TaxInformation</Name>
			<ExtendedDataType>TaxInformationRefRecId_IN</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>TransactionRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>