<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeLineNumbering</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeLineNumbering extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeSoftDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record can be soft deleted.
    /// </summary>
    /// <returns>
    /// True if record can be soft deleted, otherwise false.
    /// </returns>
    public boolean canBeSoftDeleted()
    {
        boolean canSoftDelete;

        switch (this.TableId)
        {
            case tableNum(PurchLine):
                canSoftDelete = true;
                break;

            case tableNum(PurchRFQCaseLine):
                canSoftDelete = false;
                break;

            default :
                throw Global::error("@SYS16078");
        }
        return canSoftDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnique</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a line number is unique in the scope of an order.
    /// </summary>
    /// <param name="_lineNumber">
    ///    A <c>TradeLineNumber</c> type that represents a line number.
    /// </param>
    /// <returns>
    ///    true if the line number is unique; otherwise, false.
    /// </returns>
    public boolean checkUnique(TradeLineNumber _lineNumber)
    {
        boolean ret = true;
        TradeLineNumbering localLineNumbering = SysDictTable::newTableId(this.TableId).makeRecord();

        if (_lineNumber != this.orig().LineNumber)
        {
            // Do not include !IsDeleted since line numbers are unique for the order.
            if (this.TradeLineNumbering::isFKRecId())
            {
                select firstonly RecId from localLineNumbering
                    where localLineNumbering.HeaderRecId   == this.HeaderRecId
                       && localLineNumbering.LineNumber    == _lineNumber
                       && localLineNumbering.RecId         != this.RecId;
            }
            else
            {
                select firstonly RecId from localLineNumbering
                    where localLineNumbering.HeaderId      == this.HeaderId
                       && localLineNumbering.LineNumber    == _lineNumber
                       && localLineNumbering.RecId         != this.RecId;
            }

            ret = !localLineNumbering.RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineFromTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the current record for update.
    /// </summary>
    /// <returns>
    /// The for update selected record.
    /// </returns>
    public Common findLineFromTmpLine()
    {
        TradeLineNumbering localLineNumbering = SysDictTable::newTableId(this.TableId).makeRecord();

        select forupdate firstonly localLineNumbering
            where localLineNumbering.InventTransId == this.InventTransId;

        return localLineNumbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the highest line number in the scope of the specified order.
    /// </summary>
    /// <returns>
    ///    The highest value of line number.
    /// </returns>
    public TradeLineNumber getLastLineNumber()
    {
        TradeLineNumbering localLineNumbering = SysDictTable::newTableId(this.TableId).makeRecord();

        if (this.TradeLineNumbering::isFKRecId())
        {
            select maxof(LineNumber) from localLineNumbering
                where localLineNumbering.HeaderRecId == this.HeaderRecId;
        }
        else
        {
            select maxof(LineNumber) from localLineNumbering
                where localLineNumbering.HeaderId == this.HeaderId;
        }
        return localLineNumbering.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next line number in a specified order relative to a specified line number.
    /// </summary>
    /// <param name="_previousLineNumber">
    ///    A <c>TradeLineNumber</c> type that represents a line number value.
    /// </param>
    /// <returns>
    ///    A <c>TradeLineNumber</c> type that represents the next value.
    /// </returns>
    public TradeLineNumber getNextLineNumber(TradeLineNumber _previousLineNumber)
    {
        TradeLineNumbering localLineNumbering = SysDictTable::newTableId(this.TableId).makeRecord();

        if (this.TradeLineNumbering::isFKRecId())
        {
            select firstonly LineNumber from localLineNumbering
                order by LineNumber
                where localLineNumbering.HeaderRecId == this.HeaderRecId
                   && (!this.TradeLineNumbering::canBeSoftDeleted() || !localLineNumbering.IsDeleted)
                   && localLineNumbering.LineNumber >  _previousLineNumber;
        }
        else
        {
            select firstonly LineNumber from localLineNumbering
                order by LineNumber
                where localLineNumbering.HeaderId == this.HeaderId
                   && (!this.TradeLineNumbering::canBeSoftDeleted() || !localLineNumbering.IsDeleted)
                   && localLineNumbering.LineNumber >  _previousLineNumber;
        }
        return localLineNumbering.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the previous line number in a given order relative to a specified line number.
    /// </summary>
    /// <param name="_lineNumber">
    ///    A <c>TradeLineNumber</c> type that represents a line number value.
    /// </param>
    /// <returns>
    ///    A <c>TradeLineNumber</c> type that represents the previous value.
    /// </returns>
    public TradeLineNumber getPreviousLineNumber(TradeLineNumber _lineNumber)
    {
        TradeLineNumbering localLineNumbering = SysDictTable::newTableId(this.TableId).makeRecord();

        if (this.TradeLineNumbering::isFKRecId())
        {
            select firstonly LineNumber from localLineNumbering
                order by LineNumber desc
                where localLineNumbering.HeaderRecId == this.HeaderRecId
                   && (!this.TradeLineNumbering::canBeSoftDeleted() || !localLineNumbering.IsDeleted)
                   && localLineNumbering.LineNumber <  _lineNumber;
        }
        else
        {
            select firstonly LineNumber from localLineNumbering
                order by LineNumber desc
                where localLineNumbering.HeaderId == this.HeaderId
                   && (!this.TradeLineNumbering::canBeSoftDeleted() || !localLineNumbering.IsDeleted)
                   && localLineNumbering.LineNumber <  _lineNumber;
        }
        //If no previous line exist we're returning maxint() to signal it's an insert at the top of the order.
        return localLineNumbering.LineNumber ? localLineNumbering.LineNumber : any2int64(maxInt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFKRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the ID attribute is a foreign key on the specified table buffer.
    /// </summary>
    /// <returns>
    ///    true if the ID attribute is the foreign key; otherwise, false.
    /// </returns>
    public boolean isFKRecId()
    {
        boolean ret;

        switch (this.TableId)
        {
            case tableNum(PurchReqLine):
                ret = true;
                break;
            default :
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS345196</DeveloperDocumentation>
	<Visible>No</Visible>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>HeaderId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>HeaderRecId</Name>
			<ExtendedDataType>TradeHeaderRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDeleted</Name>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>LineNumber</Name>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>