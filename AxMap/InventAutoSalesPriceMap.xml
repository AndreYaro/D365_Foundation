<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAutoSalesPriceMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventAutoSalesPriceMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales price of the item based on either the cost or purchase price.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> table that contains the parameters for how to calculate the sales price.
    /// </param>
    /// <param name="_basePrice">
    ///    The base price that is used as a basis for the calculation of the new sales price.
    /// </param>
    public void calcSalesPrice(
        InventTable                 _inventTable,
        InventAutoSalesPriceMap     _basePrice)
    {
        Price                       salesPriceInBasicUnit;
        Price                       markupInbasicUnit;
        PriceConvertFactory         priceConvertFactory;
        PriceConvert                priceConvert;
        // <GEERU>
        Price                       salesPriceInBasicUnitSec;
        Price                       markupInbasicUnitSec;
        // </GEERU>

        switch (_inventTable.SalesModel)
        {
            case SalesPriceModel::Contributionratio:
                if (_inventTable.SalesContributionRatio >= 100)
                {
                    return;
                }
                salesPriceInBasicUnit       = (_basePrice.Price * 100) / (100 - _inventTable.SalesContributionRatio);

                markupInbasicUnit = ((_basePrice.Markup * 100) / (100 - _inventTable.SalesContributionRatio));
                // <GEERU>
                salesPriceInBasicUnitSec = (_basePrice.PriceSecCur_RU * 100)  / (100 - _inventTable.SalesContributionRatio);
                markupInbasicUnitSec     = (_basePrice.MarkupSecCur_RU * 100) / (100 - _inventTable.SalesContributionRatio);
                // </GEERU>
                break;

            case SalesPriceModel::PercentMarkup:
                salesPriceInBasicUnit = _basePrice.Price  + ((_basePrice.Price * _inventTable.SalesPercentMarkup)/100);

                markupInbasicUnit           = _basePrice.Markup + (_basePrice.Markup * _inventTable.SalesPercentMarkup / 100);
                // <GEERU>
                salesPriceInBasicUnitSec = _basePrice.PriceSecCur_RU  + _basePrice.PriceSecCur_RU  * _inventTable.SalesPercentMarkup / 100;
                markupInbasicUnitSec     = _basePrice.MarkupSecCur_RU + _basePrice.MarkupSecCur_RU * _inventTable.SalesPercentMarkup / 100;
                // </GEERU>
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        // <GEERU>
        priceConvertFactory = PriceConvertFactory::newItemPrice(_inventTable.ItemId, _basePrice.UnitID, salesPriceInBasicUnit, _basePrice.PriceUnit, markupInbasicUnit, _basePrice.PriceQty, '', salesPriceInBasicUnitSec, markupInbasicUnitSec);
        // </GEERU>
        priceConvertFactory.parmNewPriceUnit(this.PriceUnit);
        priceConvertFactory.parmNewUnitId(this.UnitID);
        priceConvertFactory.parmIntermediateUnitId(_inventTable.inventUnitId());
        priceConvertFactory.parmInventDimId(this.InventDimId);
        
        priceConvert = priceConvertFactory.priceConvert();

        this.Price      = priceConvert.parmPrice();
        this.Markup     = priceConvert.parmMarkup();
        this.PriceQty   = priceConvert.parmPriceQty();
        // <GEERU>
        this.PriceSecCur_RU  = priceConvert.parmPriceSecCur_RU();
        this.MarkupSecCur_RU = priceConvert.parmMarkupSecCur_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales price of the item based on either the cost or purchase price.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> table that contains the parameters for how to calculate the sales price.
    /// </param>
    /// <param name="_inventTableModule">
    ///    The base price that is used as a basis for the calculation of the new sales price.
    /// </param>
    /// <param name="_unitPrice">
    ///    Unit price of this purchase order.
    /// </param>
    /// <returns>
    /// The new sales price.
    /// </returns>
    public Price updateSalesPrice(
        InventTable                 _inventTable,
        InventAutoSalesPriceMap     _inventTableModule,
        Price                       _unitPrice)
    {
        Price                       salesPriceInBasicUnit;
        Price                       markupInbasicUnit;
        PriceConvertFactory         priceConvertFactory;
        PriceConvert                priceConvert;

        switch (_inventTable.SalesModel)
        {
            case SalesPriceModel::Contributionratio:
                if (_inventTable.SalesContributionRatio >= 100)
                {
                    return 0;
                }

                salesPriceInBasicUnit       = (_unitPrice * 100) / (100 - _inventTable.SalesContributionRatio);

                markupInbasicUnit = ((_inventTableModule.Markup * 100) / (100 - _inventTable.SalesContributionRatio));
                break;

            case SalesPriceModel::PercentMarkup:
                salesPriceInBasicUnit = _unitPrice  + ((_unitPrice * _inventTable.SalesPercentMarkup)/100);

                markupInbasicUnit           = _inventTableModule.Markup + (_inventTableModule.Markup * _inventTable.SalesPercentMarkup / 100);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        priceConvertFactory = PriceConvertFactory::newItemPrice(_inventTable.ItemId, _inventTableModule.UnitID, salesPriceInBasicUnit, _inventTableModule.PriceUnit, markupInbasicUnit, _inventTableModule.PriceQty, '');
        priceConvertFactory.parmNewPriceUnit(this.PriceUnit);
        priceConvertFactory.parmNewUnitId(this.UnitID);
        priceConvertFactory.parmIntermediateUnitId(_inventTable.inventUnitId());
        priceConvertFactory.parmInventDimId(this.InventDimId);

        priceConvert = priceConvertFactory.priceConvert();

        return priceConvert.parmPrice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS325340</DeveloperDocumentation>
	<Label>@SYS115795</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>InventPriceMarkup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MarkupSecCur_RU</Name>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceQty</Name>
			<ExtendedDataType>PriceQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceSecCur_RU</Name>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitID</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>