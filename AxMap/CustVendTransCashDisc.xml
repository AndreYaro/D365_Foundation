<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransCashDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendTransCashDisc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        CustVendTransOpen custVendTransOpenLocal;
        CustTransOpen cust;
        VendTransOpen vend;
        CashDiscAmount cashDiscAmountToTake;
        CashDiscAmount origCashDiscAmount;

        ttsbegin;

        origCashDiscAmount = this.orig().CashDiscAmount;

        super();

        if (tablenum(CustTransOpen) == this.RefTableId)
        {
            // bind the map to the cust table
            custVendTransOpenLocal = cust;

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::CustInvoice, this.RefRecId);
            }
        }
        else if (tablenum(VendTransOpen) == this.RefTableId)
        {
            // bind the map to the vend table
            custVendTransOpenLocal = vend;

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::VendInvoice, this.RefRecId);
            }
        }

        if (tablenum(CustTransOpen) == this.RefTableId ||
            tablenum(VendTransOpen) == this.RefTableId ||
            tablenum(CustVendTransOpen) == this.RefTableId)
        {
            if (origCashDiscAmount != this.CashDiscAmount)
            {
                // the extra fields are included to avoid a message about them being required for the update
                select firstonly forupdate CashDiscDate, PossibleCashDisc, AccountNum, RefRecId
                from custVendTransOpenLocal
                where custVendTransOpenLocal.RecId == this.RefRecId;

                Debug::assert(custVendTransOpenLocal.RecId != 0);

                if (custVendTransOpenLocal.RecId != 0)
                {
                    custVendTransOpenLocal.CashDiscDate = this.CashDiscDate;

                    cashDiscAmountToTake = custVendTransOpenLocal.getCashDiscAmountToTake(this.CashDiscAmount);
                    custVendTransOpenLocal.PossibleCashDisc = cashDiscAmountToTake;
                    custVendTransOpenLocal.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
        static AmountCur amountExclTax(AmountCur _amount,
                                   AmountCur _taxAmount)
    {
        AmountCur amountExclTax;

        if (sign(_amount) != sign(_taxAmount))
        {
            // If the sign of invoice amount is not the same as tax amount, the amountExclTax is sum of them
            amountExclTax = abs(_amount) + abs(_taxAmount);
        }
        else
        {
            amountExclTax = abs(_amount) - abs(_taxAmount);
        }

        if (_amount < 0)
        {
            amountExclTax = amountExclTax * -1;
        }

        return amountExclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUseCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustVendTransCashDisc</c> record for the specified table and record ID fields.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    A <c>ModuleCustVend</c> value that identifies the module for which the cash discount is retrieved.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>CustVendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>CustVendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_useCashDisc">
    ///    The cash discount rule used to determine the cash discount record.
    /// </param>
    /// <param name="_cashDiscDate">
    ///    The date used to determine the cash discount record.
    /// </param>
    /// <param name="_discGraceDays">
    ///    The number of grace days used to determine the cash discount record; optional.
    /// </param>
    /// <returns>
    ///    The <c>CustVendTransCashDisc</c> record for the open transaction record.
    /// </returns>
    /// <remarks>
    ///    If the <paramref name="_useCashDisc" /> parameter is set to <c>Normal</c> or <c>Always</c>, this
    ///    method finds the first discount record with a date later than or equal to the date that is used to
    ///    determine the discount. If no record is found and the <paramref name="_useCashDisc" /> parameter is
    ///    set to <c>Always</c>, this method finds the last discount record by date.
    /// </remarks>
    public static CustVendTransCashDisc findByUseCashDisc(
        ModuleCustVend _moduleCustVend,
        tableId _refTableId,
        RefRecId _refRecId,
        UseCashDisc _useCashDisc,
        TransDate _cashDiscDate,
        DiscGraceDays _discGraceDays = 0)

    {
        CustVendTransCashDisc foundCustVendTransCashDisc;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust :
                foundCustVendTransCashDisc = CustTransCashDisc::findByUseCashDisc(_refTableId, _refRecId, _useCashDisc, _cashDiscDate, _discGraceDays);
                break;

            case ModuleCustVend::Vend :
                foundCustVendTransCashDisc = VendTransCashDisc::findByUseCashDisc(_refTableId, _refRecId, _useCashDisc, _cashDiscDate, _discGraceDays);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return foundCustVendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustVendTransCashDisc</c> record with the last applicable discount.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The <c>ModuleCustVend</c> value that identifies the module for which the cash discount is retrieved.
    /// </param>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>CustVendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>CustVendTransCashDisc</c> record to find.
    /// </param>
    /// <returns>
    ///    The <c>CustVendTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    public static CustVendTransCashDisc findLastCashDisc(
        ModuleCustVend _moduleCustVend,
        tableId _refTableId,
        RefRecId _refRecId)
    {
        CustVendTransCashDisc foundCustVendTransCashDisc;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust :
                foundCustVendTransCashDisc = CustTransCashDisc::findLastCashDisc(_refTableId, _refRecId);
                break;

            case ModuleCustVend::Vend :
                foundCustVendTransCashDisc = VendTransCashDisc::findLastCashDisc(_refTableId, _refRecId);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return foundCustVendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets empty table buffer depending on module specified.
    /// </summary>
    /// <param name="_moduleCustVend">
    /// The module type.
    /// </param>
    /// <returns>
    /// The <c>CustVendTransCashDisc</c> empty table buffer.
    /// </returns>
    public static CustVendTransCashDisc getEmptyTableBuffer(ModuleCustVend _moduleCustVend)
    {
        CustVendTransCashDisc custVendTransCashDisc;
        CustTransCashDisc custTransCashDisc;
        VendTransCashDisc vendTransCashDisc;

        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            custVendTransCashDisc = custTransCashDisc.data();
        }
        else
        {
            custVendTransCashDisc = vendTransCashDisc.data();
        }

        return custVendTransCashDisc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS328453</DeveloperDocumentation>
	<Label>@SYS86976</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CashDiscAmount</Name>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CashDiscCode</Name>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CashDiscDate</Name>
			<ExtendedDataType>CashDiscdate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>CashDiscDue</Name>
			<EnumType>CashDiscDue</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Manual</Name>
			<Label>@SYS23968</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>RefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>RefTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>