<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchJournalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesPurchJournalLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method to get the lineAmount of the transaction line.
    /// </summary>
    /// <returns>
    /// Line amount in transaction currency.
    /// </returns>
    public AmountCur getLineAmount()
    {
        SysDictTable dictTable;
        dictTable = new SysDictTable(this.SourceTableId);

        if (dictTable.isMethodActual('getLineAmount'))
        {
            return this.getLineAmount();
        }

        if (dictTable.isMethodActual('effectiveLineAmount'))  //applicable for SalesParmLine
        {
            return this.effectiveLineAmount();
        }

        return this.lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the misc charges amount.
    /// </summary>
    /// <param name="_transTableId">
    /// The table id of the transaction.
    /// </param>
    /// <param name="_transRecId">
    /// The rec id of the transaction.
    /// </param>
    /// <returns>
    /// The misc charge amount.
    /// </returns>
    public Amount getMiscChargesAmount(RefTableId _transTableId, RefRecId _transRecId)
    {
        Amount          notionalAmount;
        Amount          markupTotalValue;
        MarkupTrans     markupTransLoc;
        Amount          notionalCharges;
        Amount          miscChargeAmount;
        CurrencyCode    currencyCode;

        while select Value, NotionalPct_IN, CurrencyCode, MarkupCategory, MarkUpAllocateAfter_IN from markupTransLoc
            where markupTransLoc.TransTableId == _transTableId
                && markupTransLoc.TransRecId   == _transRecId
                && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                || (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled()))
        {
            switch (markupTransLoc.MarkupCategory)
            {
                case MarkupCategory::Percent:
                    switch (markupTransLoc.MarkUpAllocateAfter_IN)
                    {
                        case MarkupAllocateAfter::NetAmount:
                            markupTransLoc.Value = this.LineAmount * markupTransLoc.Value / 100;
                            break;
                        case MarkupAllocateAfter::Qty:
                            switch (this.SourceTableId)
                            {
                                case tablenum(PurchLine):
                                case tablenum(SalesLine):
                                case tablenum(PurchReqLine):
                                case tablenum(PurchRFQLine):
                                case tablenum(VendInvoiceInfoLine):
                                case tablenum(CustInvoiceLine):
                                case tablenum(SalesQuotationLine):
                                    markupTransLoc.Value = this.SalesPurchQty * markupTransLoc.Value / 100;
                                    break;
                            }
                            break;
                        case MarkupAllocateAfter::Line :
                            markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                            break;
                    }
                    break;
                case MarkupCategory::Pcs:
                    switch (this.SourceTableId)
                    {
                        case tablenum(PurchLine):
                        case tablenum(SalesLine):
                        case tablenum(PurchReqLine):
                        case tablenum(PurchRFQLine):
                        case tablenum(VendInvoiceInfoLine):
                        case tablenum(CustInvoiceLine):
                        case tablenum(SalesQuotationLine):
                            markupTransLoc.Value = this.SalesPurchQty * markupTransLoc.Value;
                            break;
                    }
                    break;
            }
            if (_transTableId != tableNum(CustInvoiceTable))
            {
                if (_transTableId == tableNum(PurchRFQLine))
                {
                    currencyCode = PurchRFQReplyLine::findRecId(this.SourceRecId).purchRFQReplyTable().CurrencyCode;
                }
                else
                {
                    currencyCode = this.CurrencyCode;
                }

                markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(
                    markupTransLoc.Value, markupTransLoc.CurrencyCode, currencyCode);
            }
            else
            {
                markupTotalValue    = markupTransLoc.Value;
            }

            notionalCharges = markupTransLoc.NotionalPct_IN/100;

            notionalAmount  = this.LineAmount * notionalCharges;

            if (notionalAmount == 0)
            {
                miscChargeAmount += markupTotalValue;
            }
            else if (markupTotalValue == 0)
            {
                miscChargeAmount += notionalAmount;
            }
            else if (notionalAmount < markupTotalValue)
            {
                miscChargeAmount += notionalAmount;
            }
            else
            {
                miscChargeAmount += markupTotalValue;
            }
        }

        return miscChargeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmountPlusLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the misc charges amount plus line amount.
    /// </summary>
    /// <param name="_transTableId">
    /// The table id of the transaction.
    /// </param>
    /// <param name="_transRecId">
    /// The rec id of the transaction.
    /// </param>
    /// <returns>
    /// The misc charges amount plus line amount.
    /// </returns>
    public Amount getMiscChargesAmountPlusLineAmount(RefTableId _transTableId, RefRecId _transRecId)
    {
        return this.SalesPurchJournalLine::getLineAmount() + this.SalesPurchJournalLine::getMiscChargesAmount(_transTableId, _transRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPurchJournalLineExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales purch journal line extension.
    /// </summary>
    /// <returns>
    /// The sales purch journal line extension.
    /// </returns>
    public SalesPurchJournalLineExtension_IN getSalesPurchJournalLineExtension_IN()
    {
        Common                                      common;
        CustInvoiceTrans                            custInvoiceTrans;
        CustInvoiceTrans_IN                         custInvoiceTrans_IN;
        SalesPurchJournalLineExtension_IN           salesPurchJournalLineExtension_IN;
        InventTransferLine                          inventTransferLine;
        InventTransferLine_IN                       inventTransferLineIN;
        InventTransferJourLine                      inventTransferJourLine;
        InventTransferJourLine_IN                   inventTransferJourLineIN;
        MarkupTrans                                 markupTrans;
        MarkupTrans_IN                              markupTransIN;
        PurchLine                                   purchLine;
        PurchLine_IN                                purchLine_IN;
        SalesLine                                   salesLine;
        SalesLine_IN                                salesLine_IN;
        PurchParmLine                               purchParmLine;
        CustInvoiceLine                             custInvoiceLine;
        CustInvoiceLineTaxExtensionIN               custInvoiceLineTaxExtension;
        PurchParmLine_IN                            purchParmLine_IN;
        LedgerJournalTrans_Project                  ledgerJournalTrans_Project;
        LedgerJournalTrans_ProjectTaxExtensionIN    ledgerJournalTrans_ProjectTaxExtensionIN;
        LedgerJournalTrans                          ledgerJournalTrans;
        LedgerJournalTransTaxExtensionIN            ledgerJournalTransTaxExt;
        SalesQuotationLine                          salesQuotationLine;
        SalesQuotationLineTaxExtensionIN            salesQuotationLineTaxExtensionIN;
        ProjAdvancedJournalLine                     projAdvancedJournalLine;
        ProjAdvancedJournalLineTaxExtensionIN       projAdvancedJournalLineTaxExtensionIN;
        ProjCostTrans                               projCostTrans;
        ProjCostTransTaxExtensionIN                 projCostTransTaxExtensionIN;
        ProjEmplTrans                               projEmplTrans;
        ProjEmplTransTaxExtensionIN                 projEmplTransTaxExtensionIN;
        ProjItemTrans                               projItemTrans;
        ProjItemTransTaxExtensionIN                 projItemTransTaxExtensionIN;
        ProjRevenueTrans                            projRevenueTrans;
        ProjRevenueTransTaxExtensionIN              projRevenueTransTaxExtensionIN;

        if (this.SourceTableId == 0)
        {
            return null;
        }

        switch (this.SourceTableId)
        {
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this;
                custInvoiceTrans_IN = custInvoiceTrans.custInvoiceTrans_IN();
                return custInvoiceTrans_IN;

            case tableNum(MarkupTrans):
                markupTrans = this;
                markupTransIN = markupTrans.markupTrans_IN();
                return markupTransIN;

            case tableNum(PurchLine):
                purchLine = this;
                purchLine_IN = purchLine.purchLine_IN();
                return purchLine_IN;

            case tableNum(PurchReqLine):
                PurchReqLine purchReqLine = this;
                PurchReqLineTaxExtensionIN purchReqLineTaxExtensionIN = purchReqLine.purchReqLineTaxExtensionIN();
                return purchReqLineTaxExtensionIN;

            case tableNum(PurchRFQLine):
                PurchRFQLine purchRFQLine = this;
                PurchRFQLineTaxExtensionIN purchRFQLineTaxExtensionIN = purchRFQLine.purchRFQLineTaxExtensionIN();
                return purchRFQLineTaxExtensionIN;

            case tableNum(SalesLine):
                salesLine = this;
                salesLine_IN = salesLine.salesLine_IN();
                return salesLine_IN;

            case tableNum(InventTransferLine):
                inventTransferLine = this;
                inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
                return inventTransferLineIN;

            case tableNum(InventTransferJourLine):
                inventTransferJourLine = this;
                inventTransferJourLineIN = inventTransferJourLine.inventTransferJourLine_IN();
                return inventTransferJourLineIN;
 
            case tableNum(CustInvoiceLine):
                custInvoiceLine = this;
                custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLine.RecId);
                return custInvoiceLineTaxExtension;

            case tableNum(LedgerJournalTrans_Project):
                ledgerJournalTrans_Project = this;
                ledgerJournalTrans_ProjectTaxExtensionIN = ledgerJournalTrans_Project.ledgerJournalTrans_ProjectTaxExtensionIN();
                return ledgerJournalTrans_ProjectTaxExtensionIN;

            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = this;
                projAdvancedJournalLineTaxExtensionIN = projAdvancedJournalLine.projAdvancedJournalLineTaxExtensionIN();
                return projAdvancedJournalLineTaxExtensionIN;

            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = this;
                ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
                return ledgerJournalTransTaxExt;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = this;
                salesQuotationLineTaxExtensionIN = salesQuotationLine.salesQuotationLineTaxExtensionIN();
                return salesQuotationLineTaxExtensionIN;

            case tableNum(TSTimesheetLine) :
                return TSTimesheetLineTaxExtensionIN::findByTSTimesheetLine(this.RecId);

            case tableNum(ProjCostTrans) :
                projCostTrans = this;
                projCostTransTaxExtensionIN = projCostTrans.projCostTransTaxExtensionIN();
                return projCostTransTaxExtensionIN;

            case tableNum(ProjEmplTrans) :
                projEmplTrans = this;
                projEmplTransTaxExtensionIN = projEmplTrans.projEmplTransTaxExtensionIN();
                return projEmplTransTaxExtensionIN;

            case tableNum(ProjItemTrans) :
                projItemTrans = this;
                projItemTransTaxExtensionIN = projItemTrans.projItemTransTaxExtensionIN();
                return projItemTransTaxExtensionIN;

            case tableNum(ProjRevenueTrans) :
                projRevenueTrans = this;
                projRevenueTransTaxExtensionIN = projRevenueTrans.projRevenueTransTaxExtensionIN();
                return projRevenueTransTaxExtensionIN;

            default:
                // the default is that the same table is used for both maps
                common = this;
                return common;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize record from the company information.
    /// </summary>
    /// <param name="_companyId">
    /// The company id.
    /// </param>
    public void initFromCompanyInformation(CompanyId _companyId = curext())
    {
        CompanyInfo             companyInfoLoc;
        DirPartyLocation        dirPartyLocation;
        LogisticsLocation       logisticsLocation;
        SalesPurchJournalLineExtension_IN salesPurchJournalLineExtension_IN;

        companyInfoLoc = CompanyInfo::findByCompany_IN(_companyId);

        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);

        if (dirPartyLocation)
        {
            logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);

            salesPurchJournalLineExtension_IN = this.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN();
            this.SalesPurchJournalLine::packSalesPurchJournalLineExtension_IN(salesPurchJournalLineExtension_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSalesPurchJournalLineExtension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the sales purch journal line extension.
    /// </summary>
    /// <param name="_salesPurchJournalLineExtension_IN">
    /// The sales purch journal line extension for packing.
    /// </param>
    public void packSalesPurchJournalLineExtension_IN(SalesPurchJournalLineExtension_IN _salesPurchJournalLineExtension_IN)
    {
        CustInvoiceTrans        custInvoiceTrans;
        CustInvoiceTrans_IN     custInvoiceTrans_IN;
        MarkupTrans             markupTrans;
        MarkupTrans_IN          markupTransIN;

        switch (this.SourceTableId)
        {
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this;
                custInvoiceTrans_IN = _salesPurchJournalLineExtension_IN;
                custInvoiceTrans.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
                break;

            case tableNum(MarkupTrans):
                markupTrans = this;
                markupTransIN = _salesPurchJournalLineExtension_IN;
                markupTrans.packMarkupTrans_IN(markupTransIN);
                break;

            case tableNum(ProjCostTrans) :
                ProjCostTrans projCostTrans = this;
                ProjCostTransTaxExtensionIN projCostTransTaxExtIN = _salesPurchJournalLineExtension_IN;
                projCostTrans.packProjCostTrans_IN(projCostTransTaxExtIN);
                break;

            case tableNum(ProjEmplTrans) :
                ProjEmplTrans projEmplTrans = this;
                ProjEmplTransTaxExtensionIN projEmplTransTaxExtIN = _salesPurchJournalLineExtension_IN;
                projEmplTrans.packProjEmplTrans_IN(projEmplTransTaxExtIN);
                break;

            case tableNum(ProjItemTrans) :
                ProjItemTrans projItemTrans = this;
                ProjItemTransTaxExtensionIN projItemTransTaxExtIN = _salesPurchJournalLineExtension_IN;
                projItemTrans.packProjItemTrans_IN(projItemTransTaxExtIN);
                break;

            case tableNum(ProjRevenueTrans) :
                ProjRevenueTrans projRevenueTrans = this;
                ProjRevenueTransTaxExtensionIN projRevenueTransTaxExtIN = _salesPurchJournalLineExtension_IN;
                projRevenueTrans.packProjRevenueTrans_IN(projRevenueTransTaxExtIN);
                break;

            default:
                // no-op when one table implements the SalesPurchJournalLine and SalesPurchJournalLineExtension_IN maps
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the value of <c>AssessableValue_IN</c> field.
    /// </summary>
    /// <param name="_assessableValue">
    /// The value of <c>AssessableValue_IN</c> to set, optional.
    /// </param>
    /// <returns>
    /// <c>AssessableValue_IN</c>
    /// </returns>
    public AmountCur parmAssessableValue(AmountCur _assessableValue = 0)
    {
        CustInvoiceLine                             custInvoiceLine;
        CustInvoiceLineTaxExtensionIN               custInvoiceLineTaxExtension;
        CustInvoiceLineTemplate                     custInvoiceLineTemplate;
        CustInvoiceLineTemplateTaxExtension_IN      custInvoiceLineTemplateTaxExtension_IN;
        CustInvoiceTrans                            custInvoiceTrans;
        CustInvoiceTrans_IN                         custInvoiceTrans_IN;
        CustQuotationTrans                          custQuotationTrans;
        InventTransferLine                          inventTransferLine;
        InventTransferLine_IN                       inventTransferLineIN;
        InventTransferJourLine                      inventTransferJourLine;
        InventTransferJourLine_IN                   inventTransferJourLineIN;
        LedgerJournalTrans                          ledgerJournalTrans;
        LedgerJournalTransTaxExtensionIN            ledgerJournalTransTaxExt;
        PurchLine                                   purchLine;
        PurchLine_IN                                purchLine_IN;
        PurchParmLine                               purchParmLine;
        PurchParmLine_IN                            purchParmLine_IN;
        SalesLine                                   salesLine;
        SalesLine_IN                                salesLine_IN;
        SalesParmLine                               salesParmLine;
        SalesParmLine_IN                            salesParmLine_IN;
        SalesQuotationLine                          salesQuotationLine;
        SalesQuotationLineTaxExtensionIN            salesQuotationLineTaxExtensionIN;
        VendInvoiceInfoLine                         vendInvoiceInfoLine;
        VendInvoiceInfoLine_W                       vendInvoiceInfoLine_W;
        VendInvoiceTrans                            vendInvoiceTrans;
        LedgerJournalTrans_Project                  ledgerJournalTrans_Project;
        LedgerJournalTrans_ProjectTaxExtensionIN    ledgerJournalTrans_ProjectTaxExtensionIN;
        ProjAdvancedJournalLine                     projAdvancedJournalLine;
        ProjAdvancedJournalLineTaxExtensionIN       projAdvancedJournalLineTaxExtensionIN;
        ProjCostTrans                               projCostTrans;
        ProjCostTransTaxExtensionIN                 projCostTransTaxExtensionIN;
        ProjEmplTrans                               projEmplTrans;
        ProjEmplTransTaxExtensionIN                 projEmplTransTaxExtensionIN;
        ProjItemTrans                               projItemTrans;
        ProjItemTransTaxExtensionIN                 projItemTransTaxExtensionIN;
        ProjRevenueTrans                            projRevenueTrans;
        ProjRevenueTransTaxExtensionIN              projRevenueTransTaxExtensionIN;
        Common                                      common;

        switch (this.SourceTableId)
        {
            case tableNum(CustInvoiceLine):
                custInvoiceLine = this;
                custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLine.RecId);

                if (!prmisDefault(_assessableValue))
                {
                    custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = _assessableValue;
                }

                return custInvoiceLineTaxExtension.AssessableValueTransactionCurrency;

            case tableNum(CustInvoiceLineTemplate):
                custInvoiceLineTemplate = this;
                custInvoiceLineTemplateTaxExtension_IN = CustInvoiceLineTemplateTaxExtension_IN::findByCustInvoiceLineTemplateRecId(custInvoiceLineTemplate.RecId);

                if (!prmisDefault(_assessableValue))
                {
                    custInvoiceLineTemplateTaxExtension_IN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return custInvoiceLineTemplateTaxExtension_IN.AssessableValueTransactionCurrency;

            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this;
                custInvoiceTrans_IN = custInvoiceTrans.custInvoiceTrans_IN();

                if (!prmisDefault(_assessableValue))
                {
                    custInvoiceTrans_IN.AssessableValue_IN = _assessableValue;
                    custInvoiceTrans.packCustInvoiceTrans_IN(custInvoiceTrans_IN);
                }

                return custInvoiceTrans_IN.AssessableValue_IN;

            case tableNum(CustQuotationTrans):
                custQuotationTrans = this;

                if (!prmisDefault(_assessableValue))
                {
                    custQuotationTrans.AssessableValue_IN = _assessableValue;
                }

                return custQuotationTrans.AssessableValue_IN;

            case tableNum(InventTransferLine):
                inventTransferLine = this;
                inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
                if (!prmisDefault(_assessableValue))
                {
                    inventTransferLineIN.NetAmount = _assessableValue;
                }

                return inventTransferLineIN.NetAmount;

            case tableNum(inventTransferJourLine):
                inventTransferJourLine = this;
                inventTransferJourLineIN = inventTransferJourLine.inventTransferJourLine_IN();
                if (!prmisDefault(_assessableValue))
                {
                    inventTransferJourLineIN.AssessableValue = _assessableValue;
                }

                return inventTransferJourLineIN.AssessableValue;

            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = this;
                ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

                if (!prmisDefault(_assessableValue))
                {
                    ledgerJournalTransTaxExt.AssessableValueTransactionCurrency = _assessableValue;
                }

                return ledgerJournalTransTaxExt.AssessableValueTransactionCurrency;

            case tableNum(PurchLine):
                purchLine = this;
                purchLine_IN = purchLine.purchLine_IN();
                if (!prmisDefault(_assessableValue))
                {
                    purchLine_IN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return purchLine_IN.AssessableValueTransactionCurrency;

            case tableNum(PurchParmLine):
                purchParmLine = this;
                purchParmLine_IN = purchParmLine.purchParmLine_IN();

                if (!prmisDefault(_assessableValue))
                {
                    purchParmLine_IN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return purchParmLine_IN.AssessableValueTransactionCurrency;

            case tableNum(SalesLine):
                salesLine = this;
                salesLine_IN = salesLine.salesLine_IN();
                if (!prmisDefault(_assessableValue))
                {
                    salesLine_IN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return salesLine_IN.AssessableValueTransactionCurrency;

            case tableNum(SalesParmLine):
                salesParmLine = this;
                salesParmLine_IN = salesParmLine.salesParmLine_IN();
                if (!prmisDefault(_assessableValue))
                {
                    salesParmLine_IN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return salesParmLine_IN.AssessableValueTransactionCurrency;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = this;
                salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLine.RecId, true);
                if (!prmisDefault(_assessableValue))
                {
                    salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return salesQuotationLineTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

                if (!prmisDefault(_assessableValue))
                {
                    vendInvoiceInfoLine_W.AssessableValue_IN = _assessableValue;
                    vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
                }

                return vendInvoiceInfoLine_W.AssessableValue_IN;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this;

                if (!prmisDefault(_assessableValue))
                {
                    vendInvoiceTrans.AssessableValue_IN = _assessableValue;
                }

                return vendInvoiceTrans.AssessableValue_IN;

            case tableNum(LedgerJournalTrans_Project):
                ledgerJournalTrans_Project = this;
                ledgerJournalTrans_ProjectTaxExtensionIN = ledgerJournalTrans_Project.ledgerJournalTrans_ProjectTaxExtensionIN();
                if (!prmisDefault(_assessableValue))
                {
                    ledgerJournalTrans_ProjectTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }

                return ledgerJournalTrans_ProjectTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(ProjAdvancedJournalLine):
                projAdvancedJournalLine = this;
                projAdvancedJournalLineTaxExtensionIN = projAdvancedJournalLine.projAdvancedJournalLineTaxExtensionIN();
                if (!prmIsDefault(_assessableValue))
                {
                    projAdvancedJournalLineTaxExtensionIN.ProjectSalesAssessableValueTransactionCurrency = _assessableValue;
                }
                return projAdvancedJournalLineTaxExtensionIN.ProjectSalesAssessableValueTransactionCurrency;

            case tableNum(ProjCostTrans) :
                projCostTrans = this;
                projCostTransTaxExtensionIN = projCostTrans.projCostTransTaxExtensionIN();
                if (!prmIsDefault(_assessableValue))
                {
                    projCostTransTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }
                return projCostTransTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(ProjEmplTrans) :
                projEmplTrans = this;
                projEmplTransTaxExtensionIN = projEmplTrans.projEmplTransTaxExtensionIN();
                if (!prmIsDefault(_assessableValue))
                {
                    projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }
                return projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(ProjItemTrans) :
                projItemTrans = this;
                projItemTransTaxExtensionIN = projItemTrans.projItemTransTaxExtensionIN();
                if (!prmIsDefault(_assessableValue))
                {
                    projItemTransTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }
                return projItemTransTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(ProjRevenueTrans) :
                projRevenueTrans = this;
                projRevenueTransTaxExtensionIN = projRevenueTrans.projRevenueTransTaxExtensionIN();
                if (!prmIsDefault(_assessableValue))
                {
                    projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency = _assessableValue;
                }
                return projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency;

            case tableNum(MarkupTrans):

                return 0;

            case tableNum(SalesPurchJournalLine):
                if (this.SourceTableId == tableNum(vendInvoiceInfoLine))
                {
                    common = this;
                    vendInvoiceInfoLine = common as VendInvoiceInfoLine;
                    vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

                    if (!prmisDefault(_assessableValue))
                    {
                        vendInvoiceInfoLine_W.AssessableValue_IN = _assessableValue;
                        vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
                    }

                    return vendInvoiceInfoLine_W.AssessableValue_IN;
                }

                if (this.SourceTableId == tableNum(CustInvoiceLine))
                {
                    custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLine.RecId);

                    if (!prmisDefault(_assessableValue))
                    {
                        custInvoiceLineTaxExtension.AssessableValueTransactionCurrency = _assessableValue;
                    }

                    return custInvoiceLineTaxExtension.AssessableValueTransactionCurrency;
                }
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaximumRetailPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the value of <c>MaximumRetailPrice_IN</c> field.
    /// </summary>
    /// <param name="_maximumRetailPrice">
    /// The value of <c>MaximumRetailPrice_IN</c> to set, optional.
    /// </param>
    /// <returns>
    /// <c>MaximumRetailPrice_IN</c>
    /// </returns>
    public Amount parmMaximumRetailPrice(Amount _maximumRetailPrice = 0)
    {
        CustInvoiceLine                             custInvoiceLine;
        CustInvoiceLineTemplate                     custInvoiceLineTemplate;
        CustInvoiceLineTaxExtensionIN               custInvoiceLineTaxExtension;
        CustInvoiceLineTemplateTaxExtension_IN      custInvoiceLineTemplateTaxExtension_IN;
        CustQuotationTrans                          custQuotationTrans;
        InventTransferLine                          inventTransferLine;
        InventTransferLine_IN                       inventTransferLineIN;
        LedgerJournalTrans                          ledgerJournalTrans;
        LedgerJournalTransTaxExtensionIN            ledgerJournalTransTaxExt;
        PurchLine_IN                                purchLine_IN;
        PurchLine                                   purchLine;
        PurchParmLine                               purchParmLine;
        PurchParmLine_IN                            purchParmLine_IN;
        PurchReqLine                                purchReqLine;
        PurchReqLineTaxExtensionIN                  purchReqLineTaxExtensionIN;
        PurchRFQLine                                purchRFQLine;
        PurchRFQLineTaxExtensionIN                  purchRFQLineTaxExtensionIN;
        SalesLine                                   salesLine;
        SalesLine_IN                                salesLine_IN;
        SalesParmLine                               salesParmLine;
        SalesParmLine_IN                            salesParmLine_IN;
        SalesQuotationLine                          salesQuotationLine;
        SalesQuotationLineTaxExtensionIN            salesQuotationLineTaxExtensionIN;
        VendInvoiceInfoLine                         vendInvoiceInfoLine;
        VendInvoiceInfoLine_W                       vendInvoiceInfoLine_W;
        VendInvoiceTrans                            vendInvoiceTrans;
        ProjItemTransView_IN                        projItemTransView_IN;
        ProjOnAccTransView_IN                       projOnAccTransView_IN;
        ProjCostTransView_IN                        projCostTransView_IN;
        ProjEmplTransView_IN                        projEmplTransView_IN;
        ProjRevenueTransView_IN                     projRevenueTransView_IN;
        LedgerJournalTrans_Project                  ledgerJournalTrans_Project;
        LedgerJournalTrans_ProjectTaxExtensionIN    ledgerJournalTrans_ProjectTaxExtensionIN;
        Common                                      common;

        switch (this.SourceTableId)
        {
            case tableNum(CustInvoiceLine):
                custInvoiceLine             = this;
                custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLine.RecId);

                if (!prmisDefault(_maximumRetailPrice))
                {
                    custInvoiceLineTaxExtension.MaximumRetailPrice  = _maximumRetailPrice;
                }

                return custInvoiceLineTaxExtension.MaximumRetailPrice;

            case tableNum(CustInvoiceLineTemplate):
                custInvoiceLineTemplate = this;
                custInvoiceLineTemplateTaxExtension_IN = CustInvoiceLineTemplateTaxExtension_IN::findByCustInvoiceLineTemplateRecId(custInvoiceLineTemplate.RecId);

                if (!prmisDefault(_maximumRetailPrice))
                {
                    custInvoiceLineTemplateTaxExtension_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return custInvoiceLineTemplateTaxExtension_IN.MaximumRetailPrice;

            case tableNum(CustQuotationTrans):
                custQuotationTrans = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    custQuotationTrans.MaximumRetailPrice_IN = _maximumRetailPrice;
                }

                return custQuotationTrans.MaximumRetailPrice_IN;

            case tableNum(InventTransferLine):
                inventTransferLine = this;
                inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    inventTransferLineIN.UnitPrice = _maximumRetailPrice;
                }

                return inventTransferLineIN.UnitPrice;

            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = this;
                ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    ledgerJournalTransTaxExt.MaximumRetailPrice = _maximumRetailPrice;
                }

                return ledgerJournalTransTaxExt.MaximumRetailPrice;

            case tableNum(PurchLine):
                purchLine = this;
                purchLine_IN = purchLine.purchLine_IN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    purchLine_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return purchLine_IN.MaximumRetailPrice;

            case tableNum(PurchParmLine):
                purchParmLine = this;
                purchParmLine_IN = purchParmLine.purchParmLine_IN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    purchParmLine_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return purchParmLine_IN.MaximumRetailPrice;

            case tableNum(PurchReqLine):
                purchReqLine = this;
                purchReqLineTaxExtensionIN = purchReqLine.purchReqLineTaxExtensionIN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    purchReqLineTaxExtensionIN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return purchReqLineTaxExtensionIN.MaximumRetailPrice;

            case tableNum(PurchRFQLine):
                purchRFQLine = this;
                purchRFQLineTaxExtensionIN = purchRFQLine.purchRFQLineTaxExtensionIN();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    purchRFQLineTaxExtensionIN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return purchRFQLineTaxExtensionIN.MaximumRetailPrice;

            case tableNum(SalesLine):
                salesLine = this;
                salesLine_IN = salesLine.salesLine_IN();
                if (!prmisDefault(_maximumRetailPrice))
                {
                    salesLine_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return salesLine_IN.MaximumRetailPrice;

            case tableNum(SalesParmLine):
                salesParmLine = this;
                salesParmLine_IN = salesParmLine.salesParmLine_IN();
                if (!prmisDefault(_maximumRetailPrice))
                {
                    salesParmLine_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return salesParmLine_IN.MaximumRetailPrice;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = this;
                salesQuotationLineTaxExtensionIN = SalesQuotationLineTaxExtensionIN::findBysalesQuotationLine(salesQuotationLine.RecId, true);
                if (!prmisDefault(_maximumRetailPrice))
                {
                    salesQuotationLineTaxExtensionIN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return salesQuotationLineTaxExtensionIN.MaximumRetailPrice;

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

                if (!prmisDefault(_maximumRetailPrice))
                {
                    vendInvoiceInfoLine_W.MaximumRetailPrice_IN = _maximumRetailPrice;
                    vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
                }

                return vendInvoiceInfoLine_W.MaximumRetailPrice_IN;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    vendInvoiceTrans.MaximumRetailPrice_IN = _maximumRetailPrice;
                }

                return vendInvoiceTrans.MaximumRetailPrice_IN;

            case tableNum(ProjCostTrans):
                projCostTransView_IN = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    projCostTransView_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return projCostTransView_IN.MaximumRetailPrice;

            case tableNum(ProjEmplTrans):
                projEmplTransView_IN = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    projEmplTransView_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return projEmplTransView_IN.MaximumRetailPrice;

            case tableNum(ProjRevenueTrans):
                projRevenueTransView_IN = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    projRevenueTransView_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return projRevenueTransView_IN.MaximumRetailPrice;

            case tableNum(ProjItemTrans):
                projItemTransView_IN = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    projItemTransView_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return projItemTransView_IN.MaximumRetailPrice;

            case tableNum(ProjOnAccTrans):
                projOnAccTransView_IN = this;

                if (!prmisDefault(_maximumRetailPrice))
                {
                    projOnAccTransView_IN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return projOnAccTransView_IN.MaximumRetailPrice;

            case tableNum(LedgerJournalTrans_Project):
                ledgerJournalTrans_Project = this;
                ledgerJournalTrans_ProjectTaxExtensionIN = ledgerJournalTrans_Project.ledgerJournalTrans_ProjectTaxExtensionIN();
                if (!prmisDefault(_maximumRetailPrice))
                {
                    ledgerJournalTrans_ProjectTaxExtensionIN.MaximumRetailPrice = _maximumRetailPrice;
                }

                return ledgerJournalTrans_ProjectTaxExtensionIN.MaximumRetailPrice;

            case tableNum(MarkupTrans):

                return 0;

            case tableNum(SalesPurchJournalLine):
                if (this.SourceTableId == tableNum(vendInvoiceInfoLine))
                {
                    common = this;
                    vendInvoiceInfoLine = common as VendInvoiceInfoLine;

                    vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

                    if (!prmisDefault(_maximumRetailPrice))
                    {
                        vendInvoiceInfoLine_W.MaximumRetailPrice_IN = _maximumRetailPrice;
                        vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
                    }

                    return vendInvoiceInfoLine_W.MaximumRetailPrice_IN;
                }

                if (this.SourceTableId == tableNum(CustInvoiceLine))
                {
                    common                      = this;
                    custInvoiceLine             = common as CustInvoiceLine;
                    custInvoiceLineTaxExtension = CustInvoiceLineTaxExtensionIN::findByCustInvoiceLine(custInvoiceLine.RecId);

                    if (!prmisDefault(_maximumRetailPrice))
                    {
                        custInvoiceLineTaxExtension.MaximumRetailPrice  = _maximumRetailPrice;
                    }

                    return custInvoiceLineTaxExtension.MaximumRetailPrice;
                }

                throw error(strFmt("@SYS19306", funcName())); // incorrect use

            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the rec id of the sales purch journal line.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <param name="_forUpdate">
    /// True if the record will be update.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalLine</c> class.
    /// </returns>
    public static SalesPurchJournalLine findRecId(TableId _tableId, RecId _recId, boolean _forUpdate = false)
    {
        SalesPurchJournalLine ret;

        ret = SalesPurchJournalLine::getBuffer(_tableId);

        ret.selectForUpdate(_forUpdate);

        select firstOnly * from ret
            where ret.SourceRecId == _recId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records from the table buffer.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalLine</c> class
    /// </returns>
    public static SalesPurchJournalLine getBuffer(TableId _tableId)
    {
        SalesPurchJournalLine           ret;
        PurchLine                       purchLine;
        VendInvoiceTrans                vendInvoiceTrans;
        CustInvoiceLine                 custInvoiceLine;
        CustInvoiceTrans                custInvoiceTrans;
        InventJournalTrans              inventJournalTrans;
        InventQualityOrderTable         inventQualityOrderTable;
        InventTransferLine              inventTransferLine;
        InventTransferParmLine          inventTransferParmLine;
        InventTransferJourLine          inventTransferJourLine;
        LedgerJournalTrans              ledgerJournalTrans;
        ProdJournalBOM                  prodJournalBOM;
        PurchParmLine                   purchParmLine;
        PurchReqLine                    purchReqLine;
        PurchRFQLine                    purchRFQLine;
        PurchRFQCaseLine                purchRFQCaseLine;
        VendRFQTrans                    vendRFQTrans;
        SalesLine                       salesLine;
        SalesParmLine                   salesParmLine;
        SalesQuotationLine              salesQuotationLine;
        SalesQuotationParmLine          salesQuotationParmLine;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        VendPackingSlipTrans            vendPackingSlipTrans;
        CustPackingSlipTrans            custPackingSlipTrans;
        CustQuotationTrans              custQuotationTrans;
        ProdTable                       prodTable;
        BOMParmReportFinish             bomParmReportFinish;

        ProjCostTransSale               projCostTransSale;
        ProjCostTrans                   projCostTrans;
        ProjEmplTransSale               projEmplTransSale;
        ProjEmplTrans                   projEmplTrans;
        TSTimesheetLine                 tsTimesheetLine;
        ProjProposalItem                projProposalItem;
        ProjItemTransSale               projItemTransSale;
        ProjItemTrans                   projItemTrans;
        ProjOnAccTransSale              projOnAccTransSale;
        ProjOnAccTrans                  projOnAccTrans;
        ProjRevenueTransSale            projRevenueTransSale;
        ProjRevenueTrans                projRevenueTrans;
        ProjTable                       projTable;
        ProjInvoiceTable                projInvoiceTable;
        PSAContractLineItems            psaContractLineItems;
        SMAServiceOrderLine             smaServiceOrderLine;
        LedgerJournalTrans_Project      ledgerJournalTrans_Project;
        ProjJournalTrans                projJournalTrans;
        MarkupTrans                     markupTrans;
        TaxEngineTaxJournalLine         taxJournalLine;
        AgreementLine                   agreementLine;
        CustInvoiceLineTemplate         custInvoiceLineTemplate;
        ProjInvoiceRevenue              projInvoiceRevenue;
        ProjInvoiceOnAcc                projInvoiceOnAcc;
        ProjInvoiceEmpl                 projInvoiceEmpl;
        ProjInvoiceCost                 projInvoiceCost;
        ProjInvoiceItem                 projInvoiceItem;
        CustConfirmTrans                custConfirmTrans;
        ProjAdvancedJournalLine         projAdvancedJournalLine;
        ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtensionIN;

        // <GIN>
        CustomsShippingBillTrans_IN             customsShippingBillTrans;
        CustomsVendBOETrans_IN                  customsVendBOETrans;
        // </GIN>

        switch (_tableId)
        {
            case tableNum(PurchLine) :
                ret = purchLine;
                break;
            case tableNum(VendInvoiceTrans) :
                ret = vendInvoiceTrans;
                break;
            case tableNum(CustInvoiceLine) :
                ret = custInvoiceLine;
                break;
            case tableNum(CustInvoiceTrans) :
                ret = custInvoiceTrans;
                break;
            case tableNum(InventJournalTrans) :
                ret = inventJournalTrans;
                break;
            case tableNum(InventQualityOrderTable) :
                ret = inventQualityOrderTable;
                break;
            case tableNum(InventTransferLine) :
                ret = inventTransferLine;
                break;
            case tableNum(InventTransferParmLine) :
                ret = inventTransferParmLine;
                break;
            case tableNum(InventTransferJourLine) :
                ret = inventTransferJourLine;
                break;
            case tableNum(LedgerJournalTrans) :
                ret = ledgerJournalTrans;
                break;
            case tableNum(LedgerJournalTrans_Project) :
                ret = ledgerJournalTrans_Project;
                break;
            case tableNum(ProdJournalBOM) :
                ret = prodJournalBOM;
                break;
            case tableNum(PurchParmLine) :
                ret = purchParmLine;
                break;
            case tableNum(PurchReqLine) :
                ret = purchReqLine;
                break;
            case tableNum(SalesLine) :
                ret = salesLine;
                break;
            case tableNum(SalesParmLine) :
                ret = salesParmLine;
                break;
            case tableNum(SalesQuotationLine) :
                ret = salesQuotationLine;
                break;
            case tableNum(SalesQuotationParmLine) :
                ret = salesQuotationParmLine;
                break;
            case tableNum(VendInvoiceInfoLine) :
                ret = vendInvoiceInfoLine;
                break;
            case tableNum(PurchRFQLine) :
                ret = purchRFQLine;
                break;
            case tableNum(PurchRFQCaseLine) :
                ret = purchRFQCaseLine;
                break;
            case tableNum(vendRFQTrans) :
                ret = vendRFQTrans;
                break;
            case tableNum(VendPackingSlipTrans) :
                ret = vendPackingSlipTrans;
                break;
            case tableNum(CustPackingSlipTrans) :
                ret = custPackingSlipTrans;
                break;
            case tableNum(CustQuotationTrans) :
                ret = custQuotationTrans;
                break;
            case tableNum(ProjCostTransSale) :
                ret = projCostTransSale;
                break;
            case tableNum(ProjCostTrans) :
                ret = projCostTrans;
                break;
            case tableNum(ProjEmplTransSale) :
                ret = projEmplTransSale;
                break;
            case tableNum(ProjEmplTrans) :
                ret = projEmplTrans;
                break;
            case tableNum(TSTimesheetLine) :
                ret = tsTimesheetLine;
                break;
            case tableNum(ProjItemTransSale) :
                ret = projItemTransSale;
                break;
            case tableNum(ProjProposalItem) :
                ret = projProposalItem;
                break;
            case tableNum(ProjItemTrans) :
                ret = projItemTrans;
                break;
            case tableNum(ProjOnAccTransSale) :
                ret = projOnAccTransSale;
                break;
            case tableNum(ProjOnAccTrans) :
                ret = projOnAccTrans;
                break;
            case tableNum(ProjRevenueTransSale) :
                ret = projRevenueTransSale;
                break;
            case tableNum(ProjRevenueTrans) :
                ret = projRevenueTrans;
                break;
            case tableNum(ProjInvoiceTable) :
                ret = projInvoiceTable;
                break;
            case tableNum(ProjTable) :
                ret = projTable;
                break;
            case tableNum(PSAContractLineItems) :
                ret = psaContractLineItems;
                break;
            case tableNum(SMAServiceOrderLine) :
                ret = smaServiceOrderLine;
                break;
            case tableNum(ProdTable) :
                ret = prodTable;
                break;
            case tableNum(BOMParmReportFinish) :
                ret = bomParmReportFinish;
                break;
            case tableNum(ProjJournalTrans) :
                ret = projJournalTrans;
                break;
            case tableNum(ProjAdvancedJournalLine):
                ret = projAdvancedJournalLine;
                break;
            case tableNum(ProjAdvancedJournalLineTaxExtensionIN):
                ret = projAdvancedJournalLineTaxExtensionIN;
                break;
            case tableNum(MarkupTrans) :
                ret = markupTrans;
                break;
            case tableNum(TaxEngineTaxJournalLine) :
                ret = taxJournalLine;
                break;
            case tableNum(AgreementLine) :
                ret = agreementLine;
                break;
            // <GIN>
            case tableNum(CustInvoiceLineTemplate) :
                ret = custInvoiceLineTemplate;
                break;
            case tableNum(CustomsShippingBillTrans_IN) :
                ret = customsShippingBillTrans;
                break;
            case tableNum(CustomsVendBOETrans_IN) :
                ret = customsVendBOETrans;
                break;
            case tableNum(ProjInvoiceRevenue) :
                ret = projInvoiceRevenue;
                break;
            case tableNum(ProjInvoiceOnAcc) :
                ret = projInvoiceOnAcc;
                break;
            case tableNum(ProjInvoiceEmpl) :
                ret = projInvoiceEmpl;
                break;
            case tableNum(ProjInvoiceCost) :
                ret = projInvoiceCost;
                break;
            case tableNum(ProjInvoiceItem) :
                ret = projInvoiceItem;
                break;
            case tableNum(CustConfirmTrans) :
                ret = custConfirmTrans;
                break;
            // </GIN>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set company location for each transaction table.
    /// </summary>
    /// <param name="_companyLocation">
    /// The company location recId.
    /// </param>
    public void setLocation(LogisticsLocationRecId _companyLocation)
    {
        SysDictTable dictTable;
        str          setLocationMethod = 'setLocation';

        dictTable = new SysDictTable(this.SourceTableId);

        if (dictTable.isMethodActual(setLocationMethod))
        {
            this.setLocation(_companyLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sales purch journal table for tax model.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> class.
    /// </returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        PurchLine                           purchLine;
        PurchParmLine                       purchParmLine;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        VendInvoiceTrans                    vendInvoiceTrans;
        SalesLine                           salesLine;
        SalesParmLine                       salesParmLine;
        CustInvoiceLine                     custInvoiceLine;
        CustInvoiceTrans                    custInvoiceTrans;
        LedgerJournalTrans                  ledgerJournalTrans;
        InventTransferLine                  inventTransferLine;
        PurchReqLine                        purchReqLine;
        PurchRFQLine                        purchRFQLine;
        PurchRFQReplyLine                   purchRFQReplyLine;
        SalesQuotationLine                  salesQuotationLine;
        SalesQuotationParmLine              salesQuotationParmLine;
        InventQualityOrderTable             inventQualityOrderTable;
        TaxEngineTaxJournalLine             taxEngineTaxJournalLine;
        SMAServiceOrderLine                 smaServiceOrderLine;

        // <GIN>
        PurchLineView_IN                    purchLineView;
        SalesLineView_IN                    salesLineView;
        // </GIN>

        SysDictTable                        dictTable = new SysDictTable(this.SourceTableId);

        switch (this.SourceTableId)
        {
            case tableNum(PurchLine):
                // <GIN>
                if (this.TableId == tableNum(PurchLineView_IN))
                {
                    purchLineView = this;
                    purchLine = purchLine::findRecId(purchLineView.RecId);
                }
                else
                {
                // </GIN>
                    purchLine = this;
                // <GIN>
                }
                // </GIN>
                return purchLine.purchTable();

            case tableNum(PurchParmLine):
                purchParmLine = this;
                return purchParmLine.purchParmTable();

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                return vendInvoiceInfoLine.vendInvoiceInfoTable();

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this;
                return vendInvoiceTrans.vendInvoiceJour();

            case tableNum(SalesLine):
                ProjProposalItem projProposalItem = ProjProposalItem::findInvent(this.InventTransId);

                // <GIN>
                if (this.TableId == tableNum(SalesLineView_IN))
                {
                    salesLineView = this;
                    salesLine = salesLineView.SalesLine();
                }
                else if (projProposalItem)
                {
                    ProjProposalJour projProposalJour = ProjProposalJour::find(projProposalItem.ProposalId);
                    return TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
                }
                else
                {
                // </GIN>
                    salesLine = this;
                // <GIN>
                }
                // </GIN>
                return salesLine.salesTable();

            case tableNum(SalesParmLine):
                salesParmLine = this;
                return salesParmLine.salesParmTable();

            case tableNum(CustInvoiceLine):
                custInvoiceLine = this;
                return custInvoiceLine.custInvoiceTable();

            case tableNum(CustInvoiceTrans):
                custInvoiceTrans = this;
                return custInvoiceTrans.custInvoiceJour();

            case tableNum(ledgerJournalTrans):
                ledgerJournalTrans = this;
                if (TaxEngineTaxJournalUtil::isLedgerJournalTableCreatedFromTaxJournal(ledgerJournalTrans.ledgerJournalTable().RecId))
                {
                    return ledgerJournalTrans.ledgerJournalTable();
                }
                else
                {
                    return TaxEngineLedgerJournalTransHeader::findByJourNumVoucher(
                        ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher);
                }
             
                case tableNum(InventTransferLine):
                    inventTransferLine = this;
                    return inventTransferLine.inventTransferTable();

                case tableNum(PurchReqLine):
                    purchReqLine = this;
                    return TaxEnginePurchReqHeader::findByPurchReqLineRecId(purchReqLine.RecId);

                case tableNum(PurchRFQLine):
                    purchRFQLine = this;
                    return purchRFQLine.purchRFQTable();

                case tableNum(SalesQuotationLine):
                    salesQuotationLine = this;
                    return salesQuotationLine.salesQuotationTable();

                case tableNum(SalesQuotationParmLine):
                    salesQuotationParmLine = this;
                    return SalesQuotationParmLine.salesQuotationParmTable();
             
                case tableNum(TaxEngineTaxJournalLine):
                    taxEngineTaxJournalLine = this;
                    return taxEngineTaxJournalLine.TaxEngineTaxJournal();     
                
                case tableNum(InventQualityOrderTable) :
                    inventQualityOrderTable = this;
                    return inventQualityOrderTable;

                case tableNum(SMAServiceOrderLine):
                    smaServiceOrderLine = this;
                    return SMAServiceOrderTable::find(smaServiceOrderLine.ServiceOrderId);

                default:
                    if (dictTable.isMethodActual('salesPurchJournalTable'))
                    {
                        // the default is to return the method from table level.
                        return this.salesPurchJournalTable();
                    }
                    else
                    {
                        return null;
                    }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to all <c> transactions </c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    public boolean taxRecalculationNeeded(Common _origTransactionTable = null)
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        SysDictTable    dictTable;
        str             taxRecalculationNeededMethod = 'taxRecalculationNeeded';
        str             hasIndirectTaxFieldChangedMethod_IN = 'hasIndirectTaxFieldChanged_IN';
        boolean         updateNeeded = false;

        dictTable = new SysDictTable(this.SourceTableId);

        if (dictTable.isMethodActual(taxRecalculationNeededMethod))
        {
            updateNeeded = this.taxRecalculationNeeded(_origTransactionTable);

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
                dictTable.isMethodActual(hasIndirectTaxFieldChangedMethod_IN))
            {
                updateNeeded = updateNeeded || this.hasIndirectTaxFieldChanged_IN(_origTransactionTable);
            }
            // </GIN>
        }

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTaxDocumentLineRowString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build tax document line display string.
    /// </summary>
    /// <param name="_dictTable">
    /// Source _dictTable.
    /// </param>
    /// <param name="_buffer">
    /// Source transaction record.
    /// </param>
    /// <returns>
    /// Tax document row display string.
    /// </returns>
    public static str buildTaxDocumentLineRowString(DictTable _dictTable, Common _buffer)
    {
        TaxDocumentDisplayString    ret;
        TableId                     tableId;
        TableName                   tableName;
        FieldId                     displayField1;
        FieldId                     displayField2;
        FieldId                     displayField2Replacement;
        anytype                     fieldValue1;
        anytype                     fieldValue2;
        EcoResCategoryName          fieldValueName;

        #define.LineNum('LineNum')
        #define.ItemId('ItemId')
        #define.ProcurementCategory('ProcurementCategory')
        #define.CategoryId('CategoryId')
        #define.SalesCategory('SalesCategory')

        tableId     = _dictTable.id();
        tableName   = _dictTable.name();

        switch (tableId)
        {
            case tableNum(PurchLine) : 
                displayField1 = fieldNum(PurchLine, LineNumber);
                displayField2 = fieldNum(PurchLine, ItemId);
                displayField2Replacement = fieldnum(PurchLine, ProcurementCategory);
                break;
            case tableNum(PurchParmLine) : 
            case tableNum(VendPackingSlipTrans) : 
            case tableNum(VendInvoiceInfoLine) : 
            case tableNum(VendInvoiceTrans) : 
            case tableNum(PurchReqLine) : 
                displayField1 = _dictTable.fieldName2Id(#LineNum);
                displayField2 = _dictTable.fieldName2Id(#ItemId);
                displayField2Replacement = _dictTable.fieldName2Id(#ProcurementCategory);
                break;
            case tableNum(PurchRFQCaseLine) : 
            case tableNum(PurchRFQLine) : 
            case tableNum(PurchRFQParmLine) : 
            case tableNum(VendRFQTrans) : 
                displayField1 = _dictTable.fieldName2Id(#LineNum);
                displayField2 = _dictTable.fieldName2Id(#ItemId);
                displayField2Replacement = _dictTable.fieldName2Id(#CategoryId);
                break;
            case tableNum(SalesLine) : 
            case tableNum(CustConfirmTrans) : 
            case tableNum(SalesParmLine) : 
            case tableNum(CustInvoiceTrans) : 
            case tableNum(CustPackingSlipTrans) : 
            case tableNum(SalesQuotationLine) : 
            case tableNum(SalesQuotationParmLine) : 
            case tableNum(CustQuotationTrans) : 
            case tableNum(CustQuotationConfirmTrans) : 
                displayField1 = _dictTable.fieldName2Id(#LineNum);
                displayField2 = _dictTable.fieldName2Id(#ItemId);
                displayField2Replacement = _dictTable.fieldName2Id(#SalesCategory);
                break;
            case tableNum(InventTransferLine) :
            case tableNum(InventTransferParmLine) :
            case tableNum(InventTransferJourLine) :
                displayField1 = _dictTable.fieldName2Id(#LineNum);
                displayField2 = _dictTable.fieldName2Id(#ItemId);
                break;
            case tableNum(CustInvoiceLine) :
                displayField1 = fieldNum(CustInvoiceLine, LineNum);
                displayField2 = fieldNum(CustInvoiceLine, Description);
                break;
            case tableNum(MarkupTrans) :
                displayField1 = fieldNum(MarkupTrans, LineNum);
                displayField2 = fieldNum(MarkupTrans, MarkupCode);
                break;
            // <GIN>
            case tableNum(CustomsVendBOETrans_IN) :
                displayField1 = fieldNum(CustomsVendBOETrans_IN, InventTransId);
                displayField2 = fieldNum(CustomsVendBOETrans_IN, ItemId);
                break;
            case tableNum(CustomsShippingBillTrans_IN) :
                displayField1 = fieldNum(CustomsShippingBillTrans_IN, InventTransId);
                displayField2 = fieldNum(CustomsShippingBillTrans_IN, ItemId);
                break;
            // </GIN>
            case tableNum(LedgerJournalTrans) :
                displayField1 = fieldNum(LedgerJournalTrans, LineNum);
                displayField2 = fieldNum(LedgerJournalTrans, Voucher);
                break;
            default :
                displayField1 = _dictTable.titleField1();
                displayField2 = _dictTable.titleField2();
        }

        str fieldLabel1, fieldLabel2;
        if (displayField1)
        {
            fieldValue1 = _buffer.getFieldValue(fieldId2name(tableId, displayField1));
            fieldLabel1 = TaxIntegrationUtils::getFieldLabel(tableId, displayField1);
        }

        if (displayField2)
        {
            fieldValue2 = _buffer.getFieldValue(fieldId2name(tableId, displayField2));
            fieldLabel2 = TaxIntegrationUtils::getFieldLabel(tableId, displayField2);
        }

        if (!fieldValue2 && displayField2Replacement)
        {
            fieldValueName = EcoResCategory::find(_buffer.getFieldValue(fieldId2name(tableId, displayField2Replacement))).Name;
        }

        ret = tableName;

        if (fieldValue1)
        {
            ret += strFmt(
                " %1: %2,",
                fieldLabel1,
                fieldValue1);
        }
        
        if (fieldValue2)
        {
            ret += strFmt(
                " %1: %2,",
                fieldLabel2,
                fieldValue2);
        }
        else if (displayField2Replacement)
        {
            ret += strFmt(" %1: %2,",
                TaxIntegrationUtils::getFieldLabel(tableId, displayField2Replacement),
                fieldValue2);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS64183</DeveloperDocumentation>
	<Label>@GLS5561</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>CategoryId</Name>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DeliveryLocation</Name>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryState</Name>
			<ExtendedDataType>AddressStateId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SourceId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>SourceTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SalesPurchQty</Name>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SalesPurchUnit</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>IntrastatCommodity</Name>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>OverrideSalesTax</Name>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>