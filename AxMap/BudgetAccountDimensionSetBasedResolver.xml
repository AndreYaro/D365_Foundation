<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAccountDimensionSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetAccountDimensionSetBasedResolver extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set-based resolution of budget dimensions for a data entity.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A definition group for import session being executed.</param>
    /// <param name = "_staging">A staging table for an entity which contains dimension recid.</param>
    /// <returns>Cache with resolved budget dimension display values.</returns>
    public static DimensionDataEntitySFKCacheTmp Resolve(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, BudgetAccountDimensionSetBasedResolver _staging, FieldName _columnName, TableName _stagingTableName, TableName _entityName)
    {
        DimensionDataEntitySFKCacheTmp dimCacheTmp;
        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
        DimensionDataEntitySFKCache dimCache;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityBudgetDimensionFormat;
        ExtendedDataTypeName dataType = extendedTypeStr(LedgerDimensionBudget);
        const NoYes found = NoYes::Yes;
        const NoYes notFound = NoYes::No;
        const int64 zero = 0;

        dimCacheTmpRef.linkPhysicalTableInstance(dimCacheTmp);

        // Resolve dimension SFK's from cache when possible.
        insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found, HierarchyName, ResolvedReference)
            select DimensionDisplayValue, hierarchyType, dataType, found, AccountStructure from _staging
                group by AccountStructure, DimensionDisplayValue
                where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated)
            join ResolvedReference from dimCache
                group by ResolvedReference
                where dimCache.IntegrationString == _staging.DimensionDisplayValue
                   && dimCache.HierarchyName == _staging.AccountStructure
                   && dimCache.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCache.HierarchyType == hierarchyType
                   && dimCache.ExtendedDataType == dataType;

        // Remove this insert_recordset and change the join above to an outer join when workaround
        // is no longer needed. Right now outer joins are not initializing fields to default values
        // so the above join throws an exception instead of inserting zero for dimension
        // combinations that are not yet cached. The temporary workaround is a separate notexists insert.
        insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found, ResolvedReference, HierarchyName)
            select DimensionDisplayValue, hierarchyType, dataType, notFound, zero, AccountStructure from _staging
                group by AccountStructure, DimensionDisplayValue
                where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join dimCacheTmpRef
                group by ResolvedReference
                where dimCacheTmpRef.IntegrationString == _staging.DimensionDisplayValue
                   && dimCacheTmpRef.HierarchyName == _staging.AccountStructure
                   && dimCacheTmpRef.EnumValue == enum2int(LedgerJournalACType::Ledger)
                   && dimCacheTmpRef.HierarchyType == hierarchyType
                   && dimCacheTmpRef.ExtendedDataType == dataType;

        // For the values not found in cache, look them up individually.
        int initialLineCount;
        DimensionDataEntitySFKErrorTmp errorTmp;
        while select forupdate dimCacheTmp where dimCacheTmp.Found == NoYes::No
        {
            initialLineCount = Global::infologLine();
            try
            {
                dimCacheTmp.ResolvedReference = BudgetAccountDimensionResolver::newResolver(dimCacheTmp.IntegrationString, dimCacheTmp.HierarchyName).resolve();
                dimCacheTmp.Found = NoYes::Yes;

                // Update the temp table with the newly resolved value.
                ttsbegin;
                dimCacheTmp.doUpdate();
                ttscommit;
            }
            catch
            {
                // Invalid accounts will raise an exception, but should
                // not cause the full import process to fail. Instead those
                // rows need to be marked as error, which is done in the caller.
                // Capture the error and information required to write to DMF
                // validation log
                errorTmp.IntegrationString = dimCacheTmp.IntegrationString;
                errorTmp.HierarchyType = dimCacheTmp.HierarchyType;
                errorTmp.ResolvedReference = dimCacheTmp.ResolvedReference;
                errorTmp.ExtendedDataType = dimCacheTmp.ExtendedDataType;
                errorTmp.EnumValue = dimCacheTmp.EnumValue;
                errorTmp.HierarchyName = dimCacheTmp.HierarchyName;
                errorTmp.IntegrationString = dimCacheTmp.IntegrationString;

                for (int infoLogLine = initialLineCount + 1; infoLogLine <= Global::infologLine(); infoLogLine++)
                {
                    errorTmp.Error += infolog.text(infoLogLine);
                }

                errorTmp.insert();
                errorTmp.clear();
            }
        }

        // write errors to DMF validation log.
        DMFStagingValidationLog log;
        log.skipDataMethods(true);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        insert_recordset log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, Staging, _stagingTableName, _columnName, sourceTarget, _entityName from _staging
                where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                join Error from errorTmp
                where errorTmp.IntegrationString == _staging.DimensionDisplayValue
                    && errorTmp.HierarchyName == _staging.AccountStructure
                    && errorTmp.EnumValue == enum2int(LedgerJournalACType::Ledger)
                    && errorTmp.HierarchyType == DimensionHierarchyType::DataEntityBudgetDimensionFormat
                    && errorTmp.ExtendedDataType == dataType;

        return dimCacheTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Budget:MessageDeveloper_BudgetAccountDimensionSetBasedResolverDevDoc</DeveloperDocumentation>
	<Label>@Budget:MessageDeveloper_BudgetAccountDimensionSetBasedResolverTitle</Label>
	<TableGroup>Staging</TableGroup>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountStructure</Name>
			<ExtendedDataType>NameOfTaxAccountant_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DimensionDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransferStatus</Name>
			<EnumType>DMFTransferStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Staging</Name>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>