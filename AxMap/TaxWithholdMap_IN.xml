<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdMap_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdMap_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate date parameter.
    /// </summary>
    /// <returns>
    /// The accounting date information.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        SourceDocumentLineImplementation   sourceDocumentLineImplementation;
        DictTable               dictTable;
        AccountingDate          exchangeRateDate;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), this.SourceTableId))
        {
            dictTable = new DictTable(this.SourceTableId);
            sourceDocumentLineImplementation = dictTable.makeRecord();

            select RecId from sourceDocumentLineImplementation
            where sourceDocumentLineImplementation.RecId == this.SourceRecId;

            exchangeRateDate = sourceDocumentLineImplementation.parmExchangeRateDate();
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent source document line parameter.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SourceDocumentLine</c> class.
    /// </returns>
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        SourceDocumentLineImplementation   sourceDocumentLineImplementation;
        DictTable               dictTable;
        SourceDocumentLine      parentSourceDocumentLine;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), this.SourceTableId))
        {
            dictTable = new DictTable(this.SourceTableId);
            sourceDocumentLineImplementation = dictTable.makeRecord();

            select SourceDocumentLine from sourceDocumentLineImplementation
            where sourceDocumentLineImplementation.RecId == this.SourceRecId;

            parentSourceDocumentLine = SourceDocumentLine::find(sourceDocumentLineImplementation.SourceDocumentLine);
        }

        return parentSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum name of the source document line type.
    /// </summary>
    /// <returns>
    /// The enum name of the source document line.
    /// </returns>
    public enumName parmSourceDocLineTypeEnumName()
    {
        SourceDocumentLineImplementation   sourceDocumentLineImplementation;
        DictTable               dictTable;
        enumName                typeEnumName;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), this.SourceTableId))
        {
            dictTable = new DictTable(this.SourceTableId);
            sourceDocumentLineImplementation = dictTable.makeRecord();

            select RecId from sourceDocumentLineImplementation
            where sourceDocumentLineImplementation.RecId == this.SourceRecId;

            typeEnumName = sourceDocumentLineImplementation.parmSourceDocLineTypeEnumName();
        }

        return typeEnumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enum value of the source document line type.
    /// </summary>
    /// <returns>
    /// The enum value of the source document type.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        // Insert and reference a source document line, for TDS/TCS, only FTI, PO, VendInvoice is supported
        switch (this.SourceTableId)
        {
            case tablenum(CustInvoiceLine):
            case tablenum(CustInvoiceTrans):
                return SourceDocumentLine_CustomerInvoice::CustomerInvoiceWithHoldingTaxLine;

            case tablenum(PurchLine) :
                return SourceDocumentLine_ProductOrder::PurchaseOrderWithholdTaxLine;

            case tablenum(VendInvoiceInfoLine) :
                return SourceDocumentLine_VendorInvoice::VendorInvoiceWithholdingTaxLine;

            case tablenum(VendInvoiceTrans) :
                if (LedgerPostingsOccursOnSingleVoucher_INFlight::instance().isEnabled())
                {
                    return SourceDocumentLine_VendorInvoice::VendorInvoiceWithholdingTaxLine;
                }
                break;
            case tableNum(ProjAdvancedJournalLine) :
                return SourceDocumentLine_ProjAdvancedJournal::ProjAdvancedJournalWithholdingTaxLine;

        }
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header parameter.
    /// </summary>
    /// <returns>
    /// The source document header information.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader        sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.parmParentSourceDocumentLine().SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold direction parameter.
    /// </summary>
    /// <returns>
    /// The tax withhold direction information.
    /// </returns>
    public TaxWithholdDirection_IN parmTaxWithholdDirection()
    {
        TaxWithholdDirection_IN taxWithholdDirection;
        switch (this.SourceTableId)
        {
            case tableNum(Purchline),
                 tableNum(VendInvoiceInfoLine) :
                if (this.TaxWithholdType == TaxWithholdCodeType_IN::TDS)
                {
                    taxWithholdDirection = TaxWithholdDirection_IN::OutgoingTax;
                }
                else
                {
                    taxWithholdDirection = TaxWithholdDirection_IN::IncomingTax;
                }
                break;
            case tableNum(CustInvoiceLine),
                 tableNum(CustInvoiceTrans) :
                if (this.TaxWithholdType == TaxWithholdCodeType_IN::TDS)
                {
                    taxWithholdDirection = TaxWithholdDirection_IN::IncomingTax;
                }
                else
                {
                    taxWithholdDirection = TaxWithholdDirection_IN::OutgoingTax;
                }
                break;
        }
        return taxWithholdDirection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS223649</DeveloperDocumentation>
	<Visible>No</Visible>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceDocumentLine</Name>
			<ExtendedDataType>SourceDocumentLineRefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SourceRegulateAmountCur</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>SourceTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SourceTaxAmountCur</Name>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxWithholdCode</Name>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxWithholdGroup</Name>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TaxWithholdType</Name>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>