<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcTransMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMCalcTransMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    display UnitOfMeasureSymbol displayUnitId()
    {
        ItemCalcType            calcType;
        UnitOfMeasureSymbol     unitOfMeasureSymbol;

        if (this.BOMCalcTransMap::isCalcTypeSelected())
        {
            calcType = this.CalcType;
        }

        if (this.BOMCalcTransMap::isUnitIdSelected())
        {
            unitOfMeasureSymbol = this.UnitId;
        }

        return BomCalcTransMap::unitId(calcType, unitOfMeasureSymbol);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalcTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calculation type is set.
    /// </summary>
    /// <returns>true if the calculation type is set; otherwise, false.</returns>
    protected boolean isCalcTypeSelected()
    {
        switch (this.TableId)
        {
            case tableNum(BOMCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(BOMCalcTrans,CalcType))  || this.isFieldSet(fieldNum(BOMCalcTrans,CalcType));
                
            case tableNum(ProdCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(ProdCalcTrans,CalcType))  || this.isFieldSet(fieldNum(ProdCalcTrans,CalcType));
                
            case tableNum(PmfCoByProdCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(PmfCoByProdCalcTrans,CalcType))  || this.isFieldSet(fieldNum(PmfCoByProdCalcTrans,CalcType));
                
            case tableNum(PmfProdCalcTransMap):
                return this.isFieldDataRetrieved(fieldStr(PmfProdCalcTransMap,CalcType))  || this.isFieldSet(fieldNum(PmfProdCalcTransMap,CalcType));
                
            case tableNum(BOMCalcTransDetailUnionAll):
                return this.isFieldDataRetrieved(fieldStr(BOMCalcTransDetailUnionAll,CalcType))  || this.isFieldSet(fieldNum(BOMCalcTransDetailUnionAll,CalcType));
                
            default:
                // All table mappings must be handled here individually as field IDs might vary.
                return this.BOMCalcTransMap::defaultIsCalcTypeSelected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsCalcTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default value whether the calculation type is set.
    /// </summary>
    /// <returns>The default value whether the calculation type is set.</returns>
    [Replaceable]
    protected boolean defaultIsCalcTypeSelected()
    {
        throw error(Error::wrongUseOfFunction(funcName()));     
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnitIdSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the unit of measure is set.
    /// </summary>
    /// <returns>true if the  unit of measure is set; otherwise, false.</returns>
    protected boolean isUnitIdSelected()
    {
        switch (this.TableId)
        {
            case tableNum(BOMCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(BOMCalcTrans,UnitId))    || this.isFieldSet(fieldNum(BOMCalcTrans,UnitId));
                
            case tableNum(ProdCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(ProdCalcTrans,UnitId))    || this.isFieldSet(fieldNum(ProdCalcTrans,UnitId));
                
            case tableNum(PmfCoByProdCalcTrans):
                return this.isFieldDataRetrieved(fieldStr(PmfCoByProdCalcTrans,UnitId))    || this.isFieldSet(fieldNum(PmfCoByProdCalcTrans,UnitId));
                
            case tableNum(PmfProdCalcTransMap):
                return this.isFieldDataRetrieved(fieldStr(PmfProdCalcTransMap,UnitId))    || this.isFieldSet(fieldNum(PmfProdCalcTransMap,UnitId));
                
            case tableNum(BOMCalcTransDetailUnionAll):
                return this.isFieldDataRetrieved(fieldStr(BOMCalcTransDetailUnionAll,UnitId))    || this.isFieldSet(fieldNum(BOMCalcTransDetailUnionAll,UnitId));
                
            default:
                // All table mappings must be handled here individually as field IDs might vary.
                return this.BOMCalcTransMap::defaultIsUnitIdSelected();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIsUnitIdSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default value whether the unit of measure is set.
    /// </summary>
    /// <returns>The default value whether the unit of measure is set.</returns>
    [Replaceable]
    protected boolean defaultIsUnitIdSelected()
    {
        throw error(Error::wrongUseOfFunction(funcName()));     
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides unitId based on the original provided unit symbol and the provided calculation type.
    /// </summary>
    /// <param name = "_calcType">Calculation type</param>
    /// <param name = "_unitId">Original unit of measure symbol</param>
    /// <returns></returns>
    public static UnitOfMeasureSymbol unitId(
        ItemCalcType        _calcType,
        UnitOfMeasureSymbol _unitId)
    {
        UnitOfMeasureSymbol symbol;

        symbol = _unitId;

        if (   _unitId   == ''
            && _calcType == ItemCalcType::IndirectRate)
        {
            symbol = BOMCalcTransMap::calcHourUnit();
        }

        if (    _calcType == ItemCalcType::Setup
            || _calcType == ItemCalcType::Process)
        {
            symbol = BOMCalcTransMap::calcHourUnit();
        }

        if (_calcType == ItemCalcType::IndirectSurcharge)
        {
            symbol = CompanyInfoHelper::standardCurrency();
        }

        return symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimStr</Name>
				<Source><![CDATA[
    void setInventDimStr(
        InventDimId     _inventDimId,
        InventDimId     _inventDimIdBlank = InventDim::inventDimIdBlank())
    {
        InventDim           inventDim;
        BOMCalcInventDimStr inventDimStr;

        if (_inventDimId != _inventDimIdBlank)
        {
            inventDim       = InventDim::find(_inventDimId);
            inventDimStr    = inventDim.preFixValue();
        }
        this.InventDimStr   = inventDimStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHourUnit</Name>
				<Source><![CDATA[
    static KeyValue calcHourUnit()
    {
        return "@SYS1151";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS325869</DeveloperDocumentation>
	<Label>@SYS22213</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BOM</Name>
			<ExtendedDataType>BOMCalcBOMConsumption</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CalcGroupId</Name>
			<ExtendedDataType>BOMCalcGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>CalcType</Name>
			<EnumType>ItemCalcType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CostGroupId</Name>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimStr</Name>
			<ExtendedDataType>BOMCalcInventDimStr</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>Level</Name>
			<ExtendedDataType>Level</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OprId</Name>
			<ExtendedDataType>RouteOprId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>OprNum</Name>
			<ExtendedDataType>OprNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Resource</Name>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitId</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PmfProdCalcTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Level</MapField>
					<MapFieldTo>CollectRefLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimStr</MapField>
					<MapFieldTo>InventDimStr</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcGroupId</MapField>
					<MapFieldTo>CalcGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprId</MapField>
					<MapFieldTo>OprId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalcType</MapField>
					<MapFieldTo>CalcType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OprNum</MapField>
					<MapFieldTo>OprNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOM</MapField>
					<MapFieldTo>BOM</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
					<MapFieldTo>UnitId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>