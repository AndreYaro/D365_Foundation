<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentSubTableMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendDocumentSubTableMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromHeader</Name>
				<Source><![CDATA[
        private void initFromHeader(VendDocumentTableMap _header)
    {
        Debug::assert(_header.TableId != tableNum(VendDocumentTableMap)); // assert table buffer initialized

        this.ParmId = _header.ParmId;
        this.TableRefId = _header.TableRefId;

        if (!_header.isNonPO())
        {
            this.VendDocumentSubTableMap::initFromPurchTable(_header.purchTable());
        }
        else
        {
            this.OrigPurchId = '';
            this.PurchName = _header.PurchName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
        private void initFromPurchTable(PurchTable purchTable)
    {
        this.OrigPurchId = purchTable.PurchId;
        this.PurchName = purchTable.PurchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
        private void initFromVendInvoiceInfoLine(VendInvoiceInfoLine _line, ParmId _parmId, PurchName _purchName)
    {
        this.ParmId = _parmId;
        this.PurchName = _purchName;
        this.OrigPurchId = _line.OrigPurchId;
        this.TableRefId = _line.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
        public boolean isNonPO()
    {
        return (this.OrigPurchId == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
        public PurchTable purchTable(boolean _update = false)
    {
        PurchTable purchTable;

        if (this.OrigPurchId)
        {
            purchTable = PurchTable::find(this.OrigPurchId, _update);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBufferFromHeader</Name>
				<Source><![CDATA[
        public static VendDocumentSubTableMap constructBufferFromHeader(VendDocumentTableMap _header)
    {
        PurchParmSubTable purchParmSubTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendDocumentSubTableMap subHeader;

        switch (_header.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
                subHeader = vendInvoiceInfoSubTable;
                break;

            case tableNum(PurchParmTable):
                subHeader = purchParmSubTable;
                break;

            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }

        return subHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromHeader</Name>
				<Source><![CDATA[
        public static VendDocumentSubTableMap createFromHeader(VendDocumentTableMap _header, boolean _insert = true)
    {
        VendDocumentSubTableMap subHeader;

        Debug::assert(_header.TableId != tableNum(VendDocumentTableMap)); // assert table buffer initialized

        ttsbegin;
        subHeader = VendDocumentSubTableMap::constructBufferFromHeader(_header);
        subHeader.clear();
        subHeader.initValue();
        subHeader.VendDocumentSubTableMap::initFromHeader(_header);

        if (_insert)
            subHeader.insert();

        ttscommit;

        return subHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header</Name>
				<Source><![CDATA[
        public static VendDocumentTableMap header(VendDocumentSubTableMap _subHeader, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchParmSubTable purchParmSubTable;
        VendDocumentTableMap header;

        switch (_subHeader.TableId)
        {
            case tableNum(VendInvoiceInfoSubTable):
                vendInvoiceInfoSubTable = _subHeader;
                header = vendInvoiceInfoSubTable.vendInvoiceInfoTable(_forUpdate, _concurrencyModel);
                break;

            case tableNum(PurchParmSubTable):
                purchParmSubTable = _subHeader;
                header = purchParmSubTable.purchParmTable(_forUpdate);
                break;

            default: throw error(strFmt("@SYS19306", funcName()));
        }
        return header;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS328628</DeveloperDocumentation>
	<Label>@SYS116189</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PurchName</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<StringSize>20</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>