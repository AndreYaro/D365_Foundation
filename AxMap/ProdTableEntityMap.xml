<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableEntityMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdTableEntityMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimensions.
    /// </summary>
    /// <param name = "_prodTable">The production order used for setting default dimensions.</param>
    public void setDefaultDimensions(ProdTable _prodTable)
    {
        if (!this.DefaultDimensionDisplayValue && _prodTable.ItemId)
        {
            _prodTable.DefaultDimension = _prodTable.copyDimension(
                this.ProdTableEntityMap::inventTable().DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductionGroupId</Name>
				<Source><![CDATA[
    private void defaultProductionGroupId()
    {
        this.ProductionGroupId = this.ProdTableEntityMap::inventTable().ProdGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductionPoolId</Name>
				<Source><![CDATA[
    private void defaultProductionPoolId()
    {
        this.ProductionPoolId = this.ProdTableEntityMap::inventTable().ProdPoolId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPropertyId</Name>
				<Source><![CDATA[
    private void defaultPropertyId()
    {
        this.PropertyId = this.ProdTableEntityMap::inventTable().PropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHeight</Name>
				<Source><![CDATA[
    private void defaultHeight()
    {
        this.Height = this.ProdTableEntityMap::inventTable().Height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWidth</Name>
				<Source><![CDATA[
    private void defaultWidth()
    {
        this.Width = this.ProdTableEntityMap::inventTable().Width;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDepth</Name>
				<Source><![CDATA[
    private void defaultDepth()
    {
        this.Depth = this.ProdTableEntityMap::inventTable().Depth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDensity</Name>
				<Source><![CDATA[
    private void defaultDensity()
    {
        this.Density = this.ProdTableEntityMap::inventTable().Density;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultName</Name>
				<Source><![CDATA[
    private void defaultName()
    {
        this.Name = this.ProdTableEntityMap::inventTable().defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBOMDate</Name>
				<Source><![CDATA[
    private void defaultBOMDate()
    {
        this.BOMDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, BOMDate), this.TableId):
                this.ProdTableEntityMap::defaultBOMDate();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, ProductionGroupId), this.TableId):
                this.ProdTableEntityMap::defaultProductionGroupId();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, ProductionPoolId), this.TableId):
                this.ProdTableEntityMap::defaultProductionPoolId();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, Name), this.TableId):
                this.ProdTableEntityMap::defaultName();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, PropertyId), this.TableId):
                this.ProdTableEntityMap::defaultPropertyId();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, Height), this.TableId):
                this.ProdTableEntityMap::defaultHeight();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, Width), this.TableId):
                this.ProdTableEntityMap::defaultWidth();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, Depth), this.TableId):
                this.ProdTableEntityMap::defaultDepth();
                break;
            case SysDictField::findMappedFieldId(tableNum(ProdTableEntityMap), fieldNum(ProdTableEntityMap, Density), this.TableId):
                this.ProdTableEntityMap::defaultDensity();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map the entity fields to the corresponding target fields
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, ProdTable):
            case dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, ProdTable):
                switch (_entityCtx.getDatabaseOperation())
                {
                    case DataEntityDatabaseOperation::Insert:
                    case DataEntityDatabaseOperation::Update:
                        ProdTable prodTable = _dataSourceCtx.getBuffer() as ProdTable;
                        this.ProdTableEntityMap::setDefaultDimensions(prodTable);

                        // will cause the defaulting on the ProdTable not to call the defaultField for InventDimId
                        prodTable.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDimId();
                        break;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDataSourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map the data source fields to the corresponding entity fields
    /// </summary>
    /// <param name = "_entityCtx">Data entity runtime context.</param>
    /// <param name = "_dataSourceCtx">Data entity data source runtime context.</param>
    public void mapDataSourceToEntity(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (   _dataSourceCtx.name() == dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, ProdTable)
            || _dataSourceCtx.name() == dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, ProdTable))
        {
            ProdTable prodTable = _dataSourceCtx.getBuffer() as ProdTable;
            this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(prodTable.inventDim());
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, InventDim):
            case dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, InventDim):
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;
        }

        this.updateScheduleQuantity(_dataSourceCtx);

        boolean ret = super(_entityCtx, _dataSourceCtx);
        if (ret)
        {
            if (   _dataSourceCtx.name() == dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, ProdTable)
                || _dataSourceCtx.name() == dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, ProdTable))
            {
                ProdTable prodTable = _dataSourceCtx.getBuffer() as ProdTable;

                // Need to re-apply inventory dimensions as defaulting logic may have changed them:
                this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(prodTable.inventDim());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, ProdTable):
            case dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, ProdTable):
                this.setSkipCreateFields(NoYes::No);
                break;
        
            case dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, InventDim):
            case dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, InventDim):
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                break;
        }
        
        this.updateScheduleQuantity(_dataSourceCtx);
        
        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret)
        {
            if (   _dataSourceCtx.name() == dataEntityDataSourceStr(ProdProductionOrderHeaderEntity, ProdTable)
                || _dataSourceCtx.name() == dataEntityDataSourceStr(ProdBatchOrderHeaderEntity, ProdTable))
            {
                // Need to re-apply inventory dimensions as defaulting logic may have changed them:
                ProdTable prodTable = _dataSourceCtx.getBuffer() as ProdTable;

                this.InventInventoryDimensionEntityFieldsMapping::initFromInventDim(prodTable.inventDim());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    private InventTable inventTable()
    {
        return InventTable::find(this.ItemNumber);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>BOMDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefaultDimensionDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Density</Name>
			<ExtendedDataType>BOMMeasureDensity</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Depth</Name>
			<ExtendedDataType>BOMMeasureDepth</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Height</Name>
			<ExtendedDataType>BOMMeasureHeight</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemNumber</Name>
			<ExtendedDataType>ItemIdProduction</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Name</Name>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductionGroupId</Name>
			<ExtendedDataType>ProdGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductionPoolId</Name>
			<ExtendedDataType>ProdPoolId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PropertyId</Name>
			<ExtendedDataType>PropertyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Width</Name>
			<ExtendedDataType>BOMMeasureWidth</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>