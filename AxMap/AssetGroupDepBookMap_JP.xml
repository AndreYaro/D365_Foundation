<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupDepBookMap_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupDepBookMap_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetBookType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset book type of the current record
    /// </summary>
    /// <returns>
    /// <c>AssetBookType</c>
    /// </returns>
    public AssetBookType assetBookType()
    {
        return AssetDepCalculationHelper_JP::determineAssetBookType(this.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
	/// Gets an instance of <C>AssetTableInterval</C> for current record.
	/// </summary>
	/// <param name="_transDate">
	/// Transcation date to find the current depreciation profile; default to dateNull()
	/// </param>
	/// <param name="_isCacheTable">
	/// If ture, cache fiscal calendar tables to avoid multiple database call; optional.
	/// </param>
	/// <param name="_isDepreciationExtProfile">
	/// A Boolean value that indicates whether extraordinary depreciation profile is used, optional.
	/// </param>
	/// <returns>
	/// An instance of <C>AssetTableInterval</C>.
	/// </returns>
	/// <remarks>
	/// Performance consideration:
	///     a. If multiple instances of <C>AssetTableInterval</C> will be used for the same value model,
	///        use <C>AssetTableIntervalFactory_JP</C> to contruct instances of <C>AssetTableInterval</C>.
	///     b. If periods count related functions on <C>AssetTableInterval</C> will be called for multiple times,
	///        set param _isUseTableCache to true.
	/// </remarks>
	public AssetTableInterval assetTableInterval(
	    AssetTransDate      _transDate = dateNull(),
	    boolean             _isCacheTable = false,
	    boolean             _isDepreciationExtProfile = false)
	{
	    AssetTableInterval          ret;

	    ret = this.AssetGroupDepBookMap_JP::assetTableIntervalForDepProfile(
	        this.AssetGroupDepBookMap_JP::effectiveDepreciationProfile(_isDepreciationExtProfile, _transDate),
	        _isCacheTable);

	    return ret;
	}

]]></Source>
			</Method>
			<Method>
				<Name>assetTableIntervalForDepProfile</Name>
				<Source><![CDATA[
    /// <summary>
	/// Gets an instance of <C>AssetTableInterval</C> for specified depreciation profile.
	/// </summary>
	/// <param name="_assetDepreciationProfile">
	/// <C>AssetDepreciationProfile</C>
	/// </param>
	/// <param name="_isCacheTable">
	/// If true, cache fiscal calendar tables to avoid multiple database call; optional.
	/// </param>
	/// <returns>
	/// The new instance of an <C>AssetTableInterval</C> subclass.
	/// </returns>
	public AssetTableInterval assetTableIntervalForDepProfile(AssetDepreciationProfile _assetDepreciationProfile, boolean _isCacheTable = false)
	{
	    AssetTableInterval          ret;
	    AssetDepBookTableMap_JP     assetDepBookTableMap;

	    if (_assetDepreciationProfile)
	    {
	        assetDepBookTableMap = AssetDepBookTableMap_JP::find(
	            AssetDepCalculationHelper_JP::determineAssetBookType(this.TableId),
	            this.AssetBookId);
	        if (assetDepreciationProfile::isDepMethodAllowChangeCalendar_JP(_assetDepreciationProfile.Method))
	        {
	            ret = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
	                _assetDepreciationProfile,
	                assetDepBookTableMap.TableId,
	                assetDepBookTableMap.RecId,
	                _isCacheTable);
	        }
	        else
	        {
	            ret = AssetTableInterval::construct(
	                _assetDepreciationProfile,
	                assetDepBookTableMap.getFiscalCalendar(),
	                _isCacheTable);
	        }
	    }

	    return ret;
	}

]]></Source>
			</Method>
			<Method>
				<Name>currentServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
	/// Gets current service life considering depreciaiton profile change
	/// </summary>
	/// <returns>
	/// Current service life
	/// </returns>
	public AssetServiceLife currentServiceLife()
	{
	    AssetServiceLife ret;

	    if (this.TableId == tableNum(AssetBook)
            && AssetParameters::isManuallyChangeDepProfileEnable_JP())
	    {
	        ret = this.editCurrentServiceLife_JP(false, this, 0);
	    }
	    else
	    {
	        ret = this.ServiceLife;
	    }

	    return ret;
	}

]]></Source>
			</Method>
			<Method>
				<Name>depreciationExtProfile</Name>
				<Source><![CDATA[
    /// <summary>
	/// Gets the related record of extraordinary <C>AssetDepreciationProfile</C>.
	/// </summary>
	/// <returns>
	/// A record of <C>AssetDepreciationProfile</C>.
	/// </returns>
	public AssetDepreciationProfile depreciationExtProfile()
	{
	    throw error(Error::missingOverload(funcName()));
	}

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of <C>AssetDepreciationProfile</C>.
    /// </summary>
    /// <returns>
    /// A record of <C>AssetDepreciationProfile</C>.
    /// </returns>
    public AssetDepreciationProfile depreciationProfile()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfileIdOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets depreciation profile id on the specific date
    /// </summary>
    /// <param name="_date">
    /// <c>date</c>
    /// </param>
    /// <returns>
    /// Depreciation profile id
    /// </returns>
    public AssetDepreciationProfileId depreciationProfileIdOnDate(AssetTransDate _date=dateNull())
    {
        AssetDepreciationProfileId  ret;
        AssetDepProfileChange_JP    depProfileChange;

        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            depProfileChange = AssetDepProfileChange_JP::find(this.TableId, this.RecId, _date);
        }
        if (depProfileChange)
        {
            ret = depProfileChange.DepreciationProfile;
        }
        else
        {
            ret = this.depreciationProfile().Profile;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfileOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets depreciation profile on the specific date
    /// </summary>
    /// <param name="_date">
    /// <c>date</c>
    /// </param>
    /// <returns>
    /// Depreciation profile
    /// </returns>
    public AssetDepreciationProfile depreciationProfileOnDate(AssetTransDate _date = dateNull())
    {
        AssetDepreciationProfile    ret;
        AssetDepProfileChange_JP    depProfileChange;

        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            depProfileChange = AssetDepProfileChange_JP::find(this.TableId, this.RecId, _date);
        }
        if (depProfileChange)
        {
            ret = AssetDepreciationProfile::find(depProfileChange.DepreciationProfile);
        }
        else
        {
            ret = this.depreciationProfile();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
	/// Gets the effective record of <C>AssetDepreciationProfile</C>.
	/// </summary>
	/// <param name="_isDepreciationExtProfile">
	/// A Boolean value that indicates whether there is an extended depreciation profile, optional.
	/// </param>
	/// <param name="_transDate">
	/// Transcation date to find the current depreciation profile; default to dateNull(), optional.
	/// </param>
	/// <returns>
	/// A record of <C>AssetDepreciationProfile</C>.
	/// </returns>
	public AssetDepreciationProfile effectiveDepreciationProfile(
	    boolean             _isDepreciationExtProfile = false,
	    AssetTransDate      _transDate = dateNull())
	{
	    AssetDepreciationProfile    assetDepreciationProfile;

	    if (_isDepreciationExtProfile)
	    {
	        assetDepreciationProfile = this.depreciationExtProfile();
	    }
	    else
	    {
	        // ordinary depreciation profile
	        assetDepreciationProfile = this.AssetGroupDepBookMap_JP::depreciationProfileOnDate(_transDate);
	    }

	    return assetDepreciationProfile;
	}

]]></Source>
			</Method>
			<Method>
				<Name>validateBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ID of value model / depreciation book for current buffer.
    /// </summary>
    /// <returns>
    /// true if it is a valid ID; otherwise, return false.
    /// </returns>
    public boolean validateBookId()
    {
        boolean                     ret;
        AssetDepreciationProfile    assetDepreciationProfile;

        // The reason why not directly use the depreciationProfile() method is:
        // For depreciation book part, the depreciationProfile() method use the DepreciationProfile field,
        // and this field is inited after the AssetBookId field is set. But this validate method is called
        // when setting the AssetBookId field. it means the DepreciationProfile field is not set yet.
        assetDepreciationProfile = AssetDepreciationProfile::find(
            AssetDepBookTableMap_JP::find(
                AssetDepCalculationHelper_JP::determineAssetBookType(this.TableId),
                this.AssetBookId).DepreciationProfile);

        ret = AssetGroup::find(this.AssetGroup).AssetGroupMap_JP::validateDepreciationProfile(assetDepreciationProfile);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an record of <C>AssetGroupDepBookMap_JP</C>.
    /// </summary>
    /// <param name="_tableId">
    /// <c>TableId</c>
    /// </param>
    /// <param name="_recId">
    /// <c>RecId</c>
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An record of <C>AssetGroupDepBookMap_JP</C>.
    /// </returns>
    public static AssetGroupDepBookMap_JP find(TableId _tableId, RecId _recId, boolean _forUpdate = false)
    {
        AssetGroupDepBookMap_JP assetGroupDepBookMap;

        if (_tableId && _recId)
        {
            assetGroupDepBookMap.selectForUpdate(_forUpdate);
            assetGroupDepBookMap = AssetGroupDepBookMap_JP::getEmptyTableBuffer(_tableId);
            select firstOnly assetGroupDepBookMap
                where assetGroupDepBookMap.RecId == _recId;
        }

        return assetGroupDepBookMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_tableId">
    ///    The table id for which the buffer is created.
    /// </param>
    /// <returns>
    ///     An empty table buffer for the concrete table represented by the map.
    /// </returns>
    public static AssetGroupDepBookMap_JP getEmptyTableBuffer(TableId _tableId)
    {
        AssetGroupDepBookMap_JP     ret;
        DictTable                   dictTable = new DictTable(_tableId);

        if (mappingExists(tableNum(AssetGroupDepBookMap_JP), _tableId))
        {
            ret = dictTable.makeRecord();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetGroupDepBookMap_JP</DeveloperDocumentation>
	<Label>@FixedAssets:FA_EntityTitle_AssetGroupDepBookMap_JP</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AllowableLimitForAccumulatedDepType_JP</Name>
			<EnumType>AssetLimitForAccumulatedDepType_JP</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetBookId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Depreciation</Name>
			<ExtendedDataType>AssetDepreciate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>DepreciationConvention</Name>
			<EnumType>AssetDepreciationConvention</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>LifeTime</Name>
			<ExtendedDataType>AssetLifeTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ServiceLife</Name>
			<ExtendedDataType>AssetServiceLife</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>SpecialDepAllocationPeriods_JP</Name>
			<ExtendedDataType>AssetSpecialDepAllocationPeriods_JP</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SpecialDepAllocationUnit_JP</Name>
			<ExtendedDataType>AssetSpecialDepAllocationUnit_JP</ExtendedDataType>
			<EnumType>AssetAccrualFiscal</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SpecialDepAllocationConvention_JP</Name>
			<EnumType>AssetSpecialDepAllocationConvention_JP</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>