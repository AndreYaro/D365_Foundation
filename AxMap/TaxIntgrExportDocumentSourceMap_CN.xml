<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentSourceMap_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxIntgrExportDocumentSourceMap_CN extends common
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return this.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocumentLineSourceCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document line count.
    /// </summary>
    /// <returns>
    /// The export document line count.
    /// </returns>
    public int getExportDocumentLineSourceCount()
    {
        CustInvoiceTrans                        custInvoiceTransLocal;
        CustInvoiceJour                         custInvoiceJourLocal;
        int                                     result;
        ProjInvoiceTransUnion                   projInvoiceTransUnion;
        ProjInvoiceJour                         projInvoiceJour;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                custInvoiceJourLocal = this;
                select count(RecId) from custInvoiceTransLocal
                    where custInvoiceTransLocal.SalesId              == custInvoiceJourLocal.SalesId
                        && custInvoiceTransLocal.InvoiceId           == custInvoiceJourLocal.InvoiceId
                        && custInvoiceTransLocal.InvoiceDate         == custInvoiceJourLocal.InvoiceDate
                        && custInvoiceTransLocal.NumberSequenceGroup == custInvoiceJourLocal.NumberSequenceGroup;
                result = any2int(custInvoiceTransLocal.RecId);
                break;

            case (tableNum(projInvoiceJour)):
                projInvoiceJour = this;
                select count(RecId) from projInvoiceTransUnion
                    where projInvoiceTransUnion.InvoiceDate     == projInvoiceJour.InvoiceDate
                        && projInvoiceTransUnion.ProjInvoiceId  == projInvoiceJour.ProjInvoiceId;
                result = any2int(projInvoiceTransUnion.RecId);

                break;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocumentLineSourceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document line map.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code.
    /// </param>
    /// <returns>
    /// The export document line map.
    /// </returns>
    public TaxIntgrExportDocumentLineSourceMap_CN getExportDocumentLineSourceMap(TaxCode _taxCode)
    {
        TaxIntgrExportDocumentLineSourceCust_CN  exportDocumentLineSourceCustView;
        TaxIntgrExportDocumentLineSourceProj_CN  exportDocumentLineSourceProjView;
        CustInvoiceJour                         custInvoiceJourLocal;
        TaxIntgrExportDocumentLineSourceMap_CN   exportDocumentLineSourceMap;
        ProjInvoiceJour                         projInvoiceJour;
        boolean isMultiTaxFeatureEnabled = TaxIntgrExportDocumentMultiTaxFeature::isEnabled();

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                custInvoiceJourLocal = this;
                select * from exportDocumentLineSourceCustView
                    where exportDocumentLineSourceCustView.SalesId              == custInvoiceJourLocal.SalesId
                        && exportDocumentLineSourceCustView.InvoiceId           == custInvoiceJourLocal.InvoiceId
                        && exportDocumentLineSourceCustView.InvoiceDate         == custInvoiceJourLocal.InvoiceDate
                        && exportDocumentLineSourceCustView.NumberSequenceGroup == custInvoiceJourLocal.NumberSequenceGroup
                        && (exportDocumentLineSourceCustView.TaxCode == _taxCode || isMultiTaxFeatureEnabled);
                exportDocumentLineSourceMap = exportDocumentLineSourceCustView as Common;
                break;

            case (tableNum(projInvoiceJour)):
                projInvoiceJour = this;
                select * from exportDocumentLineSourceProjView
                    where exportDocumentLineSourceProjView.InvoiceDate      == projInvoiceJour.InvoiceDate
                        && exportDocumentLineSourceProjView.ProjInvoiceId   == projInvoiceJour.ProjInvoiceId
                        && (exportDocumentLineSourceProjView.TaxCode == _taxCode || isMultiTaxFeatureEnabled);
                exportDocumentLineSourceMap = exportDocumentLineSourceProjView as Common;
                break;
        }

        return exportDocumentLineSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice account.
    /// </summary>
    /// <returns>
    /// The invoice account.
    /// </returns>
    public CustAccount getInvoiceAccount()
    {
        return this.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date.
    /// </summary>
    /// <returns>
    /// The invoice date.
    /// </returns>
    public InvoiceDate getInvoiceDate()
    {
        return this.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice id.
    /// </summary>
    /// <returns>
    /// The invoice id.
    /// </returns>
    public InvoiceId getInvoiceId()
    {
        return this.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project contract id.
    /// </summary>
    /// <returns>
    /// The project contract id.
    /// </returns>
    public ProjInvoiceProjId getProjInvoiceProjId()
    {
        ProjInvoiceJour     projInvoiceJour;
        ProjInvoiceProjId   projInvoiceProjId;

        switch (this.SourceRelationType)
        {
            case (tableNum(projInvoiceJour)):
                projInvoiceJour = this;
                projInvoiceProjId = projInvoiceJour.ProjInvoiceProjId;
                break;
        }

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales order id.
    /// </summary>
    /// <returns>
    /// The sales order id.
    /// </returns>
    public SalesId getSalesOrderId()
    {
        SalesId             salesId;
        CustInvoiceJour     custInvoiceJour;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                custInvoiceJour = this;
                salesId = custInvoiceJour.SalesId;
                break;
        }

        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction currency invoice amount.
    /// </summary>
    /// <returns>
    /// The transaction currency invoice amount.
    /// </returns>
    public AmountCur getTransactionCurrencyInvoiceAmount()
    {
        return this.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher.
    /// </summary>
    /// <returns>
    /// The voucher.
    /// </returns>
    public Voucher getVoucher()
    {
        return this.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocLineSourceChargesAmtMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document line misc. charges map.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document line misc. charges map.
    /// </returns>
    public TaxIntgrExportDocLineSourceChargesMap_CN getExportDocLineSourceChargesAmtMap(RecId _sourceRecId)
    {
        TaxIntgrExportDocLineSourceChargesMap_CN exportDocLineSourceChargesMap;
        TaxIntgrExportDocuLineSourceCharges_CN exportDocLineSourceChargesView;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select sum(SourceRegulateAmountCur), sum(SourceBaseAmountCur) from exportDocLineSourceChargesView
                    where exportDocLineSourceChargesView.SourceRecId == _sourceRecId;

                exportDocLineSourceChargesMap = exportDocLineSourceChargesView;
                break;
        }

        return exportDocLineSourceChargesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocLineSourceChargesDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document line misc. charges description.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document line misc. charges description.
    /// </returns>
    public TransTxt getExportDocLineSourceChargesDesc(RecId _sourceRecId)
    {
        TaxIntgrExportDocuLineSourceCharges_CN exportDocLineSourceChargesView;
        TransTxt descriptionCharges;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select firstOnly DescriptionCharges from exportDocLineSourceChargesView
                    where exportDocLineSourceChargesView.SourceRecId == _sourceRecId;

                descriptionCharges = exportDocLineSourceChargesView.DescriptionCharges;
                break;
        }

        return descriptionCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocLineSourceChargesLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document line map.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document line map.
    /// </returns>
    public LineNum getExportDocLineSourceChargesLineNum(RecId _sourceRecId)
    {
        TaxIntgrExportDocuLineSourceCharges_CN exportDocLineSourceChargesView;
        LineNum lineNum;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select count(RecId) from exportDocLineSourceChargesView
                    where exportDocLineSourceChargesView.SourceRecId    == _sourceRecId;

                lineNum = any2real(exportDocLineSourceChargesView.RecId);
                break;
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocSourceChargesAmtMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document misc. charges amount map.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document misc. charges amount map.
    /// </returns>
    public TaxIntgrExportDocSourceChargesMap_CN getExportDocSourceChargesAmtMap(RecId   _sourceRecId)
    {
        TaxIntgrExportDocSourceChargesMap_CN exportDocSourceChargesMap;
        TaxIntgrExportDocSourceCharges_CN exportDocSourceChargesView;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select sum(SourceRegulateAmountCur), sum(SourceBaseAmountCur) from exportDocSourceChargesView
                    where exportDocSourceChargesView.SourceRecId == _sourceRecId;

                exportDocSourceChargesMap = exportDocSourceChargesView;
                break;
        }

        return exportDocSourceChargesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocSourceChargesLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document misc. charges line num.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document misc. charges line num.
    /// </returns>
    public LineNum getExportDocSourceChargesLineNum(RecId _sourceRecId)
    {
        TaxIntgrExportDocSourceCharges_CN exportDocSourceChargesView;
        LineNum lineNum;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select count(RecId) from exportDocSourceChargesView
                    where exportDocSourceChargesView.SourceRecId == _sourceRecId;

                lineNum = any2real(exportDocSourceChargesView.RecId);
                break;
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportDocSourceChargesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets export document misc. charges map.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source recId.
    /// </param>
    /// <returns>
    /// The export document misc. charges map.
    /// </returns>
    public TaxIntgrExportDocSourceChargesMap_CN getExportDocSourceChargesMap(RecId  _sourceRecId)
    {
        TaxIntgrExportDocSourceCharges_CN exportDocSourceChargesView;
        TaxIntgrExportDocSourceChargesMap_CN exportDocSourceChargesMap;

        switch (this.SourceRelationType)
        {
            case (tableNum(CustInvoiceJour)):
                select firstOnly txt, TaxValue, TaxDirection, ExemptTax from exportDocSourceChargesView
                    where exportDocSourceChargesView.SourceRecId == _sourceRecId;

                exportDocSourceChargesMap = exportDocSourceChargesView;
                break;
        }

        return exportDocSourceChargesMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4002280</DeveloperDocumentation>
	<Label>@SYS4002209</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>InvoiceDate</TitleField2>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LedgerVoucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>SourceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>TransactionCurrencyAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>