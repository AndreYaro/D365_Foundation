<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeEntitySpecificDeliveryAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeEntitySpecificDeliveryAddress extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findLogisticsPostalAddressBaseEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LogisticsPostalAddressBaseEntity</c> datasource when a conflict is detected
    /// when saving the document that has a delivery postal address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddressBaseEntity</c> record.</returns>
    public static LogisticsPostalAddressBaseEntity findLogisticsPostalAddressBaseEntityDataSource()
    {
        // We want to always ignore conflict detection because when LocationId is specified the database operation should be None
        // and for ad hoc addresses we want to treat updates as inserts.
        LogisticsPostalAddressBaseEntity addressEntity = null;
        return addressEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLogisticsPostalAddressBaseEntityDataSourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the <c>LogisticsPostalAddressBaseEntity</c> datasource is being mapped to the entity.
    /// </summary>
    /// <param name="_logisticsPostalAddressBaseEntityDataSourceCtx">The data source context for <c>LogisticsPostalAddresssBaseEntity</c>.</param>
    public void mapLogisticsPostalAddressBaseEntityDataSourceToEntity(DataEntityDataSourceRuntimeContext _logisticsPostalAddressBaseEntityDataSourceCtx)
    {
        if (this.TradeEntitySpecificDeliveryAddress::isMappedFieldSet(fieldNum(TradeEntitySpecificDeliveryAddress, DeliverylocationId)))
        {
            _logisticsPostalAddressBaseEntityDataSourceCtx.setBuffer(LogisticsPostalAddressBaseEntity::findByLocationId(this.DeliverylocationId));
            _logisticsPostalAddressBaseEntityDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
        else if (_logisticsPostalAddressBaseEntityDataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            _logisticsPostalAddressBaseEntityDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);

            if (this.DeliveryLocationId)
            {
                // The base entity does not initialize the location ID when it is set.
                // Get a new location Id for the switch from update to insert.
                this.DeliveryLocationId = LogisticsLocation::getNewLocationId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertLogisticsPostalAddressBaseEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the <c>LogisticsPostalAddressBaseEntity</c> datasource was inserted
    /// as part of saving the document that has a delivery postal address.
    /// </summary>
    /// <param name="_logisticsPostalAddressBaseEntityDataSourceCtx">The data source context for <c>LogisticsPostalAddresssBaseEntity</c>.</param>
    public void postInsertLogisticsPostalAddressBaseEntityDataSource(DataEntityDataSourceRuntimeContext _logisticsPostalAddressBaseEntityDataSourceCtx)
    {
        if (_logisticsPostalAddressBaseEntityDataSourceCtx.getDatabaseOperation() != DataEntityDatabaseOperation::None)
        {
            if (!this.IsDeliveryAddressOrderSpecific
                && this.TradeEntitySpecificDeliveryAddress::isMappedFieldSet(fieldNum(TradeEntitySpecificDeliveryAddress, IsDeliveryAddressOrderSpecific)))
            {
                LogisticsPostalAddressBaseEntity addressEntity = _logisticsPostalAddressBaseEntityDataSourceCtx.getBuffer();
                addressEntity.associateWithPartyByRoleType(this.deliveryAddressPartyRecId(), LogisticsLocationRoleType::Delivery);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSavedPostalAddressToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the actual delivery address to the entity.
    /// </summary>
    /// <param name="_entityCtx">The data entity runtime context.</param>
    /// <param name="_deliveryPostalAddressRecId">The <c>RecId</c> of the actual postal address that was saved to the entity.</param>
    /// <param name="_logisticsPostalAddressBaseEntityDataSourceName">The <c>LogisticsPostalAddresssBaseEntity</c> data source name; optional.</param>
    public void mapSavedPostalAddressToEntity(
        DataEntityRuntimeContext    _entityCtx,
        RecId                       _deliveryPostalAddressRecId,
        DataSourceName              _logisticsPostalAddressBaseEntityDataSourceName = tableStr(LogisticsPostalAddressBaseEntity))
    {
        DataEntityDataSourceRuntimeContext addressContext = _entityCtx.getRuntimeContextByName(_logisticsPostalAddressBaseEntityDataSourceName);
        LogisticsPostalAddressBaseEntity address = addressContext.getBuffer();

        if (address.AddressRecId != _deliveryPostalAddressRecId)
        {
            select firstonly forupdate address
                where address.AddressRecId == _deliveryPostalAddressRecId;

            addressContext.setBuffer(address);
            addressContext.setFieldStateForAllFields(FieldState::Set);
            this.mapDataSourceToEntity(_entityCtx, addressContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>RecId</c> of the party which will hold non order-specific adhoc delivery addresses.
    /// </summary>
    /// <returns>The <c>RecId</c> of the party.</returns>
    public RecId deliveryAddressPartyRecId()
    {
        // The method should be implemented on the mapped entity
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMappedFieldSet</Name>
				<Source><![CDATA[
    private boolean isMappedFieldSet(FieldId _mapFieldId)
    {
        int mapNum = tablenum(TradeEntitySpecificDeliveryAddress);
        TableId tableId = this.tableId;

        FieldId mapFieldId = SysDictField::findMappedFieldId(mapNum, _mapFieldId, tableId);

        return mapFieldId ? this.isFieldSet(mapFieldId) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAddressMatchExpression</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildAddressMatchExpression(LogisticsPostalAddress _postalAddress)
    {
        return new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, CountryRegionId)), new SysDaValueExpression(this.DeliveryAddressCountryRegionId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, State)), new SysDaValueExpression(this.DeliveryAddressStateId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, County)), new SysDaValueExpression(this.DeliveryAddressCountyId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, City)), new SysDaValueExpression(this.DeliveryAddressCity)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, Street)), new SysDaValueExpression(this.DeliveryAddressStreet)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, StreetNumber)), new SysDaValueExpression(this.DeliveryAddressStreetNumber)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, ZipCode)), new SysDaValueExpression(this.DeliveryAddressZipCode)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, DistrictName)), new SysDaValueExpression(this.DeliveryAddressDistrictName)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, Latitude)), new SysDaValueExpression(this.DeliveryAddressLatitude)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, Longitude)), new SysDaValueExpression(this.DeliveryAddressLongitude)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, BuildingCompliment)), new SysDaValueExpression(this.DeliveryBuildingCompliment)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, PostBox)), new SysDaValueExpression(this.DeliveryAddressPostBox)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryLocationIdFromLogisticsLocation</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQueryLocationIdFromLogisticsLocation(LogisticsLocation _logisticLocation)
    {
        SysDaQueryObject locationIdQueryObject = new SysDaQueryObject(_logisticLocation);
        locationIdQueryObject.projection().add(fieldStr(LogisticsLocation, LocationId));
        locationIdQueryObject.firstOnlyHint = SysDaFirstOnlyHint::FirstOnly1;

        return locationIdQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJoinDirPartyLocation</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildJoinDirPartyLocation(LogisticsLocation _logisticLocation)
    {
        DirPartyLocation dirPartyLocation;
        SysDaQueryObject partyLocationQueryObject = new SysDaQueryObject(dirPartyLocation);
        partyLocationQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(dirPartyLocation, fieldStr(DirPartyLocation, Location)), new SysDaFieldExpression(_logisticLocation, fieldStr(LogisticsLocation, RecId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(dirPartyLocation, fieldStr(DirPartyLocation, Party)), new SysDaValueExpression(this.deliveryAddressPartyRecId())))
            );

        return partyLocationQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJoinPostalAddress</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildJoinPostalAddress(Common _joinedTable, str _fieldName)
    {
        LogisticsPostalAddress postalAddress;
        SysDaQueryObject partyLocationQueryObject = new SysDaQueryObject(postalAddress);
        partyLocationQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(postalAddress, fieldStr(LogisticsPostalAddress, Location)), new SysDaFieldExpression(_joinedTable, _fieldName))
            .and(this.TradeEntitySpecificDeliveryAddress::buildAddressMatchExpression(postalAddress)));

        return partyLocationQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJoinSourceDocumentOnKey</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildJoinSourceDocumentOnKey(Common _srcDocTable, str _srcJoinFieldName, str _srcKeyFieldName, str _srcKeyFieldValue, LogisticsPostalAddress _postalAddress)
    {
        SysDaQueryObject partyLocationQueryObject = new SysDaQueryObject(_srcDocTable);
        partyLocationQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_srcDocTable, _srcJoinFieldName), new SysDaFieldExpression(_postalAddress, fieldStr(LogisticsPostalAddress, RecId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_srcDocTable, _srcKeyFieldName), new SysDaValueExpression(_srcKeyFieldValue))));

        return partyLocationQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPartyAddressLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the existing address logicstics location id.
    /// </summary>
    /// <returns>The logistics location id.</returns>
    public LogisticsLocationId findPartyAddressLocationId()
    {
        LogisticsLocation logisticLocation;

        SysDaQueryObject selectLocationIdQueryObj = this.TradeEntitySpecificDeliveryAddress::buildQueryLocationIdFromLogisticsLocation(logisticLocation);
        SysDaQueryObject joinDirPartyLocationQueryObj = this.TradeEntitySpecificDeliveryAddress::buildJoinDirPartyLocation(logisticLocation);
        SysDaQueryObject joinPostalAddressQueryObj = this.TradeEntitySpecificDeliveryAddress::buildJoinPostalAddress(joinDirPartyLocationQueryObj.table(), fieldStr(DirPartyLocation, Location));
        joinDirPartyLocationQueryObj.joinClause(SysDaJoinKind::ExistsJoin, joinPostalAddressQueryObj);
        selectLocationIdQueryObj.joinClause(SysDaJoinKind::ExistsJoin, joinDirPartyLocationQueryObj);

        SysDaSearchObject searchObj = new SysDaSearchObject(selectLocationIdQueryObj);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        searchStatement.next(searchObj);

        return logisticLocation.LocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderSpecificAddressLocationId</Name>
				<Source><![CDATA[
    public LogisticsLocationId findOrderSpecificAddressLocationId(Common _srcDocTable, str _srcJoinFieldName, str _srcKeyFieldName, str _srcKeyFieldValue)
    {
        LogisticsLocation logisticLocation;

        SysDaQueryObject selectLocationIdQueryObj = this.TradeEntitySpecificDeliveryAddress::buildQueryLocationIdFromLogisticsLocation(logisticLocation);
        SysDaQueryObject joinPostalAddressQueryObj = this.TradeEntitySpecificDeliveryAddress::buildJoinPostalAddress(logisticLocation, fieldStr(LogisticsLocation, RecId));
        SysDaQueryObject joinOrderSpecificQueryObj = this.TradeEntitySpecificDeliveryAddress::buildJoinSourceDocumentOnKey(_srcDocTable, _srcJoinFieldName, _srcKeyFieldName, _srcKeyFieldValue, joinPostalAddressQueryObj.table());
        joinPostalAddressQueryObj.joinClause(SysDaJoinKind::ExistsJoin, joinOrderSpecificQueryObj);
        selectLocationIdQueryObj.joinClause(SysDaJoinKind::ExistsJoin, joinPostalAddressQueryObj);

        SysDaSearchObject searchObj = new SysDaSearchObject(selectLocationIdQueryObj);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        searchStatement.next(searchObj);

        return logisticLocation.LocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCountryRegionId</Name>
				<Source><![CDATA[
    private void resolveCountryRegionId()
    {
        if (this.DeliveryAddressCountryRegionId == "" && this.DeliveryAddressCountryRegionISOCode)
        {
            this.DeliveryAddressCountryRegionId = SysCountryRegionCode::getCountryRegionIdByIsoCode(this.DeliveryAddressCountryRegionISOCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationId</Name>
				<Source><![CDATA[
    private void updateLocationId(LogisticsLocationId _locationId)
    {
        if (_locationId)
        {
            this.DeliveryLocationId = _locationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolvePartyAddressLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the address logicstics location id when location id isn't explicit set.
    /// </summary>
    public void resolvePartyAddressLocationId()
    {
        // When location Id is specified, no matter what address fields value input, use the Location Id address.
        if (!this.DeliveryLocationId)
        {
            this.TradeEntitySpecificDeliveryAddress::resolveCountryRegionId();

            var locationId = this.TradeEntitySpecificDeliveryAddress::findPartyAddressLocationId();
            this.TradeEntitySpecificDeliveryAddress::updateLocationId(locationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveOrderSpecificLocationId</Name>
				<Source><![CDATA[
    public void resolveOrderSpecificLocationId(str _orderNumber)
    {
        if (_orderNumber && !this.DeliveryLocationId)
        {
            this.TradeEntitySpecificDeliveryAddress::resolveCountryRegionId();

            SalesTable salesTable;
            var locationId = this.TradeEntitySpecificDeliveryAddress::findOrderSpecificAddressLocationId(
                                        salesTable, fieldStr(SalesTable, DeliveryPostalAddress), fieldStr(SalesTable, SalesId), _orderNumber);

            if (!locationId)
            {
                SalesLine salesLine;
                locationId = this.TradeEntitySpecificDeliveryAddress::findOrderSpecificAddressLocationId(
                                            salesLine, fieldStr(SalesLine, DeliveryPostalAddress), fieldStr(SalesLine, SalesId), _orderNumber);
            }

            this.TradeEntitySpecificDeliveryAddress::updateLocationId(locationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveQuotationSpecificLocationId</Name>
				<Source><![CDATA[
    public void resolveQuotationSpecificLocationId(str _quotationNumber)
    {
        if (_quotationNumber && !this.DeliveryLocationId)
        {
            this.TradeEntitySpecificDeliveryAddress::resolveCountryRegionId();

            SalesQuotationTable salesQuotationTable;
            var locationId = this.TradeEntitySpecificDeliveryAddress::findOrderSpecificAddressLocationId(
                                        salesQuotationTable, fieldStr(SalesQuotationTable, DeliveryPostalAddress), fieldStr(SalesQuotationTable, QuotationId), _quotationNumber);

            if (!locationId)
            {
                SalesQuotationLine salesQuotationLine;
                locationId = this.TradeEntitySpecificDeliveryAddress::findOrderSpecificAddressLocationId(
                                            salesQuotationLine, fieldStr(SalesQuotationLine, DeliveryPostalAddress), fieldStr(SalesQuotationLine, QuotationId), _quotationNumber);
            }

            this.TradeEntitySpecificDeliveryAddress::updateLocationId(locationId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>LogisticsDocumentWithDeliveryPostalAddressMapDevDocs</DeveloperDocumentation>
	<Visible>No</Visible>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDeliveryAddressOrderSpecific</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryLocationId</Name>
			<ExtendedDataType>LogisticsLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressCity</Name>
			<ExtendedDataType>LogisticsAddressCityName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressCountryRegionId</Name>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressCountryRegionISOCode</Name>
			<ExtendedDataType>LogisticsAddressCountryRegionISOCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressCountyId</Name>
			<ExtendedDataType>LogisticsAddressCountyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressDistrictName</Name>
			<ExtendedDataType>LogisticsAddressDistrictName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DeliveryAddressLatitude</Name>
			<ExtendedDataType>LogisticsAddressLatitude</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DeliveryAddressLongitude</Name>
			<ExtendedDataType>LogisticsAddressLongitude</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressPostBox</Name>
			<ExtendedDataType>LogisticsAddressPostBox</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressStateId</Name>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressStreet</Name>
			<ExtendedDataType>LogisticsAddressStreet</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressStreetNumber</Name>
			<ExtendedDataType>LogisticsAddressStreetNumber</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryAddressZipCode</Name>
			<ExtendedDataType>LogisticsAddressZipCodeId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryBuildingCompliment</Name>
			<ExtendedDataType>LogisticsAddressBuildingCompliment</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>