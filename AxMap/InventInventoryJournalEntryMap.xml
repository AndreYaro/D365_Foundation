<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryJournalEntryMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryJournalEntryMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an inventory journal header.
    /// </summary>
    /// <param name = "_journalNameId">The inventory journal name that the header is associated with.</param>
    /// <param name = "_expectedJournalType">The expected inventory journal type for the created inventory journal header.</param>
    /// <returns>A <c>InventJournalTable</c> record.</returns>
    /// <remarks>
    /// The inventory journal header is created based on the inventory journal name.
    /// The inventory journal type is validated against the expected inventory journal type, and will fail with an error if they do not match.
    /// </remarks>
    public static InventJournalTable createJournalHeader(JournalNameId _journalNameId, InventJournalType _expectedJournalType)
    {
        InventJournalName inventJournalName = InventJournalName::find(_journalNameId);
        InventJournalTable inventJournalTable;

        if (inventJournalName
            && inventJournalName.JournalType == _expectedJournalType)
        {
            inventJournalTable.initFromInventJournalName(inventJournalName);
            inventJournalTable.VoucherDraw = JournalVoucherDraw::Post;
            inventJournalTable.insert();
        }
        else
        {
            throw error(strFmt("@SYS22977", _expectedJournalType));
        }

        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal number on the inventory journal line.
    /// </summary>
    /// <param name = "_expectedJournalType">The expected journal type for the journal line.</param>
    /// <param name = "_approxNumberOfLines">Approx number of lines included in the same inventory journal; optional.</param>
    /// <remarks>
    /// The inventory journal line will be set to an existing journal number in case a inventory journal header exists with less than approx lines specified by the <paramref name="_approxNumberOfLines"/> parameter.
    /// If no inventory journal header exists a new inventory journal header will be created and the journal number will be used.
    /// The inventory journal type from the inventory journal name will be validated against the expected inventory journal type, and will fail with an error if they do not match.
    /// </remarks>
    public void setJournalNumber(
        InventJournalType   _expectedJournalType,
        int64               _approxNumberOfLines = 1000)
    {
        boolean checkJournalNameBeforeId = InventJournalEntityCheckJournalNameBeforeIdFlight::instance().isEnabled();

        if (!this.JournalNumber || checkJournalNameBeforeId)
        {
            // Validate failed: 1) if journal name is missing or journal name doesn't match journal type when journal number doesn't exist
            // 2) if journal name doesn't match journal type when journal number exists
            if (!this.JournalNumber ||
                (checkJournalNameBeforeId && this.JournalNumber && this.JournalNameId))
            {                
                InventJournalName inventJournalName = InventJournalName::find(this.JournalNameId);

                if (!inventJournalName.RecId || inventJournalName.JournalType != _expectedJournalType)
                {
                    throw Error(strFmt("@SCM:InventJournalEntityJournalNameCheck", this.JournalNameId, _expectedJournalType));
                }
            }

            if (checkJournalNameBeforeId && this.JournalNumber)
            {
                InventJournalTable inventJournalTable = InventJournalTable::find(this.JournalNumber);
                if (!inventJournalTable.RecId || inventJournalTable.JournalType != _expectedJournalType)
                {
                    throw Error(strFmt("@SCM:InventJournalEntityJournalIdCheck", this.JournalNumber, _expectedJournalType));
                }
            }            

            if (!this.JournalNumber)
            {
                InventJournalTable existingJournalTable;

                // See if we can find a journal header for the journal name
                // that do have less than approx lines specified in the _approxNumberOfLines parameter
                select firstonly JournalId, Posted, VoucherDraw, JournalType from existingJournalTable
                    order by JournalId desc
                    where existingJournalTable.JournalNameId == this.JournalNameId
                        && existingJournalTable.NumOfLines < _approxNumberOfLines;

                if (existingJournalTable.JournalId
                    && existingJournalTable.JournalType == _expectedJournalType
                    && existingJournalTable.Posted == NoYes::No
                    && existingJournalTable.VoucherDraw == JournalVoucherDraw::Post)
                {
                    // Only use existing journal where voucher numbers are assigned when posting and journal is not already posted
                    this.JournalNumber = existingJournalTable.JournalId;
                }
                else
                {
                    this.JournalNumber = InventInventoryJournalEntryMap::createJournalHeader(this.JournalNameId, _expectedJournalType).JournalId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost amount.
    /// </summary>
    /// <param name = "_journalTrans">The inventory journal line used for calculating the cost amount.</param>
    /// <param name = "_inventDim">The inventory dimensions used for calculating the cost amount.</param>
    public void calculateCostAmount(
        InventJournalTrans  _journalTrans,
        InventDim           _inventDim)
    {
        var movement = _journalTrans.inventMovement();
        if (!movement.inventModelGroup().StandardCost
                            && !movement.inventModelGroup().inventModelType().stdCostBased()
                            && (movement.inventTable().inventItemType().isServiceItem() || movement.transSign() > 0 ))
        {
            if (this.isFieldSet(SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, UnitCost), this.TableId)))
            {
                // Calculates the cost amount based on unit cost and charges
                movement.journalSetCostPrice();
            }
            else if (this.isFieldSet(SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, CostAmount), this.TableId)))
            {
                // Calculates unit cost and clears charges
                movement.journalSetCostAmount();
            }
            else
            {
                // Default cost
                _journalTrans.setCostPrice('', _inventDim);
            }
        }
        else
        {
            // Default cost
            _journalTrans.setCostPrice('', _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default dimensions.
    /// </summary>
    /// <param name = "_journalTrans">The inventory journal line used for setting default dimensions.</param>
    public void setDefaultDimensions(InventJournalTrans _journalTrans)
    {
        if (!this.DefaultDimensionDisplayValue)
        {
            _journalTrans.DefaultDimension = _journalTrans.copyDimension(InventTable::find(this.ItemNumber).DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an inventory journal line.
    /// </summary>
    /// <param name = "_journalTable">The inventory journal header used for initializing.</param>
    /// <param name = "_journalTrans">The inventory journal line that will be initialized.</param>
    /// <returns>true if the inventory journal line can be initialized; otherwise, false.</returns>
    public boolean initializeJournalLine(InventJournalTable _journalTable, InventJournalTrans _journalTrans)
    {
        if (_journalTable.VoucherDraw != JournalVoucherDraw::Post)
        {
            return checkFailed("@SCM:ImportInventInventoryJournalVoucherNotPosting");
        }

        FieldId offsetMainAccountFieldId = SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, OffsetMainAccountIdDisplayValue), this.TableId);
        if (offsetMainAccountFieldId
            && !this.isFieldSet(offsetMainAccountFieldId))
        {
            _journalTrans.LedgerDimension = _journalTable.LedgerDimension;
        }

        _journalTrans.JournalType = _journalTable.JournalType;
        _journalTrans.Worker = _journalTable.Worker;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryStatus</Name>
				<Source><![CDATA[
    private void defaultInventoryStatus()
    {
        if (!this.InventoryStatusId && WHSInventEnabled::exist(this.ItemNumber))
        {
            this.InventoryStatusId = WHSParameters::find().DefaultStatusId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetMainAccountId</Name>
				<Source><![CDATA[
    private void defaultOffsetMainAccountId()
    {
        if (!this.OffsetMainAccountId)
        {
            this.OffsetMainAccountId = this.JournalHeaderOffsetMainAccountId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceUnit</Name>
				<Source><![CDATA[
    private void defaultPriceUnit()
    {
        if (!this.PriceUnit)
        {
            this.PriceUnit = 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionDate</Name>
				<Source><![CDATA[
    private void defaultTransactionDate()
    {
        if (!this.TransactionDate)
        {
            this.TransactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, InventoryStatusId), this.TableId):
                this.InventInventoryJournalEntryMap::defaultInventoryStatus();
                break;

            case SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, OffsetMainAccountId), this.TableId):
                this.InventInventoryJournalEntryMap::defaultOffsetMainAccountId();
                break;

            case SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, PriceUnit), this.TableId):
                this.InventInventoryJournalEntryMap::defaultPriceUnit();
                break;

            case SysDictField::findMappedFieldId(tableNum(InventInventoryJournalEntryMap), fieldNum(InventInventoryJournalEntryMap, TransactionDate), this.TableId):
                this.InventInventoryJournalEntryMap::defaultTransactionDate();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightQuantities</Name>
				<Source><![CDATA[
    private boolean validateCatchWeightQuantities()
    {
        if (this.CatchWeightQuantity && !PdsCatchWeightItem::find(this.ItemNumber))
        {
            return checkFailed(strFmt("@SCM:InventInventoryJournalCatchWeightQuantity", this.ItemNumber));
        }

        return PdsCatchWeight::validateQty(
                    this.ItemNumber,
                    this.InventoryQuantity,
                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(this.ItemNumber, ModuleInventPurchSales::Invent).UnitId),
                    this.CatchWeightQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field values.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets validated.</param>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        var tableName = this.getPhysicalTableName();
        if (tableName == tableStr(InventInventoryAdjustmentJournalEntryEntity))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventInventoryAdjustmentJournalEntryEntity, CatchWeightQuantity):
                case fieldNum(InventInventoryAdjustmentJournalEntryEntity, InventoryQuantity):
                    ret = ret && this.InventInventoryJournalEntryMap::validateCatchWeightQuantities();
                    break;
            }
        }
        else if (tableName == tableStr(InventInventoryMovementJournalEntryEntity))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventInventoryMovementJournalEntryEntity, CatchWeightQuantity):
                case fieldNum(InventInventoryMovementJournalEntryEntity, InventoryQuantity):
                    ret = ret && this.InventInventoryJournalEntryMap::validateCatchWeightQuantities();
                    break;
            }
        }        
        else if (tableName == tableStr(InventInventoryMovementJournalEntryEntityV2))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventInventoryMovementJournalEntryEntityV2, CatchWeightQuantity):
                case fieldNum(InventInventoryMovementJournalEntryEntityV2, InventoryQuantity):
                    ret = ret && this.InventInventoryJournalEntryMap::validateCatchWeightQuantities();
                    break;
            }
        }
        else if (tableName == tableStr(InventInventoryMovementJournalEntryV3Entity))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventInventoryMovementJournalEntryV3Entity, CatchWeightQuantity):
                case fieldNum(InventInventoryMovementJournalEntryV3Entity, InventoryQuantity):
                    ret = ret && this.InventInventoryJournalEntryMap::validateCatchWeightQuantities();
                    break;
            }
		}
        else if (tableName == tableStr(InventInventoryMovementJournalEntryV4Entity))
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventInventoryMovementJournalEntryV4Entity, CatchWeightQuantity):
                case fieldNum(InventInventoryMovementJournalEntryV4Entity, InventoryQuantity):
                    ret = ret && this.InventInventoryJournalEntryMap::validateCatchWeightQuantities();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemNumber</Name>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InventoryQuantity</Name>
			<ExtendedDataType>InventQtyJournal</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CatchWeightQuantity</Name>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNumber</Name>
			<ExtendedDataType>InventJournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNameId</Name>
			<ExtendedDataType>InventJournalNameId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefaultDimensionDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>UnitCost</Name>
			<ExtendedDataType>ItemCostPrice</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CostAmount</Name>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OffsetMainAccountIdDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventoryStatusId</Name>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>OffsetMainAccountId</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>JournalHeaderOffsetMainAccountId</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>TransactionDate</Name>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>