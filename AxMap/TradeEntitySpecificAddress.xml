<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeEntitySpecificAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeEntitySpecificAddress extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findLogisticsPostalAddressBaseEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LogisticsPostalAddressBaseEntity</c> datasource when a conflict is detected
    /// when saving the document that has a postal address.
    /// </summary>
    /// <returns>The <c>LogisticsPostalAddressBaseEntity</c> record.</returns>
    public static LogisticsPostalAddressBaseEntity findLogisticsPostalAddressBaseEntityDataSource()
    {
        // We want to always ignore conflict detection because when LocationId is specified the database operation should be None
        // and for ad hoc addresses we want to treat updates as inserts.
        LogisticsPostalAddressBaseEntity addressEntity = null;
        return addressEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPostalAddressDataSourceToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the <c>LogisticsPostalAddressBaseEntity</c> datasource is being mapped to the entity.
    /// </summary>
    /// <param name = "_logisticsPostalAddressBaseEntityDataSourceCtx">The data source context for <c>LogisticsPostalAddresssBaseEntity</c>.</param>
    /// <param name = "_tradeEntitySpecificAddressMapTableId">The table ID of the map used on the data entity for mapping the <c>LogisticsPostalAddresssBaseEntity</c> data entity.</param>
    /// <param name = "_tradeEntitySpecificAddressLocationId">The Location ID of the map used on the data entity for mapping the <c>LogisticsPostalAddresssBaseEntity</c> data entity.</param>
    /// <param name = "_tradeEntitySpecificAddressRecord">The record of the map used on the data entity for mapping the <c>LogisticsPostalAddresssBaseEntity</c> data entity.</param>
    public void mapPostalAddressDataSourceToEntity(
        DataEntityDataSourceRuntimeContext  _logisticsPostalAddressBaseEntityDataSourceCtx,
        TableId                             _tradeEntitySpecificAddressMapTableId,
        FieldId                             _tradeEntitySpecificAddressLocationId,
        Common                              _tradeEntitySpecificAddressRecord)
    {
        FieldId mapFieldId = SysDictField::findMappedFieldId(_tradeEntitySpecificAddressMapTableId, _tradeEntitySpecificAddressLocationId, this.TableId);

        if (mapFieldId && _tradeEntitySpecificAddressRecord.isFieldSet(mapFieldId))
        {
            _logisticsPostalAddressBaseEntityDataSourceCtx.setBuffer(LogisticsPostalAddressBaseEntity::findByLocationId(_tradeEntitySpecificAddressRecord.(mapFieldId)));
            _logisticsPostalAddressBaseEntityDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
        else if (_logisticsPostalAddressBaseEntityDataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            _logisticsPostalAddressBaseEntityDataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Insert);

            if (_tradeEntitySpecificAddressRecord.(mapFieldId))
            {
                // The base entity does not initialize the location ID when it is set.
                // Get a new location Id for the switch from update to insert.
                _tradeEntitySpecificAddressRecord.(mapFieldId) = LogisticsLocation::getNewLocationId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSavedPostalAddressToEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the actual address to the entity.
    /// </summary>
    /// <param name="_entityCtx">The data entity runtime context.</param>
    /// <param name="_postalAddressRecId">The <c>RecId</c> of the actual postal address that was saved to the entity.</param>
    /// <param name="_logisticsPostalAddressBaseEntityDataSourceName">The <c>LogisticsPostalAddresssBaseEntity</c> data source name; optional.</param>
    public void mapSavedPostalAddressToEntity(
        DataEntityRuntimeContext    _entityCtx,
        RecId                       _postalAddressRecId,
        DataSourceName              _logisticsPostalAddressBaseEntityDataSourceName = tableStr(LogisticsPostalAddressBaseEntity))
    {
        DataEntityDataSourceRuntimeContext addressContext = _entityCtx.getRuntimeContextByName(_logisticsPostalAddressBaseEntityDataSourceName);
        LogisticsPostalAddressBaseEntity address = addressContext.getBuffer();

        if (address.AddressRecId != _postalAddressRecId)
        {
            select firstonly forupdate address where
                address.AddressRecId == _postalAddressRecId;

            addressContext.setBuffer(address);
            addressContext.setFieldStateForAllFields(FieldState::Set);
            this.mapDataSourceToEntity(_entityCtx, addressContext);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups />
	<Fields />
	<Mappings />
</AxMap>