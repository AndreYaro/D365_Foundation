<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesPurchJournalTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTaxDocumentHeaderRowString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build tax document header display string.
    /// </summary>
    /// <param name="_dictTable">
    /// Source _dictTable.
    /// </param>
    /// <param name="_buffer">
    /// Source transaction record.
    /// </param>
    /// <returns>
    /// Tax document row display string.
    /// </returns>
    public static str buildTaxDocumentHeaderRowString(DictTable _dictTable, Common _buffer)
    {
        TaxDocumentDisplayString    ret;
        DictTable                   dictTable;
        Common                      buffer;
        TableId                     tableId;
        TableName                   tableName;
        FieldId                     displayField1;
        FieldId                     displayField2;
        #define.displayFieldNameProjProposalJour('ProjProposalJour')
        #define.displayFieldNameProjInvoiceJour('ProjInvoiceJour')

        dictTable   = _dictTable;
        buffer      = _buffer;
        tableId     = _dictTable.id();
        tableName   = _dictTable.name();

        switch (tableId)
        {
            case tableNum(TaxEngineProjRevenueTransHeader) :
            case tableNum(TaxEngineProjCostTransHeader) :
            case tableNum(TaxEngineProjEmplTransHeader) :
            case tableNum(TaxEngineProjItemTransHeader) :
            case tableNum(TaxEngineProjItemSOTransHeader) :
            case tableNum(TaxEngineProjOnAcctTransHeader) :
            case tableNum(TaxEngineProjRevenueSubTransHeader) :
                buffer          = ProjProposalJour::findRecid(_buffer.getFieldValue(fieldId2name(_dictTable.id(), _dictTable.fieldName2Id(#displayFieldNameProjProposalJour))));
                tableId         = buffer.TableId;
                displayField1   = fieldNum(ProjProposalJour, ProposalId);
                displayField2   = fieldNum(ProjProposalJour, ProjInvoiceProjId);
                break;

            case tableNum(TaxEngineProjRevenueJourHeader) :
            case tableNum(TaxEngineProjCostJourHeader) :
            case tableNum(TaxEngineProjEmplJourHeader) :
            case tableNum(TaxEngineProjItemJourHeader) :
            case tableNum(TaxEngineProjItemSOJourHeader) :
            case tableNum(TaxEngineProjOnAcctJourHeader) :
            case tableNum(TaxEngineProjRevenueSubJourHeader) :
                buffer          = ProjInvoiceJour::findRecid(_buffer.getFieldValue(fieldId2name(_dictTable.id(), _dictTable.fieldName2Id(#displayFieldNameProjInvoiceJour))));
                tableId         = buffer.TableId;
                displayField1   = fieldNum(ProjInvoiceJour, ProjInvoiceId);
                displayField2   = fieldNum(ProjInvoiceJour, InvoiceDate);
                break;

            case tableNum(SalesParmTable) :
                displayField1 = fieldNum(SalesParmTable, SalesId);
                displayField2 = fieldNum(SalesParmTable, SalesName);
                break;

            default :
                displayField1 = dictTable.titleField1();
                displayField2 = dictTable.titleField2();
        }

        str titleField1Label, titleField1Value, titleField2Label, titleField2Value;
        if (displayField1)
        {
            titleField1Label = TaxIntegrationUtils::getFieldLabel(tableId, displayField1);
            titleField1Value = buffer.getFieldValue(fieldId2name(tableId, displayField1));
        }

        if (displayField2)
        {
            titleField2Label = TaxIntegrationUtils::getFieldLabel(tableId, displayField2);
            titleField2Value = buffer.getFieldValue(fieldId2name(tableId, displayField2));
        }

        ret = strFmt("%1 %2: %3, %4: %5", dictTable.name(), titleField1Label, titleField1Value, titleField2Label, titleField2Value);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if this transaction is price includes sales tax.
    /// </summary>
    /// <returns>
    /// True if the transaction is price includes sales tax; otherwise, false.
    /// </returns>
    public InclTax inclTax()
    {
        InclTax ret;
        SalesParmTable                      salesParmTable;
        PurchParmTable                      purchParmTable;
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        LedgerJournalTable                  ledgerJournalTable;
        PurchRFQReplyTable                  purchRFQReplyTable;
        PurchRFQParmTable                   purchRFQParmTable;
        SalesQuotationParmTable             salesQuotationParmTable;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;

        switch (this.SourceTableId)
        {
            case tableNum(SalesParmTable):
                salesParmTable = this;
                ret = salesParmTable.salesTable().InclTax;
                break;

            case tableNum(PurchParmTable):
                purchParmTable = this;
                ret = purchParmTable.purchTable().InclTax;
                break;

            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = this;
                ret = vendInvoiceInfoTable.purchTable().InclTax;
                break;

            case tableNum(PurchRFQReplyTable):
                purchRFQReplyTable = this;
                ret = purchRFQReplyTable.purchRFQTable().InclTax;
                break;

            case tableNum(PurchRFQParmTable):
                purchRFQParmTable = this;
                ret = purchRFQParmTable.purchRFQTable().InclTax;
                break;

            case tableNum(SalesQuotationParmTable):
                salesQuotationParmTable = this;
                ret = salesQuotationParmTable.salesQuotationTable().InclTax;
                break;

            case tableNum(TaxEngineLedgerJournalTransHeader):
                taxEngineLedgerJournalTransHeader = this;
                ledgerJournalTable = LedgerJournalTable::find(taxEngineLedgerJournalTransHeader.JournalNum);
                ret = ledgerJournalTable.LedgerJournalInclTax;
                break;

            case tableNum(CustInvoiceTable),
                tableNum(LedgerJournalTable),
                tableNum(PurchRFQCaseTable),
                tableNum(PurchRFQTable),
                tableNum(PurchTable),
                tableNum(SalesQuotationTable),
                tableNum(SalesTable):
                ret = this.inclTax;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records from the table buffer.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> class.
    /// </returns>
    [Replaceable]
    public static SalesPurchJournalTable getBuffer(TableId _tableId)
    {
        SalesPurchJournalTable ret;

        if (SysDictTable::isTableMapped(tableNum(SalesPurchJournalTable), _tableId))
        {
            DictTable dictTable = new DictTable(_tableId);
            ret = dictTable.makeRecord();
        }
        else
        {
            throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record of the sales purch journal table based on RecId.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <param name="_forUpdate">
    /// True if the record will be update.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> table.
    /// </returns>
    public static SalesPurchJournalTable findRecId(TableId _tableId, RecId _recId, boolean _forUpdate = false)
    {
        SalesPurchJournalTable ret;

        ret = SalesPurchJournalTable::getBuffer(_tableId);

        ret.selectForUpdate(_forUpdate);

        select firstOnly * from ret
            where ret.SourceRecId == _recId;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@GLS5561</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>SourceTableId</Name>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>JournalPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InclTax</Name>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>TaxId</Name>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PartyTaxId</Name>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ListCode</Name>
			<EnumType>ListCode</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>