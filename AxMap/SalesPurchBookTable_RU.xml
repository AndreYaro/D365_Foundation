<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchBookTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesPurchBookTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
        public TransDate getFromDate()
    {
        SalesBookTrans_RU      salesBookTrans;
        PurchBookTrans_RU      purchBookTrans;
        SalesPurchBookTable_RU prevBook = this.getPreviousBook();

        SalesPurchBookTrans_RU salesPurchBookTrans;
        ;
        if (this.TableId == tablenum(SalesBookTable_RU))
        {
            salesPurchBookTrans = salesBookTrans;
        }
        else
        {
            salesPurchBookTrans = purchBookTrans;
        }

        if (prevBook)
        {
            return prevBook.ClosingDate + 1;
        }

        select firstonly FactureDate from salesPurchBookTrans
            order by FactureDate
            where salesPurchBookTrans.SalesPurchBookTable_RU == this.RecId;

        return salesPurchBookTrans.FactureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousBook</Name>
				<Source><![CDATA[
        public SalesPurchBookTable_RU getPreviousBook()
    {
        PurchBookTable_RU      purchBook;
        SalesBookTable_RU      salesBook;

        SalesPurchBookTable_RU prevBook;
        if (this.TableId == tablenum(SalesBookTable_RU))
        {
            prevBook = salesBook;
        }
        else
        {
            prevBook = purchBook;
        }

        if (this.isActiveBook())
        {
            select reverse firstonly prevBook
                order by ClosingDate
                where prevBook.ClosingDate != dateNull();
        }
        else
        {
            select reverse firstonly prevBook
                 order by ClosingDate
                 where prevBook.ClosingDate < this.ClosingDate &&
                       prevBook.ClosingDate != dateNull();
        }

        return prevBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
        public TransDate getToDate()
    {
        TaxPeriodDate          fromDate;
        TaxPeriodDate          toDate;
        SalesPurchBookTable_RU prevBook;
        SalesBookTrans_RU      salesBookTrans;
        PurchBookTrans_RU      purchBookTrans;

        SalesPurchBookTrans_RU salesPurchBookTrans;
        if (this.TableId == tablenum(SalesBookTable_RU))
        {
            salesPurchBookTrans = salesBookTrans;
        }
        else
        {
            salesPurchBookTrans = purchBookTrans;
        }

        if (this.ClosingDate)
        {
            return this.ClosingDate;
        }

        prevBook = this.getPreviousBook();
        if (prevBook)
        {
            [fromDate, toDate] = TaxReportPeriod::datePeriodPurchSalesBook_RU(this.getFromDate());
        }
        else
        {
            select reverse firstonly FactureDate from salesPurchBookTrans
                order by FactureDate
                where salesPurchBookTrans.SalesPurchBookTable_RU == this.RecId;
            toDate = salesPurchBookTrans.FactureDate;
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveBook</Name>
				<Source><![CDATA[
        public boolean isActiveBook()
    {
        return this.ClosingDate == dateNull() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastBook</Name>
				<Source><![CDATA[
        public static boolean isLastBook(SalesPurchBookTable_RU _bookTable)
    {
        PurchBookTable_RU purchBookTable;
        SalesBookTable_RU salesBookTable;
        ;

        switch (_bookTable.TableId)
        {
            case tablenum(PurchBookTable_RU) :
                purchBookTable = _bookTable;
                return purchBookTable.isLastBook();
            case tablenum(SalesBookTable_RU) :
                salesBookTable = _bookTable;
                return salesBookTable.isLastBook();
            default                          :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS111308</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BookId</Name>
			<ExtendedDataType>SalesPurchBookId_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ClosingDate</Name>
			<ExtendedDataType>SalesPurchBookClosingDate_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>LastUpdateDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS16686</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Log</Name>
			<ExtendedDataType>Log</ExtendedDataType>
			<StringSize>-1</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Policy</Name>
			<EnumType>CustTaxation_RU</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>