<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendTransInterface</Name>
				<Source><![CDATA[
    public CustVendTransInterface custVendTransInterface()
    {
        return CustVendTransInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiTransByVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether multiple <c>CustTrans</c> or <c>VendTrans</c> records exist with the same voucher and date.
    /// </summary>
    /// <returns>
    ///  false if multiple transactions exist with the same voucher and date; otherwise, true.
    /// </returns>
    public boolean checkMultiTransByVoucherDate()
    {
        return this.custVendTransInterface().checkMultiTransByVoucherDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentScheduleApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a payment schedule has been applied to the transaction.
    /// </summary>
    /// <returns>true if a payment schedule has been applied; otherwise, false.</returns>
    public boolean checkPaymentScheduleApplied()
    {
        return this.custVendTransInterface().checkPaymentScheduleApplied();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLastSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the last settlement of the current record.
    /// </summary>
    /// <param name="_settleAmountCur">
    /// The settlement amount to be removed from the current record.
    /// </param>
    /// <param name="_settleAmountMst">
    /// The calculated settlement amount for a particular monetary standard (MST)
    /// to be removed from the current record.
    /// </param>
    /// <param name="_settleAmountReporting">
    /// The calculated settlement amount for a particular reporting currency.
    /// to be removed from the current record.
    /// </param>
    /// <remarks>
    /// A record with no last settlement is not the same as a record with no settlements.
    /// </remarks>
    public void clearLastSettlement(AmountCur _settleAmountCur = 0, AmountMST _settleAmountMst = 0, AmountMSTSecondary _settleAmountReporting = 0)
    {
        this.custVendTransInterface().clearLastSettlement(_settleAmountCur, _settleAmountMst, _settleAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the exchange rate from the transaction currency to the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The exchange rate for the transaction.
    /// </returns>
    /// <remarks>
    ///    The method returns the <c>ExchRate</c> field if there is no triangulation. If there is
    ///    triangulation this returns the <c>ExchRateSecond</c> field divided by the <c>ExchRate</c> field.
    /// </remarks>
    public ExchRate exchRateCurToMst()
    {
        return this.custVendTransInterface().exchRateCurToMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>CustVendTrans</c> with the given RecId.
    /// </summary>
    /// <param name = "_module">
    ///     The module the <c>CustVendTrans</c> record is in.
    /// </param>
    /// <param name = "_recId">
    ///     The RecId to find.
    /// </param>
    /// <param name = "_forupdate">
    ///     If true, marks the returned <c>CustVendTrans</c> for update (optional).
    /// </param>
    /// <returns>
    ///     The <c>CustVendTrans</c> record with the given RecId.
    /// </returns>
    public static CustVendTrans findByModule(ModuleCustVend _module, RecId _recId, boolean _forupdate = false)
    {
        return CustVendTransInterface::findByModule(_module, _recId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRelatedCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustVendTrans</c> that is associated with a given <c>CustVendTransOpen</c>.
    /// </summary>
    /// <param name="_custVendTransOpen">
    ///     The <c>CustVendTransOpen</c> to find a related <c>CustVendTrans</c> for.
    /// </param>
    /// <param name="_forUpdate">
    ///     If true, marks the returned <c>CustVendTrans</c> for update (optional).
    /// </param>
    /// <returns>
    ///    The associated <c>CustVendTrans</c>.
    /// </returns>
    public static CustVendTrans findByRelatedCustVendTransOpen(CustVendTransOpen _custVendTransOpen, boolean _forUpdate = false)
    {
        return CustVendTransInterface::findByRelatedCustVendTransOpen(_custVendTransOpen, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTransPaidWithCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction has been paid using cheques.
    /// </summary>
    /// <returns>
    /// The <c>BankAccountTrans</c> record in case it was paid using cheques; empty buffer otherwise.
    /// </returns>
    public BankAccountTrans getBankAccountTransPaidWithCheque()
    {
        return this.custVendTransInterface().getBankAccountTransPaidWithCheque();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the consolidation ID.
    /// </summary>
    /// <returns>
    /// The consolidation ID.
    /// </returns>
    public CustVendConsId_JP getConsId_JP()
    {
        return this.custVendTransInterface().getConsId_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the child extension table from the parent table.
    /// </summary>
    /// <returns>
    /// The child map containing the country specific fields.
    /// </returns>
    public CustVendTrans_W getCustVendTrans_W()
    {
        return this.custVendTransInterface().getCustVendTrans_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetEPPaymentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines value to <c>EPPaymentType_BR</c> and <c>EPPaymentWay_BR</c> fields based on id received in parameters
    /// </summary>
    /// <param name="_tableId">
    ///     Id of one of mapped tables.
    /// </param>
    /// <param name="_recId">
    ///     Record Id to search original record.
    /// </param>
    /// <returns>
    ///     An instance of vendTransPayment_BR.
    /// </returns>
    /// <remarks>
    ///     <c>EPPaymentType_BR</c> and <c>EPPaymentWay_BR</c> can receive values from CustTransPayment_BR
    ///     although vendTransPayment_BR instance is returned.
    /// </remarks>
    public VendTransPayment_BR GetEPPaymentType_BR(TableId _tableId, RecId _recId)
    {
        return this.custVendTransInterface().GetEPPaymentType_BR(_tableId, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the retrieved table buffer from the query for the concrete table represented by the map.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    The retrieved table buffer from the query for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public CustVendTrans getFromQuery(QueryRun _queryRun)
    {
        return this.custVendTransInterface().getFromQuery(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the concrete table represented by the map has changed in the query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    true if the concrete table represented by the map has changed in the query; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public boolean hasChangedInQuery(QueryRun _queryRun)
    {
        return this.custVendTransInterface().hasChangedInQuery(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for field <c>ConsInvoice_JP</c> with the record Id of last confirmed consolidated invoice.
    /// </summary>
    /// <remarks>
    /// Field is set only when TransType is LedgerTransType::Payment or LedgerTransType::CashDiscount.
    /// </remarks>
    public void initConsInvoice_JP()
    {
        this.custVendTransInterface().initConsInvoice_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines if the current record is marked.
    /// </summary>
    /// <returns>
    /// True if the current records is marked in the <c>SpecTrans</c> table.
    /// </returns>
    public boolean isMarkedForSettlement()
    {
        return this.custVendTransInterface().isMarkedForSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs any change made to the child table to the parent table.
    /// </summary>
    /// <param name="_custVendTrans_W">
    /// The map containing the country specific fields.
    /// </param>
    public void packCustVendTrans_W(CustVendTrans_W _custVendTrans_W)
    {
        this.custVendTransInterface().packCustVendTrans_W(_custVendTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmAccount(LedgerJournalAC _account = this.AccountNum)
    {
        return this.custVendTransInterface().parmAccount(_account);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountMSTModified_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of related consolidted invoice when settle amount is modified.
    /// </summary>
    /// <remarks>
    /// It is called from table method "update".
    /// </remarks>
    public void settleAmountMSTModified_JP()
    {
        this.custVendTransInterface().settleAmountMSTModified_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionPerDate</Name>
				<Source><![CDATA[
    public void transactionPerDate(TransDate _transDate)
    {
        this.custVendTransInterface().transactionPerDate(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDate_RU</Name>
				<Source><![CDATA[
    public static DueDate getDueDate_RU(CustVendTrans _custVendTrans)
    {
        return CustVendTransInterface::getDueDate_RU(_custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The module consuming the map.
    /// </param>
    /// <returns>
    ///    An empty table buffer for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public static CustVendTrans getEmptyTableBuffer(ModuleCustVend _moduleCustVend)
    {
        return CustVendTransInterface::getEmptyTableBuffer(_moduleCustVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForCompensation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the selected records can participate in compensation.
    /// </summary>
    /// <param name="_formDS">
    /// The selected records are marked in the data source.
    /// </param>
    /// <exception cref="Exception::Error">
    /// One of the selected transactions is closed.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The selected transactions have a mixture of currency codes.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// One of the selected transactions is marked for settlement.
    /// </exception>
    public static void validateForCompensation(FormDataSource _formDS)
    {
        CustVendTransInterface::validateForCompensation(_formDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets related <c>BankLCCustVendTrans</c>.
    /// </summary>
    /// <returns>
    /// The <c>BankLCCustVendTrans</c> record.
    /// </returns>
    public BankLCCustVendTrans getBankLCCustVendTrans()
    {
        return this.custVendTransInterface().getBankLCCustVendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns inventory profile type by commission profile type.
    /// </summary>
    /// <param name="_commProfileType">
    /// Commission profile type.
    /// </param>
    /// <returns>
    /// Inventory profile type which matches to commission profile type.
    /// </returns>
    public static InventProfileType_RU inventProfileType_RU(CommProfileType_RU _commProfileType)
    {
        switch (_commProfileType)
        {
            case CommProfileType_RU::General :
                return InventProfileType_RU::General;

            case CommProfileType_RU::CommissionAgent :
                return InventProfileType_RU::CommissionAgent;

            case CommProfileType_RU::CommissionPrincipalAgent :
                return InventProfileType_RU::CommissionPrincipalAgent;
        }

        return InventProfileType_RU::NotSpecified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommPrepaymentUsedAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates commision agent prepayment used amount.
    /// </summary>
    /// <param name = "_refCurrent"></param>
    /// <returns>Commision agent prepayment used amount.</returns>
    public AmountMST getCommPrepaymentUsedAmount_RU(RefRecId _refCurrent = 0)
    {
        CommReportTransPrepayment_RU reportTrans;
        CustVendTrans_W custVendTrans_W;

        switch (this.TableId)
        {
            case tableNum(CustTrans):
                custVendTrans_W = CustTrans_W::findByCustTrans(this.RecId);
                break;
            case tableNum(VendTrans):
                custVendTrans_W = VendTrans_W::findByVendTrans(this.RecId);
                break;
        }

        if (! this.Prepayment || custVendTrans_W.CommProfileType_RU == CommProfileType_RU::General)
        {
            return 0;
        }

        select sum(LineAmountMST) from reportTrans
            where reportTrans.RefTableId == this.TableId
               && reportTrans.RefRecId   == this.RecId
               && (! _refCurrent
               || reportTrans.RecId      != _refCurrent);

        return reportTrans.LineAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the date for transaction inside of the period of the given parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// parm _fromDate holds the from date value from FEC setup.
    /// </param>
    /// <param name="_toDate">
    /// parm _toDate holds the to date value from FEC setup.
    /// </param>
    /// <returns>
    /// The date if exists otherwise empty value.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// The context allows to get the date of the last settlement in the specified period.
    /// </remarks>
    public TransDate getTransDate(TransDate _fromDate, TransDate _toDate)
    {
        TransDate ret;

        CustVendsettlement custVendSettlement = CustVendTransStatic::construct(this).custVendSettlement();

        if (FECContext::current())
        {
            boolean onlyCanBeReversedSettlements;
            if (FeatureStateProvider::isFeatureEnabled(FECOneVoucherInEcritureLetFeature_FR::instance()))
            {
                onlyCanBeReversedSettlements = this.TransType != LedgerTransType::ExchAdjustment && !TransactionReversalTrans::findTransactionReversalTrans(this.TableId, this.RecId).Reversed;
            }
            else
            {
                onlyCanBeReversedSettlements = !TransactionReversalTrans::findTransactionReversalTrans(this.TableId, this.RecId).Reversed;
            }

            select firstonly TransDate from custVendSettlement
                order by TransDate desc, RecId
                    where custVendSettlement.TransDate >= _fromDate
                        && custVendSettlement.TransDate <= _toDate
                        && custVendSettlement.TransRecId == this.RecId
                        && custVendSettlement.AccountNum == this.AccountNum
                        && custVendSettlement.TransCompany == this.dataAreaId
                        && (!onlyCanBeReversedSettlements
                                || custVendSettlement.CanBeReversed);

            ret = custVendSettlement.TransDate;
        }
        else
        {
            CustVendTrans custVendTransOffset = CustVendTransStatic::construct(this).custVendTrans();

            select firstonly TransDate from custVendTransOffset
                order by TransDate desc
                    where custVendTransOffset.TransDate  >= _fromDate
                        && custVendTransOffset.TransDate <= _toDate
                exists join custVendSettlement
                    where custVendSettlement.OffsetRecid    == custVendTransOffset.RecId
                        && custVendSettlement.TransRecId        == this.RecId
                        && custVendSettlement.AccountNum        == this.AccountNum
                        && custVendSettlement.TransCompany      == this.dataAreaId;

            ret = custVendTransOffset.TransDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the offset voucher for the transaction.
    /// </summary>
    /// <param name="_fromDate">
    /// parm _fromDate holds the from date value from FEC setup.
    /// </param>
    /// <param name="_toDate">
    /// parm _toDate holds the to date value from FEC setup.
    /// </param>
    /// <returns>
    /// The offset voucher if exists otherwise empty value.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public Container getOffsetVoucher(TransDate _fromDate, TransDate _toDate)
    {
        container voucher;

        CustVendTrans custVendTransOffset = CustVendTransStatic::construct(this).custVendTrans();
        CustVendSettlement custVendSettlement = CustVendTransStatic::construct(this).custVendSettlement();
        
        if (FECContext::current())
        {
            while select OffsetTransVoucher from custVendSettlement
                where custVendSettlement.TransDate >= _fromDate
                   && custVendSettlement.TransDate <= _toDate
                   && custVendSettlement.TransRecId == this.RecId
                   && custVendSettlement.AccountNum == this.AccountNum
                   && custVendSettlement.TransCompany == this.dataAreaId
            exists join custVendTransOffset
                where custVendTransOffset.RecId == custvendsettlement.OffsetRecid
            {
                voucher += custVendSettlement.OffsetTransVoucher;
            }
        }
        else
        {
            while select OffsetTransVoucher from custVendSettlement
                where custVendSettlement.TransRecId     == this.RecId
                    && custVendSettlement.AccountNum    == this.AccountNum
                    && custVendSettlement.TransCompany  == this.dataAreaId
            exists join custVendTransOffset
                where custVendTransOffset.RecId         == custvendsettlement.OffsetRecid
                    && custVendTransOffset.TransDate    >= _fromDate
                    && custVendTransOffset.TransDate    <= _toDate
            {
                voucher += custVendSettlement.OffsetTransVoucher;
            }
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetVoucherLatestSettledInPeriod</Name>
				<Source><![CDATA[
    public Voucher getOffsetVoucherLatestSettledInPeriod(TransDate _fromDate, TransDate _toDate)
    {
        CustVendSettlement custVendSettlement = CustVendTransStatic::construct(this).custVendSettlement();

        boolean onlyCanBeReversedSettlements = this.TransType != LedgerTransType::ExchAdjustment && !TransactionReversalTrans::findTransactionReversalTrans(this.TableId, this.RecId).Reversed;

        select firstonly OffsetTransVoucher from custVendSettlement
            order by TransDate desc, RecId
            where custVendSettlement.TransDate >= _fromDate
                && custVendSettlement.TransDate <= _toDate
                && custVendSettlement.TransRecId == this.RecId
                && custVendSettlement.AccountNum == this.AccountNum
                && custVendSettlement.TransCompany == this.dataAreaId
                && (!onlyCanBeReversedSettlements
                        || custVendSettlement.CanBeReversed);

        return custVendSettlement.OffsetTransVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318810</DeveloperDocumentation>
	<Label>@SYS86975</Label>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>AccountingEvent</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountNum</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>AmountCur</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>AmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Approved</Name>
			<ExtendedDataType>Approved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Approver</Name>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Arrival</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ArrivalId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
			<StringSize>210</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>BankLCLine</Name>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankRemittanceFileId</Name>
			<ExtendedDataType>BankRemittanceFileId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>CancelledPayment_JP</Name>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>Cancelled</ExtendedDataType>
			<Label>@SYS85760</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CashDiscBaseDate</Name>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CashDiscCode</Name>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>Closed</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CompanyBankAccountId</Name>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Correct</Name>
			<ExtendedDataType>Correct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>CustBillingClassification</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CustVendNegInstId_JP</Name>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>CustVendNegInstId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DocumentDate</Name>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DocumentNum</Name>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DueDate</Name>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>EPPaymentType_BR</Name>
			<ExtendedDataType>EPPaymentType_BR</ExtendedDataType>
			<StringSize>2</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>EPPaymentWay_BR</Name>
			<ExtendedDataType>EPPaymentWay_BR</ExtendedDataType>
			<StringSize>2</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>EUROTriangulation</Name>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchAdjustment</Name>
			<ExtendedDataType>AmountMSTExchAdjustment</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchAdjustmentRealized</Name>
			<ExtendedDataType>AmountMSTExchAdjustment</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchAdjustmentReporting</Name>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchAdjustmentUnrealized</Name>
			<ExtendedDataType>AmountMSTExchAdjustment</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ExchRateSecond</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>FixedExchRate</Name>
			<ExtendedDataType>FixedExchRate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Invoice</Name>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InvoiceProject</Name>
			<Label>@SYS50055</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldUtcDateTime">
			<Name>InvoiceReleaseDate</Name>
			<ExtendedDataType>InvoiceReleaseDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>LastExchAdj</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LastExchAdjRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LastExchAdjRateReporting</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LastExchAdjVoucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LastSettleAccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LastSettleCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<StringSize>4</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>LastSettleDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LastSettleVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Mandate</Name>
			<ExtendedDataType>CustDirectDebitMandateRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MCRPaymOrderID</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@MCR10778</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>NegInstId</Name>
			<ExtendedDataType>CustVendNegInstId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>NegInstSeqNum</Name>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>NegInstStatus</Name>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>OffsetRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderAccount</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS22016</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymId</Name>
			<ExtendedDataType>PaymId</ExtendedDataType>
			<StringSize>200</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymReference</Name>
			<ExtendedDataType>PaymReference</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymSpec</Name>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymTermId</Name>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PostingProfile</Name>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Prepayment</Name>
			<Label>@SYS59473</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ReasonRefRecId</Name>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ReleaseDateComment</Name>
			<ExtendedDataType>ReleaseDateComment</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingCurrencyExchRate</Name>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingCurrencyExchRateSecondary</Name>
			<ExtendedDataType>ReportingCurrencyExchRateSecondary</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingCurrencyCrossRate</Name>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingExchAdjustmentRealized</Name>
			<ExtendedDataType>AmountMSTExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ReportingExchAdjustmentUnrealized</Name>
			<ExtendedDataType>AmountMSTExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>RetailCustTrans</Name>
			<ExtendedDataType>RetailCustTrans</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleAmountCur</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleAmountReporting</Name>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Settlement</Name>
			<ExtendedDataType>CustAutoSettlement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleTax1099Amount</Name>
			<ExtendedDataType>SettleTax1099Amount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleTax1099StateAmount</Name>
			<ExtendedDataType>SettleTax1099StateAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Tax1099Amount</Name>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Tax1099Fields</Name>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Tax1099RecId</Name>
			<ExtendedDataType>Tax1099RecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Tax1099State</Name>
			<ExtendedDataType>Tax1099State</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Tax1099StateAmount</Name>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxInvoiceId</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ThirdPartyBankAccountId</Name>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>TransDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransType</Name>
			<EnumType>LedgerTransType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Txt</Name>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
			<StringSize>512</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VendPaymentGroup</Name>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Voucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DataArea</Name>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SettleAmount_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>VendorVATDate</Name>
			<ExtendedDataType>VendorVATDate_W</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ArrivalAccountId</Name>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SummaryAccountId</Name>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<StringSize>20</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DataArea</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmount_MX</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorVATDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ArrivalAccountId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SummaryAccountId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>