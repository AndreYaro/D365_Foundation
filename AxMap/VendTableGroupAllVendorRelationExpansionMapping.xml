<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTableGroupAllVendorRelationExpansionMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTableGroupAllVendorRelationExpansionMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultMappedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults code and relation fields.
    /// </summary>
    /// <param name = "_mappedTableFieldId">
    /// The table field ID of the field that should be defaulted.
    /// </param>
    /// <remarks>
    /// The method should be invoked from the defaultField method on the mapped table.
    /// </remarks>
    public void defaultMappedField(FieldId _mappedTableFieldId)
    {
        VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(this.TableId).defaultField(this, _mappedTableFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationControllingCodeDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the defaulting dependencies for the relation controlling code field.
    /// </summary>
    /// <returns>
    /// A container with defaulting dependencies for the relation controlling code field.
    /// </returns>
    /// <remarks>
    /// The method should be invoked from the getDefaultingDependencies method on the mapped table.
    /// </remarks>
    public container relationControllingCodeDefaultingDependencies()
    {
        return VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(this.TableId).relationControllingCodeDefaultingDependencies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeControlledRelationDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the defaulting dependencies for the code controlled relation field.
    /// </summary>
    /// <returns>
    /// A container with defaulting dependencies for the code controlled relation field.
    /// </returns>
    /// <remarks>
    /// The method should be invoked from the getDefaultingDependencies method on the mapped table.
    /// </remarks>
    public container codeControlledRelationDefaultingDependencies()
    {
        return VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(this.TableId).codeControlledRelationDefaultingDependencies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the provided record is valid from a TableGroupAll expansion perspective.
    /// </summary>
    /// <returns>
    /// true if the provided record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method should be invoked from the validateWrite method on the mapped table.
    /// </remarks>
    public boolean mappedValidateWrite()
    {
        return VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(this.TableId).validateWrite(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableCategoryIdDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the string defining how to compute a computed field which contains the relation value
    /// when the code field has the value of <c>TableGroupAll::Table</c>.
    /// </summary>
    /// <param name = "_entityName">
    /// The name of the entity which contains the computed field.
    /// </param>
    /// <param name = "_dataSourceName">
    /// The name of the data source which contains the code and relation fields.
    /// </param>
    /// <returns>
    /// A string to compute the relation value when the code field has the value of <c>TableGroupAll::Table</c>.
    /// </returns>
    /// <remarks>
    /// The method should be invoked from a computed column definition method on the mapped table.
    /// </remarks>
    public static str tableCategoryIdDefinition(TableName _entityName, DataSourceName _dataSourceName)
    {
        return VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(tableName2Id(_entityName)).tableCategoryIdDefinition(_entityName, _dataSourceName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupCategoryIdDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the string defining how to compute a computed field which contains the relation value
    /// when the code field has the value of <c>TableGroupAll::GroupId</c>.
    /// </summary>
    /// <param name = "_entityName">
    /// The name of the entity which contains the computed field.
    /// </param>
    /// <param name = "_dataSourceName">
    /// The name of the data source which contains the code and relation fields.
    /// </param>
    /// <returns>
    /// A string to compute the relation value when the code field has the value of <c>TableGroupAll::GroupId</c>.
    /// </returns>
    /// <remarks>
    /// The method should be invoked from a computed column definition method on the mapped table.
    /// </remarks>
    public static str groupCategoryIdDefinition(TableName _entityName, DataSourceName _dataSourceName)
    {
        return VendTableGroupAllVendorRelationExpansionMapping::newTableGroupAllRelationExpansion(tableName2Id(_entityName)).groupCategoryIdDefinition(_entityName, _dataSourceName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableGroupAllRelationExpansion</Name>
				<Source><![CDATA[
    private static TableGroupAllRelationExpansion newTableGroupAllRelationExpansion(TableId _mappedTableId)
    {
        return TableGroupAllRelationExpansionFactory::newTableGroupAllRelationExpansion(_mappedTableId, tableNum(VendTableGroupAllVendorRelationExpansionMapping));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VendorCodeControlledRelation</Name>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>RelationControllingVendorCode</Name>
			<EnumType>TableGroupAll</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VendorId</Name>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VendorGroupId</Name>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>TableGroupAllRelationExpansionMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VendorCodeControlledRelation</MapField>
					<MapFieldTo>CodeControlledRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RelationControllingVendorCode</MapField>
					<MapFieldTo>RelationControllingCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorId</MapField>
					<MapFieldTo>TableCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorGroupId</MapField>
					<MapFieldTo>GroupCategoryId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>