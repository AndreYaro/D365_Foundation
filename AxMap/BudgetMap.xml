<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    AmountMST amountMST()
    {
        return CurrencyExchangeHelper::mstAmount(this.Amount, this.Currency, this.StartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetTrans</Name>
				<Source><![CDATA[
    BudgetTrans budgetTrans()
    {
        return BudgetTrans::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is deleted.
    /// </summary>
    public void deleting()
    {
        this.BudgetMap::budgetTrans().deleting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been deleted.
    /// </summary>
    public void deleted()
    {
        ttsbegin;

        this.BudgetMap::budgetTrans().deleted();

        this.BudgetMap::deleteExpansion();

        LedgerCov::deleteTransact(this.TableId, this.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExpansion</Name>
				<Source><![CDATA[
    void deleteExpansion()
    {
        if (! this)
        {
            return;
        }

        if (this.ExpandId != 0)
        {
            return;
        }

        BudgetMap budgetDelete = this.defBudget();

        if (ReqDemPlanRefactorBudgetMapDeleteFlight::instance().isEnabled() 
            && (budgetDelete.TableId == tableNum(ForecastSales) || budgetDelete.TableId == tableNum(ForecastPurch)))
        {
            this.budgetMapDeleteExpansion();
        }
        else
        {
            while select forupdate budgetDelete
                where budgetDelete.ExpandId == this.RecId
                {
                    budgetDelete.delete();
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expansion</Name>
				<Source><![CDATA[
    BudgetExpansion expansion()
    {
        return BudgetExpansion::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultInventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a default inventory status if one is specified.
    /// </summary>
    /// <param name="_custAccount">
    ///     Customer account number; optional.
    /// </param>
    public void initDefaultInventoryStatus(AccountNum _custAccount = '')
    {
        InventDim                   inventDim;
        InventTable                 inventTable;
        InventDimGroupSetup         inventDimGroupSetup;

        inventDim = InventDim::find(this.InventDimId);
        if (inventDim.InventStatusId)
        {
            return;
        }

        inventTable = inventTable::find(this.ItemId);
        if (!inventTable)
        {
            return;
        }

        inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        if (!inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventStatusId)).isCoveragePlanByDimensionEnabled())
        {
            return;
        }

        inventDim.InventStatusId = WHSInvent::getDefaultStatusByParameters(
            this.ItemId, inventDim, false, _custAccount, ModuleInventCustVend::Cust);

        if (inventDim.InventStatusId)
        {
            inventDim = inventDim::findOrCreate(inventDim);
            this.InventDimId = inventDim.inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a default inventory warehouse if one is specified.
    /// </summary>
    public void initDefaultWarehouse()
    {
        InventDim                   inventDim;
        InventDim                   inventDimSite;
        InventTable                 inventTable;
        InventItemInventSetup       inventSetup;
        InventDimGroupSetup         inventDimGroupSetup;

        inventTable = inventTable::find(this.ItemId);
        if (!inventTable)
        {
            return;
        }

        inventDim = InventDim::find(this.InventDimId);
        if (inventDim.InventLocationId || !inventDim.InventSiteId)
        {
            return;
        }

        inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        if (!inventDimGroupSetup.getFieldSetup(fieldNum(InventDim, InventLocationId)).isCoveragePlanByDimensionEnabled())
        {
            return;
        }

        inventDimSite.InventSiteId = inventDim.InventSiteId;
        inventDimSite = inventDim::findOrCreate(inventDimSite);

        inventSetup = inventTable.inventItemInventSetup(inventDimSite.inventDimId);
        if (!inventSetup)
        {
            return;
        }

        inventDim.InventLocationId = inventSetup.inventDimDefault().InventLocationId;
        if (inventDim.InventLocationId)
        {
            inventDim = inventDim::findOrCreate(inventDim);
            this.InventDimId = inventDim.inventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBudgetValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the budget active, currency and start date fields.
    /// </summary>
    /// <param name = "_costBudget">If true set the currency field</param>
    public void initBudgetValues(boolean _costBudget = true)
    {
        this.Active         = NoYes::Yes;
        if (_costBudget)
        {
            this.Currency       = Ledger::accountingCurrency(CompanyInfo::current());
        }
        this.StartDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is inserted.
    /// </summary>
    public void inserting()
    {
        this.BudgetMap::setReport();
        this.CovStatus = 0;
        this.BudgetMap::setEndDate();

        this.BudgetMap::budgetTrans().inserting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been inserted.
    /// </summary>
    public void inserted()
    {
        this.BudgetMap::budgetTrans().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableEndDate</Name>
				<Source><![CDATA[
    boolean mustEnableEndDate()
    {
        return this.AllocateMethod != BudgetAllocateMethod::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableFreq</Name>
				<Source><![CDATA[
    boolean mustEnableFreq()
    {
        return this.AllocateMethod == BudgetAllocateMethod::Period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableFreqCode</Name>
				<Source><![CDATA[
    boolean mustEnableFreqCode()
    {
        return this.AllocateMethod == BudgetAllocateMethod::Period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableKeyId</Name>
				<Source><![CDATA[
    boolean mustEnableKeyId()
    {
        return this.AllocateMethod == BudgetAllocateMethod::Key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAfterAllocateMethod</Name>
				<Source><![CDATA[
    void setAfterAllocateMethod()
    {
        switch (this.AllocateMethod)
        {
            case BudgetAllocateMethod::None:
                this.Freq       = 0;
                this.FreqCode   = PeriodUnit::Day;
                this.EndDate    = dateNull();
                break;
            case BudgetAllocateMethod::Period:
                this.Key        = '';
                break;
            case BudgetAllocateMethod::Key:
                this.Freq       = 0;
                this.FreqCode   = PeriodUnit::Day;
                this.EndDate    = dateNull();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDate</Name>
				<Source><![CDATA[
    void setEndDate()
    {
        if (this.Freq  && (! this.EndDate))
        {
            this.EndDate  = this.StartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReport</Name>
				<Source><![CDATA[
    void setReport()
    {
        this.Report  = ((this.AllocateMethod == BudgetAllocateMethod::None ||
                         (this.AllocateMethod == BudgetAllocateMethod::Key && !this.Key)) && 
                        this.Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a <c>BudgetMap</c> record is updated.
    /// </summary>
    public void updating()
    {
        this.BudgetMap::setReport();
        this.CovStatus  = (this.CovStatus  == 2 ? 1 : 0);
        this.BudgetMap::setEndDate();

        this.BudgetMap::budgetTrans().updating();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a <c>BudgetMap</c> record has been updated.
    /// </summary>
    public void updated(BudgetMap _this_Orig)
    {
        this.BudgetMap::budgetTrans().updated(_this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = super();
        ret = this.checkModel() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ok = super();

        if (this.EndDate && this.EndDate < this.StartDate)
        {
            ok = checkFailed("@SYS403");
        }

        ok = this.checkModel() && ok;

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS326455</DeveloperDocumentation>
	<Label>@SYS83354</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AccountNum</Name>
			<ExtendedDataType>LedgerAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Active</Name>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AllocateMethod</Name>
			<EnumType>BudgetAllocateMethod</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AllocationId</Name>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Amount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CategoryId</Name>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Comment</Name>
			<ExtendedDataType>BudgetComment</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>CostPaymDate</Name>
			<ExtendedDataType>ProjForecastCostPaymDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CostPrice</Name>
			<ExtendedDataType>CostPrice</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>CovStatus</Name>
			<ExtendedDataType>CovStatus</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Currency</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>defaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DiscAmount</Name>
			<ExtendedDataType>UnitDiscountAmountCur</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DiscPercent</Name>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>EliminationDate</Name>
			<ExtendedDataType>ProjForecastEliminationDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>EndDate</Name>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ExpandId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>Freq</Name>
			<ExtendedDataType>Periods</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>FreqCode</Name>
			<EnumType>PeriodUnit</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InventQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>ProjForecastInvoiceDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemGroupId</Name>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Key</Name>
			<ExtendedDataType>LedgerAllocateKeyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>LinePropertyId</Name>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>PriceMarkup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ModelNum</Name>
			<ExtendedDataType>SysBudgetModelId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWQty</Name>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Report</Name>
			<Label>@Sys16399</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Resource</Name>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>SalesPaymDate</Name>
			<ExtendedDataType>ProjForecastSalesPaymDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SalesPrice</Name>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>StartDate</Name>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TransId</Name>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitId</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>