<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesPurchLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record ID of the <c>AgreementHeaderExt_RU</c> that is attached to the sales or purchase order.
    /// </summary>
    /// <returns>
    ///     The agreement record ID.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', true, 23\08\2017), Hookable(false), Wrappable(false)]
    public AgreementHeaderExtRecId_RU agreementHeaderExt_RU()
    {
        return this.salesPurchLineInterface().agreementHeaderExt_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementPartnerCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the order account of the sales or purchase table.
    /// </summary>
    /// <returns>
    ///     The customer or vendor account number.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', true, 23\08\2017), Hookable(false), Wrappable(false)]
    public CustVendAC agreementPartnerCode_RU()
    {
        return this.salesPurchLineInterface().agreementPartnerCode_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountMST amountMST(
        AmountCur               _amountCur,
        TransDate               _exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ExchRate                _exchRate                = 0,
        ExchrateSecondary       _exchrateSecondary       = 0,
        ExchRatesTriangulation  _exchRatesTriangulation  = UnknownNoYes::Unknown)
    {
        return this.salesPurchLineInterface().amountMST(_amountCur, _exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoMatchAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the matching agreement line and initializes the order line from it.
    /// </summary>
    /// <param name="_matchingAgreement">
    ///    The record ID of the agreement header.
    /// </param>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void autoMatchAgreementLine(AgreementHeaderRecId _matchingAgreement)
    {
        this.salesPurchLineInterface().autoMatchAgreementLine(_matchingAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmountExclTax(
        Qty       _qty       = this.salesPurchLineInterface().parmQty(),
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax       = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(_qty, _transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty _qty = this.salesPurchLineInterface().parmQty())
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(
        Qty       _qty       = this.salesPurchLineInterface().parmQty(),
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax       = null,
        boolean   _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, _transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.salesPurchLineInterface().parmQty(), PriceDiscPolicyCheckPolicy  _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDisc</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDisc(Qty _qty = this.salesPurchLineInterface().parmQty())
    {
        return this.salesPurchLineInterface().calcLineDisc(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(
        Qty       _qty       = this.salesPurchLineInterface().parmQty(),
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax       = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(_qty, _transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty _qtySalesPurch  = realMin())
    {
        return this.salesPurchLineInterface().calcQtyOrdered(_qtySalesPurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesPurchQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the purchase or sales quantity for the current salesline or purchline based on the passed inventory quantity.
    /// </summary>
    /// <param name="_inventQty">
    /// An inventory quantity to convert to sales quantity.
    /// </param>
    /// <returns>
    ///  Returns the purchase or sales unit quantity.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public UnitQty calcSalesPurchQty(InventQty _inventQty = realMin())
    {
        return this.salesPurchLineInterface().calcSalesPurchQty(_inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean checkInitFromInventTable(InventTable _inventTable)
    {
        return this.salesPurchLineInterface().checkInitFromInventTable(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpPriceHistoryRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes price history references for the <c>SalesPurchLine</c> if the original
    /// reference is different than the current reference.
    /// </summary>
    /// <remarks>
    /// Required if the line has not yet been saved and the line is deleted.  Price history
    /// references are already created and need to be deleted.  In this case the original
    /// reference will be 0 which will not be equal to the non-zero current reference.
    ///
    /// Required if the line has been saved, edited to trigger a price/discount search,
    /// and then the line is deleted.  In this case the current reference also needs to be
    /// deleted and will not be equal to the original reference.
    ///
    /// Required if the line has been saved, edited to trigger a price/discount search,
    /// and then the line is reread.  In this case the current reference needs to be deleted
    /// as it will no longer apply to the line.  The original reference will be correct.
    /// </remarks>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void cleanUpPriceHistoryRef()
    {
        this.salesPurchLineInterface().cleanUpPriceHistoryRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductDimensionsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the product dimensions on the line can be edited.
    /// </summary>
    /// <returns>
    ///     true for order lines without delivery lines; otherwise, false.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', true, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean editProductDimensionsAllowed()
    {
        return this.salesPurchLineInterface().editProductDimensionsAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get discount for the current line using the RetailOrderCalculator
    /// </summary>
    /// <returns>
    /// LineDisc for the current line.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public DiscAmount getRetailLineDisc()
    {
        return this.salesPurchLineInterface().getRetailLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public InventDim inventDim(boolean _update = false)
    {
        return this.salesPurchLineInterface().inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventTable</c> record that is related to the current item.
    /// </summary>
    /// <param name = "_itemId">The item id; optional.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A <c>InventTable</c> record; otherwise, an empty buffer.</returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public InventTable inventTable(
        ItemId  _itemId = this.salesPurchLineInterface().parmItemId(),
        boolean _forUpdate = false)
    {
        return this.salesPurchLineInterface().inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category based; otherwise, false.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountCur lineAmountExclTax(
        TransDate _transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Tax       _tax          = null,
        boolean   _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMSTExclTax(
        TransDate              _exchRateDate           = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ExchRate               _exchRate               = 0,
        ExchrateSecondary      _exchrateSecondary      = 0,
        ExchRatesTriangulation _exchRatesTriangulation = UnknownNoYes::Unknown,
        Tax                    _tax                    = null)
    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(_exchRateDate, _exchRate, _exchrateSecondary, _exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies an <c>InventDim</c> record with WMS values.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record to modify.
    /// </param>
    /// <param name="_resetWMSLocationId">
    ///    A Boolean value that specifies whether the <c>wMSLocationId</c> field will be reset, even if the
    ///    <c>LocationId</c> field is unchanged.
    /// </param>
    /// <param name="_defaultInventDirection">
    ///    Indicates whether it is per default an issue or a receipt transaction.
    /// </param>
    /// <param name="_positiveInventDirection">
    ///    Indicates whether it is an issue or a receipt transaction for a positive quantity ordered amount.
    /// </param>
    /// <remarks>
    ///    When changing the warehouse on a sales or purchase order line, the location is updated with the
    ///    default WMS values for items where the attached dimension group has the location set to active.
    /// </remarks>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void modifyWMSLocation(
        InventDim            _inventDim,
        boolean              _resetWMSLocationId,
        InventDirection      _defaultInventDirection,
        InventDirection      _positiveInventDirection)
    {
        this.salesPurchLineInterface().modifyWMSLocation(_inventDim, _resetWMSLocationId, _defaultInventDirection, _positiveInventDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>PostingProfile_RU</c> field.
    /// </summary>
    /// <param name="_postingProfile_RU">
    /// The value of <c>PostingProfile_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// The <c>PostingProfile_RU</c>.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', true, 23\08\2017), Hookable(false), Wrappable(false)]
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile_RU = '')
    {
        return this.salesPurchLineInterface().parmPostingProfile_RU(_postingProfile_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceAgreementExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a price agreement exists for an item or account combination.
    /// </summary>
    /// <param name="_inventDim">
    /// A buffer of the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// true if a price agreement exists; otherwise, false.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public boolean priceAgreementExists(InventDim _inventDim)
    {
        return this.salesPurchLineInterface().priceAgreementExists(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPriceAgreement</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void resetPriceAgreement()
    {
        this.salesPurchLineInterface().resetPriceAgreement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Set price agreement for sales or purchase line.
    /// </summary>
    /// <param name="_inventDim">
    ///		An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    ///		An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    ///		Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the markup value, depending on trade agreements.
    /// </summary>
    /// <param name="_priceDisc">
    ///    A <c>PriceDisc</c> object.
    /// </param>
    /// <param name="_checkPolicy">
    ///    A <c>PriceDiscPolicyCheckPolicy</c> object.
    /// </param>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void setPriceDiscMarkup(
        PriceDisc_Price            _priceDisc,
        PriceDiscPolicyCheckPolicy _checkPolicy)
    {
        this.salesPurchLineInterface().setPriceDiscMarkup(_priceDisc, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscPriceUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the price and price unit based on trade agreements.
    /// </summary>
    /// <param name="_priceDisc">
    ///    A <c>PriceDisc</c> object.
    /// </param>
    /// <param name="_checkPolicy">
    ///    A <c>PriceDiscPolicyCheckPolicy</c> object.
    /// </param>
    /// <param name="_retailCalculator">
    ///    A <c>RetailSalesOrderCalculator</c> object.
    /// </param>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void setPriceDiscPriceUnit(
        PriceDisc_Price            _priceDisc,
        PriceDiscPolicyCheckPolicy _checkPolicy,
        RetailOrderCalculator _retailCalculator = null)
    {
        this.salesPurchLineInterface().setPriceDiscPriceUnit(_priceDisc, _checkPolicy, _retailCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscPriceUnitMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the price, price unit, and markup based on the price discount change policy.
    /// </summary>
    /// <param name="_priceDisc">
    ///    A <c>PriceDisc</c> object.
    /// </param>
    /// <param name="_checkPolicy">
    ///    A <c>PriceDiscPolicyCheckPolicy</c> object.
    /// </param>
    /// <param name="_retailCalculator">
    ///    A <c>RetailSalesOrderCalculator</c> object.
    /// </param>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public void setPriceDiscPriceUnitMarkup(
        PriceDisc_Price            _priceDisc,
        PriceDiscPolicyCheckPolicy _checkPolicy = null,
        RetailOrderCalculator _retailCalculator = null)
    {
        this.salesPurchLineInterface().setPriceDiscPriceUnitMarkup(_priceDisc, _checkPolicy, _retailCalculator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(_transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public UnitOfMeasureSymbol unitOfMeasureSymbol()
    {
        return this.salesPurchLineInterface().parmUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushPriceDiscCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes the cached instances of the <c>PriceDisc_LineDisc</c> and <c>PriceDisc_Price</c> classes.
    /// </summary>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public static void flushPriceDiscCache() 
    {
        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective unit price for the sales or purchase order line.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The <c>SalesPurchLine</c> map with the line from which to get the effective unit price.
    /// </param>
    /// <returns>
    /// The effective unit price for the sales or purchase order line.
    /// </returns>
    /// <remarks>
    /// For a line that uses advanced pricing, this will be the adjusted unit price, otherwise it is the
    /// standard unit price value on the line.
    /// </remarks>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public static Price pdsPrice(SalesPurchLine _salesPurchLine)
    {
        return _salesPurchLine.salesPurchLineInterface().pdsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_LineDiscCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates the <c>PriceDisc_LineDisc</c> class.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    An instance of the <c>SalesPurchLine</c> table map.
    /// </param>
    /// <param name="_inventDim">
    ///    A buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the discount
    ///    calculation.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PriceDisc_LineDisc</c> class.
    /// </returns>
    /// <remarks>
    ///    The instantiated <c>PriceDisc_LineDisc</c> class is stored in the global cache and first thing this
    ///    method tries to retrieve it from there.After instantiation or retrieval is the
    ///    <c>PriceDisc_LineDisc</c> class parameters updated and it is checked if the discount values still
    ///    are valid.If the price discount determination values are outdated a recalculation is executed.
    /// </remarks>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public static PriceDisc_LineDisc priceDisc_LineDiscCache(
        SalesPurchLine _salesPurchLine,
        InventDim      _inventDim       = _salesPurchLine.salesPurchLineInterface().inventDim(),
        boolean        _doCallPriceDate = false)
    {
        return _salesPurchLine.salesPurchLineInterface().priceDisc_LineDiscCache(_inventDim, _doCallPriceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_PriceCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>PriceDisc_Price</c> class.
    /// </summary>
    /// <param name="_salesPurchLine">
    ///    An instance of the <c>SalesPurchLine</c> table map.
    /// </param>
    /// <param name="_inventDim">
    ///    A buffer of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price
    ///    calculation.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PriceDisc_Price</c> class.
    /// </returns>
    [SysObsolete('Method is moved to the SalesPurchLineInterface class', false, 30\11\2017), Hookable(false), Wrappable(false)]
    public static PriceDisc_Price priceDisc_PriceCache(
        SalesPurchLine _salesPurchLine,
        InventDim      _inventDim       = _salesPurchLine.salesPurchLineInterface().inventDim(),
        boolean        _doCallPriceDate = false)
    {
        return _salesPurchLine.salesPurchLineInterface().priceDisc_PriceCache(_inventDim, _doCallPriceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return SalesPurchLineInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailVariantIdAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the retail variant Id field can be edited.
    /// </summary>
    /// <returns>
    /// false for order line is drop shipment or intercompany order; otherwise, true.
    /// </returns>
    public boolean retailVariantIdAllowEdit()
    {
        if (this.salesPurchLineInterface().isDropShipment())
        {
            return false;
        }

        InventMovement movement = InventMovement::construct(this);
        if (movement.interCompanyMovement() || movement.interCompanyTransaction())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEGAIS_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the sales or purchase order line is related to EGAIS.
    /// </summary>
    /// <returns>
    ///    true, if the the sales or purchase order line is related to EGAIS; otherwise, false.
    /// </returns>
    public boolean isEGAIS_RU()
    {
        return EGAISAlcoholProduction_RU::findByItemInventDim(
            this.salesPurchLineInterface().parmItemId(),
            this.salesPurchLineInterface().inventDim()).RecId ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS331005</DeveloperDocumentation>
	<Label>@SYS85440</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Category</Name>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ConfirmedDlv</Name>
			<ExtendedDataType>DlvDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>DeliveryType</Name>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>TradeLineDlvType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExternalItemId</Name>
			<ExtendedDataType>ExternalItemId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemBOMId</Name>
			<ExtendedDataType>ItemBOMId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemRouteId</Name>
			<ExtendedDataType>ItemRouteId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>LineDeliveryType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
			<EnumType>LineDeliveryType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LinePercent</Name>
			<ExtendedDataType>DiscPct</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>PriceMarkup</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MCRCustVendAC</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>MCROrderLine2PriceHistoryRef</Name>
			<ExtendedDataType>MCROrderLinePriceHistoryReference</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>MCRReceiptDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS88224</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>MCRShipDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS88230</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderAccount</Name>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PDSCalculationId</Name>
			<ExtendedDataType>PDSCalculationId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWSalesPurchQty</Name>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchSalesUnit</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>QtyOrdered</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>RequiredDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>RetailVariantId</Name>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>SalesPurchId</Name>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>SalesPurchQty</Name>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceDocumentLine</Name>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>StockedProduct</Name>
			<ExtendedDataType>TradeStockedProduct</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>UnitOfMeasure</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SystemEntrySource</Name>
			<EnumType>PriceDiscSystemSource</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>SkipPriceDiscCalcInBulkCreation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SalesPurchSkipPriceDiscCalc</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>