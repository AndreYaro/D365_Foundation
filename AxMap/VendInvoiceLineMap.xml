<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceLineMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceLineMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accDistributionTemplateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>AccountingDistributionTemplateRecId</c> associated with this invoice line.
    /// </summary>
    /// <returns>
    /// Returns the <c>AccountingDistributionTemplateRecId</c> associated with this invoice line.
    /// </returns>
    public AccountingDistributionTemplateRecId accDistributionTemplateRecId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the line amount less the tax.
    /// </summary>
    /// <param name="_amountCur">
    /// The line amount.
    /// </param>
    /// <param name="_qty">
    /// The line quantity.
    /// </param>
    /// <param name="_transDate">
    /// The date of transaction.
    /// </param>
    /// <param name="_tax">
    /// An instance of the <c>Tax</c> class; optional.
    /// </param>
    /// <param name="_parmTable">
    /// The related table record; optional.
    /// </param>
    /// <param name="_keepEndDisc">
    /// A Boolean value indicating whether to keep the discount amount; optional.
    /// </param>
    /// <returns>
    /// Returns the line amount less the tax.
    /// </returns>
    public AmountCur amountExclTax(
        AmountCur _amountCur,
        Qty _qty,
        TransDate _transDate,
        Tax _tax = null,
        boolean _skipRounding = false,
        boolean _useRoundedTaxOrigin = true)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defltDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>DefaultDimension</c> associated with this invoice.
    /// </summary>
    /// <returns>
    ///    Returns the <c>DefaultDimension</c> associated with this invoice.
    /// </returns>
    public DimensionDefault defltDimension()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the discount percentage associated with this invoice line.
    /// </summary>
    /// <returns>
    ///    Returns the discount percentage associated with this invoice line.
    /// </returns>
    public DiscPct discPercent()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the discount amount associated with this invoice line.
    /// </summary>
    /// <returns>
    ///    Returns the discount amount associated with this invoice line.
    /// </returns>
    public DiscAmount discAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>header</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the header record for the given line record.
    /// </summary>
    /// <returns>
    /// A single header table record.
    /// </returns>
    public VendInvoiceMap header()
    {
        VendInvoiceMap headerMap;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;

        switch (this.TableId)
        {
            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
                headerMap = vendInvoiceInfoTable;
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this;
                vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();
                headerMap = vendInvoiceJour;
                break;

            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }

        return headerMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this invoice line includes tax in the line amount.
    /// </summary>
    /// <param name="_purchTable">
    /// Corresponding purchase order header record; optional.
    /// </param>
    /// <param name="_invoiceHeader">
    /// Corresponding invoice header record; optional.
    /// </param>
    /// <returns>
    /// True if the line is tax included; otherwise, false.
    /// </returns>
    public boolean includeTax(PurchTable _purchTable = null, Common _invoiceHeader = null)
    {
        VendInvoiceMap invoiceHeader;

        if (this.isAdvance())
        {
            return true; // advance - always included
        }

        if (_invoiceHeader)
        {
            invoiceHeader = _invoiceHeader;
        }
        else
        {
            invoiceHeader = this.VendInvoiceLineMap::header();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(this.TableId, this.RecId);
            TaxModelTaxable taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(salesPurchJournalLine);
            if (taxModelTaxable)
            {
                return taxModelTaxable.isPriceInclTax();
            }
        }
        // </GTE>

        return invoiceHeader.isInclTax(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>InventTable</c> attached to this invoice line.
    /// </summary>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventTable</c> attached to this invoice line.
    /// </returns>
    public InventTable inventTable(ItemId _itemId = this.ItemId, boolean _update = false)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this invoice line is of type advance.
    /// </summary>
    /// <returns>
    /// True if the line is of type advance; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceApplication</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an invoice line is of type advance application or not.
    /// </summary>
    /// <returns>
    /// true if an invoice line is of type advance application; otherwise, false.
    /// </returns>
    public boolean isAdvanceApplication()
    {
        return this.LineType == PurchInvoiceLineType::AdvanceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record has been initialized.
    /// </summary>
    /// <returns>
    /// true, if the record has been initialized; otherwise, false
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Case needed for additional table mapping.
    /// </exception>
    public boolean isInitialized()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans vendInvoiceTrans;
        boolean isInitialized;

        switch (this.TableId)
        {
            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                isInitialized = vendInvoiceInfoLine.isInitialized();
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = this;
                isInitialized = vendInvoiceTrans.isInitialized();
                break;

            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }

        return isInitialized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this invoice line is associated with a purchase order or not.
    /// </summary>
    /// <returns>
    /// True if the line is not associated with a purchase order; otherwise, false.
    /// </returns>
    public boolean isNonPO()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>LedgerDimension</c> associated with this invoice.
    /// </summary>
    /// <returns>
    /// Returns the <c>LedgerDimension</c> associated with this invoice.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDim()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>MarkupCode_RU</c>.
    /// </summary>
    /// <param name="_markupCode_RU">
    /// The <c>MarkupCode_RU</c> to set, optional.
    /// </param>
    /// <returns>
    /// The <c>MarkupCode_RU</c>.
    /// </returns>
    public MarkupCodeVend_RU parmMarkupCode_RU(MarkupCodeVend_RU _markupCode_RU = '')
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        VendInvoiceTrans vendInvoiceTrans;

        switch (this.TableId)
        {
            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = this;
                vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

                if (!prmisDefault(_markupCode_RU))
                {
                    vendInvoiceInfoLine_W.MarkupCode_RU = _markupCode_RU;
                    vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
                }

                return vendInvoiceInfoLine_W.MarkupCode_RU;

            case tableNum(vendInvoiceTrans):
                vendInvoiceTrans = this;

                if (!prmisDefault(_markupCode_RU))
                {
                    vendInvoiceTrans.MarkupCode_RU = _markupCode_RU;
                }

                return vendInvoiceTrans.MarkupCode_RU;

            default:
                throw error(strFmt("@SYS19306", funcName())); // incorrect use
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the effective unit purchase price for the line.
    /// </summary>
    /// <returns>
    /// The effective unit purchase price for the line.
    /// </returns>
    /// <remarks>
    /// For a line that uses advanced pricing, this will be the adjusted unit price, otherwise it is the
    /// standard unit price value on the line.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The map implementation always throws <c>missingOverload</c> error.
    /// </exception>
    public PurchPrice pdsPurchPrice()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>PurchLine</c> attached to this invoice line.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the returned <c>PurchLine</c> may be updated.
    /// </param>
    /// <returns>
    /// The <c>PurchLine</c> attached to this invoice line.
    /// </returns>
    public PurchLine purchLine(boolean _forUpdate = false)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjRetentionRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a special case where there is no line amount but there is PSAReleaseAmount
    /// </summary>
    /// <returns>
    /// Returns true only if there is no line amount and there is PSARelease amount
    /// </returns>
    public boolean isProjRetentionRelease()
    {
        return !this.LineAmount && this.PSAReleaseAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS344922</DeveloperDocumentation>
	<Label>@SYS108836</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>AdvanceApplicationId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS7407</Label>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineDisc</Name>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>LineType</Name>
			<EnumType>PurchInvoiceLineType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MultiLnDisc</Name>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ProcurementCategory</Name>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchID</Name>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PurchMarkup</Name>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
			<Label>@SYS8371</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PurchPrice</Name>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchUnit</Name>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>SourceDocumentLine</Name>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxGroup</Name>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxItemGroup</Name>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Label>@SYS128442</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PSAReleaseAmount</Name>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<HelpText>@PSA2725</HelpText>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>