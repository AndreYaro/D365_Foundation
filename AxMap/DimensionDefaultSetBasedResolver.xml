<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDefaultSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DimensionDefaultSetBasedResolver extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set-based resolution of default dimensions.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <param name = "_staging">A staging table which contains a default dimension record id.</param>
    /// <param name = "_includeOffset">A boolean value indicating whether the resolver should use an offset default dimension value. Optional; defaults to false.</param>
    /// <returns>The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.</returns>
    public static DimensionDataEntitySFKCacheTmp Resolve(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DimensionDefaultSetBasedResolver _staging, boolean _includeOffset = false)
    {
        DimensionDataEntitySFKCacheTmp dimCacheTmp;
        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
        DimensionDataEntitySFKCache dimCache;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityDefaultDimensionFormat;
        ExtendedDataTypeName dataType = extendedTypeStr(DimensionDefault);
        const NoYes found = NoYes::Yes;
        const NoYes notFound = NoYes::No;
        const int64 zero = 0;

        dimCacheTmpRef.linkPhysicalTableInstance(dimCacheTmp);

        // Fill resolved temp table with all default dimensions to resolve.
        insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found)
            select DefaultDimensionDisplayValue, hierarchyType, dataType, notFound from _staging
                group by DefaultDimensionDisplayValue
            where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated);

        if (_includeOffset)
        {
            insert_recordset dimCacheTmp (
                IntegrationString, HierarchyType, ExtendedDataType, Found)
            select OffsetDefaultDimensionDisplayValue, hierarchyType, dataType, notFound from _staging
                group by OffsetDefaultDimensionDisplayValue
            where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && _staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated)
            notexists join dimCacheTmpRef
                where dimCacheTmpRef.IntegrationString == _staging.OffsetDefaultDimensionDisplayValue
                   && dimCacheTmpRef.EnumValue == LedgerJournalACType::Ledger
                   && dimCacheTmpRef.HierarchyType == hierarchyType
                   && dimCacheTmpRef.ExtendedDataType == dataType;
        }

        // Resolve dimension SFK's from cache when possible.
        update_recordset dimCacheTmp
            setting Found = found,
            ResolvedReference = dimCache.ResolvedReference
        join ResolvedReference from dimCache
            where dimCache.IntegrationString == dimCacheTmp.IntegrationString
                   && dimCache.EnumValue == LedgerJournalACType::Ledger
                   && dimCache.HierarchyType == hierarchyType
                   && dimCache.ExtendedDataType == dataType;

        // For the values not found in cache, look them up individually.
        while select forupdate dimCacheTmp where dimCacheTmp.Found == NoYes::No
        {
            try
            {
                dimCacheTmp.ResolvedReference = DimensionDefaultResolver::newResolver(dimCacheTmp.IntegrationString).resolve();
                dimCacheTmp.Found = NoYes::Yes;

                // Update the temp table with the newly resolved value.
                ttsbegin;
                dimCacheTmp.doUpdate();
                ttscommit;
            }
            catch
            {
                // Invalid accounts will raise an exception, but should
                // not cause the full import process to fail. Instead those
                // rows need to be marked as error, which is done in the caller.
            }
        }

        return dimCacheTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Dimension:DefaultDimensionSetBasedResolverDevDoc</DeveloperDocumentation>
	<Label>@Dimension:DefaultDimensionSetBasedResolver</Label>
	<TableGroup>Staging</TableGroup>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefaultDimensionDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OffsetDefaultDimensionDisplayValue</Name>
			<ExtendedDataType>DimensionDisplayValue</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ExecutionId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFExecutionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransferStatus</Name>
			<EnumType>DMFTransferStatus</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>