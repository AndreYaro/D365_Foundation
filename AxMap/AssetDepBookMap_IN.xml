<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepBookMap_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepBookMap_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the AcquisitionAmount that exist for the asset book and asset depreciation book.
    /// </summary>
    /// <param name="_transDate">
    /// The Transaction Date.
    /// </param>
    /// <returns>
    /// The AcquisitionAmount that exist for the asset book and asset depreciation book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public AssetAmount acquisitionAmount(AssetTransDate _transDate)
    {
        AssetAmount acquistionAmount;

        acquistionAmount = AssetTrans::acquisitionAmount(this.AssetId, _transDate, this.AssetBookId);

        if (!acquistionAmount)
        {
            acquistionAmount = this.AcquisitionPrice;
        }

        return acquistionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the AssetBookType that exist for the asset book and asset depreciation book.
    /// </summary>
    /// <returns>
    /// The acquisitionAmount that exist for the asset book and asset depreciation book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public AssetBookType assetBookType()
    {
        AssetBookType   bookType;

        bookType = AssetBookType::ValueModel;

        return bookType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bonusCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of bonus records that exist for the asset book.
    /// </summary>
    /// <returns>
    /// The number of bonus records that exist for the asset book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public Counter bonusCount()
    {
        Counter ret;

        ret = any2int((select count(RecId) from assetGroupSetupBonus
                where assetGroupSetupBonus.BookId == this.AssetBookId
                    && assetGroupSetupBonus.AssetGroupId  == this.AssetGroup).RecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the FiscalCalendarRecId that exist for the asset book and asset depreciation book..
    /// </summary>
    /// <returns>
    /// The FiscalCalendarRecId that exist for the asset book and asset depreciation book..
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public FiscalCalendarRecId calendarRecId()
    {
        FiscalCalendarRecId recId;

        recId = AssetBookTable::find(this.AssetBookId).getFiscalCalendar();

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related record of <C>AssetDepreciationProfile</C>.
    /// </summary>
    /// <returns>
    /// A record of <C>AssetDepreciationProfile</C>.
    /// </returns>
    public AssetDepreciationProfile depreciationProfile()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSpecialDepreciationProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize and create a tmpDateSum for special depreciation profile
    /// </summary>
    /// <returns>
    /// tmpDateSum buffer for special depreciation profile
    /// </returns>
    public TmpDateSum initSpecialDepreciationProfile()
    {
        TmpDateSum                  tmpDateSum;
        AmountCur                   amountCur;
        AmountCur                   amountCurSum;
        AmountCur                   accumulatedAmountCur;
        TransDate                   transDate;
        TransDate                   currentTransDate;

        void insertTmpDateSum()
        {
            tmpDateSum.clear();
            tmpDateSum.TransDate = currentTransDate;
            tmpDateSum.TmpNumerals01 = amountCurSum;
            tmpDateSum.Total = accumulatedAmountCur;
            tmpDateSum.insert();
        }

        tmpDateSum.ttsbegin();

        AssetBonusMethod_IN assetBonusMethod = new AssetBonusMethod_IN(this);

        while (assetBonusMethod.next())
        {
            transDate   = assetBonusMethod.bonusDate();
            if (currentTransDate != dateNull() && currentTransDate != transDate)
            {
                insertTmpDateSum();
                amountCurSum = 0;
            }
            amountCur   = assetBonusMethod.getNextBonusAmount();
            accumulatedAmountCur += amountCur;
            currentTransDate = transDate;
            amountCurSum += amountCur;
        }

        accumulatedAmountCur += -this.AssetDepBookMap_IN::postedBonusAmount(dateMax());

        if (currentTransDate != dateNull())
        {
            insertTmpDateSum();
        }

        tmpDateSum.ttscommit();

        return tmpDateSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBonusRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there exists bonus for this asset book.
    /// </summary>
    /// <returns>Whether exists bonus or not.</returns>
    public boolean hasBonusRecords()
    {
        AssetBonusMethod_IN assetBonusMethod = new AssetBonusMethod_IN(this);

        if (assetBonusMethod.next())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedBonusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the postedBonusAmount that exist for the asset book and asset depreciation book.
    /// </summary>
    /// <param name="_transDate">
    /// The Transaction Date.
    /// </param>
    /// <returns>
    /// The Posted Bonus Amount that exist for the asset book and asset depreciation book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public AssetAmount postedBonusAmount(AssetTransDate _transDate)
    {
        AssetAmount postedBonusAmount;

        postedBonusAmount = AssetTrans::amountMSTPerDateTranstype(this.AssetId, _transDate, this.AssetBookId, AssetTransType::BonusDepreciation);

        return postedBonusAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_assetBookType">
    ///    The book type of transaction table that consuming the map.
    /// </param>
    /// <returns>
    ///     An empty table buffer for the concrete table represented by the map.
    /// </returns>
    public static AssetDepBookMap_IN getEmptyTableBuffer(AssetBookType _assetBookType)
    {
        AssetDepBookMap_IN  ret;
        AssetBook           assetBook;

        ret = assetBook;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetSaleWithProfit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true or false based on the Profit for the asset group after asset is sold.
    /// </summary>
    /// <param name="_periodStart">
    /// Disposal start date
    /// </param>
    /// <param name="_periodEnd">
    /// Disposal end date
    /// </param>
    /// <returns>
    ///  Boolean value to indicate if the asset sold with profit or loss.
    /// </returns>
    public boolean isAssetSaleWithProfit(TransDate  _periodStart, TransDate _periodEnd)
    {
        AssetDepBookMap_IN  assetDepBookMap;
        AssetAmount                 profit;
        AssetAmount                 groupProfit;
        boolean         ret;

        assetDepBookMap = AssetDepBookMap_IN::getEmptyTableBuffer(AssetBookType::ValueModel);

        while select assetDepBookMap
                order by assetDepBookMap.AcquisitionDate desc
                where assetDepBookMap.AssetGroup        == this.AssetGroup
                    && assetDepBookMap.AssetBookId      == this.AssetBookId
                    && (assetDepBookMap.AssetStatus     == AssetStatus::Sold
                        || assetDepBookMap.AssetStatus  == AssetStatus::Scrapped)
                    && assetDepBookMap.DisposalDate >= _periodStart
                    && assetDepBookMap.DisposalDate <= _periodEnd
        {
            profit = - AssetDepTransMap_IN::amountMSTPerDateTransTypes(assetDepBookMap, [AssetTransType::DisposalSale, AssetTransType::DisposalScrap], dateNull(), dateMax())
                            - assetDepBookMap.AssetDepBookMap_IN::acquisitionAmount(dateMax());

            if (profit > 0)
            {
                groupProfit += profit;
            }
        }

        if (groupProfit > 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets_AdditionalDepreciation:SYP4883997</DeveloperDocumentation>
	<Label>@FixedAssets:FA_EntityTitle_AssetDepBookMap</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>AcquisitionDate</Name>
			<ExtendedDataType>AssetAcquisitionDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>AcquisitionPrice</Name>
			<ExtendedDataType>AssetAcquisitionPrice</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetBookId</Name>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetGroup</Name>
			<ExtendedDataType>AssetGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AssetGroupDepreciation_IN</Name>
			<ExtendedDataType>AssetGroupDepreciation_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetId</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AssetStatus</Name>
			<EnumType>AssetStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DepreciationStartDate</Name>
			<ExtendedDataType>AssetDepreciationStartDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DisposalDate</Name>
			<ExtendedDataType>AssetDisposalDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>LastDepreciationDate</Name>
			<ExtendedDataType>AssetLastDepreciationDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>UsedFromDate</Name>
			<ExtendedDataType>AssetUsedFromDate</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>