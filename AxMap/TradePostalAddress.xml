<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradePostalAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradePostalAddress extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an <c>AgreementHeader</c> record
    /// </summary>
    /// <param name="_agreementHeaderDefault">
    ///    An <c>AgreementHeaderDefault</c> record containing a link to an <c>AgreementHeader</c> record.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementHeader</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    If the <c>AgreementHeaderDefault</c> record act as a form data source,
    ///    the linked <c>AgreementHeader</c> record in the form will be returned.
    /// </remarks>
    public AgreementHeader getAgreementHeader(AgreementHeaderDefault _agreementHeaderDefault)
    {
        AgreementHeader agreementHeader;

        if (FormDataUtil::getFormDataSource(_agreementHeaderDefault)
            && FormDataUtil::getFormDataSource(_agreementHeaderDefault).masterObjectSet())
        {
            agreementHeader = FormDataUtil::getFormDataSource(_agreementHeaderDefault).masterObjectSet().cursor();
        }
        else
        {
            agreementHeader = AgreementHeader::find(_agreementHeaderDefault.AgreementHeader);
        }

        return agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryEntityRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified entity record for a postal address.
    /// </summary>
    /// <returns>
    ///    A entity record; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    The <c>EntityType</c> of the postal address will determine the entity record returned.
    ///    In case of <c>Warehouse</c> a <c>InventLocation</c> record will be returned.
    ///    In case of <c>Site</c> a <c>InventSite</c> record will be returned.
    ///    In case of <c>Party</c> and a receiving addresses a <c>CompanyInfo</c> record will be returned.
    ///    In case of <c>Party</c> and a delivery addresses a <c>CustTable</c> or <c>smmBusRelTable</c> record will be returned.
    /// </remarks>
    public common getDeliveryEntityRecord()
    {
        LogisticsEntityPostalAddressView    logisticsEntityPostalAddressView;
        SalesTable                          salesTable;
        SalesLine                           salesLine;
        SalesQuotationTable                 salesQuotationTable;
        SalesQuotationLine                  salesQuotationLine;
        Common                              entityRecord;

        select firstonly EntityType, EntityLocation from logisticsEntityPostalAddressView
            where logisticsEntityPostalAddressView.PostalAddress == this.DeliveryPostalAddress;

        switch (LogisticsEntityPostalAddressView.EntityType)
        {
            case LogisticsLocationEntityType::Warehouse:
                entityRecord = InventLocation::findRecId(InventLocationLogisticsLocation::findRec(logisticsEntityPostalAddressView.EntityLocation).InventLocation);
                break;
            case LogisticsLocationEntityType::Site:
                entityRecord = InventSite::findRecId(InventSiteLogisticsLocation::findRec(logisticsEntityPostalAddressView.EntityLocation).Site);
                break;
            case LogisticsLocationEntityType::Party:
                if (this.TradePostalAddress::isReceivingAddress())
                {
                    entityRecord = CompanyInfo::find();
                }
                else
                {
                    switch (this.TableId)
                    {
                        case tableNum(SalesTable):
                            salesTable = this;
                            entityRecord = salesTable.custTable_CustAccount();
                            break;
                        case tableNum(SalesLine):
                            salesLine = this;
                            entityRecord = salesLine.salesTable().custTable_CustAccount();
                            break;
                        case tableNum(SalesQuotationTable):
                            salesQuotationTable = this;
                            if (salesQuotationTable.BusRelAccount)
                            {
                                entityRecord = salesQuotationTable.smmBusRelTable();
                            }
                            else
                            {
                                entityRecord = salesQuotationTable.custTable_CustAccount();
                            }
                            break;
                        case tableNum(SalesQuotationLine):
                            salesQuotationLine = this;
                            if (salesQuotationLine.salesQuotationTable().BusRelAccount)
                            {
                                entityRecord = salesQuotationLine.salesQuotationTable().smmBusRelTable();
                            }
                            else
                            {
                                entityRecord = salesQuotationLine.salesQuotationTable().custTable_CustAccount();
                            }
                            break;
                        default:
                            entityRecord = this;
                    }
                }
                break;
        }

        return entityRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a locistics location is of type delivery.
    /// </summary>
    /// <param name="_location">
    ///    The <c>LogisticsLocation</c> record to use when checking if the address is of type delivery.
    /// </param>
    /// <returns>
    ///    true if the location is a delivery address; otherwise, false.
    /// </returns>
    public boolean isDeliveryRole(LogisticsLocation _location)
    {
        LogisticsLocationRole               locationRole;
        InventSiteLogisticsLocation         inventSiteLogisticsLocation;
        InventSiteLogisticsLocationRole     inventSiteLogisticsLocationRole;
        InventLocationLogisticsLocation     inventLocationLogisticsLocation;
        InventLocationLogisticsLocationRole inventLocationLogisticsLocationRole;

        if (_location.isRole(LogisticsLocationRoleType::Delivery))
        {
            return true;
        }

        select RecId from locationRole
                where locationRole.Type == LogisticsLocationRoleType::Delivery
            join RecId from inventSiteLogisticsLocationRole
                where inventSiteLogisticsLocationRole.LocationRole == locationRole.RecId
            join RecId from inventSiteLogisticsLocation
                where inventSiteLogisticsLocation.Location == _location.RecId
                && inventSiteLogisticsLocation.RecId == inventSiteLogisticsLocationRole.SiteLogisticsLocation;

        if (locationRole.RecId)
        {
            return true;
        }

        select RecId from locationRole
                where locationRole.Type == LogisticsLocationRoleType::Delivery
            join RecId from inventLocationLogisticsLocationRole
                where inventLocationLogisticsLocationRole.LocationRole == locationRole.RecId
            join RecId from inventLocationLogisticsLocation
                where inventLocationLogisticsLocation.Location == _location.RecId && inventLocationLogisticsLocation.RecId == inventLocationLogisticsLocationRole.LocationLogisticsLocation;

        if (locationRole.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceivingAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the buffer is a receiving address.
    /// </summary>
    /// <returns>
    ///    true if the buffer is a receiving address; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Receiving addresses is when the party is a Vendor or a return order.
    /// </remarks>
    public boolean isReceivingAddress()
    {
        boolean receivingAddress = false;
        SalesTable  salesTable;
        SalesLine   salesLine;
        PurchTable  purchTable;
        PurchLine   purchLine;

        switch (this.TableId)
        {
            case tableNum(SalesTable):
                salesTable = this;
                if (salesTable.SalesType == SalesType::ReturnItem
                    && !salesTable.returnExistReturnToCustLines())
                {
                    receivingAddress = true;
                }
                break;
            case tableNum(SalesLine):
                salesLine = this;
                if (salesLine.SalesType == SalesType::ReturnItem
                    && (ReturnDispositionCode::find(salesLine.ReturnDispositionCodeId).DispositionAction != DispositionAction::ReturnToCust))
                {
                    receivingAddress = true;
                }
                break;
            case tableNum(PurchTable):
                purchTable = this;
                if (purchTable.PurchaseType != PurchaseType::ReturnItem)
                {
                    receivingAddress = true;
                }
                break;
            case tableNum(PurchLine):
                purchLine = this;
                if (purchLine.PurchaseType != PurchaseType::ReturnItem)
                {
                    receivingAddress = true;
                }
                break;
            case tableNum(PurchReqLine):
            case tableNum(ConsignmentReplenishmentOrderHeader):
            case tableNum(ConsignmentReplenishmentOrderLine):
            case tableNum(VendInvoiceInfoTable):
            case tableNum(VendInvoiceInfoLine):
            case tableNum(PurchRFQCaseTable):
                receivingAddress = true;
                break;
            case tableNum(AgreementHeaderDefault):
                if (this.TradePostalAddress::getAgreementHeader(this) is PurchAgreementHeader)
                {
                    receivingAddress = true;
                }
                break;
        }

        return receivingAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTableDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for finding a <c>DirPartyTable</c> record associated to a <c>TradePostalAddress</c> buffer.
    /// </summary>
    /// <param name = "_tradePostalAddress">A <c>TradePostalAddress</c> buffer.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> where a record in the <c>DirPartyTable</c> table can be returned.</param>
    delegate void partyTableDelegate(TradePostalAddress _tradePostalAddress, 
                                     EventHandlerResult _result)
    {    
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>DirPartyTable</c> record associated to the buffer.
    /// </summary>
    /// <returns>
    ///    A record in the <c>DirPartyTable</c> table; otherwise, an empty record.
    /// </returns>
    public DirPartyTable partyTable()
    {
        DirPartyTable partyTable;

        switch (this.TableId)
        {
            case tableNum(SalesTable):
                SalesTable salesTable = this;
                partyTable = salesTable.partyTable_CustAccount();
                break;
            case tableNum(SalesLine):
                SalesLine salesLine = this;
                partyTable = salesLine.salesTable().partyTable_CustAccount();
                break;
            case tableNum(SalesQuotationTable):
                SalesQuotationTable salesQuotationTable = this;
                partyTable = DirPartyTable::findRec(salesQuotationTable.party());
                break;
            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = this;
                partyTable = DirPartyTable::findRec(salesQuotationLine.salesQuotationTable().party());
                break;
            case tableNum(PurchTable):
                PurchTable purchTable = this;
                partyTable = purchTable.partyTable_OrderAccount();
                break;
            case tableNum(PurchLine):
                PurchLine purchLine = this;
                partyTable = purchLine.purchTable().partyTable_OrderAccount();
                break;
            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = this;
                partyTable = vendInvoiceInfoTable.partyTable_InvoiceAccount();
                break;
            case tableNum(VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = this;
                partyTable = vendInvoiceInfoLine.vendInvoiceInfoTable().partyTable_InvoiceAccount();
                break;
            case tableNum(ConsignmentReplenishmentOrderHeader):
                ConsignmentReplenishmentOrderHeader consignmentReplenishmentOrderHeader = this;
                partyTable = consignmentReplenishmentOrderHeader.partyTable();
                break;
            case tableNum(ConsignmentReplenishmentOrderLine):
                ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = this;
                partyTable = consignmentReplenishmentOrderLine.replenishmentOrderHeader().partyTable();
                break;
            case tableNum(AgreementHeaderDefault):
                AgreementHeader agreementHeader = this.TradePostalAddress::getAgreementHeader(this);

                if (agreementHeader is SalesAgreementHeader)
                {
                    SalesAgreementHeader salesAgreementHeader = agreementHeader as SalesAgreementHeader;
                    partyTable = DirPartyTable::findRec(salesAgreementHeader.custTable().Party);
                }
                else if (agreementHeader is PurchAgreementHeader)
                {
                    PurchAgreementHeader purchAgreementHeader = agreementHeader as PurchAgreementHeader;
                    partyTable = DirPartyTable::findRec(purchAgreementHeader.vendTable().Party);
                }
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.partyTableDelegate(this, result);
                if (result.hasResult())
                {
                    partyTable = result.result() as DirPartyTable;
                    break;
                }
                throw error(strFmt("@SYS19306",funcName()));
        }

        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the delivery name field based on the specified logistic location.
    /// </summary>
    /// <param name="_skipDeliveryRoleCheck">
    /// A flag indicating whether to skip the check for determining the delivery role; optional.
    /// </param>
    public void setDeliveryName(boolean _skipDeliveryRoleCheck = false)
    {
        LogisticsLocation               location;

        location = LogisticsLocation::find(LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Location);

        if (_skipDeliveryRoleCheck ||
            (this.TradePostalAddress::isDeliveryRole(location) && location.Description))
        {
            this.DeliveryName  = location.Description;
        }
        else
        {
            if (this.TradePostalAddress::isReceivingAddress())
            {
                this.DeliveryName = CompanyInfo::find().Name;
            }
            else
            {
                this.DeliveryName = this.TradePostalAddress::partyTable().Name;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS344705</DeveloperDocumentation>
	<Visible>No</Visible>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DeliveryName</Name>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<StringSize>100</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>