<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestContactAddressMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestContactAddressMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAddressFields</Name>
				<Source><![CDATA[
    private void clearAddressFields()
    {
        this.City               = '';
        this.County             = '';
        this.State              = '';
        this.CountryRegionId    = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToAddressMap</Name>
				<Source><![CDATA[
private LogisticsPostalAddressMap convertToAddressMap(VendRequestContactAddressMap _contactAddressMap)
    {
        return VendRequestContactAddressMap::getAddressMap(_contactAddressMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats the address fields.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void formatAddress()
    {
        LogisticsAddressZipCodeId       addressZipCodeId = this.ZipCode;
        LogisticsAddressCountryRegionId logisticsAddressCountryRegionId;
        #isoCountryRegionCodes

        logisticsAddressCountryRegionId = LogisticsAddressZipCode::find(substr(this.Street, 1, 7)).CountryRegionId;

        if (LogisticsAddressCountryRegion::find(this.CountryRegionId).isOcode == #isoNL
            || (!this.CountryRegionId
            && LogisticsAddressCountryRegion::find(logisticsAddressCountryRegionId).isOcode == #isoNL))
        {
            [this.Street, this.ZipCode] = this.LogisticsPostalAddressMap::zipCodeExtraction_NL(this.Street, this.ZipCode);
            if (this.ZipCode != '')
            {
                this.VendRequestContactAddressMap::initFromZipCode(LogisticsAddressZipCode::findZipCodeCountryRegion(this.ZipCode,
                                                                                                                     this.CountryRegionId? this.CountryRegionId: logisticsAddressCountryRegionId));
            }
            addressZipCodeId = LogisticsPostalAddressMap::formatZipCodeStrForNL(this.ZipCode);
        }

        LogisticsPostalAddressStringBuilderParameters addressStringBuilderParameters = this.postalAddressStringBuilderParameters();
        addressStringBuilderParameters.parmZipCodeId(addressZipCodeId);
        this.Address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the city, county, state, and country region fields
    /// </summary>
    /// <param name="_zipCode">
    ///    The ZIP Code/Postal Code to initialize the address values from.
    /// </param>
    private void initFromZipCode(LogisticsAddressZipCode _zipCode)
    {
        this.ZipCode            = _zipCode.ZipCode;
        this.City               = _zipCode.City;
        this.County             = _zipCode.County;
        this.State              = _zipCode.State;
        this.CountryRegionId    = _zipCode.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values for address fields based on the modified field value.
    /// </summary>
    /// <param name="_fieldId">
    ///    The address field that is being modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        SysDictField dictField = new SysDictField(this.TableId, _fieldId);
        super(_fieldId);

        switch (dictField.typeId())
        {
            case extendedtypenum(LogisticsAddressZipCodeId):
                this.VendRequestContactAddressMap::modifiedFieldZipCode();
                break;

            case extendedtypenum(LogisticsAddressCountryRegionId) :
                this.State  = '';
                this.County = '';
                if (!LogisticsAddressZipCode::findZipCodeCountryRegion(this.ZipCode, this.CountryRegionId))
                {
                    this.ZipCode = '';
                }
                this.VendRequestContactAddressMap::formatAddress();
                break;

            case extendedtypenum(LogisticsAddressStateId) :
                this.County = '';
                this.VendRequestContactAddressMap::formatAddress();
                break;

            case extendedtypenum(LogisticsAddressCountyId),
                 extendedtypenum(LogisticsAddressCityName),
                 extendedtypenum(LogisticsAddressStreet) :
                this.VendRequestContactAddressMap::formatAddress();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddressStringBuilderParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>LogisticsPostalAddressStringBuilderParameters</c> object for the record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsPostalAddressStringBuilderParameters</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LogisticsPostalAddressStringBuilderParameters postalAddressStringBuilderParameters()
    {
        var addressStringBuilderParameters =
            new LogisticsPostalAddressStringBuilderParameters();

        addressStringBuilderParameters.parmStreet(this.Street);
        addressStringBuilderParameters.parmZipCodeId(this.ZipCode);
        addressStringBuilderParameters.parmCityName(this.City);
        addressStringBuilderParameters.parmCountryRegionId(this.CountryRegionId);
        addressStringBuilderParameters.parmStateId(this.State);
        addressStringBuilderParameters.parmCountyId(this.County);

        return addressStringBuilderParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldZipCode</Name>
				<Source><![CDATA[
    private void modifiedFieldZipCode()
    {
        LogisticsAddressZipCode  zipCode;
        LogisticsPostalAddressMap addressMap;

        if (LogisticsAddressZipCode::zipCodeCount(this.ZipCode) <= 1)
        {
            this.VendRequestContactAddressMap::clearAddressFields();
            this.VendRequestContactAddressMap::initFromZipCode(LogisticsAddressZipCode::find(this.ZipCode));
            this.VendRequestContactAddressMap::setAddress();
        }
        else
        {
            addressMap = VendRequestContactAddressMap::getAddressMap(this);
            zipCode = LogisticsAddressZipCode::findLogisticsAddressMap(addressMap);

            if (!zipCode && FormDataUtil::isFormDataSource(this))
            {
                LogisticsAddressZipCode::zipCodeLookup(null, addressMap);
            }
            else
            {
                this.VendRequestContactAddressMap::initFromZipCode(zipCode);
            }

            this.VendRequestContactAddressMap::setAddress();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddress</Name>
				<Source><![CDATA[
    private void setAddress()
    {
        LogisticsAddressZipCode          zipCode;
        LogisticsAddressZipCodeId        addressZipCodeId;
        LogisticsAddressCityName         city            = this.City;
        LogisticsAddressCountryRegionId  countryRegionId = this.CountryRegionId;
        LogisticsAddressStateId          stateId         = this.State;
        LogisticsAddressCountyId         countyId        = this.County;
        LogisticsPostalAddressMap        addressMap;
        #isoCountryRegionCodes

        addressMap = this.VendRequestContactAddressMap::convertToAddressMap(this);
        zipCode = LogisticsAddressZipCode::findBestMatch(addressMap, false);

        if (zipCode)
        {
            city            = zipCode.City;
            stateId         = zipCode.State;
            countyId        = zipCode.County;
            countryRegionId = zipCode.CountryRegionId;
        }
        else
        {
            // No exact match - try to fill in empty fields based on not exact matches.
            zipCode = LogisticsAddressZipCode::findBestMatch(addressMap);
            if (!city && zipCode)
            {
                city = zipCode.City;
            }
            if (!countryRegionId && zipCode)
            {
                countryRegionId   = zipCode.CountryRegionId;
            }
        }
        addressZipCodeId = this.ZipCode;
        if (LogisticsAddressCountryRegion::find(this.CountryRegionId).isOcode == #isoNL)
        {
            addressZipCodeId = LogisticsPostalAddressMap::formatZipCodeStrForNL(addressZipCodeId);
        }

        this.City               = city;
        this.County             = countyId;
        this.State              = stateId;
        this.CountryRegionId    = countryRegionId;

        LogisticsPostalAddressStringBuilderParameters addressStringBuilderParameters = this.postalAddressStringBuilderParameters();
        addressStringBuilderParameters.parmZipCodeId(addressZipCodeId);
        this.Address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressMap</Name>
				<Source><![CDATA[
    private static LogisticsPostalAddressMap getAddressMap(VendRequestContactAddressMap _contactAddressMap)
    {
        LogisticsPostalAddressMap addressMap;

        addressMap.Address = _contactAddressMap.Address;
        addressMap.ZipCode = _contactAddressMap.ZipCode;
        addressMap.County = _contactAddressMap.County;
        addressMap.CountryRegionId = _contactAddressMap.CountryRegionId;
        addressMap.State = _contactAddressMap.State;
        addressMap.City = _contactAddressMap.City;
        addressMap.Street = _contactAddressMap.Street;

        return addressMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS326754</DeveloperDocumentation>
	<Label>@SYS130419</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Address</Name>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<StringSize>250</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>City</Name>
			<ExtendedDataType>AddressCity</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CountryRegionId</Name>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>County</Name>
			<ExtendedDataType>AddressCountyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>State</Name>
			<ExtendedDataType>AddressStateId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Street</Name>
			<ExtendedDataType>AddressStreet</ExtendedDataType>
			<StringSize>250</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ZipCode</Name>
			<ExtendedDataType>AddressZipCodeId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>