<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemCostGroupRollupMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemCostGroupRollupMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCostGroupRollup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map from a cost group rollup and an item price.
    /// </summary>
    /// <param name = "_source">The cost group rollup.</param>
    /// <param name = "_sourceItemPrice">The item price.</param>
    public void initFromCostGroupRollup(InventItemCostGroupRollupMap _source, InventItemPriceMap _sourceItemPrice)
    {
        PriceConvertFactory         priceConvertFactory;
        PriceConvert                priceConvert;

        // <GEERU>
        priceConvertFactory = PriceConvertFactory::newItemPrice(_sourceItemPrice.ItemId,
                                                                _sourceItemPrice.UnitID,
                                                                _source.CostAmountStd,
                                                                _source.Qty,
                                                                0,
                                                                0,
                                                                '',
                                                                _source.CostAmountSecCur_RU,
                                                                0);
        // </GEERU>

        priceConvertFactory.parmNewUnitId(InventTableModule::find(_sourceItemPrice.ItemId, InventItemPrice::convPriceTypeToModuleInventPurchSales(_sourceItemPrice.PriceType)).UnitId);
        if (_sourceItemPrice.PriceCalcId)
        {
            priceConvertFactory.parmRounding(false);
        }
        else
        {
            priceConvertFactory.parmRounding(true);
        }

        priceConvertFactory.parmInventDimId(_sourceItemPrice.InventDimId);
        priceConvert = priceConvertFactory.priceConvert();

        this.CostAmountStd      = priceConvert.parmPrice();
        this.Qty                = priceConvert.parmPriceUnit();
        this.CostGroupId        = _source.CostGroupId;
        this.CostLevel          = _source.CostLevel;
        this.Split              = _source.Split;

        // <GEERU>
        this.CostAmountSecCur_RU    = priceConvert.parmPriceSecCur_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPriceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the map from an item price.
    /// </summary>
    /// <param name = "_inventItemPrice">The item price.</param>
    public void initFromInventItemPriceMap(InventItemPriceMap _inventItemPrice)
    {
        this.CostLevel = InventCostLevel::Total;
        this.Split     = NoYes::No;

        if (_inventItemPrice.PriceCalcId == '')
        {
            // For manually created prices, use the price unit
            this.Qty           = _inventItemPrice.priceUnit();
            this.CostAmountStd = _inventItemPrice.price();
            // <GEERU>
            this.CostAmountSecCur_RU = _inventItemPrice.priceSecCur_RU();
            // </GEERU>
        }
        else
        {
            // For calculated prices, use the price quantity
            this.Qty           = _inventItemPrice.priceQty();
            this.CostAmountStd = _inventItemPrice.Price * _inventItemPrice.priceQty() / _inventItemPrice.priceUnit() + _inventItemPrice.Markup;
            // <GEERU>
            this.CostAmountSecCur_RU = _inventItemPrice.PriceSecCur_RU * _inventItemPrice.priceQty() / _inventItemPrice.priceUnit() + _inventItemPrice.MarkupSecCur_RU;
            // </GEERU>
        }

        this.CostGroupId = InventTable::find(_inventItemPrice.ItemId).costGroup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS324217</DeveloperDocumentation>
	<Label>@SYS110970</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CostAmountSecCur_RU</Name>
			<ExtendedDataType>CostAmountSecCur_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CostAmountStd</Name>
			<ExtendedDataType>CostAmountStd</ExtendedDataType>
			<Label>@SYS3058</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CostGroupId</Name>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>CostLevel</Name>
			<EnumType>InventCostLevel</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Split</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>