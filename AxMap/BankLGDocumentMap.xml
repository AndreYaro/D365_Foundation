<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGDocumentMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLGDocumentMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankLGGuaranteeRelationMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the corresponding <c>BankLGGuaranteeRelationMap</c> buffer for current document.
    /// </summary>
    /// <param name="_forUpdate">
    ///     Specify whether the origin document buffer will be updated or not.
    /// </param>
    /// <returns>
    ///     the record in its corrsponding <c>BankLGGuaranteeRelationMap</c> table if exists;
    ///  otherwise, an empty buffer of its corrsponding <c>BankLGGuaranteeRelationMap</c> table.
    /// </returns>
    public BankLGGuaranteeRelationMap bankLGGuaranteeRelationMap(boolean _forUpdate = false)
    {
        BankLGGuaranteePurchaseOrder        bankLGGuaranteePurchaseOrder;
        BankLGGuaranteeCustomerSalesOrder   bankLGGuaranteeCustomerSalesOrder;
        BankLGGuaranteeProject              bankLGGuaranteeProject;
        BankLGGuaranteeSalesQuotation       bankLGGuaranteeSalesQuotation;

        BankLGGuaranteeRelationMap          bankLGGuaranteeRelationMap;

        switch (this.TableId)
        {
            case tablenum(SalesTable):
                bankLGGuaranteeRelationMap = bankLGGuaranteeCustomerSalesOrder;
                break;

            case tablenum(PurchTable):
                bankLGGuaranteeRelationMap = bankLGGuaranteePurchaseOrder;
                break;

            case tablenum(ProjTable):
                bankLGGuaranteeRelationMap = bankLGGuaranteeProject;
                break;

            case tablenum(SalesQuotationTable):
                bankLGGuaranteeRelationMap = bankLGGuaranteeSalesQuotation;
                break;
        }

        if (this.DocumentId)
        {
            bankLGGuaranteeRelationMap.selectForUpdate(_forUpdate);

            select firstOnly bankLGGuaranteeRelationMap
                where bankLGGuaranteeRelationMap.DocumentId == this.DocumentId;
        }

        return bankLGGuaranteeRelationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the currency code of the current document.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        CurrencyCode    currencyCode;
        ProjTable       projTable;

        // "CurrencyCode" field is not available for ProjTable, use its contractCurrCode() method instead.
        if (this.TableId == tablenum(ProjTable))
        {
            projTable       = this;
            currencyCode    = projTable.contractCurrCode();
        }
        else
        {
            currencyCode = this.CurrencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the type of the origin document.
    /// </summary>
    /// <returns>
    ///    The origin document type.
    /// </returns>
    public BankLGOriginType getOriginDocumentType()
    {
        BankLGOriginType    originDocumentType = BankLGOriginType::None;
        SalesQuotationTable salesQuotationTable;

        switch (this.TableId)
        {
            case tablenum(SalesTable):
                originDocumentType = BankLGOriginType::SalesOrder;
                break;
            case tablenum(PurchTable):
                originDocumentType = BankLGOriginType::PurchaseOrder;
                break;
            case tablenum(ProjTable):
                originDocumentType = BankLGOriginType::Project;
                break;
            case tablenum(SalesQuotationTable):
                salesQuotationTable = this;
                if (salesQuotationTable.QuotationType == QuotationType::Project)
                {
                    originDocumentType = BankLGOriginType::ProjectQuotation;
                }
                else if (salesQuotationTable.QuotationType == QuotationType::Sales)
                {
                    originDocumentType = BankLGOriginType::SalesQuotation;
                }
                break;
            default:
                originDocumentType = BankLGOriginType::None;
                break;
        }

        return originDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkedToGuarantee</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this order is linked to a Letter of Guarantee.
    /// </summary>
    /// <returns>
    ///     True if it is linked to a Letter of Guarantee ; oterwise, false
    /// </returns>
    public boolean isLinkedToGuarantee()
    {
        return this.BankLGDocumentMap::bankLGGuaranteeRelationMap().Guarantee != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentType</Name>
				<Source><![CDATA[
    public BankDocumentType parmBankDocumentType(BankDocumentType _bankDocumentType = this.BankDocumentType)
    {
        // The item value used in BankDocumentType and BankLGDocumentType has been set to be matched for same items.
        this.BankDocumentType = _bankDocumentType;

        if (this.TableId == tablenum(ProjTable)
            || this.TableId == tablenum(SalesQuotationTable))
        {
            // Bank document type is not letter of Guarantee
            if (this.BankDocumentType == BankDocumentType::ImportCollection
                || this.BankDocumentType == BankDocumentType::LetterOfCredit)
            {
                this.BankDocumentType = BankDocumentType::None;
            }
        }

        return this.BankDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferGuarantee</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Tramsfers the Letter of Guarantee from current document to another document.
    /// </summary>
    /// <param name="_toDocument">
    ///     The target document to get the Letter of Guarantee.
    /// </param>
    /// <returns>
    ///     true if transferred; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Only do the transfer when two documents exist, the current one
    ///  links to a Letter of Guarantee, and the target one does not.
    /// </remarks>
    public boolean transferGuarantee(BankLGDocumentMap _toDocument)
    {
        BankLGGuaranteeRelationMap  bankLGGuaranteeRelationMap;
        BankLGGuaranteeRelationMap  bankLGGuaranteeRelationMapNew;
        BankLGGuarantee             bankLGGuarantee;
        boolean                     transfered = false;

        if (_toDocument.RecId
            && _toDocument.DocumentId
            && (this.TableId        != _toDocument.TableId
                || this.DocumentId  != _toDocument.DocumentId))
        {
            bankLGGuaranteeRelationMap      = this.BankLGDocumentMap::bankLGGuaranteeRelationMap(true);
            bankLGGuaranteeRelationMapNew   = _toDocument.BankLGDocumentMap::bankLGGuaranteeRelationMap();

            if (bankLGGuaranteeRelationMap.Guarantee        != 0
                && bankLGGuaranteeRelationMapNew.Guarantee  == 0)
            {
                ttsBegin;

                // Update the origin type of Letter of Guarantee if needed.
                if (this.BankLGDocumentMap::getOriginDocumentType() != _toDocument.BankLGDocumentMap::getOriginDocumentType())
                {
                    bankLGGuarantee = BankLGGuarantee::find(bankLGGuaranteeRelationMap.Guarantee, true);

                    if (bankLGGuarantee && bankLGGuarantee.RecId)
                    {
                        bankLGGuarantee.OriginType = _toDocument.BankLGDocumentMap::getOriginDocumentType();
                        bankLGGuarantee.update();
                    }
                }

                // Insert the new relation
                bankLGGuaranteeRelationMapNew.DocumentId    = _toDocument.DocumentId;
                bankLGGuaranteeRelationMapNew.Guarantee     = bankLGGuaranteeRelationMap.Guarantee;
                bankLGGuaranteeRelationMapNew.insert();

                // Delete the old relation
                bankLGGuaranteeRelationMap.delete();

                transfered = true;

                ttsCommit;
            }
        }

        return transfered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the origin document record.
    /// </summary>
    /// <param name="_originType">
    ///    The type of the origin document.
    /// </param>
    /// <param name="_originNum">
    ///    The document ID of the origin document.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the origin document buffer for update.
    /// </param>
    /// <returns>
    ///    The origin document buffer that is assigned to the <c>BankLGDocumentMap</c> map.
    /// </returns>
    public static BankLGDocumentMap find(
        BankLGOriginType    _originType,
        BankLGoriginNum     _originNum,
        boolean             _forUpdate = false)
    {
        BankLGDocumentMap   bankLGDocumentMap;

        if (_originNum)
        {
            switch (_originType)
            {
                case BankLGOriginType::SalesOrder:
                    bankLGDocumentMap = SalesTable::find(_originNum, _forUpdate);
                    break;
                case BankLGOriginType::PurchaseOrder:
                    bankLGDocumentMap = PurchTable::find(_originNum, _forUpdate);
                    break;
                case BankLGOriginType::Project:
                    bankLGDocumentMap = ProjTable::find(_originNum, _forUpdate);
                    break;
                case BankLGOriginType::ProjectQuotation:
                case BankLGOriginType::SalesQuotation:
                    bankLGDocumentMap = SalesQuotationTable::find(_originNum, _forUpdate);
                    break;
            }
        }

        return bankLGDocumentMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankLG</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the origin document buffer that related to a <c>BankLG</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BankLG</c> record.
    /// </param>
    /// <param name="_originType">
    ///    The type of the origin document.
    /// </param>
    /// <param name="_forUpdate">
    ///    Indicates whether to read the origin document buffer for update.
    /// </param>
    /// <returns>
    ///    The origin document buffer that is assigned to the <c>BankLGDocumentMap</c> map.
    /// </returns>
    public static BankLGDocumentMap findByBankLG(
        BankLGRefRecId      _recId,
        BankLGOriginType    _originType,
        boolean             _forUpdate = false)
    {
        BankLGDocumentMap   bankLGDocumentMap;

        if (_recId)
        {
            switch (_originType)
            {
                case BankLGOriginType::SalesOrder:
                    bankLGDocumentMap = SalesTable::findByBankLG(_recId, _forUpdate);
                    break;
                case BankLGOriginType::PurchaseOrder:
                    bankLGDocumentMap = PurchTable::findByBankLG(_recId, _forUpdate);
                    break;
                case BankLGOriginType::Project:
                    bankLGDocumentMap = ProjTable::findByBankLG(_recId, _forUpdate);
                    break;
                case BankLGOriginType::ProjectQuotation:
                case BankLGOriginType::SalesQuotation:
                    bankLGDocumentMap = SalesQuotationTable::findByBankLG(_recId, _forUpdate);
                    break;
            }
        }

        return bankLGDocumentMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS318014</DeveloperDocumentation>
	<Label>@SYS80611</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BankDocumentType</Name>
			<EnumType>BankDocumentType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DocumentId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderAccount</Name>
			<ExtendedDataType>ExternalAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>