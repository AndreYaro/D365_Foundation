<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdProductionJournalEntryMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdProductionJournalEntryMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a production journal header.
    /// </summary>
    /// <param name = "_journalNameId">The production journal name that the header is associated with.</param>
    /// <param name = "_prodId">The production journal id that the header is associated with.</param>
    /// <param name = "_expectedJournalType">The expected production journal type for the created production journal header.</param>
    /// <returns>A <c>ProdJournalTable</c> record.</returns>
    /// <remarks>
    /// The production journal header is created based on the production journal name.
    /// The production journal type is validated against the expected production journal type, and will fail with an error if they do not match.
    /// </remarks>
    [Hookable(false)]
    internal static  ProdJournalTable createJournalHeader(JournalNameId _journalNameId, ProdId _prodId, ProdJournalType _expectedJournalType)
    {
        ProdJournalName prodJournalName = ProdJournalName::find(_journalNameId);
        ProdJournalTable prodJournalTable;

        if (prodJournalName
           && prodJournalName.JournalType == _expectedJournalType)
        {
            ProdJournalTableData        prodJournalTableData;

            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            prodJournalTableData.initBuffer(prodJournalName.JournalNameId, _prodId, _expectedJournalType);
            prodJournalTable.insert();
        }
        else
        {
            throw error(strFmt("@SYS22977", _expectedJournalType));
        }
        return prodJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journal number on the production journal Route Card line.
    /// </summary>
    /// <param name = "_expectedJournalType">The expected journal type for the journal line.</param>
    /// <param name = "_approxNumberOfLines">Approx number of lines included in the same production journal; optional.</param>
    /// <remarks>
    /// The production journal line will be set to an existing journal number in case a production journal header exists with less than approx lines specified by the <paramref name="_approxNumberOfLines"/> parameter.
    /// If no production journal header exists a new production journal header will be created and the journal number will be used.
    /// The production journal type from the production journal name will be validated against the expected production journal type, and will fail with an error if they do not match.
    /// </remarks>
    public void setJournalNumber(
        ProdJournalType     _expectedJournalType,
        int64               _approxNumberOfLines = 1000)
    {
        if (!this.JournalNumber)
        {
            ProdJournalName prodJournalName = ProdJournalName::find(this.JournalName);

            if (prodJournalName
                && prodJournalName.JournalType == _expectedJournalType)
            {
                ProdJournalTable    existingJournalTable;

                // See if we can find a journal header for the journal name
                // that do have less than approx lines specified in the _approxNumberOfLines parameter
                select firstonly RecId, JournalId, Posted, VoucherDraw from existingJournalTable
                    order by RecId desc
                        where existingJournalTable.JournalNameId == this.JournalName
                        && existingJournalTable.ProdId == this.ProductionOrderNumber
                        && existingJournalTable.NumOfLines < _approxNumberOfLines;

                if (existingJournalTable.JournalId
                        && existingJournalTable.Posted == NoYes::No
                        && existingJournalTable.VoucherDraw == JournalVoucherDraw::Post)
                {
                    // Only use existing journal where voucher numbers are assigned when posting and journal is not already posted
                    this.JournalNumber = existingJournalTable.JournalId;
                }
                else
                {
                    this.JournalNumber = ProdProductionJournalEntryMap::createJournalHeader(this.JournalName,this.ProductionOrderNumber, _expectedJournalType).JournalId;
                }
            }
            else
            {
                throw error(strFmt("@SYS22977", _expectedJournalType));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalNumber</Name>
			<ExtendedDataType>ProdJournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalName</Name>
			<ExtendedDataType>ProdJournalNameId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductionOrderNumber</Name>
			<ExtendedDataType>ProdId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>