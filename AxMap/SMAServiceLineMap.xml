<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceLineMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceLineMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCategoryEmplOption</Name>
				<Source><![CDATA[
    public boolean checkCategoryEmplOption()
    {
        ProjCategory    projCategory;
        boolean         ret             = true;

        if (this.ProjCategoryId)
        {
            projCategory = ProjCategory::find(this.ProjCategoryId);

            if (projCategory.RecId && projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Mandatory && !this.Worker)
            {
                // Employee number must be specified.
                return checkFailed("@SYS67768");
            }

            if (projCategory.RecId && projCategory.ProjCategoryEmplOption == ProjCategoryEmplOption::Never && this.Worker)
            {
                // Employee cannot be specified on category
                return checkFailed("@SYS75858");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHourCategoryAllowed</Name>
				<Source><![CDATA[
    public boolean checkHourCategoryAllowed()
    {
        boolean ret = true;

        if (this.ActivityNumber && this.ProjCategoryId)
        {
            if (ProjActivity::find(this.ActivityNumber).Mandatory)
            {
                if (this.ProjCategoryId != (ProjActivity::find(this.ActivityNumber).CategoryDefault))
                {
                    // You cannot change the category, because it is set as mandatory on the activity
                    ret = checkFailed("@SYS81827");
                }

                this.ProjCategoryId = ProjActivity::find(this.ActivityNumber).CategoryDefault;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjCategoryId</Name>
				<Source><![CDATA[
    public boolean checkProjCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.ProjCategoryId)
        {
            projCategory    = ProjCategory::find(this.ProjCategoryId);

            if (SMAServiceLineMap::projCategoryType(this.TransactionType) != SMAAgreementLine::transType(this.ProjCategoryId))
            {
                // Category transaction type '%1' and template transaction type '%2' are inconsistent.
                ret = checkFailed(strFmt("@SYS79132", SMAAgreementLine::transType(this.ProjCategoryId), this.TransactionType));
            }

            if (projCategory.CategoryType == ProjCategoryType::Revenue)
            {
                if (ret && (projCategory.SetupEstimate || projCategory.SetupSubscription))
                {
                    ret = checkFailed("@SYS88806");
                }
            }

            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransTypeAllowed</Name>
				<Source><![CDATA[
    public boolean checkTransTypeAllowed()
    {
        boolean     ret = true;
        ProjType    projType;

        if (this.TransactionType == SMATransactionType::Fee)
        {
            projType = ProjTable::find(this.ProjId).Type;

            if (projType != ProjType::TimeMaterial)
            {
                // Fee can be entered only on time and material projects.
                ret = checkFailed("@SYS90787");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorker</Name>
				<Source><![CDATA[
    public boolean checkWorker()
    {
        HcmWorkerLookup hcmWorkerLookup;
        boolean         ret = true;

        if (this.Worker)
        {
            hcmWorkerLookup = SMAServiceLineMap::serviceLineWorkerLookup();
            ret = hcmWorkerLookup.validateWorker(this.Worker);

            if (!ret)
            {
                checkFailed(strFmt("@SYS39817", HcmWorker::find(this.Worker).PersonnelNumber));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    private boolean checkInventDim()
    {
        boolean ret = true;

        if (this.ItemId && this.InventDimId)
        {
            InventItemOrderSetupMap inventItemOrderSetupMap = InventItemOrderSetupMap::find(this.itemId, this.getInventItemOrderSetupType(), this.InventDimId, false, this.inventTable());

            // Check site and warehouse setup
            if (inventItemOrderSetupMap)
            {
                InventDim inventDim = InventDim::find(this.InventDimId);

                ret = inventItemOrderSetupMap.checkInventSiteId(inventDim.InventSiteId, true, this.inventTable())
                    && inventItemOrderSetupMap.checkInventLocationId(inventDim.InventLocationId, true, true, this.inventTable());
            }

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a dimension set that can be applied to the defaultDimension field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    A dimension set that should be applied to the defaultDimension field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    ///    A <c>dimensionCopy</c> object previously instantiated using the current
    ///    buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that can be applied to the defaultDimension field on this table.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromCommon(this,
                                                                       this.companyInfo().RecId
                                                                       )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedActivityId</Name>
				<Source><![CDATA[
    public void fieldModifiedActivityId(boolean _updatePrice = true)
    {
        this.SMAServiceLineMap::initFromProjActivity(ProjActivity::find(this.ActivityNumber));
        this.SMAServiceLineMap::fieldModifiedCategoryId(_updatePrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCategoryId</Name>
				<Source><![CDATA[
    public void fieldModifiedCategoryId(boolean _updatePrice = true)
    {
        this.SMAServiceLineMap::setItemTaxGroupId();
        this.SMAServiceLineMap::setLineProperty();

        if (this.TransactionType == SMATransactionType::Hour)
        {
            this.SMAServiceLineMap::checkHourCategoryAllowed();
        }

        // Default line description to a category description
        this.Description = ProjCategory::find(this.ProjCategoryId).Name;

        if (_updatePrice)
        {
            switch (this.TransactionType)
            {
                case SMATransactionType::Hour :
                    this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
                    break;

                case SMATransactionType::Item :
                    this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
                    break;

                case SMATransactionType::Expense :
                    this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
                    break;

                case SMATransactionType::Fee :
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCurrency</Name>
				<Source><![CDATA[
    public void fieldModifiedCurrency(boolean _updatePrice = true)
    {
        if (_updatePrice)
        {
            switch (this.TransactionType)
            {
                case SMATransactionType::Hour,
                     SMATransactionType::Expense,
                     SMATransactionType::Item:
                    this.ProjCostPriceCost = this.SMAServiceLineMap::projCostPrice();
                    break;
            }

            this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemId</Name>
				<Source><![CDATA[
    public void fieldModifiedItemId(boolean _updatePrice = true,boolean _itemRequirement = false)
    {
        this.SMAServiceLineMap::initReleasedProductSpecificDefaulting();
        this.SMAServiceLineMap::initDimensionsSpecificDefaulting(_updatePrice, _itemRequirement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    public void initReleasedProductSpecificDefaulting()
    {
        if (this.TransactionType == SMATransactionType::Item)
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            this.UnitID = inventTable.inventUnitId();

            if (inventTable.ProjCategoryId)
            {
                // Category set on item overrules manual entry and project parameters
                this.ProjCategoryId = inventTable.ProjCategoryId;
            }
            else
            {
                // Category entered manually should be kept otherwise updated from project parameters
                this.ProjCategoryId     = (this.ProjCategoryId != '') ? this.ProjCategoryId  : ProjParameters::find().ItemCategory;
            }

            this.SMAServiceLineMap::setLineProperty();
            this.SMAServiceLineMap::setDefaultDimension();

            InventDim inventDim = inventDim::find(this.InventDimId);
            inventDim.initProductDimensionsFromInventTable(inventTable, inventDim);
            this.SMAServiceLineMap::setInventDimIdFromInventDim(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension dependent fields.
    /// </summary>
    /// <param name = "_updatePrice">Determines if prices should be updated; optional.</param>
    /// <param name = "_itemRequirement">Determines if the service line is an item requirement; optional.</param>
    public void initDimensionsSpecificDefaulting(boolean _updatePrice = true, boolean _itemRequirement = false)
    {
        InventDim inventDim = InventDim::find(this.InventDimId);

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return;
        }

        if (this.TransactionType == SMATransactionType::Item)
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            InventItemOrderSetupType itemOrderSetupType;
            if (_itemRequirement)
            {
                itemOrderSetupType = InventItemOrderSetupType::Sales;
            }
            else
            {
                itemOrderSetupType = InventItemOrderSetupType::Invent;
            }

            InventLocationId locationIdFromUI = inventDim.InventLocationId;

            inventDim.initFromInventTable(inventTable, itemOrderSetupType, inventDim);

            if (locationIdFromUI && inventDim.InventLocationId != locationIdFromUI)
            {
                inventDim.InventLocationId = locationIdFromUI;
            }

            // Set default location only for service order
            if (SysDictField::isFieldMapped(tableStr(SMAServiceLineMap), tableId2Name(this.TableId), fieldStr(SMAServiceLineMap, ServiceOrderId)))
            {
                inventDim = this.SMAServiceLineMap::modifyWMSLocation(inventDim, InventDirection::Issue);
            }

            this.setInventDimIdFromInventDim(inventDim);

            if (_itemRequirement)
            {
                this.Qty = inventTable.salesStandardQty(this.InventDimId);
            }
            else
            {
                this.Qty = inventTable.inventStandardQty(this.InventDimId);
            }

            this.SMAServiceLineMap::fieldModifiedCategoryId(_updatePrice);
            this.SMAServiceLineMap::setLineProperty();
            this.SMAServiceLineMap::setDefaultDimension();

            if (_updatePrice)
            {
                this.ProjCostPriceCost = this.SMAServiceLineMap::projCostPrice();
                this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedLinePropertyId</Name>
				<Source><![CDATA[
    public void fieldModifiedLinePropertyId()
    {
        if (this.TransactionType == SMATransactionType::Hour)
        {
            this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
            this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQty</Name>
				<Source><![CDATA[
    public void fieldModifiedQty(boolean _updatePrice = true)
    {
        InventItemInventSetup   inventItemInventSetup;
        InventItemSalesSetup    inventItemSalesSetup;

        if (this.TransactionType == SMATransactionType::Item)
        {
            if (this.TableId == tableNum(SMAServiceOrderLine) || this.ItemSetupType == SMAItemSetupType::ItemConsumption)
            {
                inventItemInventSetup   = InventItemInventSetup::find(this.ItemId, this.InventDimId);
                this.Qty                = InventTable::calculateOrderQuantity(inventItemInventSetup,
																			  this.InventDimId,
																		      this.Qty,
																		      this.UnitID, 
																			  true);
            }
            else
            {
                inventItemSalesSetup    = InventItemSalesSetup::find(this.ItemId, this.InventDimId);
                this.Qty                = InventTable::calculateOrderQuantity(inventItemSalesSetup,
																			  this.InventDimId,
																			  this.Qty, 
																			  this.UnitID, 
																			  true);
            }
        }

        if (_updatePrice)
        {
            switch (this.TransactionType)
            {
                case SMATransactionType::Hour,
                     SMATransactionType::Item,
                     SMATransactionType::Expense :
                        this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
                        break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedWorker</Name>
				<Source><![CDATA[
    public void fieldModifiedWorker(boolean _updatePrice = true)
    {
        if (_updatePrice)
        {
            switch (this.TransactionType)
            {
                case SMATransactionType::Hour,
                     SMATransactionType::Expense :
                    this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice(this.ProjCostPriceCost);
                    break;

                case SMATransactionType::Fee :
                    this.ProjCostPriceCost  = this.SMAServiceLineMap::projCostPrice();
                    this.ProjSalesPriceCost = this.SMAServiceLineMap::projSalesPrice();
                    break;
            }
        }

        this.SMAServiceLineMap::setDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != SMAServiceLineMap::projCategoryType(this.TransactionType))
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable _projTable)
    {
        ProjInvoiceTable projInvoiceTable = _projTable.projInvoice();

        if (projInvoiceTable.CurrencyId)
        {
            this.CurrencyCode = projInvoiceTable.CurrencyId;
        }
        else
        {
            this.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }

        if (!ProjValProjCategorySetUp::checkProjCategory(this.ProjId, this.ProjCategoryId))
        {
            // Category %2 is not valid for project %1
            throw error(strFmt("@SYS91704", this.ProjId, this.ProjCategoryId));
        }

        this.SMAServiceLineMap::setLineProperty();
        this.SMAServiceLineMap::setDefaultDimension();
        this.SMAServiceLineMap::setTaxGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>SMAServiceLineMap.dimension</c> values that are based on the <c>InventDim</c>
    ///    record buffer values.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer linked to the current <c>SMAServiceLineMap</c> record buffer;
    ///    optional.
    /// </param>
    public void linkInventDim2Dimension(InventDim _inventDim)
    {
        _inventDim.modifiedInventSiteFromParent(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a dimension set that holds the merged combination of the current defaultDimension field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    ///    A first dimension set that should be merged with the current defaultDimension field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    ///    A second dimension set that should be merged with the current defaultDimension field on this table; optional
    /// </param>
    /// <param name="_dimensionMerge">
    ///    A <c>dimensionMerge</c> object previously instantiated using the current
    ///    buffer; optional.
    /// </param>
    /// <returns>
    ///    A dimension set that holds the merged combination of the current defaultDimension field on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that potential linked dimensions are not overwritten when merging. Additional the entity specifier defaulting will be taken
    ///    into consideration
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromCommon(this,
                                                                         this.companyInfo().RecId
                                                                         )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostPrice</Name>
				<Source><![CDATA[
    public ProjCostPriceCost projCostPrice()
    {
        ProjPriceParameters priceParams;
        ProjCostPriceCost costPrice;
        ResourceRecId resource;

        resource = ResourceFacade::findByWorker(this.Worker);

        switch (this.TransactionType)
        {
            case SMATransactionType::Hour:
                priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(this.ProjId, resource, this.ProjCategoryId, this.ProjLinePropertyId, this.priceDate());
                CostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams);
                break;

            case SMATransactionType::Expense :
                priceParams = ProjCostPriceExpense::constructPriceParametersForFindCostPrice(this.ProjId, resource, this.ProjCategoryId, this.priceDate());
                CostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(priceParams);
                break;

            case SMATransactionType::Item :
                costPrice = InventTable::findCostPcsPrice(this.ItemId, this.InventDimId);
                break;

            case SMATransactionType::Fee :
                costPrice = 0;
                break;
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesPrice</Name>
				<Source><![CDATA[
    public ProjSalesPriceCost projSalesPrice(ProjCostPriceCost  _costPrice = 0)
    {
        ProjSalesPriceCost  salesPrice;
        CurrencyCode        costCurrency;
        ResourceRecId       resource;
        ProjPriceParameters priceParams;

        resource = ResourceFacade::findByWorker(this.Worker);

        switch (this.TransactionType)
        {
            case SMATransactionType::Hour :
                priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
					this.ProjId,
                    resource,
                    this.ProjCategoryId,
                    this.ProjLinePropertyId,
                    _costPrice,
                    this.CurrencyCode,
                    this.priceDate());
                [salesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams);
                break;

            case SMATransactionType::Expense :
                if (this.TableId == tableNum(SMAAgreementLine))
                {
                    costCurrency = CompanyInfoHelper::standardCurrency();
                }
                else if (this.TableId == tableNum(SMAServiceOrderLine))
                {
                    costCurrency = this.CurrencyIdCost;
                }

                priceParams = ProjCostSalesPrice::constructPriceParametersForFindCostSalesPrice(
					this.ProjId,
                    resource,
                    this.ProjCategoryId,
                    _costPrice,
                    costCurrency,
                    this.CurrencyCode,
                    this.priceDate());
                [salesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(priceParams);
                break;

            case SMATransactionType::Item :
                salesPrice  = this.SMAServiceLineMap::findProjItemSalesPrice();

                break;

            case SMATransactionType::Fee :
                [salesPrice] = ProjRevenueSalesPrice::findProjRevenueSalesPrice(this.ProjId,
                                                                              resource,
                                                                              this.ProjCategoryId,
                                                                              this.CurrencyCode,
                                                                              this.priceDate());
                break;
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjItemSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the sales price for <c>SMATransactionType</c> item.
    /// </summary>
    /// <returns>A <c>ProjSalesPriceCost</c> value.</returns>
    protected ProjSalesPriceCost findProjItemSalesPrice()
    {           
        PriceDisc priceDisc = this.SMAServiceLineMap::createPriceDiscInstance(this.SMAServiceLineMap::createAndInitPriceDiscParameters());

        if (!priceDisc.findPrice(ProjTable::findPriceGroup(this.ProjId)))
        {
            priceDisc.findItemPrice();
        }

       return priceDisc.price();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters()
    {
        PriceDiscParameters parameters = PriceDiscParameters::construct();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.ItemId);
        parameters.parmInventDim(InventDim::find(this.InventDimId));
        parameters.parmUnitID(this.UnitID);
        parameters.parmPriceDiscDate(this.priceDate());
        parameters.parmQty(this.Qty);
        parameters.parmAccountNum(ProjTable::find(this.ProjId).CustAccount);
        parameters.parmCurrencyCode(this.CurrencyCode);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    public void setDefaultDimension()
    {
        this.DefaultDimension = this.copyDimension(InventTable::find(this.ItemId).DefaultDimension);
        this.DefaultDimension = this.mergeDimension(ProjTable::find(this.ProjId).DefaultDimension);
        if (this.Worker)
        {
            this.DefaultDimension = this.mergeDimension(HcmEmployment::findByWorkerLegalEntity(this.Worker,CompanyInfo::findDataArea(curext()).RecId).DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>InventDimId</c> parameter to the <c>SMAServiceLineMap.inventDimId</c> field and
    ///    applies default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> value that should be applied to the <c>SMAServiceLineMap.InventDimId</c>
    ///    field.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    ///    found <c>InventDimId</c> to the <c>SMAServiceLineMap.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    ///    An <c>InventDim</c> record buffer that should be referenced by the current <c>SMAServiceLineMap</c>
    ///    record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;
        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemTaxGroupId</Name>
				<Source><![CDATA[
    public void setItemTaxGroupId()
    {
        if (this.TransactionType != SMATransactionType::Item || ProjParameters::find().TaxItemGroupMethod == ProjTaxItemGroupMethod::Category)
            this.ProjTaxItemGroup = ProjCategory::find(this.ProjCategoryId).TaxItemGroupId;
        else
            this.ProjTaxItemGroup = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Sales).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    public void setLineProperty()
    {
        this.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroupId</Name>
				<Source><![CDATA[
    private void setTaxGroupId()
    {
        this.ProjTaxGroup = ProjParameters::taxGroupInvoice(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        // Check if transaction type is allowed
        ret = ret && this.SMAServiceLineMap::checkTransTypeAllowed();

        if (ret)
        {
            switch (this.TransactionType)
            {
                case SMATransactionType::Item :
                    if (!this.ItemId)
                    {
                        // Item number must be specified.
                        ret = checkFailed("@SYS25157");
                    }

                    if (!this.UnitID)
                    {
                        // Field %1 must be filled in.
                        ret = checkFailed(strFmt("@SYS26332", "@SYS11959"));
                    }
                break;

                case SMATransactionType::Hour :
                    if (!this.Worker)
                    {
                        ret = checkFailed("@SYS342631");
                    }
                break;

                case SMATransactionType::Fee, SMATransactionType::Expense :
                    ret = this.SMAServiceLineMap::checkCategoryEmplOption();
                break;
            }
        }

        if (ret && this.ProjId)
        {
            if (!this.CurrencyCode)
            {
                // Currency code must be specified.
                ret = checkFailed("@SYS25991");
            }

            if (!this.ProjLinePropertyId)
            {
                // Line property must be specified.
                ret = checkFailed("@SYS78499");
            }
        }

        ret = ret && this.SMAServiceLineMap::checkProjCategoryId() && this.SMAServiceLineMap::checkWorker() && this.SMAServiceLineMap::checkInventDim();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryType</Name>
				<Source><![CDATA[
    public static ProjCategoryType projCategoryType(SMATransactionType _transactionType)
    {
        ProjCategoryType projCategoryType;

        switch (_transactionType)
        {
            case SMATransactionType::Hour:
                projCategoryType    = ProjCategoryType::Hour;
                break;

            case SMATransactionType::Expense:
                projCategoryType    = ProjCategoryType::Cost;
                break;

            case SMATransactionType::Fee:
                projCategoryType    = ProjCategoryType::Revenue;
                break;

            case SMATransactionType::Item:
                projCategoryType    = ProjCategoryType::Item;
                break;

            default :
                projCategoryType    = ProjCategoryType::None;
                break;
        }

        return projCategoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransType</Name>
				<Source><![CDATA[
    public static ProjTransType projTransType(SMATransactionType _transactionType)
    {
        ProjTransType projTransType;

        switch (_transactionType)
        {
            case SMATransactionType::Hour:
                projTransType    = ProjTransType::Hour;
                break;

            case SMATransactionType::Expense:
                projTransType    = ProjTransType::Cost;
                break;

            case SMATransactionType::Fee:
                projTransType    = ProjTransType::Revenue;
                break;

            case SMATransactionType::Item:
                projTransType    = ProjTransType::Item;
                break;

            default :
                projTransType    = ProjTransType::None;
                break;
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLineWorkerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the selection and validation of workers which comply to the most common requirements for service lines.
    /// </summary>
    /// <returns>
    /// An instance of the <c>HcmWorkerLookup</c> class.
    /// </returns>
    public static HcmWorkerLookup serviceLineWorkerLookup()
    {
        boolean includeTerminated;

        includeTerminated = ProjParameters::find().ShowInactiveEmployees;
        return HcmWorkerLookup::newCustomOptions(
            true,   //  includeEmployees    = Yes
            true,  //  includeContractors  = Yes
            true,   //  includeActive       = Yes
            false,   //  includePending      = No
            includeTerminated,     //  includeTerminated
            true,   //  includeOnlyCurrentLegalEntity = Yes
            true,   //  lockWorkerTypeFilters         = Yes (can't change)
            !includeTerminated,   //  lockWorkerStatusFilters = can change if we want to allow terminated
            true);  //  lockLegalEntityFilters        = Yes (can't change)
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies an <c>InventDim</c> record with WMS values.
    /// </summary>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record to modify.
    /// </param>
    /// <param name="_defaultInventDirection">
    ///    Indicates whether it is per default an issue or a receipt transaction.
    /// </param>
    /// <remarks>
    ///    When changing the warehouse on a service sales order line, the location is updated with the
    ///    default WMS values for items where the attached dimension group has the location set to active.
    /// </remarks>
    internal InventDim modifyWMSLocation(
        InventDim            _inventDim,
        InventDirection      _defaultInventDirection)
    {        
        if (!this.ItemId                                                             ||
            !_inventDim.InventSiteId                                                 ||
            !_inventDim.InventLocationId                                             ||
            InventLocation::find(_inventDim.InventLocationId).WHSEnabled             || // Don't default WMSLocation for WHS controlled items
            !EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, wmsLocationId)))
        {
            return _inventDim;
        }

        // validate that the already specified location actually exists
        if (!WMSLocation::exist(_inventDim.wmsLocationId, _inventDim.InventLocationId))
        {
            _inventDim.wmsLocationId = ''; // clear the illegal location
            _inventDim.wmsPalletId   = '';
        }

        WMSLocation wmsLocation = WMSLocation::defaultItemLocation(this.ItemId, _defaultInventDirection, InventDim::findOrCreate(_inventDim));
        if (wmsLocation)
        {
            _inventDim.InventLocationId = wmsLocation.InventLocationId;
            _inventDim.wmsLocationId    = wmsLocation.wmsLocationId;
        }

        return _inventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS345372</DeveloperDocumentation>
	<Label>@SYS83081</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ActivityNumber</Name>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<StringSize>50</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AgreementId</Name>
			<ExtendedDataType>SMAAgreementId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>AgreementLineId</Name>
			<ExtendedDataType>SMAAgreementLineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyIdCost</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS87716</Label>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DateCalculated</Name>
			<ExtendedDataType>SMADateCalculated</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DateExecution</Name>
			<ExtendedDataType>SMADateExecution</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DescriptionService</Name>
			<ExtendedDataType>SMADescription</ExtendedDataType>
			<StringSize>1000</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Dimension</Name>
			<ExtendedDataType>Dimension</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>IntervalId</Name>
			<ExtendedDataType>SMAIntervalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ItemSetupType</Name>
			<EnumType>SMAItemSetupType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>LineNum</Name>
			<ExtendedDataType>SMALineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Origin</Name>
			<EnumType>SMAServiceOrderOrigin</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjCategoryId</Name>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ProjCostPriceCost</Name>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjJournalId</Name>
			<ExtendedDataType>JournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ProjJournalLineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjLinePropertyId</Name>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>ProjSalesPriceCost</Name>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjTaxGroup</Name>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProjTaxItemGroup</Name>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ServiceObjectId</Name>
			<ExtendedDataType>SMAServiceObjectId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ServiceOrderId</Name>
			<ExtendedDataType>SMAServiceOrderId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ServiceOrderStatus</Name>
			<EnumType>SMAServiceOrderStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ServiceTaskId</Name>
			<ExtendedDataType>SMAServiceTaskId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldTime">
			<Name>ServiceTimeEndBefore</Name>
			<ExtendedDataType>SMAEndBeforeTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldTime">
			<Name>ServiceTimeStartAfter</Name>
			<ExtendedDataType>SMAStartAfter</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>StartDate</Name>
			<ExtendedDataType>StartDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Stopped</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS11058</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TimeAgreementId</Name>
			<ExtendedDataType>SMATimeAgreementId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldTime">
			<Name>TimeSheetEndTime</Name>
			<ExtendedDataType>SchedToTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldTime">
			<Name>TimeSheetStartTime</Name>
			<ExtendedDataType>SchedFromTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransactionType</Name>
			<EnumType>SMATransactionType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TransTxt</Name>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitID</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>Worker</Name>
			<ExtendedDataType>SMAWorker</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>