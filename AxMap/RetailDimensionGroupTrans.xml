<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDimensionGroupTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDimensionGroupTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyVariantGroupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies dimension group variants from one group to another.
    /// </summary>
    /// <param name="_sourceGroupId">
    /// Id of the source group.
    /// </param>
    /// <param name="_targetGroupId">
    /// Id of the target group.
    /// </param>
    public void copyVariantGroupTrans(RetailDimensionGroupId _sourceGroupId, RetailDimensionGroupId _targetGroupId)
    {
        RetailDimensionGroupTrans               sourceGroupTransMap;
        RetailDimensionGroupTransTranslation    sourceTranslationMap, targetTranslationMap;
        RefRecId                                dimensionRecId;

        // Assign map variable to specific table
        sourceGroupTransMap     = this;
        sourceTranslationMap    = this.RetailDimensionGroupTrans::getTranslationType();
        targetTranslationMap    = sourceTranslationMap;

        if (_sourceGroupId && _targetGroupId)
        {
            ttsBegin;
            while select sourceGroupTransMap
                    where sourceGroupTransMap.DimensionGroup == _sourceGroupId
            {
                // Store the RecId as it gets overwriten in the code below since this and sourceGroupTransMap point to the same buffer.
                dimensionRecId = sourceGroupTransMap.RecId;
                // Replace reference to parent group, ...
                this.DimensionGroup = _targetGroupId;
                // ... and insert the record.
                this.insert();

                while select sourceTranslationMap
                        where sourceTranslationMap.RetailDimensionGroupTrans == dimensionRecId
                {
                    targetTranslationMap.data(sourceTranslationMap);
                    targetTranslationMap.RetailDimensionGroupTrans = this.RecId;
                    targetTranslationMap.insert();
                }
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the table mapped to <c>RetailDimensionsGroupTrans</c> map.
    /// </summary>
    /// <param name="_groupId">
    /// The dimension group Id of the record to find.
    /// </param>
    /// <param name="_dimension">
    /// The dimension to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the table mapped to <c>RetailDimensionsGroupTrans</c> map; otherwise, an empty record.
    /// </returns>
    public RetailDimensionGroupTrans find(RetailDimensionGroupId _groupId,
                                          Name    _dimension,
                                          boolean _forUpdate = false)
    {
        RetailDimensionGroupTrans  dimGroupTrans = this;

        if (_groupId && _dimension)
        {
            dimGroupTrans.selectForUpdate(_forUpdate);

            select firstonly dimGroupTrans
                where   dimGroupTrans.DimensionGroup == _groupId
                &&      dimGroupTrans.Dimension == _dimension;
        }

        return dimGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranslationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the table storing translations for the given dimension.
    /// </summary>
    /// <returns>
    /// Empty record of the proper table.
    /// </returns>
    private RetailDimensionGroupTransTranslation getTranslationType()
    {
        RetailColorGroupTransTranslation    colorTranslation;
        RetailSizeGroupTransTranslation     sizeTranslation;
        RetailStyleGroupTransTranslation    styleTranslation;

        switch (this.TableId)
        {
            case tableNum(RetailColorGroupTrans):
                return colorTranslation;
            case tableNum(RetailSizeGroupTrans):
                return sizeTranslation;
            case tableNum(RetailStyleGroupTrans):
                return styleTranslation;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@RET490143</DeveloperDocumentation>
	<Label>@RET490142</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Dimension</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DimensionGroup</Name>
			<ExtendedDataType>RetailDimensionGroupId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>noInBarcode</Name>
			<ExtendedDataType>RetailNoInBarcode</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>