<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OfficialsMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class OfficialsMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if combination of values is correct.
    /// </summary>
    /// <param name = "_officials">Official map cursor to check.</param>
    /// <param name = "_target">Type of validation</param>
    /// <returns>true if combination is correct; otherwise false.</returns>
    public static boolean checkRelation(OfficialsMap _officials,
                                        OffTableRelationsCheck_RU _target)
    {
        boolean ret = true;

        boolean custVend = _target == OffTableRelationsCheck_RU::All ||
                           _target == OffTableRelationsCheck_RU::CustVend;

        if (custVend                             &&
            _officials.CustVendCode != OffTableAll_RU::All &&
            ! _officials.CustVendRelation)
        {
            ret = checkFailed("@GLS102078") && ret;
        }

        boolean invLocation = _target == OffTableRelationsCheck_RU::All ||
                              _target == OffTableRelationsCheck_RU::InventLocation;

        if (invLocation                                             &&
            _officials.InvRelationType != OffInvRelationType_AllTable_RU::All &&
            ! _officials.InvLocation)
        {
            ret = checkFailed("@GLS107012") && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOurGuy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if official person is employee of company.
    /// </summary>
    /// <param name = "_officials">Official map cusrsor to check.</param>
    /// <returns>true if the person is employee of company; otherwise false.</returns>
    public static OffIsOurGuy_RU isOurGuy(OfficialsMap _officials)
    {
        boolean ret = false;

        switch (_officials.ReportType)
        {
            case OffReportType_RU::General                   :
                ret = (_officials.Position == OffPosition_RU::Director) ||
                      (_officials.Position == OffPosition_RU::Accountant);
                break;

            case OffReportType_RU::SalesInvoice              :
            case OffReportType_RU::PurchInvoiceCreditNote    :
                ret = (_officials.Position != OffPosition_RU::Acceptor)       &&
                      (_officials.Position != OffPosition_RU::Taker           &&
                       _officials.Position != OffPosition_RU::TransRespVend   &&
                       _officials.Position != OffPosition_RU::TransRespCarrier &&
                       _officials.Position != OffPosition_RU::TransRespCust);
                break;

            case OffReportType_RU::PurchInvoice              :
            case OffReportType_RU::SalesInvoiceCreditNote    :
                ret = (_officials.Position == OffPosition_RU::Acceptor) ||
                      (_officials.Position == OffPosition_RU::Taker     ||
                       _officials.Position == OffPosition_RU::TransResp);
                break;

            case OffReportType_RU::CustFacture               :
            case OffReportType_RU::VendFactureCreditNote     :
            case OffReportType_RU::TaxCorrectionFactureCust  :
            case OffReportType_RU::AdvanceReport             :
            case OffReportType_RU::CashBookPage              :
            case OffReportType_RU::CashSlip                  :
            case OffReportType_RU::CashCountStatement        :
            case OffReportType_RU::InventTORG16              :
            case OffReportType_RU::InventTORG13              :
            case OffReportType_RU::InventM11                 :
            case OffReportType_RU::InventINV19               :
            case OffReportType_RU::ProdM8                    :
            case OffReportType_RU::InventINV3                :
            case OffReportType_RU::InventINV6                :
            case OffReportType_RU::InventINV5                :
            case OffReportType_RU::RPayTaxList               :
                ret = true;
                break;

            case OffReportType_RU::VendFacture               :
            case OffReportType_RU::CustFactureCreditNote     :
            case OffReportType_RU::TaxCorrectionFactureVend  :
            case OffReportType_RU::EmplAdvanceReportFacture :
                ret = false;
                break;

            case OffReportType_RU::SalesInvoice4Paym         :
                ret = (_officials.Position != OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::PurchInvoice4Paym         :
                ret = (_officials.Position == OffPosition_RU::Responsible);
                break;

            case OffReportType_RU::SalesInvoiceM15           :
                ret = (_officials.Position == OffPosition_RU::Director    ||
                       _officials.Position == OffPosition_RU::Supplier    ||
                       _officials.Position == OffPosition_RU::Responsible || // facture update by SalesEditLines form workaround
                       _officials.Position == OffPosition_RU::Accountant  ||
                       _officials.Position == OffPosition_RU::TransResp);
                break;

            case OffReportType_RU::PurchM4M7                 :
                ret = (_officials.Position == OffPosition_RU::Director    ||
                       _officials.Position == OffPosition_RU::Accountant  ||
                       _officials.Position == OffPosition_RU::Acceptor    ||
                       _officials.Position == OffPosition_RU::Chairman    ||
                       _officials.Position == OffPosition_RU::Member);
                break;

            case OffReportType_RU::TransferInvoiceM15           :
                ret = (_officials.Position == OffPosition_RU::Director      ||
                       _officials.Position == OffPosition_RU::Accountant    ||
                       _officials.Position == OffPosition_RU::TransResp     ||
                       _officials.Position == OffPosition_RU::TransRespCust ||
                       _officials.CustVendCode == OffTableAll_RU::All);
                break;

            case OffReportType_RU::RDeferrals                :
                ret = (_officials.Position == OffPosition_RU::Chairman    ||
                       _officials.Position == OffPosition_RU::AccountantJ ||
                       _officials.Position == OffPosition_RU::InCharge    ||
                       _officials.Position == OffPosition_RU::Member);
                break;

            case OffReportType_RU::RPayCivilContract :
                ret = true;
                break;

            case OffReportType_RU::RTax25Inv17              :
                ret = (_officials.Position == OffPosition_RU::Chairman    ||
                       _officials.Position == OffPosition_RU::Member      ||
                       _officials.Position == OffPosition_RU::AccountantJ);
                break;

            case OffReportType_RU::CommissionAgentReport     :
                ret = (_officials.Position == OffPosition_RU::Filler);
                break;

            case OffReportType_RU::RAssetsINV1              :
            case OffReportType_RU::RAssetsINV1a             :
            case OffReportType_RU::RAssetMB8                :
                ret = (_officials.Position == OffPosition_RU::Chairman    ||
                       _officials.Position == OffPosition_RU::Member);
                break;
        }

        return  ret ? OffIsOurGuy_RU::Yes : OffIsOurGuy_RU::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameChanged</Name>
				<Source><![CDATA[
    public boolean nameChanged(NoYes _cust = NoYes::Yes, NoYes _checkOurGuy = NoYes::Yes)
    {
        if (_checkOurGuy && OfficialsMap::isOurGuy(this))
        {
            this.Title = DirPartyTable::findByName(this.Name, DirPartyType::Person).emplTitle_RU();
        }
        else
        {
            ContactPerson contactPerson;
            DirPartyTable partyTable;

            if (_cust)
            {
                CustTable     custTable;

                select firstonly Title from contactPerson
                join RecId from partyTable
                    where partyTable.RecId     == contactPerson.Party
                      &&  partyTable.Name      == this.Name
                exists join TableId from custTable
                    where custTable.Party      == contactPerson.ContactForParty
                      && (this.CustVendCode    == OffTableAll_RU::All
                      ||  custTable.AccountNum == this.CustVendRelation);
            }
            else
            {
                VendTable     vendTable;

                select firstonly Title from contactPerson
                join RecId from partyTable
                    where partyTable.RecId     == contactPerson.Party
                       && partyTable.Name      == this.Name
                exists join vendTable
                    where vendTable.Party      == contactPerson.ContactForParty
                      && (this.CustVendCode    == OffTableAll_RU::All
                      ||  vendTable.AccountNum == this.CustVendRelation);
            }

            this.Title = contactPerson.Title;
        }

        return this.Title != '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Officials:MessageDeveloper_OfficialsMap</DeveloperDocumentation>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>CustVendCode</Name>
			<EnumType>OffTableAll_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CustVendRelation</Name>
			<ExtendedDataType>OffCustVendRel_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>InvRelationType</Name>
			<EnumType>OffInvRelationType_AllTable_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InvLocation</Name>
			<ExtendedDataType>OffInventLocationId_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Name</Name>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Position</Name>
			<EnumType>OffPosition_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ReportType</Name>
			<EnumType>OffReportType_RU</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Title</Name>
			<ExtendedDataType>OffTitleId_RU</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>OfficialsTable_RU</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustVendCode</MapField>
					<MapFieldTo>CustVendCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendRelation</MapField>
					<MapFieldTo>CustVendRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvRelationType</MapField>
					<MapFieldTo>InvRelationType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvLocation</MapField>
					<MapFieldTo>InvLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Position</MapField>
					<MapFieldTo>Position</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportType</MapField>
					<MapFieldTo>ReportType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Title</MapField>
					<MapFieldTo>Title</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>OfficialsTrans_RU</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustVendCode</MapField>
					<MapFieldTo>CustVendCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendRelation</MapField>
					<MapFieldTo>CustVendRelation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvRelationType</MapField>
					<MapFieldTo>InvRelationType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvLocation</MapField>
					<MapFieldTo>InvLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Position</MapField>
					<MapFieldTo>Position</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportType</MapField>
					<MapFieldTo>ReportType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Title</MapField>
					<MapFieldTo>Title</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>