<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCustVendPaymModeBankAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankCustVendPaymModeBankAccounts extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findAccount</Name>
				<Source><![CDATA[
    public static container findAccount(Common _common)
    {
        LedgerJournalACType                     foundAccountType;
        LedgerJournalAC                         foundAccount;
        BankCustVendPaymModeBankAccounts        custVendPaymModeBankAccounts;
        CustVendTrans                           custVendTrans;
        LedgerJournalTrans                      ledgerJournalTrans;
        ModuleCustVend                          moduleCustVend;
        PaymMode                                paymMode;
        CurrencyCode                            currencyCode;
        DimensionDefault                        dimensionDefault;
        boolean                                 otherLJT;

        void getLedgerJournalTransValues()
        {
            paymMode            = ledgerJournalTrans.PaymMode;
            currencyCode        = ledgerJournalTrans.CurrencyCode;
            dimensionDefault    = ledgerJournalTrans.DefaultDimension;
        }

        void getCustVendTransValues()
        {
            paymMode            = custVendTrans.PaymMode;
            currencyCode        = custVendTrans.CurrencyCode;
            dimensionDefault    = custVendTrans.DefaultDimension;
        }

        switch (_common.TableId)
        {
            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans = _common;
                switch (ledgerJournalTrans.ledgerJournalTable().JournalType)
                {
                    case LedgerJournalType::Payment:  //Vendor payment
                        moduleCustVend = ModuleCustVend::Vend;
                        getLedgerJournalTransValues();
                        break;
                    case LedgerJournalType::CustPayment:  //Customer payment
                        moduleCustVend = ModuleCustVend::Cust;
                        getLedgerJournalTransValues();
                        break;
                    case LedgerJournalType::Approval,
                        LedgerJournalType::PurchaseLedger,
                        LedgerJournalType::VendInvoicePool,
                        LedgerJournalType::VendInvoiceRegister,
                        LedgerJournalType::VendPaymRemittance,
                        LedgerJournalType::VendPromissoryNoteDraw,
                        LedgerJournalType::VendPromissoryNoteRedraw,
                        LedgerJournalType::VendPromissoryNoteSettle :
                        moduleCustVend = ModuleCustVend::Vend;
                        getLedgerJournalTransValues();
                        otherLJT = true;
                        break;
                    case LedgerJournalType::CustBillOfExchangeAccept,
                        LedgerJournalType::CustBillOfExchangeDraw,
                        LedgerJournalType::CustBillOfExchangeProtest,
                        LedgerJournalType::CustBillOfExchangeRedraw,
                        LedgerJournalType::CustBillOfExchangeSettle,
                        LedgerJournalType::CustPaymRemittance :
                        moduleCustVend = ModuleCustVend::Cust;
                        getLedgerJournalTransValues();
                        otherLJT = true;
                        break;
                    default :
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
                break;
            case tablenum(CustTrans):
                moduleCustVend = ModuleCustVend::Cust;
                custVendTrans = _common;
                getCustVendTransValues();
                break;
            case tablenum(VendTrans):
                moduleCustVend = ModuleCustVend::Vend;
                custVendTrans = _common;
                getCustVendTransValues();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
                //break;
        }

        if (paymMode)
        {
            switch (moduleCustVend)
            {
                case ModuleCustVend::Vend:
                    if (otherLJT)
                    {
                        foundAccount     = LedgerDimensionFacade::getMainAccountFromLedgerDimension(VendPaymModeTable::find(paymMode).offsetLedgerDimension()).MainAccountId;
                        foundAccountType = VendPaymModeTable::find(paymMode).paymACType();
                    }
                    else
                    {
                        custVendPaymModeBankAccounts = BankVendPaymModeBankAccounts::findByPaymModeDimCurrency(paymMode,dimensionDefault,currencyCode);
                        if (custVendPaymModeBankAccounts.RecId)
                        {
                            foundAccount     = custVendPaymModeBankAccounts.BankAccountID;
                            foundAccountType = LedgerJournalACType::Bank;
                        }
                        else
                        {
                            foundAccount     = LedgerDimensionFacade::getMainAccountFromLedgerDimension(VendPaymModeTable::find(paymMode).offsetLedgerDimension()).MainAccountId;
                            foundAccountType = VendPaymModeTable::find(paymMode).paymACType();
                        }
                    }
                    break;
                case ModuleCustVend::Cust:
                    if (otherLJT)
                    {
                        foundAccount     = LedgerDimensionFacade::getMainAccountFromLedgerDimension(CustPaymModeTable::find(paymMode).offsetLedgerDimension()).MainAccountId;
                        foundAccountType = CustPaymModeTable::find(paymMode).paymACType();
                    }
                    else
                    {
                        custVendPaymModeBankAccounts = BankCustPaymModeBankAccounts::findByPaymModeCurrency(paymMode,dimensionDefault,currencyCode);
                        if (custVendPaymModeBankAccounts.RecId)
                        {
                            foundAccount     = custVendPaymModeBankAccounts.BankAccountID;
                            foundAccountType = LedgerJournalACType::Bank;
                        }
                        else
                        {
                            foundAccount     = LedgerDimensionFacade::getMainAccountFromLedgerDimension(CustPaymModeTable::find(paymMode).offsetLedgerDimension()).MainAccountId;
                            foundAccountType = CustPaymModeTable::find(paymMode).paymACType();
                        }
                    }
                    break;
                default:
                    break;
            }
        }

        if (!foundAccount)
        {
            foundAccountType = LedgerJournalACType::Ledger;
            foundAccount     = '';
        }

        return [foundAccountType, foundAccount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS328666</DeveloperDocumentation>
	<Label>@SYS119762</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankAccountID</Name>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<StringSize>3</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>