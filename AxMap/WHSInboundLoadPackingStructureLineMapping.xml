<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundLoadPackingStructureLineMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInboundLoadPackingStructureLineMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapOrderNumber</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void mapOrderNumber(WHSASNItem _asnItem, boolean _isModuleMapped)
    {
        if (_asnItem.Module == WHSModule::Purch)
        {
            _asnItem.PurchId = this.WHSInboundLoadPackingStructureLineMapping::getOrderNumber(_isModuleMapped, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            WHSASNItem asnItem;
            switch (_dataSourceCtx.name())
            {
                // Assumption here is that the data source names on the mapped entities are the same as the corresponding table names.
                case tableStr(WHSASNItem):
                    boolean isModuleMapped = (SysDictField::findMappedFieldId(tableNum(WHSInboundLoadPackingStructureLineMapping), fieldNum(WHSInboundLoadPackingStructureLineMapping, Module), this.TableId) != 0);
                    InventBatch::findOrCreate(this.ItemBatchNumber, this.ItemNumber, this.ItemBatchExpirationDate);
                    InventSerial::findOrCreate(this.ItemSerialNumber, this.ItemNumber);

                    WHSReceiptOrderLine referencedOrderLine = this.WHSInboundLoadPackingStructureLineMapping::findReferencedOrderLine(isModuleMapped);
                    WHSLoadLine loadLine = this.WHSInboundLoadPackingStructureLineMapping::createOrUpdateLoadLine(referencedOrderLine, isModuleMapped);

                    // Update entity mapped fields....
                    WHSASNItem itemRecordBuffer = _dataSourceCtx.getBuffer();
                    itemRecordBuffer.InventDimId = this.InventInventoryDimensionEntityFieldsMapping::getMergedInventDimId(referencedOrderLine.inventDim());
                    itemRecordBuffer.LoadId = loadLine.LoadId;
                    itemRecordBuffer.InventTransId = loadLine.InventTransId;
                    itemRecordBuffer.LoadLineRefRecId = loadLine.RecId;
                    itemRecordBuffer.UOM = this.UnitSymbol ? this.UnitSymbol : WHSCatchWeightHelper::inventHandlingUnitId(this.ItemNumber);

                    if (!isModuleMapped)
                    {
                        itemRecordBuffer.Module = WHSModule::Purch;
                    }

                    this.WHSInboundLoadPackingStructureLineMapping::mapOrderNumber(itemRecordBuffer, isModuleMapped);

                    if (!itemRecordBuffer.validateWrite())
                    {
                        throw error("@SYS23020");
                    }
                    break;

                case tableStr(InventDim):
                    asnItem = _entityCtx.getRuntimeContextByName(tableStr(WHSASNItem)).getBuffer();
                    _dataSourceCtx.setBuffer(InventDim::find(asnItem.InventDimId));
                    _dataSourceCtx.setDataSaved(true);
                    break;

                case tableStr(WHSUOMStructure):
                    asnItem = _entityCtx.getRuntimeContextByName(tableStr(WHSASNItem)).getBuffer();
                    _dataSourceCtx.setBuffer(WHSUOMStructure::find(asnItem.LicensePlateId, asnItem.Module, asnItem.ShipmentId));
                    _dataSourceCtx.setDataSaved(true);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingStructureTotals</Name>
				<Source><![CDATA[
    public void updatePackingStructureTotals(WHSASNLicensePlateId _licensePlateId)
    {
        boolean isModuleMapped = (SysDictField::findMappedFieldId(tableNum(WHSInboundLoadPackingStructureLineMapping), fieldNum(WHSInboundLoadPackingStructureLineMapping, Module), this.TableId) != 0);
        WHSModule module = this.WHSInboundLoadPackingStructureLineMapping::getModule(isModuleMapped);

        WHSUOMStructure currentUOMStructure = WHSUOMStructure::find(_licensePlateId, module, this.InboundShipmentId, true);
        WHSPackingStructureForm packingStructureHelper = new WHSPackingStructureForm();
        packingStructureHelper.updateUOMStructure(currentUOMStructure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxOverdeliveryQty</Name>
				<Source><![CDATA[
    private ProductQuantity getMaxOverdeliveryQty(WHSReceiptOrderLine _receiptLine)
    {
        ProductQuantity orderQuantity;
        if (PdsGlobal::pdsIsCWItem(_receiptLine.ItemId))
        {
            orderQuantity = _receiptLine.PdsCWQty;
        }
        else
        {
            orderQuantity = _receiptLine.Qty;
        }
        
        return (orderQuantity * (1 + _receiptLine.OverDeliveryPct / 100)) - orderQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine createOrUpdateLoadLine(WHSReceiptOrderLine _receiptLine, boolean _isModuleMapped)
    {
        Num internalOrderNumber = this.WHSInboundLoadPackingStructureLineMapping::getOrderNumber(_isModuleMapped, true);
        Num externalOrderNumber = this.WHSInboundLoadPackingStructureLineMapping::getOrderNumber(_isModuleMapped, false);

        if (this.WHSInboundLoadPackingStructureLineMapping::qtyLeftToLoad(_receiptLine, _isModuleMapped) + this.WHSInboundLoadPackingStructureLineMapping::getMaxOverdeliveryQty(_receiptLine) < this.Quantity)
        {
            throw error(strFmt("@WAX:Entity_ErrorMessage_QtyLeftToLoadExceeded", externalOrderNumber, _receiptLine.ItemId));
        }

        WHSLoadId loadId = WHSShipmentTable::find(this.InboundShipmentId).LoadId;
        WHSPackingQty packingQty = WHSInventTable::getDefaultPackingQty(_receiptLine.ItemId, _receiptLine.InventDimId);

        WHSLoadLine existingLoadLine;
        select firstonly forupdate existingLoadLine
            where existingLoadLine.LoadId           == loadId
                && existingLoadLine.InventTransId   == _receiptLine.InventTransId
                && existingLoadLine.InventDimId     == _receiptLine.InventDimId
                && existingLoadLine.PackingQty      == packingQty;

        if (existingLoadLine)
        {
            existingLoadLine.Qty += this.Quantity;
            existingLoadLine.update();

            return existingLoadLine;
        }
        else
        {
            WHSLoadLine createdLoadLine;
            createdLoadLine.LoadId = loadId;
            createdLoadLine.InventTransId = _receiptLine.InventTransId;
            createdLoadLine.ItemId = _receiptLine.ItemId;
            createdLoadLine.UOM = this.UnitSymbol != '' ? this.UnitSymbol : WHSCatchWeightHelper::inventHandlingUnitId(createdLoadLine.ItemId);
            createdLoadLine.Qty = this.Quantity;
            createdLoadLine.OrderNum = internalOrderNumber;
            createdLoadLine.ShipmentId = this.InboundShipmentId;
            createdLoadLine.InventQty = WHSCatchWeightHelper::convertInventQuantity(createdLoadLine.ItemId,
                                                                               createdLoadLine.UOM, 
                                                                               createdLoadLine.Qty, 
                                                                               _receiptLine.InventDimId);
            createdLoadLine.InventDimId = _receiptLine.InventDimId;
            createdLoadLine.InventTransType = this.WHSInboundLoadPackingStructureLineMapping::transTypeFromModule(_isModuleMapped);
            createdLoadLine.LoadDirection = WHSLoadDirection::Inbound;
            createdLoadLine.insert();

            return createdLoadLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTypeFromModule</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal InventTransType transTypeFromModule(boolean _isModuleMapped)
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSQtyLeftToLoad qtyLeftToLoad(WHSReceiptOrderLine _receiptLine, boolean _isModuleMapped)
    {
        if (this.WHSInboundLoadPackingStructureLineMapping::getModule(_isModuleMapped) == WHSModule::Purch)
        {
            return WHSPurchLine::find(_receiptLine.InventTransId).purchQtyLeftToLoad();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    internal WHSModule getModule(boolean _isModuleMapped)
    {
        if (_isModuleMapped)
        {
            return this.Module;
        }

        return WHSModule::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSReceiptOrderLine findOrderLine(boolean _isModuleMapped)
    {
        WHSModule module = this.WHSInboundLoadPackingStructureLineMapping::getModule(_isModuleMapped);

        if (module == WHSModule::Purch)
        {
            return this.WHSInboundLoadPackingStructureLineMapping::findReferencedPurchaseLine(_isModuleMapped);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReferencedPurchaseLine</Name>
				<Source><![CDATA[
    private PurchLine findReferencedPurchaseLine(boolean _isModuleMapped)
    {
        PurchId purchId;
        TradeLineNumber purchLineNumber;
        PurchLine purchLine;

        if (_isModuleMapped)
        {
            purchId = this.OrderNumber;
            purchLineNumber = this.OrderLineNumber;
        }
        else
        {
            purchId = this.PurchaseOrderNumber;
            purchLineNumber = this.PurchaseOrderLineNumber;
        }
            
        if (purchId && purchLineNumber)
        {
            purchLine = PurchLine::find(purchId, purchLineNumber);

            this.WHSInboundLoadPackingStructureLineMapping::validatePurchaseLineItem(purchLine);
        }
        else
        {
            select count(RecId) from purchLine
                    where purchLine.PurchId == purchId
                        && purchLine.ItemId == this.ItemNumber
                        && !purchLine.IsDeleted;

            if (purchLine.RecId == 1)
            {
                // Single purchase line is located by PurchId and ItemId combination
                select firstonly purchLine
                        where purchLine.PurchId == purchId
                            && purchLine.ItemId == this.ItemNumber
                            && !purchLine.IsDeleted;
            }
            else if (purchLine.RecId > 1)
            {
                // Multiple purchase lines sharing the same combination of PurchId and ItemId, in which case we assume the lines have different product dimensions
                inventDim inboundASNLineResolvedInventDim = this.InventInventoryDimensionEntityFieldsMapping::resolveInventDim();
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inboundASNLineResolvedInventDim);
                inventDimParm.clearTrackingDimensions();

                WHSLoadLine loadLine;
                InventDim inventDim;
                WHSLoadId loadId = WHSShipmentTable::find(this.InboundShipmentId).LoadId;

                select count(RecId) from purchLine
                        where purchLine.PurchId == purchId
                            && purchLine.ItemId == this.ItemNumber
                            && !purchLine.IsDeleted
                        #inventDimJoin(purchLine.InventDimId, inventDim, inboundASNLineResolvedInventDim, inventDimParm)
                notExists join loadLine
                            where loadLine.InventTransId == purchLine.InventTransId
                                && loadLine.LoadId == loadId;

                if (purchLine.RecId == 1)
                {
                    select firstonly purchLine
                            where purchLine.PurchId == purchId
                                && purchLine.ItemId == this.ItemNumber
                                && !purchLine.IsDeleted
                            #inventDimJoin(purchLine.InventDimId, inventDim, inboundASNLineResolvedInventDim, inventDimParm)
                    notExists join loadLine
                                where loadLine.InventTransId == purchLine.InventTransId
                                    && loadLine.LoadId == loadId;
                }
                else if (purchLine.RecId > 1)
                {
                    throw error("@WAX:Entity_Error_MultipleLinesWithSameProductFound");
                }
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReferencedOrderLine</Name>
				<Source><![CDATA[
    private WHSReceiptOrderLine findReferencedOrderLine(boolean _isModuleMapped)
    {
        WHSReceiptOrderLine result = this.WHSInboundLoadPackingStructureLineMapping::findOrderLine(_isModuleMapped);

        if (result.InventTransId == '')
        {
            throw error(strFmt("@SYS15067", this.WHSInboundLoadPackingStructureLineMapping::getOrderNumber(_isModuleMapped, false)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchaseLineItem</Name>
				<Source><![CDATA[
    private void validatePurchaseLineItem(PurchLine _purchLine)
    {
        if (_purchLine.InventTransId
		    && _purchLine.ItemId != this.ItemNumber)
        {
            throw error(strFmt("@WAX:ItemDoesNotCorrespondToPurchLine", this.ItemNumber, _purchLine.LineNumber, _purchLine.PurchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderNumber</Name>
				<Source><![CDATA[
    protected Num getOrderNumber(boolean _isModuleMapped, boolean _isInternalNumber)
    {
        return _isModuleMapped ? this.OrderNumber : this.PurchaseOrderNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Map_DevDoc_InboundLoadPackingStructureLineMapping</DeveloperDocumentation>
	<Label>@WAX:Entity_Title_InboundLoadPackingStructureLines</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InboundShipmentId</TitleField1>
	<TitleField2>PackingStructureLicensePlateNumber</TitleField2>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InboundShipmentId</Name>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PackingStructureLicensePlateNumber</Name>
			<ExtendedDataType>WHSASNLicensePlateId</ExtendedDataType>
			<StringSize>25</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PurchaseOrderNumber</Name>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PurchaseOrderLineNumber</Name>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemNumber</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitSymbol</Name>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductColorId</Name>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductSizeId</Name>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductConfigurationId</Name>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductStyleId</Name>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ProductVersionId</Name>
			<ExtendedDataType>EcoResItemVersionName</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemBatchNumber</Name>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>ItemBatchExpirationDate</Name>
			<ExtendedDataType>InventBatchExpDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemSerialNumber</Name>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Module</Name>
			<EnumType>WHSModule</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderNumber</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>OrderLineNumber</Name>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventInventoryDimensionEntityFieldsMapping</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InboundShipmentId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackingStructureLicensePlateNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitSymbol</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Quantity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductColorId</MapField>
					<MapFieldTo>InventColorId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductSizeId</MapField>
					<MapFieldTo>InventSizeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductConfigurationId</MapField>
					<MapFieldTo>configId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductStyleId</MapField>
					<MapFieldTo>inventStyleId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductVersionId</MapField>
					<MapFieldTo>inventVersionId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBatchNumber</MapField>
					<MapFieldTo>InventBatchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBatchExpirationDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemSerialNumber</MapField>
					<MapFieldTo>InventSerialId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseOrderLineNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Module</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderNumber</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderLineNumber</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>