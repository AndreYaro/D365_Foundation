<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemPriceMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayBOMId</Name>
				<Source><![CDATA[
    display BOMId displayBOMId()
    {
        BOMCalcTable    bomCalcTable;
        BOMId           bomId;

        if (this.PriceCalcId)
        {
            bomCalcTable = BOMCalcTable::find(this.PriceCalcId);
            bomId        = bomCalcTable.bomId;
        }
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBOMLog</Name>
				<Source><![CDATA[
        NoYes displayBOMLog()
    {
        BOMCalcTable    bomCalcTable;
        NoYes           ret                 = NoYes::No;

        if (this.PriceCalcId)
        {
            bomCalcTable = BOMCalcTable::find(this.PriceCalcId);
            ret          = bomCalcTable.isInfolog();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculated</Name>
				<Source><![CDATA[
        NoYes displayCalculated()
    {
        return this.PriceCalcId ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostCalculationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost calculation method used for the current calculation.
    /// </summary>
    /// <returns>
    /// The <c>BOMCostCalculationMethod</c> value used for the current calculation.
    /// </returns>
    public display BOMCostCalculationMethod displayCostCalculationMethod()
    {
        return BOMCalcTable::find(this.PriceCalcId).CostCalculationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    display Name displayItemName()
    {
        return InventTable::find(this.ItemId).defaultProductName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProductionFlowName</Name>
				<Source><![CDATA[
    display PlanName displayProductionFlowName()
    {
        BOMCalcTable                bomCalcTable;
        LeanProductionFlowReference leanProductionFlowReference;
        PlanName                    planName;

        if (this.PriceCalcId)
        {
            bomCalcTable                = BOMCalcTable::find(this.PriceCalcId);
            leanProductionFlowReference = LeanProductionFlowReference::find(bomCalcTable.LeanProductionFlowReference);
            planName                    = PlanReference::find(leanProductionFlowReference.PlanReference).PlanName;
        }
        return planName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProfitSet</Name>
				<Source><![CDATA[
    display CostProfitSet displayProfitSet()
    {
        BOMCalcTable    bomCalcTable;
        CostProfitSet   profitSet;

        if (this.PriceCalcId)
        {
            bomCalcTable = BOMCalcTable::find(this.PriceCalcId);
            profitSet    = bomCalcTable.ProfitSet;
        }
        return profitSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRouteId</Name>
				<Source><![CDATA[
    display RouteId displayRouteId()
    {
        BOMCalcTable    bomCalcTable;
        RouteId         routeId;

        if (this.PriceCalcId)
        {
            bomCalcTable = BOMCalcTable::find(this.PriceCalcId);
            routeId      = bomCalcTable.RouteId;
        }
        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
        UnitOfMeasureSymbol displayUnitId()
    {
        return InventTableModule::find(this.ItemId, InventItemPrice::convPriceTypeToModuleInventPurchSales(this.PriceType)).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPriceMap</Name>
				<Source><![CDATA[
        public void  initFromInventItemPriceMap(
        InventItemPriceMap  _inventItemPriceMap,
        CostingVersionId    _versionId,
        Price               _price,
        PriceCalcId         _priceCalcId,
        PriceSecCur_RU      _priceSecCur = 0
        )
    {
        this.InventItemPriceMap::inventItemPriceMapInterface().initFromInventItemPriceMap(_inventItemPriceMap, _versionId, _price, _priceCalcId, _priceSecCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStdCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that a price is a standard cost price.
    /// </summary>
    /// <returns>
    ///    true if the price is a standard cost price; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A price is a standard cost price if the price model is Cost and the price type is Standard.
    /// </remarks>

    public boolean isStdCostPrice()
    {
        CostingVersion costingVersion;

        if (this.PriceType == CostingVersionPriceType::Cost)
        {
            costingVersion = CostingVersion::find(this.VersionId);
            if ((costingVersion.CostingType == CostingVersionCostingType::Standard) ||
                (costingVersion.CostingType == CostingVersionCostingType::Conversion))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
        Price pcsPrice()
    {
        Price pcsPrice = this.Price / this.priceUnit();

        if (this.PriceAllocateMarkup)
        {
            pcsPrice += this.Markup / this.priceQty();
        }

        return pcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPriceSecCur_RU</Name>
				<Source><![CDATA[
        PriceSecCur_RU pcsPriceSecCur_RU()
    {
        Price pcsPrice = this.PriceSecCur_RU / this.priceUnit();

        if (this.PriceAllocateMarkup)
        {
            pcsPrice += this.MarkupSecCur_RU / this.priceQty();
        }

        return pcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>priceQty</c> if it is not zero; otherwise, returns 1.
    /// </summary>
    /// <returns>
    ///    The <c>priceQty</c> if it is not zero; otherwise, 1.
    /// </returns>

    public PriceQty priceQty()
    {
        return this.PriceQty ? this.PriceQty : 1.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPriceMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventItemPriceMapInterface</c> object associated with the current map record.
    /// </summary>
    /// <returns>
    /// The <c>InventItemPriceMapInterface</c> object.
    /// </returns>
    public InventItemPriceMapInterface inventItemPriceMapInterface()
    {
        return InventItemPriceMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS319484</DeveloperDocumentation>
	<Label>@SYS109282</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Markup</Name>
			<ExtendedDataType>InventPriceMarkup</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>MarkupSecCur_RU</Name>
			<ExtendedDataType>InventPriceMarkupSecCur_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Price</Name>
			<ExtendedDataType>Price</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PriceAllocateMarkup</Name>
			<ExtendedDataType>PriceAllocateMarkup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PriceCalcId</Name>
			<ExtendedDataType>PriceCalcId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceQty</Name>
			<ExtendedDataType>PriceQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceSecCur_RU</Name>
			<ExtendedDataType>CostPriceSecCur_RU</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PriceType</Name>
			<EnumType>CostingVersionPriceType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PriceUnit</Name>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitID</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>VersionId</Name>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>