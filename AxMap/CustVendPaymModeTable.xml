<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymModeTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendPaymModeTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>incLastSequenceNum</Name>
				<Source><![CDATA[
    public Counter incLastSequenceNum()
    {
        this.LastSequenceNumber++;

        if (this.LastSequenceNumDate != DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            this.LastSequenceNumDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            this.LastSequenceNumToday  = 0;
        }

        this.LastSequenceNumToday++;

        this.update();

        return this.LastSequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicDefaultAccount offsetLedgerDimension()
    {
        return (this.InterCompanyLedgerDimension ? this.InterCompanyLedgerDimension : this.PaymentLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymAccount</Name>
				<Source><![CDATA[
    public LedgerJournalAC parmPaymAccount(LedgerJournalAC _account = '', LedgerJournalACType _accountType = this.AccountType, selectableDataArea _currentCompany = curext())
    {
        DimensionAttributeValueCombination  ledgerDimension;
        LedgerJournalAC                     account;

        if (!prmisDefault(_accountType))
        {
            this.AccountType = _accountType;
        }

        // If company has not been specified, use the current company
        if (!_currentCompany || !xDataArea::exist(_currentCompany))
        {
            _currentCompany = curext();
        }

        changecompany(_currentCompany)
        {
            // If account has been changed, update the backing ledger dimension value
            if (!prmisDefault(_account))
            {
                if (_account)
                {
                    this.PaymentLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_account, _accountType);
                    account = _account;
                }
                else
                {
                    account = '';
                    this.PaymentLedgerDimension = 0;
                }
            }
            else if (this.PaymentLedgerDimension)
            {
                // If the account has not been changed, then pull the value from ledger dimension as the master
                select firstonly DisplayValue from ledgerDimension
                    where ledgerDimension.RecId == this.PaymentLedgerDimension;

                account = ledgerDimension.DisplayValue;
            }
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentLedgerDimension</Name>
				<Source><![CDATA[
    public DimensionDynamicDefaultAccount parmPaymentLedgerDimension(LedgerDimensionAccount _ledgerDimension = this.PaymentLedgerDimension)
    {
        this.PaymentLedgerDimension = _ledgerDimension;

        return this.PaymentLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymACType</Name>
				<Source><![CDATA[
    LedgerJournalACType paymACType()
    {
        return (this.InterCompanyLedgerDimension ? LedgerJournalACType::Ledger : this.AccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCommon</Name>
				<Source><![CDATA[
    public static CustVendPaymModeTable findCommon(Common   _parentOfRelation,
                                                   boolean  _forUpdate = false)
    {
        CustVendPaymModeTable   custVendPaymModeTable;
        Query                   query;
        QueryRun                queryRun;

        query = CustVendPaymModeTable::queryFromTableRelation(_parentOfRelation, _forUpdate);
        query.dataSourceNo(1).update(_forUpdate);

        queryRun = new QueryRun(query);
        queryRun.next();

        custVendPaymModeTable = queryRun.getNo(1);

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findModule</Name>
				<Source><![CDATA[
    static CustVendPaymModeTable findModule(ModuleCustVend  _moduleCustVend,
                                            PaymMode        _paymMode,
                                            boolean         _forUpdate = false)
    {
        CustVendPaymModeTable   custVendPaymModeTable;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust :
                custVendPaymModeTable = CustPaymModeTable::find(_paymMode, _forUpdate);
                break;

            case ModuleCustVend::Vend :
                custVendPaymModeTable = VendPaymModeTable::find(_paymMode, _forUpdate);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendPaymModeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromTableRelation</Name>
				<Source><![CDATA[
    public static Query queryFromTableRelation(Common   _parentTable,
                                               boolean  _forUpdate = false)
    {
        tableId relationTableId;
        Query   query;
        QueryBuildRange qbr;
        LedgerJournalTrans ledgerJournalTrans;

        // First try to query the vendor side
        relationTableId = tableNum(VendPaymModeTable);
        if (_parentTable.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = _parentTable;
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
            {
                //In this case where we have a vendor payment being made from the vendor payment journal, we cannot find the correct relation on the LedgerJournalTrans
                //since it finds the first query for VendPaymModeTable which is the LedgerPaymMode relation.
                // so do it manually.
                query = new Query();
                query.addDataSource(relationTableId);
                query.dataSourceTable(relationTableId).addRange(fieldNum(VendPaymModeTable, PaymMode)).value(queryValue(ledgerJournalTrans.PaymMode));
                return query;
            }
        }
        query = SysQuery::queryFromTableRelation(_parentTable, relationTableId);

        qbr = query.dataSourceTable(relationTableId).findRange(fieldNum(Common, TableId));

        if (qbr && qbr.value() == queryValue(0))
        {
            // Second try to query the customer side
            relationTableId = tableNum(CustPaymModeTable);
            query = SysQuery::queryFromTableRelation(_parentTable, relationTableId);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankClientSupportedFormats_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of class ids supported in RU client bank functionality.
    /// </summary>
    /// <returns>
    /// A list of class ids supported in RU client bank functionality.
    /// </returns>
    public Map bankClientSupportedFormats_RU()
    {
        container supportedFormats;

        switch (this.TableId)
        {
            case tableNum(CustPaymModeTable) :
                supportedFormats = [
                    classNum(CustOutPaym_Cur_RU), 
                    classNum(CustOutPaym_MST_RU)];
                break;
            case tableNum(VendPaymModeTable) :
                supportedFormats = [
                    classNum(VendOutPaym_Cur_RU), 
                    classNum(VendOutPaym_MST_RU),
                    classNum(VendOutPaym_CurrencyTransfer_RU)];
                break;
            default:
                throw Error(Error::wrongUseOfFunction(funcName()));
        }

        Map mapSupportedFormats = new Map(Types::String, Types::Integer);

        for (int idx = 1; idx <= conLen(supportedFormats); idx++)
        {
            ClassId classId = conPeek(supportedFormats, idx);
            CustVendOutPaym custVendOutPaym = new DictClass(classId).makeObject() as CustVendOutPaym;

            if (custVendOutPaym)
            {
                mapSupportedFormats.insert(custVendOutPaym.interfaceName(), classId);
            }
        }

        return mapSupportedFormats;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankClientActionClassName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets client bank format class id based on its interface name.
    /// </summary>
    /// <param name = "_set">A flag indicating the value should be set.</param>
    /// <param name = "_exportFormat">The interface name of the format.</param>
    /// <returns>The interface name of the format.</returns>
    public ExportFormat bankClientActionClassName_RU(boolean _set, ExportFormat _exportFormat)
    {
        if (_set)
        {
            Map supportedFormats = this.CustVendPaymModeTable::bankClientSupportedFormats_RU();

            if (supportedFormats.exists(_exportFormat))
            {
                this.BankClientClassId_RU = supportedFormats.lookup(_exportFormat);
            }
            else
            {
                this.BankClientClassId_RU = 0;
            }
        }
        
        ExportFormat format;

        if (this.BankClientClassId_RU)
        {
            DictClass dictClass = new DictClass(this.BankClientClassId_RU);
            CustVendOutPaym custVendOutPaym = dictClass ? dictClass.makeObject() as CustVendOutPaym : null;
            if (custVendOutPaym)
            {
                format = custVendOutPaym.interfaceName();
            }
        }

        return format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymModeBridgingAccountByBank</Name>
				<Source><![CDATA[
    internal static boolean isPaymModeBridgingAccountByBank(PaymMode _paymMode, ModuleCustVend _moduleCustVend)
    {
        boolean result;
        CustVendPaymModeTable paymModeTable;

        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            paymModeTable = CustPaymModeTable::find(_paymMode);
        }
        else
        {
            paymModeTable = VendPaymModeTable::find(_paymMode);
        }

        if (paymModeTable)
        {
            result = paymModeTable.FurtherPosting && paymModeTable.BridgingAccountByBank;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBridgingBankAccount</Name>
				<Source><![CDATA[
    internal static BankAccountID getBridgingBankAccount(ModuleCustVend _moduleCustVend, LedgerJournalTrans _ledgerJournalTrans)
    {
        BankAccountID bankAccountId;
        CustVendPaymModeTable paymModeTable = CustVendPaymModeTable::findModule(_moduleCustVend, _ledgerJournalTrans.PaymMode);
        if (paymModeTable.isBridgingByBankAccount())
        {
            bankAccountId = _ledgerJournalTrans.BridgingBankAccount;
        }
        else
        {
            bankAccountId = paymModeTable.parmPaymAccount();
        }

        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBridgingByBankAccount</Name>
				<Source><![CDATA[
    internal boolean isBridgingByBankAccount()
    {
        return this.FurtherPosting && this.BridgingAccountByBank;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS327629</DeveloperDocumentation>
	<Label>@SYS83362</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AccountType</Name>
			<EnumType>LedgerJournalACType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankClientDocumentTypeId_RU</Name>
			<ExtendedDataType>BankClientDocumentTypeId_RU</ExtendedDataType>
			<StringSize>2</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BankTransType</Name>
			<ExtendedDataType>BankTransactionType</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>ClassId</Name>
			<ExtendedDataType>ClassId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>ClassIdRemittance</Name>
			<ExtendedDataType>ClassId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DimensionAttributeSet</Name>
			<ExtendedDataType>DimensionEnumeration</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>DiscGraceDays</Name>
			<ExtendedDataType>DiscGraceDays</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ExportOnInvoice</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79378</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>FurtherPosting</Name>
			<ExtendedDataType>FurtherPostingType</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>InterCompanyLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS21687</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>LastSequenceNumber</Name>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>LastSequenceNumDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>LastSequenceNumToday</Name>
			<ExtendedDataType>Counter</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>NumberSequenceTable_LT</Name>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PaymentLedgerDimension</Name>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS21686</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymJournalNameId</Name>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>PaymMode</Name>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PaymOnInvoice</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79376</Label>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PaymStatus</Name>
			<EnumType>CustVendPaymStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>PaymSumBy</Name>
			<EnumType>PaymSumBy</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>UseCustomFormat_RU</Name>
			<ExtendedDataType>BankClientUseCustomFormat_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>UseGERConfiguration</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ERFormatMappingID</Name>
			<ExtendedDataType>ERFormatMappingID</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>CategoryPurpose_W</Name>
			<ExtendedDataType>CategoryPurposeRecId_W</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ChargeBearer_W</Name>
			<ExtendedDataType>ChargeBearerRecId_W</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>LocalInstrument_W</Name>
			<ExtendedDataType>LocalInstrumentRecId_W</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>ServiceLevel_W</Name>
			<ExtendedDataType>ServiceLevelRecId_W</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>BankClientClassId_RU</Name>
			<ExtendedDataType>ClassId</ExtendedDataType>
			<Label>@SYS67303</Label>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>BridgingAccountByBank</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>