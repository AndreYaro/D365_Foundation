<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReceiptOrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSReceiptOrderLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the corresponding <c>InventDim</c> record.
    /// </summary>
    /// <param name="_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(
        ItemId  _itemId       = this.ItemId,
        boolean _forUpdate    = false)
    {
        return InventTable::find(_itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertInvent2Order</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProductQuantity unitConvertInvent2Order(InventQty _inventQty)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitConvertOrder2Invent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty unitConvertOrder2Invent(ProductQuantity _orderQty)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    public AccountNum vendAccount()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    public WHSWorkTransType workTransType()
    {
        return WHSWorkTransType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    public InventTransType inventTransType()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>originType</Name>
				<Source><![CDATA[
    public WHSOriginType originType()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBatchRefType</Name>
				<Source><![CDATA[
    public PdsVendBatchInfoSourceRefType vendBatchRefType()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialToReceiveForCurrentLine</Name>
				<Source><![CDATA[
    public InventSerialId getSerialToReceiveForCurrentLine()
    {
        // try to get the serial number from the order line
        InventSerialId ret = this.inventDim().inventSerialId;

        // try to get the serial number from the transactions
        if (ret == '')
        {
            ret = InventTrans::getInventSerialIdOrdered(this.ItemId, this.InventTransId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected InventTransOriginId inventTransOriginId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdSum</Name>
				<Source><![CDATA[
    private InventTransIdSum inventTransIdSum()
    {
        return InventTransIdSum::newTransOriginId(this.inventTransOriginId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInventInTotal</Name>
				<Source><![CDATA[
    public display InventQty receivedInventInTotal()
    {
        InventQty inventQty = 0;

        if (this.InventTransId && this.isStocked())
        {
            InventTransIdSum inventTransIdSum = this.WHSReceiptOrderLine::inventTransIdSum();
            inventQty = inventTransIdSum.physical() + inventTransIdSum.financial();
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    public display InventQtyOrdered ordered()
    {
        InventQtyOrdered qtyOrdered = 0;

        if (this.InventTransId && this.isStocked())
        {
            qtyOrdered = InventTransIdSumSingleStatus::qtyOrdered(this.inventTransOriginId());
        }

        return qtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    public display InventQtyRegistered registered()
    {
        InventQtyRegistered inventQtyRegistered = 0;

        if (this.InventTransId && this.isStocked())
        {
            inventQtyRegistered = InventTransIdSumSingleStatus::qtyRegistered(this.inventTransOriginId());
        }

        return inventQtyRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceivedInTotal</Name>
				<Source><![CDATA[
    public display PdsCWQtyReceived pdsCWReceivedInTotal()
    {
        PdsCWQtyReceived pdsCWQtyReceived = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
              && this.InventTransId
              && this.isStocked())
        {
            InventTransIdSum inventTransIdSum = this.WHSReceiptOrderLine::inventTransIdSum();
            pdsCWQtyReceived = inventTransIdSum.pdsCWPhysical() + inventTransIdSum.pdsCWFinancial();
        }

        return pdsCWQtyReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    public display PdsCWOrdered pdsCWOrdered()
    {
        PdsCWOrdered pdsCWOrdered = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
              && this.InventTransId)
        {
            pdsCWOrdered = this.WHSReceiptOrderLine::inventTransIdSum().pdsCWOrdered();
        }

        return pdsCWOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegistered</Name>
				<Source><![CDATA[
    public display PdsCWRegistered pdsCWRegistered()
    {
        PdsCWRegistered pdsCWRegistered = 0;

        if (PdsGlobal::pdsIsCWItem(this.ItemId)
              && this.InventTransId)
        {
            pdsCWRegistered = this.WHSReceiptOrderLine::inventTransIdSum().pdsCWRegistered();
        }

        return pdsCWRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptOrderLine</Name>
				<Source><![CDATA[
    public static boolean isReceiptOrderLine(Common _common)
    {
        return _common is PurchLine
            || SysDictTable::isTableMapped(tableNum(WHSReceiptOrderLine), _common.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIgnoreInventTransLoadIdToDetermineRegisteredQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if load association on inventory transactions should be ignored when determining registered quantity.
    /// </summary>
    /// <param name = "_inventTransId">InventTransId of the order line</param>
    /// <returns>true if the total registered quantity should be used instead of load associated registered quantity; otherwise, false.</returns>
    /// <remarks>
    /// If the line only has registered quantity without load association, then use total registered quantity instead of load associated registered quantity.
    /// This can happen if receiving methods that don't properly identify a load line are used or the small registration form is used or when using upgraded data.
    /// </remarks>
    [Hookable(false)]
    internal static boolean shouldIgnoreInventTransLoadIdToDetermineRegisteredQty(InventTransId _inventTransId)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_inventTransId);
 
        select firstonly RecId from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
               && inventTrans.StatusIssue == StatusIssue::None
               && inventTrans.StatusReceipt == StatusReceipt::Registered
               && inventTrans.LoadId == '';
  
        boolean blankLoadIdFound = inventTrans.RecId != 0;

        if (!blankLoadIdFound)
        {
            // No registered quantity exists that is not associated to a load
            return false;
        }

        select firstonly RecId from inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
               && inventTrans.StatusIssue == StatusIssue::None
               && inventTrans.StatusReceipt == StatusReceipt::Registered
               && inventTrans.LoadId != '';
  
        boolean nonBlankLoadIdFound = inventTrans.RecId != 0;
        
        return !nonBlankLoadIdFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4881108</DeveloperDocumentation>
	<Label>@SYP4881107</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderNumber</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Unit</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWQty</Name>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>OverDeliveryPct</Name>
			<ExtendedDataType>OverDeliveryPct</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>InventQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>LineNumber</Name>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>