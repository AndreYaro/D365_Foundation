<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimFixedActiveDimensionEntityMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimFixedActiveDimensionEntityMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDimFixedDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies for the field mapped to the InventDimFixed field.
    /// </summary>
    /// <returns>
    /// A container with the defaulting dependencies for the field mapped to the InventDimFixed field.
    /// </returns>
    public container inventDimFixedDefaultingDependencies()
    {
        return [SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping),
                                                fieldNum(InventDimFixedActiveDimensionEntityMapping, InventDimFixed),
                                                this.tableId), this.InventDimFixedActiveDimensionEntityMapping::inventDimFixedDependencies()
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixedDependencies</Name>
				<Source><![CDATA[
    private container inventDimFixedDependencies()
    {
        container           dependencies;
        ListEnumerator      fieldsEnumerator = this.InventDimFixedActiveDimensionEntityMapping::activeDimensionFields().getEnumerator();
        FieldId             tableMapFieldId;
        FieldId             mappedFieldId;

        while (fieldsEnumerator.moveNext())
        {
            tableMapFieldId = fieldsEnumerator.current();
            mappedFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, this.tableId);
            if (mappedFieldId)
            {
                dependencies += mappedFieldId;
            }
        }

        return dependencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeDimensionFields</Name>
				<Source><![CDATA[
    private List activeDimensionFields()
    {
        List                fields = new List(Types::Integer);
        DictTable           dictTable = new DictTable(tableNum(InventDimFixedActiveDimensionEntityMapping));
        DictFieldGroup      dictFieldGroup;
        int                 fieldGroupIdx;
        int                 fieldGroupFieldIdx;

        for (fieldGroupIdx = 1; fieldGroupIdx <= dictTable.fieldGroupCnt(); fieldGroupIdx++)
        {
            if (dictTable.fieldGroup(fieldGroupIdx) == tableFieldGroupStr(InventDimFixedActiveDimensionEntityMapping, ActiveDimensions))
            {
                dictFieldGroup = new DictFieldGroup(dictTable.id(),dictTable.fieldGroup(fieldGroupIdx));
                for (fieldGroupFieldIdx = 1; fieldGroupFieldIdx <= dictFieldGroup.numberOfFields(); fieldGroupFieldIdx++)
                {
                    fields.addEnd(dictFieldGroup.field(fieldGroupFieldIdx));
                }
            }
        }
        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMappedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values for fields mapped to the <c>InventDimFixedActiveDimensionEntityMapping</c> table map.
    /// </summary>
    /// <param name = "_tableMapFieldId">
    /// The field ID of the mapped table field to default.
    /// </param>
    public void defaultMappedField(FieldId _tableMapFieldId)
    {
        switch (_tableMapFieldId)
        {
            case SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), fieldNum(InventDimFixedActiveDimensionEntityMapping, InventDimFixed), this.tableId):
                this.InventDimFixedActiveDimensionEntityMapping::defaultInventDimFixed();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimFixed</Name>
				<Source><![CDATA[
    private void defaultInventDimFixed()
    {
        if (this.InventDimFixedActiveDimensionEntityMapping::isAnyInventDimFixedDependencyFieldSet())
        {
            this.InventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(this.InventDimFixedActiveDimensionEntityMapping::inventDimParm());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyInventDimFixedDependencyFieldSet</Name>
				<Source><![CDATA[
    private boolean isAnyInventDimFixedDependencyFieldSet()
    {
        ListEnumerator      fieldsEnumerator = this.InventDimFixedActiveDimensionEntityMapping::activeDimensionFields().getEnumerator();
        FieldId             tableMapFieldId;
        FieldId             mappedFieldId;

        while (fieldsEnumerator.moveNext())
        {
            tableMapFieldId = fieldsEnumerator.current();
            mappedFieldId   = SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, this.tableId);
            if (mappedFieldId && this.isFieldSet(mappedFieldId))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParm</Name>
				<Source><![CDATA[
    private InventDimParm inventDimParm()
    {
        inventDimParm       inventDimParm;
        ListEnumerator      fieldsEnumerator = this.InventDimFixedActiveDimensionEntityMapping::activeDimensionFields().getEnumerator();
        FieldId             tableMapFieldId;
        FieldId             inventDimParmFieldId;

        while (fieldsEnumerator.moveNext())
        {
            tableMapFieldId         = fieldsEnumerator.current();
            if (SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, this.tableId))
            {
                inventDimParmFieldId    = SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, inventDimParm.TableId);
                inventDimParm.(inventDimParmFieldId) = this.(tableMapFieldId);
            }
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimParmFromExplicitlySetFlags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventDimParm</c> buffer with the values of the inventory dimension flags that were explicitly set by the user.
    /// </summary>
    /// <param name = "_inventDimParm">The <c>InventDimParm</c> record with the desired flags.</param>
    public void updateInventDimParmFromExplicitlySetFlags(InventDimParm _inventDimParm)
    {
        ListEnumerator fieldsEnumerator = this.InventDimFixedActiveDimensionEntityMapping::activeDimensionFields().getEnumerator();

        while (fieldsEnumerator.moveNext())
        {
            FieldId tableMapFieldId = fieldsEnumerator.current();
            FieldId mappedEntityFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, this.tableId);
            if (mappedEntityFieldId && this.isFieldSet(mappedEntityFieldId))
            {
                FieldId inventDimParmFieldId = SysDictField::findMappedFieldId(tableNum(InventDimFixedActiveDimensionEntityMapping), tableMapFieldId, _inventDimParm.TableId);
                _inventDimParm.(inventDimParmFieldId) = this.(tableMapFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryStatusIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an isInventoryStatusIdActive mapped mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an isInventoryStatusIdActive mapped field.
    /// </returns>
    static public str isInventoryStatusIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventStatusId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsItemBatchNumberActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsItemBatchNumberActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsItemBatchNumberActive mapped field.
    /// </returns>
    static public str IsItemBatchNumberActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventBatchId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsItemSerialNumberActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsItemSerialNumberActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsItemSerialNumberActive mapped field.
    /// </returns>
    static public str IsItemSerialNumberActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventSerialId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsLicensePlateNumberActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsLicensePlateNumberActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsLicensePlateNumberActive mapped field.
    /// </returns>
    static public str IsLicensePlateNumberActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, LicensePlateId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProductColorIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsProductColorIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsProductColorIdActive mapped field.
    /// </returns>
    static public str IsProductColorIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventColorId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProductConfigurationIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsProductConfigurationIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsProductConfigurationIdActive mapped field.
    /// </returns>
    static public str IsProductConfigurationIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, ConfigId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProductSizeIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsProductSizeIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsProductSizeIdActive mapped field.
    /// </returns>
    static public str IsProductSizeIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, inventSizeId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProductStyleIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsProductStyleIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsProductStyleIdActive mapped field.
    /// </returns>
    static public str IsProductStyleIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventStyleId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsProductVersionIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsProductVersionIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsProductVersionIdActive mapped field.
    /// </returns>
    static public str IsProductVersionIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventVersionId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsOperationalSiteIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsOperationalSiteIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsOperationalSiteIdActive mapped field.
    /// </returns>
    static public str IsOperationalSiteIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventSiteId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsWarehouseIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsWarehouseIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsWarehouseIdActive mapped field.
    /// </returns>
    static public str IsWarehouseIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, InventLocationId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsWarehouseLocationIdActiveDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the string defining how to compute an IsWarehouseLocationIdActive mapped computed field.
    /// </summary>
    /// <returns>
    /// A string to compute an IsWarehouseLocationIdActive mapped field.
    /// </returns>
    static public str IsWarehouseLocationIdActiveDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName)
    {
        return InventDimFixedActiveDimensionEntityMapping::inventDimFixedToFlagDefinition(
                    _entityName,
                    _dataSourceName,
                    _inventDimFixedFieldName,
                    InventDimFixedClass::fieldId2Idx(fieldNum(InventDim, WMSLocationId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixedToFlagDefinition</Name>
				<Source><![CDATA[
    private static str inventDimFixedToFlagDefinition(Tablename _entityName, DataSourceName _dataSourceName, FieldName _inventDimFixedFieldName, int _inventDimFixedIdx)
    {
        InventDimFixed  inventDimFixed = 1 << _inventDimFixedIdx;

        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::bitwiseAndExpression(
                            SysComputedColumn::comparisonField(_entityName, _dataSourceName, _inventDimFixedFieldName),
                            SysComputedColumn::comparisonLiteral(inventDimFixed)),
                        SysComputedColumn::comparisonLiteral(0)),
                    SysComputedColumn::returnLiteral(NoYes::No),
                    SysComputedColumn::returnLiteral(NoYes::Yes));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>ActiveDimensions</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsInventoryStatusIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsItemBatchNumberActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsItemSerialNumberActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsLicensePlateNumberActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductColorIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductConfigurationIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductSizeIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductStyleIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductVersionIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsOperationalSiteIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsWarehouseIdActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsWarehouseLocationIdActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt">
			<Name>InventDimFixed</Name>
			<ExtendedDataType>InventDimFixed</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsInventoryStatusIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsItemBatchNumberActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsItemSerialNumberActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsLicensePlateNumberActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsProductColorIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsProductConfigurationIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsProductSizeIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsProductStyleIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsProductVersionIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsOperationalSiteIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsWarehouseIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsWarehouseLocationIdActive</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension1Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension2Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension3Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension4Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension5Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension6Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension7Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension8Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension9Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension10Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension11Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>IsDimension12Active</Name>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventDimParm</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventDimFixed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsInventoryStatusIdActive</MapField>
					<MapFieldTo>InventStatusFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemBatchNumberActive</MapField>
					<MapFieldTo>InventBatchIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsItemSerialNumberActive</MapField>
					<MapFieldTo>InventSerialIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsLicensePlateNumberActive</MapField>
					<MapFieldTo>LicensePlateFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductColorIdActive</MapField>
					<MapFieldTo>InventColorIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductConfigurationIdActive</MapField>
					<MapFieldTo>ConfigIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductSizeIdActive</MapField>
					<MapFieldTo>InventSizeIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductStyleIdActive</MapField>
					<MapFieldTo>InventStyleIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsProductVersionIdActive</MapField>
					<MapFieldTo>InventVersionIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsOperationalSiteIdActive</MapField>
					<MapFieldTo>InventSiteIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsWarehouseIdActive</MapField>
					<MapFieldTo>InventLocationIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsWarehouseLocationIdActive</MapField>
					<MapFieldTo>WMSLocationIdFlag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension1Active</MapField>
					<MapFieldTo>InventDimension1Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension2Active</MapField>
					<MapFieldTo>InventDimension2Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension3Active</MapField>
					<MapFieldTo>InventDimension3Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension4Active</MapField>
					<MapFieldTo>InventDimension4Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension5Active</MapField>
					<MapFieldTo>InventDimension5Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension6Active</MapField>
					<MapFieldTo>InventDimension6Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension7Active</MapField>
					<MapFieldTo>InventDimension7Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension8Active</MapField>
					<MapFieldTo>InventDimension8Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension9Active</MapField>
					<MapFieldTo>InventDimension9Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension10Active</MapField>
					<MapFieldTo>InventDimension10Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension11Active</MapField>
					<MapFieldTo>InventDimension11Flag</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDimension12Active</MapField>
					<MapFieldTo>InventDimension12Flag</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>