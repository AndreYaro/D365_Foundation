<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundShippableOrderLineMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSOutboundShippableOrderLineMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndUpdateLoadLines</Name>
				<Source><![CDATA[
    internal void checkAndUpdateLoadLines(
        WHSOutboundShippableOrderLineMap _originalOrderLine = this.orig(),
        boolean _mustUpdateLoadLines = false)
    {
        boolean whsEnabled = WHSInventEnabled::exist(this.ItemId);
        boolean tmsEnabled = TMSInventEnabled::exist(this.ItemId);

        if (whsEnabled || tmsEnabled)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

            NoYesId autoCreate = (whsEnabled && WHSParameters::find().AutoCreateLoad)
                || (tmsEnabled && TMSParameters::find().AutoCreateLoadSO);
                
            InventQty loadLineDiffQty;

            if (_mustUpdateLoadLines)
            {
                WHSSrcLineChangeLoadLineUpdater srcLineChangeLoadLineUpdater;
                if (isCWItem)
                {
                    srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParametersV2(
                        this,
                        this.InventTransId,
                        this.InventDimId,
                        _originalOrderLine.InventDimId,
                        this.PdsCWRemainInventPhysical,
                        _originalOrderLine.PdsCWRemainInventPhysical,
                        this.WHSOutboundShippableOrderLineMap::pdsCWUnitOfMeasureSymbol(),
                        _originalOrderLine.WHSOutboundShippableOrderLineMap::pdsCWUnitOfMeasureSymbol(),
                        autoCreate,
                        _originalOrderLine);
                }
                else
                {
                    srcLineChangeLoadLineUpdater = WHSSrcLineChangeLoadLineUpdater::newFromUpdateParametersV2(
                        this,
                        this.InventTransId,
                        this.InventDimId,
                        _originalOrderLine.InventDimId,
                        this.RemainInventQuantity,
                        _originalOrderLine.RemainInventQuantity,
                        this.UnitOfMeasureSymbol,
                        _originalOrderLine.UnitOfMeasureSymbol,
                        autoCreate,
                        _originalOrderLine);
                }

                srcLineChangeLoadLineUpdater.updateLoadLines();
                loadLineDiffQty = srcLineChangeLoadLineUpdater.getloadLineDiffHandlingQty();
            }
                
            UnitOfMeasureSymbol orderLineOrigUnit = isCWItem ? _originalOrderLine.WHSOutboundShippableOrderLineMap::pdsCWUnitOfMeasureSymbol() : _originalOrderLine.UnitOfMeasureSymbol;
            
            InventHandlingQty origOrderLineInventHandlingQty;
            if(!isCWItem)
            {
                UnitOfMeasureSymbol inventHandlingUOM = InventTableModule::find(_originalOrderLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

                //in case unit conversion was changed after order line creation, then we should recalculate original inventory qty according to current conversion.
                origOrderLineInventHandlingQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    _originalOrderLine.ItemId,
                    _originalOrderLine.InventDimId,
                    _originalOrderLine.RemainOrderedQuantity,
                    orderLineOrigUnit,
                    inventHandlingUOM,
                    NoYes::No);
            }
            else
            {
                origOrderLineInventHandlingQty = isCWItem ? _originalOrderLine.PdsCWRemainInventPhysical : _originalOrderLine.RemainInventQuantity;
            }

            if (this is SalesLine)
            {
                SalesLine salesLine = this as SalesLine;
                SalesLine originalSalesLine = _originalOrderLine as SalesLine;
                if (originalSalesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                 && salesLine.LineDeliveryType != originalSalesLine.LineDeliveryType)
                {
                    origOrderLineInventHandlingQty = 0;
                }
            }
                
            WHSSourceLineUpdater orderLineUpdater = WHSSourceLineUpdater::newFromSourceLineTableBuffer(this);
            orderLineUpdater.setHandlingUpdateQuantities(this, origOrderLineInventHandlingQty, orderLineOrigUnit, loadLineDiffQty);
            orderLineUpdater.updateTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    private PdsCWUnitId pdsCWUnitOfMeasureSymbol()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ItemId</Name>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>UnitOfMeasureSymbol</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RemainInventQuantity</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>OrderedQuantity</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>RemainOrderedQuantity</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>PdsCWQty</Name>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventTransId</Name>
			<ExtendedDataType>InventTransIdBase</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>