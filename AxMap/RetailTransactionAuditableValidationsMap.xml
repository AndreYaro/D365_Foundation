<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditableValidationsMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTransactionAuditableValidationsMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mappedValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the changes to the entity can be performed.
    /// </summary>
    /// <returns>true if allowed; false, otherwise.</returns>
    public boolean mappedValidateWrite()
    {
        boolean ret = true;
            
        ret = this.RetailTransactionAuditableValidationsMap::validateWriteCashAndCarry();
        ret = ret && this.RetailTransactionAuditableValidationsMap::validateWriteAsyncOrders();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedValidateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fields being changed have valid values.
    /// </summary>
    /// <param name = "_mappedTableId">The source (mapped) table ID.</param>
    /// <param name = "_mappedFieldId">The source (mapped) field ID from the table.</param>
    /// <returns>true if valid; false, otherwise.</returns>
    public boolean mappedValidateField(TableId _mappedTableId, FieldId _mappedFieldId)
    {
        boolean ret = true;

        FieldId fieldIdToCheck = RetailTransactionAuditableValidationsMap::mappedFieldId(_mappedTableId, _mappedFieldId);

        if (fieldIdToCheck && fieldIdToCheck == fieldNum(RetailTransactionAuditableValidationsMap, TransactionStatus))
        {
            ret = ret && this.RetailTransactionAuditableValidationsMap::validateTransactionStatusChange();
        }
        else if (fieldIdToCheck && fieldIdToCheck == fieldNum(RetailTransactionAuditableValidationsMap, ValidationStatus))
        {
            ret = ret && this.RetailTransactionAuditableValidationsMap::validateValidationStatusChange();
        }
        else if (fieldIdToCheck && fieldIdToCheck == fieldNum(RetailTransactionAuditableValidationsMap, AsynchronousOrderStatus))
        {
            ret = ret && this.RetailTransactionAuditableValidationsMap::validateAsynchronousOrderStatusChange();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteCashAndCarry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cash and carry specific <c>validateWrite()</c> logic.
    /// </summary>
    /// <returns>true if valid; false, otherwise.</returns>
    private boolean validateWriteCashAndCarry()
    {
        boolean ret = true;

        if (this.TransactionType == RetailTransactionType::Sales && this.ValidationStatus == RetailTransactionValidationStatus::Ok)
        {
            return checkFailed("@RetailAudit:NotAllowedToEditValidatedCashAndCarry");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteAsyncOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Async/online specific <c>validateWrite()</c> logic.
    /// </summary>
    /// <returns>true if valid; false, otherwise.</returns>
    private boolean validateWriteAsyncOrders()
    {
        boolean ret = true;

        // Only transaction that are "asynchronous" and have OrderStatus set to "Editing" can be changed.
        if (RetailTransactionAsyncOrdersHelper::isAsyncTransactionType(this.TransactionType))
        {
            RetailTransactionAuditableValidationsMap origEntity = this.orig();

            if (this.AsynchronousOrderStatus == RetailTransactionOrderStatusType::PendingSynchronization 
             || this.AsynchronousOrderStatus == RetailTransactionOrderStatusType::Succeeded)
            {
                // If the sales order has already been created for the transaction, the transaction can't be changed
                ret = ret && checkFailed("@RetailAudit:ChangesToSynchronizedOrdersAreNotAllowed");
            }
            else if (origEntity.AsynchronousOrderStatus == RetailTransactionOrderStatusType::Editing
                && this.AsynchronousOrderStatus != RetailTransactionOrderStatusType::Editing)
            {
                // This check in combination with the validateField makes sure that we can move back and forth the status from 
                // None, Failed, Editing but Success and PendingSynchronization can't be used.
                ret = true;
            }
            else if (this.AsynchronousOrderStatus != RetailTransactionOrderStatusType::Editing)
            {
                ret = ret && checkFailed(strFmt("@RetailAudit:OrderStatusMustBeEditingBeforeChangingRecords",
                                         fieldPName(RetailTransactionAuditableValidationsMap, AsynchronousOrderStatus),
                                         enum2Str(RetailTransactionOrderStatusType::Editing)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>TransactionStatus</c> change is valid.
    /// </summary>
    /// <returns>true if valid; false, otherwise.</returns>
    private boolean validateTransactionStatusChange()
    {
        RetailTransactionAuditableValidationsMap origEntity = this.orig();

        if ((origEntity.TransactionStatus == this.TransactionStatus)
        ||  (origEntity.TransactionStatus == RetailEntryStatus::Voided && this.TransactionStatus == RetailEntryStatus::None)
        ||  (origEntity.TransactionStatus == RetailEntryStatus::None && this.TransactionStatus == RetailEntryStatus::Voided))
        {
            return true;
        }

        return checkFailed(strFmt("@RetailAudit:EntryStatusChangeNotAllowed", fieldPName(RetailTransactionAuditableValidationsMap, TransactionStatus), enum2Str(RetailEntryStatus::None), enum2Str(RetailEntryStatus::Voided)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateValidationStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>ValidationStatus</c> change is valid.
    /// </summary>
    /// <returns>true if valid; false, otherwise.</returns>
    private boolean validateValidationStatusChange()
    {
        if (this.TransactionType == RetailTransactionType::Sales)
        {
            RetailTransactionAuditableValidationsMap origEntity = this.orig();

            // If status changed and current status is "Ok", block the operation.
            // Users shouldn't be able to mark the transactions as valid.
            if (origEntity.ValidationStatus != this.ValidationStatus && this.ValidationStatus == RetailTransactionValidationStatus::Ok)
            {
                return checkFailed(strFmt("@RetailAudit:NotAllowedToMarkTransactionAsValid", fieldPName(RetailTransactionAuditableValidationsMap, ValidationStatus), enum2Str(RetailTransactionValidationStatus::Ok),
                                   "@Retail:RetailTransactionConsistencyCheckerOrchestrator"));
            }
            else
            {
                return true;
            }
        }
        else
        {
            return checkFailed(strFmt("@RetailAudit:OnlyCashAndCarryTransactionsCanHaveValidationStatus",
                                       fieldPName(RetailTransactionAuditableValidationsMap, ValidationStatus),
                                       enum2Str(RetailTransactionType::Sales)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAsynchronousOrderStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>AsynchronousOrderStatus</c> change is valid.
    /// </summary>
    /// <returns>true if valid; false, otherwise.</returns>
    private boolean validateAsynchronousOrderStatusChange()
    {
        if (RetailTransactionAsyncOrdersHelper::isAsyncTransactionType(this.TransactionType))
        {
            RetailTransactionAuditableValidationsMap origEntity = this.orig();

            // If status changed and current status is "Succeeded" or "PendingSynchronization", block the operation.
            // The sales order has already been created in this scenario, so changing it transaction data won't affect it.
            if (origEntity.AsynchronousOrderStatus != this.AsynchronousOrderStatus 
                && (this.AsynchronousOrderStatus == RetailTransactionOrderStatusType::PendingSynchronization ||
                    this.AsynchronousOrderStatus == RetailTransactionOrderStatusType::Succeeded))
            {
                return checkFailed(strFmt("@RetailAudit:NotAllowedToMarkAsynchronousTransactionAsSuccess", fieldPName(RetailTransactionAuditableValidationsMap, AsynchronousOrderStatus), enum2Str(this.AsynchronousOrderStatus)));
            }
            else
            {
                return true;
            }
        }
        else
        {
            return checkFailed(strFmt("@RetailAudit:OrderStatusCanOnlyBeChangedForAsyncOrders", fieldPName(RetailTransactionAuditableEntity, AsynchronousOrderStatus)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field id on the Map. 
    /// </summary>
    /// <param name = "_mappedTableId">The source (mapped) table ID.</param>
    /// <param name = "_mappedFieldId">The source (mapped) field ID from the table.</param>
    /// <returns>The corresponding field id in the map or zero if not found.</returns>
    /// <remarks>
    /// Reusing logic from Inventory classes so that we can levarage the existing per-AOS cache logic.
    /// </remarks>
    private static FieldId mappedFieldId(TableId _mappedTableId, FieldId _mappedFieldId)
    {
        InventDimFieldIdCache cache = new InventDimFieldIdCache(strFmt('%1;%2;%3', funcName(), _mappedTableId, _mappedFieldId));
        
        FieldId cachedFieldId = cache.lookup();

        if (cachedFieldId == InventDimFieldIdCache::NotCached)
        {
            FieldId fieldIdOnMap = SysDictField::findMappingFieldId(_mappedTableId, _mappedFieldId, tableNum(RetailTransactionAuditableValidationsMap));

            cache.insert(fieldIdOnMap);

            cachedFieldId = fieldIdOnMap;
        }

        return cachedFieldId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransactionStatus</Name>
			<EnumType>RetailEntryStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransactionType</Name>
			<EnumType>RetailTransactionType</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ValidationStatus</Name>
			<EnumType>RetailTransactionValidationStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>AsynchronousOrderStatus</Name>
			<EnumType>RetailTransactionOrderStatusType</EnumType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>