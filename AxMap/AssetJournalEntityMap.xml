<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetJournalEntityMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetJournalEntityMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateReportingCurrencyAmounts</Name>
				<Source><![CDATA[
     internal static void updateReportingCurrencyAmounts(AssetJournalEntityMap _entity)
    {
        // Reporting currency amounts are cleared for none depreciation amounts
        // as the spot rate is used to calculate the reporting amounts while
        // the transaction is posed.
        if (!AssetJournalEntityMap::isDepreciationTransaction(_entity))
        {
            _entity.DebitAmountReportingCurrency = 0;
            _entity.CreditAmountReportingCurrency = 0;
        }
        else if (Ledger::accountingCurrency() == Ledger::reportingCurrency())
        {
            _entity.DebitAmountReportingCurrency = _entity.DebitAmount;
            _entity.CreditAmountReportingCurrency = _entity.CreditAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAssetBookTableDerivedJournal</Name>
				<Source><![CDATA[
    internal static void populateAssetBookTableDerivedJournal(AssetJournalEntityMap _entity, LedgerJournalTrans _ledgerJournalTrans)
    {
        Amount amount = _entity.DebitAmount ? _entity.DebitAmount : -_entity.CreditAmount;
        AssetTransType assetTransType = AssetPost::assetTransTypeJournal2AssetTransType(_entity.TransactionType);
        Amount amountReportingCurrency = AssetJournalEntityMap::getReportingCurrencyAmount(_entity);

        AssetBook assetBook;
        AssetBookTableDerived assetBookTableDerivedFieldList;
        AssetBookTableDerivedJournal assetBookTableDerivedJournal;

        while select BookIdDerived from assetBookTableDerivedFieldList
            where assetBookTableDerivedFieldList.BookId == _entity.BookId
               && assetBookTableDerivedFieldList.AssetTransType == assetTransType
            join AcquisitionPrice from assetBook
                where  assetBook.BookId  == assetBookTableDerivedFieldList.BookIdDerived
                    && assetBook.AssetId == _entity.FixedAssetNumber
        {
            assetBookTableDerivedJournal.AssetBookId = assetBookTableDerivedFieldList.BookIdDerived;
            assetBookTableDerivedJournal.RefRecId = _ledgerJournalTrans.RecId;
            assetBookTableDerivedJournal.AmountCur = amount;
            assetBookTableDerivedJournal.ReportingCurrencyAmount = amountReportingCurrency;
            assetBookTableDerivedJournal.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyAmount</Name>
				<Source><![CDATA[
    private static Amount getReportingCurrencyAmount(AssetJournalEntityMap _entity)
    {
        Amount amountReportingCurrency;

        if (AssetJournalEntityMap::isDepreciationTransaction(_entity))
        {
            amountReportingCurrency = _entity.DebitAmountReportingCurrency ? _entity.DebitAmountReportingCurrency : -_entity.CreditAmountReportingCurrency;
        }

        return amountReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciationTransaction</Name>
				<Source><![CDATA[
    internal static boolean isDepreciationTransaction(AssetJournalEntityMap _entity)
    {
        boolean returnValue = false;

        if (_entity.TransactionType == AssetTransTypeJournal::Depreciation
            || _entity.TransactionType == AssetTransTypeJournal::DepreciationAdj
            || _entity.TransactionType == AssetTransTypeJournal::ExtraordinaryDepreciation
            || _entity.TransactionType == AssetTransTypeJournal::BonusDepreciation)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetBookTableDerivedJournalUpdateNeeded</Name>
				<Source><![CDATA[
    private static boolean isAssetBookTableDerivedJournalUpdateNeeded(
        LedgerJournalTrans _prevLedgerJournalTrans,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Asset _prevLedgerJournalTransAsset,
        LedgerJournalTrans_Asset _ledgerJournalTransAsset)
    {
        return _prevLedgerJournalTrans.AmountCurCredit != _ledgerJournalTrans.AmountCurCredit
            || _prevLedgerJournalTrans.AmountCurDebit != _ledgerJournalTrans.AmountCurDebit
            || _prevLedgerJournalTransAsset.AmountCreditReportingCurrency != _ledgerJournalTransAsset.AmountCreditReportingCurrency
            || _prevLedgerJournalTransAsset.AmountDebitReportingCurrency != _ledgerJournalTransAsset.AmountDebitReportingCurrency
            || _prevLedgerJournalTrans.LedgerDimension != _ledgerJournalTrans.LedgerDimension
            || _prevLedgerJournalTransAsset.BookId != _ledgerJournalTransAsset.BookId
            || _prevLedgerJournalTransAsset.TransType != _ledgerJournalTransAsset.TransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromAssetBookTableDerivedJournal</Name>
				<Source><![CDATA[
    private static void deleteFromAssetBookTableDerivedJournal(LedgerJournalTrans _ledgerJournalTrans)
    {
        AssetBookTableDerivedJournal assetBookTableDerivedJournal;

        delete_from assetBookTableDerivedJournal
            where assetBookTableDerivedJournal.RefRecId == _ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetBookTableDerivedJournal</Name>
				<Source><![CDATA[
    internal static void updateAssetBookTableDerivedJournal(
        AssetJournalEntityMap _entity,
        LedgerJournalTrans _prevLedgerJournalTrans,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Asset _prevLedgerJournalTransAsset,
        LedgerJournalTrans_Asset _ledgerJournalTransAsset)
    {
        if (AssetJournalEntityMap::isAssetBookTableDerivedJournalUpdateNeeded(
            _prevLedgerJournalTrans,
            _ledgerJournalTrans,
            _prevLedgerJournalTransAsset,
            _ledgerJournalTransAsset))
        {
            AssetJournalEntityMap::deleteFromAssetBookTableDerivedJournal(_ledgerJournalTrans);
            AssetJournalEntityMap::populateAssetBookTableDerivedJournal(_entity, _ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CreditAmount</Name>
			<ExtendedDataType>AmountCurCredit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DebitAmount</Name>
			<ExtendedDataType>AmountCurDebit</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>CreditAmountReportingCurrency</Name>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>DebitAmountReportingCurrency</Name>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>TransactionType</Name>
			<EnumType>AssetTransTypeJournal</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>JournalBatchNumber</Name>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldReal">
			<Name>LineNumber</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>FixedAssetNumber</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>BookId</Name>
			<ExtendedDataType>AssetBookIdPurchSalesInvent</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>