<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetGroupDepTransMap_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetGroupDepTransMap_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetGroupInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset group information.
    /// </summary>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The instance of the <c>AssetGroupInformation_IN</c> class.
    /// </returns>
    public AssetGroupInformation_IN assetGroupInformation(boolean   _forupdate  = false)
    {
        return AssetGroupInformation_IN::find(this.AssetGroupInformation, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTBonusDepPerDateTranstype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum of all amount for an asset for bonus depreciation.
    /// </summary>
    /// <param name="_depBookMap">
    /// AssetDepBookMap_IN Map to search for.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date to search for.
    /// </param>
    /// <param name="_transType">
    /// TransType to search for.
    /// </param>
    /// <returns>
    /// Sum of all amount for an asset.
    /// </returns>
    public static AmountMST amountMSTBonusDepPerDateTranstype(AssetDepBookMap_IN  _depBookMap,
                                                              TransDate           _transDate,
                                                              AssetTransType      _transType)

    {
        AssetGroupInformation_IN    assetGroupInformation;
        AssetGroupTrans_IN          assetGroupTrans_IN;

        select sum(AmountMst) from assetGroupInformation
            where assetGroupInformation.TransDate        < _transDate
                && assetGroupInformation.AssetGroup      == _depBookMap.AssetGroup
                && assetGroupInformation.TransType       == _transType
        join AssetGroupInformation from assetGroupTrans_IN
            where assetGroupTrans_IN.BookId                 == _depBookMap.AssetBookId
                && assetGroupTrans_IN.AssetGroupInformation == assetGroupInformation.RecId;

        return assetGroupInformation.AmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// The last transaction of an asset group and an asset book.
    /// </summary>
    /// <param name="_depBookMap">
    /// <c>AssetDepBooMap_IN</c> record.
    /// </param>
    /// <param name="_assetTransType">
    /// Asset transaction type.
    /// </param>
    /// <param name="_includeReversedTrans">
    /// True to include reversed transaction; optional.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The last transaction of an asset group and an asset book.
    /// </returns>
    public static AssetGroupDepTransMap_IN findLast(
        AssetDepBookMap_IN      _depBookMap,
        AssetTransType          _assetTransType,
        boolean                 _includeReversedTrans = false,
        TransDate               _transDate = maxDate(),
        boolean                 _forUpdate = false)
    {
        AssetGroupTrans_IN          assetGroupTransIN;
        AssetGroupInformation_IN    assetGroupInformation;
        TransactionReversalTrans    transactionReversalTrans;

        if (_depBookMap)
        {
            assetGroupTransIN.selectForUpdate(_forUpdate);

            select firstonly assetGroupTransIN
                order by assetGroupInformation.TransDate desc
                where assetGroupTransIN.BookId          == _depBookMap.AssetBookId
                    && assetGroupTransIN.AssetId        == _depBookMap.AssetId
                join assetGroupInformation
                    where assetGroupInformation.RecId       == assetGroupTransIN.AssetGroupInformation
                      && assetGroupInformation.AssetGroup   == _depBookMap.AssetGroup
                      && assetGroupInformation.TransType    == _assetTransType
                      && assetGroupInformation.TransDate    <= _transDate
                notexists join transactionReversalTrans
                    where   transactionReversalTrans.RefTableId == tableNum(AssetGroupTrans_IN)
                        && transactionReversalTrans.RefRecId == assetGroupTransIN.RecId
                        && (!_includeReversedTrans && transactionReversalTrans.Reversed);
        }

        return assetGroupTransIN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the netBookValue that exist for the asset book and asset depreciation book.
    /// </summary>
    /// <param name="_depBookMap">
    /// The Asset Depreciation Book Map.
    /// </param>
    /// <param name="_transDate">
    /// The Transaction Date.
    /// </param>
    /// <returns>
    /// The Net book value that exist for the asset book and asset depreciation book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function bonusCount has been incorrectly called.
    /// </exception>
    public static AssetAmount netBookValue(AssetDepBookMap_IN _depBookMap, AssetTransDate _transDate)
    {
        AssetAmount     netBookValue;

        switch (_depBookMap.TableId)
        {
            case tableNum(AssetBook):
                netBookValue = AssetGroupTrans_IN::netBookValue(_depBookMap.AssetGroup, _transDate, _depBookMap.AssetBookId, _depBookMap.AssetId);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return netBookValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets_AdditionalDepreciation:SYP4883998</DeveloperDocumentation>
	<Label>@FixedAssets_AdditionalDepreciation:SYP4883994</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetBookId</Name>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>AssetGroupInformation</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>AssetId</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
	</Fields>
	<Mappings />
</AxMap>