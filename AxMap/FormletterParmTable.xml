<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterParmTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FormletterParmTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    void updateParmJobStatusContainErrors()
    {
        this.ParmJobStatus = ParmJobStatus::ContainErrors;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusExecuted</Name>
				<Source><![CDATA[
    void  updateParmJobStatusExecuted()
    {
        this.ParmJobStatus = ParmJobStatus::Executed;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCopyDocuRefOnLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>DocuRef</c> records should be copied from source line to journal line.
    /// </summary>
    /// <param name="_formletterParmTable">
    /// A <c>FormletterParmTable</c> record.
    /// </param>
    /// <returns>
    /// true if  <c>DocuRef</c> records should be copied; otherwise, false.
    /// </returns>
    public static boolean doCopyDocuRefOnLines(FormletterParmTable _formletterParmTable)
    {
        FormletterParmLine  parmLine;
        PurchParmLine       purchParmLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        SalesParmLine       salesParmLine;
        SalesLine           salesLine;
        PurchLine           purchLine;
        DocuRef             docuRef;
        TableId             tableId;
        DataAreaId          dataAreaId;

        switch (_formletterParmTable.TableId)
        {
            case tableNum(PurchParmTable) :
                parmLine    = purchParmLine;
                tableId     = purchLine.TableId;
                dataAreaId  = purchLine.DataAreaId;
                break;

            case tableNum(SalesParmTable) :
                parmLine = salesParmLine;
                tableId     = salesLine.TableId;
                dataAreaId  = salesLine.DataAreaId;
                break;

            case tableNum(VendInvoiceInfoTable):
                parmLine = vendInvoiceInfoLine;
                tableId     = purchLine.TableId;
                dataAreaId  = purchLine.DataAreaId;
                break;

            default :
                return true;
        }
        select firstonly RecId from parmLine
            where parmLine.ParmId          == _formletterParmTable.ParmId
                && parmLine.TableRefId     == _formletterParmTable.TableRefId
            exists join docuRef
                where docuRef.RefCompanyId == dataAreaId
                    && docuRef.RefTableId  == tableId
                    && docuRef.RefRecId    == parmLine.SourceLineRecId;

        return parmLine.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the totals object for Vendor Invoices only.
    /// </summary>
    /// <param name="_formletterParmTable">
    /// A <c>FormletterParmTable</c> record.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// A <c>PurchParmUpdate</c> record.
    /// </param>
    /// <returns>
    /// A totals object for the corresponding <c> FormletterParmTable </c> object
    /// </returns>
    public static Object getTotals(FormletterParmTable _formletterParmTable, PurchParmUpdate _purchParmUpdate)
    {
        switch (_formletterParmTable.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
                return PurchTotals::newParmTable(_formletterParmTable, PurchUpdate::All, _purchParmUpdate.ParmId, _purchParmUpdate.SumPurchId, DocumentStatus::Invoice, PurchTotalsCachingMethod::Reuse);

            default:
                return null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318813</DeveloperDocumentation>
	<Label>@SYS127531</Label>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>BankLCLine</Name>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DocumentDate_W</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<ExtendedDataType>EndDateTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>Hold</Name>
			<ExtendedDataType>Hold</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>Log</Name>
			<ExtendedDataType>LogText</ExtendedDataType>
			<StringSize>255</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>MCRPackingBoxName</Name>
			<ExtendedDataType>MCRPackingBoxName</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>ParmId</Name>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldEnum">
			<Name>ParmJobStatus</Name>
			<EnumType>ParmJobStatus</EnumType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<ExtendedDataType>StartDateTime</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TableRefId</Name>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>TransDate_W</Name>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<GroupPrompt>@SYS7402</GroupPrompt>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>VendDocumentTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmJobStatus</MapField>
					<MapFieldTo>ParmJobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDateTime</MapField>
					<MapFieldTo>StartDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDateTime</MapField>
					<MapFieldTo>EndDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Hold</MapField>
					<MapFieldTo>Hold</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCImportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate_W</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate_W</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPackingBoxName</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>